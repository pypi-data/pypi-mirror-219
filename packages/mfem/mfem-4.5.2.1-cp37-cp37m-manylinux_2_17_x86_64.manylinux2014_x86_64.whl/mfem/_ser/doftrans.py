# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _doftrans
else:
    import _doftrans

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _doftrans.SWIG_PyInstanceMethod_New
_swig_new_static_method = _doftrans.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.fe
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.vector
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.densemat
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.sparsemat
import mfem._ser.fe_base
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
class DofTransformation(object):
    r"""Proxy of C++ mfem::DofTransformation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Size(self):
        r"""Size(DofTransformation self) -> int"""
        return _doftrans.DofTransformation_Size(self)
    Size = _swig_new_instance_method(_doftrans.DofTransformation_Size)

    def Height(self):
        r"""Height(DofTransformation self) -> int"""
        return _doftrans.DofTransformation_Height(self)
    Height = _swig_new_instance_method(_doftrans.DofTransformation_Height)

    def NumRows(self):
        r"""NumRows(DofTransformation self) -> int"""
        return _doftrans.DofTransformation_NumRows(self)
    NumRows = _swig_new_instance_method(_doftrans.DofTransformation_NumRows)

    def Width(self):
        r"""Width(DofTransformation self) -> int"""
        return _doftrans.DofTransformation_Width(self)
    Width = _swig_new_instance_method(_doftrans.DofTransformation_Width)

    def NumCols(self):
        r"""NumCols(DofTransformation self) -> int"""
        return _doftrans.DofTransformation_NumCols(self)
    NumCols = _swig_new_instance_method(_doftrans.DofTransformation_NumCols)

    def SetFaceOrientations(self, face_orientation):
        r"""SetFaceOrientations(DofTransformation self, intArray face_orientation)"""
        return _doftrans.DofTransformation_SetFaceOrientations(self, face_orientation)
    SetFaceOrientations = _swig_new_instance_method(_doftrans.DofTransformation_SetFaceOrientations)

    def GetFaceOrientations(self):
        r"""GetFaceOrientations(DofTransformation self) -> intArray"""
        return _doftrans.DofTransformation_GetFaceOrientations(self)
    GetFaceOrientations = _swig_new_instance_method(_doftrans.DofTransformation_GetFaceOrientations)

    def TransformPrimal(self, *args):
        r"""
        TransformPrimal(DofTransformation self, double * v)
        TransformPrimal(DofTransformation self, Vector v)
        """
        return _doftrans.DofTransformation_TransformPrimal(self, *args)
    TransformPrimal = _swig_new_instance_method(_doftrans.DofTransformation_TransformPrimal)

    def TransformPrimalCols(self, V):
        r"""TransformPrimalCols(DofTransformation self, DenseMatrix V)"""
        return _doftrans.DofTransformation_TransformPrimalCols(self, V)
    TransformPrimalCols = _swig_new_instance_method(_doftrans.DofTransformation_TransformPrimalCols)

    def InvTransformPrimal(self, *args):
        r"""
        InvTransformPrimal(DofTransformation self, double * v)
        InvTransformPrimal(DofTransformation self, Vector v)
        """
        return _doftrans.DofTransformation_InvTransformPrimal(self, *args)
    InvTransformPrimal = _swig_new_instance_method(_doftrans.DofTransformation_InvTransformPrimal)

    def InvTransformDual(self, *args):
        r"""
        InvTransformDual(DofTransformation self, double * v)
        InvTransformDual(DofTransformation self, Vector v)
        """
        return _doftrans.DofTransformation_InvTransformDual(self, *args)
    InvTransformDual = _swig_new_instance_method(_doftrans.DofTransformation_InvTransformDual)

    def TransformDual(self, *args):
        r"""
        TransformDual(DofTransformation self, double * v)
        TransformDual(DofTransformation self, Vector v)
        TransformDual(DofTransformation self, DenseMatrix V)
        """
        return _doftrans.DofTransformation_TransformDual(self, *args)
    TransformDual = _swig_new_instance_method(_doftrans.DofTransformation_TransformDual)

    def TransformDualRows(self, V):
        r"""TransformDualRows(DofTransformation self, DenseMatrix V)"""
        return _doftrans.DofTransformation_TransformDualRows(self, V)
    TransformDualRows = _swig_new_instance_method(_doftrans.DofTransformation_TransformDualRows)

    def TransformDualCols(self, V):
        r"""TransformDualCols(DofTransformation self, DenseMatrix V)"""
        return _doftrans.DofTransformation_TransformDualCols(self, V)
    TransformDualCols = _swig_new_instance_method(_doftrans.DofTransformation_TransformDualCols)
    __swig_destroy__ = _doftrans.delete_DofTransformation

# Register DofTransformation in _doftrans:
_doftrans.DofTransformation_swigregister(DofTransformation)

def TransformPrimal(ran_dof_trans, dom_dof_trans, elmat):
    r"""TransformPrimal(DofTransformation ran_dof_trans, DofTransformation dom_dof_trans, DenseMatrix elmat)"""
    return _doftrans.TransformPrimal(ran_dof_trans, dom_dof_trans, elmat)
TransformPrimal = _doftrans.TransformPrimal

def TransformDual(ran_dof_trans, dom_dof_trans, elmat):
    r"""TransformDual(DofTransformation ran_dof_trans, DofTransformation dom_dof_trans, DenseMatrix elmat)"""
    return _doftrans.TransformDual(ran_dof_trans, dom_dof_trans, elmat)
TransformDual = _doftrans.TransformDual
class VDofTransformation(DofTransformation):
    r"""Proxy of C++ mfem::VDofTransformation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetVDim(self, vdim):
        r"""SetVDim(VDofTransformation self, int vdim)"""
        return _doftrans.VDofTransformation_SetVDim(self, vdim)
    SetVDim = _swig_new_instance_method(_doftrans.VDofTransformation_SetVDim)

    def GetVDim(self):
        r"""GetVDim(VDofTransformation self) -> int"""
        return _doftrans.VDofTransformation_GetVDim(self)
    GetVDim = _swig_new_instance_method(_doftrans.VDofTransformation_GetVDim)

    def SetDofTransformation(self, doftrans):
        r"""SetDofTransformation(VDofTransformation self, DofTransformation doftrans)"""
        return _doftrans.VDofTransformation_SetDofTransformation(self, doftrans)
    SetDofTransformation = _swig_new_instance_method(_doftrans.VDofTransformation_SetDofTransformation)

    def GetDofTransformation(self):
        r"""GetDofTransformation(VDofTransformation self) -> DofTransformation"""
        return _doftrans.VDofTransformation_GetDofTransformation(self)
    GetDofTransformation = _swig_new_instance_method(_doftrans.VDofTransformation_GetDofTransformation)

    def SetFaceOrientation(self, face_orientation):
        r"""SetFaceOrientation(VDofTransformation self, intArray face_orientation)"""
        return _doftrans.VDofTransformation_SetFaceOrientation(self, face_orientation)
    SetFaceOrientation = _swig_new_instance_method(_doftrans.VDofTransformation_SetFaceOrientation)

    def TransformPrimal(self, *args):
        r"""
        TransformPrimal(VDofTransformation self, Vector v)
        TransformPrimal(VDofTransformation self, double * v)
        """
        return _doftrans.VDofTransformation_TransformPrimal(self, *args)
    TransformPrimal = _swig_new_instance_method(_doftrans.VDofTransformation_TransformPrimal)

    def InvTransformPrimal(self, *args):
        r"""
        InvTransformPrimal(VDofTransformation self, Vector v)
        InvTransformPrimal(VDofTransformation self, double * v)
        """
        return _doftrans.VDofTransformation_InvTransformPrimal(self, *args)
    InvTransformPrimal = _swig_new_instance_method(_doftrans.VDofTransformation_InvTransformPrimal)

    def TransformDual(self, *args):
        r"""
        TransformDual(VDofTransformation self, Vector v)
        TransformDual(VDofTransformation self, DenseMatrix V)
        TransformDual(VDofTransformation self, double * v)
        """
        return _doftrans.VDofTransformation_TransformDual(self, *args)
    TransformDual = _swig_new_instance_method(_doftrans.VDofTransformation_TransformDual)

    def InvTransformDual(self, *args):
        r"""
        InvTransformDual(VDofTransformation self, Vector v)
        InvTransformDual(VDofTransformation self, double * v)
        """
        return _doftrans.VDofTransformation_InvTransformDual(self, *args)
    InvTransformDual = _swig_new_instance_method(_doftrans.VDofTransformation_InvTransformDual)
    __swig_destroy__ = _doftrans.delete_VDofTransformation

# Register VDofTransformation in _doftrans:
_doftrans.VDofTransformation_swigregister(VDofTransformation)
class ND_DofTransformation(DofTransformation):
    r"""Proxy of C++ mfem::ND_DofTransformation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def GetFaceTransform(ori):
        r"""GetFaceTransform(int ori) -> DenseMatrix"""
        return _doftrans.ND_DofTransformation_GetFaceTransform(ori)
    GetFaceTransform = _swig_new_static_method(_doftrans.ND_DofTransformation_GetFaceTransform)

    @staticmethod
    def GetFaceInverseTransform(ori):
        r"""GetFaceInverseTransform(int ori) -> DenseMatrix"""
        return _doftrans.ND_DofTransformation_GetFaceInverseTransform(ori)
    GetFaceInverseTransform = _swig_new_static_method(_doftrans.ND_DofTransformation_GetFaceInverseTransform)
    __swig_destroy__ = _doftrans.delete_ND_DofTransformation

# Register ND_DofTransformation in _doftrans:
_doftrans.ND_DofTransformation_swigregister(ND_DofTransformation)
class ND_TriDofTransformation(ND_DofTransformation):
    r"""Proxy of C++ mfem::ND_TriDofTransformation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def TransformPrimal(self, *args):
        r"""
        TransformPrimal(ND_TriDofTransformation self, Vector v)
        TransformPrimal(ND_TriDofTransformation self, double * v)
        """
        return _doftrans.ND_TriDofTransformation_TransformPrimal(self, *args)
    TransformPrimal = _swig_new_instance_method(_doftrans.ND_TriDofTransformation_TransformPrimal)

    def InvTransformPrimal(self, *args):
        r"""
        InvTransformPrimal(ND_TriDofTransformation self, Vector v)
        InvTransformPrimal(ND_TriDofTransformation self, double * v)
        """
        return _doftrans.ND_TriDofTransformation_InvTransformPrimal(self, *args)
    InvTransformPrimal = _swig_new_instance_method(_doftrans.ND_TriDofTransformation_InvTransformPrimal)

    def TransformDual(self, *args):
        r"""
        TransformDual(ND_TriDofTransformation self, Vector v)
        TransformDual(ND_TriDofTransformation self, DenseMatrix V)
        TransformDual(ND_TriDofTransformation self, double * v)
        """
        return _doftrans.ND_TriDofTransformation_TransformDual(self, *args)
    TransformDual = _swig_new_instance_method(_doftrans.ND_TriDofTransformation_TransformDual)

    def InvTransformDual(self, *args):
        r"""
        InvTransformDual(ND_TriDofTransformation self, double * v)
        InvTransformDual(ND_TriDofTransformation self, Vector v)
        """
        return _doftrans.ND_TriDofTransformation_InvTransformDual(self, *args)
    InvTransformDual = _swig_new_instance_method(_doftrans.ND_TriDofTransformation_InvTransformDual)
    __swig_destroy__ = _doftrans.delete_ND_TriDofTransformation

# Register ND_TriDofTransformation in _doftrans:
_doftrans.ND_TriDofTransformation_swigregister(ND_TriDofTransformation)
class ND_TetDofTransformation(ND_DofTransformation):
    r"""Proxy of C++ mfem::ND_TetDofTransformation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def TransformPrimal(self, *args):
        r"""
        TransformPrimal(ND_TetDofTransformation self, Vector v)
        TransformPrimal(ND_TetDofTransformation self, double * v)
        """
        return _doftrans.ND_TetDofTransformation_TransformPrimal(self, *args)
    TransformPrimal = _swig_new_instance_method(_doftrans.ND_TetDofTransformation_TransformPrimal)

    def InvTransformPrimal(self, *args):
        r"""
        InvTransformPrimal(ND_TetDofTransformation self, Vector v)
        InvTransformPrimal(ND_TetDofTransformation self, double * v)
        """
        return _doftrans.ND_TetDofTransformation_InvTransformPrimal(self, *args)
    InvTransformPrimal = _swig_new_instance_method(_doftrans.ND_TetDofTransformation_InvTransformPrimal)

    def TransformDual(self, *args):
        r"""
        TransformDual(ND_TetDofTransformation self, Vector v)
        TransformDual(ND_TetDofTransformation self, DenseMatrix V)
        TransformDual(ND_TetDofTransformation self, double * v)
        """
        return _doftrans.ND_TetDofTransformation_TransformDual(self, *args)
    TransformDual = _swig_new_instance_method(_doftrans.ND_TetDofTransformation_TransformDual)

    def InvTransformDual(self, *args):
        r"""
        InvTransformDual(ND_TetDofTransformation self, Vector v)
        InvTransformDual(ND_TetDofTransformation self, double * v)
        """
        return _doftrans.ND_TetDofTransformation_InvTransformDual(self, *args)
    InvTransformDual = _swig_new_instance_method(_doftrans.ND_TetDofTransformation_InvTransformDual)
    __swig_destroy__ = _doftrans.delete_ND_TetDofTransformation

# Register ND_TetDofTransformation in _doftrans:
_doftrans.ND_TetDofTransformation_swigregister(ND_TetDofTransformation)
class ND_WedgeDofTransformation(ND_DofTransformation):
    r"""Proxy of C++ mfem::ND_WedgeDofTransformation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def TransformPrimal(self, *args):
        r"""
        TransformPrimal(ND_WedgeDofTransformation self, Vector v)
        TransformPrimal(ND_WedgeDofTransformation self, double * v)
        """
        return _doftrans.ND_WedgeDofTransformation_TransformPrimal(self, *args)
    TransformPrimal = _swig_new_instance_method(_doftrans.ND_WedgeDofTransformation_TransformPrimal)

    def InvTransformPrimal(self, *args):
        r"""
        InvTransformPrimal(ND_WedgeDofTransformation self, Vector v)
        InvTransformPrimal(ND_WedgeDofTransformation self, double * v)
        """
        return _doftrans.ND_WedgeDofTransformation_InvTransformPrimal(self, *args)
    InvTransformPrimal = _swig_new_instance_method(_doftrans.ND_WedgeDofTransformation_InvTransformPrimal)

    def TransformDual(self, *args):
        r"""
        TransformDual(ND_WedgeDofTransformation self, Vector v)
        TransformDual(ND_WedgeDofTransformation self, DenseMatrix V)
        TransformDual(ND_WedgeDofTransformation self, double * v)
        """
        return _doftrans.ND_WedgeDofTransformation_TransformDual(self, *args)
    TransformDual = _swig_new_instance_method(_doftrans.ND_WedgeDofTransformation_TransformDual)

    def InvTransformDual(self, *args):
        r"""
        InvTransformDual(ND_WedgeDofTransformation self, Vector v)
        InvTransformDual(ND_WedgeDofTransformation self, double * v)
        """
        return _doftrans.ND_WedgeDofTransformation_InvTransformDual(self, *args)
    InvTransformDual = _swig_new_instance_method(_doftrans.ND_WedgeDofTransformation_InvTransformDual)
    __swig_destroy__ = _doftrans.delete_ND_WedgeDofTransformation

# Register ND_WedgeDofTransformation in _doftrans:
_doftrans.ND_WedgeDofTransformation_swigregister(ND_WedgeDofTransformation)

