{"version":3,"file":"chunks/app_views_replays_list_tsx-images_spot_replays-empty-state_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/utils/replays/hooks/useReplayOnboarding.tsx","webpack:///./app/utils/replays/hooks/useReplayPageview.tsx","webpack:///./app/utils/useProjectSdkNeedsUpdate.tsx","webpack:///./app/utils/useProjectSdkUpdates.tsx","webpack:///./app/utils/useTags.tsx","webpack:///./app/utils/versions.ts","webpack:///./app/views/replays/list/replaySearchBar.tsx","webpack:///./app/views/replays/list/filters.tsx","webpack:///./app/views/replays/list/replayOnboardingPanel.tsx","webpack:///./app/views/replays/list/replaysList.tsx","webpack:///./app/views/replays/list.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport Panel from 'sentry/components/panels/panel';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n  noCenter?: boolean;\n}\n\nfunction OnboardingPanel({image, noCenter, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image && !noCenter}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  min-width: 0;\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  min-width: 150px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useCallback, useEffect, useMemo} from 'react';\n\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {Project} from 'sentry/types';\nimport {PageFilters} from 'sentry/types/core';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\nfunction getSelectedProjectList(\n  selectedProjects: PageFilters['projects'],\n  projects: Project[]\n) {\n  if (selectedProjects[0] === ALL_ACCESS_PROJECTS || selectedProjects.length === 0) {\n    return projects;\n  }\n\n  const projectsByProjectId = projects.reduce<Record<string, Project>>((acc, project) => {\n    acc[project.id] = project;\n    return acc;\n  }, {});\n  return selectedProjects.map(id => projectsByProjectId[id]).filter(Boolean);\n}\n\nexport function useHasOrganizationSentAnyReplayEvents() {\n  const {projects, fetching} = useProjects();\n  const hasOrgSentReplays = useMemo(() => projects.some(p => p.hasReplays), [projects]);\n  return {hasOrgSentReplays, fetching};\n}\n\nexport function useHaveSelectedProjectsSentAnyReplayEvents() {\n  const {projects, fetching} = useProjects();\n  const {selection} = usePageFilters();\n\n  const orgSentOneOrMoreReplayEvent = useMemo(() => {\n    const selectedProjects = getSelectedProjectList(selection.projects, projects);\n    const hasSentOneReplay = selectedProjects.some(project => project.hasReplays);\n    return hasSentOneReplay;\n  }, [selection.projects, projects]);\n\n  return {\n    hasSentOneReplay: orgSentOneOrMoreReplayEvent,\n    fetching,\n  };\n}\n\nexport function useReplayOnboardingSidebarPanel() {\n  const {location} = useRouteContext();\n  const organization = useOrganization();\n\n  useEffect(() => {\n    if (location.hash === '#replay-sidequest') {\n      SidebarPanelStore.activatePanel(SidebarPanelKey.REPLAYS_ONBOARDING);\n      trackAnalytics('replay.list-view-setup-sidebar', {\n        organization,\n      });\n    }\n  }, [location.hash, organization]);\n\n  const activateSidebar = useCallback((event: {preventDefault: () => void}) => {\n    event.preventDefault();\n    window.location.hash = 'replay-sidequest';\n    SidebarPanelStore.activatePanel(SidebarPanelKey.REPLAYS_ONBOARDING);\n  }, []);\n\n  return {activateSidebar};\n}\n","import {useEffect, useRef} from 'react';\n\nimport ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nfunction useReplayPageview(type: 'replay.details-time-spent' | 'replay.list-time-spent') {\n  const config = useLegacyStore(ConfigStore);\n  const organization = useOrganization();\n  const startTimeRef = useRef(Date.now());\n\n  useEffect(() => {\n    const startTime = startTimeRef.current;\n\n    return () => {\n      const endTime = Date.now();\n      trackAnalytics(type, {\n        organization,\n        seconds: (endTime - startTime) / 1000,\n        user_email: config.user.email,\n      });\n    };\n  }, [organization, type, config.user.email]);\n}\n\nexport default useReplayPageview;\n","import {Organization} from 'sentry/types';\nimport {useProjectSdkUpdates} from 'sentry/utils/useProjectSdkUpdates';\nimport {semverCompare} from 'sentry/utils/versions';\n\ntype Opts = {\n  minVersion: string;\n  organization: Organization;\n  projectId: string[];\n};\n\nfunction useProjectSdkNeedsUpdate({minVersion, organization, projectId}: Opts):\n  | {\n      isFetching: true;\n      needsUpdate: undefined;\n    }\n  | {\n      isFetching: false;\n      needsUpdate: boolean;\n    } {\n  const sdkUpdates = useProjectSdkUpdates({\n    organization,\n    projectId: null,\n  });\n\n  if (sdkUpdates.type !== 'resolved') {\n    return {isFetching: true, needsUpdate: undefined};\n  }\n\n  if (!sdkUpdates.data?.length) {\n    return {isFetching: true, needsUpdate: undefined};\n  }\n\n  const selectedProjects = sdkUpdates.data.filter(sdkUpdate =>\n    projectId.includes(sdkUpdate.projectId)\n  );\n\n  const needsUpdate =\n    selectedProjects.length > 0 &&\n    selectedProjects.every(\n      sdkUpdate => semverCompare(sdkUpdate.sdkVersion || '', minVersion) === -1\n    );\n\n  return {isFetching: false, needsUpdate};\n}\n\nexport default useProjectSdkNeedsUpdate;\n","import {useEffect, useMemo, useState} from 'react';\n\nimport {Client} from 'sentry/api';\nimport {RequestState} from 'sentry/types';\n\nimport {Organization} from '../types/organization';\nimport {Project, ProjectSdkUpdates} from '../types/project';\n\nimport useApi from './useApi';\n\nfunction loadSdkUpdates(api: Client, orgSlug: string): Promise<ProjectSdkUpdates[]> {\n  return api.requestPromise(`/organizations/${orgSlug}/sdk-updates/`);\n}\n\ninterface UseProjectSdkOptions {\n  organization: Organization;\n  projectId: Project['id'] | null;\n}\nexport function useProjectSdkUpdates(\n  options: UseProjectSdkOptions & {projectId: null}\n): RequestState<ProjectSdkUpdates[] | null>;\nexport function useProjectSdkUpdates(\n  options: UseProjectSdkOptions & {projectId: Project['id']}\n): RequestState<ProjectSdkUpdates | null>;\nexport function useProjectSdkUpdates(\n  options: UseProjectSdkOptions\n): RequestState<ProjectSdkUpdates | ProjectSdkUpdates[] | null> {\n  const api = useApi();\n  const [state, setState] = useState<RequestState<ProjectSdkUpdates[] | null>>({\n    type: 'initial',\n  });\n\n  useEffect(() => {\n    let unmounted = false;\n\n    loadSdkUpdates(api, options.organization.slug)\n      .then(data => {\n        if (unmounted) {\n          return;\n        }\n\n        setState({\n          type: 'resolved',\n          data,\n        });\n      })\n      .catch(e => {\n        if (unmounted) {\n          return;\n        }\n        setState({\n          type: 'errored',\n          error: e,\n        });\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, options.organization.slug]);\n\n  const stateForProject = useMemo((): RequestState<\n    ProjectSdkUpdates[] | ProjectSdkUpdates | null\n  > => {\n    if (!options.projectId) {\n      return {\n        ...state,\n        type: 'resolved',\n        data: state.type === 'resolved' && state.data ? state.data : null,\n      };\n    }\n    if (state.type === 'resolved') {\n      return {\n        ...state,\n        type: 'resolved',\n        data:\n          state.type === 'resolved' && state.data\n            ? state.data.find(sdk => sdk.projectId === options.projectId) ?? null\n            : null,\n      };\n    }\n\n    return state;\n  }, [state, options.projectId]);\n\n  return stateForProject;\n}\n","import TagStore from 'sentry/stores/tagStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {TagCollection} from 'sentry/types';\n\nfunction useTags(): TagCollection {\n  return useLegacyStore(TagStore);\n}\n\nexport default useTags;\n","/**\n * Semantic Versioning Comparing\n * #see https://semver.org/\n * #see https://stackoverflow.com/a/65687141/456536\n * #see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#options\n * Taken from https://gist.github.com/iwill/a83038623ba4fef6abb9efca87ae9ccb\n * returns -1 for smaller, 0 for equals, and 1 for greater than\n */\nexport function semverCompare(a: string, b: string): number {\n  if (a.startsWith(b + '-')) {\n    return -1;\n  }\n  if (b.startsWith(a + '-')) {\n    return 1;\n  }\n  return a.localeCompare(b, undefined, {\n    numeric: true,\n    sensitivity: 'case',\n    caseFirst: 'upper',\n  });\n}\n","import {useCallback, useEffect} from 'react';\n\nimport {fetchTagValues, loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH, NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {\n  Organization,\n  PageFilters,\n  SavedSearchType,\n  Tag,\n  TagCollection,\n  TagValue,\n} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport {isAggregateField} from 'sentry/utils/discover/fields';\nimport {\n  FieldKind,\n  getFieldDefinition,\n  REPLAY_CLICK_FIELDS,\n  REPLAY_FIELDS,\n} from 'sentry/utils/fields';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport useTags from 'sentry/utils/useTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\n/**\n * Prepare query string (e.g. strip special characters like negation operator)\n */\nfunction prepareQuery(searchQuery: string) {\n  return searchQuery.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n}\nconst getReplayFieldDefinition = (key: string) => getFieldDefinition(key, 'replay');\n\nfunction fieldDefinitionsToTagCollection(fieldKeys: string[]): TagCollection {\n  return Object.fromEntries(\n    fieldKeys.map(key => [\n      key,\n      {\n        key,\n        name: key,\n        ...getReplayFieldDefinition(key),\n      },\n    ])\n  );\n}\n\nconst REPLAY_FIELDS_AS_TAGS = fieldDefinitionsToTagCollection(REPLAY_FIELDS);\nconst REPLAY_CLICK_FIELDS_AS_TAGS = fieldDefinitionsToTagCollection(REPLAY_CLICK_FIELDS);\n\nfunction getSupportedTags(supportedTags: TagCollection) {\n  return {\n    ...Object.fromEntries(\n      Object.keys(supportedTags).map(key => [\n        key,\n        {\n          ...supportedTags[key],\n          kind: getReplayFieldDefinition(key)?.kind ?? FieldKind.TAG,\n        },\n      ])\n    ),\n    ...REPLAY_CLICK_FIELDS_AS_TAGS,\n    ...REPLAY_FIELDS_AS_TAGS,\n  };\n}\n\ntype Props = React.ComponentProps<typeof SmartSearchBar> & {\n  organization: Organization;\n  pageFilters: PageFilters;\n};\n\nfunction ReplaySearchBar(props: Props) {\n  const {organization, pageFilters} = props;\n  const api = useApi();\n  const projectIdStrings = pageFilters.projects?.map(String);\n  const tags = useTags();\n  useEffect(() => {\n    loadOrganizationTags(api, organization.slug, pageFilters);\n  }, [api, organization.slug, pageFilters]);\n\n  const getTagValues = useCallback(\n    (tag: Tag, searchQuery: string, _params: object): Promise<string[]> => {\n      if (isAggregateField(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: searchQuery,\n        projectIds: projectIdStrings,\n        includeReplays: true,\n      }).then(\n        tagValues => (tagValues as TagValue[]).map(({value}) => value),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    [api, organization.slug, projectIdStrings]\n  );\n\n  return (\n    <SmartSearchBar\n      {...props}\n      onGetTagValues={getTagValues}\n      supportedTags={getSupportedTags(tags)}\n      placeholder={t(\n        'Search for users, duration, clicked elements, count_errors, and more'\n      )}\n      prepareQuery={prepareQuery}\n      maxQueryLength={MAX_QUERY_LENGTH}\n      searchSource=\"replay_index\"\n      savedSearchType={SavedSearchType.REPLAY}\n      maxMenuHeight={500}\n      hasRecentSearches\n      fieldDefinitionGetter={getReplayFieldDefinition}\n      mergeSearchGroupWith={{\n        click: {\n          documentation: t('Search by click selector. (Requires SDK version >= 7.44.0)'),\n          titleBadge: <FeatureBadge type=\"new\">{t('New')}</FeatureBadge>,\n        },\n      }}\n      onSearch={(query: string) => {\n        props.onSearch?.(query);\n        const conditions = new MutableSearch(query);\n        const searchKeys = conditions.tokens.map(({key}) => key).filter(Boolean);\n\n        if (searchKeys.length > 0) {\n          trackAnalytics('replay.search', {\n            search_keys: searchKeys.join(','),\n            organization,\n          });\n        }\n      }}\n    />\n  );\n}\n\nexport default ReplaySearchBar;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {space} from 'sentry/styles/space';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport ReplaySearchBar from 'sentry/views/replays/list/replaySearchBar';\n\nfunction ReplaysFilters() {\n  const {selection} = usePageFilters();\n  const {pathname, query} = useLocation();\n  const organization = useOrganization();\n\n  return (\n    <FilterContainer>\n      <PageFilterBar condensed>\n        <ProjectPageFilter resetParamsOnChange={['cursor']} />\n        <EnvironmentPageFilter resetParamsOnChange={['cursor']} />\n        <DatePageFilter alignDropdown=\"left\" resetParamsOnChange={['cursor']} />\n      </PageFilterBar>\n      <ReplaySearchBar\n        organization={organization}\n        pageFilters={selection}\n        defaultQuery=\"\"\n        query={decodeScalar(query.query, '')}\n        onSearch={searchQuery => {\n          browserHistory.push({\n            pathname,\n            query: {\n              ...query,\n              cursor: undefined,\n              query: searchQuery.trim(),\n            },\n          });\n        }}\n      />\n    </FilterContainer>\n  );\n}\n\nconst FilterContainer = styled('div')`\n  display: inline-grid;\n  grid-template-columns: minmax(0, max-content) minmax(20rem, 1fr);\n  gap: ${space(2)};\n  width: 100%;\n  margin-bottom: ${space(2)};\n\n  @media (max-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\n\nexport default ReplaysFilters;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/replays-empty-state.svg';\n\nimport Alert from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {useProjectCreationAccess} from 'sentry/components/projects/useProjectCreationAccess';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {replayPlatforms} from 'sentry/data/platformCategories';\nimport {IconInfo} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport PreferencesStore from 'sentry/stores/preferencesStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {useReplayOnboardingSidebarPanel} from 'sentry/utils/replays/hooks/useReplayOnboarding';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useTeams} from 'sentry/utils/useTeams';\n\ntype Breakpoints = {\n  large: string;\n  medium: string;\n  small: string;\n  xlarge: string;\n};\n\nconst OnboardingCTAHook = HookOrDefault({\n  hookName: 'component:replay-onboarding-cta',\n  defaultComponent: ({children}) => <Fragment>{children}</Fragment>,\n});\n\nconst OnboardingAlertHook = HookOrDefault({\n  hookName: 'component:replay-onboarding-alert',\n  defaultComponent: ({children}) => <Fragment>{children}</Fragment>,\n});\n\nexport default function ReplayOnboardingPanel() {\n  const preferences = useLegacyStore(PreferencesStore);\n  const pageFilters = usePageFilters();\n  const projects = useProjects();\n  const organization = useOrganization();\n  const {teams} = useTeams();\n  const {canCreateProject} = useProjectCreationAccess({organization, teams});\n\n  const selectedProjects = projects.projects.filter(p =>\n    pageFilters.selection.projects.includes(Number(p.id))\n  );\n\n  const hasSelectedProjects = selectedProjects.length > 0;\n\n  const allProjectsUnsupported = projects.projects.every(\n    p => !replayPlatforms.includes(p.platform!)\n  );\n\n  const allSelectedProjectsUnsupported = selectedProjects.every(\n    p => !replayPlatforms.includes(p.platform!)\n  );\n\n  // if all projects are unsupported we should prompt the user to create a project\n  // else we prompt to setup\n  const primaryAction = allProjectsUnsupported ? 'create' : 'setup';\n  // disable \"create\" if the user has insufficient permissions\n  // disable \"setup\" if the current selected pageFilters are not supported\n  const primaryActionDisabled =\n    primaryAction === 'create'\n      ? !canCreateProject\n      : allSelectedProjectsUnsupported && hasSelectedProjects;\n\n  const breakpoints = preferences.collapsed\n    ? {\n        small: '800px',\n        medium: '992px',\n        large: '1210px',\n        xlarge: '1450px',\n      }\n    : {\n        small: '800px',\n        medium: '1175px',\n        large: '1375px',\n        xlarge: '1450px',\n      };\n\n  return (\n    <Fragment>\n      <OnboardingAlertHook>\n        {hasSelectedProjects && allSelectedProjectsUnsupported && (\n          <Alert icon={<IconInfo />}>\n            {tct(\n              `[projectMsg] [action] a project using our [link], or equivalent framework SDK.`,\n              {\n                action: primaryAction === 'create' ? t('Create') : t('Select'),\n                projectMsg: (\n                  <strong>\n                    {t(\n                      `Session Replay isn't available for project %s.`,\n                      selectedProjects[0].slug\n                    )}\n                  </strong>\n                ),\n                link: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/javascript/session-replay/\">\n                    {t('Sentry browser SDK package')}\n                  </ExternalLink>\n                ),\n              }\n            )}\n          </Alert>\n        )}\n      </OnboardingAlertHook>\n      <OnboardingPanel\n        image={<HeroImage src={emptyStateImg} breakpoints={breakpoints} />}\n      >\n        <OnboardingCTAHook organization={organization}>\n          <SetupReplaysCTA\n            orgSlug={organization.slug}\n            primaryAction={primaryAction}\n            disabled={primaryActionDisabled}\n          />\n        </OnboardingCTAHook>\n      </OnboardingPanel>\n    </Fragment>\n  );\n}\n\ninterface SetupReplaysCTAProps {\n  orgSlug: string;\n  primaryAction: 'setup' | 'create';\n  disabled?: boolean;\n}\n\nexport function SetupReplaysCTA({\n  disabled,\n  primaryAction = 'setup',\n  orgSlug,\n}: SetupReplaysCTAProps) {\n  const {activateSidebar} = useReplayOnboardingSidebarPanel();\n\n  function renderCTA() {\n    if (primaryAction === 'setup') {\n      return (\n        <Tooltip\n          title={\n            <span data-test-id=\"setup-replays-tooltip\">\n              {t('Select a supported project from the projects dropdown.')}\n            </span>\n          }\n          disabled={!disabled} // we only want to show the tooltip when the button is disabled\n        >\n          <Button\n            data-test-id=\"setup-replays-btn\"\n            onClick={activateSidebar}\n            priority=\"primary\"\n            disabled={disabled}\n          >\n            {t('Set Up Replays')}\n          </Button>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Tooltip\n        title={\n          <span data-test-id=\"create-project-tooltip\">\n            {t('You do not have permission to create a project.')}\n          </span>\n        }\n        disabled={!disabled}\n      >\n        <Button\n          data-test-id=\"create-project-btn\"\n          to={`/organizations/${orgSlug}/projects/new/`}\n          priority=\"primary\"\n          disabled={disabled}\n        >\n          {t('Create Project')}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Fragment>\n      <h3>{t('Get to the root cause faster')}</h3>\n      <p>\n        {t(\n          'See a video-like reproduction of your user sessions so you can see what happened before, during, and after an error or latency issue occurred.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        {renderCTA()}\n        <Button\n          href=\"https://docs.sentry.io/platforms/javascript/session-replay/\"\n          external\n        >\n          {t('Read Docs')}\n        </Button>\n      </ButtonList>\n    </Fragment>\n  );\n}\n\nconst HeroImage = styled('img')<{breakpoints: Breakpoints}>`\n  @media (min-width: ${p => p.breakpoints.small}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.breakpoints.medium}) {\n    transform: translateX(-55%);\n    width: 300px;\n    min-width: 300px;\n  }\n\n  @media (min-width: ${p => p.breakpoints.large}) {\n    transform: translateX(-60%);\n    width: 380px;\n    min-width: 380px;\n  }\n\n  @media (min-width: ${p => p.breakpoints.xlarge}) {\n    transform: translateX(-65%);\n    width: 420px;\n    min-width: 420px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n","import {Fragment, useMemo} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Pagination from 'sentry/components/pagination';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT} from 'sentry/utils/replays/fetchReplayList';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useHaveSelectedProjectsSentAnyReplayEvents} from 'sentry/utils/replays/hooks/useReplayOnboarding';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjectSdkNeedsUpdate from 'sentry/utils/useProjectSdkNeedsUpdate';\nimport ReplayOnboardingPanel from 'sentry/views/replays/list/replayOnboardingPanel';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayColumn} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\nimport {REPLAY_LIST_FIELDS} from 'sentry/views/replays/types';\n\nfunction ReplaysList() {\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n\n  const eventView = useMemo(() => {\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    return EventView.fromNewQueryWithLocation(\n      {\n        id: '',\n        name: '',\n        version: 2,\n        fields: REPLAY_LIST_FIELDS,\n        projects: [],\n        query: conditions.formatString(),\n        orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n      },\n      location\n    );\n  }, [location]);\n\n  const hasSessionReplay = organization.features.includes('session-replay');\n  const {hasSentOneReplay, fetching} = useHaveSelectedProjectsSentAnyReplayEvents();\n\n  return hasSessionReplay && !fetching && hasSentOneReplay ? (\n    <ReplaysListTable\n      eventView={eventView}\n      location={location}\n      organization={organization}\n    />\n  ) : (\n    <ReplayOnboardingPanel />\n  );\n}\n\nconst MIN_REPLAY_CLICK_SDK = '7.44.0';\n\nfunction ReplaysListTable({\n  eventView,\n  location,\n  organization,\n}: {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n}) {\n  const {replays, pageLinks, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  const {\n    selection: {projects},\n  } = usePageFilters();\n\n  const {needsUpdate: allSelectedProjectsNeedUpdates} = useProjectSdkNeedsUpdate({\n    minVersion: MIN_REPLAY_CLICK_SDK,\n    organization,\n    projectId: projects.map(p => String(p)),\n  });\n\n  const conditions = useMemo(() => {\n    return new MutableSearch(decodeScalar(location.query.query, ''));\n  }, [location.query.query]);\n\n  const hasReplayClick = conditions.getFilterKeys().some(k => k.startsWith('click.'));\n\n  return (\n    <Fragment>\n      <ReplayTable\n        fetchError={fetchError}\n        isFetching={isFetching}\n        replays={replays}\n        sort={eventView.sorts[0]}\n        visibleColumns={[\n          ReplayColumn.REPLAY,\n          ReplayColumn.OS,\n          ReplayColumn.BROWSER,\n          ReplayColumn.DURATION,\n          ReplayColumn.COUNT_ERRORS,\n          ReplayColumn.ACTIVITY,\n        ]}\n        emptyMessage={\n          allSelectedProjectsNeedUpdates && hasReplayClick ? (\n            <Fragment>\n              {t('Unindexed search field')}\n              <EmptyStateSubheading>\n                {tct('Field [field] requires an [sdkPrompt]', {\n                  field: <strong>'click'</strong>,\n                  sdkPrompt: <strong>{t('SDK version >= 7.44.0')}</strong>,\n                })}\n              </EmptyStateSubheading>\n            </Fragment>\n          ) : undefined\n        }\n      />\n      <Pagination\n        pageLinks={pageLinks}\n        onCursor={(cursor, path, searchQuery) => {\n          trackAnalytics('replay.list-paginated', {\n            organization,\n            direction: cursor?.endsWith(':1') ? 'prev' : 'next',\n          });\n          browserHistory.push({\n            pathname: path,\n            query: {...searchQuery, cursor},\n          });\n        }}\n      />\n    </Fragment>\n  );\n}\n\nconst EmptyStateSubheading = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default ReplaysList;\n","import * as Layout from 'sentry/components/layouts/thirds';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {PageHeadingQuestionTooltip} from 'sentry/components/pageHeadingQuestionTooltip';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport useReplayPageview from 'sentry/utils/replays/hooks/useReplayPageview';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplaysFilters from 'sentry/views/replays/list/filters';\nimport ReplaysList from 'sentry/views/replays/list/replaysList';\n\nfunction ReplaysListContainer() {\n  useReplayPageview('replay.list-time-spent');\n  const {slug: orgSlug} = useOrganization();\n\n  return (\n    <SentryDocumentTitle title={`Session Replay — ${orgSlug}`}>\n      <Layout.Header>\n        <Layout.HeaderContent>\n          <Layout.Title>\n            {t('Session Replay')}\n            <PageHeadingQuestionTooltip\n              title={t(\n                'A view of available video-like reproductions of user sessions so you can visualize repro steps to debug issues faster.'\n              )}\n              docsUrl=\"https://docs.sentry.io/product/session-replay/\"\n            />\n          </Layout.Title>\n        </Layout.HeaderContent>\n      </Layout.Header>\n      <PageFiltersContainer>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <ReplaysFilters />\n            <ReplaysList />\n          </Layout.Main>\n        </Layout.Body>\n      </PageFiltersContainer>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default ReplaysListContainer;\n"],"names":["OnboardingPanel","_ref","image","noCenter","children","props","_jsx","Panel","_jsxs","Container","IlloBox","StyledBox","centered","displayName","_styled","target","space","p","theme","breakpoints","small","medium","useHasOrganizationSentAnyReplayEvents","projects","fetching","useProjects","hasOrgSentReplays","useMemo","some","hasReplays","useHaveSelectedProjectsSentAnyReplayEvents","selection","usePageFilters","orgSentOneOrMoreReplayEvent","selectedProjects","ALL_ACCESS_PROJECTS","length","projectsByProjectId","reduce","acc","project","id","map","filter","Boolean","getSelectedProjectList","hasSentOneReplay","useReplayOnboardingSidebarPanel","location","useRouteContext","organization","useOrganization","useEffect","hash","SidebarPanelStore","activatePanel","SidebarPanelKey","REPLAYS_ONBOARDING","trackAnalytics","activateSidebar","useCallback","event","preventDefault","window","type","config","useLegacyStore","ConfigStore","startTimeRef","useRef","Date","now","startTime","current","endTime","seconds","user_email","user","email","minVersion","projectId","sdkUpdates","options","api","useApi","state","setState","useState","unmounted","orgSlug","requestPromise","loadSdkUpdates","slug","then","data","catch","e","error","find","sdk","useProjectSdkUpdates","isFetching","needsUpdate","undefined","sdkUpdate","includes","every","semverCompare","sdkVersion","TagStore","a","b","startsWith","localeCompare","numeric","sensitivity","caseFirst","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","prepareQuery","searchQuery","replace","getReplayFieldDefinition","key","getFieldDefinition","fieldDefinitionsToTagCollection","fieldKeys","Object","fromEntries","name","REPLAY_FIELDS_AS_TAGS","REPLAY_FIELDS","REPLAY_CLICK_FIELDS_AS_TAGS","REPLAY_CLICK_FIELDS","ReplaySearchBar","pageFilters","projectIdStrings","String","tags","useTags","loadOrganizationTags","getTagValues","tag","_params","isAggregateField","Promise","resolve","fetchTagValues","tagKey","search","projectIds","includeReplays","tagValues","value","Error","SmartSearchBar","onGetTagValues","supportedTags","keys","kind","FieldKind","TAG","placeholder","t","maxQueryLength","MAX_QUERY_LENGTH","searchSource","savedSearchType","SavedSearchType","REPLAY","maxMenuHeight","hasRecentSearches","fieldDefinitionGetter","mergeSearchGroupWith","click","documentation","titleBadge","FeatureBadge","onSearch","query","searchKeys","MutableSearch","tokens","_ref2","search_keys","join","ReplaysFilters","pathname","useLocation","FilterContainer","PageFilterBar","condensed","ProjectPageFilter","resetParamsOnChange","EnvironmentPageFilter","DatePageFilter","alignDropdown","defaultQuery","decodeScalar","browserHistory","push","cursor","trim","large","OnboardingCTAHook","HookOrDefault","hookName","defaultComponent","Fragment","OnboardingAlertHook","ReplayOnboardingPanel","preferences","PreferencesStore","teams","useTeams","canCreateProject","useProjectCreationAccess","Number","hasSelectedProjects","allProjectsUnsupported","replayPlatforms","platform","allSelectedProjectsUnsupported","primaryAction","primaryActionDisabled","collapsed","xlarge","Alert","icon","IconInfo","tct","action","projectMsg","link","ExternalLink","href","HeroImage","src","emptyStateImg","SetupReplaysCTA","disabled","_ref3","ButtonList","gap","Tooltip","title","Button","onClick","priority","to","external","ButtonBar","styles","ReplaysListTable","eventView","replays","pageLinks","fetchError","useReplayList","allSelectedProjectsNeedUpdates","useProjectSdkNeedsUpdate","hasReplayClick","getFilterKeys","k","ReplayTable","sort","sorts","visibleColumns","ReplayColumn","OS","BROWSER","DURATION","COUNT_ERRORS","ACTIVITY","emptyMessage","EmptyStateSubheading","field","sdkPrompt","Pagination","onCursor","path","direction","endsWith","subText","fontSizeMedium","conditions","EventView","fromNewQueryWithLocation","version","fields","REPLAY_LIST_FIELDS","formatString","orderby","DEFAULT_SORT","hasSessionReplay","features","ReplaysListContainer","useReplayPageview","SentryDocumentTitle","Layout","PageHeadingQuestionTooltip","docsUrl","PageFiltersContainer","fullWidth","ReplaysList"],"sourceRoot":""}