{"version":3,"file":"chunks/app_components_gridEditable_sortLink_tsx-app_views_starfish_colours_tsx-app_views_starfish_co-bfb354.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/gridEditable/sortLink.tsx","webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/views/starfish/colours.tsx","webpack:///./app/views/starfish/components/datePicker.tsx","webpack:///./app/views/starfish/utils/chartValueFormatters/formatThroughput.ts","webpack:///./app/views/starfish/utils/constants.tsx","webpack:///./app/views/starfish/utils/retryHandlers.tsx","webpack:///./app/views/starfish/views/webServiceView/spanGroupBreakdown.tsx","webpack:///./app/views/starfish/views/webServiceView/spanGroupBreakdownContainer.tsx","webpack:///./app/views/starfish/utils/useEventsStatsQuery.tsx"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\n\nimport Link from 'sentry/components/links/link';\nimport {IconArrow} from 'sentry/icons';\n\nexport type Alignments = 'left' | 'right' | undefined;\nexport type Directions = 'desc' | 'asc' | undefined;\n\ntype Props = {\n  align: Alignments;\n  canSort: boolean;\n  direction: Directions;\n  generateSortLink: () => LocationDescriptorObject | undefined;\n  title: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n  replace?: boolean;\n};\n\nfunction SortLink({\n  align,\n  title,\n  canSort,\n  generateSortLink,\n  onClick,\n  direction,\n  replace,\n}: Props) {\n  const target = generateSortLink();\n\n  if (!target || !canSort) {\n    return <StyledNonLink align={align}>{title}</StyledNonLink>;\n  }\n\n  const arrow = !direction ? null : (\n    <StyledIconArrow size=\"xs\" direction={direction === 'desc' ? 'down' : 'up'} />\n  );\n\n  const handleOnClick: React.MouseEventHandler<HTMLAnchorElement> = e => {\n    if (replace) {\n      e.preventDefault();\n      browserHistory.replace(target);\n    }\n    onClick?.(e);\n  };\n\n  return (\n    <StyledLink align={align} to={target} onClick={handleOnClick}>\n      {title} {arrow}\n    </StyledLink>\n  );\n}\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\ntype StyledLinkProps = LinkProps & {align: Alignments};\n\nconst StyledLink = styled((props: StyledLinkProps) => {\n  // @ts-expect-error It doesn't look like the `css` property is a part of the props,\n  // but prior to this style of destructure-omitting it, it was being omitted\n  // with lodash.omit. I mean keeping it omitted here just in case.\n  const {align: _align, css: _css, ...forwardProps} = props;\n  return <Link {...forwardProps} />;\n})`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  color: inherit;\n\n  &:hover,\n  &:active,\n  &:focus,\n  &:visited {\n    color: inherit;\n  }\n\n  ${(p: StyledLinkProps) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  vertical-align: top;\n`;\n\nexport default SortLink;\n","import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n  useGenericDiscoverQuery,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\nexport type DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\nexport type DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route=\"events\"\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport function useDiscoverQuery(props: Omit<DiscoverQueryComponentProps, 'children'>) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n\n  const res = useGenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>({\n    route: 'events',\n    shouldRefetchData,\n    afterFetch,\n    ...props,\n  });\n\n  const pageLinks = res.response?.getResponseHeader('Link') ?? undefined;\n\n  return {...res, pageLinks};\n}\n\nexport default DiscoverQuery;\n","import {CHART_PALETTE} from 'sentry/constants/chartPalette';\n\nexport const THROUGHPUT_COLOR = CHART_PALETTE[3][3];\nexport const P50_COLOR = CHART_PALETTE[3][1];\nexport const P95_COLOR = CHART_PALETTE[0][0];\nexport const ERRORS_COLOR = CHART_PALETTE[5][3];\n","import DatePageFilter from 'sentry/components/datePageFilter';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nfunction StarfishDatePicker() {\n  const organization = useOrganization();\n  return (\n    <DatePageFilter\n      defaultPeriod=\"24h\"\n      alignDropdown=\"left\"\n      onChange={({start, end, relative}) => {\n        trackAnalytics('starfish.page_filter.data_change', {\n          organization,\n          start,\n          end,\n          relative,\n        });\n      }}\n    />\n  );\n}\n\nexport default StarfishDatePicker;\n","import {t} from 'sentry/locale';\n\nconst formatThroughput = (throughputPerSecond: number = -1) => {\n  const throughput = throughputPerSecond === -1 ? '--' : throughputPerSecond.toFixed(2);\n  return `${throughput} / ${t('s')}`;\n};\n\nexport default formatThroughput;\n","// This constant is to be used as an arg for `getInterval`.\n// 'metrics' fidelity is intended to match the granularities of stored metrics.\n// This gives us the best/highest fidelity of data for minimum amount of work (don't need to merge buckets).\nexport const STARFISH_CHART_INTERVAL_FIDELITY = 'metrics';\n","export function shouldRetryHandler(failureCount: number, error: Error) {\n  return failureCount < 3 && error.message.includes('429');\n}\n\nexport function getRetryDelay(attempt: number) {\n  return 1000 * Math.pow(3, attempt);\n}\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport * as qs from 'query-string';\n\nimport {LineChartSeries} from 'sentry/components/charts/lineChart';\nimport {CompactSelect, SelectOption} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport {tooltipFormatterUsingAggregateOutputType} from 'sentry/utils/discover/charts';\nimport {VisuallyCompleteWithData} from 'sentry/utils/performanceForSentry';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport {SpanMetricsFields} from 'sentry/views/starfish/types';\nimport {\n  DataDisplayType,\n  DataRow,\n} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\nconst {SPAN_MODULE} = SpanMetricsFields;\n\ntype Props = {\n  colorPalette: string[];\n  dataDisplayType: DataDisplayType;\n  isCumulativeTimeLoading: boolean;\n  isTableLoading: boolean;\n  isTimeseriesLoading: boolean;\n  options: SelectOption<DataDisplayType>[];\n  setDataDisplayType: any;\n  tableData: DataRow[];\n  topSeriesData: LineChartSeries[];\n  totalCumulativeTime: number;\n  errored?: boolean;\n  transaction?: string;\n};\n\nexport function SpanGroupBreakdown({\n  topSeriesData: data,\n  transaction,\n  isTimeseriesLoading,\n  errored,\n  options,\n  dataDisplayType,\n  setDataDisplayType,\n}: Props) {\n  const organization = useOrganization();\n  const hasDropdownFeatureFlag = organization.features.includes(\n    'starfish-wsv-chart-dropdown'\n  );\n\n  const visibleSeries: LineChartSeries[] = [];\n\n  for (let index = 0; index < data.length; index++) {\n    const series = data[index];\n    series.emphasis = {\n      disabled: false,\n      focus: 'series',\n    };\n    series.blur = {\n      areaStyle: {opacity: 0.3},\n    };\n    series.triggerLineEvent = true;\n    visibleSeries.push(series);\n  }\n\n  const dataAsPercentages = cloneDeep(visibleSeries);\n  const numDataPoints = data[0]?.data?.length ?? 0;\n  for (let i = 0; i < numDataPoints; i++) {\n    const totalTimeAtIndex = data.reduce((acc, datum) => acc + datum.data[i].value, 0);\n    dataAsPercentages.forEach(segment => {\n      const clone = {...segment.data[i]};\n      clone.value = totalTimeAtIndex === 0 ? 0 : clone.value / totalTimeAtIndex;\n      segment.data[i] = clone;\n    });\n  }\n\n  const handleChange = (option: SelectOption<DataDisplayType>) => {\n    setDataDisplayType(option.value);\n    trackAnalytics('starfish.web_service_view.breakdown.display_change', {\n      organization,\n      display: option.value,\n    });\n  };\n\n  const isEndpointBreakdownView = Boolean(transaction);\n\n  const handleModuleAreaClick = event => {\n    let spansLink;\n    const spansLinkQueryParams = {};\n    if (event.seriesName === 'db') {\n      spansLink = `/starfish/database/`;\n    } else if (event.seriesName === 'http') {\n      spansLink = `/starfish/api/`;\n    } else if (event.seriesName === 'Other') {\n      spansLinkQueryParams['!span.category'] = data.map(r => r.seriesName);\n    } else {\n      spansLinkQueryParams[SPAN_MODULE] = 'Other';\n      spansLinkQueryParams['span.category'] = event.seriesName;\n    }\n\n    if (!spansLink) {\n      spansLink = `/starfish/spans/?${qs.stringify(spansLinkQueryParams)}`;\n    }\n    browserHistory.push(spansLink);\n  };\n\n  return (\n    <FlexRowContainer>\n      <ChartPadding>\n        <Header>\n          <ChartLabel>\n            {isEndpointBreakdownView ? t('Endpoint Breakdown') : t('Service Breakdown')}\n          </ChartLabel>\n          {hasDropdownFeatureFlag && (\n            <CompactSelect\n              options={options}\n              value={dataDisplayType}\n              onChange={handleChange}\n            />\n          )}\n        </Header>\n        <VisuallyCompleteWithData id=\"WSV.SpanGroupBreakdown\" hasData={data.length > 0}>\n          <Chart\n            statsPeriod=\"24h\"\n            height={340}\n            showLegend\n            data={\n              dataDisplayType === DataDisplayType.PERCENTAGE ? dataAsPercentages : data\n            }\n            dataMax={dataDisplayType === DataDisplayType.PERCENTAGE ? 1 : undefined}\n            durationUnit={\n              dataDisplayType === DataDisplayType.PERCENTAGE ? 0.25 : undefined\n            }\n            start=\"\"\n            end=\"\"\n            errored={errored}\n            loading={isTimeseriesLoading}\n            utc={false}\n            onClick={handleModuleAreaClick}\n            grid={{\n              left: '0',\n              right: '0',\n              top: '20px',\n              bottom: '0',\n            }}\n            definedAxisTicks={6}\n            stacked\n            aggregateOutputFormat={\n              dataDisplayType === DataDisplayType.PERCENTAGE ? 'percentage' : 'duration'\n            }\n            tooltipFormatterOptions={{\n              valueFormatter: value =>\n                dataDisplayType === DataDisplayType.PERCENTAGE\n                  ? tooltipFormatterUsingAggregateOutputType(value, 'percentage')\n                  : tooltipFormatterUsingAggregateOutputType(value, 'duration'),\n            }}\n            onLegendSelectChanged={event => {\n              trackAnalytics('starfish.web_service_view.breakdown.legend_change', {\n                organization,\n                selected: Object.keys(event.selected).filter(key => event.selected[key]),\n                toggled: event.name,\n              });\n            }}\n          />\n        </VisuallyCompleteWithData>\n      </ChartPadding>\n    </FlexRowContainer>\n  );\n}\n\nconst ChartPadding = styled('div')`\n  padding: 0 ${space(2)};\n  flex: 2;\n`;\n\nconst ChartLabel = styled('p')`\n  ${p => p.theme.text.cardTitle}\n`;\n\nconst Header = styled('div')`\n  padding: 0 ${space(1)} 0 0;\n  min-height: 36px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n`;\n\nconst FlexRowContainer = styled('div')`\n  display: flex;\n  min-height: 200px;\n  padding-bottom: ${space(2)};\n`;\n","import {useState} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {SelectOption} from 'sentry/components/compactSelect';\nimport Panel from 'sentry/components/panels/panel';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {PageFilters} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {useDiscoverQuery} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {SpanMetricsFields} from 'sentry/views/starfish/types';\nimport {STARFISH_CHART_INTERVAL_FIDELITY} from 'sentry/views/starfish/utils/constants';\nimport {useEventsStatsQuery} from 'sentry/views/starfish/utils/useEventsStatsQuery';\nimport {SpanGroupBreakdown} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdown';\n\nconst {SPAN_SELF_TIME} = SpanMetricsFields;\n\nconst OTHER_SPAN_GROUP_MODULE = 'Other';\nexport const NULL_SPAN_CATEGORY = t('custom');\n\ntype Props = {\n  transaction?: string;\n  transactionMethod?: string;\n};\n\ntype Group = {\n  'span.category': string;\n};\n\nexport type DataRow = {\n  cumulativeTime: number;\n  group: Group;\n};\n\nexport enum DataDisplayType {\n  DURATION_P95 = 'duration_p95',\n  CUMULATIVE_DURATION = 'cumulative_duration',\n  PERCENTAGE = 'percentage',\n}\n\nexport function SpanGroupBreakdownContainer({transaction, transactionMethod}: Props) {\n  const pageFilter = usePageFilters();\n  const organization = useOrganization();\n  const location = useLocation();\n  const {selection} = pageFilter;\n  const theme = useTheme();\n\n  const options: SelectOption<DataDisplayType>[] = [\n    {label: 'Percentages', value: DataDisplayType.PERCENTAGE},\n    {label: 'Duration (p95)', value: DataDisplayType.DURATION_P95},\n    {label: 'Total Duration', value: DataDisplayType.CUMULATIVE_DURATION},\n  ];\n\n  const [dataDisplayType, setDataDisplayType] = useState<DataDisplayType>(\n    DataDisplayType.PERCENTAGE\n  );\n\n  const {data: segments, isLoading: isSegmentsLoading} = useDiscoverQuery({\n    eventView: getCumulativeTimeEventView(\n      selection,\n      `transaction.op:http.server ${transaction ? `transaction:${transaction}` : ''} ${\n        transactionMethod ? `http.method:${transactionMethod}` : ''\n      }`,\n      ['span.category']\n    ),\n    orgSlug: organization.slug,\n    referrer: 'api.starfish-web-service.span-category-breakdown',\n    location,\n    limit: 4,\n  });\n\n  const {data: cumulativeTime, isLoading: isCumulativeDataLoading} = useDiscoverQuery({\n    eventView: getCumulativeTimeEventView(\n      selection,\n      `transaction.op:http.server ${transaction ? `transaction:${transaction}` : ''} ${\n        transactionMethod ? `http.method:${transactionMethod}` : ''\n      }`,\n      []\n    ),\n    orgSlug: organization.slug,\n    referrer: 'api.starfish-web-service.total-time',\n    location,\n  });\n\n  const {\n    isLoading: isTopDataLoading,\n    data: topData,\n    isError,\n  } = useEventsStatsQuery({\n    eventView: getEventView(\n      selection,\n      `transaction.op:http.server ${transaction ? `transaction:${transaction}` : ''} ${\n        transactionMethod ? `http.method:${transactionMethod}` : ''\n      }`,\n      ['span.category'],\n      dataDisplayType,\n      true\n    ),\n    enabled: true,\n    referrer: 'api.starfish-web-service.span-category-breakdown-timeseries',\n    initialData: [],\n  });\n\n  const totalValues = cumulativeTime?.data[0]?.[`sum(${SPAN_SELF_TIME})`]\n    ? parseInt(cumulativeTime?.data[0][`sum(${SPAN_SELF_TIME})`] as string, 10)\n    : 0;\n  const totalSegments =\n    segments?.data.reduce(\n      (acc, segment) => acc + parseInt(segment[`sum(${SPAN_SELF_TIME})`] as string, 10),\n      0\n    ) ?? 0;\n\n  const otherValue = totalValues ? totalValues - totalSegments : 0;\n\n  const transformedData: DataRow[] = [];\n\n  if (defined(segments)) {\n    for (let index = 0; index < segments.data.length; index++) {\n      const element = segments.data[index];\n      const category = element['span.category'] as string;\n      transformedData.push({\n        cumulativeTime: parseInt(element[`sum(${SPAN_SELF_TIME})`] as string, 10),\n        group: {\n          'span.category': category === '' ? NULL_SPAN_CATEGORY : category,\n        },\n      });\n    }\n\n    if (otherValue > 0 && OTHER_SPAN_GROUP_MODULE in topData) {\n      transformedData.push({\n        cumulativeTime: otherValue,\n        group: {\n          'span.category': OTHER_SPAN_GROUP_MODULE,\n        },\n      });\n    }\n  }\n\n  const seriesByDomain: {[category: string]: Series} = {};\n  const colorPalette = theme.charts.getColorPalette(transformedData.length - 2);\n\n  if (defined(topData)) {\n    if (!isTopDataLoading && transformedData.length > 0) {\n      transformedData.forEach((segment, index) => {\n        const category = segment.group['span.category'] as string;\n        const label = category === '' ? NULL_SPAN_CATEGORY : category;\n        seriesByDomain[label] = {\n          seriesName: label,\n          data: [],\n          color: colorPalette[index],\n        };\n      });\n\n      Object.keys(topData).forEach(key => {\n        const seriesData = topData?.[key];\n        const label = key === '' ? NULL_SPAN_CATEGORY : key;\n        seriesByDomain[label].data =\n          seriesData?.data.map(datum => {\n            return {name: datum[0] * 1000, value: datum[1][0].count} as SeriesDataUnit;\n          }) ?? [];\n      });\n    }\n  }\n\n  const data = Object.values(seriesByDomain);\n\n  return (\n    <StyledPanel>\n      <SpanGroupBreakdown\n        tableData={transformedData}\n        totalCumulativeTime={totalValues}\n        isTableLoading={isSegmentsLoading}\n        topSeriesData={data}\n        colorPalette={colorPalette}\n        isTimeseriesLoading={isTopDataLoading}\n        isCumulativeTimeLoading={isCumulativeDataLoading}\n        transaction={transaction}\n        errored={isError}\n        options={options}\n        dataDisplayType={dataDisplayType}\n        setDataDisplayType={setDataDisplayType}\n      />\n    </StyledPanel>\n  );\n}\n\nconst StyledPanel = styled(Panel)`\n  padding-top: ${space(2)};\n  margin-bottom: 0;\n`;\n\nconst getEventView = (\n  pageFilters: PageFilters,\n  query: string,\n  groups: string[],\n  dataDisplayType: DataDisplayType,\n  getTimeseries?: boolean\n) => {\n  const yAxis =\n    dataDisplayType === DataDisplayType.DURATION_P95\n      ? `p95(${SPAN_SELF_TIME})`\n      : `sum(${SPAN_SELF_TIME})`;\n\n  return EventView.fromNewQueryWithPageFilters(\n    {\n      name: '',\n      fields: [`sum(${SPAN_SELF_TIME})`, `p95(${SPAN_SELF_TIME})`, ...groups],\n      yAxis: getTimeseries ? [yAxis] : [],\n      query,\n      dataset: DiscoverDatasets.SPANS_METRICS,\n      orderby: '-sum_span_self_time',\n      version: 2,\n      topEvents: groups.length > 0 ? '4' : undefined,\n      interval: getTimeseries\n        ? getInterval(pageFilters.datetime, STARFISH_CHART_INTERVAL_FIDELITY)\n        : undefined,\n    },\n    pageFilters\n  );\n};\n\nconst getCumulativeTimeEventView = (\n  pageFilters: PageFilters,\n  query: string,\n  groups: string[]\n) => {\n  return EventView.fromNewQueryWithPageFilters(\n    {\n      name: '',\n      fields: [`sum(${SPAN_SELF_TIME})`, ...groups],\n      query,\n      dataset: DiscoverDatasets.SPANS_METRICS,\n      orderby: '-sum_span_self_time',\n      version: 2,\n      topEvents: groups.length > 0 ? '4' : undefined,\n    },\n    pageFilters\n  );\n};\n","import {EventsStats, MultiSeriesEventsStats} from 'sentry/types';\nimport EventView, {encodeSort} from 'sentry/utils/discover/eventView';\nimport {\n  DiscoverQueryProps,\n  useGenericDiscoverQuery,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {\n  getRetryDelay,\n  shouldRetryHandler,\n} from 'sentry/views/starfish/utils/retryHandlers';\n\nexport function useEventsStatsQuery({\n  eventView,\n  enabled,\n  initialData,\n  referrer,\n}: {\n  eventView: EventView;\n  enabled?: boolean;\n  initialData?: any;\n  referrer?: string;\n}) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {isLoading, data, isError} = useGenericDiscoverQuery<\n    EventsStats | MultiSeriesEventsStats,\n    DiscoverQueryProps\n  >({\n    route: 'events-stats',\n    eventView,\n    location,\n    orgSlug: organization.slug,\n    getRequestPayload: () => ({\n      ...eventView.getEventsAPIPayload(location),\n      yAxis: eventView.yAxis,\n      topEvents: eventView.topEvents,\n      excludeOther: 0,\n      partial: 1,\n      orderby: eventView.sorts?.[0] ? encodeSort(eventView.sorts?.[0]) : undefined,\n      interval: eventView.interval,\n    }),\n    options: {\n      enabled,\n      refetchOnWindowFocus: false,\n      retry: shouldRetryHandler,\n      retryDelay: getRetryDelay,\n      staleTime: Infinity,\n    },\n    referrer,\n  });\n  return {\n    isLoading,\n    data: isLoading && initialData ? initialData : data,\n    isError,\n  };\n}\n"],"names":["SortLink","_ref","align","title","canSort","generateSortLink","onClick","direction","replace","target","_jsx","StyledNonLink","children","arrow","StyledIconArrow","size","_jsxs","StyledLink","to","e","preventDefault","browserHistory","displayName","_styled","props","_align","css","_css","forwardProps","Link","p","IconArrow","name","styles","shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","GenericDiscoverQuery","route","afterFetch","data","_","fields","otherMeta","meta","useDiscoverQuery","res","useGenericDiscoverQuery","pageLinks","response","getResponseHeader","undefined","THROUGHPUT_COLOR","CHART_PALETTE","P95_COLOR","ERRORS_COLOR","StarfishDatePicker","organization","useOrganization","DatePageFilter","defaultPeriod","alignDropdown","onChange","start","end","relative","trackAnalytics","throughputPerSecond","arguments","length","toFixed","t","STARFISH_CHART_INTERVAL_FIDELITY","shouldRetryHandler","failureCount","error","message","includes","getRetryDelay","attempt","Math","pow","SPAN_MODULE","SpanMetricsFields","SpanGroupBreakdown","topSeriesData","transaction","isTimeseriesLoading","errored","options","dataDisplayType","setDataDisplayType","hasDropdownFeatureFlag","features","visibleSeries","index","series","emphasis","disabled","focus","blur","areaStyle","opacity","triggerLineEvent","push","dataAsPercentages","cloneDeep","numDataPoints","i","totalTimeAtIndex","reduce","acc","datum","value","forEach","segment","clone","isEndpointBreakdownView","Boolean","FlexRowContainer","ChartPadding","Header","ChartLabel","CompactSelect","option","display","VisuallyCompleteWithData","id","hasData","Chart","statsPeriod","height","showLegend","DataDisplayType","PERCENTAGE","dataMax","durationUnit","loading","utc","event","spansLink","spansLinkQueryParams","seriesName","map","r","qs","grid","left","right","top","bottom","definedAxisTicks","stacked","aggregateOutputFormat","tooltipFormatterOptions","valueFormatter","tooltipFormatterUsingAggregateOutputType","onLegendSelectChanged","selected","Object","keys","filter","key","toggled","space","theme","text","cardTitle","SPAN_SELF_TIME","OTHER_SPAN_GROUP_MODULE","NULL_SPAN_CATEGORY","SpanGroupBreakdownContainer","transactionMethod","pageFilter","usePageFilters","location","useLocation","selection","useTheme","label","DURATION_P95","CUMULATIVE_DURATION","useState","segments","isLoading","isSegmentsLoading","eventView","getCumulativeTimeEventView","orgSlug","slug","referrer","limit","cumulativeTime","isCumulativeDataLoading","isTopDataLoading","topData","isError","enabled","initialData","getRequestPayload","getEventsAPIPayload","yAxis","topEvents","excludeOther","partial","orderby","sorts","encodeSort","interval","refetchOnWindowFocus","retry","retryDelay","staleTime","Infinity","useEventsStatsQuery","getEventView","totalValues","parseInt","totalSegments","otherValue","transformedData","defined","element","category","group","seriesByDomain","colorPalette","charts","getColorPalette","color","seriesData","count","values","StyledPanel","tableData","totalCumulativeTime","isTableLoading","isCumulativeTimeLoading","Panel","pageFilters","query","groups","getTimeseries","EventView","fromNewQueryWithPageFilters","dataset","DiscoverDatasets","SPANS_METRICS","version","getInterval","datetime"],"sourceRoot":""}