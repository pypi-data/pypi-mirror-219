{"version":3,"file":"chunks/app_views_starfish_views_spans_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"wmBAYA,MAAM,YAACA,GAAeC,EAAAA,kBAOP,SAASC,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,KAEXC,EAAaC,OAAOC,OAAOC,EAAAA,IAAYC,SAC1CN,EAASO,MAAMV,IAAgB,IAE7BG,EAASO,MAAMV,GAChBQ,EAAAA,GAAWG,IAETC,EAAeT,EAASO,MAAM,iBAEpC,OACEG,EAAAA,EAAAA,IAACC,EAAAA,GAAW,CAAAC,UACVC,EAAAA,EAAAA,IAACC,EAAAA,GAAiB,CAAAF,SAAA,EAChBF,EAAAA,EAAAA,IAACC,EAAAA,GAAa,CAAAC,UACZF,EAAAA,EAAAA,IAACC,EAAAA,GAAoB,CAAAC,UACnBF,EAAAA,EAAAA,IAACC,EAAAA,GAAY,CAAAC,SAAEG,EAASN,UAI5BC,EAAAA,EAAAA,IAACC,EAAAA,GAAW,CAAAC,UACVC,EAAAA,EAAAA,IAACF,EAAAA,GAAW,CAACK,WAAS,EAAAJ,SAAA,EACpBF,EAAAA,EAAAA,IAACO,EAAAA,GAAc,KACfP,EAAAA,EAAAA,IAACQ,EAAAA,EAAoB,CAAAN,UACnBF,EAAAA,EAAAA,IAACS,EAAAA,EAAS,CAACjB,WAAYA,EAAYO,aAAcA,eAO/D,CA/BwBV,EAAKqB,YAAA,QAiC7B,MAAML,EAAYN,GACK,SAAjBA,GACKY,EAAAA,EAAAA,GAAE,aAEU,OAAjBZ,GACKY,EAAAA,EAAAA,GAAE,oBAEU,UAAjBZ,GACKY,EAAAA,EAAAA,GAAE,iBAEU,cAAjBZ,GACKY,EAAAA,EAAAA,GAAE,eAEU,eAAjBZ,GACKY,EAAAA,EAAAA,GAAE,oBAEU,QAAjBZ,GACKY,EAAAA,EAAAA,GAAE,qBAEU,UAAjBZ,GACKY,EAAAA,EAAAA,GAAE,mBAEJA,EAAAA,EAAAA,GAAE,Q","sources":["webpack:///./app/views/starfish/views/spans/index.tsx"],"sourcesContent":["import * as Layout from 'sentry/components/layouts/thirds';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {t} from 'sentry/locale';\nimport {\n  PageErrorAlert,\n  PageErrorProvider,\n} from 'sentry/utils/performance/contexts/pageError';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {ModuleName, SpanMetricsFields} from 'sentry/views/starfish/types';\n\nimport SpansView from './spansView';\n\nconst {SPAN_MODULE} = SpanMetricsFields;\n\ntype Query = {\n  'span.category'?: string;\n  'span.module'?: string;\n};\n\nexport default function Spans() {\n  const location = useLocation<Query>();\n\n  const moduleName = Object.values(ModuleName).includes(\n    (location.query[SPAN_MODULE] ?? '') as ModuleName\n  )\n    ? (location.query[SPAN_MODULE] as ModuleName)\n    : ModuleName.ALL;\n\n  const spanCategory = location.query['span.category'];\n\n  return (\n    <Layout.Page>\n      <PageErrorProvider>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>{getTitle(spanCategory)}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <PageErrorAlert />\n            <PageFiltersContainer>\n              <SpansView moduleName={moduleName} spanCategory={spanCategory} />\n            </PageFiltersContainer>\n          </Layout.Main>\n        </Layout.Body>\n      </PageErrorProvider>\n    </Layout.Page>\n  );\n}\n\nconst getTitle = (spanCategory?: string) => {\n  if (spanCategory === 'http') {\n    return t('API Calls');\n  }\n  if (spanCategory === 'db') {\n    return t('Database Queries');\n  }\n  if (spanCategory === 'cache') {\n    return t('Cache Queries');\n  }\n  if (spanCategory === 'serialize') {\n    return t('Serializers');\n  }\n  if (spanCategory === 'middleware') {\n    return t('Middleware Tasks');\n  }\n  if (spanCategory === 'app') {\n    return t('Application Tasks');\n  }\n  if (spanCategory === 'Other') {\n    return t('Other Requests');\n  }\n  return t('Spans');\n};\n"],"names":["SPAN_MODULE","SpanMetricsFields","Spans","location","useLocation","moduleName","Object","values","ModuleName","includes","query","ALL","spanCategory","_jsx","Layout","children","_jsxs","PageErrorProvider","getTitle","fullWidth","PageErrorAlert","PageFiltersContainer","SpansView","displayName","t"],"sourceRoot":""}