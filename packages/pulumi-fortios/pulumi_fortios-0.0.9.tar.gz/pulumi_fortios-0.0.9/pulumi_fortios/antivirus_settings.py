# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AntivirusSettingsArgs', 'AntivirusSettings']

@pulumi.input_type
class AntivirusSettingsArgs:
    def __init__(__self__, *,
                 cache_clean_result: Optional[pulumi.Input[str]] = None,
                 cache_infected_result: Optional[pulumi.Input[str]] = None,
                 default_db: Optional[pulumi.Input[str]] = None,
                 grayware: Optional[pulumi.Input[str]] = None,
                 machine_learning_detection: Optional[pulumi.Input[str]] = None,
                 override_timeout: Optional[pulumi.Input[int]] = None,
                 use_extreme_db: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AntivirusSettings resource.
        """
        if cache_clean_result is not None:
            pulumi.set(__self__, "cache_clean_result", cache_clean_result)
        if cache_infected_result is not None:
            pulumi.set(__self__, "cache_infected_result", cache_infected_result)
        if default_db is not None:
            pulumi.set(__self__, "default_db", default_db)
        if grayware is not None:
            pulumi.set(__self__, "grayware", grayware)
        if machine_learning_detection is not None:
            pulumi.set(__self__, "machine_learning_detection", machine_learning_detection)
        if override_timeout is not None:
            pulumi.set(__self__, "override_timeout", override_timeout)
        if use_extreme_db is not None:
            pulumi.set(__self__, "use_extreme_db", use_extreme_db)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="cacheCleanResult")
    def cache_clean_result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_clean_result")

    @cache_clean_result.setter
    def cache_clean_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_clean_result", value)

    @property
    @pulumi.getter(name="cacheInfectedResult")
    def cache_infected_result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_infected_result")

    @cache_infected_result.setter
    def cache_infected_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_infected_result", value)

    @property
    @pulumi.getter(name="defaultDb")
    def default_db(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_db")

    @default_db.setter
    def default_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_db", value)

    @property
    @pulumi.getter
    def grayware(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grayware")

    @grayware.setter
    def grayware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grayware", value)

    @property
    @pulumi.getter(name="machineLearningDetection")
    def machine_learning_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "machine_learning_detection")

    @machine_learning_detection.setter
    def machine_learning_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_learning_detection", value)

    @property
    @pulumi.getter(name="overrideTimeout")
    def override_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "override_timeout")

    @override_timeout.setter
    def override_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_timeout", value)

    @property
    @pulumi.getter(name="useExtremeDb")
    def use_extreme_db(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_extreme_db")

    @use_extreme_db.setter
    def use_extreme_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_extreme_db", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _AntivirusSettingsState:
    def __init__(__self__, *,
                 cache_clean_result: Optional[pulumi.Input[str]] = None,
                 cache_infected_result: Optional[pulumi.Input[str]] = None,
                 default_db: Optional[pulumi.Input[str]] = None,
                 grayware: Optional[pulumi.Input[str]] = None,
                 machine_learning_detection: Optional[pulumi.Input[str]] = None,
                 override_timeout: Optional[pulumi.Input[int]] = None,
                 use_extreme_db: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AntivirusSettings resources.
        """
        if cache_clean_result is not None:
            pulumi.set(__self__, "cache_clean_result", cache_clean_result)
        if cache_infected_result is not None:
            pulumi.set(__self__, "cache_infected_result", cache_infected_result)
        if default_db is not None:
            pulumi.set(__self__, "default_db", default_db)
        if grayware is not None:
            pulumi.set(__self__, "grayware", grayware)
        if machine_learning_detection is not None:
            pulumi.set(__self__, "machine_learning_detection", machine_learning_detection)
        if override_timeout is not None:
            pulumi.set(__self__, "override_timeout", override_timeout)
        if use_extreme_db is not None:
            pulumi.set(__self__, "use_extreme_db", use_extreme_db)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="cacheCleanResult")
    def cache_clean_result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_clean_result")

    @cache_clean_result.setter
    def cache_clean_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_clean_result", value)

    @property
    @pulumi.getter(name="cacheInfectedResult")
    def cache_infected_result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_infected_result")

    @cache_infected_result.setter
    def cache_infected_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_infected_result", value)

    @property
    @pulumi.getter(name="defaultDb")
    def default_db(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_db")

    @default_db.setter
    def default_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_db", value)

    @property
    @pulumi.getter
    def grayware(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grayware")

    @grayware.setter
    def grayware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grayware", value)

    @property
    @pulumi.getter(name="machineLearningDetection")
    def machine_learning_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "machine_learning_detection")

    @machine_learning_detection.setter
    def machine_learning_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_learning_detection", value)

    @property
    @pulumi.getter(name="overrideTimeout")
    def override_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "override_timeout")

    @override_timeout.setter
    def override_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_timeout", value)

    @property
    @pulumi.getter(name="useExtremeDb")
    def use_extreme_db(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_extreme_db")

    @use_extreme_db.setter
    def use_extreme_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_extreme_db", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class AntivirusSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_clean_result: Optional[pulumi.Input[str]] = None,
                 cache_infected_result: Optional[pulumi.Input[str]] = None,
                 default_db: Optional[pulumi.Input[str]] = None,
                 grayware: Optional[pulumi.Input[str]] = None,
                 machine_learning_detection: Optional[pulumi.Input[str]] = None,
                 override_timeout: Optional[pulumi.Input[int]] = None,
                 use_extreme_db: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AntivirusSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AntivirusSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AntivirusSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AntivirusSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AntivirusSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_clean_result: Optional[pulumi.Input[str]] = None,
                 cache_infected_result: Optional[pulumi.Input[str]] = None,
                 default_db: Optional[pulumi.Input[str]] = None,
                 grayware: Optional[pulumi.Input[str]] = None,
                 machine_learning_detection: Optional[pulumi.Input[str]] = None,
                 override_timeout: Optional[pulumi.Input[int]] = None,
                 use_extreme_db: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AntivirusSettingsArgs.__new__(AntivirusSettingsArgs)

            __props__.__dict__["cache_clean_result"] = cache_clean_result
            __props__.__dict__["cache_infected_result"] = cache_infected_result
            __props__.__dict__["default_db"] = default_db
            __props__.__dict__["grayware"] = grayware
            __props__.__dict__["machine_learning_detection"] = machine_learning_detection
            __props__.__dict__["override_timeout"] = override_timeout
            __props__.__dict__["use_extreme_db"] = use_extreme_db
            __props__.__dict__["vdomparam"] = vdomparam
        super(AntivirusSettings, __self__).__init__(
            'fortios:index/antivirusSettings:AntivirusSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cache_clean_result: Optional[pulumi.Input[str]] = None,
            cache_infected_result: Optional[pulumi.Input[str]] = None,
            default_db: Optional[pulumi.Input[str]] = None,
            grayware: Optional[pulumi.Input[str]] = None,
            machine_learning_detection: Optional[pulumi.Input[str]] = None,
            override_timeout: Optional[pulumi.Input[int]] = None,
            use_extreme_db: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'AntivirusSettings':
        """
        Get an existing AntivirusSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AntivirusSettingsState.__new__(_AntivirusSettingsState)

        __props__.__dict__["cache_clean_result"] = cache_clean_result
        __props__.__dict__["cache_infected_result"] = cache_infected_result
        __props__.__dict__["default_db"] = default_db
        __props__.__dict__["grayware"] = grayware
        __props__.__dict__["machine_learning_detection"] = machine_learning_detection
        __props__.__dict__["override_timeout"] = override_timeout
        __props__.__dict__["use_extreme_db"] = use_extreme_db
        __props__.__dict__["vdomparam"] = vdomparam
        return AntivirusSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cacheCleanResult")
    def cache_clean_result(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_clean_result")

    @property
    @pulumi.getter(name="cacheInfectedResult")
    def cache_infected_result(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_infected_result")

    @property
    @pulumi.getter(name="defaultDb")
    def default_db(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_db")

    @property
    @pulumi.getter
    def grayware(self) -> pulumi.Output[str]:
        return pulumi.get(self, "grayware")

    @property
    @pulumi.getter(name="machineLearningDetection")
    def machine_learning_detection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "machine_learning_detection")

    @property
    @pulumi.getter(name="overrideTimeout")
    def override_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "override_timeout")

    @property
    @pulumi.getter(name="useExtremeDb")
    def use_extreme_db(self) -> pulumi.Output[str]:
        return pulumi.get(self, "use_extreme_db")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

