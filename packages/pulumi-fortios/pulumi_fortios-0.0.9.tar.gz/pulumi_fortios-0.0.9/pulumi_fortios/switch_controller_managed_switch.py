# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SwitchControllerManagedSwitchArgs', 'SwitchControllerManagedSwitch']

@pulumi.input_type
class SwitchControllerManagedSwitchArgs:
    def __init__(__self__, *,
                 fsw_wan1_peer: pulumi.Input[str],
                 switch_id: pulumi.Input[str],
                 access_profile: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchCustomCommandArgs']]]] = None,
                 delayed_restart_trigger: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_static_clients: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs']]]] = None,
                 directly_connected: Optional[pulumi.Input[int]] = None,
                 dynamic_capability: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamically_discovered: Optional[pulumi.Input[int]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 firmware_provision_version: Optional[pulumi.Input[str]] = None,
                 flow_identity: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_peer: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingArgs']] = None,
                 ip_source_guards: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardArgs']]]] = None,
                 l3_discovered: Optional[pulumi.Input[int]] = None,
                 max_allowed_trunk_members: Optional[pulumi.Input[int]] = None,
                 mclag_igmp_snooping_aware: Optional[pulumi.Input[str]] = None,
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorArgs']]]] = None,
                 n8021x_settings: Optional[pulumi.Input['SwitchControllerManagedSwitchN8021xSettingsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_snmp_community: Optional[pulumi.Input[str]] = None,
                 override_snmp_sysinfo: Optional[pulumi.Input[str]] = None,
                 override_snmp_trap_threshold: Optional[pulumi.Input[str]] = None,
                 override_snmp_user: Optional[pulumi.Input[str]] = None,
                 owner_vdom: Optional[pulumi.Input[str]] = None,
                 poe_detection_type: Optional[pulumi.Input[int]] = None,
                 poe_lldp_detection: Optional[pulumi.Input[str]] = None,
                 poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortArgs']]]] = None,
                 pre_provisioned: Optional[pulumi.Input[int]] = None,
                 qos_drop_policy: Optional[pulumi.Input[str]] = None,
                 qos_red_probability: Optional[pulumi.Input[int]] = None,
                 remote_logs: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchRemoteLogArgs']]]] = None,
                 sn: Optional[pulumi.Input[str]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityArgs']]]] = None,
                 snmp_sysinfo: Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpSysinfoArgs']] = None,
                 snmp_trap_threshold: Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpTrapThresholdArgs']] = None,
                 snmp_users: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpUserArgs']]]] = None,
                 staged_image_version: Optional[pulumi.Input[str]] = None,
                 static_macs: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStaticMacArgs']]]] = None,
                 storm_control: Optional[pulumi.Input['SwitchControllerManagedSwitchStormControlArgs']] = None,
                 stp_instances: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStpInstanceArgs']]]] = None,
                 stp_settings: Optional[pulumi.Input['SwitchControllerManagedSwitchStpSettingsArgs']] = None,
                 switch_device_tag: Optional[pulumi.Input[str]] = None,
                 switch_dhcp_opt43_key: Optional[pulumi.Input[str]] = None,
                 switch_log: Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchLogArgs']] = None,
                 switch_profile: Optional[pulumi.Input[str]] = None,
                 switch_stp_settings: Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchStpSettingsArgs']] = None,
                 tdr_supported: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SwitchControllerManagedSwitch resource.
        """
        pulumi.set(__self__, "fsw_wan1_peer", fsw_wan1_peer)
        pulumi.set(__self__, "switch_id", switch_id)
        if access_profile is not None:
            pulumi.set(__self__, "access_profile", access_profile)
        if custom_commands is not None:
            pulumi.set(__self__, "custom_commands", custom_commands)
        if delayed_restart_trigger is not None:
            pulumi.set(__self__, "delayed_restart_trigger", delayed_restart_trigger)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_server_access_list is not None:
            pulumi.set(__self__, "dhcp_server_access_list", dhcp_server_access_list)
        if dhcp_snooping_static_clients is not None:
            pulumi.set(__self__, "dhcp_snooping_static_clients", dhcp_snooping_static_clients)
        if directly_connected is not None:
            pulumi.set(__self__, "directly_connected", directly_connected)
        if dynamic_capability is not None:
            pulumi.set(__self__, "dynamic_capability", dynamic_capability)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if dynamically_discovered is not None:
            pulumi.set(__self__, "dynamically_discovered", dynamically_discovered)
        if firmware_provision is not None:
            pulumi.set(__self__, "firmware_provision", firmware_provision)
        if firmware_provision_latest is not None:
            pulumi.set(__self__, "firmware_provision_latest", firmware_provision_latest)
        if firmware_provision_version is not None:
            pulumi.set(__self__, "firmware_provision_version", firmware_provision_version)
        if flow_identity is not None:
            pulumi.set(__self__, "flow_identity", flow_identity)
        if fsw_wan1_admin is not None:
            pulumi.set(__self__, "fsw_wan1_admin", fsw_wan1_admin)
        if fsw_wan2_admin is not None:
            pulumi.set(__self__, "fsw_wan2_admin", fsw_wan2_admin)
        if fsw_wan2_peer is not None:
            pulumi.set(__self__, "fsw_wan2_peer", fsw_wan2_peer)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if ip_source_guards is not None:
            pulumi.set(__self__, "ip_source_guards", ip_source_guards)
        if l3_discovered is not None:
            pulumi.set(__self__, "l3_discovered", l3_discovered)
        if max_allowed_trunk_members is not None:
            pulumi.set(__self__, "max_allowed_trunk_members", max_allowed_trunk_members)
        if mclag_igmp_snooping_aware is not None:
            pulumi.set(__self__, "mclag_igmp_snooping_aware", mclag_igmp_snooping_aware)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if n8021x_settings is not None:
            pulumi.set(__self__, "n8021x_settings", n8021x_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_snmp_community is not None:
            pulumi.set(__self__, "override_snmp_community", override_snmp_community)
        if override_snmp_sysinfo is not None:
            pulumi.set(__self__, "override_snmp_sysinfo", override_snmp_sysinfo)
        if override_snmp_trap_threshold is not None:
            pulumi.set(__self__, "override_snmp_trap_threshold", override_snmp_trap_threshold)
        if override_snmp_user is not None:
            pulumi.set(__self__, "override_snmp_user", override_snmp_user)
        if owner_vdom is not None:
            pulumi.set(__self__, "owner_vdom", owner_vdom)
        if poe_detection_type is not None:
            pulumi.set(__self__, "poe_detection_type", poe_detection_type)
        if poe_lldp_detection is not None:
            pulumi.set(__self__, "poe_lldp_detection", poe_lldp_detection)
        if poe_pre_standard_detection is not None:
            pulumi.set(__self__, "poe_pre_standard_detection", poe_pre_standard_detection)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if pre_provisioned is not None:
            pulumi.set(__self__, "pre_provisioned", pre_provisioned)
        if qos_drop_policy is not None:
            pulumi.set(__self__, "qos_drop_policy", qos_drop_policy)
        if qos_red_probability is not None:
            pulumi.set(__self__, "qos_red_probability", qos_red_probability)
        if remote_logs is not None:
            pulumi.set(__self__, "remote_logs", remote_logs)
        if sn is not None:
            pulumi.set(__self__, "sn", sn)
        if snmp_communities is not None:
            pulumi.set(__self__, "snmp_communities", snmp_communities)
        if snmp_sysinfo is not None:
            pulumi.set(__self__, "snmp_sysinfo", snmp_sysinfo)
        if snmp_trap_threshold is not None:
            pulumi.set(__self__, "snmp_trap_threshold", snmp_trap_threshold)
        if snmp_users is not None:
            pulumi.set(__self__, "snmp_users", snmp_users)
        if staged_image_version is not None:
            pulumi.set(__self__, "staged_image_version", staged_image_version)
        if static_macs is not None:
            pulumi.set(__self__, "static_macs", static_macs)
        if storm_control is not None:
            pulumi.set(__self__, "storm_control", storm_control)
        if stp_instances is not None:
            pulumi.set(__self__, "stp_instances", stp_instances)
        if stp_settings is not None:
            pulumi.set(__self__, "stp_settings", stp_settings)
        if switch_device_tag is not None:
            pulumi.set(__self__, "switch_device_tag", switch_device_tag)
        if switch_dhcp_opt43_key is not None:
            pulumi.set(__self__, "switch_dhcp_opt43_key", switch_dhcp_opt43_key)
        if switch_log is not None:
            pulumi.set(__self__, "switch_log", switch_log)
        if switch_profile is not None:
            pulumi.set(__self__, "switch_profile", switch_profile)
        if switch_stp_settings is not None:
            pulumi.set(__self__, "switch_stp_settings", switch_stp_settings)
        if tdr_supported is not None:
            pulumi.set(__self__, "tdr_supported", tdr_supported)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fswWan1Peer")
    def fsw_wan1_peer(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fsw_wan1_peer")

    @fsw_wan1_peer.setter
    def fsw_wan1_peer(self, value: pulumi.Input[str]):
        pulumi.set(self, "fsw_wan1_peer", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch_id", value)

    @property
    @pulumi.getter(name="accessProfile")
    def access_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_profile")

    @access_profile.setter
    def access_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_profile", value)

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchCustomCommandArgs']]]]:
        return pulumi.get(self, "custom_commands")

    @custom_commands.setter
    def custom_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchCustomCommandArgs']]]]):
        pulumi.set(self, "custom_commands", value)

    @property
    @pulumi.getter(name="delayedRestartTrigger")
    def delayed_restart_trigger(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delayed_restart_trigger")

    @delayed_restart_trigger.setter
    def delayed_restart_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delayed_restart_trigger", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_server_access_list")

    @dhcp_server_access_list.setter
    def dhcp_server_access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server_access_list", value)

    @property
    @pulumi.getter(name="dhcpSnoopingStaticClients")
    def dhcp_snooping_static_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs']]]]:
        return pulumi.get(self, "dhcp_snooping_static_clients")

    @dhcp_snooping_static_clients.setter
    def dhcp_snooping_static_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs']]]]):
        pulumi.set(self, "dhcp_snooping_static_clients", value)

    @property
    @pulumi.getter(name="directlyConnected")
    def directly_connected(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "directly_connected")

    @directly_connected.setter
    def directly_connected(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "directly_connected", value)

    @property
    @pulumi.getter(name="dynamicCapability")
    def dynamic_capability(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dynamic_capability")

    @dynamic_capability.setter
    def dynamic_capability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dynamic_capability", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="dynamicallyDiscovered")
    def dynamically_discovered(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dynamically_discovered")

    @dynamically_discovered.setter
    def dynamically_discovered(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dynamically_discovered", value)

    @property
    @pulumi.getter(name="firmwareProvision")
    def firmware_provision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision")

    @firmware_provision.setter
    def firmware_provision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision", value)

    @property
    @pulumi.getter(name="firmwareProvisionLatest")
    def firmware_provision_latest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision_latest")

    @firmware_provision_latest.setter
    def firmware_provision_latest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_latest", value)

    @property
    @pulumi.getter(name="firmwareProvisionVersion")
    def firmware_provision_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision_version")

    @firmware_provision_version.setter
    def firmware_provision_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_version", value)

    @property
    @pulumi.getter(name="flowIdentity")
    def flow_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_identity")

    @flow_identity.setter
    def flow_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_identity", value)

    @property
    @pulumi.getter(name="fswWan1Admin")
    def fsw_wan1_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsw_wan1_admin")

    @fsw_wan1_admin.setter
    def fsw_wan1_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan1_admin", value)

    @property
    @pulumi.getter(name="fswWan2Admin")
    def fsw_wan2_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsw_wan2_admin")

    @fsw_wan2_admin.setter
    def fsw_wan2_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan2_admin", value)

    @property
    @pulumi.getter(name="fswWan2Peer")
    def fsw_wan2_peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsw_wan2_peer")

    @fsw_wan2_peer.setter
    def fsw_wan2_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan2_peer", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingArgs']]:
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingArgs']]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="ipSourceGuards")
    def ip_source_guards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardArgs']]]]:
        return pulumi.get(self, "ip_source_guards")

    @ip_source_guards.setter
    def ip_source_guards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardArgs']]]]):
        pulumi.set(self, "ip_source_guards", value)

    @property
    @pulumi.getter(name="l3Discovered")
    def l3_discovered(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "l3_discovered")

    @l3_discovered.setter
    def l3_discovered(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "l3_discovered", value)

    @property
    @pulumi.getter(name="maxAllowedTrunkMembers")
    def max_allowed_trunk_members(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_allowed_trunk_members")

    @max_allowed_trunk_members.setter
    def max_allowed_trunk_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_allowed_trunk_members", value)

    @property
    @pulumi.getter(name="mclagIgmpSnoopingAware")
    def mclag_igmp_snooping_aware(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mclag_igmp_snooping_aware")

    @mclag_igmp_snooping_aware.setter
    def mclag_igmp_snooping_aware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mclag_igmp_snooping_aware", value)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorArgs']]]]:
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorArgs']]]]):
        pulumi.set(self, "mirrors", value)

    @property
    @pulumi.getter(name="n8021xSettings")
    def n8021x_settings(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchN8021xSettingsArgs']]:
        return pulumi.get(self, "n8021x_settings")

    @n8021x_settings.setter
    def n8021x_settings(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchN8021xSettingsArgs']]):
        pulumi.set(self, "n8021x_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideSnmpCommunity")
    def override_snmp_community(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_snmp_community")

    @override_snmp_community.setter
    def override_snmp_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_community", value)

    @property
    @pulumi.getter(name="overrideSnmpSysinfo")
    def override_snmp_sysinfo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_snmp_sysinfo")

    @override_snmp_sysinfo.setter
    def override_snmp_sysinfo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_sysinfo", value)

    @property
    @pulumi.getter(name="overrideSnmpTrapThreshold")
    def override_snmp_trap_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_snmp_trap_threshold")

    @override_snmp_trap_threshold.setter
    def override_snmp_trap_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_trap_threshold", value)

    @property
    @pulumi.getter(name="overrideSnmpUser")
    def override_snmp_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_snmp_user")

    @override_snmp_user.setter
    def override_snmp_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_user", value)

    @property
    @pulumi.getter(name="ownerVdom")
    def owner_vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_vdom")

    @owner_vdom.setter
    def owner_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_vdom", value)

    @property
    @pulumi.getter(name="poeDetectionType")
    def poe_detection_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "poe_detection_type")

    @poe_detection_type.setter
    def poe_detection_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poe_detection_type", value)

    @property
    @pulumi.getter(name="poeLldpDetection")
    def poe_lldp_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_lldp_detection")

    @poe_lldp_detection.setter
    def poe_lldp_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_lldp_detection", value)

    @property
    @pulumi.getter(name="poePreStandardDetection")
    def poe_pre_standard_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_pre_standard_detection")

    @poe_pre_standard_detection.setter
    def poe_pre_standard_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_pre_standard_detection", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="preProvisioned")
    def pre_provisioned(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pre_provisioned")

    @pre_provisioned.setter
    def pre_provisioned(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pre_provisioned", value)

    @property
    @pulumi.getter(name="qosDropPolicy")
    def qos_drop_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qos_drop_policy")

    @qos_drop_policy.setter
    def qos_drop_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_drop_policy", value)

    @property
    @pulumi.getter(name="qosRedProbability")
    def qos_red_probability(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "qos_red_probability")

    @qos_red_probability.setter
    def qos_red_probability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qos_red_probability", value)

    @property
    @pulumi.getter(name="remoteLogs")
    def remote_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchRemoteLogArgs']]]]:
        return pulumi.get(self, "remote_logs")

    @remote_logs.setter
    def remote_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchRemoteLogArgs']]]]):
        pulumi.set(self, "remote_logs", value)

    @property
    @pulumi.getter
    def sn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sn")

    @sn.setter
    def sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sn", value)

    @property
    @pulumi.getter(name="snmpCommunities")
    def snmp_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityArgs']]]]:
        return pulumi.get(self, "snmp_communities")

    @snmp_communities.setter
    def snmp_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityArgs']]]]):
        pulumi.set(self, "snmp_communities", value)

    @property
    @pulumi.getter(name="snmpSysinfo")
    def snmp_sysinfo(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpSysinfoArgs']]:
        return pulumi.get(self, "snmp_sysinfo")

    @snmp_sysinfo.setter
    def snmp_sysinfo(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpSysinfoArgs']]):
        pulumi.set(self, "snmp_sysinfo", value)

    @property
    @pulumi.getter(name="snmpTrapThreshold")
    def snmp_trap_threshold(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpTrapThresholdArgs']]:
        return pulumi.get(self, "snmp_trap_threshold")

    @snmp_trap_threshold.setter
    def snmp_trap_threshold(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpTrapThresholdArgs']]):
        pulumi.set(self, "snmp_trap_threshold", value)

    @property
    @pulumi.getter(name="snmpUsers")
    def snmp_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpUserArgs']]]]:
        return pulumi.get(self, "snmp_users")

    @snmp_users.setter
    def snmp_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpUserArgs']]]]):
        pulumi.set(self, "snmp_users", value)

    @property
    @pulumi.getter(name="stagedImageVersion")
    def staged_image_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "staged_image_version")

    @staged_image_version.setter
    def staged_image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "staged_image_version", value)

    @property
    @pulumi.getter(name="staticMacs")
    def static_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStaticMacArgs']]]]:
        return pulumi.get(self, "static_macs")

    @static_macs.setter
    def static_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStaticMacArgs']]]]):
        pulumi.set(self, "static_macs", value)

    @property
    @pulumi.getter(name="stormControl")
    def storm_control(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchStormControlArgs']]:
        return pulumi.get(self, "storm_control")

    @storm_control.setter
    def storm_control(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchStormControlArgs']]):
        pulumi.set(self, "storm_control", value)

    @property
    @pulumi.getter(name="stpInstances")
    def stp_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStpInstanceArgs']]]]:
        return pulumi.get(self, "stp_instances")

    @stp_instances.setter
    def stp_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStpInstanceArgs']]]]):
        pulumi.set(self, "stp_instances", value)

    @property
    @pulumi.getter(name="stpSettings")
    def stp_settings(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchStpSettingsArgs']]:
        return pulumi.get(self, "stp_settings")

    @stp_settings.setter
    def stp_settings(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchStpSettingsArgs']]):
        pulumi.set(self, "stp_settings", value)

    @property
    @pulumi.getter(name="switchDeviceTag")
    def switch_device_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_device_tag")

    @switch_device_tag.setter
    def switch_device_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_device_tag", value)

    @property
    @pulumi.getter(name="switchDhcpOpt43Key")
    def switch_dhcp_opt43_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_dhcp_opt43_key")

    @switch_dhcp_opt43_key.setter
    def switch_dhcp_opt43_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_dhcp_opt43_key", value)

    @property
    @pulumi.getter(name="switchLog")
    def switch_log(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchLogArgs']]:
        return pulumi.get(self, "switch_log")

    @switch_log.setter
    def switch_log(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchLogArgs']]):
        pulumi.set(self, "switch_log", value)

    @property
    @pulumi.getter(name="switchProfile")
    def switch_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_profile")

    @switch_profile.setter
    def switch_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_profile", value)

    @property
    @pulumi.getter(name="switchStpSettings")
    def switch_stp_settings(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchStpSettingsArgs']]:
        return pulumi.get(self, "switch_stp_settings")

    @switch_stp_settings.setter
    def switch_stp_settings(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchStpSettingsArgs']]):
        pulumi.set(self, "switch_stp_settings", value)

    @property
    @pulumi.getter(name="tdrSupported")
    def tdr_supported(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tdr_supported")

    @tdr_supported.setter
    def tdr_supported(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tdr_supported", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _SwitchControllerManagedSwitchState:
    def __init__(__self__, *,
                 access_profile: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchCustomCommandArgs']]]] = None,
                 delayed_restart_trigger: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_static_clients: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs']]]] = None,
                 directly_connected: Optional[pulumi.Input[int]] = None,
                 dynamic_capability: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamically_discovered: Optional[pulumi.Input[int]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 firmware_provision_version: Optional[pulumi.Input[str]] = None,
                 flow_identity: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_peer: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_peer: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingArgs']] = None,
                 ip_source_guards: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardArgs']]]] = None,
                 l3_discovered: Optional[pulumi.Input[int]] = None,
                 max_allowed_trunk_members: Optional[pulumi.Input[int]] = None,
                 mclag_igmp_snooping_aware: Optional[pulumi.Input[str]] = None,
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorArgs']]]] = None,
                 n8021x_settings: Optional[pulumi.Input['SwitchControllerManagedSwitchN8021xSettingsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_snmp_community: Optional[pulumi.Input[str]] = None,
                 override_snmp_sysinfo: Optional[pulumi.Input[str]] = None,
                 override_snmp_trap_threshold: Optional[pulumi.Input[str]] = None,
                 override_snmp_user: Optional[pulumi.Input[str]] = None,
                 owner_vdom: Optional[pulumi.Input[str]] = None,
                 poe_detection_type: Optional[pulumi.Input[int]] = None,
                 poe_lldp_detection: Optional[pulumi.Input[str]] = None,
                 poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortArgs']]]] = None,
                 pre_provisioned: Optional[pulumi.Input[int]] = None,
                 qos_drop_policy: Optional[pulumi.Input[str]] = None,
                 qos_red_probability: Optional[pulumi.Input[int]] = None,
                 remote_logs: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchRemoteLogArgs']]]] = None,
                 sn: Optional[pulumi.Input[str]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityArgs']]]] = None,
                 snmp_sysinfo: Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpSysinfoArgs']] = None,
                 snmp_trap_threshold: Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpTrapThresholdArgs']] = None,
                 snmp_users: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpUserArgs']]]] = None,
                 staged_image_version: Optional[pulumi.Input[str]] = None,
                 static_macs: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStaticMacArgs']]]] = None,
                 storm_control: Optional[pulumi.Input['SwitchControllerManagedSwitchStormControlArgs']] = None,
                 stp_instances: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStpInstanceArgs']]]] = None,
                 stp_settings: Optional[pulumi.Input['SwitchControllerManagedSwitchStpSettingsArgs']] = None,
                 switch_device_tag: Optional[pulumi.Input[str]] = None,
                 switch_dhcp_opt43_key: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None,
                 switch_log: Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchLogArgs']] = None,
                 switch_profile: Optional[pulumi.Input[str]] = None,
                 switch_stp_settings: Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchStpSettingsArgs']] = None,
                 tdr_supported: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerManagedSwitch resources.
        """
        if access_profile is not None:
            pulumi.set(__self__, "access_profile", access_profile)
        if custom_commands is not None:
            pulumi.set(__self__, "custom_commands", custom_commands)
        if delayed_restart_trigger is not None:
            pulumi.set(__self__, "delayed_restart_trigger", delayed_restart_trigger)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_server_access_list is not None:
            pulumi.set(__self__, "dhcp_server_access_list", dhcp_server_access_list)
        if dhcp_snooping_static_clients is not None:
            pulumi.set(__self__, "dhcp_snooping_static_clients", dhcp_snooping_static_clients)
        if directly_connected is not None:
            pulumi.set(__self__, "directly_connected", directly_connected)
        if dynamic_capability is not None:
            pulumi.set(__self__, "dynamic_capability", dynamic_capability)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if dynamically_discovered is not None:
            pulumi.set(__self__, "dynamically_discovered", dynamically_discovered)
        if firmware_provision is not None:
            pulumi.set(__self__, "firmware_provision", firmware_provision)
        if firmware_provision_latest is not None:
            pulumi.set(__self__, "firmware_provision_latest", firmware_provision_latest)
        if firmware_provision_version is not None:
            pulumi.set(__self__, "firmware_provision_version", firmware_provision_version)
        if flow_identity is not None:
            pulumi.set(__self__, "flow_identity", flow_identity)
        if fsw_wan1_admin is not None:
            pulumi.set(__self__, "fsw_wan1_admin", fsw_wan1_admin)
        if fsw_wan1_peer is not None:
            pulumi.set(__self__, "fsw_wan1_peer", fsw_wan1_peer)
        if fsw_wan2_admin is not None:
            pulumi.set(__self__, "fsw_wan2_admin", fsw_wan2_admin)
        if fsw_wan2_peer is not None:
            pulumi.set(__self__, "fsw_wan2_peer", fsw_wan2_peer)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if ip_source_guards is not None:
            pulumi.set(__self__, "ip_source_guards", ip_source_guards)
        if l3_discovered is not None:
            pulumi.set(__self__, "l3_discovered", l3_discovered)
        if max_allowed_trunk_members is not None:
            pulumi.set(__self__, "max_allowed_trunk_members", max_allowed_trunk_members)
        if mclag_igmp_snooping_aware is not None:
            pulumi.set(__self__, "mclag_igmp_snooping_aware", mclag_igmp_snooping_aware)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if n8021x_settings is not None:
            pulumi.set(__self__, "n8021x_settings", n8021x_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_snmp_community is not None:
            pulumi.set(__self__, "override_snmp_community", override_snmp_community)
        if override_snmp_sysinfo is not None:
            pulumi.set(__self__, "override_snmp_sysinfo", override_snmp_sysinfo)
        if override_snmp_trap_threshold is not None:
            pulumi.set(__self__, "override_snmp_trap_threshold", override_snmp_trap_threshold)
        if override_snmp_user is not None:
            pulumi.set(__self__, "override_snmp_user", override_snmp_user)
        if owner_vdom is not None:
            pulumi.set(__self__, "owner_vdom", owner_vdom)
        if poe_detection_type is not None:
            pulumi.set(__self__, "poe_detection_type", poe_detection_type)
        if poe_lldp_detection is not None:
            pulumi.set(__self__, "poe_lldp_detection", poe_lldp_detection)
        if poe_pre_standard_detection is not None:
            pulumi.set(__self__, "poe_pre_standard_detection", poe_pre_standard_detection)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if pre_provisioned is not None:
            pulumi.set(__self__, "pre_provisioned", pre_provisioned)
        if qos_drop_policy is not None:
            pulumi.set(__self__, "qos_drop_policy", qos_drop_policy)
        if qos_red_probability is not None:
            pulumi.set(__self__, "qos_red_probability", qos_red_probability)
        if remote_logs is not None:
            pulumi.set(__self__, "remote_logs", remote_logs)
        if sn is not None:
            pulumi.set(__self__, "sn", sn)
        if snmp_communities is not None:
            pulumi.set(__self__, "snmp_communities", snmp_communities)
        if snmp_sysinfo is not None:
            pulumi.set(__self__, "snmp_sysinfo", snmp_sysinfo)
        if snmp_trap_threshold is not None:
            pulumi.set(__self__, "snmp_trap_threshold", snmp_trap_threshold)
        if snmp_users is not None:
            pulumi.set(__self__, "snmp_users", snmp_users)
        if staged_image_version is not None:
            pulumi.set(__self__, "staged_image_version", staged_image_version)
        if static_macs is not None:
            pulumi.set(__self__, "static_macs", static_macs)
        if storm_control is not None:
            pulumi.set(__self__, "storm_control", storm_control)
        if stp_instances is not None:
            pulumi.set(__self__, "stp_instances", stp_instances)
        if stp_settings is not None:
            pulumi.set(__self__, "stp_settings", stp_settings)
        if switch_device_tag is not None:
            pulumi.set(__self__, "switch_device_tag", switch_device_tag)
        if switch_dhcp_opt43_key is not None:
            pulumi.set(__self__, "switch_dhcp_opt43_key", switch_dhcp_opt43_key)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)
        if switch_log is not None:
            pulumi.set(__self__, "switch_log", switch_log)
        if switch_profile is not None:
            pulumi.set(__self__, "switch_profile", switch_profile)
        if switch_stp_settings is not None:
            pulumi.set(__self__, "switch_stp_settings", switch_stp_settings)
        if tdr_supported is not None:
            pulumi.set(__self__, "tdr_supported", tdr_supported)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessProfile")
    def access_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_profile")

    @access_profile.setter
    def access_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_profile", value)

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchCustomCommandArgs']]]]:
        return pulumi.get(self, "custom_commands")

    @custom_commands.setter
    def custom_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchCustomCommandArgs']]]]):
        pulumi.set(self, "custom_commands", value)

    @property
    @pulumi.getter(name="delayedRestartTrigger")
    def delayed_restart_trigger(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delayed_restart_trigger")

    @delayed_restart_trigger.setter
    def delayed_restart_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delayed_restart_trigger", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_server_access_list")

    @dhcp_server_access_list.setter
    def dhcp_server_access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server_access_list", value)

    @property
    @pulumi.getter(name="dhcpSnoopingStaticClients")
    def dhcp_snooping_static_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs']]]]:
        return pulumi.get(self, "dhcp_snooping_static_clients")

    @dhcp_snooping_static_clients.setter
    def dhcp_snooping_static_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs']]]]):
        pulumi.set(self, "dhcp_snooping_static_clients", value)

    @property
    @pulumi.getter(name="directlyConnected")
    def directly_connected(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "directly_connected")

    @directly_connected.setter
    def directly_connected(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "directly_connected", value)

    @property
    @pulumi.getter(name="dynamicCapability")
    def dynamic_capability(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dynamic_capability")

    @dynamic_capability.setter
    def dynamic_capability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dynamic_capability", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="dynamicallyDiscovered")
    def dynamically_discovered(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dynamically_discovered")

    @dynamically_discovered.setter
    def dynamically_discovered(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dynamically_discovered", value)

    @property
    @pulumi.getter(name="firmwareProvision")
    def firmware_provision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision")

    @firmware_provision.setter
    def firmware_provision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision", value)

    @property
    @pulumi.getter(name="firmwareProvisionLatest")
    def firmware_provision_latest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision_latest")

    @firmware_provision_latest.setter
    def firmware_provision_latest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_latest", value)

    @property
    @pulumi.getter(name="firmwareProvisionVersion")
    def firmware_provision_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision_version")

    @firmware_provision_version.setter
    def firmware_provision_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_version", value)

    @property
    @pulumi.getter(name="flowIdentity")
    def flow_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_identity")

    @flow_identity.setter
    def flow_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_identity", value)

    @property
    @pulumi.getter(name="fswWan1Admin")
    def fsw_wan1_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsw_wan1_admin")

    @fsw_wan1_admin.setter
    def fsw_wan1_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan1_admin", value)

    @property
    @pulumi.getter(name="fswWan1Peer")
    def fsw_wan1_peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsw_wan1_peer")

    @fsw_wan1_peer.setter
    def fsw_wan1_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan1_peer", value)

    @property
    @pulumi.getter(name="fswWan2Admin")
    def fsw_wan2_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsw_wan2_admin")

    @fsw_wan2_admin.setter
    def fsw_wan2_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan2_admin", value)

    @property
    @pulumi.getter(name="fswWan2Peer")
    def fsw_wan2_peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsw_wan2_peer")

    @fsw_wan2_peer.setter
    def fsw_wan2_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsw_wan2_peer", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingArgs']]:
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingArgs']]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="ipSourceGuards")
    def ip_source_guards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardArgs']]]]:
        return pulumi.get(self, "ip_source_guards")

    @ip_source_guards.setter
    def ip_source_guards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardArgs']]]]):
        pulumi.set(self, "ip_source_guards", value)

    @property
    @pulumi.getter(name="l3Discovered")
    def l3_discovered(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "l3_discovered")

    @l3_discovered.setter
    def l3_discovered(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "l3_discovered", value)

    @property
    @pulumi.getter(name="maxAllowedTrunkMembers")
    def max_allowed_trunk_members(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_allowed_trunk_members")

    @max_allowed_trunk_members.setter
    def max_allowed_trunk_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_allowed_trunk_members", value)

    @property
    @pulumi.getter(name="mclagIgmpSnoopingAware")
    def mclag_igmp_snooping_aware(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mclag_igmp_snooping_aware")

    @mclag_igmp_snooping_aware.setter
    def mclag_igmp_snooping_aware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mclag_igmp_snooping_aware", value)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorArgs']]]]:
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorArgs']]]]):
        pulumi.set(self, "mirrors", value)

    @property
    @pulumi.getter(name="n8021xSettings")
    def n8021x_settings(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchN8021xSettingsArgs']]:
        return pulumi.get(self, "n8021x_settings")

    @n8021x_settings.setter
    def n8021x_settings(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchN8021xSettingsArgs']]):
        pulumi.set(self, "n8021x_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideSnmpCommunity")
    def override_snmp_community(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_snmp_community")

    @override_snmp_community.setter
    def override_snmp_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_community", value)

    @property
    @pulumi.getter(name="overrideSnmpSysinfo")
    def override_snmp_sysinfo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_snmp_sysinfo")

    @override_snmp_sysinfo.setter
    def override_snmp_sysinfo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_sysinfo", value)

    @property
    @pulumi.getter(name="overrideSnmpTrapThreshold")
    def override_snmp_trap_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_snmp_trap_threshold")

    @override_snmp_trap_threshold.setter
    def override_snmp_trap_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_trap_threshold", value)

    @property
    @pulumi.getter(name="overrideSnmpUser")
    def override_snmp_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_snmp_user")

    @override_snmp_user.setter
    def override_snmp_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_snmp_user", value)

    @property
    @pulumi.getter(name="ownerVdom")
    def owner_vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_vdom")

    @owner_vdom.setter
    def owner_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_vdom", value)

    @property
    @pulumi.getter(name="poeDetectionType")
    def poe_detection_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "poe_detection_type")

    @poe_detection_type.setter
    def poe_detection_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poe_detection_type", value)

    @property
    @pulumi.getter(name="poeLldpDetection")
    def poe_lldp_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_lldp_detection")

    @poe_lldp_detection.setter
    def poe_lldp_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_lldp_detection", value)

    @property
    @pulumi.getter(name="poePreStandardDetection")
    def poe_pre_standard_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_pre_standard_detection")

    @poe_pre_standard_detection.setter
    def poe_pre_standard_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_pre_standard_detection", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="preProvisioned")
    def pre_provisioned(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pre_provisioned")

    @pre_provisioned.setter
    def pre_provisioned(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pre_provisioned", value)

    @property
    @pulumi.getter(name="qosDropPolicy")
    def qos_drop_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qos_drop_policy")

    @qos_drop_policy.setter
    def qos_drop_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_drop_policy", value)

    @property
    @pulumi.getter(name="qosRedProbability")
    def qos_red_probability(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "qos_red_probability")

    @qos_red_probability.setter
    def qos_red_probability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qos_red_probability", value)

    @property
    @pulumi.getter(name="remoteLogs")
    def remote_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchRemoteLogArgs']]]]:
        return pulumi.get(self, "remote_logs")

    @remote_logs.setter
    def remote_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchRemoteLogArgs']]]]):
        pulumi.set(self, "remote_logs", value)

    @property
    @pulumi.getter
    def sn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sn")

    @sn.setter
    def sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sn", value)

    @property
    @pulumi.getter(name="snmpCommunities")
    def snmp_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityArgs']]]]:
        return pulumi.get(self, "snmp_communities")

    @snmp_communities.setter
    def snmp_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityArgs']]]]):
        pulumi.set(self, "snmp_communities", value)

    @property
    @pulumi.getter(name="snmpSysinfo")
    def snmp_sysinfo(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpSysinfoArgs']]:
        return pulumi.get(self, "snmp_sysinfo")

    @snmp_sysinfo.setter
    def snmp_sysinfo(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpSysinfoArgs']]):
        pulumi.set(self, "snmp_sysinfo", value)

    @property
    @pulumi.getter(name="snmpTrapThreshold")
    def snmp_trap_threshold(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpTrapThresholdArgs']]:
        return pulumi.get(self, "snmp_trap_threshold")

    @snmp_trap_threshold.setter
    def snmp_trap_threshold(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchSnmpTrapThresholdArgs']]):
        pulumi.set(self, "snmp_trap_threshold", value)

    @property
    @pulumi.getter(name="snmpUsers")
    def snmp_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpUserArgs']]]]:
        return pulumi.get(self, "snmp_users")

    @snmp_users.setter
    def snmp_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpUserArgs']]]]):
        pulumi.set(self, "snmp_users", value)

    @property
    @pulumi.getter(name="stagedImageVersion")
    def staged_image_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "staged_image_version")

    @staged_image_version.setter
    def staged_image_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "staged_image_version", value)

    @property
    @pulumi.getter(name="staticMacs")
    def static_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStaticMacArgs']]]]:
        return pulumi.get(self, "static_macs")

    @static_macs.setter
    def static_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStaticMacArgs']]]]):
        pulumi.set(self, "static_macs", value)

    @property
    @pulumi.getter(name="stormControl")
    def storm_control(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchStormControlArgs']]:
        return pulumi.get(self, "storm_control")

    @storm_control.setter
    def storm_control(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchStormControlArgs']]):
        pulumi.set(self, "storm_control", value)

    @property
    @pulumi.getter(name="stpInstances")
    def stp_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStpInstanceArgs']]]]:
        return pulumi.get(self, "stp_instances")

    @stp_instances.setter
    def stp_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchStpInstanceArgs']]]]):
        pulumi.set(self, "stp_instances", value)

    @property
    @pulumi.getter(name="stpSettings")
    def stp_settings(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchStpSettingsArgs']]:
        return pulumi.get(self, "stp_settings")

    @stp_settings.setter
    def stp_settings(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchStpSettingsArgs']]):
        pulumi.set(self, "stp_settings", value)

    @property
    @pulumi.getter(name="switchDeviceTag")
    def switch_device_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_device_tag")

    @switch_device_tag.setter
    def switch_device_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_device_tag", value)

    @property
    @pulumi.getter(name="switchDhcpOpt43Key")
    def switch_dhcp_opt43_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_dhcp_opt43_key")

    @switch_dhcp_opt43_key.setter
    def switch_dhcp_opt43_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_dhcp_opt43_key", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)

    @property
    @pulumi.getter(name="switchLog")
    def switch_log(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchLogArgs']]:
        return pulumi.get(self, "switch_log")

    @switch_log.setter
    def switch_log(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchLogArgs']]):
        pulumi.set(self, "switch_log", value)

    @property
    @pulumi.getter(name="switchProfile")
    def switch_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_profile")

    @switch_profile.setter
    def switch_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_profile", value)

    @property
    @pulumi.getter(name="switchStpSettings")
    def switch_stp_settings(self) -> Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchStpSettingsArgs']]:
        return pulumi.get(self, "switch_stp_settings")

    @switch_stp_settings.setter
    def switch_stp_settings(self, value: Optional[pulumi.Input['SwitchControllerManagedSwitchSwitchStpSettingsArgs']]):
        pulumi.set(self, "switch_stp_settings", value)

    @property
    @pulumi.getter(name="tdrSupported")
    def tdr_supported(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tdr_supported")

    @tdr_supported.setter
    def tdr_supported(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tdr_supported", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class SwitchControllerManagedSwitch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_profile: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchCustomCommandArgs']]]]] = None,
                 delayed_restart_trigger: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_static_clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs']]]]] = None,
                 directly_connected: Optional[pulumi.Input[int]] = None,
                 dynamic_capability: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamically_discovered: Optional[pulumi.Input[int]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 firmware_provision_version: Optional[pulumi.Input[str]] = None,
                 flow_identity: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_peer: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_peer: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchIgmpSnoopingArgs']]] = None,
                 ip_source_guards: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchIpSourceGuardArgs']]]]] = None,
                 l3_discovered: Optional[pulumi.Input[int]] = None,
                 max_allowed_trunk_members: Optional[pulumi.Input[int]] = None,
                 mclag_igmp_snooping_aware: Optional[pulumi.Input[str]] = None,
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchMirrorArgs']]]]] = None,
                 n8021x_settings: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchN8021xSettingsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_snmp_community: Optional[pulumi.Input[str]] = None,
                 override_snmp_sysinfo: Optional[pulumi.Input[str]] = None,
                 override_snmp_trap_threshold: Optional[pulumi.Input[str]] = None,
                 override_snmp_user: Optional[pulumi.Input[str]] = None,
                 owner_vdom: Optional[pulumi.Input[str]] = None,
                 poe_detection_type: Optional[pulumi.Input[int]] = None,
                 poe_lldp_detection: Optional[pulumi.Input[str]] = None,
                 poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchPortArgs']]]]] = None,
                 pre_provisioned: Optional[pulumi.Input[int]] = None,
                 qos_drop_policy: Optional[pulumi.Input[str]] = None,
                 qos_red_probability: Optional[pulumi.Input[int]] = None,
                 remote_logs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchRemoteLogArgs']]]]] = None,
                 sn: Optional[pulumi.Input[str]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpCommunityArgs']]]]] = None,
                 snmp_sysinfo: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpSysinfoArgs']]] = None,
                 snmp_trap_threshold: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpTrapThresholdArgs']]] = None,
                 snmp_users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpUserArgs']]]]] = None,
                 staged_image_version: Optional[pulumi.Input[str]] = None,
                 static_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStaticMacArgs']]]]] = None,
                 storm_control: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStormControlArgs']]] = None,
                 stp_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStpInstanceArgs']]]]] = None,
                 stp_settings: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStpSettingsArgs']]] = None,
                 switch_device_tag: Optional[pulumi.Input[str]] = None,
                 switch_dhcp_opt43_key: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None,
                 switch_log: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSwitchLogArgs']]] = None,
                 switch_profile: Optional[pulumi.Input[str]] = None,
                 switch_stp_settings: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSwitchStpSettingsArgs']]] = None,
                 tdr_supported: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a SwitchControllerManagedSwitch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SwitchControllerManagedSwitchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerManagedSwitch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerManagedSwitchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerManagedSwitchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_profile: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchCustomCommandArgs']]]]] = None,
                 delayed_restart_trigger: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping_static_clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs']]]]] = None,
                 directly_connected: Optional[pulumi.Input[int]] = None,
                 dynamic_capability: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamically_discovered: Optional[pulumi.Input[int]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 firmware_provision_version: Optional[pulumi.Input[str]] = None,
                 flow_identity: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan1_peer: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_admin: Optional[pulumi.Input[str]] = None,
                 fsw_wan2_peer: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchIgmpSnoopingArgs']]] = None,
                 ip_source_guards: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchIpSourceGuardArgs']]]]] = None,
                 l3_discovered: Optional[pulumi.Input[int]] = None,
                 max_allowed_trunk_members: Optional[pulumi.Input[int]] = None,
                 mclag_igmp_snooping_aware: Optional[pulumi.Input[str]] = None,
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchMirrorArgs']]]]] = None,
                 n8021x_settings: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchN8021xSettingsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_snmp_community: Optional[pulumi.Input[str]] = None,
                 override_snmp_sysinfo: Optional[pulumi.Input[str]] = None,
                 override_snmp_trap_threshold: Optional[pulumi.Input[str]] = None,
                 override_snmp_user: Optional[pulumi.Input[str]] = None,
                 owner_vdom: Optional[pulumi.Input[str]] = None,
                 poe_detection_type: Optional[pulumi.Input[int]] = None,
                 poe_lldp_detection: Optional[pulumi.Input[str]] = None,
                 poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchPortArgs']]]]] = None,
                 pre_provisioned: Optional[pulumi.Input[int]] = None,
                 qos_drop_policy: Optional[pulumi.Input[str]] = None,
                 qos_red_probability: Optional[pulumi.Input[int]] = None,
                 remote_logs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchRemoteLogArgs']]]]] = None,
                 sn: Optional[pulumi.Input[str]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpCommunityArgs']]]]] = None,
                 snmp_sysinfo: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpSysinfoArgs']]] = None,
                 snmp_trap_threshold: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpTrapThresholdArgs']]] = None,
                 snmp_users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpUserArgs']]]]] = None,
                 staged_image_version: Optional[pulumi.Input[str]] = None,
                 static_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStaticMacArgs']]]]] = None,
                 storm_control: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStormControlArgs']]] = None,
                 stp_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStpInstanceArgs']]]]] = None,
                 stp_settings: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStpSettingsArgs']]] = None,
                 switch_device_tag: Optional[pulumi.Input[str]] = None,
                 switch_dhcp_opt43_key: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None,
                 switch_log: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSwitchLogArgs']]] = None,
                 switch_profile: Optional[pulumi.Input[str]] = None,
                 switch_stp_settings: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSwitchStpSettingsArgs']]] = None,
                 tdr_supported: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerManagedSwitchArgs.__new__(SwitchControllerManagedSwitchArgs)

            __props__.__dict__["access_profile"] = access_profile
            __props__.__dict__["custom_commands"] = custom_commands
            __props__.__dict__["delayed_restart_trigger"] = delayed_restart_trigger
            __props__.__dict__["description"] = description
            __props__.__dict__["dhcp_server_access_list"] = dhcp_server_access_list
            __props__.__dict__["dhcp_snooping_static_clients"] = dhcp_snooping_static_clients
            __props__.__dict__["directly_connected"] = directly_connected
            __props__.__dict__["dynamic_capability"] = dynamic_capability
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["dynamically_discovered"] = dynamically_discovered
            __props__.__dict__["firmware_provision"] = firmware_provision
            __props__.__dict__["firmware_provision_latest"] = firmware_provision_latest
            __props__.__dict__["firmware_provision_version"] = firmware_provision_version
            __props__.__dict__["flow_identity"] = flow_identity
            __props__.__dict__["fsw_wan1_admin"] = fsw_wan1_admin
            if fsw_wan1_peer is None and not opts.urn:
                raise TypeError("Missing required property 'fsw_wan1_peer'")
            __props__.__dict__["fsw_wan1_peer"] = fsw_wan1_peer
            __props__.__dict__["fsw_wan2_admin"] = fsw_wan2_admin
            __props__.__dict__["fsw_wan2_peer"] = fsw_wan2_peer
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["igmp_snooping"] = igmp_snooping
            __props__.__dict__["ip_source_guards"] = ip_source_guards
            __props__.__dict__["l3_discovered"] = l3_discovered
            __props__.__dict__["max_allowed_trunk_members"] = max_allowed_trunk_members
            __props__.__dict__["mclag_igmp_snooping_aware"] = mclag_igmp_snooping_aware
            __props__.__dict__["mirrors"] = mirrors
            __props__.__dict__["n8021x_settings"] = n8021x_settings
            __props__.__dict__["name"] = name
            __props__.__dict__["override_snmp_community"] = override_snmp_community
            __props__.__dict__["override_snmp_sysinfo"] = override_snmp_sysinfo
            __props__.__dict__["override_snmp_trap_threshold"] = override_snmp_trap_threshold
            __props__.__dict__["override_snmp_user"] = override_snmp_user
            __props__.__dict__["owner_vdom"] = owner_vdom
            __props__.__dict__["poe_detection_type"] = poe_detection_type
            __props__.__dict__["poe_lldp_detection"] = poe_lldp_detection
            __props__.__dict__["poe_pre_standard_detection"] = poe_pre_standard_detection
            __props__.__dict__["ports"] = ports
            __props__.__dict__["pre_provisioned"] = pre_provisioned
            __props__.__dict__["qos_drop_policy"] = qos_drop_policy
            __props__.__dict__["qos_red_probability"] = qos_red_probability
            __props__.__dict__["remote_logs"] = remote_logs
            __props__.__dict__["sn"] = sn
            __props__.__dict__["snmp_communities"] = snmp_communities
            __props__.__dict__["snmp_sysinfo"] = snmp_sysinfo
            __props__.__dict__["snmp_trap_threshold"] = snmp_trap_threshold
            __props__.__dict__["snmp_users"] = snmp_users
            __props__.__dict__["staged_image_version"] = staged_image_version
            __props__.__dict__["static_macs"] = static_macs
            __props__.__dict__["storm_control"] = storm_control
            __props__.__dict__["stp_instances"] = stp_instances
            __props__.__dict__["stp_settings"] = stp_settings
            __props__.__dict__["switch_device_tag"] = switch_device_tag
            __props__.__dict__["switch_dhcp_opt43_key"] = switch_dhcp_opt43_key
            if switch_id is None and not opts.urn:
                raise TypeError("Missing required property 'switch_id'")
            __props__.__dict__["switch_id"] = switch_id
            __props__.__dict__["switch_log"] = switch_log
            __props__.__dict__["switch_profile"] = switch_profile
            __props__.__dict__["switch_stp_settings"] = switch_stp_settings
            __props__.__dict__["tdr_supported"] = tdr_supported
            __props__.__dict__["type"] = type
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["version"] = version
        super(SwitchControllerManagedSwitch, __self__).__init__(
            'fortios:index/switchControllerManagedSwitch:SwitchControllerManagedSwitch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_profile: Optional[pulumi.Input[str]] = None,
            custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchCustomCommandArgs']]]]] = None,
            delayed_restart_trigger: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
            dhcp_snooping_static_clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs']]]]] = None,
            directly_connected: Optional[pulumi.Input[int]] = None,
            dynamic_capability: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            dynamically_discovered: Optional[pulumi.Input[int]] = None,
            firmware_provision: Optional[pulumi.Input[str]] = None,
            firmware_provision_latest: Optional[pulumi.Input[str]] = None,
            firmware_provision_version: Optional[pulumi.Input[str]] = None,
            flow_identity: Optional[pulumi.Input[str]] = None,
            fsw_wan1_admin: Optional[pulumi.Input[str]] = None,
            fsw_wan1_peer: Optional[pulumi.Input[str]] = None,
            fsw_wan2_admin: Optional[pulumi.Input[str]] = None,
            fsw_wan2_peer: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            igmp_snooping: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchIgmpSnoopingArgs']]] = None,
            ip_source_guards: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchIpSourceGuardArgs']]]]] = None,
            l3_discovered: Optional[pulumi.Input[int]] = None,
            max_allowed_trunk_members: Optional[pulumi.Input[int]] = None,
            mclag_igmp_snooping_aware: Optional[pulumi.Input[str]] = None,
            mirrors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchMirrorArgs']]]]] = None,
            n8021x_settings: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchN8021xSettingsArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            override_snmp_community: Optional[pulumi.Input[str]] = None,
            override_snmp_sysinfo: Optional[pulumi.Input[str]] = None,
            override_snmp_trap_threshold: Optional[pulumi.Input[str]] = None,
            override_snmp_user: Optional[pulumi.Input[str]] = None,
            owner_vdom: Optional[pulumi.Input[str]] = None,
            poe_detection_type: Optional[pulumi.Input[int]] = None,
            poe_lldp_detection: Optional[pulumi.Input[str]] = None,
            poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
            ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchPortArgs']]]]] = None,
            pre_provisioned: Optional[pulumi.Input[int]] = None,
            qos_drop_policy: Optional[pulumi.Input[str]] = None,
            qos_red_probability: Optional[pulumi.Input[int]] = None,
            remote_logs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchRemoteLogArgs']]]]] = None,
            sn: Optional[pulumi.Input[str]] = None,
            snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpCommunityArgs']]]]] = None,
            snmp_sysinfo: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpSysinfoArgs']]] = None,
            snmp_trap_threshold: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpTrapThresholdArgs']]] = None,
            snmp_users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSnmpUserArgs']]]]] = None,
            staged_image_version: Optional[pulumi.Input[str]] = None,
            static_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStaticMacArgs']]]]] = None,
            storm_control: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStormControlArgs']]] = None,
            stp_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStpInstanceArgs']]]]] = None,
            stp_settings: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchStpSettingsArgs']]] = None,
            switch_device_tag: Optional[pulumi.Input[str]] = None,
            switch_dhcp_opt43_key: Optional[pulumi.Input[str]] = None,
            switch_id: Optional[pulumi.Input[str]] = None,
            switch_log: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSwitchLogArgs']]] = None,
            switch_profile: Optional[pulumi.Input[str]] = None,
            switch_stp_settings: Optional[pulumi.Input[pulumi.InputType['SwitchControllerManagedSwitchSwitchStpSettingsArgs']]] = None,
            tdr_supported: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'SwitchControllerManagedSwitch':
        """
        Get an existing SwitchControllerManagedSwitch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerManagedSwitchState.__new__(_SwitchControllerManagedSwitchState)

        __props__.__dict__["access_profile"] = access_profile
        __props__.__dict__["custom_commands"] = custom_commands
        __props__.__dict__["delayed_restart_trigger"] = delayed_restart_trigger
        __props__.__dict__["description"] = description
        __props__.__dict__["dhcp_server_access_list"] = dhcp_server_access_list
        __props__.__dict__["dhcp_snooping_static_clients"] = dhcp_snooping_static_clients
        __props__.__dict__["directly_connected"] = directly_connected
        __props__.__dict__["dynamic_capability"] = dynamic_capability
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["dynamically_discovered"] = dynamically_discovered
        __props__.__dict__["firmware_provision"] = firmware_provision
        __props__.__dict__["firmware_provision_latest"] = firmware_provision_latest
        __props__.__dict__["firmware_provision_version"] = firmware_provision_version
        __props__.__dict__["flow_identity"] = flow_identity
        __props__.__dict__["fsw_wan1_admin"] = fsw_wan1_admin
        __props__.__dict__["fsw_wan1_peer"] = fsw_wan1_peer
        __props__.__dict__["fsw_wan2_admin"] = fsw_wan2_admin
        __props__.__dict__["fsw_wan2_peer"] = fsw_wan2_peer
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["igmp_snooping"] = igmp_snooping
        __props__.__dict__["ip_source_guards"] = ip_source_guards
        __props__.__dict__["l3_discovered"] = l3_discovered
        __props__.__dict__["max_allowed_trunk_members"] = max_allowed_trunk_members
        __props__.__dict__["mclag_igmp_snooping_aware"] = mclag_igmp_snooping_aware
        __props__.__dict__["mirrors"] = mirrors
        __props__.__dict__["n8021x_settings"] = n8021x_settings
        __props__.__dict__["name"] = name
        __props__.__dict__["override_snmp_community"] = override_snmp_community
        __props__.__dict__["override_snmp_sysinfo"] = override_snmp_sysinfo
        __props__.__dict__["override_snmp_trap_threshold"] = override_snmp_trap_threshold
        __props__.__dict__["override_snmp_user"] = override_snmp_user
        __props__.__dict__["owner_vdom"] = owner_vdom
        __props__.__dict__["poe_detection_type"] = poe_detection_type
        __props__.__dict__["poe_lldp_detection"] = poe_lldp_detection
        __props__.__dict__["poe_pre_standard_detection"] = poe_pre_standard_detection
        __props__.__dict__["ports"] = ports
        __props__.__dict__["pre_provisioned"] = pre_provisioned
        __props__.__dict__["qos_drop_policy"] = qos_drop_policy
        __props__.__dict__["qos_red_probability"] = qos_red_probability
        __props__.__dict__["remote_logs"] = remote_logs
        __props__.__dict__["sn"] = sn
        __props__.__dict__["snmp_communities"] = snmp_communities
        __props__.__dict__["snmp_sysinfo"] = snmp_sysinfo
        __props__.__dict__["snmp_trap_threshold"] = snmp_trap_threshold
        __props__.__dict__["snmp_users"] = snmp_users
        __props__.__dict__["staged_image_version"] = staged_image_version
        __props__.__dict__["static_macs"] = static_macs
        __props__.__dict__["storm_control"] = storm_control
        __props__.__dict__["stp_instances"] = stp_instances
        __props__.__dict__["stp_settings"] = stp_settings
        __props__.__dict__["switch_device_tag"] = switch_device_tag
        __props__.__dict__["switch_dhcp_opt43_key"] = switch_dhcp_opt43_key
        __props__.__dict__["switch_id"] = switch_id
        __props__.__dict__["switch_log"] = switch_log
        __props__.__dict__["switch_profile"] = switch_profile
        __props__.__dict__["switch_stp_settings"] = switch_stp_settings
        __props__.__dict__["tdr_supported"] = tdr_supported
        __props__.__dict__["type"] = type
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["version"] = version
        return SwitchControllerManagedSwitch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessProfile")
    def access_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "access_profile")

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerManagedSwitchCustomCommand']]]:
        return pulumi.get(self, "custom_commands")

    @property
    @pulumi.getter(name="delayedRestartTrigger")
    def delayed_restart_trigger(self) -> pulumi.Output[int]:
        return pulumi.get(self, "delayed_restart_trigger")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_server_access_list")

    @property
    @pulumi.getter(name="dhcpSnoopingStaticClients")
    def dhcp_snooping_static_clients(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerManagedSwitchDhcpSnoopingStaticClient']]]:
        return pulumi.get(self, "dhcp_snooping_static_clients")

    @property
    @pulumi.getter(name="directlyConnected")
    def directly_connected(self) -> pulumi.Output[int]:
        return pulumi.get(self, "directly_connected")

    @property
    @pulumi.getter(name="dynamicCapability")
    def dynamic_capability(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dynamic_capability")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="dynamicallyDiscovered")
    def dynamically_discovered(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dynamically_discovered")

    @property
    @pulumi.getter(name="firmwareProvision")
    def firmware_provision(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firmware_provision")

    @property
    @pulumi.getter(name="firmwareProvisionLatest")
    def firmware_provision_latest(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firmware_provision_latest")

    @property
    @pulumi.getter(name="firmwareProvisionVersion")
    def firmware_provision_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firmware_provision_version")

    @property
    @pulumi.getter(name="flowIdentity")
    def flow_identity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "flow_identity")

    @property
    @pulumi.getter(name="fswWan1Admin")
    def fsw_wan1_admin(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fsw_wan1_admin")

    @property
    @pulumi.getter(name="fswWan1Peer")
    def fsw_wan1_peer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fsw_wan1_peer")

    @property
    @pulumi.getter(name="fswWan2Admin")
    def fsw_wan2_admin(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fsw_wan2_admin")

    @property
    @pulumi.getter(name="fswWan2Peer")
    def fsw_wan2_peer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fsw_wan2_peer")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> pulumi.Output['outputs.SwitchControllerManagedSwitchIgmpSnooping']:
        return pulumi.get(self, "igmp_snooping")

    @property
    @pulumi.getter(name="ipSourceGuards")
    def ip_source_guards(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerManagedSwitchIpSourceGuard']]]:
        return pulumi.get(self, "ip_source_guards")

    @property
    @pulumi.getter(name="l3Discovered")
    def l3_discovered(self) -> pulumi.Output[int]:
        return pulumi.get(self, "l3_discovered")

    @property
    @pulumi.getter(name="maxAllowedTrunkMembers")
    def max_allowed_trunk_members(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_allowed_trunk_members")

    @property
    @pulumi.getter(name="mclagIgmpSnoopingAware")
    def mclag_igmp_snooping_aware(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mclag_igmp_snooping_aware")

    @property
    @pulumi.getter
    def mirrors(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerManagedSwitchMirror']]]:
        return pulumi.get(self, "mirrors")

    @property
    @pulumi.getter(name="n8021xSettings")
    def n8021x_settings(self) -> pulumi.Output['outputs.SwitchControllerManagedSwitchN8021xSettings']:
        return pulumi.get(self, "n8021x_settings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideSnmpCommunity")
    def override_snmp_community(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_snmp_community")

    @property
    @pulumi.getter(name="overrideSnmpSysinfo")
    def override_snmp_sysinfo(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_snmp_sysinfo")

    @property
    @pulumi.getter(name="overrideSnmpTrapThreshold")
    def override_snmp_trap_threshold(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_snmp_trap_threshold")

    @property
    @pulumi.getter(name="overrideSnmpUser")
    def override_snmp_user(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_snmp_user")

    @property
    @pulumi.getter(name="ownerVdom")
    def owner_vdom(self) -> pulumi.Output[str]:
        return pulumi.get(self, "owner_vdom")

    @property
    @pulumi.getter(name="poeDetectionType")
    def poe_detection_type(self) -> pulumi.Output[int]:
        return pulumi.get(self, "poe_detection_type")

    @property
    @pulumi.getter(name="poeLldpDetection")
    def poe_lldp_detection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "poe_lldp_detection")

    @property
    @pulumi.getter(name="poePreStandardDetection")
    def poe_pre_standard_detection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "poe_pre_standard_detection")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[Sequence['outputs.SwitchControllerManagedSwitchPort']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="preProvisioned")
    def pre_provisioned(self) -> pulumi.Output[int]:
        return pulumi.get(self, "pre_provisioned")

    @property
    @pulumi.getter(name="qosDropPolicy")
    def qos_drop_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "qos_drop_policy")

    @property
    @pulumi.getter(name="qosRedProbability")
    def qos_red_probability(self) -> pulumi.Output[int]:
        return pulumi.get(self, "qos_red_probability")

    @property
    @pulumi.getter(name="remoteLogs")
    def remote_logs(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerManagedSwitchRemoteLog']]]:
        return pulumi.get(self, "remote_logs")

    @property
    @pulumi.getter
    def sn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sn")

    @property
    @pulumi.getter(name="snmpCommunities")
    def snmp_communities(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerManagedSwitchSnmpCommunity']]]:
        return pulumi.get(self, "snmp_communities")

    @property
    @pulumi.getter(name="snmpSysinfo")
    def snmp_sysinfo(self) -> pulumi.Output['outputs.SwitchControllerManagedSwitchSnmpSysinfo']:
        return pulumi.get(self, "snmp_sysinfo")

    @property
    @pulumi.getter(name="snmpTrapThreshold")
    def snmp_trap_threshold(self) -> pulumi.Output['outputs.SwitchControllerManagedSwitchSnmpTrapThreshold']:
        return pulumi.get(self, "snmp_trap_threshold")

    @property
    @pulumi.getter(name="snmpUsers")
    def snmp_users(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerManagedSwitchSnmpUser']]]:
        return pulumi.get(self, "snmp_users")

    @property
    @pulumi.getter(name="stagedImageVersion")
    def staged_image_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "staged_image_version")

    @property
    @pulumi.getter(name="staticMacs")
    def static_macs(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerManagedSwitchStaticMac']]]:
        return pulumi.get(self, "static_macs")

    @property
    @pulumi.getter(name="stormControl")
    def storm_control(self) -> pulumi.Output['outputs.SwitchControllerManagedSwitchStormControl']:
        return pulumi.get(self, "storm_control")

    @property
    @pulumi.getter(name="stpInstances")
    def stp_instances(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerManagedSwitchStpInstance']]]:
        return pulumi.get(self, "stp_instances")

    @property
    @pulumi.getter(name="stpSettings")
    def stp_settings(self) -> pulumi.Output['outputs.SwitchControllerManagedSwitchStpSettings']:
        return pulumi.get(self, "stp_settings")

    @property
    @pulumi.getter(name="switchDeviceTag")
    def switch_device_tag(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_device_tag")

    @property
    @pulumi.getter(name="switchDhcpOpt43Key")
    def switch_dhcp_opt43_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_dhcp_opt43_key")

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_id")

    @property
    @pulumi.getter(name="switchLog")
    def switch_log(self) -> pulumi.Output['outputs.SwitchControllerManagedSwitchSwitchLog']:
        return pulumi.get(self, "switch_log")

    @property
    @pulumi.getter(name="switchProfile")
    def switch_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_profile")

    @property
    @pulumi.getter(name="switchStpSettings")
    def switch_stp_settings(self) -> pulumi.Output['outputs.SwitchControllerManagedSwitchSwitchStpSettings']:
        return pulumi.get(self, "switch_stp_settings")

    @property
    @pulumi.getter(name="tdrSupported")
    def tdr_supported(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tdr_supported")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        return pulumi.get(self, "version")

