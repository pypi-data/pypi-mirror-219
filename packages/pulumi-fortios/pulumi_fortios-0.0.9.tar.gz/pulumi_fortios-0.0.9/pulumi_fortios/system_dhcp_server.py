# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemDhcpServerArgs', 'SystemDhcpServer']

@pulumi.input_type
class SystemDhcpServerArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 netmask: pulumi.Input[str],
                 auto_configuration: Optional[pulumi.Input[str]] = None,
                 auto_managed_status: Optional[pulumi.Input[str]] = None,
                 conflicted_ip_timeout: Optional[pulumi.Input[int]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_update: Optional[pulumi.Input[str]] = None,
                 ddns_update_override: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 default_gateway: Optional[pulumi.Input[str]] = None,
                 dhcp_settings_from_fortiipam: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeArgs']]]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 forticlient_on_net_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeArgs']]]] = None,
                 ipsec_lease_hold: Optional[pulumi.Input[int]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_acl_default_action: Optional[pulumi.Input[str]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server1: Optional[pulumi.Input[str]] = None,
                 ntp_server2: Optional[pulumi.Input[str]] = None,
                 ntp_server3: Optional[pulumi.Input[str]] = None,
                 ntp_service: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionArgs']]]] = None,
                 relay_agent: Optional[pulumi.Input[str]] = None,
                 reserved_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerReservedAddressArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 shared_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tftp_servers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerTftpServerArgs']]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 timezone_option: Optional[pulumi.Input[str]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerVciStringArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wifi_ac1: Optional[pulumi.Input[str]] = None,
                 wifi_ac2: Optional[pulumi.Input[str]] = None,
                 wifi_ac3: Optional[pulumi.Input[str]] = None,
                 wifi_ac_service: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemDhcpServer resource.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "netmask", netmask)
        if auto_configuration is not None:
            pulumi.set(__self__, "auto_configuration", auto_configuration)
        if auto_managed_status is not None:
            pulumi.set(__self__, "auto_managed_status", auto_managed_status)
        if conflicted_ip_timeout is not None:
            pulumi.set(__self__, "conflicted_ip_timeout", conflicted_ip_timeout)
        if ddns_auth is not None:
            pulumi.set(__self__, "ddns_auth", ddns_auth)
        if ddns_key is not None:
            pulumi.set(__self__, "ddns_key", ddns_key)
        if ddns_keyname is not None:
            pulumi.set(__self__, "ddns_keyname", ddns_keyname)
        if ddns_server_ip is not None:
            pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_ttl is not None:
            pulumi.set(__self__, "ddns_ttl", ddns_ttl)
        if ddns_update is not None:
            pulumi.set(__self__, "ddns_update", ddns_update)
        if ddns_update_override is not None:
            pulumi.set(__self__, "ddns_update_override", ddns_update_override)
        if ddns_zone is not None:
            pulumi.set(__self__, "ddns_zone", ddns_zone)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if dhcp_settings_from_fortiipam is not None:
            pulumi.set(__self__, "dhcp_settings_from_fortiipam", dhcp_settings_from_fortiipam)
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_server3 is not None:
            pulumi.set(__self__, "dns_server3", dns_server3)
        if dns_server4 is not None:
            pulumi.set(__self__, "dns_server4", dns_server4)
        if dns_service is not None:
            pulumi.set(__self__, "dns_service", dns_service)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if exclude_ranges is not None:
            pulumi.set(__self__, "exclude_ranges", exclude_ranges)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if forticlient_on_net_status is not None:
            pulumi.set(__self__, "forticlient_on_net_status", forticlient_on_net_status)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_mode is not None:
            pulumi.set(__self__, "ip_mode", ip_mode)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if ipsec_lease_hold is not None:
            pulumi.set(__self__, "ipsec_lease_hold", ipsec_lease_hold)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if mac_acl_default_action is not None:
            pulumi.set(__self__, "mac_acl_default_action", mac_acl_default_action)
        if next_server is not None:
            pulumi.set(__self__, "next_server", next_server)
        if ntp_server1 is not None:
            pulumi.set(__self__, "ntp_server1", ntp_server1)
        if ntp_server2 is not None:
            pulumi.set(__self__, "ntp_server2", ntp_server2)
        if ntp_server3 is not None:
            pulumi.set(__self__, "ntp_server3", ntp_server3)
        if ntp_service is not None:
            pulumi.set(__self__, "ntp_service", ntp_service)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if relay_agent is not None:
            pulumi.set(__self__, "relay_agent", relay_agent)
        if reserved_addresses is not None:
            pulumi.set(__self__, "reserved_addresses", reserved_addresses)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if shared_subnet is not None:
            pulumi.set(__self__, "shared_subnet", shared_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tftp_servers is not None:
            pulumi.set(__self__, "tftp_servers", tftp_servers)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if timezone_option is not None:
            pulumi.set(__self__, "timezone_option", timezone_option)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wifi_ac1 is not None:
            pulumi.set(__self__, "wifi_ac1", wifi_ac1)
        if wifi_ac2 is not None:
            pulumi.set(__self__, "wifi_ac2", wifi_ac2)
        if wifi_ac3 is not None:
            pulumi.set(__self__, "wifi_ac3", wifi_ac3)
        if wifi_ac_service is not None:
            pulumi.set(__self__, "wifi_ac_service", wifi_ac_service)
        if wins_server1 is not None:
            pulumi.set(__self__, "wins_server1", wins_server1)
        if wins_server2 is not None:
            pulumi.set(__self__, "wins_server2", wins_server2)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def netmask(self) -> pulumi.Input[str]:
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: pulumi.Input[str]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter(name="autoConfiguration")
    def auto_configuration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_configuration")

    @auto_configuration.setter
    def auto_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_configuration", value)

    @property
    @pulumi.getter(name="autoManagedStatus")
    def auto_managed_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_managed_status")

    @auto_managed_status.setter
    def auto_managed_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_managed_status", value)

    @property
    @pulumi.getter(name="conflictedIpTimeout")
    def conflicted_ip_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conflicted_ip_timeout")

    @conflicted_ip_timeout.setter
    def conflicted_ip_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conflicted_ip_timeout", value)

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_auth")

    @ddns_auth.setter
    def ddns_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_auth", value)

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_key")

    @ddns_key.setter
    def ddns_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_key", value)

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_keyname")

    @ddns_keyname.setter
    def ddns_keyname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_keyname", value)

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_server_ip")

    @ddns_server_ip.setter
    def ddns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip", value)

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ddns_ttl")

    @ddns_ttl.setter
    def ddns_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddns_ttl", value)

    @property
    @pulumi.getter(name="ddnsUpdate")
    def ddns_update(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_update")

    @ddns_update.setter
    def ddns_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_update", value)

    @property
    @pulumi.getter(name="ddnsUpdateOverride")
    def ddns_update_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_update_override")

    @ddns_update_override.setter
    def ddns_update_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_update_override", value)

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_zone")

    @ddns_zone.setter
    def ddns_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_zone", value)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="dhcpSettingsFromFortiipam")
    def dhcp_settings_from_fortiipam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_settings_from_fortiipam")

    @dhcp_settings_from_fortiipam.setter
    def dhcp_settings_from_fortiipam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_settings_from_fortiipam", value)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter(name="dnsServer3")
    def dns_server3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server3")

    @dns_server3.setter
    def dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server3", value)

    @property
    @pulumi.getter(name="dnsServer4")
    def dns_server4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server4")

    @dns_server4.setter
    def dns_server4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server4", value)

    @property
    @pulumi.getter(name="dnsService")
    def dns_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_service")

    @dns_service.setter
    def dns_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_service", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="excludeRanges")
    def exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeArgs']]]]:
        return pulumi.get(self, "exclude_ranges")

    @exclude_ranges.setter
    def exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeArgs']]]]):
        pulumi.set(self, "exclude_ranges", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter(name="forticlientOnNetStatus")
    def forticlient_on_net_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_on_net_status")

    @forticlient_on_net_status.setter
    def forticlient_on_net_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_on_net_status", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_mode")

    @ip_mode.setter
    def ip_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mode", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeArgs']]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="ipsecLeaseHold")
    def ipsec_lease_hold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipsec_lease_hold")

    @ipsec_lease_hold.setter
    def ipsec_lease_hold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_lease_hold", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="macAclDefaultAction")
    def mac_acl_default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_acl_default_action")

    @mac_acl_default_action.setter
    def mac_acl_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_acl_default_action", value)

    @property
    @pulumi.getter(name="nextServer")
    def next_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_server")

    @next_server.setter
    def next_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_server", value)

    @property
    @pulumi.getter(name="ntpServer1")
    def ntp_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntp_server1")

    @ntp_server1.setter
    def ntp_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server1", value)

    @property
    @pulumi.getter(name="ntpServer2")
    def ntp_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntp_server2")

    @ntp_server2.setter
    def ntp_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server2", value)

    @property
    @pulumi.getter(name="ntpServer3")
    def ntp_server3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntp_server3")

    @ntp_server3.setter
    def ntp_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server3", value)

    @property
    @pulumi.getter(name="ntpService")
    def ntp_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntp_service")

    @ntp_service.setter
    def ntp_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_service", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionArgs']]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="relayAgent")
    def relay_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "relay_agent")

    @relay_agent.setter
    def relay_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relay_agent", value)

    @property
    @pulumi.getter(name="reservedAddresses")
    def reserved_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerReservedAddressArgs']]]]:
        return pulumi.get(self, "reserved_addresses")

    @reserved_addresses.setter
    def reserved_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerReservedAddressArgs']]]]):
        pulumi.set(self, "reserved_addresses", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="sharedSubnet")
    def shared_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_subnet")

    @shared_subnet.setter
    def shared_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_subnet", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tftpServers")
    def tftp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerTftpServerArgs']]]]:
        return pulumi.get(self, "tftp_servers")

    @tftp_servers.setter
    def tftp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerTftpServerArgs']]]]):
        pulumi.set(self, "tftp_servers", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="timezoneOption")
    def timezone_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone_option")

    @timezone_option.setter
    def timezone_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone_option", value)

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vci_match")

    @vci_match.setter
    def vci_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_match", value)

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerVciStringArgs']]]]:
        return pulumi.get(self, "vci_strings")

    @vci_strings.setter
    def vci_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerVciStringArgs']]]]):
        pulumi.set(self, "vci_strings", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wifiAc1")
    def wifi_ac1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_ac1")

    @wifi_ac1.setter
    def wifi_ac1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac1", value)

    @property
    @pulumi.getter(name="wifiAc2")
    def wifi_ac2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_ac2")

    @wifi_ac2.setter
    def wifi_ac2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac2", value)

    @property
    @pulumi.getter(name="wifiAc3")
    def wifi_ac3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_ac3")

    @wifi_ac3.setter
    def wifi_ac3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac3", value)

    @property
    @pulumi.getter(name="wifiAcService")
    def wifi_ac_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_ac_service")

    @wifi_ac_service.setter
    def wifi_ac_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac_service", value)

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wins_server1")

    @wins_server1.setter
    def wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server1", value)

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wins_server2")

    @wins_server2.setter
    def wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server2", value)


@pulumi.input_type
class _SystemDhcpServerState:
    def __init__(__self__, *,
                 auto_configuration: Optional[pulumi.Input[str]] = None,
                 auto_managed_status: Optional[pulumi.Input[str]] = None,
                 conflicted_ip_timeout: Optional[pulumi.Input[int]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_update: Optional[pulumi.Input[str]] = None,
                 ddns_update_override: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 default_gateway: Optional[pulumi.Input[str]] = None,
                 dhcp_settings_from_fortiipam: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeArgs']]]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 forticlient_on_net_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeArgs']]]] = None,
                 ipsec_lease_hold: Optional[pulumi.Input[int]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_acl_default_action: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server1: Optional[pulumi.Input[str]] = None,
                 ntp_server2: Optional[pulumi.Input[str]] = None,
                 ntp_server3: Optional[pulumi.Input[str]] = None,
                 ntp_service: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionArgs']]]] = None,
                 relay_agent: Optional[pulumi.Input[str]] = None,
                 reserved_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerReservedAddressArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 shared_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tftp_servers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerTftpServerArgs']]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 timezone_option: Optional[pulumi.Input[str]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerVciStringArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wifi_ac1: Optional[pulumi.Input[str]] = None,
                 wifi_ac2: Optional[pulumi.Input[str]] = None,
                 wifi_ac3: Optional[pulumi.Input[str]] = None,
                 wifi_ac_service: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemDhcpServer resources.
        """
        if auto_configuration is not None:
            pulumi.set(__self__, "auto_configuration", auto_configuration)
        if auto_managed_status is not None:
            pulumi.set(__self__, "auto_managed_status", auto_managed_status)
        if conflicted_ip_timeout is not None:
            pulumi.set(__self__, "conflicted_ip_timeout", conflicted_ip_timeout)
        if ddns_auth is not None:
            pulumi.set(__self__, "ddns_auth", ddns_auth)
        if ddns_key is not None:
            pulumi.set(__self__, "ddns_key", ddns_key)
        if ddns_keyname is not None:
            pulumi.set(__self__, "ddns_keyname", ddns_keyname)
        if ddns_server_ip is not None:
            pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_ttl is not None:
            pulumi.set(__self__, "ddns_ttl", ddns_ttl)
        if ddns_update is not None:
            pulumi.set(__self__, "ddns_update", ddns_update)
        if ddns_update_override is not None:
            pulumi.set(__self__, "ddns_update_override", ddns_update_override)
        if ddns_zone is not None:
            pulumi.set(__self__, "ddns_zone", ddns_zone)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if dhcp_settings_from_fortiipam is not None:
            pulumi.set(__self__, "dhcp_settings_from_fortiipam", dhcp_settings_from_fortiipam)
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_server3 is not None:
            pulumi.set(__self__, "dns_server3", dns_server3)
        if dns_server4 is not None:
            pulumi.set(__self__, "dns_server4", dns_server4)
        if dns_service is not None:
            pulumi.set(__self__, "dns_service", dns_service)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if exclude_ranges is not None:
            pulumi.set(__self__, "exclude_ranges", exclude_ranges)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if forticlient_on_net_status is not None:
            pulumi.set(__self__, "forticlient_on_net_status", forticlient_on_net_status)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_mode is not None:
            pulumi.set(__self__, "ip_mode", ip_mode)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if ipsec_lease_hold is not None:
            pulumi.set(__self__, "ipsec_lease_hold", ipsec_lease_hold)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if mac_acl_default_action is not None:
            pulumi.set(__self__, "mac_acl_default_action", mac_acl_default_action)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if next_server is not None:
            pulumi.set(__self__, "next_server", next_server)
        if ntp_server1 is not None:
            pulumi.set(__self__, "ntp_server1", ntp_server1)
        if ntp_server2 is not None:
            pulumi.set(__self__, "ntp_server2", ntp_server2)
        if ntp_server3 is not None:
            pulumi.set(__self__, "ntp_server3", ntp_server3)
        if ntp_service is not None:
            pulumi.set(__self__, "ntp_service", ntp_service)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if relay_agent is not None:
            pulumi.set(__self__, "relay_agent", relay_agent)
        if reserved_addresses is not None:
            pulumi.set(__self__, "reserved_addresses", reserved_addresses)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if shared_subnet is not None:
            pulumi.set(__self__, "shared_subnet", shared_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tftp_servers is not None:
            pulumi.set(__self__, "tftp_servers", tftp_servers)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if timezone_option is not None:
            pulumi.set(__self__, "timezone_option", timezone_option)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wifi_ac1 is not None:
            pulumi.set(__self__, "wifi_ac1", wifi_ac1)
        if wifi_ac2 is not None:
            pulumi.set(__self__, "wifi_ac2", wifi_ac2)
        if wifi_ac3 is not None:
            pulumi.set(__self__, "wifi_ac3", wifi_ac3)
        if wifi_ac_service is not None:
            pulumi.set(__self__, "wifi_ac_service", wifi_ac_service)
        if wins_server1 is not None:
            pulumi.set(__self__, "wins_server1", wins_server1)
        if wins_server2 is not None:
            pulumi.set(__self__, "wins_server2", wins_server2)

    @property
    @pulumi.getter(name="autoConfiguration")
    def auto_configuration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_configuration")

    @auto_configuration.setter
    def auto_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_configuration", value)

    @property
    @pulumi.getter(name="autoManagedStatus")
    def auto_managed_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_managed_status")

    @auto_managed_status.setter
    def auto_managed_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_managed_status", value)

    @property
    @pulumi.getter(name="conflictedIpTimeout")
    def conflicted_ip_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conflicted_ip_timeout")

    @conflicted_ip_timeout.setter
    def conflicted_ip_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conflicted_ip_timeout", value)

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_auth")

    @ddns_auth.setter
    def ddns_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_auth", value)

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_key")

    @ddns_key.setter
    def ddns_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_key", value)

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_keyname")

    @ddns_keyname.setter
    def ddns_keyname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_keyname", value)

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_server_ip")

    @ddns_server_ip.setter
    def ddns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip", value)

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ddns_ttl")

    @ddns_ttl.setter
    def ddns_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddns_ttl", value)

    @property
    @pulumi.getter(name="ddnsUpdate")
    def ddns_update(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_update")

    @ddns_update.setter
    def ddns_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_update", value)

    @property
    @pulumi.getter(name="ddnsUpdateOverride")
    def ddns_update_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_update_override")

    @ddns_update_override.setter
    def ddns_update_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_update_override", value)

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_zone")

    @ddns_zone.setter
    def ddns_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_zone", value)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="dhcpSettingsFromFortiipam")
    def dhcp_settings_from_fortiipam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_settings_from_fortiipam")

    @dhcp_settings_from_fortiipam.setter
    def dhcp_settings_from_fortiipam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_settings_from_fortiipam", value)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter(name="dnsServer3")
    def dns_server3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server3")

    @dns_server3.setter
    def dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server3", value)

    @property
    @pulumi.getter(name="dnsServer4")
    def dns_server4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server4")

    @dns_server4.setter
    def dns_server4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server4", value)

    @property
    @pulumi.getter(name="dnsService")
    def dns_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_service")

    @dns_service.setter
    def dns_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_service", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="excludeRanges")
    def exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeArgs']]]]:
        return pulumi.get(self, "exclude_ranges")

    @exclude_ranges.setter
    def exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeArgs']]]]):
        pulumi.set(self, "exclude_ranges", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter(name="forticlientOnNetStatus")
    def forticlient_on_net_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_on_net_status")

    @forticlient_on_net_status.setter
    def forticlient_on_net_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_on_net_status", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_mode")

    @ip_mode.setter
    def ip_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mode", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeArgs']]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="ipsecLeaseHold")
    def ipsec_lease_hold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipsec_lease_hold")

    @ipsec_lease_hold.setter
    def ipsec_lease_hold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_lease_hold", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="macAclDefaultAction")
    def mac_acl_default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_acl_default_action")

    @mac_acl_default_action.setter
    def mac_acl_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_acl_default_action", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter(name="nextServer")
    def next_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_server")

    @next_server.setter
    def next_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_server", value)

    @property
    @pulumi.getter(name="ntpServer1")
    def ntp_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntp_server1")

    @ntp_server1.setter
    def ntp_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server1", value)

    @property
    @pulumi.getter(name="ntpServer2")
    def ntp_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntp_server2")

    @ntp_server2.setter
    def ntp_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server2", value)

    @property
    @pulumi.getter(name="ntpServer3")
    def ntp_server3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntp_server3")

    @ntp_server3.setter
    def ntp_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server3", value)

    @property
    @pulumi.getter(name="ntpService")
    def ntp_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntp_service")

    @ntp_service.setter
    def ntp_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_service", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionArgs']]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="relayAgent")
    def relay_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "relay_agent")

    @relay_agent.setter
    def relay_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relay_agent", value)

    @property
    @pulumi.getter(name="reservedAddresses")
    def reserved_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerReservedAddressArgs']]]]:
        return pulumi.get(self, "reserved_addresses")

    @reserved_addresses.setter
    def reserved_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerReservedAddressArgs']]]]):
        pulumi.set(self, "reserved_addresses", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="sharedSubnet")
    def shared_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_subnet")

    @shared_subnet.setter
    def shared_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_subnet", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tftpServers")
    def tftp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerTftpServerArgs']]]]:
        return pulumi.get(self, "tftp_servers")

    @tftp_servers.setter
    def tftp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerTftpServerArgs']]]]):
        pulumi.set(self, "tftp_servers", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="timezoneOption")
    def timezone_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone_option")

    @timezone_option.setter
    def timezone_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone_option", value)

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vci_match")

    @vci_match.setter
    def vci_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_match", value)

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerVciStringArgs']]]]:
        return pulumi.get(self, "vci_strings")

    @vci_strings.setter
    def vci_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerVciStringArgs']]]]):
        pulumi.set(self, "vci_strings", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wifiAc1")
    def wifi_ac1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_ac1")

    @wifi_ac1.setter
    def wifi_ac1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac1", value)

    @property
    @pulumi.getter(name="wifiAc2")
    def wifi_ac2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_ac2")

    @wifi_ac2.setter
    def wifi_ac2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac2", value)

    @property
    @pulumi.getter(name="wifiAc3")
    def wifi_ac3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_ac3")

    @wifi_ac3.setter
    def wifi_ac3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac3", value)

    @property
    @pulumi.getter(name="wifiAcService")
    def wifi_ac_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_ac_service")

    @wifi_ac_service.setter
    def wifi_ac_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac_service", value)

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wins_server1")

    @wins_server1.setter
    def wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server1", value)

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wins_server2")

    @wins_server2.setter
    def wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server2", value)


class SystemDhcpServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_configuration: Optional[pulumi.Input[str]] = None,
                 auto_managed_status: Optional[pulumi.Input[str]] = None,
                 conflicted_ip_timeout: Optional[pulumi.Input[int]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_update: Optional[pulumi.Input[str]] = None,
                 ddns_update_override: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 default_gateway: Optional[pulumi.Input[str]] = None,
                 dhcp_settings_from_fortiipam: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerExcludeRangeArgs']]]]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 forticlient_on_net_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerIpRangeArgs']]]]] = None,
                 ipsec_lease_hold: Optional[pulumi.Input[int]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_acl_default_action: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server1: Optional[pulumi.Input[str]] = None,
                 ntp_server2: Optional[pulumi.Input[str]] = None,
                 ntp_server3: Optional[pulumi.Input[str]] = None,
                 ntp_service: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerOptionArgs']]]]] = None,
                 relay_agent: Optional[pulumi.Input[str]] = None,
                 reserved_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerReservedAddressArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 shared_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tftp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerTftpServerArgs']]]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 timezone_option: Optional[pulumi.Input[str]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerVciStringArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wifi_ac1: Optional[pulumi.Input[str]] = None,
                 wifi_ac2: Optional[pulumi.Input[str]] = None,
                 wifi_ac3: Optional[pulumi.Input[str]] = None,
                 wifi_ac_service: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemDhcpServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemDhcpServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemDhcpServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemDhcpServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemDhcpServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_configuration: Optional[pulumi.Input[str]] = None,
                 auto_managed_status: Optional[pulumi.Input[str]] = None,
                 conflicted_ip_timeout: Optional[pulumi.Input[int]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_update: Optional[pulumi.Input[str]] = None,
                 ddns_update_override: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 default_gateway: Optional[pulumi.Input[str]] = None,
                 dhcp_settings_from_fortiipam: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerExcludeRangeArgs']]]]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 forticlient_on_net_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerIpRangeArgs']]]]] = None,
                 ipsec_lease_hold: Optional[pulumi.Input[int]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_acl_default_action: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server1: Optional[pulumi.Input[str]] = None,
                 ntp_server2: Optional[pulumi.Input[str]] = None,
                 ntp_server3: Optional[pulumi.Input[str]] = None,
                 ntp_service: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerOptionArgs']]]]] = None,
                 relay_agent: Optional[pulumi.Input[str]] = None,
                 reserved_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerReservedAddressArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 shared_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tftp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerTftpServerArgs']]]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 timezone_option: Optional[pulumi.Input[str]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerVciStringArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wifi_ac1: Optional[pulumi.Input[str]] = None,
                 wifi_ac2: Optional[pulumi.Input[str]] = None,
                 wifi_ac3: Optional[pulumi.Input[str]] = None,
                 wifi_ac_service: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemDhcpServerArgs.__new__(SystemDhcpServerArgs)

            __props__.__dict__["auto_configuration"] = auto_configuration
            __props__.__dict__["auto_managed_status"] = auto_managed_status
            __props__.__dict__["conflicted_ip_timeout"] = conflicted_ip_timeout
            __props__.__dict__["ddns_auth"] = ddns_auth
            __props__.__dict__["ddns_key"] = None if ddns_key is None else pulumi.Output.secret(ddns_key)
            __props__.__dict__["ddns_keyname"] = ddns_keyname
            __props__.__dict__["ddns_server_ip"] = ddns_server_ip
            __props__.__dict__["ddns_ttl"] = ddns_ttl
            __props__.__dict__["ddns_update"] = ddns_update
            __props__.__dict__["ddns_update_override"] = ddns_update_override
            __props__.__dict__["ddns_zone"] = ddns_zone
            __props__.__dict__["default_gateway"] = default_gateway
            __props__.__dict__["dhcp_settings_from_fortiipam"] = dhcp_settings_from_fortiipam
            __props__.__dict__["dns_server1"] = dns_server1
            __props__.__dict__["dns_server2"] = dns_server2
            __props__.__dict__["dns_server3"] = dns_server3
            __props__.__dict__["dns_server4"] = dns_server4
            __props__.__dict__["dns_service"] = dns_service
            __props__.__dict__["domain"] = domain
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["exclude_ranges"] = exclude_ranges
            __props__.__dict__["filename"] = filename
            __props__.__dict__["forticlient_on_net_status"] = forticlient_on_net_status
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip_mode"] = ip_mode
            __props__.__dict__["ip_ranges"] = ip_ranges
            __props__.__dict__["ipsec_lease_hold"] = ipsec_lease_hold
            __props__.__dict__["lease_time"] = lease_time
            __props__.__dict__["mac_acl_default_action"] = mac_acl_default_action
            if netmask is None and not opts.urn:
                raise TypeError("Missing required property 'netmask'")
            __props__.__dict__["netmask"] = netmask
            __props__.__dict__["next_server"] = next_server
            __props__.__dict__["ntp_server1"] = ntp_server1
            __props__.__dict__["ntp_server2"] = ntp_server2
            __props__.__dict__["ntp_server3"] = ntp_server3
            __props__.__dict__["ntp_service"] = ntp_service
            __props__.__dict__["options"] = options
            __props__.__dict__["relay_agent"] = relay_agent
            __props__.__dict__["reserved_addresses"] = reserved_addresses
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["shared_subnet"] = shared_subnet
            __props__.__dict__["status"] = status
            __props__.__dict__["tftp_servers"] = tftp_servers
            __props__.__dict__["timezone"] = timezone
            __props__.__dict__["timezone_option"] = timezone_option
            __props__.__dict__["vci_match"] = vci_match
            __props__.__dict__["vci_strings"] = vci_strings
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wifi_ac1"] = wifi_ac1
            __props__.__dict__["wifi_ac2"] = wifi_ac2
            __props__.__dict__["wifi_ac3"] = wifi_ac3
            __props__.__dict__["wifi_ac_service"] = wifi_ac_service
            __props__.__dict__["wins_server1"] = wins_server1
            __props__.__dict__["wins_server2"] = wins_server2
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["ddnsKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SystemDhcpServer, __self__).__init__(
            'fortios:index/systemDhcpServer:SystemDhcpServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_configuration: Optional[pulumi.Input[str]] = None,
            auto_managed_status: Optional[pulumi.Input[str]] = None,
            conflicted_ip_timeout: Optional[pulumi.Input[int]] = None,
            ddns_auth: Optional[pulumi.Input[str]] = None,
            ddns_key: Optional[pulumi.Input[str]] = None,
            ddns_keyname: Optional[pulumi.Input[str]] = None,
            ddns_server_ip: Optional[pulumi.Input[str]] = None,
            ddns_ttl: Optional[pulumi.Input[int]] = None,
            ddns_update: Optional[pulumi.Input[str]] = None,
            ddns_update_override: Optional[pulumi.Input[str]] = None,
            ddns_zone: Optional[pulumi.Input[str]] = None,
            default_gateway: Optional[pulumi.Input[str]] = None,
            dhcp_settings_from_fortiipam: Optional[pulumi.Input[str]] = None,
            dns_server1: Optional[pulumi.Input[str]] = None,
            dns_server2: Optional[pulumi.Input[str]] = None,
            dns_server3: Optional[pulumi.Input[str]] = None,
            dns_server4: Optional[pulumi.Input[str]] = None,
            dns_service: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerExcludeRangeArgs']]]]] = None,
            filename: Optional[pulumi.Input[str]] = None,
            forticlient_on_net_status: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip_mode: Optional[pulumi.Input[str]] = None,
            ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerIpRangeArgs']]]]] = None,
            ipsec_lease_hold: Optional[pulumi.Input[int]] = None,
            lease_time: Optional[pulumi.Input[int]] = None,
            mac_acl_default_action: Optional[pulumi.Input[str]] = None,
            netmask: Optional[pulumi.Input[str]] = None,
            next_server: Optional[pulumi.Input[str]] = None,
            ntp_server1: Optional[pulumi.Input[str]] = None,
            ntp_server2: Optional[pulumi.Input[str]] = None,
            ntp_server3: Optional[pulumi.Input[str]] = None,
            ntp_service: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerOptionArgs']]]]] = None,
            relay_agent: Optional[pulumi.Input[str]] = None,
            reserved_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerReservedAddressArgs']]]]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            shared_subnet: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tftp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerTftpServerArgs']]]]] = None,
            timezone: Optional[pulumi.Input[str]] = None,
            timezone_option: Optional[pulumi.Input[str]] = None,
            vci_match: Optional[pulumi.Input[str]] = None,
            vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcpServerVciStringArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wifi_ac1: Optional[pulumi.Input[str]] = None,
            wifi_ac2: Optional[pulumi.Input[str]] = None,
            wifi_ac3: Optional[pulumi.Input[str]] = None,
            wifi_ac_service: Optional[pulumi.Input[str]] = None,
            wins_server1: Optional[pulumi.Input[str]] = None,
            wins_server2: Optional[pulumi.Input[str]] = None) -> 'SystemDhcpServer':
        """
        Get an existing SystemDhcpServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemDhcpServerState.__new__(_SystemDhcpServerState)

        __props__.__dict__["auto_configuration"] = auto_configuration
        __props__.__dict__["auto_managed_status"] = auto_managed_status
        __props__.__dict__["conflicted_ip_timeout"] = conflicted_ip_timeout
        __props__.__dict__["ddns_auth"] = ddns_auth
        __props__.__dict__["ddns_key"] = ddns_key
        __props__.__dict__["ddns_keyname"] = ddns_keyname
        __props__.__dict__["ddns_server_ip"] = ddns_server_ip
        __props__.__dict__["ddns_ttl"] = ddns_ttl
        __props__.__dict__["ddns_update"] = ddns_update
        __props__.__dict__["ddns_update_override"] = ddns_update_override
        __props__.__dict__["ddns_zone"] = ddns_zone
        __props__.__dict__["default_gateway"] = default_gateway
        __props__.__dict__["dhcp_settings_from_fortiipam"] = dhcp_settings_from_fortiipam
        __props__.__dict__["dns_server1"] = dns_server1
        __props__.__dict__["dns_server2"] = dns_server2
        __props__.__dict__["dns_server3"] = dns_server3
        __props__.__dict__["dns_server4"] = dns_server4
        __props__.__dict__["dns_service"] = dns_service
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["exclude_ranges"] = exclude_ranges
        __props__.__dict__["filename"] = filename
        __props__.__dict__["forticlient_on_net_status"] = forticlient_on_net_status
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip_mode"] = ip_mode
        __props__.__dict__["ip_ranges"] = ip_ranges
        __props__.__dict__["ipsec_lease_hold"] = ipsec_lease_hold
        __props__.__dict__["lease_time"] = lease_time
        __props__.__dict__["mac_acl_default_action"] = mac_acl_default_action
        __props__.__dict__["netmask"] = netmask
        __props__.__dict__["next_server"] = next_server
        __props__.__dict__["ntp_server1"] = ntp_server1
        __props__.__dict__["ntp_server2"] = ntp_server2
        __props__.__dict__["ntp_server3"] = ntp_server3
        __props__.__dict__["ntp_service"] = ntp_service
        __props__.__dict__["options"] = options
        __props__.__dict__["relay_agent"] = relay_agent
        __props__.__dict__["reserved_addresses"] = reserved_addresses
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["shared_subnet"] = shared_subnet
        __props__.__dict__["status"] = status
        __props__.__dict__["tftp_servers"] = tftp_servers
        __props__.__dict__["timezone"] = timezone
        __props__.__dict__["timezone_option"] = timezone_option
        __props__.__dict__["vci_match"] = vci_match
        __props__.__dict__["vci_strings"] = vci_strings
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wifi_ac1"] = wifi_ac1
        __props__.__dict__["wifi_ac2"] = wifi_ac2
        __props__.__dict__["wifi_ac3"] = wifi_ac3
        __props__.__dict__["wifi_ac_service"] = wifi_ac_service
        __props__.__dict__["wins_server1"] = wins_server1
        __props__.__dict__["wins_server2"] = wins_server2
        return SystemDhcpServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoConfiguration")
    def auto_configuration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_configuration")

    @property
    @pulumi.getter(name="autoManagedStatus")
    def auto_managed_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_managed_status")

    @property
    @pulumi.getter(name="conflictedIpTimeout")
    def conflicted_ip_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "conflicted_ip_timeout")

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_auth")

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_key")

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_keyname")

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_server_ip")

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ddns_ttl")

    @property
    @pulumi.getter(name="ddnsUpdate")
    def ddns_update(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_update")

    @property
    @pulumi.getter(name="ddnsUpdateOverride")
    def ddns_update_override(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_update_override")

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_zone")

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="dhcpSettingsFromFortiipam")
    def dhcp_settings_from_fortiipam(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_settings_from_fortiipam")

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_server1")

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_server2")

    @property
    @pulumi.getter(name="dnsServer3")
    def dns_server3(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_server3")

    @property
    @pulumi.getter(name="dnsServer4")
    def dns_server4(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_server4")

    @property
    @pulumi.getter(name="dnsService")
    def dns_service(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_service")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="excludeRanges")
    def exclude_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDhcpServerExcludeRange']]]:
        return pulumi.get(self, "exclude_ranges")

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Output[str]:
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter(name="forticlientOnNetStatus")
    def forticlient_on_net_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forticlient_on_net_status")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_mode")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDhcpServerIpRange']]]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="ipsecLeaseHold")
    def ipsec_lease_hold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ipsec_lease_hold")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="macAclDefaultAction")
    def mac_acl_default_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_acl_default_action")

    @property
    @pulumi.getter
    def netmask(self) -> pulumi.Output[str]:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter(name="nextServer")
    def next_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "next_server")

    @property
    @pulumi.getter(name="ntpServer1")
    def ntp_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ntp_server1")

    @property
    @pulumi.getter(name="ntpServer2")
    def ntp_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ntp_server2")

    @property
    @pulumi.getter(name="ntpServer3")
    def ntp_server3(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ntp_server3")

    @property
    @pulumi.getter(name="ntpService")
    def ntp_service(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ntp_service")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDhcpServerOption']]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="relayAgent")
    def relay_agent(self) -> pulumi.Output[str]:
        return pulumi.get(self, "relay_agent")

    @property
    @pulumi.getter(name="reservedAddresses")
    def reserved_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDhcpServerReservedAddress']]]:
        return pulumi.get(self, "reserved_addresses")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="sharedSubnet")
    def shared_subnet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "shared_subnet")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tftpServers")
    def tftp_servers(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDhcpServerTftpServer']]]:
        return pulumi.get(self, "tftp_servers")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="timezoneOption")
    def timezone_option(self) -> pulumi.Output[str]:
        return pulumi.get(self, "timezone_option")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDhcpServerVciString']]]:
        return pulumi.get(self, "vci_strings")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="wifiAc1")
    def wifi_ac1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wifi_ac1")

    @property
    @pulumi.getter(name="wifiAc2")
    def wifi_ac2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wifi_ac2")

    @property
    @pulumi.getter(name="wifiAc3")
    def wifi_ac3(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wifi_ac3")

    @property
    @pulumi.getter(name="wifiAcService")
    def wifi_ac_service(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wifi_ac_service")

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wins_server1")

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wins_server2")

