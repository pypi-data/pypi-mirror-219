# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchController8021XSettingsArgs', 'SwitchController8021XSettings']

@pulumi.input_type
class SwitchController8021XSettingsArgs:
    def __init__(__self__, *,
                 link_down_auth: Optional[pulumi.Input[str]] = None,
                 mab_reauth: Optional[pulumi.Input[str]] = None,
                 max_reauth_attempt: Optional[pulumi.Input[int]] = None,
                 reauth_period: Optional[pulumi.Input[int]] = None,
                 tx_period: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchController8021XSettings resource.
        """
        if link_down_auth is not None:
            pulumi.set(__self__, "link_down_auth", link_down_auth)
        if mab_reauth is not None:
            pulumi.set(__self__, "mab_reauth", mab_reauth)
        if max_reauth_attempt is not None:
            pulumi.set(__self__, "max_reauth_attempt", max_reauth_attempt)
        if reauth_period is not None:
            pulumi.set(__self__, "reauth_period", reauth_period)
        if tx_period is not None:
            pulumi.set(__self__, "tx_period", tx_period)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="linkDownAuth")
    def link_down_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_down_auth")

    @link_down_auth.setter
    def link_down_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_auth", value)

    @property
    @pulumi.getter(name="mabReauth")
    def mab_reauth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mab_reauth")

    @mab_reauth.setter
    def mab_reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mab_reauth", value)

    @property
    @pulumi.getter(name="maxReauthAttempt")
    def max_reauth_attempt(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_reauth_attempt")

    @max_reauth_attempt.setter
    def max_reauth_attempt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_reauth_attempt", value)

    @property
    @pulumi.getter(name="reauthPeriod")
    def reauth_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reauth_period")

    @reauth_period.setter
    def reauth_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reauth_period", value)

    @property
    @pulumi.getter(name="txPeriod")
    def tx_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tx_period")

    @tx_period.setter
    def tx_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tx_period", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchController8021XSettingsState:
    def __init__(__self__, *,
                 link_down_auth: Optional[pulumi.Input[str]] = None,
                 mab_reauth: Optional[pulumi.Input[str]] = None,
                 max_reauth_attempt: Optional[pulumi.Input[int]] = None,
                 reauth_period: Optional[pulumi.Input[int]] = None,
                 tx_period: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchController8021XSettings resources.
        """
        if link_down_auth is not None:
            pulumi.set(__self__, "link_down_auth", link_down_auth)
        if mab_reauth is not None:
            pulumi.set(__self__, "mab_reauth", mab_reauth)
        if max_reauth_attempt is not None:
            pulumi.set(__self__, "max_reauth_attempt", max_reauth_attempt)
        if reauth_period is not None:
            pulumi.set(__self__, "reauth_period", reauth_period)
        if tx_period is not None:
            pulumi.set(__self__, "tx_period", tx_period)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="linkDownAuth")
    def link_down_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_down_auth")

    @link_down_auth.setter
    def link_down_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_auth", value)

    @property
    @pulumi.getter(name="mabReauth")
    def mab_reauth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mab_reauth")

    @mab_reauth.setter
    def mab_reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mab_reauth", value)

    @property
    @pulumi.getter(name="maxReauthAttempt")
    def max_reauth_attempt(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_reauth_attempt")

    @max_reauth_attempt.setter
    def max_reauth_attempt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_reauth_attempt", value)

    @property
    @pulumi.getter(name="reauthPeriod")
    def reauth_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reauth_period")

    @reauth_period.setter
    def reauth_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reauth_period", value)

    @property
    @pulumi.getter(name="txPeriod")
    def tx_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tx_period")

    @tx_period.setter
    def tx_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tx_period", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchController8021XSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 link_down_auth: Optional[pulumi.Input[str]] = None,
                 mab_reauth: Optional[pulumi.Input[str]] = None,
                 max_reauth_attempt: Optional[pulumi.Input[int]] = None,
                 reauth_period: Optional[pulumi.Input[int]] = None,
                 tx_period: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchController8021XSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchController8021XSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchController8021XSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchController8021XSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchController8021XSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 link_down_auth: Optional[pulumi.Input[str]] = None,
                 mab_reauth: Optional[pulumi.Input[str]] = None,
                 max_reauth_attempt: Optional[pulumi.Input[int]] = None,
                 reauth_period: Optional[pulumi.Input[int]] = None,
                 tx_period: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchController8021XSettingsArgs.__new__(SwitchController8021XSettingsArgs)

            __props__.__dict__["link_down_auth"] = link_down_auth
            __props__.__dict__["mab_reauth"] = mab_reauth
            __props__.__dict__["max_reauth_attempt"] = max_reauth_attempt
            __props__.__dict__["reauth_period"] = reauth_period
            __props__.__dict__["tx_period"] = tx_period
            __props__.__dict__["vdomparam"] = vdomparam
        super(SwitchController8021XSettings, __self__).__init__(
            'fortios:index/switchController8021XSettings:SwitchController8021XSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            link_down_auth: Optional[pulumi.Input[str]] = None,
            mab_reauth: Optional[pulumi.Input[str]] = None,
            max_reauth_attempt: Optional[pulumi.Input[int]] = None,
            reauth_period: Optional[pulumi.Input[int]] = None,
            tx_period: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchController8021XSettings':
        """
        Get an existing SwitchController8021XSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchController8021XSettingsState.__new__(_SwitchController8021XSettingsState)

        __props__.__dict__["link_down_auth"] = link_down_auth
        __props__.__dict__["mab_reauth"] = mab_reauth
        __props__.__dict__["max_reauth_attempt"] = max_reauth_attempt
        __props__.__dict__["reauth_period"] = reauth_period
        __props__.__dict__["tx_period"] = tx_period
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchController8021XSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="linkDownAuth")
    def link_down_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "link_down_auth")

    @property
    @pulumi.getter(name="mabReauth")
    def mab_reauth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mab_reauth")

    @property
    @pulumi.getter(name="maxReauthAttempt")
    def max_reauth_attempt(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_reauth_attempt")

    @property
    @pulumi.getter(name="reauthPeriod")
    def reauth_period(self) -> pulumi.Output[int]:
        return pulumi.get(self, "reauth_period")

    @property
    @pulumi.getter(name="txPeriod")
    def tx_period(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tx_period")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

