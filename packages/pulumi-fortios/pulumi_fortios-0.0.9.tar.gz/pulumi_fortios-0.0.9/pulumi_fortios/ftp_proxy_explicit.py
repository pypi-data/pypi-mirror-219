# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FtpProxyExplicitArgs', 'FtpProxyExplicit']

@pulumi.input_type
class FtpProxyExplicitArgs:
    def __init__(__self__, *,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_port: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 server_data_mode: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cert: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FtpProxyExplicit resource.
        """
        if incoming_ip is not None:
            pulumi.set(__self__, "incoming_ip", incoming_ip)
        if incoming_port is not None:
            pulumi.set(__self__, "incoming_port", incoming_port)
        if outgoing_ip is not None:
            pulumi.set(__self__, "outgoing_ip", outgoing_ip)
        if sec_default_action is not None:
            pulumi.set(__self__, "sec_default_action", sec_default_action)
        if server_data_mode is not None:
            pulumi.set(__self__, "server_data_mode", server_data_mode)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="incomingIp")
    def incoming_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incoming_ip")

    @incoming_ip.setter
    def incoming_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_ip", value)

    @property
    @pulumi.getter(name="incomingPort")
    def incoming_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incoming_port")

    @incoming_port.setter
    def incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_port", value)

    @property
    @pulumi.getter(name="outgoingIp")
    def outgoing_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outgoing_ip")

    @outgoing_ip.setter
    def outgoing_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outgoing_ip", value)

    @property
    @pulumi.getter(name="secDefaultAction")
    def sec_default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sec_default_action")

    @sec_default_action.setter
    def sec_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_default_action", value)

    @property
    @pulumi.getter(name="serverDataMode")
    def server_data_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_data_mode")

    @server_data_mode.setter
    def server_data_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_data_mode", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_cert")

    @ssl_cert.setter
    def ssl_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_cert", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FtpProxyExplicitState:
    def __init__(__self__, *,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_port: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 server_data_mode: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cert: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FtpProxyExplicit resources.
        """
        if incoming_ip is not None:
            pulumi.set(__self__, "incoming_ip", incoming_ip)
        if incoming_port is not None:
            pulumi.set(__self__, "incoming_port", incoming_port)
        if outgoing_ip is not None:
            pulumi.set(__self__, "outgoing_ip", outgoing_ip)
        if sec_default_action is not None:
            pulumi.set(__self__, "sec_default_action", sec_default_action)
        if server_data_mode is not None:
            pulumi.set(__self__, "server_data_mode", server_data_mode)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cert is not None:
            pulumi.set(__self__, "ssl_cert", ssl_cert)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="incomingIp")
    def incoming_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incoming_ip")

    @incoming_ip.setter
    def incoming_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_ip", value)

    @property
    @pulumi.getter(name="incomingPort")
    def incoming_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incoming_port")

    @incoming_port.setter
    def incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_port", value)

    @property
    @pulumi.getter(name="outgoingIp")
    def outgoing_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outgoing_ip")

    @outgoing_ip.setter
    def outgoing_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outgoing_ip", value)

    @property
    @pulumi.getter(name="secDefaultAction")
    def sec_default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sec_default_action")

    @sec_default_action.setter
    def sec_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_default_action", value)

    @property
    @pulumi.getter(name="serverDataMode")
    def server_data_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_data_mode")

    @server_data_mode.setter
    def server_data_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_data_mode", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_cert")

    @ssl_cert.setter
    def ssl_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_cert", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class FtpProxyExplicit(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_port: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 server_data_mode: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cert: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FtpProxyExplicit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FtpProxyExplicitArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FtpProxyExplicit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FtpProxyExplicitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FtpProxyExplicitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_port: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 server_data_mode: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cert: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FtpProxyExplicitArgs.__new__(FtpProxyExplicitArgs)

            __props__.__dict__["incoming_ip"] = incoming_ip
            __props__.__dict__["incoming_port"] = incoming_port
            __props__.__dict__["outgoing_ip"] = outgoing_ip
            __props__.__dict__["sec_default_action"] = sec_default_action
            __props__.__dict__["server_data_mode"] = server_data_mode
            __props__.__dict__["ssl"] = ssl
            __props__.__dict__["ssl_algorithm"] = ssl_algorithm
            __props__.__dict__["ssl_cert"] = ssl_cert
            __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
        super(FtpProxyExplicit, __self__).__init__(
            'fortios:index/ftpProxyExplicit:FtpProxyExplicit',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            incoming_ip: Optional[pulumi.Input[str]] = None,
            incoming_port: Optional[pulumi.Input[str]] = None,
            outgoing_ip: Optional[pulumi.Input[str]] = None,
            sec_default_action: Optional[pulumi.Input[str]] = None,
            server_data_mode: Optional[pulumi.Input[str]] = None,
            ssl: Optional[pulumi.Input[str]] = None,
            ssl_algorithm: Optional[pulumi.Input[str]] = None,
            ssl_cert: Optional[pulumi.Input[str]] = None,
            ssl_dh_bits: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'FtpProxyExplicit':
        """
        Get an existing FtpProxyExplicit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FtpProxyExplicitState.__new__(_FtpProxyExplicitState)

        __props__.__dict__["incoming_ip"] = incoming_ip
        __props__.__dict__["incoming_port"] = incoming_port
        __props__.__dict__["outgoing_ip"] = outgoing_ip
        __props__.__dict__["sec_default_action"] = sec_default_action
        __props__.__dict__["server_data_mode"] = server_data_mode
        __props__.__dict__["ssl"] = ssl
        __props__.__dict__["ssl_algorithm"] = ssl_algorithm
        __props__.__dict__["ssl_cert"] = ssl_cert
        __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        return FtpProxyExplicit(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="incomingIp")
    def incoming_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "incoming_ip")

    @property
    @pulumi.getter(name="incomingPort")
    def incoming_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "incoming_port")

    @property
    @pulumi.getter(name="outgoingIp")
    def outgoing_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "outgoing_ip")

    @property
    @pulumi.getter(name="secDefaultAction")
    def sec_default_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sec_default_action")

    @property
    @pulumi.getter(name="serverDataMode")
    def server_data_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_data_mode")

    @property
    @pulumi.getter
    def ssl(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_algorithm")

    @property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_cert")

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_dh_bits")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

