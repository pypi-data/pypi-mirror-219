# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WirelessControllerGlobalArgs', 'WirelessControllerGlobal']

@pulumi.input_type
class WirelessControllerGlobalArgs:
    def __init__(__self__, *,
                 acd_process_count: Optional[pulumi.Input[int]] = None,
                 ap_log_server: Optional[pulumi.Input[str]] = None,
                 ap_log_server_ip: Optional[pulumi.Input[str]] = None,
                 ap_log_server_port: Optional[pulumi.Input[int]] = None,
                 control_message_offload: Optional[pulumi.Input[str]] = None,
                 data_ethernet_ii: Optional[pulumi.Input[str]] = None,
                 dfs_lab_test: Optional[pulumi.Input[str]] = None,
                 discovery_mc_addr: Optional[pulumi.Input[str]] = None,
                 fiapp_eth_type: Optional[pulumi.Input[int]] = None,
                 image_download: Optional[pulumi.Input[str]] = None,
                 ipsec_base_ip: Optional[pulumi.Input[str]] = None,
                 link_aggregation: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_retransmit: Optional[pulumi.Input[int]] = None,
                 mesh_eth_type: Optional[pulumi.Input[int]] = None,
                 nac_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rogue_scan_mac_adjacency: Optional[pulumi.Input[int]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wpad_process_count: Optional[pulumi.Input[int]] = None,
                 wtp_share: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WirelessControllerGlobal resource.
        """
        if acd_process_count is not None:
            pulumi.set(__self__, "acd_process_count", acd_process_count)
        if ap_log_server is not None:
            pulumi.set(__self__, "ap_log_server", ap_log_server)
        if ap_log_server_ip is not None:
            pulumi.set(__self__, "ap_log_server_ip", ap_log_server_ip)
        if ap_log_server_port is not None:
            pulumi.set(__self__, "ap_log_server_port", ap_log_server_port)
        if control_message_offload is not None:
            pulumi.set(__self__, "control_message_offload", control_message_offload)
        if data_ethernet_ii is not None:
            pulumi.set(__self__, "data_ethernet_ii", data_ethernet_ii)
        if dfs_lab_test is not None:
            pulumi.set(__self__, "dfs_lab_test", dfs_lab_test)
        if discovery_mc_addr is not None:
            pulumi.set(__self__, "discovery_mc_addr", discovery_mc_addr)
        if fiapp_eth_type is not None:
            pulumi.set(__self__, "fiapp_eth_type", fiapp_eth_type)
        if image_download is not None:
            pulumi.set(__self__, "image_download", image_download)
        if ipsec_base_ip is not None:
            pulumi.set(__self__, "ipsec_base_ip", ipsec_base_ip)
        if link_aggregation is not None:
            pulumi.set(__self__, "link_aggregation", link_aggregation)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_retransmit is not None:
            pulumi.set(__self__, "max_retransmit", max_retransmit)
        if mesh_eth_type is not None:
            pulumi.set(__self__, "mesh_eth_type", mesh_eth_type)
        if nac_interval is not None:
            pulumi.set(__self__, "nac_interval", nac_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rogue_scan_mac_adjacency is not None:
            pulumi.set(__self__, "rogue_scan_mac_adjacency", rogue_scan_mac_adjacency)
        if tunnel_mode is not None:
            pulumi.set(__self__, "tunnel_mode", tunnel_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wpad_process_count is not None:
            pulumi.set(__self__, "wpad_process_count", wpad_process_count)
        if wtp_share is not None:
            pulumi.set(__self__, "wtp_share", wtp_share)

    @property
    @pulumi.getter(name="acdProcessCount")
    def acd_process_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "acd_process_count")

    @acd_process_count.setter
    def acd_process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acd_process_count", value)

    @property
    @pulumi.getter(name="apLogServer")
    def ap_log_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_log_server")

    @ap_log_server.setter
    def ap_log_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_log_server", value)

    @property
    @pulumi.getter(name="apLogServerIp")
    def ap_log_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_log_server_ip")

    @ap_log_server_ip.setter
    def ap_log_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_log_server_ip", value)

    @property
    @pulumi.getter(name="apLogServerPort")
    def ap_log_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ap_log_server_port")

    @ap_log_server_port.setter
    def ap_log_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_log_server_port", value)

    @property
    @pulumi.getter(name="controlMessageOffload")
    def control_message_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "control_message_offload")

    @control_message_offload.setter
    def control_message_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_message_offload", value)

    @property
    @pulumi.getter(name="dataEthernetIi")
    def data_ethernet_ii(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_ethernet_ii")

    @data_ethernet_ii.setter
    def data_ethernet_ii(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_ethernet_ii", value)

    @property
    @pulumi.getter(name="dfsLabTest")
    def dfs_lab_test(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dfs_lab_test")

    @dfs_lab_test.setter
    def dfs_lab_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dfs_lab_test", value)

    @property
    @pulumi.getter(name="discoveryMcAddr")
    def discovery_mc_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discovery_mc_addr")

    @discovery_mc_addr.setter
    def discovery_mc_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovery_mc_addr", value)

    @property
    @pulumi.getter(name="fiappEthType")
    def fiapp_eth_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fiapp_eth_type")

    @fiapp_eth_type.setter
    def fiapp_eth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fiapp_eth_type", value)

    @property
    @pulumi.getter(name="imageDownload")
    def image_download(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_download")

    @image_download.setter
    def image_download(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_download", value)

    @property
    @pulumi.getter(name="ipsecBaseIp")
    def ipsec_base_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_base_ip")

    @ipsec_base_ip.setter
    def ipsec_base_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_base_ip", value)

    @property
    @pulumi.getter(name="linkAggregation")
    def link_aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_aggregation")

    @link_aggregation.setter
    def link_aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_aggregation", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxRetransmit")
    def max_retransmit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retransmit")

    @max_retransmit.setter
    def max_retransmit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retransmit", value)

    @property
    @pulumi.getter(name="meshEthType")
    def mesh_eth_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mesh_eth_type")

    @mesh_eth_type.setter
    def mesh_eth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mesh_eth_type", value)

    @property
    @pulumi.getter(name="nacInterval")
    def nac_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nac_interval")

    @nac_interval.setter
    def nac_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nac_interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rogueScanMacAdjacency")
    def rogue_scan_mac_adjacency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rogue_scan_mac_adjacency")

    @rogue_scan_mac_adjacency.setter
    def rogue_scan_mac_adjacency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rogue_scan_mac_adjacency", value)

    @property
    @pulumi.getter(name="tunnelMode")
    def tunnel_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_mode")

    @tunnel_mode.setter
    def tunnel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wpadProcessCount")
    def wpad_process_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wpad_process_count")

    @wpad_process_count.setter
    def wpad_process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wpad_process_count", value)

    @property
    @pulumi.getter(name="wtpShare")
    def wtp_share(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wtp_share")

    @wtp_share.setter
    def wtp_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_share", value)


@pulumi.input_type
class _WirelessControllerGlobalState:
    def __init__(__self__, *,
                 acd_process_count: Optional[pulumi.Input[int]] = None,
                 ap_log_server: Optional[pulumi.Input[str]] = None,
                 ap_log_server_ip: Optional[pulumi.Input[str]] = None,
                 ap_log_server_port: Optional[pulumi.Input[int]] = None,
                 control_message_offload: Optional[pulumi.Input[str]] = None,
                 data_ethernet_ii: Optional[pulumi.Input[str]] = None,
                 dfs_lab_test: Optional[pulumi.Input[str]] = None,
                 discovery_mc_addr: Optional[pulumi.Input[str]] = None,
                 fiapp_eth_type: Optional[pulumi.Input[int]] = None,
                 image_download: Optional[pulumi.Input[str]] = None,
                 ipsec_base_ip: Optional[pulumi.Input[str]] = None,
                 link_aggregation: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_retransmit: Optional[pulumi.Input[int]] = None,
                 mesh_eth_type: Optional[pulumi.Input[int]] = None,
                 nac_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rogue_scan_mac_adjacency: Optional[pulumi.Input[int]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wpad_process_count: Optional[pulumi.Input[int]] = None,
                 wtp_share: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WirelessControllerGlobal resources.
        """
        if acd_process_count is not None:
            pulumi.set(__self__, "acd_process_count", acd_process_count)
        if ap_log_server is not None:
            pulumi.set(__self__, "ap_log_server", ap_log_server)
        if ap_log_server_ip is not None:
            pulumi.set(__self__, "ap_log_server_ip", ap_log_server_ip)
        if ap_log_server_port is not None:
            pulumi.set(__self__, "ap_log_server_port", ap_log_server_port)
        if control_message_offload is not None:
            pulumi.set(__self__, "control_message_offload", control_message_offload)
        if data_ethernet_ii is not None:
            pulumi.set(__self__, "data_ethernet_ii", data_ethernet_ii)
        if dfs_lab_test is not None:
            pulumi.set(__self__, "dfs_lab_test", dfs_lab_test)
        if discovery_mc_addr is not None:
            pulumi.set(__self__, "discovery_mc_addr", discovery_mc_addr)
        if fiapp_eth_type is not None:
            pulumi.set(__self__, "fiapp_eth_type", fiapp_eth_type)
        if image_download is not None:
            pulumi.set(__self__, "image_download", image_download)
        if ipsec_base_ip is not None:
            pulumi.set(__self__, "ipsec_base_ip", ipsec_base_ip)
        if link_aggregation is not None:
            pulumi.set(__self__, "link_aggregation", link_aggregation)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_retransmit is not None:
            pulumi.set(__self__, "max_retransmit", max_retransmit)
        if mesh_eth_type is not None:
            pulumi.set(__self__, "mesh_eth_type", mesh_eth_type)
        if nac_interval is not None:
            pulumi.set(__self__, "nac_interval", nac_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rogue_scan_mac_adjacency is not None:
            pulumi.set(__self__, "rogue_scan_mac_adjacency", rogue_scan_mac_adjacency)
        if tunnel_mode is not None:
            pulumi.set(__self__, "tunnel_mode", tunnel_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wpad_process_count is not None:
            pulumi.set(__self__, "wpad_process_count", wpad_process_count)
        if wtp_share is not None:
            pulumi.set(__self__, "wtp_share", wtp_share)

    @property
    @pulumi.getter(name="acdProcessCount")
    def acd_process_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "acd_process_count")

    @acd_process_count.setter
    def acd_process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acd_process_count", value)

    @property
    @pulumi.getter(name="apLogServer")
    def ap_log_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_log_server")

    @ap_log_server.setter
    def ap_log_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_log_server", value)

    @property
    @pulumi.getter(name="apLogServerIp")
    def ap_log_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_log_server_ip")

    @ap_log_server_ip.setter
    def ap_log_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_log_server_ip", value)

    @property
    @pulumi.getter(name="apLogServerPort")
    def ap_log_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ap_log_server_port")

    @ap_log_server_port.setter
    def ap_log_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_log_server_port", value)

    @property
    @pulumi.getter(name="controlMessageOffload")
    def control_message_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "control_message_offload")

    @control_message_offload.setter
    def control_message_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_message_offload", value)

    @property
    @pulumi.getter(name="dataEthernetIi")
    def data_ethernet_ii(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_ethernet_ii")

    @data_ethernet_ii.setter
    def data_ethernet_ii(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_ethernet_ii", value)

    @property
    @pulumi.getter(name="dfsLabTest")
    def dfs_lab_test(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dfs_lab_test")

    @dfs_lab_test.setter
    def dfs_lab_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dfs_lab_test", value)

    @property
    @pulumi.getter(name="discoveryMcAddr")
    def discovery_mc_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discovery_mc_addr")

    @discovery_mc_addr.setter
    def discovery_mc_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovery_mc_addr", value)

    @property
    @pulumi.getter(name="fiappEthType")
    def fiapp_eth_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fiapp_eth_type")

    @fiapp_eth_type.setter
    def fiapp_eth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fiapp_eth_type", value)

    @property
    @pulumi.getter(name="imageDownload")
    def image_download(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_download")

    @image_download.setter
    def image_download(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_download", value)

    @property
    @pulumi.getter(name="ipsecBaseIp")
    def ipsec_base_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_base_ip")

    @ipsec_base_ip.setter
    def ipsec_base_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_base_ip", value)

    @property
    @pulumi.getter(name="linkAggregation")
    def link_aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_aggregation")

    @link_aggregation.setter
    def link_aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_aggregation", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxRetransmit")
    def max_retransmit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retransmit")

    @max_retransmit.setter
    def max_retransmit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retransmit", value)

    @property
    @pulumi.getter(name="meshEthType")
    def mesh_eth_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mesh_eth_type")

    @mesh_eth_type.setter
    def mesh_eth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mesh_eth_type", value)

    @property
    @pulumi.getter(name="nacInterval")
    def nac_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nac_interval")

    @nac_interval.setter
    def nac_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nac_interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rogueScanMacAdjacency")
    def rogue_scan_mac_adjacency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rogue_scan_mac_adjacency")

    @rogue_scan_mac_adjacency.setter
    def rogue_scan_mac_adjacency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rogue_scan_mac_adjacency", value)

    @property
    @pulumi.getter(name="tunnelMode")
    def tunnel_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_mode")

    @tunnel_mode.setter
    def tunnel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wpadProcessCount")
    def wpad_process_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wpad_process_count")

    @wpad_process_count.setter
    def wpad_process_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wpad_process_count", value)

    @property
    @pulumi.getter(name="wtpShare")
    def wtp_share(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wtp_share")

    @wtp_share.setter
    def wtp_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_share", value)


class WirelessControllerGlobal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acd_process_count: Optional[pulumi.Input[int]] = None,
                 ap_log_server: Optional[pulumi.Input[str]] = None,
                 ap_log_server_ip: Optional[pulumi.Input[str]] = None,
                 ap_log_server_port: Optional[pulumi.Input[int]] = None,
                 control_message_offload: Optional[pulumi.Input[str]] = None,
                 data_ethernet_ii: Optional[pulumi.Input[str]] = None,
                 dfs_lab_test: Optional[pulumi.Input[str]] = None,
                 discovery_mc_addr: Optional[pulumi.Input[str]] = None,
                 fiapp_eth_type: Optional[pulumi.Input[int]] = None,
                 image_download: Optional[pulumi.Input[str]] = None,
                 ipsec_base_ip: Optional[pulumi.Input[str]] = None,
                 link_aggregation: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_retransmit: Optional[pulumi.Input[int]] = None,
                 mesh_eth_type: Optional[pulumi.Input[int]] = None,
                 nac_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rogue_scan_mac_adjacency: Optional[pulumi.Input[int]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wpad_process_count: Optional[pulumi.Input[int]] = None,
                 wtp_share: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WirelessControllerGlobal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WirelessControllerGlobalArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WirelessControllerGlobal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WirelessControllerGlobalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WirelessControllerGlobalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acd_process_count: Optional[pulumi.Input[int]] = None,
                 ap_log_server: Optional[pulumi.Input[str]] = None,
                 ap_log_server_ip: Optional[pulumi.Input[str]] = None,
                 ap_log_server_port: Optional[pulumi.Input[int]] = None,
                 control_message_offload: Optional[pulumi.Input[str]] = None,
                 data_ethernet_ii: Optional[pulumi.Input[str]] = None,
                 dfs_lab_test: Optional[pulumi.Input[str]] = None,
                 discovery_mc_addr: Optional[pulumi.Input[str]] = None,
                 fiapp_eth_type: Optional[pulumi.Input[int]] = None,
                 image_download: Optional[pulumi.Input[str]] = None,
                 ipsec_base_ip: Optional[pulumi.Input[str]] = None,
                 link_aggregation: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_retransmit: Optional[pulumi.Input[int]] = None,
                 mesh_eth_type: Optional[pulumi.Input[int]] = None,
                 nac_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rogue_scan_mac_adjacency: Optional[pulumi.Input[int]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wpad_process_count: Optional[pulumi.Input[int]] = None,
                 wtp_share: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WirelessControllerGlobalArgs.__new__(WirelessControllerGlobalArgs)

            __props__.__dict__["acd_process_count"] = acd_process_count
            __props__.__dict__["ap_log_server"] = ap_log_server
            __props__.__dict__["ap_log_server_ip"] = ap_log_server_ip
            __props__.__dict__["ap_log_server_port"] = ap_log_server_port
            __props__.__dict__["control_message_offload"] = control_message_offload
            __props__.__dict__["data_ethernet_ii"] = data_ethernet_ii
            __props__.__dict__["dfs_lab_test"] = dfs_lab_test
            __props__.__dict__["discovery_mc_addr"] = discovery_mc_addr
            __props__.__dict__["fiapp_eth_type"] = fiapp_eth_type
            __props__.__dict__["image_download"] = image_download
            __props__.__dict__["ipsec_base_ip"] = ipsec_base_ip
            __props__.__dict__["link_aggregation"] = link_aggregation
            __props__.__dict__["location"] = location
            __props__.__dict__["max_clients"] = max_clients
            __props__.__dict__["max_retransmit"] = max_retransmit
            __props__.__dict__["mesh_eth_type"] = mesh_eth_type
            __props__.__dict__["nac_interval"] = nac_interval
            __props__.__dict__["name"] = name
            __props__.__dict__["rogue_scan_mac_adjacency"] = rogue_scan_mac_adjacency
            __props__.__dict__["tunnel_mode"] = tunnel_mode
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wpad_process_count"] = wpad_process_count
            __props__.__dict__["wtp_share"] = wtp_share
        super(WirelessControllerGlobal, __self__).__init__(
            'fortios:index/wirelessControllerGlobal:WirelessControllerGlobal',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acd_process_count: Optional[pulumi.Input[int]] = None,
            ap_log_server: Optional[pulumi.Input[str]] = None,
            ap_log_server_ip: Optional[pulumi.Input[str]] = None,
            ap_log_server_port: Optional[pulumi.Input[int]] = None,
            control_message_offload: Optional[pulumi.Input[str]] = None,
            data_ethernet_ii: Optional[pulumi.Input[str]] = None,
            dfs_lab_test: Optional[pulumi.Input[str]] = None,
            discovery_mc_addr: Optional[pulumi.Input[str]] = None,
            fiapp_eth_type: Optional[pulumi.Input[int]] = None,
            image_download: Optional[pulumi.Input[str]] = None,
            ipsec_base_ip: Optional[pulumi.Input[str]] = None,
            link_aggregation: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            max_clients: Optional[pulumi.Input[int]] = None,
            max_retransmit: Optional[pulumi.Input[int]] = None,
            mesh_eth_type: Optional[pulumi.Input[int]] = None,
            nac_interval: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rogue_scan_mac_adjacency: Optional[pulumi.Input[int]] = None,
            tunnel_mode: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wpad_process_count: Optional[pulumi.Input[int]] = None,
            wtp_share: Optional[pulumi.Input[str]] = None) -> 'WirelessControllerGlobal':
        """
        Get an existing WirelessControllerGlobal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WirelessControllerGlobalState.__new__(_WirelessControllerGlobalState)

        __props__.__dict__["acd_process_count"] = acd_process_count
        __props__.__dict__["ap_log_server"] = ap_log_server
        __props__.__dict__["ap_log_server_ip"] = ap_log_server_ip
        __props__.__dict__["ap_log_server_port"] = ap_log_server_port
        __props__.__dict__["control_message_offload"] = control_message_offload
        __props__.__dict__["data_ethernet_ii"] = data_ethernet_ii
        __props__.__dict__["dfs_lab_test"] = dfs_lab_test
        __props__.__dict__["discovery_mc_addr"] = discovery_mc_addr
        __props__.__dict__["fiapp_eth_type"] = fiapp_eth_type
        __props__.__dict__["image_download"] = image_download
        __props__.__dict__["ipsec_base_ip"] = ipsec_base_ip
        __props__.__dict__["link_aggregation"] = link_aggregation
        __props__.__dict__["location"] = location
        __props__.__dict__["max_clients"] = max_clients
        __props__.__dict__["max_retransmit"] = max_retransmit
        __props__.__dict__["mesh_eth_type"] = mesh_eth_type
        __props__.__dict__["nac_interval"] = nac_interval
        __props__.__dict__["name"] = name
        __props__.__dict__["rogue_scan_mac_adjacency"] = rogue_scan_mac_adjacency
        __props__.__dict__["tunnel_mode"] = tunnel_mode
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wpad_process_count"] = wpad_process_count
        __props__.__dict__["wtp_share"] = wtp_share
        return WirelessControllerGlobal(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acdProcessCount")
    def acd_process_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "acd_process_count")

    @property
    @pulumi.getter(name="apLogServer")
    def ap_log_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ap_log_server")

    @property
    @pulumi.getter(name="apLogServerIp")
    def ap_log_server_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ap_log_server_ip")

    @property
    @pulumi.getter(name="apLogServerPort")
    def ap_log_server_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ap_log_server_port")

    @property
    @pulumi.getter(name="controlMessageOffload")
    def control_message_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "control_message_offload")

    @property
    @pulumi.getter(name="dataEthernetIi")
    def data_ethernet_ii(self) -> pulumi.Output[str]:
        return pulumi.get(self, "data_ethernet_ii")

    @property
    @pulumi.getter(name="dfsLabTest")
    def dfs_lab_test(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dfs_lab_test")

    @property
    @pulumi.getter(name="discoveryMcAddr")
    def discovery_mc_addr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "discovery_mc_addr")

    @property
    @pulumi.getter(name="fiappEthType")
    def fiapp_eth_type(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fiapp_eth_type")

    @property
    @pulumi.getter(name="imageDownload")
    def image_download(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image_download")

    @property
    @pulumi.getter(name="ipsecBaseIp")
    def ipsec_base_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_base_ip")

    @property
    @pulumi.getter(name="linkAggregation")
    def link_aggregation(self) -> pulumi.Output[str]:
        return pulumi.get(self, "link_aggregation")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_clients")

    @property
    @pulumi.getter(name="maxRetransmit")
    def max_retransmit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_retransmit")

    @property
    @pulumi.getter(name="meshEthType")
    def mesh_eth_type(self) -> pulumi.Output[int]:
        return pulumi.get(self, "mesh_eth_type")

    @property
    @pulumi.getter(name="nacInterval")
    def nac_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "nac_interval")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rogueScanMacAdjacency")
    def rogue_scan_mac_adjacency(self) -> pulumi.Output[int]:
        return pulumi.get(self, "rogue_scan_mac_adjacency")

    @property
    @pulumi.getter(name="tunnelMode")
    def tunnel_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel_mode")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="wpadProcessCount")
    def wpad_process_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "wpad_process_count")

    @property
    @pulumi.getter(name="wtpShare")
    def wtp_share(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wtp_share")

