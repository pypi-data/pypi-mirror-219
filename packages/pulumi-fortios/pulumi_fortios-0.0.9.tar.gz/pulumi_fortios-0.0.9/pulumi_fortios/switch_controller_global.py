# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SwitchControllerGlobalArgs', 'SwitchControllerGlobal']

@pulumi.input_type
class SwitchControllerGlobalArgs:
    def __init__(__self__, *,
                 allow_multiple_interfaces: Optional[pulumi.Input[str]] = None,
                 bounce_quarantined_link: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalCustomCommandArgs']]]] = None,
                 default_virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_format: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_client_db_exp: Optional[pulumi.Input[int]] = None,
                 dhcp_snoop_client_req: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_db_per_port_learn_limit: Optional[pulumi.Input[int]] = None,
                 disable_discoveries: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalDisableDiscoveryArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fips_enforce: Optional[pulumi.Input[str]] = None,
                 firmware_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_image_push: Optional[pulumi.Input[str]] = None,
                 log_mac_limit_violations: Optional[pulumi.Input[str]] = None,
                 mac_aging_interval: Optional[pulumi.Input[int]] = None,
                 mac_event_logging: Optional[pulumi.Input[str]] = None,
                 mac_retention_period: Optional[pulumi.Input[int]] = None,
                 mac_violation_timer: Optional[pulumi.Input[int]] = None,
                 quarantine_mode: Optional[pulumi.Input[str]] = None,
                 sn_dns_resolution: Optional[pulumi.Input[str]] = None,
                 update_user_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_all_mode: Optional[pulumi.Input[str]] = None,
                 vlan_optimization: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerGlobal resource.
        """
        if allow_multiple_interfaces is not None:
            pulumi.set(__self__, "allow_multiple_interfaces", allow_multiple_interfaces)
        if bounce_quarantined_link is not None:
            pulumi.set(__self__, "bounce_quarantined_link", bounce_quarantined_link)
        if custom_commands is not None:
            pulumi.set(__self__, "custom_commands", custom_commands)
        if default_virtual_switch_vlan is not None:
            pulumi.set(__self__, "default_virtual_switch_vlan", default_virtual_switch_vlan)
        if dhcp_option82_circuit_id is not None:
            pulumi.set(__self__, "dhcp_option82_circuit_id", dhcp_option82_circuit_id)
        if dhcp_option82_format is not None:
            pulumi.set(__self__, "dhcp_option82_format", dhcp_option82_format)
        if dhcp_option82_remote_id is not None:
            pulumi.set(__self__, "dhcp_option82_remote_id", dhcp_option82_remote_id)
        if dhcp_server_access_list is not None:
            pulumi.set(__self__, "dhcp_server_access_list", dhcp_server_access_list)
        if dhcp_snoop_client_db_exp is not None:
            pulumi.set(__self__, "dhcp_snoop_client_db_exp", dhcp_snoop_client_db_exp)
        if dhcp_snoop_client_req is not None:
            pulumi.set(__self__, "dhcp_snoop_client_req", dhcp_snoop_client_req)
        if dhcp_snoop_db_per_port_learn_limit is not None:
            pulumi.set(__self__, "dhcp_snoop_db_per_port_learn_limit", dhcp_snoop_db_per_port_learn_limit)
        if disable_discoveries is not None:
            pulumi.set(__self__, "disable_discoveries", disable_discoveries)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fips_enforce is not None:
            pulumi.set(__self__, "fips_enforce", fips_enforce)
        if firmware_provision_on_authorization is not None:
            pulumi.set(__self__, "firmware_provision_on_authorization", firmware_provision_on_authorization)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if https_image_push is not None:
            pulumi.set(__self__, "https_image_push", https_image_push)
        if log_mac_limit_violations is not None:
            pulumi.set(__self__, "log_mac_limit_violations", log_mac_limit_violations)
        if mac_aging_interval is not None:
            pulumi.set(__self__, "mac_aging_interval", mac_aging_interval)
        if mac_event_logging is not None:
            pulumi.set(__self__, "mac_event_logging", mac_event_logging)
        if mac_retention_period is not None:
            pulumi.set(__self__, "mac_retention_period", mac_retention_period)
        if mac_violation_timer is not None:
            pulumi.set(__self__, "mac_violation_timer", mac_violation_timer)
        if quarantine_mode is not None:
            pulumi.set(__self__, "quarantine_mode", quarantine_mode)
        if sn_dns_resolution is not None:
            pulumi.set(__self__, "sn_dns_resolution", sn_dns_resolution)
        if update_user_device is not None:
            pulumi.set(__self__, "update_user_device", update_user_device)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_all_mode is not None:
            pulumi.set(__self__, "vlan_all_mode", vlan_all_mode)
        if vlan_optimization is not None:
            pulumi.set(__self__, "vlan_optimization", vlan_optimization)

    @property
    @pulumi.getter(name="allowMultipleInterfaces")
    def allow_multiple_interfaces(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_multiple_interfaces")

    @allow_multiple_interfaces.setter
    def allow_multiple_interfaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_multiple_interfaces", value)

    @property
    @pulumi.getter(name="bounceQuarantinedLink")
    def bounce_quarantined_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bounce_quarantined_link")

    @bounce_quarantined_link.setter
    def bounce_quarantined_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_quarantined_link", value)

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalCustomCommandArgs']]]]:
        return pulumi.get(self, "custom_commands")

    @custom_commands.setter
    def custom_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalCustomCommandArgs']]]]):
        pulumi.set(self, "custom_commands", value)

    @property
    @pulumi.getter(name="defaultVirtualSwitchVlan")
    def default_virtual_switch_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_virtual_switch_vlan")

    @default_virtual_switch_vlan.setter
    def default_virtual_switch_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_virtual_switch_vlan", value)

    @property
    @pulumi.getter(name="dhcpOption82CircuitId")
    def dhcp_option82_circuit_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_circuit_id")

    @dhcp_option82_circuit_id.setter
    def dhcp_option82_circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_circuit_id", value)

    @property
    @pulumi.getter(name="dhcpOption82Format")
    def dhcp_option82_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_format")

    @dhcp_option82_format.setter
    def dhcp_option82_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_format", value)

    @property
    @pulumi.getter(name="dhcpOption82RemoteId")
    def dhcp_option82_remote_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_remote_id")

    @dhcp_option82_remote_id.setter
    def dhcp_option82_remote_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_remote_id", value)

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_server_access_list")

    @dhcp_server_access_list.setter
    def dhcp_server_access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server_access_list", value)

    @property
    @pulumi.getter(name="dhcpSnoopClientDbExp")
    def dhcp_snoop_client_db_exp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dhcp_snoop_client_db_exp")

    @dhcp_snoop_client_db_exp.setter
    def dhcp_snoop_client_db_exp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_snoop_client_db_exp", value)

    @property
    @pulumi.getter(name="dhcpSnoopClientReq")
    def dhcp_snoop_client_req(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_snoop_client_req")

    @dhcp_snoop_client_req.setter
    def dhcp_snoop_client_req(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_snoop_client_req", value)

    @property
    @pulumi.getter(name="dhcpSnoopDbPerPortLearnLimit")
    def dhcp_snoop_db_per_port_learn_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dhcp_snoop_db_per_port_learn_limit")

    @dhcp_snoop_db_per_port_learn_limit.setter
    def dhcp_snoop_db_per_port_learn_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_snoop_db_per_port_learn_limit", value)

    @property
    @pulumi.getter(name="disableDiscoveries")
    def disable_discoveries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalDisableDiscoveryArgs']]]]:
        return pulumi.get(self, "disable_discoveries")

    @disable_discoveries.setter
    def disable_discoveries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalDisableDiscoveryArgs']]]]):
        pulumi.set(self, "disable_discoveries", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fipsEnforce")
    def fips_enforce(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fips_enforce")

    @fips_enforce.setter
    def fips_enforce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fips_enforce", value)

    @property
    @pulumi.getter(name="firmwareProvisionOnAuthorization")
    def firmware_provision_on_authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision_on_authorization")

    @firmware_provision_on_authorization.setter
    def firmware_provision_on_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_on_authorization", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpsImagePush")
    def https_image_push(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_image_push")

    @https_image_push.setter
    def https_image_push(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_image_push", value)

    @property
    @pulumi.getter(name="logMacLimitViolations")
    def log_mac_limit_violations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_mac_limit_violations")

    @log_mac_limit_violations.setter
    def log_mac_limit_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_mac_limit_violations", value)

    @property
    @pulumi.getter(name="macAgingInterval")
    def mac_aging_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mac_aging_interval")

    @mac_aging_interval.setter
    def mac_aging_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_aging_interval", value)

    @property
    @pulumi.getter(name="macEventLogging")
    def mac_event_logging(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_event_logging")

    @mac_event_logging.setter
    def mac_event_logging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_event_logging", value)

    @property
    @pulumi.getter(name="macRetentionPeriod")
    def mac_retention_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mac_retention_period")

    @mac_retention_period.setter
    def mac_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_retention_period", value)

    @property
    @pulumi.getter(name="macViolationTimer")
    def mac_violation_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mac_violation_timer")

    @mac_violation_timer.setter
    def mac_violation_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_violation_timer", value)

    @property
    @pulumi.getter(name="quarantineMode")
    def quarantine_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_mode")

    @quarantine_mode.setter
    def quarantine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_mode", value)

    @property
    @pulumi.getter(name="snDnsResolution")
    def sn_dns_resolution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sn_dns_resolution")

    @sn_dns_resolution.setter
    def sn_dns_resolution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sn_dns_resolution", value)

    @property
    @pulumi.getter(name="updateUserDevice")
    def update_user_device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_user_device")

    @update_user_device.setter
    def update_user_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_user_device", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vlanAllMode")
    def vlan_all_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_all_mode")

    @vlan_all_mode.setter
    def vlan_all_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_all_mode", value)

    @property
    @pulumi.getter(name="vlanOptimization")
    def vlan_optimization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_optimization")

    @vlan_optimization.setter
    def vlan_optimization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_optimization", value)


@pulumi.input_type
class _SwitchControllerGlobalState:
    def __init__(__self__, *,
                 allow_multiple_interfaces: Optional[pulumi.Input[str]] = None,
                 bounce_quarantined_link: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalCustomCommandArgs']]]] = None,
                 default_virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_format: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_client_db_exp: Optional[pulumi.Input[int]] = None,
                 dhcp_snoop_client_req: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_db_per_port_learn_limit: Optional[pulumi.Input[int]] = None,
                 disable_discoveries: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalDisableDiscoveryArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fips_enforce: Optional[pulumi.Input[str]] = None,
                 firmware_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_image_push: Optional[pulumi.Input[str]] = None,
                 log_mac_limit_violations: Optional[pulumi.Input[str]] = None,
                 mac_aging_interval: Optional[pulumi.Input[int]] = None,
                 mac_event_logging: Optional[pulumi.Input[str]] = None,
                 mac_retention_period: Optional[pulumi.Input[int]] = None,
                 mac_violation_timer: Optional[pulumi.Input[int]] = None,
                 quarantine_mode: Optional[pulumi.Input[str]] = None,
                 sn_dns_resolution: Optional[pulumi.Input[str]] = None,
                 update_user_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_all_mode: Optional[pulumi.Input[str]] = None,
                 vlan_optimization: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerGlobal resources.
        """
        if allow_multiple_interfaces is not None:
            pulumi.set(__self__, "allow_multiple_interfaces", allow_multiple_interfaces)
        if bounce_quarantined_link is not None:
            pulumi.set(__self__, "bounce_quarantined_link", bounce_quarantined_link)
        if custom_commands is not None:
            pulumi.set(__self__, "custom_commands", custom_commands)
        if default_virtual_switch_vlan is not None:
            pulumi.set(__self__, "default_virtual_switch_vlan", default_virtual_switch_vlan)
        if dhcp_option82_circuit_id is not None:
            pulumi.set(__self__, "dhcp_option82_circuit_id", dhcp_option82_circuit_id)
        if dhcp_option82_format is not None:
            pulumi.set(__self__, "dhcp_option82_format", dhcp_option82_format)
        if dhcp_option82_remote_id is not None:
            pulumi.set(__self__, "dhcp_option82_remote_id", dhcp_option82_remote_id)
        if dhcp_server_access_list is not None:
            pulumi.set(__self__, "dhcp_server_access_list", dhcp_server_access_list)
        if dhcp_snoop_client_db_exp is not None:
            pulumi.set(__self__, "dhcp_snoop_client_db_exp", dhcp_snoop_client_db_exp)
        if dhcp_snoop_client_req is not None:
            pulumi.set(__self__, "dhcp_snoop_client_req", dhcp_snoop_client_req)
        if dhcp_snoop_db_per_port_learn_limit is not None:
            pulumi.set(__self__, "dhcp_snoop_db_per_port_learn_limit", dhcp_snoop_db_per_port_learn_limit)
        if disable_discoveries is not None:
            pulumi.set(__self__, "disable_discoveries", disable_discoveries)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fips_enforce is not None:
            pulumi.set(__self__, "fips_enforce", fips_enforce)
        if firmware_provision_on_authorization is not None:
            pulumi.set(__self__, "firmware_provision_on_authorization", firmware_provision_on_authorization)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if https_image_push is not None:
            pulumi.set(__self__, "https_image_push", https_image_push)
        if log_mac_limit_violations is not None:
            pulumi.set(__self__, "log_mac_limit_violations", log_mac_limit_violations)
        if mac_aging_interval is not None:
            pulumi.set(__self__, "mac_aging_interval", mac_aging_interval)
        if mac_event_logging is not None:
            pulumi.set(__self__, "mac_event_logging", mac_event_logging)
        if mac_retention_period is not None:
            pulumi.set(__self__, "mac_retention_period", mac_retention_period)
        if mac_violation_timer is not None:
            pulumi.set(__self__, "mac_violation_timer", mac_violation_timer)
        if quarantine_mode is not None:
            pulumi.set(__self__, "quarantine_mode", quarantine_mode)
        if sn_dns_resolution is not None:
            pulumi.set(__self__, "sn_dns_resolution", sn_dns_resolution)
        if update_user_device is not None:
            pulumi.set(__self__, "update_user_device", update_user_device)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_all_mode is not None:
            pulumi.set(__self__, "vlan_all_mode", vlan_all_mode)
        if vlan_optimization is not None:
            pulumi.set(__self__, "vlan_optimization", vlan_optimization)

    @property
    @pulumi.getter(name="allowMultipleInterfaces")
    def allow_multiple_interfaces(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_multiple_interfaces")

    @allow_multiple_interfaces.setter
    def allow_multiple_interfaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_multiple_interfaces", value)

    @property
    @pulumi.getter(name="bounceQuarantinedLink")
    def bounce_quarantined_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bounce_quarantined_link")

    @bounce_quarantined_link.setter
    def bounce_quarantined_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_quarantined_link", value)

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalCustomCommandArgs']]]]:
        return pulumi.get(self, "custom_commands")

    @custom_commands.setter
    def custom_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalCustomCommandArgs']]]]):
        pulumi.set(self, "custom_commands", value)

    @property
    @pulumi.getter(name="defaultVirtualSwitchVlan")
    def default_virtual_switch_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_virtual_switch_vlan")

    @default_virtual_switch_vlan.setter
    def default_virtual_switch_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_virtual_switch_vlan", value)

    @property
    @pulumi.getter(name="dhcpOption82CircuitId")
    def dhcp_option82_circuit_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_circuit_id")

    @dhcp_option82_circuit_id.setter
    def dhcp_option82_circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_circuit_id", value)

    @property
    @pulumi.getter(name="dhcpOption82Format")
    def dhcp_option82_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_format")

    @dhcp_option82_format.setter
    def dhcp_option82_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_format", value)

    @property
    @pulumi.getter(name="dhcpOption82RemoteId")
    def dhcp_option82_remote_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_remote_id")

    @dhcp_option82_remote_id.setter
    def dhcp_option82_remote_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_remote_id", value)

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_server_access_list")

    @dhcp_server_access_list.setter
    def dhcp_server_access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server_access_list", value)

    @property
    @pulumi.getter(name="dhcpSnoopClientDbExp")
    def dhcp_snoop_client_db_exp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dhcp_snoop_client_db_exp")

    @dhcp_snoop_client_db_exp.setter
    def dhcp_snoop_client_db_exp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_snoop_client_db_exp", value)

    @property
    @pulumi.getter(name="dhcpSnoopClientReq")
    def dhcp_snoop_client_req(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_snoop_client_req")

    @dhcp_snoop_client_req.setter
    def dhcp_snoop_client_req(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_snoop_client_req", value)

    @property
    @pulumi.getter(name="dhcpSnoopDbPerPortLearnLimit")
    def dhcp_snoop_db_per_port_learn_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dhcp_snoop_db_per_port_learn_limit")

    @dhcp_snoop_db_per_port_learn_limit.setter
    def dhcp_snoop_db_per_port_learn_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_snoop_db_per_port_learn_limit", value)

    @property
    @pulumi.getter(name="disableDiscoveries")
    def disable_discoveries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalDisableDiscoveryArgs']]]]:
        return pulumi.get(self, "disable_discoveries")

    @disable_discoveries.setter
    def disable_discoveries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerGlobalDisableDiscoveryArgs']]]]):
        pulumi.set(self, "disable_discoveries", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fipsEnforce")
    def fips_enforce(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fips_enforce")

    @fips_enforce.setter
    def fips_enforce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fips_enforce", value)

    @property
    @pulumi.getter(name="firmwareProvisionOnAuthorization")
    def firmware_provision_on_authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision_on_authorization")

    @firmware_provision_on_authorization.setter
    def firmware_provision_on_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_on_authorization", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpsImagePush")
    def https_image_push(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_image_push")

    @https_image_push.setter
    def https_image_push(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_image_push", value)

    @property
    @pulumi.getter(name="logMacLimitViolations")
    def log_mac_limit_violations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_mac_limit_violations")

    @log_mac_limit_violations.setter
    def log_mac_limit_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_mac_limit_violations", value)

    @property
    @pulumi.getter(name="macAgingInterval")
    def mac_aging_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mac_aging_interval")

    @mac_aging_interval.setter
    def mac_aging_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_aging_interval", value)

    @property
    @pulumi.getter(name="macEventLogging")
    def mac_event_logging(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_event_logging")

    @mac_event_logging.setter
    def mac_event_logging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_event_logging", value)

    @property
    @pulumi.getter(name="macRetentionPeriod")
    def mac_retention_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mac_retention_period")

    @mac_retention_period.setter
    def mac_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_retention_period", value)

    @property
    @pulumi.getter(name="macViolationTimer")
    def mac_violation_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mac_violation_timer")

    @mac_violation_timer.setter
    def mac_violation_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_violation_timer", value)

    @property
    @pulumi.getter(name="quarantineMode")
    def quarantine_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_mode")

    @quarantine_mode.setter
    def quarantine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_mode", value)

    @property
    @pulumi.getter(name="snDnsResolution")
    def sn_dns_resolution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sn_dns_resolution")

    @sn_dns_resolution.setter
    def sn_dns_resolution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sn_dns_resolution", value)

    @property
    @pulumi.getter(name="updateUserDevice")
    def update_user_device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_user_device")

    @update_user_device.setter
    def update_user_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_user_device", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vlanAllMode")
    def vlan_all_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_all_mode")

    @vlan_all_mode.setter
    def vlan_all_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_all_mode", value)

    @property
    @pulumi.getter(name="vlanOptimization")
    def vlan_optimization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_optimization")

    @vlan_optimization.setter
    def vlan_optimization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_optimization", value)


class SwitchControllerGlobal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_multiple_interfaces: Optional[pulumi.Input[str]] = None,
                 bounce_quarantined_link: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerGlobalCustomCommandArgs']]]]] = None,
                 default_virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_format: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_client_db_exp: Optional[pulumi.Input[int]] = None,
                 dhcp_snoop_client_req: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_db_per_port_learn_limit: Optional[pulumi.Input[int]] = None,
                 disable_discoveries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerGlobalDisableDiscoveryArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fips_enforce: Optional[pulumi.Input[str]] = None,
                 firmware_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_image_push: Optional[pulumi.Input[str]] = None,
                 log_mac_limit_violations: Optional[pulumi.Input[str]] = None,
                 mac_aging_interval: Optional[pulumi.Input[int]] = None,
                 mac_event_logging: Optional[pulumi.Input[str]] = None,
                 mac_retention_period: Optional[pulumi.Input[int]] = None,
                 mac_violation_timer: Optional[pulumi.Input[int]] = None,
                 quarantine_mode: Optional[pulumi.Input[str]] = None,
                 sn_dns_resolution: Optional[pulumi.Input[str]] = None,
                 update_user_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_all_mode: Optional[pulumi.Input[str]] = None,
                 vlan_optimization: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerGlobal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerGlobalArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerGlobal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerGlobalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerGlobalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_multiple_interfaces: Optional[pulumi.Input[str]] = None,
                 bounce_quarantined_link: Optional[pulumi.Input[str]] = None,
                 custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerGlobalCustomCommandArgs']]]]] = None,
                 default_virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_format: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id: Optional[pulumi.Input[str]] = None,
                 dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_client_db_exp: Optional[pulumi.Input[int]] = None,
                 dhcp_snoop_client_req: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_db_per_port_learn_limit: Optional[pulumi.Input[int]] = None,
                 disable_discoveries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerGlobalDisableDiscoveryArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fips_enforce: Optional[pulumi.Input[str]] = None,
                 firmware_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_image_push: Optional[pulumi.Input[str]] = None,
                 log_mac_limit_violations: Optional[pulumi.Input[str]] = None,
                 mac_aging_interval: Optional[pulumi.Input[int]] = None,
                 mac_event_logging: Optional[pulumi.Input[str]] = None,
                 mac_retention_period: Optional[pulumi.Input[int]] = None,
                 mac_violation_timer: Optional[pulumi.Input[int]] = None,
                 quarantine_mode: Optional[pulumi.Input[str]] = None,
                 sn_dns_resolution: Optional[pulumi.Input[str]] = None,
                 update_user_device: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_all_mode: Optional[pulumi.Input[str]] = None,
                 vlan_optimization: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerGlobalArgs.__new__(SwitchControllerGlobalArgs)

            __props__.__dict__["allow_multiple_interfaces"] = allow_multiple_interfaces
            __props__.__dict__["bounce_quarantined_link"] = bounce_quarantined_link
            __props__.__dict__["custom_commands"] = custom_commands
            __props__.__dict__["default_virtual_switch_vlan"] = default_virtual_switch_vlan
            __props__.__dict__["dhcp_option82_circuit_id"] = dhcp_option82_circuit_id
            __props__.__dict__["dhcp_option82_format"] = dhcp_option82_format
            __props__.__dict__["dhcp_option82_remote_id"] = dhcp_option82_remote_id
            __props__.__dict__["dhcp_server_access_list"] = dhcp_server_access_list
            __props__.__dict__["dhcp_snoop_client_db_exp"] = dhcp_snoop_client_db_exp
            __props__.__dict__["dhcp_snoop_client_req"] = dhcp_snoop_client_req
            __props__.__dict__["dhcp_snoop_db_per_port_learn_limit"] = dhcp_snoop_db_per_port_learn_limit
            __props__.__dict__["disable_discoveries"] = disable_discoveries
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fips_enforce"] = fips_enforce
            __props__.__dict__["firmware_provision_on_authorization"] = firmware_provision_on_authorization
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["https_image_push"] = https_image_push
            __props__.__dict__["log_mac_limit_violations"] = log_mac_limit_violations
            __props__.__dict__["mac_aging_interval"] = mac_aging_interval
            __props__.__dict__["mac_event_logging"] = mac_event_logging
            __props__.__dict__["mac_retention_period"] = mac_retention_period
            __props__.__dict__["mac_violation_timer"] = mac_violation_timer
            __props__.__dict__["quarantine_mode"] = quarantine_mode
            __props__.__dict__["sn_dns_resolution"] = sn_dns_resolution
            __props__.__dict__["update_user_device"] = update_user_device
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vlan_all_mode"] = vlan_all_mode
            __props__.__dict__["vlan_optimization"] = vlan_optimization
        super(SwitchControllerGlobal, __self__).__init__(
            'fortios:index/switchControllerGlobal:SwitchControllerGlobal',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_multiple_interfaces: Optional[pulumi.Input[str]] = None,
            bounce_quarantined_link: Optional[pulumi.Input[str]] = None,
            custom_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerGlobalCustomCommandArgs']]]]] = None,
            default_virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
            dhcp_option82_circuit_id: Optional[pulumi.Input[str]] = None,
            dhcp_option82_format: Optional[pulumi.Input[str]] = None,
            dhcp_option82_remote_id: Optional[pulumi.Input[str]] = None,
            dhcp_server_access_list: Optional[pulumi.Input[str]] = None,
            dhcp_snoop_client_db_exp: Optional[pulumi.Input[int]] = None,
            dhcp_snoop_client_req: Optional[pulumi.Input[str]] = None,
            dhcp_snoop_db_per_port_learn_limit: Optional[pulumi.Input[int]] = None,
            disable_discoveries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerGlobalDisableDiscoveryArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fips_enforce: Optional[pulumi.Input[str]] = None,
            firmware_provision_on_authorization: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            https_image_push: Optional[pulumi.Input[str]] = None,
            log_mac_limit_violations: Optional[pulumi.Input[str]] = None,
            mac_aging_interval: Optional[pulumi.Input[int]] = None,
            mac_event_logging: Optional[pulumi.Input[str]] = None,
            mac_retention_period: Optional[pulumi.Input[int]] = None,
            mac_violation_timer: Optional[pulumi.Input[int]] = None,
            quarantine_mode: Optional[pulumi.Input[str]] = None,
            sn_dns_resolution: Optional[pulumi.Input[str]] = None,
            update_user_device: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vlan_all_mode: Optional[pulumi.Input[str]] = None,
            vlan_optimization: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerGlobal':
        """
        Get an existing SwitchControllerGlobal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerGlobalState.__new__(_SwitchControllerGlobalState)

        __props__.__dict__["allow_multiple_interfaces"] = allow_multiple_interfaces
        __props__.__dict__["bounce_quarantined_link"] = bounce_quarantined_link
        __props__.__dict__["custom_commands"] = custom_commands
        __props__.__dict__["default_virtual_switch_vlan"] = default_virtual_switch_vlan
        __props__.__dict__["dhcp_option82_circuit_id"] = dhcp_option82_circuit_id
        __props__.__dict__["dhcp_option82_format"] = dhcp_option82_format
        __props__.__dict__["dhcp_option82_remote_id"] = dhcp_option82_remote_id
        __props__.__dict__["dhcp_server_access_list"] = dhcp_server_access_list
        __props__.__dict__["dhcp_snoop_client_db_exp"] = dhcp_snoop_client_db_exp
        __props__.__dict__["dhcp_snoop_client_req"] = dhcp_snoop_client_req
        __props__.__dict__["dhcp_snoop_db_per_port_learn_limit"] = dhcp_snoop_db_per_port_learn_limit
        __props__.__dict__["disable_discoveries"] = disable_discoveries
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fips_enforce"] = fips_enforce
        __props__.__dict__["firmware_provision_on_authorization"] = firmware_provision_on_authorization
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["https_image_push"] = https_image_push
        __props__.__dict__["log_mac_limit_violations"] = log_mac_limit_violations
        __props__.__dict__["mac_aging_interval"] = mac_aging_interval
        __props__.__dict__["mac_event_logging"] = mac_event_logging
        __props__.__dict__["mac_retention_period"] = mac_retention_period
        __props__.__dict__["mac_violation_timer"] = mac_violation_timer
        __props__.__dict__["quarantine_mode"] = quarantine_mode
        __props__.__dict__["sn_dns_resolution"] = sn_dns_resolution
        __props__.__dict__["update_user_device"] = update_user_device
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vlan_all_mode"] = vlan_all_mode
        __props__.__dict__["vlan_optimization"] = vlan_optimization
        return SwitchControllerGlobal(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowMultipleInterfaces")
    def allow_multiple_interfaces(self) -> pulumi.Output[str]:
        return pulumi.get(self, "allow_multiple_interfaces")

    @property
    @pulumi.getter(name="bounceQuarantinedLink")
    def bounce_quarantined_link(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bounce_quarantined_link")

    @property
    @pulumi.getter(name="customCommands")
    def custom_commands(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerGlobalCustomCommand']]]:
        return pulumi.get(self, "custom_commands")

    @property
    @pulumi.getter(name="defaultVirtualSwitchVlan")
    def default_virtual_switch_vlan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_virtual_switch_vlan")

    @property
    @pulumi.getter(name="dhcpOption82CircuitId")
    def dhcp_option82_circuit_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_option82_circuit_id")

    @property
    @pulumi.getter(name="dhcpOption82Format")
    def dhcp_option82_format(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_option82_format")

    @property
    @pulumi.getter(name="dhcpOption82RemoteId")
    def dhcp_option82_remote_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_option82_remote_id")

    @property
    @pulumi.getter(name="dhcpServerAccessList")
    def dhcp_server_access_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_server_access_list")

    @property
    @pulumi.getter(name="dhcpSnoopClientDbExp")
    def dhcp_snoop_client_db_exp(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dhcp_snoop_client_db_exp")

    @property
    @pulumi.getter(name="dhcpSnoopClientReq")
    def dhcp_snoop_client_req(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_snoop_client_req")

    @property
    @pulumi.getter(name="dhcpSnoopDbPerPortLearnLimit")
    def dhcp_snoop_db_per_port_learn_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dhcp_snoop_db_per_port_learn_limit")

    @property
    @pulumi.getter(name="disableDiscoveries")
    def disable_discoveries(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerGlobalDisableDiscovery']]]:
        return pulumi.get(self, "disable_discoveries")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fipsEnforce")
    def fips_enforce(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fips_enforce")

    @property
    @pulumi.getter(name="firmwareProvisionOnAuthorization")
    def firmware_provision_on_authorization(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firmware_provision_on_authorization")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="httpsImagePush")
    def https_image_push(self) -> pulumi.Output[str]:
        return pulumi.get(self, "https_image_push")

    @property
    @pulumi.getter(name="logMacLimitViolations")
    def log_mac_limit_violations(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_mac_limit_violations")

    @property
    @pulumi.getter(name="macAgingInterval")
    def mac_aging_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "mac_aging_interval")

    @property
    @pulumi.getter(name="macEventLogging")
    def mac_event_logging(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_event_logging")

    @property
    @pulumi.getter(name="macRetentionPeriod")
    def mac_retention_period(self) -> pulumi.Output[int]:
        return pulumi.get(self, "mac_retention_period")

    @property
    @pulumi.getter(name="macViolationTimer")
    def mac_violation_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "mac_violation_timer")

    @property
    @pulumi.getter(name="quarantineMode")
    def quarantine_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "quarantine_mode")

    @property
    @pulumi.getter(name="snDnsResolution")
    def sn_dns_resolution(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sn_dns_resolution")

    @property
    @pulumi.getter(name="updateUserDevice")
    def update_user_device(self) -> pulumi.Output[str]:
        return pulumi.get(self, "update_user_device")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vlanAllMode")
    def vlan_all_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vlan_all_mode")

    @property
    @pulumi.getter(name="vlanOptimization")
    def vlan_optimization(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vlan_optimization")

