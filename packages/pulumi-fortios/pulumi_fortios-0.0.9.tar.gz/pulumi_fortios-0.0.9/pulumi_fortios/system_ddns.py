# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemDdnsArgs', 'SystemDdns']

@pulumi.input_type
class SystemDdnsArgs:
    def __init__(__self__, *,
                 ddns_server: pulumi.Input[str],
                 monitor_interfaces: pulumi.Input[Sequence[pulumi.Input['SystemDdnsMonitorInterfaceArgs']]],
                 addr_type: Optional[pulumi.Input[str]] = None,
                 bound_ip: Optional[pulumi.Input[str]] = None,
                 clear_text: Optional[pulumi.Input[str]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_domain: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_password: Optional[pulumi.Input[str]] = None,
                 ddns_server_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDdnsDdnsServerAddrArgs']]]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_sn: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_username: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 ddnsid: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_public_ip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemDdns resource.
        """
        pulumi.set(__self__, "ddns_server", ddns_server)
        pulumi.set(__self__, "monitor_interfaces", monitor_interfaces)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if bound_ip is not None:
            pulumi.set(__self__, "bound_ip", bound_ip)
        if clear_text is not None:
            pulumi.set(__self__, "clear_text", clear_text)
        if ddns_auth is not None:
            pulumi.set(__self__, "ddns_auth", ddns_auth)
        if ddns_domain is not None:
            pulumi.set(__self__, "ddns_domain", ddns_domain)
        if ddns_key is not None:
            pulumi.set(__self__, "ddns_key", ddns_key)
        if ddns_keyname is not None:
            pulumi.set(__self__, "ddns_keyname", ddns_keyname)
        if ddns_password is not None:
            pulumi.set(__self__, "ddns_password", ddns_password)
        if ddns_server_addrs is not None:
            pulumi.set(__self__, "ddns_server_addrs", ddns_server_addrs)
        if ddns_server_ip is not None:
            pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_sn is not None:
            pulumi.set(__self__, "ddns_sn", ddns_sn)
        if ddns_ttl is not None:
            pulumi.set(__self__, "ddns_ttl", ddns_ttl)
        if ddns_username is not None:
            pulumi.set(__self__, "ddns_username", ddns_username)
        if ddns_zone is not None:
            pulumi.set(__self__, "ddns_zone", ddns_zone)
        if ddnsid is not None:
            pulumi.set(__self__, "ddnsid", ddnsid)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if update_interval is not None:
            pulumi.set(__self__, "update_interval", update_interval)
        if use_public_ip is not None:
            pulumi.set(__self__, "use_public_ip", use_public_ip)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="ddnsServer")
    def ddns_server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ddns_server")

    @ddns_server.setter
    def ddns_server(self, value: pulumi.Input[str]):
        pulumi.set(self, "ddns_server", value)

    @property
    @pulumi.getter(name="monitorInterfaces")
    def monitor_interfaces(self) -> pulumi.Input[Sequence[pulumi.Input['SystemDdnsMonitorInterfaceArgs']]]:
        return pulumi.get(self, "monitor_interfaces")

    @monitor_interfaces.setter
    def monitor_interfaces(self, value: pulumi.Input[Sequence[pulumi.Input['SystemDdnsMonitorInterfaceArgs']]]):
        pulumi.set(self, "monitor_interfaces", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="boundIp")
    def bound_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bound_ip")

    @bound_ip.setter
    def bound_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bound_ip", value)

    @property
    @pulumi.getter(name="clearText")
    def clear_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clear_text")

    @clear_text.setter
    def clear_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clear_text", value)

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_auth")

    @ddns_auth.setter
    def ddns_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_auth", value)

    @property
    @pulumi.getter(name="ddnsDomain")
    def ddns_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_domain")

    @ddns_domain.setter
    def ddns_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_domain", value)

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_key")

    @ddns_key.setter
    def ddns_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_key", value)

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_keyname")

    @ddns_keyname.setter
    def ddns_keyname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_keyname", value)

    @property
    @pulumi.getter(name="ddnsPassword")
    def ddns_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_password")

    @ddns_password.setter
    def ddns_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_password", value)

    @property
    @pulumi.getter(name="ddnsServerAddrs")
    def ddns_server_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDdnsDdnsServerAddrArgs']]]]:
        return pulumi.get(self, "ddns_server_addrs")

    @ddns_server_addrs.setter
    def ddns_server_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDdnsDdnsServerAddrArgs']]]]):
        pulumi.set(self, "ddns_server_addrs", value)

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_server_ip")

    @ddns_server_ip.setter
    def ddns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip", value)

    @property
    @pulumi.getter(name="ddnsSn")
    def ddns_sn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_sn")

    @ddns_sn.setter
    def ddns_sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_sn", value)

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ddns_ttl")

    @ddns_ttl.setter
    def ddns_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddns_ttl", value)

    @property
    @pulumi.getter(name="ddnsUsername")
    def ddns_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_username")

    @ddns_username.setter
    def ddns_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_username", value)

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_zone")

    @ddns_zone.setter
    def ddns_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_zone", value)

    @property
    @pulumi.getter
    def ddnsid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ddnsid")

    @ddnsid.setter
    def ddnsid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddnsid", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="updateInterval")
    def update_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_interval")

    @update_interval.setter
    def update_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_interval", value)

    @property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_public_ip")

    @use_public_ip.setter
    def use_public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_public_ip", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemDdnsState:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 bound_ip: Optional[pulumi.Input[str]] = None,
                 clear_text: Optional[pulumi.Input[str]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_domain: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_password: Optional[pulumi.Input[str]] = None,
                 ddns_server: Optional[pulumi.Input[str]] = None,
                 ddns_server_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDdnsDdnsServerAddrArgs']]]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_sn: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_username: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 ddnsid: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 monitor_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDdnsMonitorInterfaceArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_public_ip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemDdns resources.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if bound_ip is not None:
            pulumi.set(__self__, "bound_ip", bound_ip)
        if clear_text is not None:
            pulumi.set(__self__, "clear_text", clear_text)
        if ddns_auth is not None:
            pulumi.set(__self__, "ddns_auth", ddns_auth)
        if ddns_domain is not None:
            pulumi.set(__self__, "ddns_domain", ddns_domain)
        if ddns_key is not None:
            pulumi.set(__self__, "ddns_key", ddns_key)
        if ddns_keyname is not None:
            pulumi.set(__self__, "ddns_keyname", ddns_keyname)
        if ddns_password is not None:
            pulumi.set(__self__, "ddns_password", ddns_password)
        if ddns_server is not None:
            pulumi.set(__self__, "ddns_server", ddns_server)
        if ddns_server_addrs is not None:
            pulumi.set(__self__, "ddns_server_addrs", ddns_server_addrs)
        if ddns_server_ip is not None:
            pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_sn is not None:
            pulumi.set(__self__, "ddns_sn", ddns_sn)
        if ddns_ttl is not None:
            pulumi.set(__self__, "ddns_ttl", ddns_ttl)
        if ddns_username is not None:
            pulumi.set(__self__, "ddns_username", ddns_username)
        if ddns_zone is not None:
            pulumi.set(__self__, "ddns_zone", ddns_zone)
        if ddnsid is not None:
            pulumi.set(__self__, "ddnsid", ddnsid)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if monitor_interfaces is not None:
            pulumi.set(__self__, "monitor_interfaces", monitor_interfaces)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if update_interval is not None:
            pulumi.set(__self__, "update_interval", update_interval)
        if use_public_ip is not None:
            pulumi.set(__self__, "use_public_ip", use_public_ip)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="boundIp")
    def bound_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bound_ip")

    @bound_ip.setter
    def bound_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bound_ip", value)

    @property
    @pulumi.getter(name="clearText")
    def clear_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clear_text")

    @clear_text.setter
    def clear_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clear_text", value)

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_auth")

    @ddns_auth.setter
    def ddns_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_auth", value)

    @property
    @pulumi.getter(name="ddnsDomain")
    def ddns_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_domain")

    @ddns_domain.setter
    def ddns_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_domain", value)

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_key")

    @ddns_key.setter
    def ddns_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_key", value)

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_keyname")

    @ddns_keyname.setter
    def ddns_keyname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_keyname", value)

    @property
    @pulumi.getter(name="ddnsPassword")
    def ddns_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_password")

    @ddns_password.setter
    def ddns_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_password", value)

    @property
    @pulumi.getter(name="ddnsServer")
    def ddns_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_server")

    @ddns_server.setter
    def ddns_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server", value)

    @property
    @pulumi.getter(name="ddnsServerAddrs")
    def ddns_server_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDdnsDdnsServerAddrArgs']]]]:
        return pulumi.get(self, "ddns_server_addrs")

    @ddns_server_addrs.setter
    def ddns_server_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDdnsDdnsServerAddrArgs']]]]):
        pulumi.set(self, "ddns_server_addrs", value)

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_server_ip")

    @ddns_server_ip.setter
    def ddns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip", value)

    @property
    @pulumi.getter(name="ddnsSn")
    def ddns_sn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_sn")

    @ddns_sn.setter
    def ddns_sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_sn", value)

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ddns_ttl")

    @ddns_ttl.setter
    def ddns_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddns_ttl", value)

    @property
    @pulumi.getter(name="ddnsUsername")
    def ddns_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_username")

    @ddns_username.setter
    def ddns_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_username", value)

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddns_zone")

    @ddns_zone.setter
    def ddns_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_zone", value)

    @property
    @pulumi.getter
    def ddnsid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ddnsid")

    @ddnsid.setter
    def ddnsid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddnsid", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="monitorInterfaces")
    def monitor_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDdnsMonitorInterfaceArgs']]]]:
        return pulumi.get(self, "monitor_interfaces")

    @monitor_interfaces.setter
    def monitor_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDdnsMonitorInterfaceArgs']]]]):
        pulumi.set(self, "monitor_interfaces", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="updateInterval")
    def update_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_interval")

    @update_interval.setter
    def update_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_interval", value)

    @property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_public_ip")

    @use_public_ip.setter
    def use_public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_public_ip", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemDdns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 bound_ip: Optional[pulumi.Input[str]] = None,
                 clear_text: Optional[pulumi.Input[str]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_domain: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_password: Optional[pulumi.Input[str]] = None,
                 ddns_server: Optional[pulumi.Input[str]] = None,
                 ddns_server_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDdnsDdnsServerAddrArgs']]]]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_sn: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_username: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 ddnsid: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 monitor_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDdnsMonitorInterfaceArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_public_ip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemDdns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemDdnsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemDdns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemDdnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemDdnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 bound_ip: Optional[pulumi.Input[str]] = None,
                 clear_text: Optional[pulumi.Input[str]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_domain: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_password: Optional[pulumi.Input[str]] = None,
                 ddns_server: Optional[pulumi.Input[str]] = None,
                 ddns_server_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDdnsDdnsServerAddrArgs']]]]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_sn: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_username: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 ddnsid: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 monitor_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDdnsMonitorInterfaceArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_public_ip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemDdnsArgs.__new__(SystemDdnsArgs)

            __props__.__dict__["addr_type"] = addr_type
            __props__.__dict__["bound_ip"] = bound_ip
            __props__.__dict__["clear_text"] = clear_text
            __props__.__dict__["ddns_auth"] = ddns_auth
            __props__.__dict__["ddns_domain"] = ddns_domain
            __props__.__dict__["ddns_key"] = None if ddns_key is None else pulumi.Output.secret(ddns_key)
            __props__.__dict__["ddns_keyname"] = ddns_keyname
            __props__.__dict__["ddns_password"] = None if ddns_password is None else pulumi.Output.secret(ddns_password)
            if ddns_server is None and not opts.urn:
                raise TypeError("Missing required property 'ddns_server'")
            __props__.__dict__["ddns_server"] = ddns_server
            __props__.__dict__["ddns_server_addrs"] = ddns_server_addrs
            __props__.__dict__["ddns_server_ip"] = ddns_server_ip
            __props__.__dict__["ddns_sn"] = ddns_sn
            __props__.__dict__["ddns_ttl"] = ddns_ttl
            __props__.__dict__["ddns_username"] = ddns_username
            __props__.__dict__["ddns_zone"] = ddns_zone
            __props__.__dict__["ddnsid"] = ddnsid
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            if monitor_interfaces is None and not opts.urn:
                raise TypeError("Missing required property 'monitor_interfaces'")
            __props__.__dict__["monitor_interfaces"] = monitor_interfaces
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["ssl_certificate"] = ssl_certificate
            __props__.__dict__["update_interval"] = update_interval
            __props__.__dict__["use_public_ip"] = use_public_ip
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["ddnsKey", "ddnsPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SystemDdns, __self__).__init__(
            'fortios:index/systemDdns:SystemDdns',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addr_type: Optional[pulumi.Input[str]] = None,
            bound_ip: Optional[pulumi.Input[str]] = None,
            clear_text: Optional[pulumi.Input[str]] = None,
            ddns_auth: Optional[pulumi.Input[str]] = None,
            ddns_domain: Optional[pulumi.Input[str]] = None,
            ddns_key: Optional[pulumi.Input[str]] = None,
            ddns_keyname: Optional[pulumi.Input[str]] = None,
            ddns_password: Optional[pulumi.Input[str]] = None,
            ddns_server: Optional[pulumi.Input[str]] = None,
            ddns_server_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDdnsDdnsServerAddrArgs']]]]] = None,
            ddns_server_ip: Optional[pulumi.Input[str]] = None,
            ddns_sn: Optional[pulumi.Input[str]] = None,
            ddns_ttl: Optional[pulumi.Input[int]] = None,
            ddns_username: Optional[pulumi.Input[str]] = None,
            ddns_zone: Optional[pulumi.Input[str]] = None,
            ddnsid: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            monitor_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDdnsMonitorInterfaceArgs']]]]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            ssl_certificate: Optional[pulumi.Input[str]] = None,
            update_interval: Optional[pulumi.Input[int]] = None,
            use_public_ip: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemDdns':
        """
        Get an existing SystemDdns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemDdnsState.__new__(_SystemDdnsState)

        __props__.__dict__["addr_type"] = addr_type
        __props__.__dict__["bound_ip"] = bound_ip
        __props__.__dict__["clear_text"] = clear_text
        __props__.__dict__["ddns_auth"] = ddns_auth
        __props__.__dict__["ddns_domain"] = ddns_domain
        __props__.__dict__["ddns_key"] = ddns_key
        __props__.__dict__["ddns_keyname"] = ddns_keyname
        __props__.__dict__["ddns_password"] = ddns_password
        __props__.__dict__["ddns_server"] = ddns_server
        __props__.__dict__["ddns_server_addrs"] = ddns_server_addrs
        __props__.__dict__["ddns_server_ip"] = ddns_server_ip
        __props__.__dict__["ddns_sn"] = ddns_sn
        __props__.__dict__["ddns_ttl"] = ddns_ttl
        __props__.__dict__["ddns_username"] = ddns_username
        __props__.__dict__["ddns_zone"] = ddns_zone
        __props__.__dict__["ddnsid"] = ddnsid
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["monitor_interfaces"] = monitor_interfaces
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["ssl_certificate"] = ssl_certificate
        __props__.__dict__["update_interval"] = update_interval
        __props__.__dict__["use_public_ip"] = use_public_ip
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemDdns(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter(name="boundIp")
    def bound_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bound_ip")

    @property
    @pulumi.getter(name="clearText")
    def clear_text(self) -> pulumi.Output[str]:
        return pulumi.get(self, "clear_text")

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_auth")

    @property
    @pulumi.getter(name="ddnsDomain")
    def ddns_domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_domain")

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_key")

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_keyname")

    @property
    @pulumi.getter(name="ddnsPassword")
    def ddns_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ddns_password")

    @property
    @pulumi.getter(name="ddnsServer")
    def ddns_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_server")

    @property
    @pulumi.getter(name="ddnsServerAddrs")
    def ddns_server_addrs(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDdnsDdnsServerAddr']]]:
        return pulumi.get(self, "ddns_server_addrs")

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_server_ip")

    @property
    @pulumi.getter(name="ddnsSn")
    def ddns_sn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_sn")

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ddns_ttl")

    @property
    @pulumi.getter(name="ddnsUsername")
    def ddns_username(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_username")

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ddns_zone")

    @property
    @pulumi.getter
    def ddnsid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ddnsid")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="monitorInterfaces")
    def monitor_interfaces(self) -> pulumi.Output[Sequence['outputs.SystemDdnsMonitorInterface']]:
        return pulumi.get(self, "monitor_interfaces")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_certificate")

    @property
    @pulumi.getter(name="updateInterval")
    def update_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "update_interval")

    @property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "use_public_ip")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

