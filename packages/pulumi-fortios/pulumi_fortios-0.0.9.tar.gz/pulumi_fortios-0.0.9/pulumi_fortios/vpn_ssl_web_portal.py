# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VpnSslWebPortalArgs', 'VpnSslWebPortal']

@pulumi.input_type
class VpnSslWebPortalArgs:
    def __init__(__self__, *,
                 allow_user_access: Optional[pulumi.Input[str]] = None,
                 auto_connect: Optional[pulumi.Input[str]] = None,
                 bookmark_groups: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupArgs']]]] = None,
                 client_src_range: Optional[pulumi.Input[str]] = None,
                 clipboard: Optional[pulumi.Input[str]] = None,
                 custom_lang: Optional[pulumi.Input[str]] = None,
                 customize_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 default_window_height: Optional[pulumi.Input[int]] = None,
                 default_window_width: Optional[pulumi.Input[int]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ip_overlap: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 display_bookmark: Optional[pulumi.Input[str]] = None,
                 display_connection_tools: Optional[pulumi.Input[str]] = None,
                 display_history: Optional[pulumi.Input[str]] = None,
                 display_status: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclusive_routing: Optional[pulumi.Input[str]] = None,
                 forticlient_download: Optional[pulumi.Input[str]] = None,
                 forticlient_download_method: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 heading: Optional[pulumi.Input[str]] = None,
                 hide_sso_credential: Optional[pulumi.Input[str]] = None,
                 host_check: Optional[pulumi.Input[str]] = None,
                 host_check_interval: Optional[pulumi.Input[int]] = None,
                 host_check_policies: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalHostCheckPolicyArgs']]]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpPoolArgs']]]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_exclusive_routing: Optional[pulumi.Input[str]] = None,
                 ipv6_pools: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6PoolArgs']]]] = None,
                 ipv6_service_restriction: Optional[pulumi.Input[str]] = None,
                 ipv6_split_tunneling: Optional[pulumi.Input[str]] = None,
                 ipv6_split_tunneling_routing_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs']]]] = None,
                 ipv6_split_tunneling_routing_negate: Optional[pulumi.Input[str]] = None,
                 ipv6_tunnel_mode: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server2: Optional[pulumi.Input[str]] = None,
                 keep_alive: Optional[pulumi.Input[str]] = None,
                 landing_page: Optional[pulumi.Input['VpnSslWebPortalLandingPageArgs']] = None,
                 landing_page_mode: Optional[pulumi.Input[str]] = None,
                 limit_user_logins: Optional[pulumi.Input[str]] = None,
                 mac_addr_action: Optional[pulumi.Input[str]] = None,
                 mac_addr_check: Optional[pulumi.Input[str]] = None,
                 mac_addr_check_rules: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleArgs']]]] = None,
                 macos_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_check: Optional[pulumi.Input[str]] = None,
                 os_check_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalOsCheckListArgs']]]] = None,
                 prefer_ipv6_dns: Optional[pulumi.Input[str]] = None,
                 redir_url: Optional[pulumi.Input[str]] = None,
                 rewrite_ip_uri_ui: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 service_restriction: Optional[pulumi.Input[str]] = None,
                 skip_check_for_browser: Optional[pulumi.Input[str]] = None,
                 skip_check_for_unsupported_os: Optional[pulumi.Input[str]] = None,
                 smb_max_version: Optional[pulumi.Input[str]] = None,
                 smb_min_version: Optional[pulumi.Input[str]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 split_dns: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitDnArgs']]]] = None,
                 split_tunneling: Optional[pulumi.Input[str]] = None,
                 split_tunneling_routing_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitTunnelingRoutingAddressArgs']]]] = None,
                 split_tunneling_routing_negate: Optional[pulumi.Input[str]] = None,
                 theme: Optional[pulumi.Input[str]] = None,
                 transform_backward_slashes: Optional[pulumi.Input[str]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 user_bookmark: Optional[pulumi.Input[str]] = None,
                 user_group_bookmark: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_mode: Optional[pulumi.Input[str]] = None,
                 windows_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpnSslWebPortal resource.
        """
        if allow_user_access is not None:
            pulumi.set(__self__, "allow_user_access", allow_user_access)
        if auto_connect is not None:
            pulumi.set(__self__, "auto_connect", auto_connect)
        if bookmark_groups is not None:
            pulumi.set(__self__, "bookmark_groups", bookmark_groups)
        if client_src_range is not None:
            pulumi.set(__self__, "client_src_range", client_src_range)
        if clipboard is not None:
            pulumi.set(__self__, "clipboard", clipboard)
        if custom_lang is not None:
            pulumi.set(__self__, "custom_lang", custom_lang)
        if customize_forticlient_download_url is not None:
            pulumi.set(__self__, "customize_forticlient_download_url", customize_forticlient_download_url)
        if default_window_height is not None:
            pulumi.set(__self__, "default_window_height", default_window_height)
        if default_window_width is not None:
            pulumi.set(__self__, "default_window_width", default_window_width)
        if dhcp6_ra_linkaddr is not None:
            pulumi.set(__self__, "dhcp6_ra_linkaddr", dhcp6_ra_linkaddr)
        if dhcp_ip_overlap is not None:
            pulumi.set(__self__, "dhcp_ip_overlap", dhcp_ip_overlap)
        if dhcp_ra_giaddr is not None:
            pulumi.set(__self__, "dhcp_ra_giaddr", dhcp_ra_giaddr)
        if display_bookmark is not None:
            pulumi.set(__self__, "display_bookmark", display_bookmark)
        if display_connection_tools is not None:
            pulumi.set(__self__, "display_connection_tools", display_connection_tools)
        if display_history is not None:
            pulumi.set(__self__, "display_history", display_history)
        if display_status is not None:
            pulumi.set(__self__, "display_status", display_status)
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if exclusive_routing is not None:
            pulumi.set(__self__, "exclusive_routing", exclusive_routing)
        if forticlient_download is not None:
            pulumi.set(__self__, "forticlient_download", forticlient_download)
        if forticlient_download_method is not None:
            pulumi.set(__self__, "forticlient_download_method", forticlient_download_method)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if heading is not None:
            pulumi.set(__self__, "heading", heading)
        if hide_sso_credential is not None:
            pulumi.set(__self__, "hide_sso_credential", hide_sso_credential)
        if host_check is not None:
            pulumi.set(__self__, "host_check", host_check)
        if host_check_interval is not None:
            pulumi.set(__self__, "host_check_interval", host_check_interval)
        if host_check_policies is not None:
            pulumi.set(__self__, "host_check_policies", host_check_policies)
        if ip_mode is not None:
            pulumi.set(__self__, "ip_mode", ip_mode)
        if ip_pools is not None:
            pulumi.set(__self__, "ip_pools", ip_pools)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)
        if ipv6_exclusive_routing is not None:
            pulumi.set(__self__, "ipv6_exclusive_routing", ipv6_exclusive_routing)
        if ipv6_pools is not None:
            pulumi.set(__self__, "ipv6_pools", ipv6_pools)
        if ipv6_service_restriction is not None:
            pulumi.set(__self__, "ipv6_service_restriction", ipv6_service_restriction)
        if ipv6_split_tunneling is not None:
            pulumi.set(__self__, "ipv6_split_tunneling", ipv6_split_tunneling)
        if ipv6_split_tunneling_routing_addresses is not None:
            pulumi.set(__self__, "ipv6_split_tunneling_routing_addresses", ipv6_split_tunneling_routing_addresses)
        if ipv6_split_tunneling_routing_negate is not None:
            pulumi.set(__self__, "ipv6_split_tunneling_routing_negate", ipv6_split_tunneling_routing_negate)
        if ipv6_tunnel_mode is not None:
            pulumi.set(__self__, "ipv6_tunnel_mode", ipv6_tunnel_mode)
        if ipv6_wins_server1 is not None:
            pulumi.set(__self__, "ipv6_wins_server1", ipv6_wins_server1)
        if ipv6_wins_server2 is not None:
            pulumi.set(__self__, "ipv6_wins_server2", ipv6_wins_server2)
        if keep_alive is not None:
            pulumi.set(__self__, "keep_alive", keep_alive)
        if landing_page is not None:
            pulumi.set(__self__, "landing_page", landing_page)
        if landing_page_mode is not None:
            pulumi.set(__self__, "landing_page_mode", landing_page_mode)
        if limit_user_logins is not None:
            pulumi.set(__self__, "limit_user_logins", limit_user_logins)
        if mac_addr_action is not None:
            pulumi.set(__self__, "mac_addr_action", mac_addr_action)
        if mac_addr_check is not None:
            pulumi.set(__self__, "mac_addr_check", mac_addr_check)
        if mac_addr_check_rules is not None:
            pulumi.set(__self__, "mac_addr_check_rules", mac_addr_check_rules)
        if macos_forticlient_download_url is not None:
            pulumi.set(__self__, "macos_forticlient_download_url", macos_forticlient_download_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_check is not None:
            pulumi.set(__self__, "os_check", os_check)
        if os_check_lists is not None:
            pulumi.set(__self__, "os_check_lists", os_check_lists)
        if prefer_ipv6_dns is not None:
            pulumi.set(__self__, "prefer_ipv6_dns", prefer_ipv6_dns)
        if redir_url is not None:
            pulumi.set(__self__, "redir_url", redir_url)
        if rewrite_ip_uri_ui is not None:
            pulumi.set(__self__, "rewrite_ip_uri_ui", rewrite_ip_uri_ui)
        if save_password is not None:
            pulumi.set(__self__, "save_password", save_password)
        if service_restriction is not None:
            pulumi.set(__self__, "service_restriction", service_restriction)
        if skip_check_for_browser is not None:
            pulumi.set(__self__, "skip_check_for_browser", skip_check_for_browser)
        if skip_check_for_unsupported_os is not None:
            pulumi.set(__self__, "skip_check_for_unsupported_os", skip_check_for_unsupported_os)
        if smb_max_version is not None:
            pulumi.set(__self__, "smb_max_version", smb_max_version)
        if smb_min_version is not None:
            pulumi.set(__self__, "smb_min_version", smb_min_version)
        if smb_ntlmv1_auth is not None:
            pulumi.set(__self__, "smb_ntlmv1_auth", smb_ntlmv1_auth)
        if smbv1 is not None:
            pulumi.set(__self__, "smbv1", smbv1)
        if split_dns is not None:
            pulumi.set(__self__, "split_dns", split_dns)
        if split_tunneling is not None:
            pulumi.set(__self__, "split_tunneling", split_tunneling)
        if split_tunneling_routing_addresses is not None:
            pulumi.set(__self__, "split_tunneling_routing_addresses", split_tunneling_routing_addresses)
        if split_tunneling_routing_negate is not None:
            pulumi.set(__self__, "split_tunneling_routing_negate", split_tunneling_routing_negate)
        if theme is not None:
            pulumi.set(__self__, "theme", theme)
        if transform_backward_slashes is not None:
            pulumi.set(__self__, "transform_backward_slashes", transform_backward_slashes)
        if tunnel_mode is not None:
            pulumi.set(__self__, "tunnel_mode", tunnel_mode)
        if use_sdwan is not None:
            pulumi.set(__self__, "use_sdwan", use_sdwan)
        if user_bookmark is not None:
            pulumi.set(__self__, "user_bookmark", user_bookmark)
        if user_group_bookmark is not None:
            pulumi.set(__self__, "user_group_bookmark", user_group_bookmark)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if web_mode is not None:
            pulumi.set(__self__, "web_mode", web_mode)
        if windows_forticlient_download_url is not None:
            pulumi.set(__self__, "windows_forticlient_download_url", windows_forticlient_download_url)
        if wins_server1 is not None:
            pulumi.set(__self__, "wins_server1", wins_server1)
        if wins_server2 is not None:
            pulumi.set(__self__, "wins_server2", wins_server2)

    @property
    @pulumi.getter(name="allowUserAccess")
    def allow_user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_user_access")

    @allow_user_access.setter
    def allow_user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_user_access", value)

    @property
    @pulumi.getter(name="autoConnect")
    def auto_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_connect")

    @auto_connect.setter
    def auto_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_connect", value)

    @property
    @pulumi.getter(name="bookmarkGroups")
    def bookmark_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupArgs']]]]:
        return pulumi.get(self, "bookmark_groups")

    @bookmark_groups.setter
    def bookmark_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupArgs']]]]):
        pulumi.set(self, "bookmark_groups", value)

    @property
    @pulumi.getter(name="clientSrcRange")
    def client_src_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_src_range")

    @client_src_range.setter
    def client_src_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_src_range", value)

    @property
    @pulumi.getter
    def clipboard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clipboard")

    @clipboard.setter
    def clipboard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clipboard", value)

    @property
    @pulumi.getter(name="customLang")
    def custom_lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_lang")

    @custom_lang.setter
    def custom_lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_lang", value)

    @property
    @pulumi.getter(name="customizeForticlientDownloadUrl")
    def customize_forticlient_download_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customize_forticlient_download_url")

    @customize_forticlient_download_url.setter
    def customize_forticlient_download_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customize_forticlient_download_url", value)

    @property
    @pulumi.getter(name="defaultWindowHeight")
    def default_window_height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_window_height")

    @default_window_height.setter
    def default_window_height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_window_height", value)

    @property
    @pulumi.getter(name="defaultWindowWidth")
    def default_window_width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_window_width")

    @default_window_width.setter
    def default_window_width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_window_width", value)

    @property
    @pulumi.getter(name="dhcp6RaLinkaddr")
    def dhcp6_ra_linkaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_ra_linkaddr")

    @dhcp6_ra_linkaddr.setter
    def dhcp6_ra_linkaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_ra_linkaddr", value)

    @property
    @pulumi.getter(name="dhcpIpOverlap")
    def dhcp_ip_overlap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_ip_overlap")

    @dhcp_ip_overlap.setter
    def dhcp_ip_overlap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ip_overlap", value)

    @property
    @pulumi.getter(name="dhcpRaGiaddr")
    def dhcp_ra_giaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_ra_giaddr")

    @dhcp_ra_giaddr.setter
    def dhcp_ra_giaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ra_giaddr", value)

    @property
    @pulumi.getter(name="displayBookmark")
    def display_bookmark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_bookmark")

    @display_bookmark.setter
    def display_bookmark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_bookmark", value)

    @property
    @pulumi.getter(name="displayConnectionTools")
    def display_connection_tools(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_connection_tools")

    @display_connection_tools.setter
    def display_connection_tools(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_connection_tools", value)

    @property
    @pulumi.getter(name="displayHistory")
    def display_history(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_history")

    @display_history.setter
    def display_history(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_history", value)

    @property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_status")

    @display_status.setter
    def display_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_status", value)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="exclusiveRouting")
    def exclusive_routing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclusive_routing")

    @exclusive_routing.setter
    def exclusive_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclusive_routing", value)

    @property
    @pulumi.getter(name="forticlientDownload")
    def forticlient_download(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_download")

    @forticlient_download.setter
    def forticlient_download(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_download", value)

    @property
    @pulumi.getter(name="forticlientDownloadMethod")
    def forticlient_download_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_download_method")

    @forticlient_download_method.setter
    def forticlient_download_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_download_method", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def heading(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "heading")

    @heading.setter
    def heading(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "heading", value)

    @property
    @pulumi.getter(name="hideSsoCredential")
    def hide_sso_credential(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hide_sso_credential")

    @hide_sso_credential.setter
    def hide_sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hide_sso_credential", value)

    @property
    @pulumi.getter(name="hostCheck")
    def host_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_check")

    @host_check.setter
    def host_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_check", value)

    @property
    @pulumi.getter(name="hostCheckInterval")
    def host_check_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "host_check_interval")

    @host_check_interval.setter
    def host_check_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_check_interval", value)

    @property
    @pulumi.getter(name="hostCheckPolicies")
    def host_check_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalHostCheckPolicyArgs']]]]:
        return pulumi.get(self, "host_check_policies")

    @host_check_policies.setter
    def host_check_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalHostCheckPolicyArgs']]]]):
        pulumi.set(self, "host_check_policies", value)

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_mode")

    @ip_mode.setter
    def ip_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mode", value)

    @property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpPoolArgs']]]]:
        return pulumi.get(self, "ip_pools")

    @ip_pools.setter
    def ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpPoolArgs']]]]):
        pulumi.set(self, "ip_pools", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)

    @property
    @pulumi.getter(name="ipv6ExclusiveRouting")
    def ipv6_exclusive_routing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_exclusive_routing")

    @ipv6_exclusive_routing.setter
    def ipv6_exclusive_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_exclusive_routing", value)

    @property
    @pulumi.getter(name="ipv6Pools")
    def ipv6_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6PoolArgs']]]]:
        return pulumi.get(self, "ipv6_pools")

    @ipv6_pools.setter
    def ipv6_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6PoolArgs']]]]):
        pulumi.set(self, "ipv6_pools", value)

    @property
    @pulumi.getter(name="ipv6ServiceRestriction")
    def ipv6_service_restriction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_service_restriction")

    @ipv6_service_restriction.setter
    def ipv6_service_restriction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_service_restriction", value)

    @property
    @pulumi.getter(name="ipv6SplitTunneling")
    def ipv6_split_tunneling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_split_tunneling")

    @ipv6_split_tunneling.setter
    def ipv6_split_tunneling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_tunneling", value)

    @property
    @pulumi.getter(name="ipv6SplitTunnelingRoutingAddresses")
    def ipv6_split_tunneling_routing_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs']]]]:
        return pulumi.get(self, "ipv6_split_tunneling_routing_addresses")

    @ipv6_split_tunneling_routing_addresses.setter
    def ipv6_split_tunneling_routing_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs']]]]):
        pulumi.set(self, "ipv6_split_tunneling_routing_addresses", value)

    @property
    @pulumi.getter(name="ipv6SplitTunnelingRoutingNegate")
    def ipv6_split_tunneling_routing_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_split_tunneling_routing_negate")

    @ipv6_split_tunneling_routing_negate.setter
    def ipv6_split_tunneling_routing_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_tunneling_routing_negate", value)

    @property
    @pulumi.getter(name="ipv6TunnelMode")
    def ipv6_tunnel_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_tunnel_mode")

    @ipv6_tunnel_mode.setter
    def ipv6_tunnel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_tunnel_mode", value)

    @property
    @pulumi.getter(name="ipv6WinsServer1")
    def ipv6_wins_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_wins_server1")

    @ipv6_wins_server1.setter
    def ipv6_wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_wins_server1", value)

    @property
    @pulumi.getter(name="ipv6WinsServer2")
    def ipv6_wins_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_wins_server2")

    @ipv6_wins_server2.setter
    def ipv6_wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_wins_server2", value)

    @property
    @pulumi.getter(name="keepAlive")
    def keep_alive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_alive")

    @keep_alive.setter
    def keep_alive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_alive", value)

    @property
    @pulumi.getter(name="landingPage")
    def landing_page(self) -> Optional[pulumi.Input['VpnSslWebPortalLandingPageArgs']]:
        return pulumi.get(self, "landing_page")

    @landing_page.setter
    def landing_page(self, value: Optional[pulumi.Input['VpnSslWebPortalLandingPageArgs']]):
        pulumi.set(self, "landing_page", value)

    @property
    @pulumi.getter(name="landingPageMode")
    def landing_page_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "landing_page_mode")

    @landing_page_mode.setter
    def landing_page_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "landing_page_mode", value)

    @property
    @pulumi.getter(name="limitUserLogins")
    def limit_user_logins(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "limit_user_logins")

    @limit_user_logins.setter
    def limit_user_logins(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit_user_logins", value)

    @property
    @pulumi.getter(name="macAddrAction")
    def mac_addr_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_addr_action")

    @mac_addr_action.setter
    def mac_addr_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_addr_action", value)

    @property
    @pulumi.getter(name="macAddrCheck")
    def mac_addr_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_addr_check")

    @mac_addr_check.setter
    def mac_addr_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_addr_check", value)

    @property
    @pulumi.getter(name="macAddrCheckRules")
    def mac_addr_check_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleArgs']]]]:
        return pulumi.get(self, "mac_addr_check_rules")

    @mac_addr_check_rules.setter
    def mac_addr_check_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleArgs']]]]):
        pulumi.set(self, "mac_addr_check_rules", value)

    @property
    @pulumi.getter(name="macosForticlientDownloadUrl")
    def macos_forticlient_download_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "macos_forticlient_download_url")

    @macos_forticlient_download_url.setter
    def macos_forticlient_download_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macos_forticlient_download_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osCheck")
    def os_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_check")

    @os_check.setter
    def os_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_check", value)

    @property
    @pulumi.getter(name="osCheckLists")
    def os_check_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalOsCheckListArgs']]]]:
        return pulumi.get(self, "os_check_lists")

    @os_check_lists.setter
    def os_check_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalOsCheckListArgs']]]]):
        pulumi.set(self, "os_check_lists", value)

    @property
    @pulumi.getter(name="preferIpv6Dns")
    def prefer_ipv6_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefer_ipv6_dns")

    @prefer_ipv6_dns.setter
    def prefer_ipv6_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefer_ipv6_dns", value)

    @property
    @pulumi.getter(name="redirUrl")
    def redir_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redir_url")

    @redir_url.setter
    def redir_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redir_url", value)

    @property
    @pulumi.getter(name="rewriteIpUriUi")
    def rewrite_ip_uri_ui(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rewrite_ip_uri_ui")

    @rewrite_ip_uri_ui.setter
    def rewrite_ip_uri_ui(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_ip_uri_ui", value)

    @property
    @pulumi.getter(name="savePassword")
    def save_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "save_password")

    @save_password.setter
    def save_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "save_password", value)

    @property
    @pulumi.getter(name="serviceRestriction")
    def service_restriction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_restriction")

    @service_restriction.setter
    def service_restriction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_restriction", value)

    @property
    @pulumi.getter(name="skipCheckForBrowser")
    def skip_check_for_browser(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_check_for_browser")

    @skip_check_for_browser.setter
    def skip_check_for_browser(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_check_for_browser", value)

    @property
    @pulumi.getter(name="skipCheckForUnsupportedOs")
    def skip_check_for_unsupported_os(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_check_for_unsupported_os")

    @skip_check_for_unsupported_os.setter
    def skip_check_for_unsupported_os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_check_for_unsupported_os", value)

    @property
    @pulumi.getter(name="smbMaxVersion")
    def smb_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smb_max_version")

    @smb_max_version.setter
    def smb_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smb_max_version", value)

    @property
    @pulumi.getter(name="smbMinVersion")
    def smb_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smb_min_version")

    @smb_min_version.setter
    def smb_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smb_min_version", value)

    @property
    @pulumi.getter(name="smbNtlmv1Auth")
    def smb_ntlmv1_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smb_ntlmv1_auth")

    @smb_ntlmv1_auth.setter
    def smb_ntlmv1_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smb_ntlmv1_auth", value)

    @property
    @pulumi.getter
    def smbv1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smbv1")

    @smbv1.setter
    def smbv1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smbv1", value)

    @property
    @pulumi.getter(name="splitDns")
    def split_dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitDnArgs']]]]:
        return pulumi.get(self, "split_dns")

    @split_dns.setter
    def split_dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitDnArgs']]]]):
        pulumi.set(self, "split_dns", value)

    @property
    @pulumi.getter(name="splitTunneling")
    def split_tunneling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling")

    @split_tunneling.setter
    def split_tunneling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling", value)

    @property
    @pulumi.getter(name="splitTunnelingRoutingAddresses")
    def split_tunneling_routing_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitTunnelingRoutingAddressArgs']]]]:
        return pulumi.get(self, "split_tunneling_routing_addresses")

    @split_tunneling_routing_addresses.setter
    def split_tunneling_routing_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitTunnelingRoutingAddressArgs']]]]):
        pulumi.set(self, "split_tunneling_routing_addresses", value)

    @property
    @pulumi.getter(name="splitTunnelingRoutingNegate")
    def split_tunneling_routing_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling_routing_negate")

    @split_tunneling_routing_negate.setter
    def split_tunneling_routing_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling_routing_negate", value)

    @property
    @pulumi.getter
    def theme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "theme")

    @theme.setter
    def theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "theme", value)

    @property
    @pulumi.getter(name="transformBackwardSlashes")
    def transform_backward_slashes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transform_backward_slashes")

    @transform_backward_slashes.setter
    def transform_backward_slashes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transform_backward_slashes", value)

    @property
    @pulumi.getter(name="tunnelMode")
    def tunnel_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_mode")

    @tunnel_mode.setter
    def tunnel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_mode", value)

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_sdwan")

    @use_sdwan.setter
    def use_sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_sdwan", value)

    @property
    @pulumi.getter(name="userBookmark")
    def user_bookmark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_bookmark")

    @user_bookmark.setter
    def user_bookmark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_bookmark", value)

    @property
    @pulumi.getter(name="userGroupBookmark")
    def user_group_bookmark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_group_bookmark")

    @user_group_bookmark.setter
    def user_group_bookmark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_group_bookmark", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webMode")
    def web_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_mode")

    @web_mode.setter
    def web_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_mode", value)

    @property
    @pulumi.getter(name="windowsForticlientDownloadUrl")
    def windows_forticlient_download_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "windows_forticlient_download_url")

    @windows_forticlient_download_url.setter
    def windows_forticlient_download_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "windows_forticlient_download_url", value)

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wins_server1")

    @wins_server1.setter
    def wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server1", value)

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wins_server2")

    @wins_server2.setter
    def wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server2", value)


@pulumi.input_type
class _VpnSslWebPortalState:
    def __init__(__self__, *,
                 allow_user_access: Optional[pulumi.Input[str]] = None,
                 auto_connect: Optional[pulumi.Input[str]] = None,
                 bookmark_groups: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupArgs']]]] = None,
                 client_src_range: Optional[pulumi.Input[str]] = None,
                 clipboard: Optional[pulumi.Input[str]] = None,
                 custom_lang: Optional[pulumi.Input[str]] = None,
                 customize_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 default_window_height: Optional[pulumi.Input[int]] = None,
                 default_window_width: Optional[pulumi.Input[int]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ip_overlap: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 display_bookmark: Optional[pulumi.Input[str]] = None,
                 display_connection_tools: Optional[pulumi.Input[str]] = None,
                 display_history: Optional[pulumi.Input[str]] = None,
                 display_status: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclusive_routing: Optional[pulumi.Input[str]] = None,
                 forticlient_download: Optional[pulumi.Input[str]] = None,
                 forticlient_download_method: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 heading: Optional[pulumi.Input[str]] = None,
                 hide_sso_credential: Optional[pulumi.Input[str]] = None,
                 host_check: Optional[pulumi.Input[str]] = None,
                 host_check_interval: Optional[pulumi.Input[int]] = None,
                 host_check_policies: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalHostCheckPolicyArgs']]]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpPoolArgs']]]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_exclusive_routing: Optional[pulumi.Input[str]] = None,
                 ipv6_pools: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6PoolArgs']]]] = None,
                 ipv6_service_restriction: Optional[pulumi.Input[str]] = None,
                 ipv6_split_tunneling: Optional[pulumi.Input[str]] = None,
                 ipv6_split_tunneling_routing_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs']]]] = None,
                 ipv6_split_tunneling_routing_negate: Optional[pulumi.Input[str]] = None,
                 ipv6_tunnel_mode: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server2: Optional[pulumi.Input[str]] = None,
                 keep_alive: Optional[pulumi.Input[str]] = None,
                 landing_page: Optional[pulumi.Input['VpnSslWebPortalLandingPageArgs']] = None,
                 landing_page_mode: Optional[pulumi.Input[str]] = None,
                 limit_user_logins: Optional[pulumi.Input[str]] = None,
                 mac_addr_action: Optional[pulumi.Input[str]] = None,
                 mac_addr_check: Optional[pulumi.Input[str]] = None,
                 mac_addr_check_rules: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleArgs']]]] = None,
                 macos_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_check: Optional[pulumi.Input[str]] = None,
                 os_check_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalOsCheckListArgs']]]] = None,
                 prefer_ipv6_dns: Optional[pulumi.Input[str]] = None,
                 redir_url: Optional[pulumi.Input[str]] = None,
                 rewrite_ip_uri_ui: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 service_restriction: Optional[pulumi.Input[str]] = None,
                 skip_check_for_browser: Optional[pulumi.Input[str]] = None,
                 skip_check_for_unsupported_os: Optional[pulumi.Input[str]] = None,
                 smb_max_version: Optional[pulumi.Input[str]] = None,
                 smb_min_version: Optional[pulumi.Input[str]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 split_dns: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitDnArgs']]]] = None,
                 split_tunneling: Optional[pulumi.Input[str]] = None,
                 split_tunneling_routing_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitTunnelingRoutingAddressArgs']]]] = None,
                 split_tunneling_routing_negate: Optional[pulumi.Input[str]] = None,
                 theme: Optional[pulumi.Input[str]] = None,
                 transform_backward_slashes: Optional[pulumi.Input[str]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 user_bookmark: Optional[pulumi.Input[str]] = None,
                 user_group_bookmark: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_mode: Optional[pulumi.Input[str]] = None,
                 windows_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpnSslWebPortal resources.
        """
        if allow_user_access is not None:
            pulumi.set(__self__, "allow_user_access", allow_user_access)
        if auto_connect is not None:
            pulumi.set(__self__, "auto_connect", auto_connect)
        if bookmark_groups is not None:
            pulumi.set(__self__, "bookmark_groups", bookmark_groups)
        if client_src_range is not None:
            pulumi.set(__self__, "client_src_range", client_src_range)
        if clipboard is not None:
            pulumi.set(__self__, "clipboard", clipboard)
        if custom_lang is not None:
            pulumi.set(__self__, "custom_lang", custom_lang)
        if customize_forticlient_download_url is not None:
            pulumi.set(__self__, "customize_forticlient_download_url", customize_forticlient_download_url)
        if default_window_height is not None:
            pulumi.set(__self__, "default_window_height", default_window_height)
        if default_window_width is not None:
            pulumi.set(__self__, "default_window_width", default_window_width)
        if dhcp6_ra_linkaddr is not None:
            pulumi.set(__self__, "dhcp6_ra_linkaddr", dhcp6_ra_linkaddr)
        if dhcp_ip_overlap is not None:
            pulumi.set(__self__, "dhcp_ip_overlap", dhcp_ip_overlap)
        if dhcp_ra_giaddr is not None:
            pulumi.set(__self__, "dhcp_ra_giaddr", dhcp_ra_giaddr)
        if display_bookmark is not None:
            pulumi.set(__self__, "display_bookmark", display_bookmark)
        if display_connection_tools is not None:
            pulumi.set(__self__, "display_connection_tools", display_connection_tools)
        if display_history is not None:
            pulumi.set(__self__, "display_history", display_history)
        if display_status is not None:
            pulumi.set(__self__, "display_status", display_status)
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if exclusive_routing is not None:
            pulumi.set(__self__, "exclusive_routing", exclusive_routing)
        if forticlient_download is not None:
            pulumi.set(__self__, "forticlient_download", forticlient_download)
        if forticlient_download_method is not None:
            pulumi.set(__self__, "forticlient_download_method", forticlient_download_method)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if heading is not None:
            pulumi.set(__self__, "heading", heading)
        if hide_sso_credential is not None:
            pulumi.set(__self__, "hide_sso_credential", hide_sso_credential)
        if host_check is not None:
            pulumi.set(__self__, "host_check", host_check)
        if host_check_interval is not None:
            pulumi.set(__self__, "host_check_interval", host_check_interval)
        if host_check_policies is not None:
            pulumi.set(__self__, "host_check_policies", host_check_policies)
        if ip_mode is not None:
            pulumi.set(__self__, "ip_mode", ip_mode)
        if ip_pools is not None:
            pulumi.set(__self__, "ip_pools", ip_pools)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)
        if ipv6_exclusive_routing is not None:
            pulumi.set(__self__, "ipv6_exclusive_routing", ipv6_exclusive_routing)
        if ipv6_pools is not None:
            pulumi.set(__self__, "ipv6_pools", ipv6_pools)
        if ipv6_service_restriction is not None:
            pulumi.set(__self__, "ipv6_service_restriction", ipv6_service_restriction)
        if ipv6_split_tunneling is not None:
            pulumi.set(__self__, "ipv6_split_tunneling", ipv6_split_tunneling)
        if ipv6_split_tunneling_routing_addresses is not None:
            pulumi.set(__self__, "ipv6_split_tunneling_routing_addresses", ipv6_split_tunneling_routing_addresses)
        if ipv6_split_tunneling_routing_negate is not None:
            pulumi.set(__self__, "ipv6_split_tunneling_routing_negate", ipv6_split_tunneling_routing_negate)
        if ipv6_tunnel_mode is not None:
            pulumi.set(__self__, "ipv6_tunnel_mode", ipv6_tunnel_mode)
        if ipv6_wins_server1 is not None:
            pulumi.set(__self__, "ipv6_wins_server1", ipv6_wins_server1)
        if ipv6_wins_server2 is not None:
            pulumi.set(__self__, "ipv6_wins_server2", ipv6_wins_server2)
        if keep_alive is not None:
            pulumi.set(__self__, "keep_alive", keep_alive)
        if landing_page is not None:
            pulumi.set(__self__, "landing_page", landing_page)
        if landing_page_mode is not None:
            pulumi.set(__self__, "landing_page_mode", landing_page_mode)
        if limit_user_logins is not None:
            pulumi.set(__self__, "limit_user_logins", limit_user_logins)
        if mac_addr_action is not None:
            pulumi.set(__self__, "mac_addr_action", mac_addr_action)
        if mac_addr_check is not None:
            pulumi.set(__self__, "mac_addr_check", mac_addr_check)
        if mac_addr_check_rules is not None:
            pulumi.set(__self__, "mac_addr_check_rules", mac_addr_check_rules)
        if macos_forticlient_download_url is not None:
            pulumi.set(__self__, "macos_forticlient_download_url", macos_forticlient_download_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_check is not None:
            pulumi.set(__self__, "os_check", os_check)
        if os_check_lists is not None:
            pulumi.set(__self__, "os_check_lists", os_check_lists)
        if prefer_ipv6_dns is not None:
            pulumi.set(__self__, "prefer_ipv6_dns", prefer_ipv6_dns)
        if redir_url is not None:
            pulumi.set(__self__, "redir_url", redir_url)
        if rewrite_ip_uri_ui is not None:
            pulumi.set(__self__, "rewrite_ip_uri_ui", rewrite_ip_uri_ui)
        if save_password is not None:
            pulumi.set(__self__, "save_password", save_password)
        if service_restriction is not None:
            pulumi.set(__self__, "service_restriction", service_restriction)
        if skip_check_for_browser is not None:
            pulumi.set(__self__, "skip_check_for_browser", skip_check_for_browser)
        if skip_check_for_unsupported_os is not None:
            pulumi.set(__self__, "skip_check_for_unsupported_os", skip_check_for_unsupported_os)
        if smb_max_version is not None:
            pulumi.set(__self__, "smb_max_version", smb_max_version)
        if smb_min_version is not None:
            pulumi.set(__self__, "smb_min_version", smb_min_version)
        if smb_ntlmv1_auth is not None:
            pulumi.set(__self__, "smb_ntlmv1_auth", smb_ntlmv1_auth)
        if smbv1 is not None:
            pulumi.set(__self__, "smbv1", smbv1)
        if split_dns is not None:
            pulumi.set(__self__, "split_dns", split_dns)
        if split_tunneling is not None:
            pulumi.set(__self__, "split_tunneling", split_tunneling)
        if split_tunneling_routing_addresses is not None:
            pulumi.set(__self__, "split_tunneling_routing_addresses", split_tunneling_routing_addresses)
        if split_tunneling_routing_negate is not None:
            pulumi.set(__self__, "split_tunneling_routing_negate", split_tunneling_routing_negate)
        if theme is not None:
            pulumi.set(__self__, "theme", theme)
        if transform_backward_slashes is not None:
            pulumi.set(__self__, "transform_backward_slashes", transform_backward_slashes)
        if tunnel_mode is not None:
            pulumi.set(__self__, "tunnel_mode", tunnel_mode)
        if use_sdwan is not None:
            pulumi.set(__self__, "use_sdwan", use_sdwan)
        if user_bookmark is not None:
            pulumi.set(__self__, "user_bookmark", user_bookmark)
        if user_group_bookmark is not None:
            pulumi.set(__self__, "user_group_bookmark", user_group_bookmark)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if web_mode is not None:
            pulumi.set(__self__, "web_mode", web_mode)
        if windows_forticlient_download_url is not None:
            pulumi.set(__self__, "windows_forticlient_download_url", windows_forticlient_download_url)
        if wins_server1 is not None:
            pulumi.set(__self__, "wins_server1", wins_server1)
        if wins_server2 is not None:
            pulumi.set(__self__, "wins_server2", wins_server2)

    @property
    @pulumi.getter(name="allowUserAccess")
    def allow_user_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_user_access")

    @allow_user_access.setter
    def allow_user_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_user_access", value)

    @property
    @pulumi.getter(name="autoConnect")
    def auto_connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_connect")

    @auto_connect.setter
    def auto_connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_connect", value)

    @property
    @pulumi.getter(name="bookmarkGroups")
    def bookmark_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupArgs']]]]:
        return pulumi.get(self, "bookmark_groups")

    @bookmark_groups.setter
    def bookmark_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupArgs']]]]):
        pulumi.set(self, "bookmark_groups", value)

    @property
    @pulumi.getter(name="clientSrcRange")
    def client_src_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_src_range")

    @client_src_range.setter
    def client_src_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_src_range", value)

    @property
    @pulumi.getter
    def clipboard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clipboard")

    @clipboard.setter
    def clipboard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clipboard", value)

    @property
    @pulumi.getter(name="customLang")
    def custom_lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_lang")

    @custom_lang.setter
    def custom_lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_lang", value)

    @property
    @pulumi.getter(name="customizeForticlientDownloadUrl")
    def customize_forticlient_download_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customize_forticlient_download_url")

    @customize_forticlient_download_url.setter
    def customize_forticlient_download_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customize_forticlient_download_url", value)

    @property
    @pulumi.getter(name="defaultWindowHeight")
    def default_window_height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_window_height")

    @default_window_height.setter
    def default_window_height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_window_height", value)

    @property
    @pulumi.getter(name="defaultWindowWidth")
    def default_window_width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_window_width")

    @default_window_width.setter
    def default_window_width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_window_width", value)

    @property
    @pulumi.getter(name="dhcp6RaLinkaddr")
    def dhcp6_ra_linkaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_ra_linkaddr")

    @dhcp6_ra_linkaddr.setter
    def dhcp6_ra_linkaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_ra_linkaddr", value)

    @property
    @pulumi.getter(name="dhcpIpOverlap")
    def dhcp_ip_overlap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_ip_overlap")

    @dhcp_ip_overlap.setter
    def dhcp_ip_overlap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ip_overlap", value)

    @property
    @pulumi.getter(name="dhcpRaGiaddr")
    def dhcp_ra_giaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_ra_giaddr")

    @dhcp_ra_giaddr.setter
    def dhcp_ra_giaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ra_giaddr", value)

    @property
    @pulumi.getter(name="displayBookmark")
    def display_bookmark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_bookmark")

    @display_bookmark.setter
    def display_bookmark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_bookmark", value)

    @property
    @pulumi.getter(name="displayConnectionTools")
    def display_connection_tools(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_connection_tools")

    @display_connection_tools.setter
    def display_connection_tools(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_connection_tools", value)

    @property
    @pulumi.getter(name="displayHistory")
    def display_history(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_history")

    @display_history.setter
    def display_history(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_history", value)

    @property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_status")

    @display_status.setter
    def display_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_status", value)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="exclusiveRouting")
    def exclusive_routing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclusive_routing")

    @exclusive_routing.setter
    def exclusive_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclusive_routing", value)

    @property
    @pulumi.getter(name="forticlientDownload")
    def forticlient_download(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_download")

    @forticlient_download.setter
    def forticlient_download(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_download", value)

    @property
    @pulumi.getter(name="forticlientDownloadMethod")
    def forticlient_download_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_download_method")

    @forticlient_download_method.setter
    def forticlient_download_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_download_method", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def heading(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "heading")

    @heading.setter
    def heading(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "heading", value)

    @property
    @pulumi.getter(name="hideSsoCredential")
    def hide_sso_credential(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hide_sso_credential")

    @hide_sso_credential.setter
    def hide_sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hide_sso_credential", value)

    @property
    @pulumi.getter(name="hostCheck")
    def host_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_check")

    @host_check.setter
    def host_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_check", value)

    @property
    @pulumi.getter(name="hostCheckInterval")
    def host_check_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "host_check_interval")

    @host_check_interval.setter
    def host_check_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_check_interval", value)

    @property
    @pulumi.getter(name="hostCheckPolicies")
    def host_check_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalHostCheckPolicyArgs']]]]:
        return pulumi.get(self, "host_check_policies")

    @host_check_policies.setter
    def host_check_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalHostCheckPolicyArgs']]]]):
        pulumi.set(self, "host_check_policies", value)

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_mode")

    @ip_mode.setter
    def ip_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mode", value)

    @property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpPoolArgs']]]]:
        return pulumi.get(self, "ip_pools")

    @ip_pools.setter
    def ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpPoolArgs']]]]):
        pulumi.set(self, "ip_pools", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)

    @property
    @pulumi.getter(name="ipv6ExclusiveRouting")
    def ipv6_exclusive_routing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_exclusive_routing")

    @ipv6_exclusive_routing.setter
    def ipv6_exclusive_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_exclusive_routing", value)

    @property
    @pulumi.getter(name="ipv6Pools")
    def ipv6_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6PoolArgs']]]]:
        return pulumi.get(self, "ipv6_pools")

    @ipv6_pools.setter
    def ipv6_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6PoolArgs']]]]):
        pulumi.set(self, "ipv6_pools", value)

    @property
    @pulumi.getter(name="ipv6ServiceRestriction")
    def ipv6_service_restriction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_service_restriction")

    @ipv6_service_restriction.setter
    def ipv6_service_restriction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_service_restriction", value)

    @property
    @pulumi.getter(name="ipv6SplitTunneling")
    def ipv6_split_tunneling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_split_tunneling")

    @ipv6_split_tunneling.setter
    def ipv6_split_tunneling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_tunneling", value)

    @property
    @pulumi.getter(name="ipv6SplitTunnelingRoutingAddresses")
    def ipv6_split_tunneling_routing_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs']]]]:
        return pulumi.get(self, "ipv6_split_tunneling_routing_addresses")

    @ipv6_split_tunneling_routing_addresses.setter
    def ipv6_split_tunneling_routing_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs']]]]):
        pulumi.set(self, "ipv6_split_tunneling_routing_addresses", value)

    @property
    @pulumi.getter(name="ipv6SplitTunnelingRoutingNegate")
    def ipv6_split_tunneling_routing_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_split_tunneling_routing_negate")

    @ipv6_split_tunneling_routing_negate.setter
    def ipv6_split_tunneling_routing_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_tunneling_routing_negate", value)

    @property
    @pulumi.getter(name="ipv6TunnelMode")
    def ipv6_tunnel_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_tunnel_mode")

    @ipv6_tunnel_mode.setter
    def ipv6_tunnel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_tunnel_mode", value)

    @property
    @pulumi.getter(name="ipv6WinsServer1")
    def ipv6_wins_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_wins_server1")

    @ipv6_wins_server1.setter
    def ipv6_wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_wins_server1", value)

    @property
    @pulumi.getter(name="ipv6WinsServer2")
    def ipv6_wins_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_wins_server2")

    @ipv6_wins_server2.setter
    def ipv6_wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_wins_server2", value)

    @property
    @pulumi.getter(name="keepAlive")
    def keep_alive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_alive")

    @keep_alive.setter
    def keep_alive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_alive", value)

    @property
    @pulumi.getter(name="landingPage")
    def landing_page(self) -> Optional[pulumi.Input['VpnSslWebPortalLandingPageArgs']]:
        return pulumi.get(self, "landing_page")

    @landing_page.setter
    def landing_page(self, value: Optional[pulumi.Input['VpnSslWebPortalLandingPageArgs']]):
        pulumi.set(self, "landing_page", value)

    @property
    @pulumi.getter(name="landingPageMode")
    def landing_page_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "landing_page_mode")

    @landing_page_mode.setter
    def landing_page_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "landing_page_mode", value)

    @property
    @pulumi.getter(name="limitUserLogins")
    def limit_user_logins(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "limit_user_logins")

    @limit_user_logins.setter
    def limit_user_logins(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit_user_logins", value)

    @property
    @pulumi.getter(name="macAddrAction")
    def mac_addr_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_addr_action")

    @mac_addr_action.setter
    def mac_addr_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_addr_action", value)

    @property
    @pulumi.getter(name="macAddrCheck")
    def mac_addr_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_addr_check")

    @mac_addr_check.setter
    def mac_addr_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_addr_check", value)

    @property
    @pulumi.getter(name="macAddrCheckRules")
    def mac_addr_check_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleArgs']]]]:
        return pulumi.get(self, "mac_addr_check_rules")

    @mac_addr_check_rules.setter
    def mac_addr_check_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleArgs']]]]):
        pulumi.set(self, "mac_addr_check_rules", value)

    @property
    @pulumi.getter(name="macosForticlientDownloadUrl")
    def macos_forticlient_download_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "macos_forticlient_download_url")

    @macos_forticlient_download_url.setter
    def macos_forticlient_download_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macos_forticlient_download_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osCheck")
    def os_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_check")

    @os_check.setter
    def os_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_check", value)

    @property
    @pulumi.getter(name="osCheckLists")
    def os_check_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalOsCheckListArgs']]]]:
        return pulumi.get(self, "os_check_lists")

    @os_check_lists.setter
    def os_check_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalOsCheckListArgs']]]]):
        pulumi.set(self, "os_check_lists", value)

    @property
    @pulumi.getter(name="preferIpv6Dns")
    def prefer_ipv6_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefer_ipv6_dns")

    @prefer_ipv6_dns.setter
    def prefer_ipv6_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefer_ipv6_dns", value)

    @property
    @pulumi.getter(name="redirUrl")
    def redir_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redir_url")

    @redir_url.setter
    def redir_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redir_url", value)

    @property
    @pulumi.getter(name="rewriteIpUriUi")
    def rewrite_ip_uri_ui(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rewrite_ip_uri_ui")

    @rewrite_ip_uri_ui.setter
    def rewrite_ip_uri_ui(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_ip_uri_ui", value)

    @property
    @pulumi.getter(name="savePassword")
    def save_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "save_password")

    @save_password.setter
    def save_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "save_password", value)

    @property
    @pulumi.getter(name="serviceRestriction")
    def service_restriction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_restriction")

    @service_restriction.setter
    def service_restriction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_restriction", value)

    @property
    @pulumi.getter(name="skipCheckForBrowser")
    def skip_check_for_browser(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_check_for_browser")

    @skip_check_for_browser.setter
    def skip_check_for_browser(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_check_for_browser", value)

    @property
    @pulumi.getter(name="skipCheckForUnsupportedOs")
    def skip_check_for_unsupported_os(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_check_for_unsupported_os")

    @skip_check_for_unsupported_os.setter
    def skip_check_for_unsupported_os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_check_for_unsupported_os", value)

    @property
    @pulumi.getter(name="smbMaxVersion")
    def smb_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smb_max_version")

    @smb_max_version.setter
    def smb_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smb_max_version", value)

    @property
    @pulumi.getter(name="smbMinVersion")
    def smb_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smb_min_version")

    @smb_min_version.setter
    def smb_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smb_min_version", value)

    @property
    @pulumi.getter(name="smbNtlmv1Auth")
    def smb_ntlmv1_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smb_ntlmv1_auth")

    @smb_ntlmv1_auth.setter
    def smb_ntlmv1_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smb_ntlmv1_auth", value)

    @property
    @pulumi.getter
    def smbv1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smbv1")

    @smbv1.setter
    def smbv1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smbv1", value)

    @property
    @pulumi.getter(name="splitDns")
    def split_dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitDnArgs']]]]:
        return pulumi.get(self, "split_dns")

    @split_dns.setter
    def split_dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitDnArgs']]]]):
        pulumi.set(self, "split_dns", value)

    @property
    @pulumi.getter(name="splitTunneling")
    def split_tunneling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling")

    @split_tunneling.setter
    def split_tunneling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling", value)

    @property
    @pulumi.getter(name="splitTunnelingRoutingAddresses")
    def split_tunneling_routing_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitTunnelingRoutingAddressArgs']]]]:
        return pulumi.get(self, "split_tunneling_routing_addresses")

    @split_tunneling_routing_addresses.setter
    def split_tunneling_routing_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalSplitTunnelingRoutingAddressArgs']]]]):
        pulumi.set(self, "split_tunneling_routing_addresses", value)

    @property
    @pulumi.getter(name="splitTunnelingRoutingNegate")
    def split_tunneling_routing_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling_routing_negate")

    @split_tunneling_routing_negate.setter
    def split_tunneling_routing_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling_routing_negate", value)

    @property
    @pulumi.getter
    def theme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "theme")

    @theme.setter
    def theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "theme", value)

    @property
    @pulumi.getter(name="transformBackwardSlashes")
    def transform_backward_slashes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transform_backward_slashes")

    @transform_backward_slashes.setter
    def transform_backward_slashes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transform_backward_slashes", value)

    @property
    @pulumi.getter(name="tunnelMode")
    def tunnel_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_mode")

    @tunnel_mode.setter
    def tunnel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_mode", value)

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_sdwan")

    @use_sdwan.setter
    def use_sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_sdwan", value)

    @property
    @pulumi.getter(name="userBookmark")
    def user_bookmark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_bookmark")

    @user_bookmark.setter
    def user_bookmark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_bookmark", value)

    @property
    @pulumi.getter(name="userGroupBookmark")
    def user_group_bookmark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_group_bookmark")

    @user_group_bookmark.setter
    def user_group_bookmark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_group_bookmark", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webMode")
    def web_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_mode")

    @web_mode.setter
    def web_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_mode", value)

    @property
    @pulumi.getter(name="windowsForticlientDownloadUrl")
    def windows_forticlient_download_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "windows_forticlient_download_url")

    @windows_forticlient_download_url.setter
    def windows_forticlient_download_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "windows_forticlient_download_url", value)

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wins_server1")

    @wins_server1.setter
    def wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server1", value)

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wins_server2")

    @wins_server2.setter
    def wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server2", value)


class VpnSslWebPortal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_user_access: Optional[pulumi.Input[str]] = None,
                 auto_connect: Optional[pulumi.Input[str]] = None,
                 bookmark_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalBookmarkGroupArgs']]]]] = None,
                 client_src_range: Optional[pulumi.Input[str]] = None,
                 clipboard: Optional[pulumi.Input[str]] = None,
                 custom_lang: Optional[pulumi.Input[str]] = None,
                 customize_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 default_window_height: Optional[pulumi.Input[int]] = None,
                 default_window_width: Optional[pulumi.Input[int]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ip_overlap: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 display_bookmark: Optional[pulumi.Input[str]] = None,
                 display_connection_tools: Optional[pulumi.Input[str]] = None,
                 display_history: Optional[pulumi.Input[str]] = None,
                 display_status: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclusive_routing: Optional[pulumi.Input[str]] = None,
                 forticlient_download: Optional[pulumi.Input[str]] = None,
                 forticlient_download_method: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 heading: Optional[pulumi.Input[str]] = None,
                 hide_sso_credential: Optional[pulumi.Input[str]] = None,
                 host_check: Optional[pulumi.Input[str]] = None,
                 host_check_interval: Optional[pulumi.Input[int]] = None,
                 host_check_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalHostCheckPolicyArgs']]]]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalIpPoolArgs']]]]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_exclusive_routing: Optional[pulumi.Input[str]] = None,
                 ipv6_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalIpv6PoolArgs']]]]] = None,
                 ipv6_service_restriction: Optional[pulumi.Input[str]] = None,
                 ipv6_split_tunneling: Optional[pulumi.Input[str]] = None,
                 ipv6_split_tunneling_routing_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs']]]]] = None,
                 ipv6_split_tunneling_routing_negate: Optional[pulumi.Input[str]] = None,
                 ipv6_tunnel_mode: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server2: Optional[pulumi.Input[str]] = None,
                 keep_alive: Optional[pulumi.Input[str]] = None,
                 landing_page: Optional[pulumi.Input[pulumi.InputType['VpnSslWebPortalLandingPageArgs']]] = None,
                 landing_page_mode: Optional[pulumi.Input[str]] = None,
                 limit_user_logins: Optional[pulumi.Input[str]] = None,
                 mac_addr_action: Optional[pulumi.Input[str]] = None,
                 mac_addr_check: Optional[pulumi.Input[str]] = None,
                 mac_addr_check_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalMacAddrCheckRuleArgs']]]]] = None,
                 macos_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_check: Optional[pulumi.Input[str]] = None,
                 os_check_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalOsCheckListArgs']]]]] = None,
                 prefer_ipv6_dns: Optional[pulumi.Input[str]] = None,
                 redir_url: Optional[pulumi.Input[str]] = None,
                 rewrite_ip_uri_ui: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 service_restriction: Optional[pulumi.Input[str]] = None,
                 skip_check_for_browser: Optional[pulumi.Input[str]] = None,
                 skip_check_for_unsupported_os: Optional[pulumi.Input[str]] = None,
                 smb_max_version: Optional[pulumi.Input[str]] = None,
                 smb_min_version: Optional[pulumi.Input[str]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 split_dns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalSplitDnArgs']]]]] = None,
                 split_tunneling: Optional[pulumi.Input[str]] = None,
                 split_tunneling_routing_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalSplitTunnelingRoutingAddressArgs']]]]] = None,
                 split_tunneling_routing_negate: Optional[pulumi.Input[str]] = None,
                 theme: Optional[pulumi.Input[str]] = None,
                 transform_backward_slashes: Optional[pulumi.Input[str]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 user_bookmark: Optional[pulumi.Input[str]] = None,
                 user_group_bookmark: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_mode: Optional[pulumi.Input[str]] = None,
                 windows_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VpnSslWebPortal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VpnSslWebPortalArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpnSslWebPortal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpnSslWebPortalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnSslWebPortalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_user_access: Optional[pulumi.Input[str]] = None,
                 auto_connect: Optional[pulumi.Input[str]] = None,
                 bookmark_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalBookmarkGroupArgs']]]]] = None,
                 client_src_range: Optional[pulumi.Input[str]] = None,
                 clipboard: Optional[pulumi.Input[str]] = None,
                 custom_lang: Optional[pulumi.Input[str]] = None,
                 customize_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 default_window_height: Optional[pulumi.Input[int]] = None,
                 default_window_width: Optional[pulumi.Input[int]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ip_overlap: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 display_bookmark: Optional[pulumi.Input[str]] = None,
                 display_connection_tools: Optional[pulumi.Input[str]] = None,
                 display_history: Optional[pulumi.Input[str]] = None,
                 display_status: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclusive_routing: Optional[pulumi.Input[str]] = None,
                 forticlient_download: Optional[pulumi.Input[str]] = None,
                 forticlient_download_method: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 heading: Optional[pulumi.Input[str]] = None,
                 hide_sso_credential: Optional[pulumi.Input[str]] = None,
                 host_check: Optional[pulumi.Input[str]] = None,
                 host_check_interval: Optional[pulumi.Input[int]] = None,
                 host_check_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalHostCheckPolicyArgs']]]]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalIpPoolArgs']]]]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_exclusive_routing: Optional[pulumi.Input[str]] = None,
                 ipv6_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalIpv6PoolArgs']]]]] = None,
                 ipv6_service_restriction: Optional[pulumi.Input[str]] = None,
                 ipv6_split_tunneling: Optional[pulumi.Input[str]] = None,
                 ipv6_split_tunneling_routing_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs']]]]] = None,
                 ipv6_split_tunneling_routing_negate: Optional[pulumi.Input[str]] = None,
                 ipv6_tunnel_mode: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server2: Optional[pulumi.Input[str]] = None,
                 keep_alive: Optional[pulumi.Input[str]] = None,
                 landing_page: Optional[pulumi.Input[pulumi.InputType['VpnSslWebPortalLandingPageArgs']]] = None,
                 landing_page_mode: Optional[pulumi.Input[str]] = None,
                 limit_user_logins: Optional[pulumi.Input[str]] = None,
                 mac_addr_action: Optional[pulumi.Input[str]] = None,
                 mac_addr_check: Optional[pulumi.Input[str]] = None,
                 mac_addr_check_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalMacAddrCheckRuleArgs']]]]] = None,
                 macos_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_check: Optional[pulumi.Input[str]] = None,
                 os_check_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalOsCheckListArgs']]]]] = None,
                 prefer_ipv6_dns: Optional[pulumi.Input[str]] = None,
                 redir_url: Optional[pulumi.Input[str]] = None,
                 rewrite_ip_uri_ui: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 service_restriction: Optional[pulumi.Input[str]] = None,
                 skip_check_for_browser: Optional[pulumi.Input[str]] = None,
                 skip_check_for_unsupported_os: Optional[pulumi.Input[str]] = None,
                 smb_max_version: Optional[pulumi.Input[str]] = None,
                 smb_min_version: Optional[pulumi.Input[str]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 split_dns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalSplitDnArgs']]]]] = None,
                 split_tunneling: Optional[pulumi.Input[str]] = None,
                 split_tunneling_routing_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalSplitTunnelingRoutingAddressArgs']]]]] = None,
                 split_tunneling_routing_negate: Optional[pulumi.Input[str]] = None,
                 theme: Optional[pulumi.Input[str]] = None,
                 transform_backward_slashes: Optional[pulumi.Input[str]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 user_bookmark: Optional[pulumi.Input[str]] = None,
                 user_group_bookmark: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_mode: Optional[pulumi.Input[str]] = None,
                 windows_forticlient_download_url: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnSslWebPortalArgs.__new__(VpnSslWebPortalArgs)

            __props__.__dict__["allow_user_access"] = allow_user_access
            __props__.__dict__["auto_connect"] = auto_connect
            __props__.__dict__["bookmark_groups"] = bookmark_groups
            __props__.__dict__["client_src_range"] = client_src_range
            __props__.__dict__["clipboard"] = clipboard
            __props__.__dict__["custom_lang"] = custom_lang
            __props__.__dict__["customize_forticlient_download_url"] = customize_forticlient_download_url
            __props__.__dict__["default_window_height"] = default_window_height
            __props__.__dict__["default_window_width"] = default_window_width
            __props__.__dict__["dhcp6_ra_linkaddr"] = dhcp6_ra_linkaddr
            __props__.__dict__["dhcp_ip_overlap"] = dhcp_ip_overlap
            __props__.__dict__["dhcp_ra_giaddr"] = dhcp_ra_giaddr
            __props__.__dict__["display_bookmark"] = display_bookmark
            __props__.__dict__["display_connection_tools"] = display_connection_tools
            __props__.__dict__["display_history"] = display_history
            __props__.__dict__["display_status"] = display_status
            __props__.__dict__["dns_server1"] = dns_server1
            __props__.__dict__["dns_server2"] = dns_server2
            __props__.__dict__["dns_suffix"] = dns_suffix
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["exclusive_routing"] = exclusive_routing
            __props__.__dict__["forticlient_download"] = forticlient_download
            __props__.__dict__["forticlient_download_method"] = forticlient_download_method
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["heading"] = heading
            __props__.__dict__["hide_sso_credential"] = hide_sso_credential
            __props__.__dict__["host_check"] = host_check
            __props__.__dict__["host_check_interval"] = host_check_interval
            __props__.__dict__["host_check_policies"] = host_check_policies
            __props__.__dict__["ip_mode"] = ip_mode
            __props__.__dict__["ip_pools"] = ip_pools
            __props__.__dict__["ipv6_dns_server1"] = ipv6_dns_server1
            __props__.__dict__["ipv6_dns_server2"] = ipv6_dns_server2
            __props__.__dict__["ipv6_exclusive_routing"] = ipv6_exclusive_routing
            __props__.__dict__["ipv6_pools"] = ipv6_pools
            __props__.__dict__["ipv6_service_restriction"] = ipv6_service_restriction
            __props__.__dict__["ipv6_split_tunneling"] = ipv6_split_tunneling
            __props__.__dict__["ipv6_split_tunneling_routing_addresses"] = ipv6_split_tunneling_routing_addresses
            __props__.__dict__["ipv6_split_tunneling_routing_negate"] = ipv6_split_tunneling_routing_negate
            __props__.__dict__["ipv6_tunnel_mode"] = ipv6_tunnel_mode
            __props__.__dict__["ipv6_wins_server1"] = ipv6_wins_server1
            __props__.__dict__["ipv6_wins_server2"] = ipv6_wins_server2
            __props__.__dict__["keep_alive"] = keep_alive
            __props__.__dict__["landing_page"] = landing_page
            __props__.__dict__["landing_page_mode"] = landing_page_mode
            __props__.__dict__["limit_user_logins"] = limit_user_logins
            __props__.__dict__["mac_addr_action"] = mac_addr_action
            __props__.__dict__["mac_addr_check"] = mac_addr_check
            __props__.__dict__["mac_addr_check_rules"] = mac_addr_check_rules
            __props__.__dict__["macos_forticlient_download_url"] = macos_forticlient_download_url
            __props__.__dict__["name"] = name
            __props__.__dict__["os_check"] = os_check
            __props__.__dict__["os_check_lists"] = os_check_lists
            __props__.__dict__["prefer_ipv6_dns"] = prefer_ipv6_dns
            __props__.__dict__["redir_url"] = redir_url
            __props__.__dict__["rewrite_ip_uri_ui"] = rewrite_ip_uri_ui
            __props__.__dict__["save_password"] = save_password
            __props__.__dict__["service_restriction"] = service_restriction
            __props__.__dict__["skip_check_for_browser"] = skip_check_for_browser
            __props__.__dict__["skip_check_for_unsupported_os"] = skip_check_for_unsupported_os
            __props__.__dict__["smb_max_version"] = smb_max_version
            __props__.__dict__["smb_min_version"] = smb_min_version
            __props__.__dict__["smb_ntlmv1_auth"] = smb_ntlmv1_auth
            __props__.__dict__["smbv1"] = smbv1
            __props__.__dict__["split_dns"] = split_dns
            __props__.__dict__["split_tunneling"] = split_tunneling
            __props__.__dict__["split_tunneling_routing_addresses"] = split_tunneling_routing_addresses
            __props__.__dict__["split_tunneling_routing_negate"] = split_tunneling_routing_negate
            __props__.__dict__["theme"] = theme
            __props__.__dict__["transform_backward_slashes"] = transform_backward_slashes
            __props__.__dict__["tunnel_mode"] = tunnel_mode
            __props__.__dict__["use_sdwan"] = use_sdwan
            __props__.__dict__["user_bookmark"] = user_bookmark
            __props__.__dict__["user_group_bookmark"] = user_group_bookmark
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["web_mode"] = web_mode
            __props__.__dict__["windows_forticlient_download_url"] = windows_forticlient_download_url
            __props__.__dict__["wins_server1"] = wins_server1
            __props__.__dict__["wins_server2"] = wins_server2
        super(VpnSslWebPortal, __self__).__init__(
            'fortios:index/vpnSslWebPortal:VpnSslWebPortal',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_user_access: Optional[pulumi.Input[str]] = None,
            auto_connect: Optional[pulumi.Input[str]] = None,
            bookmark_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalBookmarkGroupArgs']]]]] = None,
            client_src_range: Optional[pulumi.Input[str]] = None,
            clipboard: Optional[pulumi.Input[str]] = None,
            custom_lang: Optional[pulumi.Input[str]] = None,
            customize_forticlient_download_url: Optional[pulumi.Input[str]] = None,
            default_window_height: Optional[pulumi.Input[int]] = None,
            default_window_width: Optional[pulumi.Input[int]] = None,
            dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
            dhcp_ip_overlap: Optional[pulumi.Input[str]] = None,
            dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
            display_bookmark: Optional[pulumi.Input[str]] = None,
            display_connection_tools: Optional[pulumi.Input[str]] = None,
            display_history: Optional[pulumi.Input[str]] = None,
            display_status: Optional[pulumi.Input[str]] = None,
            dns_server1: Optional[pulumi.Input[str]] = None,
            dns_server2: Optional[pulumi.Input[str]] = None,
            dns_suffix: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            exclusive_routing: Optional[pulumi.Input[str]] = None,
            forticlient_download: Optional[pulumi.Input[str]] = None,
            forticlient_download_method: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            heading: Optional[pulumi.Input[str]] = None,
            hide_sso_credential: Optional[pulumi.Input[str]] = None,
            host_check: Optional[pulumi.Input[str]] = None,
            host_check_interval: Optional[pulumi.Input[int]] = None,
            host_check_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalHostCheckPolicyArgs']]]]] = None,
            ip_mode: Optional[pulumi.Input[str]] = None,
            ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalIpPoolArgs']]]]] = None,
            ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
            ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
            ipv6_exclusive_routing: Optional[pulumi.Input[str]] = None,
            ipv6_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalIpv6PoolArgs']]]]] = None,
            ipv6_service_restriction: Optional[pulumi.Input[str]] = None,
            ipv6_split_tunneling: Optional[pulumi.Input[str]] = None,
            ipv6_split_tunneling_routing_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs']]]]] = None,
            ipv6_split_tunneling_routing_negate: Optional[pulumi.Input[str]] = None,
            ipv6_tunnel_mode: Optional[pulumi.Input[str]] = None,
            ipv6_wins_server1: Optional[pulumi.Input[str]] = None,
            ipv6_wins_server2: Optional[pulumi.Input[str]] = None,
            keep_alive: Optional[pulumi.Input[str]] = None,
            landing_page: Optional[pulumi.Input[pulumi.InputType['VpnSslWebPortalLandingPageArgs']]] = None,
            landing_page_mode: Optional[pulumi.Input[str]] = None,
            limit_user_logins: Optional[pulumi.Input[str]] = None,
            mac_addr_action: Optional[pulumi.Input[str]] = None,
            mac_addr_check: Optional[pulumi.Input[str]] = None,
            mac_addr_check_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalMacAddrCheckRuleArgs']]]]] = None,
            macos_forticlient_download_url: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            os_check: Optional[pulumi.Input[str]] = None,
            os_check_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalOsCheckListArgs']]]]] = None,
            prefer_ipv6_dns: Optional[pulumi.Input[str]] = None,
            redir_url: Optional[pulumi.Input[str]] = None,
            rewrite_ip_uri_ui: Optional[pulumi.Input[str]] = None,
            save_password: Optional[pulumi.Input[str]] = None,
            service_restriction: Optional[pulumi.Input[str]] = None,
            skip_check_for_browser: Optional[pulumi.Input[str]] = None,
            skip_check_for_unsupported_os: Optional[pulumi.Input[str]] = None,
            smb_max_version: Optional[pulumi.Input[str]] = None,
            smb_min_version: Optional[pulumi.Input[str]] = None,
            smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
            smbv1: Optional[pulumi.Input[str]] = None,
            split_dns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalSplitDnArgs']]]]] = None,
            split_tunneling: Optional[pulumi.Input[str]] = None,
            split_tunneling_routing_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnSslWebPortalSplitTunnelingRoutingAddressArgs']]]]] = None,
            split_tunneling_routing_negate: Optional[pulumi.Input[str]] = None,
            theme: Optional[pulumi.Input[str]] = None,
            transform_backward_slashes: Optional[pulumi.Input[str]] = None,
            tunnel_mode: Optional[pulumi.Input[str]] = None,
            use_sdwan: Optional[pulumi.Input[str]] = None,
            user_bookmark: Optional[pulumi.Input[str]] = None,
            user_group_bookmark: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            web_mode: Optional[pulumi.Input[str]] = None,
            windows_forticlient_download_url: Optional[pulumi.Input[str]] = None,
            wins_server1: Optional[pulumi.Input[str]] = None,
            wins_server2: Optional[pulumi.Input[str]] = None) -> 'VpnSslWebPortal':
        """
        Get an existing VpnSslWebPortal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnSslWebPortalState.__new__(_VpnSslWebPortalState)

        __props__.__dict__["allow_user_access"] = allow_user_access
        __props__.__dict__["auto_connect"] = auto_connect
        __props__.__dict__["bookmark_groups"] = bookmark_groups
        __props__.__dict__["client_src_range"] = client_src_range
        __props__.__dict__["clipboard"] = clipboard
        __props__.__dict__["custom_lang"] = custom_lang
        __props__.__dict__["customize_forticlient_download_url"] = customize_forticlient_download_url
        __props__.__dict__["default_window_height"] = default_window_height
        __props__.__dict__["default_window_width"] = default_window_width
        __props__.__dict__["dhcp6_ra_linkaddr"] = dhcp6_ra_linkaddr
        __props__.__dict__["dhcp_ip_overlap"] = dhcp_ip_overlap
        __props__.__dict__["dhcp_ra_giaddr"] = dhcp_ra_giaddr
        __props__.__dict__["display_bookmark"] = display_bookmark
        __props__.__dict__["display_connection_tools"] = display_connection_tools
        __props__.__dict__["display_history"] = display_history
        __props__.__dict__["display_status"] = display_status
        __props__.__dict__["dns_server1"] = dns_server1
        __props__.__dict__["dns_server2"] = dns_server2
        __props__.__dict__["dns_suffix"] = dns_suffix
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["exclusive_routing"] = exclusive_routing
        __props__.__dict__["forticlient_download"] = forticlient_download
        __props__.__dict__["forticlient_download_method"] = forticlient_download_method
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["heading"] = heading
        __props__.__dict__["hide_sso_credential"] = hide_sso_credential
        __props__.__dict__["host_check"] = host_check
        __props__.__dict__["host_check_interval"] = host_check_interval
        __props__.__dict__["host_check_policies"] = host_check_policies
        __props__.__dict__["ip_mode"] = ip_mode
        __props__.__dict__["ip_pools"] = ip_pools
        __props__.__dict__["ipv6_dns_server1"] = ipv6_dns_server1
        __props__.__dict__["ipv6_dns_server2"] = ipv6_dns_server2
        __props__.__dict__["ipv6_exclusive_routing"] = ipv6_exclusive_routing
        __props__.__dict__["ipv6_pools"] = ipv6_pools
        __props__.__dict__["ipv6_service_restriction"] = ipv6_service_restriction
        __props__.__dict__["ipv6_split_tunneling"] = ipv6_split_tunneling
        __props__.__dict__["ipv6_split_tunneling_routing_addresses"] = ipv6_split_tunneling_routing_addresses
        __props__.__dict__["ipv6_split_tunneling_routing_negate"] = ipv6_split_tunneling_routing_negate
        __props__.__dict__["ipv6_tunnel_mode"] = ipv6_tunnel_mode
        __props__.__dict__["ipv6_wins_server1"] = ipv6_wins_server1
        __props__.__dict__["ipv6_wins_server2"] = ipv6_wins_server2
        __props__.__dict__["keep_alive"] = keep_alive
        __props__.__dict__["landing_page"] = landing_page
        __props__.__dict__["landing_page_mode"] = landing_page_mode
        __props__.__dict__["limit_user_logins"] = limit_user_logins
        __props__.__dict__["mac_addr_action"] = mac_addr_action
        __props__.__dict__["mac_addr_check"] = mac_addr_check
        __props__.__dict__["mac_addr_check_rules"] = mac_addr_check_rules
        __props__.__dict__["macos_forticlient_download_url"] = macos_forticlient_download_url
        __props__.__dict__["name"] = name
        __props__.__dict__["os_check"] = os_check
        __props__.__dict__["os_check_lists"] = os_check_lists
        __props__.__dict__["prefer_ipv6_dns"] = prefer_ipv6_dns
        __props__.__dict__["redir_url"] = redir_url
        __props__.__dict__["rewrite_ip_uri_ui"] = rewrite_ip_uri_ui
        __props__.__dict__["save_password"] = save_password
        __props__.__dict__["service_restriction"] = service_restriction
        __props__.__dict__["skip_check_for_browser"] = skip_check_for_browser
        __props__.__dict__["skip_check_for_unsupported_os"] = skip_check_for_unsupported_os
        __props__.__dict__["smb_max_version"] = smb_max_version
        __props__.__dict__["smb_min_version"] = smb_min_version
        __props__.__dict__["smb_ntlmv1_auth"] = smb_ntlmv1_auth
        __props__.__dict__["smbv1"] = smbv1
        __props__.__dict__["split_dns"] = split_dns
        __props__.__dict__["split_tunneling"] = split_tunneling
        __props__.__dict__["split_tunneling_routing_addresses"] = split_tunneling_routing_addresses
        __props__.__dict__["split_tunneling_routing_negate"] = split_tunneling_routing_negate
        __props__.__dict__["theme"] = theme
        __props__.__dict__["transform_backward_slashes"] = transform_backward_slashes
        __props__.__dict__["tunnel_mode"] = tunnel_mode
        __props__.__dict__["use_sdwan"] = use_sdwan
        __props__.__dict__["user_bookmark"] = user_bookmark
        __props__.__dict__["user_group_bookmark"] = user_group_bookmark
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["web_mode"] = web_mode
        __props__.__dict__["windows_forticlient_download_url"] = windows_forticlient_download_url
        __props__.__dict__["wins_server1"] = wins_server1
        __props__.__dict__["wins_server2"] = wins_server2
        return VpnSslWebPortal(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowUserAccess")
    def allow_user_access(self) -> pulumi.Output[str]:
        return pulumi.get(self, "allow_user_access")

    @property
    @pulumi.getter(name="autoConnect")
    def auto_connect(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_connect")

    @property
    @pulumi.getter(name="bookmarkGroups")
    def bookmark_groups(self) -> pulumi.Output[Optional[Sequence['outputs.VpnSslWebPortalBookmarkGroup']]]:
        return pulumi.get(self, "bookmark_groups")

    @property
    @pulumi.getter(name="clientSrcRange")
    def client_src_range(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_src_range")

    @property
    @pulumi.getter
    def clipboard(self) -> pulumi.Output[str]:
        return pulumi.get(self, "clipboard")

    @property
    @pulumi.getter(name="customLang")
    def custom_lang(self) -> pulumi.Output[str]:
        return pulumi.get(self, "custom_lang")

    @property
    @pulumi.getter(name="customizeForticlientDownloadUrl")
    def customize_forticlient_download_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "customize_forticlient_download_url")

    @property
    @pulumi.getter(name="defaultWindowHeight")
    def default_window_height(self) -> pulumi.Output[int]:
        return pulumi.get(self, "default_window_height")

    @property
    @pulumi.getter(name="defaultWindowWidth")
    def default_window_width(self) -> pulumi.Output[int]:
        return pulumi.get(self, "default_window_width")

    @property
    @pulumi.getter(name="dhcp6RaLinkaddr")
    def dhcp6_ra_linkaddr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp6_ra_linkaddr")

    @property
    @pulumi.getter(name="dhcpIpOverlap")
    def dhcp_ip_overlap(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_ip_overlap")

    @property
    @pulumi.getter(name="dhcpRaGiaddr")
    def dhcp_ra_giaddr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_ra_giaddr")

    @property
    @pulumi.getter(name="displayBookmark")
    def display_bookmark(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_bookmark")

    @property
    @pulumi.getter(name="displayConnectionTools")
    def display_connection_tools(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_connection_tools")

    @property
    @pulumi.getter(name="displayHistory")
    def display_history(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_history")

    @property
    @pulumi.getter(name="displayStatus")
    def display_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_status")

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_server1")

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_server2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="exclusiveRouting")
    def exclusive_routing(self) -> pulumi.Output[str]:
        return pulumi.get(self, "exclusive_routing")

    @property
    @pulumi.getter(name="forticlientDownload")
    def forticlient_download(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forticlient_download")

    @property
    @pulumi.getter(name="forticlientDownloadMethod")
    def forticlient_download_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forticlient_download_method")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def heading(self) -> pulumi.Output[str]:
        return pulumi.get(self, "heading")

    @property
    @pulumi.getter(name="hideSsoCredential")
    def hide_sso_credential(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hide_sso_credential")

    @property
    @pulumi.getter(name="hostCheck")
    def host_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "host_check")

    @property
    @pulumi.getter(name="hostCheckInterval")
    def host_check_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "host_check_interval")

    @property
    @pulumi.getter(name="hostCheckPolicies")
    def host_check_policies(self) -> pulumi.Output[Optional[Sequence['outputs.VpnSslWebPortalHostCheckPolicy']]]:
        return pulumi.get(self, "host_check_policies")

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_mode")

    @property
    @pulumi.getter(name="ipPools")
    def ip_pools(self) -> pulumi.Output[Optional[Sequence['outputs.VpnSslWebPortalIpPool']]]:
        return pulumi.get(self, "ip_pools")

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_dns_server1")

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_dns_server2")

    @property
    @pulumi.getter(name="ipv6ExclusiveRouting")
    def ipv6_exclusive_routing(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_exclusive_routing")

    @property
    @pulumi.getter(name="ipv6Pools")
    def ipv6_pools(self) -> pulumi.Output[Optional[Sequence['outputs.VpnSslWebPortalIpv6Pool']]]:
        return pulumi.get(self, "ipv6_pools")

    @property
    @pulumi.getter(name="ipv6ServiceRestriction")
    def ipv6_service_restriction(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_service_restriction")

    @property
    @pulumi.getter(name="ipv6SplitTunneling")
    def ipv6_split_tunneling(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_split_tunneling")

    @property
    @pulumi.getter(name="ipv6SplitTunnelingRoutingAddresses")
    def ipv6_split_tunneling_routing_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.VpnSslWebPortalIpv6SplitTunnelingRoutingAddress']]]:
        return pulumi.get(self, "ipv6_split_tunneling_routing_addresses")

    @property
    @pulumi.getter(name="ipv6SplitTunnelingRoutingNegate")
    def ipv6_split_tunneling_routing_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_split_tunneling_routing_negate")

    @property
    @pulumi.getter(name="ipv6TunnelMode")
    def ipv6_tunnel_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_tunnel_mode")

    @property
    @pulumi.getter(name="ipv6WinsServer1")
    def ipv6_wins_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_wins_server1")

    @property
    @pulumi.getter(name="ipv6WinsServer2")
    def ipv6_wins_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_wins_server2")

    @property
    @pulumi.getter(name="keepAlive")
    def keep_alive(self) -> pulumi.Output[str]:
        return pulumi.get(self, "keep_alive")

    @property
    @pulumi.getter(name="landingPage")
    def landing_page(self) -> pulumi.Output['outputs.VpnSslWebPortalLandingPage']:
        return pulumi.get(self, "landing_page")

    @property
    @pulumi.getter(name="landingPageMode")
    def landing_page_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "landing_page_mode")

    @property
    @pulumi.getter(name="limitUserLogins")
    def limit_user_logins(self) -> pulumi.Output[str]:
        return pulumi.get(self, "limit_user_logins")

    @property
    @pulumi.getter(name="macAddrAction")
    def mac_addr_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_addr_action")

    @property
    @pulumi.getter(name="macAddrCheck")
    def mac_addr_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_addr_check")

    @property
    @pulumi.getter(name="macAddrCheckRules")
    def mac_addr_check_rules(self) -> pulumi.Output[Optional[Sequence['outputs.VpnSslWebPortalMacAddrCheckRule']]]:
        return pulumi.get(self, "mac_addr_check_rules")

    @property
    @pulumi.getter(name="macosForticlientDownloadUrl")
    def macos_forticlient_download_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "macos_forticlient_download_url")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osCheck")
    def os_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "os_check")

    @property
    @pulumi.getter(name="osCheckLists")
    def os_check_lists(self) -> pulumi.Output[Optional[Sequence['outputs.VpnSslWebPortalOsCheckList']]]:
        return pulumi.get(self, "os_check_lists")

    @property
    @pulumi.getter(name="preferIpv6Dns")
    def prefer_ipv6_dns(self) -> pulumi.Output[str]:
        return pulumi.get(self, "prefer_ipv6_dns")

    @property
    @pulumi.getter(name="redirUrl")
    def redir_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "redir_url")

    @property
    @pulumi.getter(name="rewriteIpUriUi")
    def rewrite_ip_uri_ui(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rewrite_ip_uri_ui")

    @property
    @pulumi.getter(name="savePassword")
    def save_password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "save_password")

    @property
    @pulumi.getter(name="serviceRestriction")
    def service_restriction(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_restriction")

    @property
    @pulumi.getter(name="skipCheckForBrowser")
    def skip_check_for_browser(self) -> pulumi.Output[str]:
        return pulumi.get(self, "skip_check_for_browser")

    @property
    @pulumi.getter(name="skipCheckForUnsupportedOs")
    def skip_check_for_unsupported_os(self) -> pulumi.Output[str]:
        return pulumi.get(self, "skip_check_for_unsupported_os")

    @property
    @pulumi.getter(name="smbMaxVersion")
    def smb_max_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "smb_max_version")

    @property
    @pulumi.getter(name="smbMinVersion")
    def smb_min_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "smb_min_version")

    @property
    @pulumi.getter(name="smbNtlmv1Auth")
    def smb_ntlmv1_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "smb_ntlmv1_auth")

    @property
    @pulumi.getter
    def smbv1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "smbv1")

    @property
    @pulumi.getter(name="splitDns")
    def split_dns(self) -> pulumi.Output[Optional[Sequence['outputs.VpnSslWebPortalSplitDn']]]:
        return pulumi.get(self, "split_dns")

    @property
    @pulumi.getter(name="splitTunneling")
    def split_tunneling(self) -> pulumi.Output[str]:
        return pulumi.get(self, "split_tunneling")

    @property
    @pulumi.getter(name="splitTunnelingRoutingAddresses")
    def split_tunneling_routing_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.VpnSslWebPortalSplitTunnelingRoutingAddress']]]:
        return pulumi.get(self, "split_tunneling_routing_addresses")

    @property
    @pulumi.getter(name="splitTunnelingRoutingNegate")
    def split_tunneling_routing_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "split_tunneling_routing_negate")

    @property
    @pulumi.getter
    def theme(self) -> pulumi.Output[str]:
        return pulumi.get(self, "theme")

    @property
    @pulumi.getter(name="transformBackwardSlashes")
    def transform_backward_slashes(self) -> pulumi.Output[str]:
        return pulumi.get(self, "transform_backward_slashes")

    @property
    @pulumi.getter(name="tunnelMode")
    def tunnel_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel_mode")

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "use_sdwan")

    @property
    @pulumi.getter(name="userBookmark")
    def user_bookmark(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_bookmark")

    @property
    @pulumi.getter(name="userGroupBookmark")
    def user_group_bookmark(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_group_bookmark")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="webMode")
    def web_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_mode")

    @property
    @pulumi.getter(name="windowsForticlientDownloadUrl")
    def windows_forticlient_download_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "windows_forticlient_download_url")

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wins_server1")

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wins_server2")

