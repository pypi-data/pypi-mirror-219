# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['UserLdapArgs', 'UserLdap']

@pulumi.input_type
class UserLdapArgs:
    def __init__(__self__, *,
                 dn: pulumi.Input[str],
                 server: pulumi.Input[str],
                 account_key_filter: Optional[pulumi.Input[str]] = None,
                 account_key_processing: Optional[pulumi.Input[str]] = None,
                 account_key_upn_san: Optional[pulumi.Input[str]] = None,
                 antiphish: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 client_cert_auth: Optional[pulumi.Input[str]] = None,
                 cnid: Optional[pulumi.Input[str]] = None,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 group_member_check: Optional[pulumi.Input[str]] = None,
                 group_object_filter: Optional[pulumi.Input[str]] = None,
                 group_search_base: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 member_attr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 obtain_user_info: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_attr: Optional[pulumi.Input[str]] = None,
                 password_expiry_warning: Optional[pulumi.Input[str]] = None,
                 password_renewal: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 search_type: Optional[pulumi.Input[str]] = None,
                 secondary_server: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[str]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 tertiary_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_filter: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_info_exchange_server: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserLdap resource.
        """
        pulumi.set(__self__, "dn", dn)
        pulumi.set(__self__, "server", server)
        if account_key_filter is not None:
            pulumi.set(__self__, "account_key_filter", account_key_filter)
        if account_key_processing is not None:
            pulumi.set(__self__, "account_key_processing", account_key_processing)
        if account_key_upn_san is not None:
            pulumi.set(__self__, "account_key_upn_san", account_key_upn_san)
        if antiphish is not None:
            pulumi.set(__self__, "antiphish", antiphish)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_cert_auth is not None:
            pulumi.set(__self__, "client_cert_auth", client_cert_auth)
        if cnid is not None:
            pulumi.set(__self__, "cnid", cnid)
        if group_filter is not None:
            pulumi.set(__self__, "group_filter", group_filter)
        if group_member_check is not None:
            pulumi.set(__self__, "group_member_check", group_member_check)
        if group_object_filter is not None:
            pulumi.set(__self__, "group_object_filter", group_object_filter)
        if group_search_base is not None:
            pulumi.set(__self__, "group_search_base", group_search_base)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if member_attr is not None:
            pulumi.set(__self__, "member_attr", member_attr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if obtain_user_info is not None:
            pulumi.set(__self__, "obtain_user_info", obtain_user_info)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_attr is not None:
            pulumi.set(__self__, "password_attr", password_attr)
        if password_expiry_warning is not None:
            pulumi.set(__self__, "password_expiry_warning", password_expiry_warning)
        if password_renewal is not None:
            pulumi.set(__self__, "password_renewal", password_renewal)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if search_type is not None:
            pulumi.set(__self__, "search_type", search_type)
        if secondary_server is not None:
            pulumi.set(__self__, "secondary_server", secondary_server)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if server_identity_check is not None:
            pulumi.set(__self__, "server_identity_check", server_identity_check)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if ssl_min_proto_version is not None:
            pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if tertiary_server is not None:
            pulumi.set(__self__, "tertiary_server", tertiary_server)
        if two_factor is not None:
            pulumi.set(__self__, "two_factor", two_factor)
        if two_factor_authentication is not None:
            pulumi.set(__self__, "two_factor_authentication", two_factor_authentication)
        if two_factor_filter is not None:
            pulumi.set(__self__, "two_factor_filter", two_factor_filter)
        if two_factor_notification is not None:
            pulumi.set(__self__, "two_factor_notification", two_factor_notification)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_info_exchange_server is not None:
            pulumi.set(__self__, "user_info_exchange_server", user_info_exchange_server)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def dn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dn")

    @dn.setter
    def dn(self, value: pulumi.Input[str]):
        pulumi.set(self, "dn", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="accountKeyFilter")
    def account_key_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_key_filter")

    @account_key_filter.setter
    def account_key_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_key_filter", value)

    @property
    @pulumi.getter(name="accountKeyProcessing")
    def account_key_processing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_key_processing")

    @account_key_processing.setter
    def account_key_processing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_key_processing", value)

    @property
    @pulumi.getter(name="accountKeyUpnSan")
    def account_key_upn_san(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_key_upn_san")

    @account_key_upn_san.setter
    def account_key_upn_san(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_key_upn_san", value)

    @property
    @pulumi.getter
    def antiphish(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "antiphish")

    @antiphish.setter
    def antiphish(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antiphish", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter(name="clientCertAuth")
    def client_cert_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert_auth")

    @client_cert_auth.setter
    def client_cert_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_auth", value)

    @property
    @pulumi.getter
    def cnid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cnid")

    @cnid.setter
    def cnid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cnid", value)

    @property
    @pulumi.getter(name="groupFilter")
    def group_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_filter")

    @group_filter.setter
    def group_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_filter", value)

    @property
    @pulumi.getter(name="groupMemberCheck")
    def group_member_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_member_check")

    @group_member_check.setter
    def group_member_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_member_check", value)

    @property
    @pulumi.getter(name="groupObjectFilter")
    def group_object_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_object_filter")

    @group_object_filter.setter
    def group_object_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_object_filter", value)

    @property
    @pulumi.getter(name="groupSearchBase")
    def group_search_base(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_search_base")

    @group_search_base.setter
    def group_search_base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_search_base", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="memberAttr")
    def member_attr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "member_attr")

    @member_attr.setter
    def member_attr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_attr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="obtainUserInfo")
    def obtain_user_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "obtain_user_info")

    @obtain_user_info.setter
    def obtain_user_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obtain_user_info", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordAttr")
    def password_attr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_attr")

    @password_attr.setter
    def password_attr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_attr", value)

    @property
    @pulumi.getter(name="passwordExpiryWarning")
    def password_expiry_warning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_expiry_warning")

    @password_expiry_warning.setter
    def password_expiry_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_expiry_warning", value)

    @property
    @pulumi.getter(name="passwordRenewal")
    def password_renewal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_renewal")

    @password_renewal.setter
    def password_renewal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_renewal", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="searchType")
    def search_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_type")

    @search_type.setter
    def search_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_type", value)

    @property
    @pulumi.getter(name="secondaryServer")
    def secondary_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_server")

    @secondary_server.setter
    def secondary_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_server", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter(name="serverIdentityCheck")
    def server_identity_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_identity_check")

    @server_identity_check.setter
    def server_identity_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_identity_check", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_port", value)

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_proto_version")

    @ssl_min_proto_version.setter
    def ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_version", value)

    @property
    @pulumi.getter(name="tertiaryServer")
    def tertiary_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tertiary_server")

    @tertiary_server.setter
    def tertiary_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tertiary_server", value)

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor")

    @two_factor.setter
    def two_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor", value)

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor_authentication")

    @two_factor_authentication.setter
    def two_factor_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_authentication", value)

    @property
    @pulumi.getter(name="twoFactorFilter")
    def two_factor_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor_filter")

    @two_factor_filter.setter
    def two_factor_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_filter", value)

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor_notification")

    @two_factor_notification.setter
    def two_factor_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_notification", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userInfoExchangeServer")
    def user_info_exchange_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_info_exchange_server")

    @user_info_exchange_server.setter
    def user_info_exchange_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_info_exchange_server", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _UserLdapState:
    def __init__(__self__, *,
                 account_key_filter: Optional[pulumi.Input[str]] = None,
                 account_key_processing: Optional[pulumi.Input[str]] = None,
                 account_key_upn_san: Optional[pulumi.Input[str]] = None,
                 antiphish: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 client_cert_auth: Optional[pulumi.Input[str]] = None,
                 cnid: Optional[pulumi.Input[str]] = None,
                 dn: Optional[pulumi.Input[str]] = None,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 group_member_check: Optional[pulumi.Input[str]] = None,
                 group_object_filter: Optional[pulumi.Input[str]] = None,
                 group_search_base: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 member_attr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 obtain_user_info: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_attr: Optional[pulumi.Input[str]] = None,
                 password_expiry_warning: Optional[pulumi.Input[str]] = None,
                 password_renewal: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 search_type: Optional[pulumi.Input[str]] = None,
                 secondary_server: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 tertiary_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_filter: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_info_exchange_server: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserLdap resources.
        """
        if account_key_filter is not None:
            pulumi.set(__self__, "account_key_filter", account_key_filter)
        if account_key_processing is not None:
            pulumi.set(__self__, "account_key_processing", account_key_processing)
        if account_key_upn_san is not None:
            pulumi.set(__self__, "account_key_upn_san", account_key_upn_san)
        if antiphish is not None:
            pulumi.set(__self__, "antiphish", antiphish)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_cert_auth is not None:
            pulumi.set(__self__, "client_cert_auth", client_cert_auth)
        if cnid is not None:
            pulumi.set(__self__, "cnid", cnid)
        if dn is not None:
            pulumi.set(__self__, "dn", dn)
        if group_filter is not None:
            pulumi.set(__self__, "group_filter", group_filter)
        if group_member_check is not None:
            pulumi.set(__self__, "group_member_check", group_member_check)
        if group_object_filter is not None:
            pulumi.set(__self__, "group_object_filter", group_object_filter)
        if group_search_base is not None:
            pulumi.set(__self__, "group_search_base", group_search_base)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if member_attr is not None:
            pulumi.set(__self__, "member_attr", member_attr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if obtain_user_info is not None:
            pulumi.set(__self__, "obtain_user_info", obtain_user_info)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_attr is not None:
            pulumi.set(__self__, "password_attr", password_attr)
        if password_expiry_warning is not None:
            pulumi.set(__self__, "password_expiry_warning", password_expiry_warning)
        if password_renewal is not None:
            pulumi.set(__self__, "password_renewal", password_renewal)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if search_type is not None:
            pulumi.set(__self__, "search_type", search_type)
        if secondary_server is not None:
            pulumi.set(__self__, "secondary_server", secondary_server)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server_identity_check is not None:
            pulumi.set(__self__, "server_identity_check", server_identity_check)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if ssl_min_proto_version is not None:
            pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if tertiary_server is not None:
            pulumi.set(__self__, "tertiary_server", tertiary_server)
        if two_factor is not None:
            pulumi.set(__self__, "two_factor", two_factor)
        if two_factor_authentication is not None:
            pulumi.set(__self__, "two_factor_authentication", two_factor_authentication)
        if two_factor_filter is not None:
            pulumi.set(__self__, "two_factor_filter", two_factor_filter)
        if two_factor_notification is not None:
            pulumi.set(__self__, "two_factor_notification", two_factor_notification)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_info_exchange_server is not None:
            pulumi.set(__self__, "user_info_exchange_server", user_info_exchange_server)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="accountKeyFilter")
    def account_key_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_key_filter")

    @account_key_filter.setter
    def account_key_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_key_filter", value)

    @property
    @pulumi.getter(name="accountKeyProcessing")
    def account_key_processing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_key_processing")

    @account_key_processing.setter
    def account_key_processing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_key_processing", value)

    @property
    @pulumi.getter(name="accountKeyUpnSan")
    def account_key_upn_san(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_key_upn_san")

    @account_key_upn_san.setter
    def account_key_upn_san(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_key_upn_san", value)

    @property
    @pulumi.getter
    def antiphish(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "antiphish")

    @antiphish.setter
    def antiphish(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antiphish", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter(name="clientCertAuth")
    def client_cert_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert_auth")

    @client_cert_auth.setter
    def client_cert_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_auth", value)

    @property
    @pulumi.getter
    def cnid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cnid")

    @cnid.setter
    def cnid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cnid", value)

    @property
    @pulumi.getter
    def dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dn")

    @dn.setter
    def dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dn", value)

    @property
    @pulumi.getter(name="groupFilter")
    def group_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_filter")

    @group_filter.setter
    def group_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_filter", value)

    @property
    @pulumi.getter(name="groupMemberCheck")
    def group_member_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_member_check")

    @group_member_check.setter
    def group_member_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_member_check", value)

    @property
    @pulumi.getter(name="groupObjectFilter")
    def group_object_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_object_filter")

    @group_object_filter.setter
    def group_object_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_object_filter", value)

    @property
    @pulumi.getter(name="groupSearchBase")
    def group_search_base(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_search_base")

    @group_search_base.setter
    def group_search_base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_search_base", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="memberAttr")
    def member_attr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "member_attr")

    @member_attr.setter
    def member_attr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_attr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="obtainUserInfo")
    def obtain_user_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "obtain_user_info")

    @obtain_user_info.setter
    def obtain_user_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obtain_user_info", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordAttr")
    def password_attr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_attr")

    @password_attr.setter
    def password_attr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_attr", value)

    @property
    @pulumi.getter(name="passwordExpiryWarning")
    def password_expiry_warning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_expiry_warning")

    @password_expiry_warning.setter
    def password_expiry_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_expiry_warning", value)

    @property
    @pulumi.getter(name="passwordRenewal")
    def password_renewal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_renewal")

    @password_renewal.setter
    def password_renewal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_renewal", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="searchType")
    def search_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_type")

    @search_type.setter
    def search_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_type", value)

    @property
    @pulumi.getter(name="secondaryServer")
    def secondary_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_server")

    @secondary_server.setter
    def secondary_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_server", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverIdentityCheck")
    def server_identity_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_identity_check")

    @server_identity_check.setter
    def server_identity_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_identity_check", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_port", value)

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_proto_version")

    @ssl_min_proto_version.setter
    def ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_version", value)

    @property
    @pulumi.getter(name="tertiaryServer")
    def tertiary_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tertiary_server")

    @tertiary_server.setter
    def tertiary_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tertiary_server", value)

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor")

    @two_factor.setter
    def two_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor", value)

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor_authentication")

    @two_factor_authentication.setter
    def two_factor_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_authentication", value)

    @property
    @pulumi.getter(name="twoFactorFilter")
    def two_factor_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor_filter")

    @two_factor_filter.setter
    def two_factor_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_filter", value)

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor_notification")

    @two_factor_notification.setter
    def two_factor_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_notification", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userInfoExchangeServer")
    def user_info_exchange_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_info_exchange_server")

    @user_info_exchange_server.setter
    def user_info_exchange_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_info_exchange_server", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class UserLdap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_key_filter: Optional[pulumi.Input[str]] = None,
                 account_key_processing: Optional[pulumi.Input[str]] = None,
                 account_key_upn_san: Optional[pulumi.Input[str]] = None,
                 antiphish: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 client_cert_auth: Optional[pulumi.Input[str]] = None,
                 cnid: Optional[pulumi.Input[str]] = None,
                 dn: Optional[pulumi.Input[str]] = None,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 group_member_check: Optional[pulumi.Input[str]] = None,
                 group_object_filter: Optional[pulumi.Input[str]] = None,
                 group_search_base: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 member_attr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 obtain_user_info: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_attr: Optional[pulumi.Input[str]] = None,
                 password_expiry_warning: Optional[pulumi.Input[str]] = None,
                 password_renewal: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 search_type: Optional[pulumi.Input[str]] = None,
                 secondary_server: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 tertiary_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_filter: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_info_exchange_server: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a UserLdap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserLdapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UserLdap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserLdapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserLdapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_key_filter: Optional[pulumi.Input[str]] = None,
                 account_key_processing: Optional[pulumi.Input[str]] = None,
                 account_key_upn_san: Optional[pulumi.Input[str]] = None,
                 antiphish: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 client_cert_auth: Optional[pulumi.Input[str]] = None,
                 cnid: Optional[pulumi.Input[str]] = None,
                 dn: Optional[pulumi.Input[str]] = None,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 group_member_check: Optional[pulumi.Input[str]] = None,
                 group_object_filter: Optional[pulumi.Input[str]] = None,
                 group_search_base: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 member_attr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 obtain_user_info: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_attr: Optional[pulumi.Input[str]] = None,
                 password_expiry_warning: Optional[pulumi.Input[str]] = None,
                 password_renewal: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 search_type: Optional[pulumi.Input[str]] = None,
                 secondary_server: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 tertiary_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_filter: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_info_exchange_server: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserLdapArgs.__new__(UserLdapArgs)

            __props__.__dict__["account_key_filter"] = account_key_filter
            __props__.__dict__["account_key_processing"] = account_key_processing
            __props__.__dict__["account_key_upn_san"] = account_key_upn_san
            __props__.__dict__["antiphish"] = antiphish
            __props__.__dict__["ca_cert"] = ca_cert
            __props__.__dict__["client_cert"] = client_cert
            __props__.__dict__["client_cert_auth"] = client_cert_auth
            __props__.__dict__["cnid"] = cnid
            if dn is None and not opts.urn:
                raise TypeError("Missing required property 'dn'")
            __props__.__dict__["dn"] = dn
            __props__.__dict__["group_filter"] = group_filter
            __props__.__dict__["group_member_check"] = group_member_check
            __props__.__dict__["group_object_filter"] = group_object_filter
            __props__.__dict__["group_search_base"] = group_search_base
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["member_attr"] = member_attr
            __props__.__dict__["name"] = name
            __props__.__dict__["obtain_user_info"] = obtain_user_info
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["password_attr"] = password_attr
            __props__.__dict__["password_expiry_warning"] = password_expiry_warning
            __props__.__dict__["password_renewal"] = password_renewal
            __props__.__dict__["port"] = port
            __props__.__dict__["search_type"] = search_type
            __props__.__dict__["secondary_server"] = secondary_server
            __props__.__dict__["secure"] = secure
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            __props__.__dict__["server_identity_check"] = server_identity_check
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["source_port"] = source_port
            __props__.__dict__["ssl_min_proto_version"] = ssl_min_proto_version
            __props__.__dict__["tertiary_server"] = tertiary_server
            __props__.__dict__["two_factor"] = two_factor
            __props__.__dict__["two_factor_authentication"] = two_factor_authentication
            __props__.__dict__["two_factor_filter"] = two_factor_filter
            __props__.__dict__["two_factor_notification"] = two_factor_notification
            __props__.__dict__["type"] = type
            __props__.__dict__["user_info_exchange_server"] = user_info_exchange_server
            __props__.__dict__["username"] = username
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(UserLdap, __self__).__init__(
            'fortios:index/userLdap:UserLdap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_key_filter: Optional[pulumi.Input[str]] = None,
            account_key_processing: Optional[pulumi.Input[str]] = None,
            account_key_upn_san: Optional[pulumi.Input[str]] = None,
            antiphish: Optional[pulumi.Input[str]] = None,
            ca_cert: Optional[pulumi.Input[str]] = None,
            client_cert: Optional[pulumi.Input[str]] = None,
            client_cert_auth: Optional[pulumi.Input[str]] = None,
            cnid: Optional[pulumi.Input[str]] = None,
            dn: Optional[pulumi.Input[str]] = None,
            group_filter: Optional[pulumi.Input[str]] = None,
            group_member_check: Optional[pulumi.Input[str]] = None,
            group_object_filter: Optional[pulumi.Input[str]] = None,
            group_search_base: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            member_attr: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            obtain_user_info: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            password_attr: Optional[pulumi.Input[str]] = None,
            password_expiry_warning: Optional[pulumi.Input[str]] = None,
            password_renewal: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            search_type: Optional[pulumi.Input[str]] = None,
            secondary_server: Optional[pulumi.Input[str]] = None,
            secure: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            server_identity_check: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            source_port: Optional[pulumi.Input[int]] = None,
            ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
            tertiary_server: Optional[pulumi.Input[str]] = None,
            two_factor: Optional[pulumi.Input[str]] = None,
            two_factor_authentication: Optional[pulumi.Input[str]] = None,
            two_factor_filter: Optional[pulumi.Input[str]] = None,
            two_factor_notification: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            user_info_exchange_server: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'UserLdap':
        """
        Get an existing UserLdap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserLdapState.__new__(_UserLdapState)

        __props__.__dict__["account_key_filter"] = account_key_filter
        __props__.__dict__["account_key_processing"] = account_key_processing
        __props__.__dict__["account_key_upn_san"] = account_key_upn_san
        __props__.__dict__["antiphish"] = antiphish
        __props__.__dict__["ca_cert"] = ca_cert
        __props__.__dict__["client_cert"] = client_cert
        __props__.__dict__["client_cert_auth"] = client_cert_auth
        __props__.__dict__["cnid"] = cnid
        __props__.__dict__["dn"] = dn
        __props__.__dict__["group_filter"] = group_filter
        __props__.__dict__["group_member_check"] = group_member_check
        __props__.__dict__["group_object_filter"] = group_object_filter
        __props__.__dict__["group_search_base"] = group_search_base
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["member_attr"] = member_attr
        __props__.__dict__["name"] = name
        __props__.__dict__["obtain_user_info"] = obtain_user_info
        __props__.__dict__["password"] = password
        __props__.__dict__["password_attr"] = password_attr
        __props__.__dict__["password_expiry_warning"] = password_expiry_warning
        __props__.__dict__["password_renewal"] = password_renewal
        __props__.__dict__["port"] = port
        __props__.__dict__["search_type"] = search_type
        __props__.__dict__["secondary_server"] = secondary_server
        __props__.__dict__["secure"] = secure
        __props__.__dict__["server"] = server
        __props__.__dict__["server_identity_check"] = server_identity_check
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["source_port"] = source_port
        __props__.__dict__["ssl_min_proto_version"] = ssl_min_proto_version
        __props__.__dict__["tertiary_server"] = tertiary_server
        __props__.__dict__["two_factor"] = two_factor
        __props__.__dict__["two_factor_authentication"] = two_factor_authentication
        __props__.__dict__["two_factor_filter"] = two_factor_filter
        __props__.__dict__["two_factor_notification"] = two_factor_notification
        __props__.__dict__["type"] = type
        __props__.__dict__["user_info_exchange_server"] = user_info_exchange_server
        __props__.__dict__["username"] = username
        __props__.__dict__["vdomparam"] = vdomparam
        return UserLdap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountKeyFilter")
    def account_key_filter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_key_filter")

    @property
    @pulumi.getter(name="accountKeyProcessing")
    def account_key_processing(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_key_processing")

    @property
    @pulumi.getter(name="accountKeyUpnSan")
    def account_key_upn_san(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_key_upn_san")

    @property
    @pulumi.getter
    def antiphish(self) -> pulumi.Output[str]:
        return pulumi.get(self, "antiphish")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter(name="clientCertAuth")
    def client_cert_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_cert_auth")

    @property
    @pulumi.getter
    def cnid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cnid")

    @property
    @pulumi.getter
    def dn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dn")

    @property
    @pulumi.getter(name="groupFilter")
    def group_filter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_filter")

    @property
    @pulumi.getter(name="groupMemberCheck")
    def group_member_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_member_check")

    @property
    @pulumi.getter(name="groupObjectFilter")
    def group_object_filter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_object_filter")

    @property
    @pulumi.getter(name="groupSearchBase")
    def group_search_base(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_search_base")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="memberAttr")
    def member_attr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "member_attr")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="obtainUserInfo")
    def obtain_user_info(self) -> pulumi.Output[str]:
        return pulumi.get(self, "obtain_user_info")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordAttr")
    def password_attr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "password_attr")

    @property
    @pulumi.getter(name="passwordExpiryWarning")
    def password_expiry_warning(self) -> pulumi.Output[str]:
        return pulumi.get(self, "password_expiry_warning")

    @property
    @pulumi.getter(name="passwordRenewal")
    def password_renewal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "password_renewal")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="searchType")
    def search_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "search_type")

    @property
    @pulumi.getter(name="secondaryServer")
    def secondary_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "secondary_server")

    @property
    @pulumi.getter
    def secure(self) -> pulumi.Output[str]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverIdentityCheck")
    def server_identity_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_identity_check")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "source_port")

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_min_proto_version")

    @property
    @pulumi.getter(name="tertiaryServer")
    def tertiary_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tertiary_server")

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "two_factor")

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> pulumi.Output[str]:
        return pulumi.get(self, "two_factor_authentication")

    @property
    @pulumi.getter(name="twoFactorFilter")
    def two_factor_filter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "two_factor_filter")

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> pulumi.Output[str]:
        return pulumi.get(self, "two_factor_notification")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userInfoExchangeServer")
    def user_info_exchange_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_info_exchange_server")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

