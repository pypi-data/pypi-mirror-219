# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SystemVneTunnelArgs', 'SystemVneTunnel']

@pulumi.input_type
class SystemVneTunnelArgs:
    def __init__(__self__, *,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 bmr_hostname: Optional[pulumi.Input[str]] = None,
                 br: Optional[pulumi.Input[str]] = None,
                 http_password: Optional[pulumi.Input[str]] = None,
                 http_username: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_url: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemVneTunnel resource.
        """
        if auto_asic_offload is not None:
            pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if bmr_hostname is not None:
            pulumi.set(__self__, "bmr_hostname", bmr_hostname)
        if br is not None:
            pulumi.set(__self__, "br", br)
        if http_password is not None:
            pulumi.set(__self__, "http_password", http_password)
        if http_username is not None:
            pulumi.set(__self__, "http_username", http_username)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_url is not None:
            pulumi.set(__self__, "update_url", update_url)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_asic_offload")

    @auto_asic_offload.setter
    def auto_asic_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_asic_offload", value)

    @property
    @pulumi.getter(name="bmrHostname")
    def bmr_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bmr_hostname")

    @bmr_hostname.setter
    def bmr_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bmr_hostname", value)

    @property
    @pulumi.getter
    def br(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "br")

    @br.setter
    def br(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "br", value)

    @property
    @pulumi.getter(name="httpPassword")
    def http_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_password")

    @http_password.setter
    def http_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_password", value)

    @property
    @pulumi.getter(name="httpUsername")
    def http_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_username")

    @http_username.setter
    def http_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_username", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateUrl")
    def update_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_url")

    @update_url.setter
    def update_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_url", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemVneTunnelState:
    def __init__(__self__, *,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 bmr_hostname: Optional[pulumi.Input[str]] = None,
                 br: Optional[pulumi.Input[str]] = None,
                 http_password: Optional[pulumi.Input[str]] = None,
                 http_username: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_url: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemVneTunnel resources.
        """
        if auto_asic_offload is not None:
            pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if bmr_hostname is not None:
            pulumi.set(__self__, "bmr_hostname", bmr_hostname)
        if br is not None:
            pulumi.set(__self__, "br", br)
        if http_password is not None:
            pulumi.set(__self__, "http_password", http_password)
        if http_username is not None:
            pulumi.set(__self__, "http_username", http_username)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_url is not None:
            pulumi.set(__self__, "update_url", update_url)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_asic_offload")

    @auto_asic_offload.setter
    def auto_asic_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_asic_offload", value)

    @property
    @pulumi.getter(name="bmrHostname")
    def bmr_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bmr_hostname")

    @bmr_hostname.setter
    def bmr_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bmr_hostname", value)

    @property
    @pulumi.getter
    def br(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "br")

    @br.setter
    def br(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "br", value)

    @property
    @pulumi.getter(name="httpPassword")
    def http_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_password")

    @http_password.setter
    def http_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_password", value)

    @property
    @pulumi.getter(name="httpUsername")
    def http_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_username")

    @http_username.setter
    def http_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_username", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateUrl")
    def update_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_url")

    @update_url.setter
    def update_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_url", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemVneTunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 bmr_hostname: Optional[pulumi.Input[str]] = None,
                 br: Optional[pulumi.Input[str]] = None,
                 http_password: Optional[pulumi.Input[str]] = None,
                 http_username: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_url: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemVneTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemVneTunnelArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemVneTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemVneTunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemVneTunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 bmr_hostname: Optional[pulumi.Input[str]] = None,
                 br: Optional[pulumi.Input[str]] = None,
                 http_password: Optional[pulumi.Input[str]] = None,
                 http_username: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_url: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemVneTunnelArgs.__new__(SystemVneTunnelArgs)

            __props__.__dict__["auto_asic_offload"] = auto_asic_offload
            __props__.__dict__["bmr_hostname"] = None if bmr_hostname is None else pulumi.Output.secret(bmr_hostname)
            __props__.__dict__["br"] = br
            __props__.__dict__["http_password"] = http_password
            __props__.__dict__["http_username"] = http_username
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ipv4_address"] = ipv4_address
            __props__.__dict__["mode"] = mode
            __props__.__dict__["ssl_certificate"] = ssl_certificate
            __props__.__dict__["status"] = status
            __props__.__dict__["update_url"] = update_url
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["bmrHostname"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SystemVneTunnel, __self__).__init__(
            'fortios:index/systemVneTunnel:SystemVneTunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_asic_offload: Optional[pulumi.Input[str]] = None,
            bmr_hostname: Optional[pulumi.Input[str]] = None,
            br: Optional[pulumi.Input[str]] = None,
            http_password: Optional[pulumi.Input[str]] = None,
            http_username: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ipv4_address: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            ssl_certificate: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            update_url: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemVneTunnel':
        """
        Get an existing SystemVneTunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemVneTunnelState.__new__(_SystemVneTunnelState)

        __props__.__dict__["auto_asic_offload"] = auto_asic_offload
        __props__.__dict__["bmr_hostname"] = bmr_hostname
        __props__.__dict__["br"] = br
        __props__.__dict__["http_password"] = http_password
        __props__.__dict__["http_username"] = http_username
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ipv4_address"] = ipv4_address
        __props__.__dict__["mode"] = mode
        __props__.__dict__["ssl_certificate"] = ssl_certificate
        __props__.__dict__["status"] = status
        __props__.__dict__["update_url"] = update_url
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemVneTunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_asic_offload")

    @property
    @pulumi.getter(name="bmrHostname")
    def bmr_hostname(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bmr_hostname")

    @property
    @pulumi.getter
    def br(self) -> pulumi.Output[str]:
        return pulumi.get(self, "br")

    @property
    @pulumi.getter(name="httpPassword")
    def http_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "http_password")

    @property
    @pulumi.getter(name="httpUsername")
    def http_username(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_username")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_certificate")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateUrl")
    def update_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "update_url")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

