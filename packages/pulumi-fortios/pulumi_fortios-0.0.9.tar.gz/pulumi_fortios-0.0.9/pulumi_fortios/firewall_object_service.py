# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FirewallObjectServiceArgs', 'FirewallObjectService']

@pulumi.input_type
class FirewallObjectServiceArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[str]] = None,
                 icmptype: Optional[pulumi.Input[str]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[str]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallObjectService resource.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "protocol", protocol)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if icmpcode is not None:
            pulumi.set(__self__, "icmpcode", icmpcode)
        if icmptype is not None:
            pulumi.set(__self__, "icmptype", icmptype)
        if iprange is not None:
            pulumi.set(__self__, "iprange", iprange)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if sctp_portrange is not None:
            pulumi.set(__self__, "sctp_portrange", sctp_portrange)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if tcp_portrange is not None:
            pulumi.set(__self__, "tcp_portrange", tcp_portrange)
        if udp_portrange is not None:
            pulumi.set(__self__, "udp_portrange", udp_portrange)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[str]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[str]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def icmpcode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icmpcode")

    @icmpcode.setter
    def icmpcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmpcode", value)

    @property
    @pulumi.getter
    def icmptype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icmptype")

    @icmptype.setter
    def icmptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmptype", value)

    @property
    @pulumi.getter
    def iprange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iprange")

    @iprange.setter
    def iprange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iprange", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol_number")

    @protocol_number.setter
    def protocol_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_number", value)

    @property
    @pulumi.getter(name="sctpPortrange")
    def sctp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sctp_portrange")

    @sctp_portrange.setter
    def sctp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_portrange", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="tcpPortrange")
    def tcp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_portrange")

    @tcp_portrange.setter
    def tcp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_portrange", value)

    @property
    @pulumi.getter(name="udpPortrange")
    def udp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "udp_portrange")

    @udp_portrange.setter
    def udp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_portrange", value)


@pulumi.input_type
class _FirewallObjectServiceState:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[str]] = None,
                 icmptype: Optional[pulumi.Input[str]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[str]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallObjectService resources.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if icmpcode is not None:
            pulumi.set(__self__, "icmpcode", icmpcode)
        if icmptype is not None:
            pulumi.set(__self__, "icmptype", icmptype)
        if iprange is not None:
            pulumi.set(__self__, "iprange", iprange)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if sctp_portrange is not None:
            pulumi.set(__self__, "sctp_portrange", sctp_portrange)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if tcp_portrange is not None:
            pulumi.set(__self__, "tcp_portrange", tcp_portrange)
        if udp_portrange is not None:
            pulumi.set(__self__, "udp_portrange", udp_portrange)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def icmpcode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icmpcode")

    @icmpcode.setter
    def icmpcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmpcode", value)

    @property
    @pulumi.getter
    def icmptype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icmptype")

    @icmptype.setter
    def icmptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmptype", value)

    @property
    @pulumi.getter
    def iprange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iprange")

    @iprange.setter
    def iprange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iprange", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol_number")

    @protocol_number.setter
    def protocol_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_number", value)

    @property
    @pulumi.getter(name="sctpPortrange")
    def sctp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sctp_portrange")

    @sctp_portrange.setter
    def sctp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_portrange", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="tcpPortrange")
    def tcp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_portrange")

    @tcp_portrange.setter
    def tcp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_portrange", value)

    @property
    @pulumi.getter(name="udpPortrange")
    def udp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "udp_portrange")

    @udp_portrange.setter
    def udp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_portrange", value)


class FirewallObjectService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[str]] = None,
                 icmptype: Optional[pulumi.Input[str]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[str]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallObjectService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallObjectServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallObjectService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallObjectServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallObjectServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[str]] = None,
                 icmptype: Optional[pulumi.Input[str]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[str]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallObjectServiceArgs.__new__(FirewallObjectServiceArgs)

            if category is None and not opts.urn:
                raise TypeError("Missing required property 'category'")
            __props__.__dict__["category"] = category
            __props__.__dict__["comment"] = comment
            __props__.__dict__["fqdn"] = fqdn
            __props__.__dict__["icmpcode"] = icmpcode
            __props__.__dict__["icmptype"] = icmptype
            __props__.__dict__["iprange"] = iprange
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["protocol_number"] = protocol_number
            __props__.__dict__["sctp_portrange"] = sctp_portrange
            __props__.__dict__["session_ttl"] = session_ttl
            __props__.__dict__["tcp_portrange"] = tcp_portrange
            __props__.__dict__["udp_portrange"] = udp_portrange
        super(FirewallObjectService, __self__).__init__(
            'fortios:index/firewallObjectService:FirewallObjectService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            category: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            icmpcode: Optional[pulumi.Input[str]] = None,
            icmptype: Optional[pulumi.Input[str]] = None,
            iprange: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            protocol_number: Optional[pulumi.Input[str]] = None,
            sctp_portrange: Optional[pulumi.Input[str]] = None,
            session_ttl: Optional[pulumi.Input[str]] = None,
            tcp_portrange: Optional[pulumi.Input[str]] = None,
            udp_portrange: Optional[pulumi.Input[str]] = None) -> 'FirewallObjectService':
        """
        Get an existing FirewallObjectService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallObjectServiceState.__new__(_FirewallObjectServiceState)

        __props__.__dict__["category"] = category
        __props__.__dict__["comment"] = comment
        __props__.__dict__["fqdn"] = fqdn
        __props__.__dict__["icmpcode"] = icmpcode
        __props__.__dict__["icmptype"] = icmptype
        __props__.__dict__["iprange"] = iprange
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["protocol_number"] = protocol_number
        __props__.__dict__["sctp_portrange"] = sctp_portrange
        __props__.__dict__["session_ttl"] = session_ttl
        __props__.__dict__["tcp_portrange"] = tcp_portrange
        __props__.__dict__["udp_portrange"] = udp_portrange
        return FirewallObjectService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def icmpcode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "icmpcode")

    @property
    @pulumi.getter
    def icmptype(self) -> pulumi.Output[str]:
        return pulumi.get(self, "icmptype")

    @property
    @pulumi.getter
    def iprange(self) -> pulumi.Output[str]:
        return pulumi.get(self, "iprange")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> pulumi.Output[str]:
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter(name="sctpPortrange")
    def sctp_portrange(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sctp_portrange")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> pulumi.Output[str]:
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="tcpPortrange")
    def tcp_portrange(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tcp_portrange")

    @property
    @pulumi.getter(name="udpPortrange")
    def udp_portrange(self) -> pulumi.Output[str]:
        return pulumi.get(self, "udp_portrange")

