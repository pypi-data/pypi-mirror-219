# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouterRipArgs', 'RouterRip']

@pulumi.input_type
class RouterRipArgs:
    def __init__(__self__, *,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 distances: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistanceArgs']]]] = None,
                 distribute_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistributeListArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 garbage_timer: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipInterfaceArgs']]]] = None,
                 max_out_metric: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNeighborArgs']]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNetworkArgs']]]] = None,
                 offset_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipOffsetListArgs']]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipPassiveInterfaceArgs']]]] = None,
                 recv_buffer_size: Optional[pulumi.Input[int]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipRedistributeArgs']]]] = None,
                 timeout_timer: Optional[pulumi.Input[int]] = None,
                 update_timer: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RouterRip resource.
        """
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_metric is not None:
            pulumi.set(__self__, "default_metric", default_metric)
        if distances is not None:
            pulumi.set(__self__, "distances", distances)
        if distribute_lists is not None:
            pulumi.set(__self__, "distribute_lists", distribute_lists)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if garbage_timer is not None:
            pulumi.set(__self__, "garbage_timer", garbage_timer)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if max_out_metric is not None:
            pulumi.set(__self__, "max_out_metric", max_out_metric)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if offset_lists is not None:
            pulumi.set(__self__, "offset_lists", offset_lists)
        if passive_interfaces is not None:
            pulumi.set(__self__, "passive_interfaces", passive_interfaces)
        if recv_buffer_size is not None:
            pulumi.set(__self__, "recv_buffer_size", recv_buffer_size)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if timeout_timer is not None:
            pulumi.set(__self__, "timeout_timer", timeout_timer)
        if update_timer is not None:
            pulumi.set(__self__, "update_timer", update_timer)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_originate", value)

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_metric")

    @default_metric.setter
    def default_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_metric", value)

    @property
    @pulumi.getter
    def distances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistanceArgs']]]]:
        return pulumi.get(self, "distances")

    @distances.setter
    def distances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistanceArgs']]]]):
        pulumi.set(self, "distances", value)

    @property
    @pulumi.getter(name="distributeLists")
    def distribute_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistributeListArgs']]]]:
        return pulumi.get(self, "distribute_lists")

    @distribute_lists.setter
    def distribute_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistributeListArgs']]]]):
        pulumi.set(self, "distribute_lists", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="garbageTimer")
    def garbage_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "garbage_timer")

    @garbage_timer.setter
    def garbage_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "garbage_timer", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipInterfaceArgs']]]]:
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @property
    @pulumi.getter(name="maxOutMetric")
    def max_out_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_out_metric")

    @max_out_metric.setter
    def max_out_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_out_metric", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNeighborArgs']]]]:
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNetworkArgs']]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="offsetLists")
    def offset_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipOffsetListArgs']]]]:
        return pulumi.get(self, "offset_lists")

    @offset_lists.setter
    def offset_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipOffsetListArgs']]]]):
        pulumi.set(self, "offset_lists", value)

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipPassiveInterfaceArgs']]]]:
        return pulumi.get(self, "passive_interfaces")

    @passive_interfaces.setter
    def passive_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipPassiveInterfaceArgs']]]]):
        pulumi.set(self, "passive_interfaces", value)

    @property
    @pulumi.getter(name="recvBufferSize")
    def recv_buffer_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "recv_buffer_size")

    @recv_buffer_size.setter
    def recv_buffer_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recv_buffer_size", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipRedistributeArgs']]]]:
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="timeoutTimer")
    def timeout_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_timer")

    @timeout_timer.setter
    def timeout_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_timer", value)

    @property
    @pulumi.getter(name="updateTimer")
    def update_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_timer")

    @update_timer.setter
    def update_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_timer", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _RouterRipState:
    def __init__(__self__, *,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 distances: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistanceArgs']]]] = None,
                 distribute_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistributeListArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 garbage_timer: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipInterfaceArgs']]]] = None,
                 max_out_metric: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNeighborArgs']]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNetworkArgs']]]] = None,
                 offset_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipOffsetListArgs']]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipPassiveInterfaceArgs']]]] = None,
                 recv_buffer_size: Optional[pulumi.Input[int]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipRedistributeArgs']]]] = None,
                 timeout_timer: Optional[pulumi.Input[int]] = None,
                 update_timer: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouterRip resources.
        """
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_metric is not None:
            pulumi.set(__self__, "default_metric", default_metric)
        if distances is not None:
            pulumi.set(__self__, "distances", distances)
        if distribute_lists is not None:
            pulumi.set(__self__, "distribute_lists", distribute_lists)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if garbage_timer is not None:
            pulumi.set(__self__, "garbage_timer", garbage_timer)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if max_out_metric is not None:
            pulumi.set(__self__, "max_out_metric", max_out_metric)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if offset_lists is not None:
            pulumi.set(__self__, "offset_lists", offset_lists)
        if passive_interfaces is not None:
            pulumi.set(__self__, "passive_interfaces", passive_interfaces)
        if recv_buffer_size is not None:
            pulumi.set(__self__, "recv_buffer_size", recv_buffer_size)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if timeout_timer is not None:
            pulumi.set(__self__, "timeout_timer", timeout_timer)
        if update_timer is not None:
            pulumi.set(__self__, "update_timer", update_timer)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_originate", value)

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_metric")

    @default_metric.setter
    def default_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_metric", value)

    @property
    @pulumi.getter
    def distances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistanceArgs']]]]:
        return pulumi.get(self, "distances")

    @distances.setter
    def distances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistanceArgs']]]]):
        pulumi.set(self, "distances", value)

    @property
    @pulumi.getter(name="distributeLists")
    def distribute_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistributeListArgs']]]]:
        return pulumi.get(self, "distribute_lists")

    @distribute_lists.setter
    def distribute_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipDistributeListArgs']]]]):
        pulumi.set(self, "distribute_lists", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="garbageTimer")
    def garbage_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "garbage_timer")

    @garbage_timer.setter
    def garbage_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "garbage_timer", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipInterfaceArgs']]]]:
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @property
    @pulumi.getter(name="maxOutMetric")
    def max_out_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_out_metric")

    @max_out_metric.setter
    def max_out_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_out_metric", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNeighborArgs']]]]:
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNetworkArgs']]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="offsetLists")
    def offset_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipOffsetListArgs']]]]:
        return pulumi.get(self, "offset_lists")

    @offset_lists.setter
    def offset_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipOffsetListArgs']]]]):
        pulumi.set(self, "offset_lists", value)

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipPassiveInterfaceArgs']]]]:
        return pulumi.get(self, "passive_interfaces")

    @passive_interfaces.setter
    def passive_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipPassiveInterfaceArgs']]]]):
        pulumi.set(self, "passive_interfaces", value)

    @property
    @pulumi.getter(name="recvBufferSize")
    def recv_buffer_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "recv_buffer_size")

    @recv_buffer_size.setter
    def recv_buffer_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recv_buffer_size", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipRedistributeArgs']]]]:
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRipRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="timeoutTimer")
    def timeout_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_timer")

    @timeout_timer.setter
    def timeout_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_timer", value)

    @property
    @pulumi.getter(name="updateTimer")
    def update_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_timer")

    @update_timer.setter
    def update_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_timer", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class RouterRip(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 distances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipDistanceArgs']]]]] = None,
                 distribute_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipDistributeListArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 garbage_timer: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipInterfaceArgs']]]]] = None,
                 max_out_metric: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipNeighborArgs']]]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipNetworkArgs']]]]] = None,
                 offset_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipOffsetListArgs']]]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipPassiveInterfaceArgs']]]]] = None,
                 recv_buffer_size: Optional[pulumi.Input[int]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipRedistributeArgs']]]]] = None,
                 timeout_timer: Optional[pulumi.Input[int]] = None,
                 update_timer: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RouterRip resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RouterRipArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RouterRip resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RouterRipArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouterRipArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 distances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipDistanceArgs']]]]] = None,
                 distribute_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipDistributeListArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 garbage_timer: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipInterfaceArgs']]]]] = None,
                 max_out_metric: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipNeighborArgs']]]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipNetworkArgs']]]]] = None,
                 offset_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipOffsetListArgs']]]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipPassiveInterfaceArgs']]]]] = None,
                 recv_buffer_size: Optional[pulumi.Input[int]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipRedistributeArgs']]]]] = None,
                 timeout_timer: Optional[pulumi.Input[int]] = None,
                 update_timer: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouterRipArgs.__new__(RouterRipArgs)

            __props__.__dict__["default_information_originate"] = default_information_originate
            __props__.__dict__["default_metric"] = default_metric
            __props__.__dict__["distances"] = distances
            __props__.__dict__["distribute_lists"] = distribute_lists
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["garbage_timer"] = garbage_timer
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["interfaces"] = interfaces
            __props__.__dict__["max_out_metric"] = max_out_metric
            __props__.__dict__["neighbors"] = neighbors
            __props__.__dict__["networks"] = networks
            __props__.__dict__["offset_lists"] = offset_lists
            __props__.__dict__["passive_interfaces"] = passive_interfaces
            __props__.__dict__["recv_buffer_size"] = recv_buffer_size
            __props__.__dict__["redistributes"] = redistributes
            __props__.__dict__["timeout_timer"] = timeout_timer
            __props__.__dict__["update_timer"] = update_timer
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["version"] = version
        super(RouterRip, __self__).__init__(
            'fortios:index/routerRip:RouterRip',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_information_originate: Optional[pulumi.Input[str]] = None,
            default_metric: Optional[pulumi.Input[int]] = None,
            distances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipDistanceArgs']]]]] = None,
            distribute_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipDistributeListArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            garbage_timer: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipInterfaceArgs']]]]] = None,
            max_out_metric: Optional[pulumi.Input[int]] = None,
            neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipNeighborArgs']]]]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipNetworkArgs']]]]] = None,
            offset_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipOffsetListArgs']]]]] = None,
            passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipPassiveInterfaceArgs']]]]] = None,
            recv_buffer_size: Optional[pulumi.Input[int]] = None,
            redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterRipRedistributeArgs']]]]] = None,
            timeout_timer: Optional[pulumi.Input[int]] = None,
            update_timer: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'RouterRip':
        """
        Get an existing RouterRip resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouterRipState.__new__(_RouterRipState)

        __props__.__dict__["default_information_originate"] = default_information_originate
        __props__.__dict__["default_metric"] = default_metric
        __props__.__dict__["distances"] = distances
        __props__.__dict__["distribute_lists"] = distribute_lists
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["garbage_timer"] = garbage_timer
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interfaces"] = interfaces
        __props__.__dict__["max_out_metric"] = max_out_metric
        __props__.__dict__["neighbors"] = neighbors
        __props__.__dict__["networks"] = networks
        __props__.__dict__["offset_lists"] = offset_lists
        __props__.__dict__["passive_interfaces"] = passive_interfaces
        __props__.__dict__["recv_buffer_size"] = recv_buffer_size
        __props__.__dict__["redistributes"] = redistributes
        __props__.__dict__["timeout_timer"] = timeout_timer
        __props__.__dict__["update_timer"] = update_timer
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["version"] = version
        return RouterRip(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_information_originate")

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> pulumi.Output[int]:
        return pulumi.get(self, "default_metric")

    @property
    @pulumi.getter
    def distances(self) -> pulumi.Output[Optional[Sequence['outputs.RouterRipDistance']]]:
        return pulumi.get(self, "distances")

    @property
    @pulumi.getter(name="distributeLists")
    def distribute_lists(self) -> pulumi.Output[Optional[Sequence['outputs.RouterRipDistributeList']]]:
        return pulumi.get(self, "distribute_lists")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="garbageTimer")
    def garbage_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "garbage_timer")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.RouterRipInterface']]]:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter(name="maxOutMetric")
    def max_out_metric(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_out_metric")

    @property
    @pulumi.getter
    def neighbors(self) -> pulumi.Output[Optional[Sequence['outputs.RouterRipNeighbor']]]:
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Sequence['outputs.RouterRipNetwork']]]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="offsetLists")
    def offset_lists(self) -> pulumi.Output[Optional[Sequence['outputs.RouterRipOffsetList']]]:
        return pulumi.get(self, "offset_lists")

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.RouterRipPassiveInterface']]]:
        return pulumi.get(self, "passive_interfaces")

    @property
    @pulumi.getter(name="recvBufferSize")
    def recv_buffer_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "recv_buffer_size")

    @property
    @pulumi.getter
    def redistributes(self) -> pulumi.Output[Optional[Sequence['outputs.RouterRipRedistribute']]]:
        return pulumi.get(self, "redistributes")

    @property
    @pulumi.getter(name="timeoutTimer")
    def timeout_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "timeout_timer")

    @property
    @pulumi.getter(name="updateTimer")
    def update_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "update_timer")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "version")

