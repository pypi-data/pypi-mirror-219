# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallInterfacePolicy6Args', 'FirewallInterfacePolicy6']

@pulumi.input_type
class FirewallInterfacePolicy6Args:
    def __init__(__self__, *,
                 dstaddr6s: pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Dstaddr6Args']]],
                 interface: pulumi.Input[str],
                 srcaddr6s: pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Srcaddr6Args']]],
                 address_type: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 service6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Service6Args']]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallInterfacePolicy6 resource.
        """
        pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if application_list_status is not None:
            pulumi.set(__self__, "application_list_status", application_list_status)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if av_profile_status is not None:
            pulumi.set(__self__, "av_profile_status", av_profile_status)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_profile_status is not None:
            pulumi.set(__self__, "dlp_profile_status", dlp_profile_status)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dlp_sensor_status is not None:
            pulumi.set(__self__, "dlp_sensor_status", dlp_sensor_status)
        if dsri is not None:
            pulumi.set(__self__, "dsri", dsri)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if emailfilter_profile_status is not None:
            pulumi.set(__self__, "emailfilter_profile_status", emailfilter_profile_status)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_sensor_status is not None:
            pulumi.set(__self__, "ips_sensor_status", ips_sensor_status)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if service6s is not None:
            pulumi.set(__self__, "service6s", service6s)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if spamfilter_profile_status is not None:
            pulumi.set(__self__, "spamfilter_profile_status", spamfilter_profile_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webfilter_profile_status is not None:
            pulumi.set(__self__, "webfilter_profile_status", webfilter_profile_status)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Dstaddr6Args']]]:
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Dstaddr6Args']]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Srcaddr6Args']]]:
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Srcaddr6Args']]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_type")

    @address_type.setter
    def address_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_type", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="applicationListStatus")
    def application_list_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list_status")

    @application_list_status.setter
    def application_list_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list_status", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="avProfileStatus")
    def av_profile_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_profile_status")

    @av_profile_status.setter
    def av_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile_status", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpProfileStatus")
    def dlp_profile_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_profile_status")

    @dlp_profile_status.setter
    def dlp_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile_status", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dlpSensorStatus")
    def dlp_sensor_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_sensor_status")

    @dlp_sensor_status.setter
    def dlp_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor_status", value)

    @property
    @pulumi.getter
    def dsri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dsri")

    @dsri.setter
    def dsri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsri", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter(name="emailfilterProfileStatus")
    def emailfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emailfilter_profile_status")

    @emailfilter_profile_status.setter
    def emailfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile_status", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsSensorStatus")
    def ips_sensor_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor_status")

    @ips_sensor_status.setter
    def ips_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor_status", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter
    def service6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Service6Args']]]]:
        return pulumi.get(self, "service6s")

    @service6s.setter
    def service6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Service6Args']]]]):
        pulumi.set(self, "service6s", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="spamfilterProfileStatus")
    def spamfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spamfilter_profile_status")

    @spamfilter_profile_status.setter
    def spamfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webfilterProfileStatus")
    def webfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile_status")

    @webfilter_profile_status.setter
    def webfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile_status", value)


@pulumi.input_type
class _FirewallInterfacePolicy6State:
    def __init__(__self__, *,
                 address_type: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Dstaddr6Args']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 service6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Service6Args']]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Srcaddr6Args']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallInterfacePolicy6 resources.
        """
        if address_type is not None:
            pulumi.set(__self__, "address_type", address_type)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if application_list_status is not None:
            pulumi.set(__self__, "application_list_status", application_list_status)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if av_profile_status is not None:
            pulumi.set(__self__, "av_profile_status", av_profile_status)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_profile_status is not None:
            pulumi.set(__self__, "dlp_profile_status", dlp_profile_status)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dlp_sensor_status is not None:
            pulumi.set(__self__, "dlp_sensor_status", dlp_sensor_status)
        if dsri is not None:
            pulumi.set(__self__, "dsri", dsri)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if emailfilter_profile_status is not None:
            pulumi.set(__self__, "emailfilter_profile_status", emailfilter_profile_status)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_sensor_status is not None:
            pulumi.set(__self__, "ips_sensor_status", ips_sensor_status)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if service6s is not None:
            pulumi.set(__self__, "service6s", service6s)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if spamfilter_profile_status is not None:
            pulumi.set(__self__, "spamfilter_profile_status", spamfilter_profile_status)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webfilter_profile_status is not None:
            pulumi.set(__self__, "webfilter_profile_status", webfilter_profile_status)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_type")

    @address_type.setter
    def address_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_type", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="applicationListStatus")
    def application_list_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list_status")

    @application_list_status.setter
    def application_list_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list_status", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="avProfileStatus")
    def av_profile_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_profile_status")

    @av_profile_status.setter
    def av_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile_status", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpProfileStatus")
    def dlp_profile_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_profile_status")

    @dlp_profile_status.setter
    def dlp_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile_status", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dlpSensorStatus")
    def dlp_sensor_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_sensor_status")

    @dlp_sensor_status.setter
    def dlp_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor_status", value)

    @property
    @pulumi.getter
    def dsri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dsri")

    @dsri.setter
    def dsri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsri", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Dstaddr6Args']]]]:
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Dstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter(name="emailfilterProfileStatus")
    def emailfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emailfilter_profile_status")

    @emailfilter_profile_status.setter
    def emailfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile_status", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsSensorStatus")
    def ips_sensor_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor_status")

    @ips_sensor_status.setter
    def ips_sensor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor_status", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter
    def service6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Service6Args']]]]:
        return pulumi.get(self, "service6s")

    @service6s.setter
    def service6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Service6Args']]]]):
        pulumi.set(self, "service6s", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="spamfilterProfileStatus")
    def spamfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spamfilter_profile_status")

    @spamfilter_profile_status.setter
    def spamfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile_status", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Srcaddr6Args']]]]:
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInterfacePolicy6Srcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webfilterProfileStatus")
    def webfilter_profile_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile_status")

    @webfilter_profile_status.setter
    def webfilter_profile_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile_status", value)


class FirewallInterfacePolicy6(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_type: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInterfacePolicy6Dstaddr6Args']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 service6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInterfacePolicy6Service6Args']]]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInterfacePolicy6Srcaddr6Args']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallInterfacePolicy6 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallInterfacePolicy6Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallInterfacePolicy6 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallInterfacePolicy6Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallInterfacePolicy6Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_type: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_list_status: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 av_profile_status: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile_status: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dlp_sensor_status: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInterfacePolicy6Dstaddr6Args']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_sensor_status: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 service6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInterfacePolicy6Service6Args']]]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInterfacePolicy6Srcaddr6Args']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallInterfacePolicy6Args.__new__(FirewallInterfacePolicy6Args)

            __props__.__dict__["address_type"] = address_type
            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["application_list_status"] = application_list_status
            __props__.__dict__["av_profile"] = av_profile
            __props__.__dict__["av_profile_status"] = av_profile_status
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dlp_profile"] = dlp_profile
            __props__.__dict__["dlp_profile_status"] = dlp_profile_status
            __props__.__dict__["dlp_sensor"] = dlp_sensor
            __props__.__dict__["dlp_sensor_status"] = dlp_sensor_status
            __props__.__dict__["dsri"] = dsri
            if dstaddr6s is None and not opts.urn:
                raise TypeError("Missing required property 'dstaddr6s'")
            __props__.__dict__["dstaddr6s"] = dstaddr6s
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["emailfilter_profile"] = emailfilter_profile
            __props__.__dict__["emailfilter_profile_status"] = emailfilter_profile_status
            __props__.__dict__["get_all_tables"] = get_all_tables
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["ips_sensor_status"] = ips_sensor_status
            __props__.__dict__["label"] = label
            __props__.__dict__["logtraffic"] = logtraffic
            __props__.__dict__["policyid"] = policyid
            __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
            __props__.__dict__["service6s"] = service6s
            __props__.__dict__["spamfilter_profile"] = spamfilter_profile
            __props__.__dict__["spamfilter_profile_status"] = spamfilter_profile_status
            if srcaddr6s is None and not opts.urn:
                raise TypeError("Missing required property 'srcaddr6s'")
            __props__.__dict__["srcaddr6s"] = srcaddr6s
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["webfilter_profile"] = webfilter_profile
            __props__.__dict__["webfilter_profile_status"] = webfilter_profile_status
        super(FirewallInterfacePolicy6, __self__).__init__(
            'fortios:index/firewallInterfacePolicy6:FirewallInterfacePolicy6',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_type: Optional[pulumi.Input[str]] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            application_list_status: Optional[pulumi.Input[str]] = None,
            av_profile: Optional[pulumi.Input[str]] = None,
            av_profile_status: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dlp_profile: Optional[pulumi.Input[str]] = None,
            dlp_profile_status: Optional[pulumi.Input[str]] = None,
            dlp_sensor: Optional[pulumi.Input[str]] = None,
            dlp_sensor_status: Optional[pulumi.Input[str]] = None,
            dsri: Optional[pulumi.Input[str]] = None,
            dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInterfacePolicy6Dstaddr6Args']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            emailfilter_profile: Optional[pulumi.Input[str]] = None,
            emailfilter_profile_status: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            ips_sensor_status: Optional[pulumi.Input[str]] = None,
            label: Optional[pulumi.Input[str]] = None,
            logtraffic: Optional[pulumi.Input[str]] = None,
            policyid: Optional[pulumi.Input[int]] = None,
            scan_botnet_connections: Optional[pulumi.Input[str]] = None,
            service6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInterfacePolicy6Service6Args']]]]] = None,
            spamfilter_profile: Optional[pulumi.Input[str]] = None,
            spamfilter_profile_status: Optional[pulumi.Input[str]] = None,
            srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInterfacePolicy6Srcaddr6Args']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None,
            webfilter_profile_status: Optional[pulumi.Input[str]] = None) -> 'FirewallInterfacePolicy6':
        """
        Get an existing FirewallInterfacePolicy6 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallInterfacePolicy6State.__new__(_FirewallInterfacePolicy6State)

        __props__.__dict__["address_type"] = address_type
        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["application_list_status"] = application_list_status
        __props__.__dict__["av_profile"] = av_profile
        __props__.__dict__["av_profile_status"] = av_profile_status
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dlp_profile"] = dlp_profile
        __props__.__dict__["dlp_profile_status"] = dlp_profile_status
        __props__.__dict__["dlp_sensor"] = dlp_sensor
        __props__.__dict__["dlp_sensor_status"] = dlp_sensor_status
        __props__.__dict__["dsri"] = dsri
        __props__.__dict__["dstaddr6s"] = dstaddr6s
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["emailfilter_profile"] = emailfilter_profile
        __props__.__dict__["emailfilter_profile_status"] = emailfilter_profile_status
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["ips_sensor_status"] = ips_sensor_status
        __props__.__dict__["label"] = label
        __props__.__dict__["logtraffic"] = logtraffic
        __props__.__dict__["policyid"] = policyid
        __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
        __props__.__dict__["service6s"] = service6s
        __props__.__dict__["spamfilter_profile"] = spamfilter_profile
        __props__.__dict__["spamfilter_profile_status"] = spamfilter_profile_status
        __props__.__dict__["srcaddr6s"] = srcaddr6s
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        __props__.__dict__["webfilter_profile_status"] = webfilter_profile_status
        return FirewallInterfacePolicy6(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter(name="applicationListStatus")
    def application_list_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "application_list_status")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="avProfileStatus")
    def av_profile_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "av_profile_status")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dlp_profile")

    @property
    @pulumi.getter(name="dlpProfileStatus")
    def dlp_profile_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dlp_profile_status")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter(name="dlpSensorStatus")
    def dlp_sensor_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dlp_sensor_status")

    @property
    @pulumi.getter
    def dsri(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dsri")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> pulumi.Output[Sequence['outputs.FirewallInterfacePolicy6Dstaddr6']]:
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter(name="emailfilterProfileStatus")
    def emailfilter_profile_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "emailfilter_profile_status")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter(name="ipsSensorStatus")
    def ips_sensor_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ips_sensor_status")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def logtraffic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter
    def policyid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> pulumi.Output[str]:
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter
    def service6s(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallInterfacePolicy6Service6']]]:
        return pulumi.get(self, "service6s")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter(name="spamfilterProfileStatus")
    def spamfilter_profile_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "spamfilter_profile_status")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> pulumi.Output[Sequence['outputs.FirewallInterfacePolicy6Srcaddr6']]:
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webfilterProfileStatus")
    def webfilter_profile_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "webfilter_profile_status")

