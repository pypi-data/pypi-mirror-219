# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouterOspf6Args', 'RouterOspf6']

@pulumi.input_type
class RouterOspf6Args:
    def __init__(__self__, *,
                 router_id: pulumi.Input[str],
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaArgs']]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 ospf6_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceArgs']]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6PassiveInterfaceArgs']]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6RedistributeArgs']]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6SummaryAddressArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RouterOspf6 resource.
        """
        pulumi.set(__self__, "router_id", router_id)
        if abr_type is not None:
            pulumi.set(__self__, "abr_type", abr_type)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if auto_cost_ref_bandwidth is not None:
            pulumi.set(__self__, "auto_cost_ref_bandwidth", auto_cost_ref_bandwidth)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if default_information_metric is not None:
            pulumi.set(__self__, "default_information_metric", default_information_metric)
        if default_information_metric_type is not None:
            pulumi.set(__self__, "default_information_metric_type", default_information_metric_type)
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_route_map is not None:
            pulumi.set(__self__, "default_information_route_map", default_information_route_map)
        if default_metric is not None:
            pulumi.set(__self__, "default_metric", default_metric)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log_neighbour_changes is not None:
            pulumi.set(__self__, "log_neighbour_changes", log_neighbour_changes)
        if ospf6_interfaces is not None:
            pulumi.set(__self__, "ospf6_interfaces", ospf6_interfaces)
        if passive_interfaces is not None:
            pulumi.set(__self__, "passive_interfaces", passive_interfaces)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if restart_mode is not None:
            pulumi.set(__self__, "restart_mode", restart_mode)
        if restart_on_topology_change is not None:
            pulumi.set(__self__, "restart_on_topology_change", restart_on_topology_change)
        if restart_period is not None:
            pulumi.set(__self__, "restart_period", restart_period)
        if spf_timers is not None:
            pulumi.set(__self__, "spf_timers", spf_timers)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="abrType")
    def abr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "abr_type")

    @abr_type.setter
    def abr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abr_type", value)

    @property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaArgs']]]]:
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaArgs']]]]):
        pulumi.set(self, "areas", value)

    @property
    @pulumi.getter(name="autoCostRefBandwidth")
    def auto_cost_ref_bandwidth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_cost_ref_bandwidth")

    @auto_cost_ref_bandwidth.setter
    def auto_cost_ref_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_cost_ref_bandwidth", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="defaultInformationMetric")
    def default_information_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_information_metric")

    @default_information_metric.setter
    def default_information_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_information_metric", value)

    @property
    @pulumi.getter(name="defaultInformationMetricType")
    def default_information_metric_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_information_metric_type")

    @default_information_metric_type.setter
    def default_information_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_metric_type", value)

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_originate", value)

    @property
    @pulumi.getter(name="defaultInformationRouteMap")
    def default_information_route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_information_route_map")

    @default_information_route_map.setter
    def default_information_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_route_map", value)

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_metric")

    @default_metric.setter
    def default_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_metric", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_neighbour_changes")

    @log_neighbour_changes.setter
    def log_neighbour_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_neighbour_changes", value)

    @property
    @pulumi.getter(name="ospf6Interfaces")
    def ospf6_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceArgs']]]]:
        return pulumi.get(self, "ospf6_interfaces")

    @ospf6_interfaces.setter
    def ospf6_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceArgs']]]]):
        pulumi.set(self, "ospf6_interfaces", value)

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6PassiveInterfaceArgs']]]]:
        return pulumi.get(self, "passive_interfaces")

    @passive_interfaces.setter
    def passive_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6PassiveInterfaceArgs']]]]):
        pulumi.set(self, "passive_interfaces", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6RedistributeArgs']]]]:
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6RedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restart_mode")

    @restart_mode.setter
    def restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_mode", value)

    @property
    @pulumi.getter(name="restartOnTopologyChange")
    def restart_on_topology_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restart_on_topology_change")

    @restart_on_topology_change.setter
    def restart_on_topology_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_on_topology_change", value)

    @property
    @pulumi.getter(name="restartPeriod")
    def restart_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "restart_period")

    @restart_period.setter
    def restart_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_period", value)

    @property
    @pulumi.getter(name="spfTimers")
    def spf_timers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spf_timers")

    @spf_timers.setter
    def spf_timers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_timers", value)

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6SummaryAddressArgs']]]]:
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6SummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _RouterOspf6State:
    def __init__(__self__, *,
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaArgs']]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 ospf6_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceArgs']]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6PassiveInterfaceArgs']]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6RedistributeArgs']]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6SummaryAddressArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouterOspf6 resources.
        """
        if abr_type is not None:
            pulumi.set(__self__, "abr_type", abr_type)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if auto_cost_ref_bandwidth is not None:
            pulumi.set(__self__, "auto_cost_ref_bandwidth", auto_cost_ref_bandwidth)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if default_information_metric is not None:
            pulumi.set(__self__, "default_information_metric", default_information_metric)
        if default_information_metric_type is not None:
            pulumi.set(__self__, "default_information_metric_type", default_information_metric_type)
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_route_map is not None:
            pulumi.set(__self__, "default_information_route_map", default_information_route_map)
        if default_metric is not None:
            pulumi.set(__self__, "default_metric", default_metric)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log_neighbour_changes is not None:
            pulumi.set(__self__, "log_neighbour_changes", log_neighbour_changes)
        if ospf6_interfaces is not None:
            pulumi.set(__self__, "ospf6_interfaces", ospf6_interfaces)
        if passive_interfaces is not None:
            pulumi.set(__self__, "passive_interfaces", passive_interfaces)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if restart_mode is not None:
            pulumi.set(__self__, "restart_mode", restart_mode)
        if restart_on_topology_change is not None:
            pulumi.set(__self__, "restart_on_topology_change", restart_on_topology_change)
        if restart_period is not None:
            pulumi.set(__self__, "restart_period", restart_period)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if spf_timers is not None:
            pulumi.set(__self__, "spf_timers", spf_timers)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="abrType")
    def abr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "abr_type")

    @abr_type.setter
    def abr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abr_type", value)

    @property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaArgs']]]]:
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaArgs']]]]):
        pulumi.set(self, "areas", value)

    @property
    @pulumi.getter(name="autoCostRefBandwidth")
    def auto_cost_ref_bandwidth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_cost_ref_bandwidth")

    @auto_cost_ref_bandwidth.setter
    def auto_cost_ref_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_cost_ref_bandwidth", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="defaultInformationMetric")
    def default_information_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_information_metric")

    @default_information_metric.setter
    def default_information_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_information_metric", value)

    @property
    @pulumi.getter(name="defaultInformationMetricType")
    def default_information_metric_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_information_metric_type")

    @default_information_metric_type.setter
    def default_information_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_metric_type", value)

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_originate", value)

    @property
    @pulumi.getter(name="defaultInformationRouteMap")
    def default_information_route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_information_route_map")

    @default_information_route_map.setter
    def default_information_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_route_map", value)

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_metric")

    @default_metric.setter
    def default_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_metric", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_neighbour_changes")

    @log_neighbour_changes.setter
    def log_neighbour_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_neighbour_changes", value)

    @property
    @pulumi.getter(name="ospf6Interfaces")
    def ospf6_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceArgs']]]]:
        return pulumi.get(self, "ospf6_interfaces")

    @ospf6_interfaces.setter
    def ospf6_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceArgs']]]]):
        pulumi.set(self, "ospf6_interfaces", value)

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6PassiveInterfaceArgs']]]]:
        return pulumi.get(self, "passive_interfaces")

    @passive_interfaces.setter
    def passive_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6PassiveInterfaceArgs']]]]):
        pulumi.set(self, "passive_interfaces", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6RedistributeArgs']]]]:
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6RedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restart_mode")

    @restart_mode.setter
    def restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_mode", value)

    @property
    @pulumi.getter(name="restartOnTopologyChange")
    def restart_on_topology_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restart_on_topology_change")

    @restart_on_topology_change.setter
    def restart_on_topology_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_on_topology_change", value)

    @property
    @pulumi.getter(name="restartPeriod")
    def restart_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "restart_period")

    @restart_period.setter
    def restart_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_period", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="spfTimers")
    def spf_timers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spf_timers")

    @spf_timers.setter
    def spf_timers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_timers", value)

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6SummaryAddressArgs']]]]:
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6SummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class RouterOspf6(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6AreaArgs']]]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 ospf6_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6Ospf6InterfaceArgs']]]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6PassiveInterfaceArgs']]]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6RedistributeArgs']]]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6SummaryAddressArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RouterOspf6 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouterOspf6Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RouterOspf6 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RouterOspf6Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouterOspf6Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6AreaArgs']]]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 ospf6_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6Ospf6InterfaceArgs']]]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6PassiveInterfaceArgs']]]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6RedistributeArgs']]]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6SummaryAddressArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouterOspf6Args.__new__(RouterOspf6Args)

            __props__.__dict__["abr_type"] = abr_type
            __props__.__dict__["areas"] = areas
            __props__.__dict__["auto_cost_ref_bandwidth"] = auto_cost_ref_bandwidth
            __props__.__dict__["bfd"] = bfd
            __props__.__dict__["default_information_metric"] = default_information_metric
            __props__.__dict__["default_information_metric_type"] = default_information_metric_type
            __props__.__dict__["default_information_originate"] = default_information_originate
            __props__.__dict__["default_information_route_map"] = default_information_route_map
            __props__.__dict__["default_metric"] = default_metric
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["log_neighbour_changes"] = log_neighbour_changes
            __props__.__dict__["ospf6_interfaces"] = ospf6_interfaces
            __props__.__dict__["passive_interfaces"] = passive_interfaces
            __props__.__dict__["redistributes"] = redistributes
            __props__.__dict__["restart_mode"] = restart_mode
            __props__.__dict__["restart_on_topology_change"] = restart_on_topology_change
            __props__.__dict__["restart_period"] = restart_period
            if router_id is None and not opts.urn:
                raise TypeError("Missing required property 'router_id'")
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["spf_timers"] = spf_timers
            __props__.__dict__["summary_addresses"] = summary_addresses
            __props__.__dict__["vdomparam"] = vdomparam
        super(RouterOspf6, __self__).__init__(
            'fortios:index/routerOspf6:RouterOspf6',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abr_type: Optional[pulumi.Input[str]] = None,
            areas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6AreaArgs']]]]] = None,
            auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
            bfd: Optional[pulumi.Input[str]] = None,
            default_information_metric: Optional[pulumi.Input[int]] = None,
            default_information_metric_type: Optional[pulumi.Input[str]] = None,
            default_information_originate: Optional[pulumi.Input[str]] = None,
            default_information_route_map: Optional[pulumi.Input[str]] = None,
            default_metric: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            log_neighbour_changes: Optional[pulumi.Input[str]] = None,
            ospf6_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6Ospf6InterfaceArgs']]]]] = None,
            passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6PassiveInterfaceArgs']]]]] = None,
            redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6RedistributeArgs']]]]] = None,
            restart_mode: Optional[pulumi.Input[str]] = None,
            restart_on_topology_change: Optional[pulumi.Input[str]] = None,
            restart_period: Optional[pulumi.Input[int]] = None,
            router_id: Optional[pulumi.Input[str]] = None,
            spf_timers: Optional[pulumi.Input[str]] = None,
            summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterOspf6SummaryAddressArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'RouterOspf6':
        """
        Get an existing RouterOspf6 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouterOspf6State.__new__(_RouterOspf6State)

        __props__.__dict__["abr_type"] = abr_type
        __props__.__dict__["areas"] = areas
        __props__.__dict__["auto_cost_ref_bandwidth"] = auto_cost_ref_bandwidth
        __props__.__dict__["bfd"] = bfd
        __props__.__dict__["default_information_metric"] = default_information_metric
        __props__.__dict__["default_information_metric_type"] = default_information_metric_type
        __props__.__dict__["default_information_originate"] = default_information_originate
        __props__.__dict__["default_information_route_map"] = default_information_route_map
        __props__.__dict__["default_metric"] = default_metric
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["log_neighbour_changes"] = log_neighbour_changes
        __props__.__dict__["ospf6_interfaces"] = ospf6_interfaces
        __props__.__dict__["passive_interfaces"] = passive_interfaces
        __props__.__dict__["redistributes"] = redistributes
        __props__.__dict__["restart_mode"] = restart_mode
        __props__.__dict__["restart_on_topology_change"] = restart_on_topology_change
        __props__.__dict__["restart_period"] = restart_period
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["spf_timers"] = spf_timers
        __props__.__dict__["summary_addresses"] = summary_addresses
        __props__.__dict__["vdomparam"] = vdomparam
        return RouterOspf6(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abrType")
    def abr_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "abr_type")

    @property
    @pulumi.getter
    def areas(self) -> pulumi.Output[Optional[Sequence['outputs.RouterOspf6Area']]]:
        return pulumi.get(self, "areas")

    @property
    @pulumi.getter(name="autoCostRefBandwidth")
    def auto_cost_ref_bandwidth(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auto_cost_ref_bandwidth")

    @property
    @pulumi.getter
    def bfd(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="defaultInformationMetric")
    def default_information_metric(self) -> pulumi.Output[int]:
        return pulumi.get(self, "default_information_metric")

    @property
    @pulumi.getter(name="defaultInformationMetricType")
    def default_information_metric_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_information_metric_type")

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_information_originate")

    @property
    @pulumi.getter(name="defaultInformationRouteMap")
    def default_information_route_map(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_information_route_map")

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> pulumi.Output[int]:
        return pulumi.get(self, "default_metric")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_neighbour_changes")

    @property
    @pulumi.getter(name="ospf6Interfaces")
    def ospf6_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.RouterOspf6Ospf6Interface']]]:
        return pulumi.get(self, "ospf6_interfaces")

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.RouterOspf6PassiveInterface']]]:
        return pulumi.get(self, "passive_interfaces")

    @property
    @pulumi.getter
    def redistributes(self) -> pulumi.Output[Optional[Sequence['outputs.RouterOspf6Redistribute']]]:
        return pulumi.get(self, "redistributes")

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "restart_mode")

    @property
    @pulumi.getter(name="restartOnTopologyChange")
    def restart_on_topology_change(self) -> pulumi.Output[str]:
        return pulumi.get(self, "restart_on_topology_change")

    @property
    @pulumi.getter(name="restartPeriod")
    def restart_period(self) -> pulumi.Output[int]:
        return pulumi.get(self, "restart_period")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="spfTimers")
    def spf_timers(self) -> pulumi.Output[str]:
        return pulumi.get(self, "spf_timers")

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.RouterOspf6SummaryAddress']]]:
        return pulumi.get(self, "summary_addresses")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

