# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallProfileProtocolOptionsArgs', 'FirewallProfileProtocolOptions']

@pulumi.input_type
class FirewallProfileProtocolOptionsArgs:
    def __init__(__self__, *,
                 cifs: Optional[pulumi.Input['FirewallProfileProtocolOptionsCifsArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input['FirewallProfileProtocolOptionsDnsArgs']] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input['FirewallProfileProtocolOptionsFtpArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input['FirewallProfileProtocolOptionsHttpArgs']] = None,
                 imap: Optional[pulumi.Input['FirewallProfileProtocolOptionsImapArgs']] = None,
                 mail_signature: Optional[pulumi.Input['FirewallProfileProtocolOptionsMailSignatureArgs']] = None,
                 mapi: Optional[pulumi.Input['FirewallProfileProtocolOptionsMapiArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input['FirewallProfileProtocolOptionsNntpArgs']] = None,
                 oversize_log: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input['FirewallProfileProtocolOptionsPop3Args']] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 rpc_over_http: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input['FirewallProfileProtocolOptionsSmtpArgs']] = None,
                 ssh: Optional[pulumi.Input['FirewallProfileProtocolOptionsSshArgs']] = None,
                 switching_protocols_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallProfileProtocolOptions resource.
        """
        if cifs is not None:
            pulumi.set(__self__, "cifs", cifs)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if ftp is not None:
            pulumi.set(__self__, "ftp", ftp)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if imap is not None:
            pulumi.set(__self__, "imap", imap)
        if mail_signature is not None:
            pulumi.set(__self__, "mail_signature", mail_signature)
        if mapi is not None:
            pulumi.set(__self__, "mapi", mapi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nntp is not None:
            pulumi.set(__self__, "nntp", nntp)
        if oversize_log is not None:
            pulumi.set(__self__, "oversize_log", oversize_log)
        if pop3 is not None:
            pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if rpc_over_http is not None:
            pulumi.set(__self__, "rpc_over_http", rpc_over_http)
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if switching_protocols_log is not None:
            pulumi.set(__self__, "switching_protocols_log", switching_protocols_log)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def cifs(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsCifsArgs']]:
        return pulumi.get(self, "cifs")

    @cifs.setter
    def cifs(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsCifsArgs']]):
        pulumi.set(self, "cifs", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsDnsArgs']]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsDnsArgs']]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter
    def ftp(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsFtpArgs']]:
        return pulumi.get(self, "ftp")

    @ftp.setter
    def ftp(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsFtpArgs']]):
        pulumi.set(self, "ftp", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsHttpArgs']]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def imap(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsImapArgs']]:
        return pulumi.get(self, "imap")

    @imap.setter
    def imap(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsImapArgs']]):
        pulumi.set(self, "imap", value)

    @property
    @pulumi.getter(name="mailSignature")
    def mail_signature(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsMailSignatureArgs']]:
        return pulumi.get(self, "mail_signature")

    @mail_signature.setter
    def mail_signature(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsMailSignatureArgs']]):
        pulumi.set(self, "mail_signature", value)

    @property
    @pulumi.getter
    def mapi(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsMapiArgs']]:
        return pulumi.get(self, "mapi")

    @mapi.setter
    def mapi(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsMapiArgs']]):
        pulumi.set(self, "mapi", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nntp(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsNntpArgs']]:
        return pulumi.get(self, "nntp")

    @nntp.setter
    def nntp(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsNntpArgs']]):
        pulumi.set(self, "nntp", value)

    @property
    @pulumi.getter(name="oversizeLog")
    def oversize_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oversize_log")

    @oversize_log.setter
    def oversize_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oversize_log", value)

    @property
    @pulumi.getter
    def pop3(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsPop3Args']]:
        return pulumi.get(self, "pop3")

    @pop3.setter
    def pop3(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsPop3Args']]):
        pulumi.set(self, "pop3", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter(name="rpcOverHttp")
    def rpc_over_http(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rpc_over_http")

    @rpc_over_http.setter
    def rpc_over_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpc_over_http", value)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsSmtpArgs']]:
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsSmtpArgs']]):
        pulumi.set(self, "smtp", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsSshArgs']]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsSshArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter(name="switchingProtocolsLog")
    def switching_protocols_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switching_protocols_log")

    @switching_protocols_log.setter
    def switching_protocols_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switching_protocols_log", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FirewallProfileProtocolOptionsState:
    def __init__(__self__, *,
                 cifs: Optional[pulumi.Input['FirewallProfileProtocolOptionsCifsArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input['FirewallProfileProtocolOptionsDnsArgs']] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input['FirewallProfileProtocolOptionsFtpArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input['FirewallProfileProtocolOptionsHttpArgs']] = None,
                 imap: Optional[pulumi.Input['FirewallProfileProtocolOptionsImapArgs']] = None,
                 mail_signature: Optional[pulumi.Input['FirewallProfileProtocolOptionsMailSignatureArgs']] = None,
                 mapi: Optional[pulumi.Input['FirewallProfileProtocolOptionsMapiArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input['FirewallProfileProtocolOptionsNntpArgs']] = None,
                 oversize_log: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input['FirewallProfileProtocolOptionsPop3Args']] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 rpc_over_http: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input['FirewallProfileProtocolOptionsSmtpArgs']] = None,
                 ssh: Optional[pulumi.Input['FirewallProfileProtocolOptionsSshArgs']] = None,
                 switching_protocols_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallProfileProtocolOptions resources.
        """
        if cifs is not None:
            pulumi.set(__self__, "cifs", cifs)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if ftp is not None:
            pulumi.set(__self__, "ftp", ftp)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if imap is not None:
            pulumi.set(__self__, "imap", imap)
        if mail_signature is not None:
            pulumi.set(__self__, "mail_signature", mail_signature)
        if mapi is not None:
            pulumi.set(__self__, "mapi", mapi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nntp is not None:
            pulumi.set(__self__, "nntp", nntp)
        if oversize_log is not None:
            pulumi.set(__self__, "oversize_log", oversize_log)
        if pop3 is not None:
            pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if rpc_over_http is not None:
            pulumi.set(__self__, "rpc_over_http", rpc_over_http)
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if switching_protocols_log is not None:
            pulumi.set(__self__, "switching_protocols_log", switching_protocols_log)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def cifs(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsCifsArgs']]:
        return pulumi.get(self, "cifs")

    @cifs.setter
    def cifs(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsCifsArgs']]):
        pulumi.set(self, "cifs", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsDnsArgs']]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsDnsArgs']]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter
    def ftp(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsFtpArgs']]:
        return pulumi.get(self, "ftp")

    @ftp.setter
    def ftp(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsFtpArgs']]):
        pulumi.set(self, "ftp", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsHttpArgs']]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def imap(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsImapArgs']]:
        return pulumi.get(self, "imap")

    @imap.setter
    def imap(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsImapArgs']]):
        pulumi.set(self, "imap", value)

    @property
    @pulumi.getter(name="mailSignature")
    def mail_signature(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsMailSignatureArgs']]:
        return pulumi.get(self, "mail_signature")

    @mail_signature.setter
    def mail_signature(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsMailSignatureArgs']]):
        pulumi.set(self, "mail_signature", value)

    @property
    @pulumi.getter
    def mapi(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsMapiArgs']]:
        return pulumi.get(self, "mapi")

    @mapi.setter
    def mapi(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsMapiArgs']]):
        pulumi.set(self, "mapi", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nntp(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsNntpArgs']]:
        return pulumi.get(self, "nntp")

    @nntp.setter
    def nntp(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsNntpArgs']]):
        pulumi.set(self, "nntp", value)

    @property
    @pulumi.getter(name="oversizeLog")
    def oversize_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oversize_log")

    @oversize_log.setter
    def oversize_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oversize_log", value)

    @property
    @pulumi.getter
    def pop3(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsPop3Args']]:
        return pulumi.get(self, "pop3")

    @pop3.setter
    def pop3(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsPop3Args']]):
        pulumi.set(self, "pop3", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter(name="rpcOverHttp")
    def rpc_over_http(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rpc_over_http")

    @rpc_over_http.setter
    def rpc_over_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpc_over_http", value)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsSmtpArgs']]:
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsSmtpArgs']]):
        pulumi.set(self, "smtp", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['FirewallProfileProtocolOptionsSshArgs']]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['FirewallProfileProtocolOptionsSshArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter(name="switchingProtocolsLog")
    def switching_protocols_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switching_protocols_log")

    @switching_protocols_log.setter
    def switching_protocols_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switching_protocols_log", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class FirewallProfileProtocolOptions(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cifs: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsCifsArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsDnsArgs']]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsFtpArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsHttpArgs']]] = None,
                 imap: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsImapArgs']]] = None,
                 mail_signature: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsMailSignatureArgs']]] = None,
                 mapi: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsMapiArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsNntpArgs']]] = None,
                 oversize_log: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsPop3Args']]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 rpc_over_http: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsSmtpArgs']]] = None,
                 ssh: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsSshArgs']]] = None,
                 switching_protocols_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallProfileProtocolOptions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallProfileProtocolOptionsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallProfileProtocolOptions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallProfileProtocolOptionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallProfileProtocolOptionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cifs: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsCifsArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsDnsArgs']]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsFtpArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsHttpArgs']]] = None,
                 imap: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsImapArgs']]] = None,
                 mail_signature: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsMailSignatureArgs']]] = None,
                 mapi: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsMapiArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsNntpArgs']]] = None,
                 oversize_log: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsPop3Args']]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 rpc_over_http: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsSmtpArgs']]] = None,
                 ssh: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsSshArgs']]] = None,
                 switching_protocols_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallProfileProtocolOptionsArgs.__new__(FirewallProfileProtocolOptionsArgs)

            __props__.__dict__["cifs"] = cifs
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dns"] = dns
            __props__.__dict__["feature_set"] = feature_set
            __props__.__dict__["ftp"] = ftp
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["http"] = http
            __props__.__dict__["imap"] = imap
            __props__.__dict__["mail_signature"] = mail_signature
            __props__.__dict__["mapi"] = mapi
            __props__.__dict__["name"] = name
            __props__.__dict__["nntp"] = nntp
            __props__.__dict__["oversize_log"] = oversize_log
            __props__.__dict__["pop3"] = pop3
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["rpc_over_http"] = rpc_over_http
            __props__.__dict__["smtp"] = smtp
            __props__.__dict__["ssh"] = ssh
            __props__.__dict__["switching_protocols_log"] = switching_protocols_log
            __props__.__dict__["vdomparam"] = vdomparam
        super(FirewallProfileProtocolOptions, __self__).__init__(
            'fortios:index/firewallProfileProtocolOptions:FirewallProfileProtocolOptions',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cifs: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsCifsArgs']]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dns: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsDnsArgs']]] = None,
            feature_set: Optional[pulumi.Input[str]] = None,
            ftp: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsFtpArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            http: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsHttpArgs']]] = None,
            imap: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsImapArgs']]] = None,
            mail_signature: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsMailSignatureArgs']]] = None,
            mapi: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsMapiArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nntp: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsNntpArgs']]] = None,
            oversize_log: Optional[pulumi.Input[str]] = None,
            pop3: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsPop3Args']]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            rpc_over_http: Optional[pulumi.Input[str]] = None,
            smtp: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsSmtpArgs']]] = None,
            ssh: Optional[pulumi.Input[pulumi.InputType['FirewallProfileProtocolOptionsSshArgs']]] = None,
            switching_protocols_log: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'FirewallProfileProtocolOptions':
        """
        Get an existing FirewallProfileProtocolOptions resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallProfileProtocolOptionsState.__new__(_FirewallProfileProtocolOptionsState)

        __props__.__dict__["cifs"] = cifs
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dns"] = dns
        __props__.__dict__["feature_set"] = feature_set
        __props__.__dict__["ftp"] = ftp
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["http"] = http
        __props__.__dict__["imap"] = imap
        __props__.__dict__["mail_signature"] = mail_signature
        __props__.__dict__["mapi"] = mapi
        __props__.__dict__["name"] = name
        __props__.__dict__["nntp"] = nntp
        __props__.__dict__["oversize_log"] = oversize_log
        __props__.__dict__["pop3"] = pop3
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["rpc_over_http"] = rpc_over_http
        __props__.__dict__["smtp"] = smtp
        __props__.__dict__["ssh"] = ssh
        __props__.__dict__["switching_protocols_log"] = switching_protocols_log
        __props__.__dict__["vdomparam"] = vdomparam
        return FirewallProfileProtocolOptions(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cifs(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsCifs']:
        return pulumi.get(self, "cifs")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dns(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsDns']:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> pulumi.Output[str]:
        return pulumi.get(self, "feature_set")

    @property
    @pulumi.getter
    def ftp(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsFtp']:
        return pulumi.get(self, "ftp")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def http(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsHttp']:
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def imap(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsImap']:
        return pulumi.get(self, "imap")

    @property
    @pulumi.getter(name="mailSignature")
    def mail_signature(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsMailSignature']:
        return pulumi.get(self, "mail_signature")

    @property
    @pulumi.getter
    def mapi(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsMapi']:
        return pulumi.get(self, "mapi")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nntp(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsNntp']:
        return pulumi.get(self, "nntp")

    @property
    @pulumi.getter(name="oversizeLog")
    def oversize_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "oversize_log")

    @property
    @pulumi.getter
    def pop3(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsPop3']:
        return pulumi.get(self, "pop3")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter(name="rpcOverHttp")
    def rpc_over_http(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rpc_over_http")

    @property
    @pulumi.getter
    def smtp(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsSmtp']:
        return pulumi.get(self, "smtp")

    @property
    @pulumi.getter
    def ssh(self) -> pulumi.Output['outputs.FirewallProfileProtocolOptionsSsh']:
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter(name="switchingProtocolsLog")
    def switching_protocols_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switching_protocols_log")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

