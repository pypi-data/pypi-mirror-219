# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSystemMobileTunnelResult',
    'AwaitableGetSystemMobileTunnelResult',
    'get_system_mobile_tunnel',
    'get_system_mobile_tunnel_output',
]

@pulumi.output_type
class GetSystemMobileTunnelResult:
    """
    A collection of values returned by GetSystemMobileTunnel.
    """
    def __init__(__self__, hash_algorithm=None, home_address=None, home_agent=None, id=None, lifetime=None, n_mhae_key=None, n_mhae_key_type=None, n_mhae_spi=None, name=None, networks=None, reg_interval=None, reg_retry=None, renew_interval=None, roaming_interface=None, status=None, tunnel_mode=None, vdomparam=None):
        if hash_algorithm and not isinstance(hash_algorithm, str):
            raise TypeError("Expected argument 'hash_algorithm' to be a str")
        pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        if home_address and not isinstance(home_address, str):
            raise TypeError("Expected argument 'home_address' to be a str")
        pulumi.set(__self__, "home_address", home_address)
        if home_agent and not isinstance(home_agent, str):
            raise TypeError("Expected argument 'home_agent' to be a str")
        pulumi.set(__self__, "home_agent", home_agent)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifetime and not isinstance(lifetime, int):
            raise TypeError("Expected argument 'lifetime' to be a int")
        pulumi.set(__self__, "lifetime", lifetime)
        if n_mhae_key and not isinstance(n_mhae_key, str):
            raise TypeError("Expected argument 'n_mhae_key' to be a str")
        pulumi.set(__self__, "n_mhae_key", n_mhae_key)
        if n_mhae_key_type and not isinstance(n_mhae_key_type, str):
            raise TypeError("Expected argument 'n_mhae_key_type' to be a str")
        pulumi.set(__self__, "n_mhae_key_type", n_mhae_key_type)
        if n_mhae_spi and not isinstance(n_mhae_spi, int):
            raise TypeError("Expected argument 'n_mhae_spi' to be a int")
        pulumi.set(__self__, "n_mhae_spi", n_mhae_spi)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if networks and not isinstance(networks, list):
            raise TypeError("Expected argument 'networks' to be a list")
        pulumi.set(__self__, "networks", networks)
        if reg_interval and not isinstance(reg_interval, int):
            raise TypeError("Expected argument 'reg_interval' to be a int")
        pulumi.set(__self__, "reg_interval", reg_interval)
        if reg_retry and not isinstance(reg_retry, int):
            raise TypeError("Expected argument 'reg_retry' to be a int")
        pulumi.set(__self__, "reg_retry", reg_retry)
        if renew_interval and not isinstance(renew_interval, int):
            raise TypeError("Expected argument 'renew_interval' to be a int")
        pulumi.set(__self__, "renew_interval", renew_interval)
        if roaming_interface and not isinstance(roaming_interface, str):
            raise TypeError("Expected argument 'roaming_interface' to be a str")
        pulumi.set(__self__, "roaming_interface", roaming_interface)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tunnel_mode and not isinstance(tunnel_mode, str):
            raise TypeError("Expected argument 'tunnel_mode' to be a str")
        pulumi.set(__self__, "tunnel_mode", tunnel_mode)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> str:
        return pulumi.get(self, "hash_algorithm")

    @property
    @pulumi.getter(name="homeAddress")
    def home_address(self) -> str:
        return pulumi.get(self, "home_address")

    @property
    @pulumi.getter(name="homeAgent")
    def home_agent(self) -> str:
        return pulumi.get(self, "home_agent")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lifetime(self) -> int:
        return pulumi.get(self, "lifetime")

    @property
    @pulumi.getter(name="nMhaeKey")
    def n_mhae_key(self) -> str:
        return pulumi.get(self, "n_mhae_key")

    @property
    @pulumi.getter(name="nMhaeKeyType")
    def n_mhae_key_type(self) -> str:
        return pulumi.get(self, "n_mhae_key_type")

    @property
    @pulumi.getter(name="nMhaeSpi")
    def n_mhae_spi(self) -> int:
        return pulumi.get(self, "n_mhae_spi")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetSystemMobileTunnelNetworkResult']:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="regInterval")
    def reg_interval(self) -> int:
        return pulumi.get(self, "reg_interval")

    @property
    @pulumi.getter(name="regRetry")
    def reg_retry(self) -> int:
        return pulumi.get(self, "reg_retry")

    @property
    @pulumi.getter(name="renewInterval")
    def renew_interval(self) -> int:
        return pulumi.get(self, "renew_interval")

    @property
    @pulumi.getter(name="roamingInterface")
    def roaming_interface(self) -> str:
        return pulumi.get(self, "roaming_interface")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tunnelMode")
    def tunnel_mode(self) -> str:
        return pulumi.get(self, "tunnel_mode")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetSystemMobileTunnelResult(GetSystemMobileTunnelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemMobileTunnelResult(
            hash_algorithm=self.hash_algorithm,
            home_address=self.home_address,
            home_agent=self.home_agent,
            id=self.id,
            lifetime=self.lifetime,
            n_mhae_key=self.n_mhae_key,
            n_mhae_key_type=self.n_mhae_key_type,
            n_mhae_spi=self.n_mhae_spi,
            name=self.name,
            networks=self.networks,
            reg_interval=self.reg_interval,
            reg_retry=self.reg_retry,
            renew_interval=self.renew_interval,
            roaming_interface=self.roaming_interface,
            status=self.status,
            tunnel_mode=self.tunnel_mode,
            vdomparam=self.vdomparam)


def get_system_mobile_tunnel(name: Optional[str] = None,
                             vdomparam: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemMobileTunnelResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemMobileTunnel:GetSystemMobileTunnel', __args__, opts=opts, typ=GetSystemMobileTunnelResult).value

    return AwaitableGetSystemMobileTunnelResult(
        hash_algorithm=pulumi.get(__ret__, 'hash_algorithm'),
        home_address=pulumi.get(__ret__, 'home_address'),
        home_agent=pulumi.get(__ret__, 'home_agent'),
        id=pulumi.get(__ret__, 'id'),
        lifetime=pulumi.get(__ret__, 'lifetime'),
        n_mhae_key=pulumi.get(__ret__, 'n_mhae_key'),
        n_mhae_key_type=pulumi.get(__ret__, 'n_mhae_key_type'),
        n_mhae_spi=pulumi.get(__ret__, 'n_mhae_spi'),
        name=pulumi.get(__ret__, 'name'),
        networks=pulumi.get(__ret__, 'networks'),
        reg_interval=pulumi.get(__ret__, 'reg_interval'),
        reg_retry=pulumi.get(__ret__, 'reg_retry'),
        renew_interval=pulumi.get(__ret__, 'renew_interval'),
        roaming_interface=pulumi.get(__ret__, 'roaming_interface'),
        status=pulumi.get(__ret__, 'status'),
        tunnel_mode=pulumi.get(__ret__, 'tunnel_mode'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_system_mobile_tunnel)
def get_system_mobile_tunnel_output(name: Optional[pulumi.Input[str]] = None,
                                    vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemMobileTunnelResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
