# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSystemReplacemsgGroupResult',
    'AwaitableGetSystemReplacemsgGroupResult',
    'get_system_replacemsg_group',
    'get_system_replacemsg_group_output',
]

@pulumi.output_type
class GetSystemReplacemsgGroupResult:
    """
    A collection of values returned by GetSystemReplacemsgGroup.
    """
    def __init__(__self__, admins=None, alertmails=None, auths=None, automations=None, comment=None, custom_messages=None, device_detection_portals=None, ecs=None, fortiguard_wfs=None, ftps=None, group_type=None, https=None, icaps=None, id=None, mails=None, nac_quars=None, name=None, nntps=None, spams=None, sslvpns=None, traffic_quotas=None, utms=None, vdomparam=None, webproxies=None):
        if admins and not isinstance(admins, list):
            raise TypeError("Expected argument 'admins' to be a list")
        pulumi.set(__self__, "admins", admins)
        if alertmails and not isinstance(alertmails, list):
            raise TypeError("Expected argument 'alertmails' to be a list")
        pulumi.set(__self__, "alertmails", alertmails)
        if auths and not isinstance(auths, list):
            raise TypeError("Expected argument 'auths' to be a list")
        pulumi.set(__self__, "auths", auths)
        if automations and not isinstance(automations, list):
            raise TypeError("Expected argument 'automations' to be a list")
        pulumi.set(__self__, "automations", automations)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if custom_messages and not isinstance(custom_messages, list):
            raise TypeError("Expected argument 'custom_messages' to be a list")
        pulumi.set(__self__, "custom_messages", custom_messages)
        if device_detection_portals and not isinstance(device_detection_portals, list):
            raise TypeError("Expected argument 'device_detection_portals' to be a list")
        pulumi.set(__self__, "device_detection_portals", device_detection_portals)
        if ecs and not isinstance(ecs, list):
            raise TypeError("Expected argument 'ecs' to be a list")
        pulumi.set(__self__, "ecs", ecs)
        if fortiguard_wfs and not isinstance(fortiguard_wfs, list):
            raise TypeError("Expected argument 'fortiguard_wfs' to be a list")
        pulumi.set(__self__, "fortiguard_wfs", fortiguard_wfs)
        if ftps and not isinstance(ftps, list):
            raise TypeError("Expected argument 'ftps' to be a list")
        pulumi.set(__self__, "ftps", ftps)
        if group_type and not isinstance(group_type, str):
            raise TypeError("Expected argument 'group_type' to be a str")
        pulumi.set(__self__, "group_type", group_type)
        if https and not isinstance(https, list):
            raise TypeError("Expected argument 'https' to be a list")
        pulumi.set(__self__, "https", https)
        if icaps and not isinstance(icaps, list):
            raise TypeError("Expected argument 'icaps' to be a list")
        pulumi.set(__self__, "icaps", icaps)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mails and not isinstance(mails, list):
            raise TypeError("Expected argument 'mails' to be a list")
        pulumi.set(__self__, "mails", mails)
        if nac_quars and not isinstance(nac_quars, list):
            raise TypeError("Expected argument 'nac_quars' to be a list")
        pulumi.set(__self__, "nac_quars", nac_quars)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nntps and not isinstance(nntps, list):
            raise TypeError("Expected argument 'nntps' to be a list")
        pulumi.set(__self__, "nntps", nntps)
        if spams and not isinstance(spams, list):
            raise TypeError("Expected argument 'spams' to be a list")
        pulumi.set(__self__, "spams", spams)
        if sslvpns and not isinstance(sslvpns, list):
            raise TypeError("Expected argument 'sslvpns' to be a list")
        pulumi.set(__self__, "sslvpns", sslvpns)
        if traffic_quotas and not isinstance(traffic_quotas, list):
            raise TypeError("Expected argument 'traffic_quotas' to be a list")
        pulumi.set(__self__, "traffic_quotas", traffic_quotas)
        if utms and not isinstance(utms, list):
            raise TypeError("Expected argument 'utms' to be a list")
        pulumi.set(__self__, "utms", utms)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if webproxies and not isinstance(webproxies, list):
            raise TypeError("Expected argument 'webproxies' to be a list")
        pulumi.set(__self__, "webproxies", webproxies)

    @property
    @pulumi.getter
    def admins(self) -> Sequence['outputs.GetSystemReplacemsgGroupAdminResult']:
        return pulumi.get(self, "admins")

    @property
    @pulumi.getter
    def alertmails(self) -> Sequence['outputs.GetSystemReplacemsgGroupAlertmailResult']:
        return pulumi.get(self, "alertmails")

    @property
    @pulumi.getter
    def auths(self) -> Sequence['outputs.GetSystemReplacemsgGroupAuthResult']:
        return pulumi.get(self, "auths")

    @property
    @pulumi.getter
    def automations(self) -> Sequence['outputs.GetSystemReplacemsgGroupAutomationResult']:
        return pulumi.get(self, "automations")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="customMessages")
    def custom_messages(self) -> Sequence['outputs.GetSystemReplacemsgGroupCustomMessageResult']:
        return pulumi.get(self, "custom_messages")

    @property
    @pulumi.getter(name="deviceDetectionPortals")
    def device_detection_portals(self) -> Sequence['outputs.GetSystemReplacemsgGroupDeviceDetectionPortalResult']:
        return pulumi.get(self, "device_detection_portals")

    @property
    @pulumi.getter
    def ecs(self) -> Sequence['outputs.GetSystemReplacemsgGroupEcResult']:
        return pulumi.get(self, "ecs")

    @property
    @pulumi.getter(name="fortiguardWfs")
    def fortiguard_wfs(self) -> Sequence['outputs.GetSystemReplacemsgGroupFortiguardWfResult']:
        return pulumi.get(self, "fortiguard_wfs")

    @property
    @pulumi.getter
    def ftps(self) -> Sequence['outputs.GetSystemReplacemsgGroupFtpResult']:
        return pulumi.get(self, "ftps")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> str:
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def https(self) -> Sequence['outputs.GetSystemReplacemsgGroupHttpResult']:
        return pulumi.get(self, "https")

    @property
    @pulumi.getter
    def icaps(self) -> Sequence['outputs.GetSystemReplacemsgGroupIcapResult']:
        return pulumi.get(self, "icaps")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mails(self) -> Sequence['outputs.GetSystemReplacemsgGroupMailResult']:
        return pulumi.get(self, "mails")

    @property
    @pulumi.getter(name="nacQuars")
    def nac_quars(self) -> Sequence['outputs.GetSystemReplacemsgGroupNacQuarResult']:
        return pulumi.get(self, "nac_quars")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nntps(self) -> Sequence['outputs.GetSystemReplacemsgGroupNntpResult']:
        return pulumi.get(self, "nntps")

    @property
    @pulumi.getter
    def spams(self) -> Sequence['outputs.GetSystemReplacemsgGroupSpamResult']:
        return pulumi.get(self, "spams")

    @property
    @pulumi.getter
    def sslvpns(self) -> Sequence['outputs.GetSystemReplacemsgGroupSslvpnResult']:
        return pulumi.get(self, "sslvpns")

    @property
    @pulumi.getter(name="trafficQuotas")
    def traffic_quotas(self) -> Sequence['outputs.GetSystemReplacemsgGroupTrafficQuotaResult']:
        return pulumi.get(self, "traffic_quotas")

    @property
    @pulumi.getter
    def utms(self) -> Sequence['outputs.GetSystemReplacemsgGroupUtmResult']:
        return pulumi.get(self, "utms")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def webproxies(self) -> Sequence['outputs.GetSystemReplacemsgGroupWebproxyResult']:
        return pulumi.get(self, "webproxies")


class AwaitableGetSystemReplacemsgGroupResult(GetSystemReplacemsgGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemReplacemsgGroupResult(
            admins=self.admins,
            alertmails=self.alertmails,
            auths=self.auths,
            automations=self.automations,
            comment=self.comment,
            custom_messages=self.custom_messages,
            device_detection_portals=self.device_detection_portals,
            ecs=self.ecs,
            fortiguard_wfs=self.fortiguard_wfs,
            ftps=self.ftps,
            group_type=self.group_type,
            https=self.https,
            icaps=self.icaps,
            id=self.id,
            mails=self.mails,
            nac_quars=self.nac_quars,
            name=self.name,
            nntps=self.nntps,
            spams=self.spams,
            sslvpns=self.sslvpns,
            traffic_quotas=self.traffic_quotas,
            utms=self.utms,
            vdomparam=self.vdomparam,
            webproxies=self.webproxies)


def get_system_replacemsg_group(name: Optional[str] = None,
                                vdomparam: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemReplacemsgGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemReplacemsgGroup:GetSystemReplacemsgGroup', __args__, opts=opts, typ=GetSystemReplacemsgGroupResult).value

    return AwaitableGetSystemReplacemsgGroupResult(
        admins=pulumi.get(__ret__, 'admins'),
        alertmails=pulumi.get(__ret__, 'alertmails'),
        auths=pulumi.get(__ret__, 'auths'),
        automations=pulumi.get(__ret__, 'automations'),
        comment=pulumi.get(__ret__, 'comment'),
        custom_messages=pulumi.get(__ret__, 'custom_messages'),
        device_detection_portals=pulumi.get(__ret__, 'device_detection_portals'),
        ecs=pulumi.get(__ret__, 'ecs'),
        fortiguard_wfs=pulumi.get(__ret__, 'fortiguard_wfs'),
        ftps=pulumi.get(__ret__, 'ftps'),
        group_type=pulumi.get(__ret__, 'group_type'),
        https=pulumi.get(__ret__, 'https'),
        icaps=pulumi.get(__ret__, 'icaps'),
        id=pulumi.get(__ret__, 'id'),
        mails=pulumi.get(__ret__, 'mails'),
        nac_quars=pulumi.get(__ret__, 'nac_quars'),
        name=pulumi.get(__ret__, 'name'),
        nntps=pulumi.get(__ret__, 'nntps'),
        spams=pulumi.get(__ret__, 'spams'),
        sslvpns=pulumi.get(__ret__, 'sslvpns'),
        traffic_quotas=pulumi.get(__ret__, 'traffic_quotas'),
        utms=pulumi.get(__ret__, 'utms'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        webproxies=pulumi.get(__ret__, 'webproxies'))


@_utilities.lift_output_func(get_system_replacemsg_group)
def get_system_replacemsg_group_output(name: Optional[pulumi.Input[str]] = None,
                                       vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemReplacemsgGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
