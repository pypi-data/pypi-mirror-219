# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['System3GModemCustomArgs', 'System3GModemCustom']

@pulumi.input_type
class System3GModemCustomArgs:
    def __init__(__self__, *,
                 class_id: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 init_string: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 modeswitch_string: Optional[pulumi.Input[str]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 vendor_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a System3GModemCustom resource.
        """
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if init_string is not None:
            pulumi.set(__self__, "init_string", init_string)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if modeswitch_string is not None:
            pulumi.set(__self__, "modeswitch_string", modeswitch_string)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if vendor_id is not None:
            pulumi.set(__self__, "vendor_id", vendor_id)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="initString")
    def init_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "init_string")

    @init_string.setter
    def init_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "init_string", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="modeswitchString")
    def modeswitch_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modeswitch_string")

    @modeswitch_string.setter
    def modeswitch_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modeswitch_string", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)

    @property
    @pulumi.getter(name="vendorId")
    def vendor_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_id")

    @vendor_id.setter
    def vendor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_id", value)


@pulumi.input_type
class _System3GModemCustomState:
    def __init__(__self__, *,
                 class_id: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 init_string: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 modeswitch_string: Optional[pulumi.Input[str]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 vendor_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering System3GModemCustom resources.
        """
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if init_string is not None:
            pulumi.set(__self__, "init_string", init_string)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if modeswitch_string is not None:
            pulumi.set(__self__, "modeswitch_string", modeswitch_string)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if vendor_id is not None:
            pulumi.set(__self__, "vendor_id", vendor_id)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="initString")
    def init_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "init_string")

    @init_string.setter
    def init_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "init_string", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="modeswitchString")
    def modeswitch_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modeswitch_string")

    @modeswitch_string.setter
    def modeswitch_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modeswitch_string", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)

    @property
    @pulumi.getter(name="vendorId")
    def vendor_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_id")

    @vendor_id.setter
    def vendor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_id", value)


class System3GModemCustom(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 class_id: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 init_string: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 modeswitch_string: Optional[pulumi.Input[str]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 vendor_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a System3GModemCustom resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[System3GModemCustomArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a System3GModemCustom resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param System3GModemCustomArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(System3GModemCustomArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 class_id: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 init_string: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 modeswitch_string: Optional[pulumi.Input[str]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 vendor_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = System3GModemCustomArgs.__new__(System3GModemCustomArgs)

            __props__.__dict__["class_id"] = class_id
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["init_string"] = init_string
            __props__.__dict__["model"] = model
            __props__.__dict__["modeswitch_string"] = modeswitch_string
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vendor"] = vendor
            __props__.__dict__["vendor_id"] = vendor_id
        super(System3GModemCustom, __self__).__init__(
            'fortios:index/system3GModemCustom:System3GModemCustom',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            class_id: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            init_string: Optional[pulumi.Input[str]] = None,
            model: Optional[pulumi.Input[str]] = None,
            modeswitch_string: Optional[pulumi.Input[str]] = None,
            product_id: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vendor: Optional[pulumi.Input[str]] = None,
            vendor_id: Optional[pulumi.Input[str]] = None) -> 'System3GModemCustom':
        """
        Get an existing System3GModemCustom resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _System3GModemCustomState.__new__(_System3GModemCustomState)

        __props__.__dict__["class_id"] = class_id
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["init_string"] = init_string
        __props__.__dict__["model"] = model
        __props__.__dict__["modeswitch_string"] = modeswitch_string
        __props__.__dict__["product_id"] = product_id
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vendor"] = vendor
        __props__.__dict__["vendor_id"] = vendor_id
        return System3GModemCustom(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "class_id")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="initString")
    def init_string(self) -> pulumi.Output[str]:
        return pulumi.get(self, "init_string")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[str]:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="modeswitchString")
    def modeswitch_string(self) -> pulumi.Output[str]:
        return pulumi.get(self, "modeswitch_string")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vendor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter(name="vendorId")
    def vendor_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vendor_id")

