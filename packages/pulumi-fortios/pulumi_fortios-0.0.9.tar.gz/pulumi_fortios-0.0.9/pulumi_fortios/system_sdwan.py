# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemSdwanArgs', 'SystemSdwan']

@pulumi.input_type
class SystemSdwanArgs:
    def __init__(__self__, *,
                 app_perf_log_period: Optional[pulumi.Input[int]] = None,
                 duplication_max_num: Optional[pulumi.Input[int]] = None,
                 duplications: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanFailAlertInterfaceArgs']]]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckArgs']]]] = None,
                 load_balance_mode: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanMemberArgs']]]] = None,
                 neighbor_hold_boot_time: Optional[pulumi.Input[int]] = None,
                 neighbor_hold_down: Optional[pulumi.Input[str]] = None,
                 neighbor_hold_down_time: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanNeighborArgs']]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceArgs']]]] = None,
                 speedtest_bypass_routing: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanZoneArgs']]]] = None):
        """
        The set of arguments for constructing a SystemSdwan resource.
        """
        if app_perf_log_period is not None:
            pulumi.set(__self__, "app_perf_log_period", app_perf_log_period)
        if duplication_max_num is not None:
            pulumi.set(__self__, "duplication_max_num", duplication_max_num)
        if duplications is not None:
            pulumi.set(__self__, "duplications", duplications)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fail_alert_interfaces is not None:
            pulumi.set(__self__, "fail_alert_interfaces", fail_alert_interfaces)
        if fail_detect is not None:
            pulumi.set(__self__, "fail_detect", fail_detect)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if load_balance_mode is not None:
            pulumi.set(__self__, "load_balance_mode", load_balance_mode)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if neighbor_hold_boot_time is not None:
            pulumi.set(__self__, "neighbor_hold_boot_time", neighbor_hold_boot_time)
        if neighbor_hold_down is not None:
            pulumi.set(__self__, "neighbor_hold_down", neighbor_hold_down)
        if neighbor_hold_down_time is not None:
            pulumi.set(__self__, "neighbor_hold_down_time", neighbor_hold_down_time)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if speedtest_bypass_routing is not None:
            pulumi.set(__self__, "speedtest_bypass_routing", speedtest_bypass_routing)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="appPerfLogPeriod")
    def app_perf_log_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "app_perf_log_period")

    @app_perf_log_period.setter
    def app_perf_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_perf_log_period", value)

    @property
    @pulumi.getter(name="duplicationMaxNum")
    def duplication_max_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "duplication_max_num")

    @duplication_max_num.setter
    def duplication_max_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duplication_max_num", value)

    @property
    @pulumi.getter
    def duplications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationArgs']]]]:
        return pulumi.get(self, "duplications")

    @duplications.setter
    def duplications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationArgs']]]]):
        pulumi.set(self, "duplications", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failAlertInterfaces")
    def fail_alert_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanFailAlertInterfaceArgs']]]]:
        return pulumi.get(self, "fail_alert_interfaces")

    @fail_alert_interfaces.setter
    def fail_alert_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanFailAlertInterfaceArgs']]]]):
        pulumi.set(self, "fail_alert_interfaces", value)

    @property
    @pulumi.getter(name="failDetect")
    def fail_detect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fail_detect")

    @fail_detect.setter
    def fail_detect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_detect", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckArgs']]]]:
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckArgs']]]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="loadBalanceMode")
    def load_balance_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balance_mode")

    @load_balance_mode.setter
    def load_balance_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balance_mode", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanMemberArgs']]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="neighborHoldBootTime")
    def neighbor_hold_boot_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "neighbor_hold_boot_time")

    @neighbor_hold_boot_time.setter
    def neighbor_hold_boot_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_hold_boot_time", value)

    @property
    @pulumi.getter(name="neighborHoldDown")
    def neighbor_hold_down(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neighbor_hold_down")

    @neighbor_hold_down.setter
    def neighbor_hold_down(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_hold_down", value)

    @property
    @pulumi.getter(name="neighborHoldDownTime")
    def neighbor_hold_down_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "neighbor_hold_down_time")

    @neighbor_hold_down_time.setter
    def neighbor_hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_hold_down_time", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanNeighborArgs']]]]:
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceArgs']]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="speedtestBypassRouting")
    def speedtest_bypass_routing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "speedtest_bypass_routing")

    @speedtest_bypass_routing.setter
    def speedtest_bypass_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speedtest_bypass_routing", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanZoneArgs']]]]:
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _SystemSdwanState:
    def __init__(__self__, *,
                 app_perf_log_period: Optional[pulumi.Input[int]] = None,
                 duplication_max_num: Optional[pulumi.Input[int]] = None,
                 duplications: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanFailAlertInterfaceArgs']]]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckArgs']]]] = None,
                 load_balance_mode: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanMemberArgs']]]] = None,
                 neighbor_hold_boot_time: Optional[pulumi.Input[int]] = None,
                 neighbor_hold_down: Optional[pulumi.Input[str]] = None,
                 neighbor_hold_down_time: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanNeighborArgs']]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceArgs']]]] = None,
                 speedtest_bypass_routing: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanZoneArgs']]]] = None):
        """
        Input properties used for looking up and filtering SystemSdwan resources.
        """
        if app_perf_log_period is not None:
            pulumi.set(__self__, "app_perf_log_period", app_perf_log_period)
        if duplication_max_num is not None:
            pulumi.set(__self__, "duplication_max_num", duplication_max_num)
        if duplications is not None:
            pulumi.set(__self__, "duplications", duplications)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fail_alert_interfaces is not None:
            pulumi.set(__self__, "fail_alert_interfaces", fail_alert_interfaces)
        if fail_detect is not None:
            pulumi.set(__self__, "fail_detect", fail_detect)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if load_balance_mode is not None:
            pulumi.set(__self__, "load_balance_mode", load_balance_mode)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if neighbor_hold_boot_time is not None:
            pulumi.set(__self__, "neighbor_hold_boot_time", neighbor_hold_boot_time)
        if neighbor_hold_down is not None:
            pulumi.set(__self__, "neighbor_hold_down", neighbor_hold_down)
        if neighbor_hold_down_time is not None:
            pulumi.set(__self__, "neighbor_hold_down_time", neighbor_hold_down_time)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if speedtest_bypass_routing is not None:
            pulumi.set(__self__, "speedtest_bypass_routing", speedtest_bypass_routing)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="appPerfLogPeriod")
    def app_perf_log_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "app_perf_log_period")

    @app_perf_log_period.setter
    def app_perf_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_perf_log_period", value)

    @property
    @pulumi.getter(name="duplicationMaxNum")
    def duplication_max_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "duplication_max_num")

    @duplication_max_num.setter
    def duplication_max_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duplication_max_num", value)

    @property
    @pulumi.getter
    def duplications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationArgs']]]]:
        return pulumi.get(self, "duplications")

    @duplications.setter
    def duplications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationArgs']]]]):
        pulumi.set(self, "duplications", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failAlertInterfaces")
    def fail_alert_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanFailAlertInterfaceArgs']]]]:
        return pulumi.get(self, "fail_alert_interfaces")

    @fail_alert_interfaces.setter
    def fail_alert_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanFailAlertInterfaceArgs']]]]):
        pulumi.set(self, "fail_alert_interfaces", value)

    @property
    @pulumi.getter(name="failDetect")
    def fail_detect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fail_detect")

    @fail_detect.setter
    def fail_detect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_detect", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckArgs']]]]:
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckArgs']]]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="loadBalanceMode")
    def load_balance_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balance_mode")

    @load_balance_mode.setter
    def load_balance_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balance_mode", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanMemberArgs']]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="neighborHoldBootTime")
    def neighbor_hold_boot_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "neighbor_hold_boot_time")

    @neighbor_hold_boot_time.setter
    def neighbor_hold_boot_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_hold_boot_time", value)

    @property
    @pulumi.getter(name="neighborHoldDown")
    def neighbor_hold_down(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neighbor_hold_down")

    @neighbor_hold_down.setter
    def neighbor_hold_down(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_hold_down", value)

    @property
    @pulumi.getter(name="neighborHoldDownTime")
    def neighbor_hold_down_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "neighbor_hold_down_time")

    @neighbor_hold_down_time.setter
    def neighbor_hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_hold_down_time", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanNeighborArgs']]]]:
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceArgs']]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="speedtestBypassRouting")
    def speedtest_bypass_routing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "speedtest_bypass_routing")

    @speedtest_bypass_routing.setter
    def speedtest_bypass_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speedtest_bypass_routing", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanZoneArgs']]]]:
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanZoneArgs']]]]):
        pulumi.set(self, "zones", value)


class SystemSdwan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_perf_log_period: Optional[pulumi.Input[int]] = None,
                 duplication_max_num: Optional[pulumi.Input[int]] = None,
                 duplications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanDuplicationArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanFailAlertInterfaceArgs']]]]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanHealthCheckArgs']]]]] = None,
                 load_balance_mode: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanMemberArgs']]]]] = None,
                 neighbor_hold_boot_time: Optional[pulumi.Input[int]] = None,
                 neighbor_hold_down: Optional[pulumi.Input[str]] = None,
                 neighbor_hold_down_time: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanNeighborArgs']]]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanServiceArgs']]]]] = None,
                 speedtest_bypass_routing: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanZoneArgs']]]]] = None,
                 __props__=None):
        """
        Create a SystemSdwan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemSdwanArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemSdwan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemSdwanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemSdwanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_perf_log_period: Optional[pulumi.Input[int]] = None,
                 duplication_max_num: Optional[pulumi.Input[int]] = None,
                 duplications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanDuplicationArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanFailAlertInterfaceArgs']]]]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanHealthCheckArgs']]]]] = None,
                 load_balance_mode: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanMemberArgs']]]]] = None,
                 neighbor_hold_boot_time: Optional[pulumi.Input[int]] = None,
                 neighbor_hold_down: Optional[pulumi.Input[str]] = None,
                 neighbor_hold_down_time: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanNeighborArgs']]]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanServiceArgs']]]]] = None,
                 speedtest_bypass_routing: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanZoneArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemSdwanArgs.__new__(SystemSdwanArgs)

            __props__.__dict__["app_perf_log_period"] = app_perf_log_period
            __props__.__dict__["duplication_max_num"] = duplication_max_num
            __props__.__dict__["duplications"] = duplications
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fail_alert_interfaces"] = fail_alert_interfaces
            __props__.__dict__["fail_detect"] = fail_detect
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["health_checks"] = health_checks
            __props__.__dict__["load_balance_mode"] = load_balance_mode
            __props__.__dict__["members"] = members
            __props__.__dict__["neighbor_hold_boot_time"] = neighbor_hold_boot_time
            __props__.__dict__["neighbor_hold_down"] = neighbor_hold_down
            __props__.__dict__["neighbor_hold_down_time"] = neighbor_hold_down_time
            __props__.__dict__["neighbors"] = neighbors
            __props__.__dict__["services"] = services
            __props__.__dict__["speedtest_bypass_routing"] = speedtest_bypass_routing
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["zones"] = zones
        super(SystemSdwan, __self__).__init__(
            'fortios:index/systemSdwan:SystemSdwan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_perf_log_period: Optional[pulumi.Input[int]] = None,
            duplication_max_num: Optional[pulumi.Input[int]] = None,
            duplications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanDuplicationArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanFailAlertInterfaceArgs']]]]] = None,
            fail_detect: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            health_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanHealthCheckArgs']]]]] = None,
            load_balance_mode: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanMemberArgs']]]]] = None,
            neighbor_hold_boot_time: Optional[pulumi.Input[int]] = None,
            neighbor_hold_down: Optional[pulumi.Input[str]] = None,
            neighbor_hold_down_time: Optional[pulumi.Input[int]] = None,
            neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanNeighborArgs']]]]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanServiceArgs']]]]] = None,
            speedtest_bypass_routing: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSdwanZoneArgs']]]]] = None) -> 'SystemSdwan':
        """
        Get an existing SystemSdwan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemSdwanState.__new__(_SystemSdwanState)

        __props__.__dict__["app_perf_log_period"] = app_perf_log_period
        __props__.__dict__["duplication_max_num"] = duplication_max_num
        __props__.__dict__["duplications"] = duplications
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fail_alert_interfaces"] = fail_alert_interfaces
        __props__.__dict__["fail_detect"] = fail_detect
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["health_checks"] = health_checks
        __props__.__dict__["load_balance_mode"] = load_balance_mode
        __props__.__dict__["members"] = members
        __props__.__dict__["neighbor_hold_boot_time"] = neighbor_hold_boot_time
        __props__.__dict__["neighbor_hold_down"] = neighbor_hold_down
        __props__.__dict__["neighbor_hold_down_time"] = neighbor_hold_down_time
        __props__.__dict__["neighbors"] = neighbors
        __props__.__dict__["services"] = services
        __props__.__dict__["speedtest_bypass_routing"] = speedtest_bypass_routing
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["zones"] = zones
        return SystemSdwan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appPerfLogPeriod")
    def app_perf_log_period(self) -> pulumi.Output[int]:
        return pulumi.get(self, "app_perf_log_period")

    @property
    @pulumi.getter(name="duplicationMaxNum")
    def duplication_max_num(self) -> pulumi.Output[int]:
        return pulumi.get(self, "duplication_max_num")

    @property
    @pulumi.getter
    def duplications(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSdwanDuplication']]]:
        return pulumi.get(self, "duplications")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="failAlertInterfaces")
    def fail_alert_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSdwanFailAlertInterface']]]:
        return pulumi.get(self, "fail_alert_interfaces")

    @property
    @pulumi.getter(name="failDetect")
    def fail_detect(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fail_detect")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSdwanHealthCheck']]]:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="loadBalanceMode")
    def load_balance_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "load_balance_mode")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSdwanMember']]]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="neighborHoldBootTime")
    def neighbor_hold_boot_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "neighbor_hold_boot_time")

    @property
    @pulumi.getter(name="neighborHoldDown")
    def neighbor_hold_down(self) -> pulumi.Output[str]:
        return pulumi.get(self, "neighbor_hold_down")

    @property
    @pulumi.getter(name="neighborHoldDownTime")
    def neighbor_hold_down_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "neighbor_hold_down_time")

    @property
    @pulumi.getter
    def neighbors(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSdwanNeighbor']]]:
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSdwanService']]]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="speedtestBypassRouting")
    def speedtest_bypass_routing(self) -> pulumi.Output[str]:
        return pulumi.get(self, "speedtest_bypass_routing")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence['outputs.SystemSdwanZone']]:
        return pulumi.get(self, "zones")

