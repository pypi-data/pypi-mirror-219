# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExtenderControllerExtenderProfileArgs', 'ExtenderControllerExtenderProfile']

@pulumi.input_type
class ExtenderControllerExtenderProfileArgs:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 cellular: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 lan_extension: Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ExtenderControllerExtenderProfile resource.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if bandwidth_limit is not None:
            pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        if cellular is not None:
            pulumi.set(__self__, "cellular", cellular)
        if enforce_bandwidth is not None:
            pulumi.set(__self__, "enforce_bandwidth", enforce_bandwidth)
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if lan_extension is not None:
            pulumi.set(__self__, "lan_extension", lan_extension)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if login_password_change is not None:
            pulumi.set(__self__, "login_password_change", login_password_change)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_limit")

    @bandwidth_limit.setter
    def bandwidth_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_limit", value)

    @property
    @pulumi.getter
    def cellular(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']]:
        return pulumi.get(self, "cellular")

    @cellular.setter
    def cellular(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']]):
        pulumi.set(self, "cellular", value)

    @property
    @pulumi.getter(name="enforceBandwidth")
    def enforce_bandwidth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enforce_bandwidth")

    @enforce_bandwidth.setter
    def enforce_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_bandwidth", value)

    @property
    @pulumi.getter
    def extension(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extension")

    @extension.setter
    def extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="lanExtension")
    def lan_extension(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']]:
        return pulumi.get(self, "lan_extension")

    @lan_extension.setter
    def lan_extension(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']]):
        pulumi.set(self, "lan_extension", value)

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password", value)

    @property
    @pulumi.getter(name="loginPasswordChange")
    def login_password_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_password_change")

    @login_password_change.setter
    def login_password_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password_change", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ExtenderControllerExtenderProfileState:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 cellular: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 lan_extension: Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExtenderControllerExtenderProfile resources.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if bandwidth_limit is not None:
            pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        if cellular is not None:
            pulumi.set(__self__, "cellular", cellular)
        if enforce_bandwidth is not None:
            pulumi.set(__self__, "enforce_bandwidth", enforce_bandwidth)
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if lan_extension is not None:
            pulumi.set(__self__, "lan_extension", lan_extension)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if login_password_change is not None:
            pulumi.set(__self__, "login_password_change", login_password_change)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_limit")

    @bandwidth_limit.setter
    def bandwidth_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_limit", value)

    @property
    @pulumi.getter
    def cellular(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']]:
        return pulumi.get(self, "cellular")

    @cellular.setter
    def cellular(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']]):
        pulumi.set(self, "cellular", value)

    @property
    @pulumi.getter(name="enforceBandwidth")
    def enforce_bandwidth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enforce_bandwidth")

    @enforce_bandwidth.setter
    def enforce_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_bandwidth", value)

    @property
    @pulumi.getter
    def extension(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extension")

    @extension.setter
    def extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="lanExtension")
    def lan_extension(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']]:
        return pulumi.get(self, "lan_extension")

    @lan_extension.setter
    def lan_extension(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']]):
        pulumi.set(self, "lan_extension", value)

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password", value)

    @property
    @pulumi.getter(name="loginPasswordChange")
    def login_password_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_password_change")

    @login_password_change.setter
    def login_password_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password_change", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class ExtenderControllerExtenderProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 cellular: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileCellularArgs']]] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 lan_extension: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileLanExtensionArgs']]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ExtenderControllerExtenderProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ExtenderControllerExtenderProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ExtenderControllerExtenderProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExtenderControllerExtenderProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExtenderControllerExtenderProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 cellular: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileCellularArgs']]] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 lan_extension: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileLanExtensionArgs']]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExtenderControllerExtenderProfileArgs.__new__(ExtenderControllerExtenderProfileArgs)

            __props__.__dict__["allowaccess"] = allowaccess
            __props__.__dict__["bandwidth_limit"] = bandwidth_limit
            __props__.__dict__["cellular"] = cellular
            __props__.__dict__["enforce_bandwidth"] = enforce_bandwidth
            __props__.__dict__["extension"] = extension
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["lan_extension"] = lan_extension
            __props__.__dict__["login_password"] = login_password
            __props__.__dict__["login_password_change"] = login_password_change
            __props__.__dict__["model"] = model
            __props__.__dict__["name"] = name
            __props__.__dict__["vdomparam"] = vdomparam
        super(ExtenderControllerExtenderProfile, __self__).__init__(
            'fortios:index/extenderControllerExtenderProfile:ExtenderControllerExtenderProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowaccess: Optional[pulumi.Input[str]] = None,
            bandwidth_limit: Optional[pulumi.Input[int]] = None,
            cellular: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileCellularArgs']]] = None,
            enforce_bandwidth: Optional[pulumi.Input[str]] = None,
            extension: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            lan_extension: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileLanExtensionArgs']]] = None,
            login_password: Optional[pulumi.Input[str]] = None,
            login_password_change: Optional[pulumi.Input[str]] = None,
            model: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'ExtenderControllerExtenderProfile':
        """
        Get an existing ExtenderControllerExtenderProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExtenderControllerExtenderProfileState.__new__(_ExtenderControllerExtenderProfileState)

        __props__.__dict__["allowaccess"] = allowaccess
        __props__.__dict__["bandwidth_limit"] = bandwidth_limit
        __props__.__dict__["cellular"] = cellular
        __props__.__dict__["enforce_bandwidth"] = enforce_bandwidth
        __props__.__dict__["extension"] = extension
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["lan_extension"] = lan_extension
        __props__.__dict__["login_password"] = login_password
        __props__.__dict__["login_password_change"] = login_password_change
        __props__.__dict__["model"] = model
        __props__.__dict__["name"] = name
        __props__.__dict__["vdomparam"] = vdomparam
        return ExtenderControllerExtenderProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def allowaccess(self) -> pulumi.Output[str]:
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "bandwidth_limit")

    @property
    @pulumi.getter
    def cellular(self) -> pulumi.Output['outputs.ExtenderControllerExtenderProfileCellular']:
        return pulumi.get(self, "cellular")

    @property
    @pulumi.getter(name="enforceBandwidth")
    def enforce_bandwidth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "enforce_bandwidth")

    @property
    @pulumi.getter
    def extension(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="lanExtension")
    def lan_extension(self) -> pulumi.Output['outputs.ExtenderControllerExtenderProfileLanExtension']:
        return pulumi.get(self, "lan_extension")

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "login_password")

    @property
    @pulumi.getter(name="loginPasswordChange")
    def login_password_change(self) -> pulumi.Output[str]:
        return pulumi.get(self, "login_password_change")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[str]:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

