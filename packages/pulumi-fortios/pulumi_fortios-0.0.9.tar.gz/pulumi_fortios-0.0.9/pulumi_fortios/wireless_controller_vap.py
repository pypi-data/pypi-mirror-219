# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WirelessControllerVapArgs', 'WirelessControllerVap']

@pulumi.input_type
class WirelessControllerVapArgs:
    def __init__(__self__, *,
                 access_control_list: Optional[pulumi.Input[str]] = None,
                 acct_interim_interval: Optional[pulumi.Input[int]] = None,
                 additional_akms: Optional[pulumi.Input[str]] = None,
                 address_group: Optional[pulumi.Input[str]] = None,
                 address_group_policy: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 antivirus_profile: Optional[pulumi.Input[str]] = None,
                 application_detection_engine: Optional[pulumi.Input[str]] = None,
                 application_dscp_marking: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_report_intv: Optional[pulumi.Input[int]] = None,
                 atf_weight: Optional[pulumi.Input[int]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_portal_addr: Optional[pulumi.Input[str]] = None,
                 beacon_advertising: Optional[pulumi.Input[str]] = None,
                 broadcast_ssid: Optional[pulumi.Input[str]] = None,
                 broadcast_suppression: Optional[pulumi.Input[str]] = None,
                 bss_color_partial: Optional[pulumi.Input[str]] = None,
                 bstm_disassociation_imminent: Optional[pulumi.Input[str]] = None,
                 bstm_load_balancing_disassoc_timer: Optional[pulumi.Input[int]] = None,
                 bstm_rssi_disassoc_timer: Optional[pulumi.Input[int]] = None,
                 captive_portal_ac_name: Optional[pulumi.Input[str]] = None,
                 captive_portal_auth_timeout: Optional[pulumi.Input[int]] = None,
                 captive_portal_fw_accounting: Optional[pulumi.Input[str]] = None,
                 captive_portal_macauth_radius_secret: Optional[pulumi.Input[str]] = None,
                 captive_portal_macauth_radius_server: Optional[pulumi.Input[str]] = None,
                 captive_portal_radius_secret: Optional[pulumi.Input[str]] = None,
                 captive_portal_radius_server: Optional[pulumi.Input[str]] = None,
                 captive_portal_session_timeout_interval: Optional[pulumi.Input[int]] = None,
                 dhcp_address_enforcement: Optional[pulumi.Input[str]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[int]] = None,
                 dhcp_option43_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id_insertion: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamic_vlan: Optional[pulumi.Input[str]] = None,
                 eap_reauth: Optional[pulumi.Input[str]] = None,
                 eap_reauth_intv: Optional[pulumi.Input[int]] = None,
                 eapol_key_retries: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[str]] = None,
                 external_fast_roaming: Optional[pulumi.Input[str]] = None,
                 external_logout: Optional[pulumi.Input[str]] = None,
                 external_web: Optional[pulumi.Input[str]] = None,
                 external_web_format: Optional[pulumi.Input[str]] = None,
                 fast_bss_transition: Optional[pulumi.Input[str]] = None,
                 fast_roaming: Optional[pulumi.Input[str]] = None,
                 ft_mobility_domain: Optional[pulumi.Input[int]] = None,
                 ft_over_ds: Optional[pulumi.Input[str]] = None,
                 ft_r0_key_lifetime: Optional[pulumi.Input[int]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[int]] = None,
                 gas_fragmentation_limit: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gtk_rekey: Optional[pulumi.Input[str]] = None,
                 gtk_rekey_intv: Optional[pulumi.Input[int]] = None,
                 high_efficiency: Optional[pulumi.Input[str]] = None,
                 hotspot20_profile: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[str]] = None,
                 intra_vap_privacy: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ipv6_rules: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 keyindex: Optional[pulumi.Input[int]] = None,
                 l3_roaming: Optional[pulumi.Input[str]] = None,
                 l3_roaming_mode: Optional[pulumi.Input[str]] = None,
                 ldpc: Optional[pulumi.Input[str]] = None,
                 local_authentication: Optional[pulumi.Input[str]] = None,
                 local_bridging: Optional[pulumi.Input[str]] = None,
                 local_lan: Optional[pulumi.Input[str]] = None,
                 local_standalone: Optional[pulumi.Input[str]] = None,
                 local_standalone_dns: Optional[pulumi.Input[str]] = None,
                 local_standalone_dns_ip: Optional[pulumi.Input[str]] = None,
                 local_standalone_nat: Optional[pulumi.Input[str]] = None,
                 mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 mac_called_station_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_calling_station_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_case: Optional[pulumi.Input[str]] = None,
                 mac_filter: Optional[pulumi.Input[str]] = None,
                 mac_filter_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMacFilterListArgs']]]] = None,
                 mac_filter_policy_other: Optional[pulumi.Input[str]] = None,
                 mac_password_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_username_delimiter: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_clients_ap: Optional[pulumi.Input[int]] = None,
                 mbo: Optional[pulumi.Input[str]] = None,
                 mbo_cell_data_conn_pref: Optional[pulumi.Input[str]] = None,
                 me_disable_thresh: Optional[pulumi.Input[int]] = None,
                 mesh_backhaul: Optional[pulumi.Input[str]] = None,
                 mpsk: Optional[pulumi.Input[str]] = None,
                 mpsk_concurrent_clients: Optional[pulumi.Input[int]] = None,
                 mpsk_keys: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyArgs']]]] = None,
                 mpsk_profile: Optional[pulumi.Input[str]] = None,
                 mu_mimo: Optional[pulumi.Input[str]] = None,
                 multicast_enhance: Optional[pulumi.Input[str]] = None,
                 multicast_rate: Optional[pulumi.Input[str]] = None,
                 nac: Optional[pulumi.Input[str]] = None,
                 nac_profile: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbor_report_dual_band: Optional[pulumi.Input[str]] = None,
                 okc: Optional[pulumi.Input[str]] = None,
                 osen: Optional[pulumi.Input[str]] = None,
                 owe_groups: Optional[pulumi.Input[str]] = None,
                 owe_transition: Optional[pulumi.Input[str]] = None,
                 owe_transition_ssid: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pmf: Optional[pulumi.Input[str]] = None,
                 pmf_assoc_comeback_timeout: Optional[pulumi.Input[int]] = None,
                 pmf_sa_query_retry_timeout: Optional[pulumi.Input[int]] = None,
                 port_macauth: Optional[pulumi.Input[str]] = None,
                 port_macauth_reauth_timeout: Optional[pulumi.Input[int]] = None,
                 port_macauth_timeout: Optional[pulumi.Input[int]] = None,
                 portal_message_override_group: Optional[pulumi.Input[str]] = None,
                 portal_message_overrides: Optional[pulumi.Input['WirelessControllerVapPortalMessageOverridesArgs']] = None,
                 portal_type: Optional[pulumi.Input[str]] = None,
                 primary_wag_profile: Optional[pulumi.Input[str]] = None,
                 probe_resp_suppression: Optional[pulumi.Input[str]] = None,
                 probe_resp_threshold: Optional[pulumi.Input[str]] = None,
                 ptk_rekey: Optional[pulumi.Input[str]] = None,
                 ptk_rekey_intv: Optional[pulumi.Input[int]] = None,
                 qos_profile: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 radio2g_threshold: Optional[pulumi.Input[str]] = None,
                 radio5g_threshold: Optional[pulumi.Input[str]] = None,
                 radio_sensitivity: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_block_interval: Optional[pulumi.Input[int]] = None,
                 radius_mac_auth_server: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapRadiusMacAuthUsergroupArgs']]]] = None,
                 radius_mac_mpsk_auth: Optional[pulumi.Input[str]] = None,
                 radius_mac_mpsk_timeout: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 rates11a: Optional[pulumi.Input[str]] = None,
                 rates11ac_mcs_map: Optional[pulumi.Input[str]] = None,
                 rates11ac_ss12: Optional[pulumi.Input[str]] = None,
                 rates11ac_ss34: Optional[pulumi.Input[str]] = None,
                 rates11ax_mcs_map: Optional[pulumi.Input[str]] = None,
                 rates11ax_ss12: Optional[pulumi.Input[str]] = None,
                 rates11ax_ss34: Optional[pulumi.Input[str]] = None,
                 rates11bg: Optional[pulumi.Input[str]] = None,
                 rates11n_ss12: Optional[pulumi.Input[str]] = None,
                 rates11n_ss34: Optional[pulumi.Input[str]] = None,
                 sae_groups: Optional[pulumi.Input[str]] = None,
                 sae_h2e_only: Optional[pulumi.Input[str]] = None,
                 sae_password: Optional[pulumi.Input[str]] = None,
                 sae_pk: Optional[pulumi.Input[str]] = None,
                 sae_private_key: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 secondary_wag_profile: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 security_exempt_list: Optional[pulumi.Input[str]] = None,
                 security_obsolete_option: Optional[pulumi.Input[str]] = None,
                 security_redirect_url: Optional[pulumi.Input[str]] = None,
                 selected_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapSelectedUsergroupArgs']]]] = None,
                 split_tunneling: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 sticky_client_remove: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold2g: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold5g: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold6g: Optional[pulumi.Input[str]] = None,
                 target_wake_time: Optional[pulumi.Input[str]] = None,
                 tkip_counter_measure: Optional[pulumi.Input[str]] = None,
                 tunnel_echo_interval: Optional[pulumi.Input[int]] = None,
                 tunnel_fallback_interval: Optional[pulumi.Input[int]] = None,
                 usergroups: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapUsergroupArgs']]]] = None,
                 utm_log: Optional[pulumi.Input[str]] = None,
                 utm_profile: Optional[pulumi.Input[str]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_auto: Optional[pulumi.Input[str]] = None,
                 vlan_names: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanNameArgs']]]] = None,
                 vlan_pooling: Optional[pulumi.Input[str]] = None,
                 vlan_pools: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanPoolArgs']]]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 voice_enterprise: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WirelessControllerVap resource.
        """
        if access_control_list is not None:
            pulumi.set(__self__, "access_control_list", access_control_list)
        if acct_interim_interval is not None:
            pulumi.set(__self__, "acct_interim_interval", acct_interim_interval)
        if additional_akms is not None:
            pulumi.set(__self__, "additional_akms", additional_akms)
        if address_group is not None:
            pulumi.set(__self__, "address_group", address_group)
        if address_group_policy is not None:
            pulumi.set(__self__, "address_group_policy", address_group_policy)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if antivirus_profile is not None:
            pulumi.set(__self__, "antivirus_profile", antivirus_profile)
        if application_detection_engine is not None:
            pulumi.set(__self__, "application_detection_engine", application_detection_engine)
        if application_dscp_marking is not None:
            pulumi.set(__self__, "application_dscp_marking", application_dscp_marking)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if application_report_intv is not None:
            pulumi.set(__self__, "application_report_intv", application_report_intv)
        if atf_weight is not None:
            pulumi.set(__self__, "atf_weight", atf_weight)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_portal_addr is not None:
            pulumi.set(__self__, "auth_portal_addr", auth_portal_addr)
        if beacon_advertising is not None:
            pulumi.set(__self__, "beacon_advertising", beacon_advertising)
        if broadcast_ssid is not None:
            pulumi.set(__self__, "broadcast_ssid", broadcast_ssid)
        if broadcast_suppression is not None:
            pulumi.set(__self__, "broadcast_suppression", broadcast_suppression)
        if bss_color_partial is not None:
            pulumi.set(__self__, "bss_color_partial", bss_color_partial)
        if bstm_disassociation_imminent is not None:
            pulumi.set(__self__, "bstm_disassociation_imminent", bstm_disassociation_imminent)
        if bstm_load_balancing_disassoc_timer is not None:
            pulumi.set(__self__, "bstm_load_balancing_disassoc_timer", bstm_load_balancing_disassoc_timer)
        if bstm_rssi_disassoc_timer is not None:
            pulumi.set(__self__, "bstm_rssi_disassoc_timer", bstm_rssi_disassoc_timer)
        if captive_portal_ac_name is not None:
            pulumi.set(__self__, "captive_portal_ac_name", captive_portal_ac_name)
        if captive_portal_auth_timeout is not None:
            pulumi.set(__self__, "captive_portal_auth_timeout", captive_portal_auth_timeout)
        if captive_portal_fw_accounting is not None:
            pulumi.set(__self__, "captive_portal_fw_accounting", captive_portal_fw_accounting)
        if captive_portal_macauth_radius_secret is not None:
            pulumi.set(__self__, "captive_portal_macauth_radius_secret", captive_portal_macauth_radius_secret)
        if captive_portal_macauth_radius_server is not None:
            pulumi.set(__self__, "captive_portal_macauth_radius_server", captive_portal_macauth_radius_server)
        if captive_portal_radius_secret is not None:
            pulumi.set(__self__, "captive_portal_radius_secret", captive_portal_radius_secret)
        if captive_portal_radius_server is not None:
            pulumi.set(__self__, "captive_portal_radius_server", captive_portal_radius_server)
        if captive_portal_session_timeout_interval is not None:
            pulumi.set(__self__, "captive_portal_session_timeout_interval", captive_portal_session_timeout_interval)
        if dhcp_address_enforcement is not None:
            pulumi.set(__self__, "dhcp_address_enforcement", dhcp_address_enforcement)
        if dhcp_lease_time is not None:
            pulumi.set(__self__, "dhcp_lease_time", dhcp_lease_time)
        if dhcp_option43_insertion is not None:
            pulumi.set(__self__, "dhcp_option43_insertion", dhcp_option43_insertion)
        if dhcp_option82_circuit_id_insertion is not None:
            pulumi.set(__self__, "dhcp_option82_circuit_id_insertion", dhcp_option82_circuit_id_insertion)
        if dhcp_option82_insertion is not None:
            pulumi.set(__self__, "dhcp_option82_insertion", dhcp_option82_insertion)
        if dhcp_option82_remote_id_insertion is not None:
            pulumi.set(__self__, "dhcp_option82_remote_id_insertion", dhcp_option82_remote_id_insertion)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if dynamic_vlan is not None:
            pulumi.set(__self__, "dynamic_vlan", dynamic_vlan)
        if eap_reauth is not None:
            pulumi.set(__self__, "eap_reauth", eap_reauth)
        if eap_reauth_intv is not None:
            pulumi.set(__self__, "eap_reauth_intv", eap_reauth_intv)
        if eapol_key_retries is not None:
            pulumi.set(__self__, "eapol_key_retries", eapol_key_retries)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if external_fast_roaming is not None:
            pulumi.set(__self__, "external_fast_roaming", external_fast_roaming)
        if external_logout is not None:
            pulumi.set(__self__, "external_logout", external_logout)
        if external_web is not None:
            pulumi.set(__self__, "external_web", external_web)
        if external_web_format is not None:
            pulumi.set(__self__, "external_web_format", external_web_format)
        if fast_bss_transition is not None:
            pulumi.set(__self__, "fast_bss_transition", fast_bss_transition)
        if fast_roaming is not None:
            pulumi.set(__self__, "fast_roaming", fast_roaming)
        if ft_mobility_domain is not None:
            pulumi.set(__self__, "ft_mobility_domain", ft_mobility_domain)
        if ft_over_ds is not None:
            pulumi.set(__self__, "ft_over_ds", ft_over_ds)
        if ft_r0_key_lifetime is not None:
            pulumi.set(__self__, "ft_r0_key_lifetime", ft_r0_key_lifetime)
        if gas_comeback_delay is not None:
            pulumi.set(__self__, "gas_comeback_delay", gas_comeback_delay)
        if gas_fragmentation_limit is not None:
            pulumi.set(__self__, "gas_fragmentation_limit", gas_fragmentation_limit)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gtk_rekey is not None:
            pulumi.set(__self__, "gtk_rekey", gtk_rekey)
        if gtk_rekey_intv is not None:
            pulumi.set(__self__, "gtk_rekey_intv", gtk_rekey_intv)
        if high_efficiency is not None:
            pulumi.set(__self__, "high_efficiency", high_efficiency)
        if hotspot20_profile is not None:
            pulumi.set(__self__, "hotspot20_profile", hotspot20_profile)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if intra_vap_privacy is not None:
            pulumi.set(__self__, "intra_vap_privacy", intra_vap_privacy)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ipv6_rules is not None:
            pulumi.set(__self__, "ipv6_rules", ipv6_rules)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if keyindex is not None:
            pulumi.set(__self__, "keyindex", keyindex)
        if l3_roaming is not None:
            pulumi.set(__self__, "l3_roaming", l3_roaming)
        if l3_roaming_mode is not None:
            pulumi.set(__self__, "l3_roaming_mode", l3_roaming_mode)
        if ldpc is not None:
            pulumi.set(__self__, "ldpc", ldpc)
        if local_authentication is not None:
            pulumi.set(__self__, "local_authentication", local_authentication)
        if local_bridging is not None:
            pulumi.set(__self__, "local_bridging", local_bridging)
        if local_lan is not None:
            pulumi.set(__self__, "local_lan", local_lan)
        if local_standalone is not None:
            pulumi.set(__self__, "local_standalone", local_standalone)
        if local_standalone_dns is not None:
            pulumi.set(__self__, "local_standalone_dns", local_standalone_dns)
        if local_standalone_dns_ip is not None:
            pulumi.set(__self__, "local_standalone_dns_ip", local_standalone_dns_ip)
        if local_standalone_nat is not None:
            pulumi.set(__self__, "local_standalone_nat", local_standalone_nat)
        if mac_auth_bypass is not None:
            pulumi.set(__self__, "mac_auth_bypass", mac_auth_bypass)
        if mac_called_station_delimiter is not None:
            pulumi.set(__self__, "mac_called_station_delimiter", mac_called_station_delimiter)
        if mac_calling_station_delimiter is not None:
            pulumi.set(__self__, "mac_calling_station_delimiter", mac_calling_station_delimiter)
        if mac_case is not None:
            pulumi.set(__self__, "mac_case", mac_case)
        if mac_filter is not None:
            pulumi.set(__self__, "mac_filter", mac_filter)
        if mac_filter_lists is not None:
            pulumi.set(__self__, "mac_filter_lists", mac_filter_lists)
        if mac_filter_policy_other is not None:
            pulumi.set(__self__, "mac_filter_policy_other", mac_filter_policy_other)
        if mac_password_delimiter is not None:
            pulumi.set(__self__, "mac_password_delimiter", mac_password_delimiter)
        if mac_username_delimiter is not None:
            pulumi.set(__self__, "mac_username_delimiter", mac_username_delimiter)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_clients_ap is not None:
            pulumi.set(__self__, "max_clients_ap", max_clients_ap)
        if mbo is not None:
            pulumi.set(__self__, "mbo", mbo)
        if mbo_cell_data_conn_pref is not None:
            pulumi.set(__self__, "mbo_cell_data_conn_pref", mbo_cell_data_conn_pref)
        if me_disable_thresh is not None:
            pulumi.set(__self__, "me_disable_thresh", me_disable_thresh)
        if mesh_backhaul is not None:
            pulumi.set(__self__, "mesh_backhaul", mesh_backhaul)
        if mpsk is not None:
            pulumi.set(__self__, "mpsk", mpsk)
        if mpsk_concurrent_clients is not None:
            pulumi.set(__self__, "mpsk_concurrent_clients", mpsk_concurrent_clients)
        if mpsk_keys is not None:
            pulumi.set(__self__, "mpsk_keys", mpsk_keys)
        if mpsk_profile is not None:
            pulumi.set(__self__, "mpsk_profile", mpsk_profile)
        if mu_mimo is not None:
            pulumi.set(__self__, "mu_mimo", mu_mimo)
        if multicast_enhance is not None:
            pulumi.set(__self__, "multicast_enhance", multicast_enhance)
        if multicast_rate is not None:
            pulumi.set(__self__, "multicast_rate", multicast_rate)
        if nac is not None:
            pulumi.set(__self__, "nac", nac)
        if nac_profile is not None:
            pulumi.set(__self__, "nac_profile", nac_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbor_report_dual_band is not None:
            pulumi.set(__self__, "neighbor_report_dual_band", neighbor_report_dual_band)
        if okc is not None:
            pulumi.set(__self__, "okc", okc)
        if osen is not None:
            pulumi.set(__self__, "osen", osen)
        if owe_groups is not None:
            pulumi.set(__self__, "owe_groups", owe_groups)
        if owe_transition is not None:
            pulumi.set(__self__, "owe_transition", owe_transition)
        if owe_transition_ssid is not None:
            pulumi.set(__self__, "owe_transition_ssid", owe_transition_ssid)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pmf is not None:
            pulumi.set(__self__, "pmf", pmf)
        if pmf_assoc_comeback_timeout is not None:
            pulumi.set(__self__, "pmf_assoc_comeback_timeout", pmf_assoc_comeback_timeout)
        if pmf_sa_query_retry_timeout is not None:
            pulumi.set(__self__, "pmf_sa_query_retry_timeout", pmf_sa_query_retry_timeout)
        if port_macauth is not None:
            pulumi.set(__self__, "port_macauth", port_macauth)
        if port_macauth_reauth_timeout is not None:
            pulumi.set(__self__, "port_macauth_reauth_timeout", port_macauth_reauth_timeout)
        if port_macauth_timeout is not None:
            pulumi.set(__self__, "port_macauth_timeout", port_macauth_timeout)
        if portal_message_override_group is not None:
            pulumi.set(__self__, "portal_message_override_group", portal_message_override_group)
        if portal_message_overrides is not None:
            pulumi.set(__self__, "portal_message_overrides", portal_message_overrides)
        if portal_type is not None:
            pulumi.set(__self__, "portal_type", portal_type)
        if primary_wag_profile is not None:
            pulumi.set(__self__, "primary_wag_profile", primary_wag_profile)
        if probe_resp_suppression is not None:
            pulumi.set(__self__, "probe_resp_suppression", probe_resp_suppression)
        if probe_resp_threshold is not None:
            pulumi.set(__self__, "probe_resp_threshold", probe_resp_threshold)
        if ptk_rekey is not None:
            pulumi.set(__self__, "ptk_rekey", ptk_rekey)
        if ptk_rekey_intv is not None:
            pulumi.set(__self__, "ptk_rekey_intv", ptk_rekey_intv)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if radio2g_threshold is not None:
            pulumi.set(__self__, "radio2g_threshold", radio2g_threshold)
        if radio5g_threshold is not None:
            pulumi.set(__self__, "radio5g_threshold", radio5g_threshold)
        if radio_sensitivity is not None:
            pulumi.set(__self__, "radio_sensitivity", radio_sensitivity)
        if radius_mac_auth is not None:
            pulumi.set(__self__, "radius_mac_auth", radius_mac_auth)
        if radius_mac_auth_block_interval is not None:
            pulumi.set(__self__, "radius_mac_auth_block_interval", radius_mac_auth_block_interval)
        if radius_mac_auth_server is not None:
            pulumi.set(__self__, "radius_mac_auth_server", radius_mac_auth_server)
        if radius_mac_auth_usergroups is not None:
            pulumi.set(__self__, "radius_mac_auth_usergroups", radius_mac_auth_usergroups)
        if radius_mac_mpsk_auth is not None:
            pulumi.set(__self__, "radius_mac_mpsk_auth", radius_mac_mpsk_auth)
        if radius_mac_mpsk_timeout is not None:
            pulumi.set(__self__, "radius_mac_mpsk_timeout", radius_mac_mpsk_timeout)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if rates11a is not None:
            pulumi.set(__self__, "rates11a", rates11a)
        if rates11ac_mcs_map is not None:
            pulumi.set(__self__, "rates11ac_mcs_map", rates11ac_mcs_map)
        if rates11ac_ss12 is not None:
            pulumi.set(__self__, "rates11ac_ss12", rates11ac_ss12)
        if rates11ac_ss34 is not None:
            pulumi.set(__self__, "rates11ac_ss34", rates11ac_ss34)
        if rates11ax_mcs_map is not None:
            pulumi.set(__self__, "rates11ax_mcs_map", rates11ax_mcs_map)
        if rates11ax_ss12 is not None:
            pulumi.set(__self__, "rates11ax_ss12", rates11ax_ss12)
        if rates11ax_ss34 is not None:
            pulumi.set(__self__, "rates11ax_ss34", rates11ax_ss34)
        if rates11bg is not None:
            pulumi.set(__self__, "rates11bg", rates11bg)
        if rates11n_ss12 is not None:
            pulumi.set(__self__, "rates11n_ss12", rates11n_ss12)
        if rates11n_ss34 is not None:
            pulumi.set(__self__, "rates11n_ss34", rates11n_ss34)
        if sae_groups is not None:
            pulumi.set(__self__, "sae_groups", sae_groups)
        if sae_h2e_only is not None:
            pulumi.set(__self__, "sae_h2e_only", sae_h2e_only)
        if sae_password is not None:
            pulumi.set(__self__, "sae_password", sae_password)
        if sae_pk is not None:
            pulumi.set(__self__, "sae_pk", sae_pk)
        if sae_private_key is not None:
            pulumi.set(__self__, "sae_private_key", sae_private_key)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if secondary_wag_profile is not None:
            pulumi.set(__self__, "secondary_wag_profile", secondary_wag_profile)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if security_exempt_list is not None:
            pulumi.set(__self__, "security_exempt_list", security_exempt_list)
        if security_obsolete_option is not None:
            pulumi.set(__self__, "security_obsolete_option", security_obsolete_option)
        if security_redirect_url is not None:
            pulumi.set(__self__, "security_redirect_url", security_redirect_url)
        if selected_usergroups is not None:
            pulumi.set(__self__, "selected_usergroups", selected_usergroups)
        if split_tunneling is not None:
            pulumi.set(__self__, "split_tunneling", split_tunneling)
        if ssid is not None:
            pulumi.set(__self__, "ssid", ssid)
        if sticky_client_remove is not None:
            pulumi.set(__self__, "sticky_client_remove", sticky_client_remove)
        if sticky_client_threshold2g is not None:
            pulumi.set(__self__, "sticky_client_threshold2g", sticky_client_threshold2g)
        if sticky_client_threshold5g is not None:
            pulumi.set(__self__, "sticky_client_threshold5g", sticky_client_threshold5g)
        if sticky_client_threshold6g is not None:
            pulumi.set(__self__, "sticky_client_threshold6g", sticky_client_threshold6g)
        if target_wake_time is not None:
            pulumi.set(__self__, "target_wake_time", target_wake_time)
        if tkip_counter_measure is not None:
            pulumi.set(__self__, "tkip_counter_measure", tkip_counter_measure)
        if tunnel_echo_interval is not None:
            pulumi.set(__self__, "tunnel_echo_interval", tunnel_echo_interval)
        if tunnel_fallback_interval is not None:
            pulumi.set(__self__, "tunnel_fallback_interval", tunnel_fallback_interval)
        if usergroups is not None:
            pulumi.set(__self__, "usergroups", usergroups)
        if utm_log is not None:
            pulumi.set(__self__, "utm_log", utm_log)
        if utm_profile is not None:
            pulumi.set(__self__, "utm_profile", utm_profile)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_auto is not None:
            pulumi.set(__self__, "vlan_auto", vlan_auto)
        if vlan_names is not None:
            pulumi.set(__self__, "vlan_names", vlan_names)
        if vlan_pooling is not None:
            pulumi.set(__self__, "vlan_pooling", vlan_pooling)
        if vlan_pools is not None:
            pulumi.set(__self__, "vlan_pools", vlan_pools)
        if vlanid is not None:
            pulumi.set(__self__, "vlanid", vlanid)
        if voice_enterprise is not None:
            pulumi.set(__self__, "voice_enterprise", voice_enterprise)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)

    @property
    @pulumi.getter(name="accessControlList")
    def access_control_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_control_list")

    @access_control_list.setter
    def access_control_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_control_list", value)

    @property
    @pulumi.getter(name="acctInterimInterval")
    def acct_interim_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "acct_interim_interval")

    @acct_interim_interval.setter
    def acct_interim_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acct_interim_interval", value)

    @property
    @pulumi.getter(name="additionalAkms")
    def additional_akms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_akms")

    @additional_akms.setter
    def additional_akms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_akms", value)

    @property
    @pulumi.getter(name="addressGroup")
    def address_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_group")

    @address_group.setter
    def address_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_group", value)

    @property
    @pulumi.getter(name="addressGroupPolicy")
    def address_group_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_group_policy")

    @address_group_policy.setter
    def address_group_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_group_policy", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="antivirusProfile")
    def antivirus_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "antivirus_profile")

    @antivirus_profile.setter
    def antivirus_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antivirus_profile", value)

    @property
    @pulumi.getter(name="applicationDetectionEngine")
    def application_detection_engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_detection_engine")

    @application_detection_engine.setter
    def application_detection_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_detection_engine", value)

    @property
    @pulumi.getter(name="applicationDscpMarking")
    def application_dscp_marking(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_dscp_marking")

    @application_dscp_marking.setter
    def application_dscp_marking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_dscp_marking", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="applicationReportIntv")
    def application_report_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "application_report_intv")

    @application_report_intv.setter
    def application_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "application_report_intv", value)

    @property
    @pulumi.getter(name="atfWeight")
    def atf_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "atf_weight")

    @atf_weight.setter
    def atf_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "atf_weight", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authPortalAddr")
    def auth_portal_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_portal_addr")

    @auth_portal_addr.setter
    def auth_portal_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_portal_addr", value)

    @property
    @pulumi.getter(name="beaconAdvertising")
    def beacon_advertising(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "beacon_advertising")

    @beacon_advertising.setter
    def beacon_advertising(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "beacon_advertising", value)

    @property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "broadcast_ssid")

    @broadcast_ssid.setter
    def broadcast_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast_ssid", value)

    @property
    @pulumi.getter(name="broadcastSuppression")
    def broadcast_suppression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "broadcast_suppression")

    @broadcast_suppression.setter
    def broadcast_suppression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast_suppression", value)

    @property
    @pulumi.getter(name="bssColorPartial")
    def bss_color_partial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bss_color_partial")

    @bss_color_partial.setter
    def bss_color_partial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_partial", value)

    @property
    @pulumi.getter(name="bstmDisassociationImminent")
    def bstm_disassociation_imminent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bstm_disassociation_imminent")

    @bstm_disassociation_imminent.setter
    def bstm_disassociation_imminent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bstm_disassociation_imminent", value)

    @property
    @pulumi.getter(name="bstmLoadBalancingDisassocTimer")
    def bstm_load_balancing_disassoc_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bstm_load_balancing_disassoc_timer")

    @bstm_load_balancing_disassoc_timer.setter
    def bstm_load_balancing_disassoc_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bstm_load_balancing_disassoc_timer", value)

    @property
    @pulumi.getter(name="bstmRssiDisassocTimer")
    def bstm_rssi_disassoc_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bstm_rssi_disassoc_timer")

    @bstm_rssi_disassoc_timer.setter
    def bstm_rssi_disassoc_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bstm_rssi_disassoc_timer", value)

    @property
    @pulumi.getter(name="captivePortalAcName")
    def captive_portal_ac_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_ac_name")

    @captive_portal_ac_name.setter
    def captive_portal_ac_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_ac_name", value)

    @property
    @pulumi.getter(name="captivePortalAuthTimeout")
    def captive_portal_auth_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "captive_portal_auth_timeout")

    @captive_portal_auth_timeout.setter
    def captive_portal_auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "captive_portal_auth_timeout", value)

    @property
    @pulumi.getter(name="captivePortalFwAccounting")
    def captive_portal_fw_accounting(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_fw_accounting")

    @captive_portal_fw_accounting.setter
    def captive_portal_fw_accounting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_fw_accounting", value)

    @property
    @pulumi.getter(name="captivePortalMacauthRadiusSecret")
    def captive_portal_macauth_radius_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_macauth_radius_secret")

    @captive_portal_macauth_radius_secret.setter
    def captive_portal_macauth_radius_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_macauth_radius_secret", value)

    @property
    @pulumi.getter(name="captivePortalMacauthRadiusServer")
    def captive_portal_macauth_radius_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_macauth_radius_server")

    @captive_portal_macauth_radius_server.setter
    def captive_portal_macauth_radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_macauth_radius_server", value)

    @property
    @pulumi.getter(name="captivePortalRadiusSecret")
    def captive_portal_radius_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_radius_secret")

    @captive_portal_radius_secret.setter
    def captive_portal_radius_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_radius_secret", value)

    @property
    @pulumi.getter(name="captivePortalRadiusServer")
    def captive_portal_radius_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_radius_server")

    @captive_portal_radius_server.setter
    def captive_portal_radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_radius_server", value)

    @property
    @pulumi.getter(name="captivePortalSessionTimeoutInterval")
    def captive_portal_session_timeout_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "captive_portal_session_timeout_interval")

    @captive_portal_session_timeout_interval.setter
    def captive_portal_session_timeout_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "captive_portal_session_timeout_interval", value)

    @property
    @pulumi.getter(name="dhcpAddressEnforcement")
    def dhcp_address_enforcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_address_enforcement")

    @dhcp_address_enforcement.setter
    def dhcp_address_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_address_enforcement", value)

    @property
    @pulumi.getter(name="dhcpLeaseTime")
    def dhcp_lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dhcp_lease_time")

    @dhcp_lease_time.setter
    def dhcp_lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_lease_time", value)

    @property
    @pulumi.getter(name="dhcpOption43Insertion")
    def dhcp_option43_insertion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option43_insertion")

    @dhcp_option43_insertion.setter
    def dhcp_option43_insertion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option43_insertion", value)

    @property
    @pulumi.getter(name="dhcpOption82CircuitIdInsertion")
    def dhcp_option82_circuit_id_insertion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_circuit_id_insertion")

    @dhcp_option82_circuit_id_insertion.setter
    def dhcp_option82_circuit_id_insertion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_circuit_id_insertion", value)

    @property
    @pulumi.getter(name="dhcpOption82Insertion")
    def dhcp_option82_insertion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_insertion")

    @dhcp_option82_insertion.setter
    def dhcp_option82_insertion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_insertion", value)

    @property
    @pulumi.getter(name="dhcpOption82RemoteIdInsertion")
    def dhcp_option82_remote_id_insertion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_remote_id_insertion")

    @dhcp_option82_remote_id_insertion.setter
    def dhcp_option82_remote_id_insertion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_remote_id_insertion", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="dynamicVlan")
    def dynamic_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_vlan")

    @dynamic_vlan.setter
    def dynamic_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_vlan", value)

    @property
    @pulumi.getter(name="eapReauth")
    def eap_reauth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eap_reauth")

    @eap_reauth.setter
    def eap_reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_reauth", value)

    @property
    @pulumi.getter(name="eapReauthIntv")
    def eap_reauth_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "eap_reauth_intv")

    @eap_reauth_intv.setter
    def eap_reauth_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eap_reauth_intv", value)

    @property
    @pulumi.getter(name="eapolKeyRetries")
    def eapol_key_retries(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eapol_key_retries")

    @eapol_key_retries.setter
    def eapol_key_retries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_key_retries", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="externalFastRoaming")
    def external_fast_roaming(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_fast_roaming")

    @external_fast_roaming.setter
    def external_fast_roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_fast_roaming", value)

    @property
    @pulumi.getter(name="externalLogout")
    def external_logout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_logout")

    @external_logout.setter
    def external_logout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_logout", value)

    @property
    @pulumi.getter(name="externalWeb")
    def external_web(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_web")

    @external_web.setter
    def external_web(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_web", value)

    @property
    @pulumi.getter(name="externalWebFormat")
    def external_web_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_web_format")

    @external_web_format.setter
    def external_web_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_web_format", value)

    @property
    @pulumi.getter(name="fastBssTransition")
    def fast_bss_transition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fast_bss_transition")

    @fast_bss_transition.setter
    def fast_bss_transition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fast_bss_transition", value)

    @property
    @pulumi.getter(name="fastRoaming")
    def fast_roaming(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fast_roaming")

    @fast_roaming.setter
    def fast_roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fast_roaming", value)

    @property
    @pulumi.getter(name="ftMobilityDomain")
    def ft_mobility_domain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ft_mobility_domain")

    @ft_mobility_domain.setter
    def ft_mobility_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ft_mobility_domain", value)

    @property
    @pulumi.getter(name="ftOverDs")
    def ft_over_ds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ft_over_ds")

    @ft_over_ds.setter
    def ft_over_ds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ft_over_ds", value)

    @property
    @pulumi.getter(name="ftR0KeyLifetime")
    def ft_r0_key_lifetime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ft_r0_key_lifetime")

    @ft_r0_key_lifetime.setter
    def ft_r0_key_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ft_r0_key_lifetime", value)

    @property
    @pulumi.getter(name="gasComebackDelay")
    def gas_comeback_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gas_comeback_delay")

    @gas_comeback_delay.setter
    def gas_comeback_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gas_comeback_delay", value)

    @property
    @pulumi.getter(name="gasFragmentationLimit")
    def gas_fragmentation_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gas_fragmentation_limit")

    @gas_fragmentation_limit.setter
    def gas_fragmentation_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gas_fragmentation_limit", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="gtkRekey")
    def gtk_rekey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gtk_rekey")

    @gtk_rekey.setter
    def gtk_rekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gtk_rekey", value)

    @property
    @pulumi.getter(name="gtkRekeyIntv")
    def gtk_rekey_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gtk_rekey_intv")

    @gtk_rekey_intv.setter
    def gtk_rekey_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gtk_rekey_intv", value)

    @property
    @pulumi.getter(name="highEfficiency")
    def high_efficiency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "high_efficiency")

    @high_efficiency.setter
    def high_efficiency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "high_efficiency", value)

    @property
    @pulumi.getter(name="hotspot20Profile")
    def hotspot20_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hotspot20_profile")

    @hotspot20_profile.setter
    def hotspot20_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hotspot20_profile", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="intraVapPrivacy")
    def intra_vap_privacy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "intra_vap_privacy")

    @intra_vap_privacy.setter
    def intra_vap_privacy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intra_vap_privacy", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipv6Rules")
    def ipv6_rules(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_rules")

    @ipv6_rules.setter
    def ipv6_rules(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_rules", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def keyindex(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keyindex")

    @keyindex.setter
    def keyindex(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keyindex", value)

    @property
    @pulumi.getter(name="l3Roaming")
    def l3_roaming(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "l3_roaming")

    @l3_roaming.setter
    def l3_roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l3_roaming", value)

    @property
    @pulumi.getter(name="l3RoamingMode")
    def l3_roaming_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "l3_roaming_mode")

    @l3_roaming_mode.setter
    def l3_roaming_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l3_roaming_mode", value)

    @property
    @pulumi.getter
    def ldpc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldpc")

    @ldpc.setter
    def ldpc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldpc", value)

    @property
    @pulumi.getter(name="localAuthentication")
    def local_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_authentication")

    @local_authentication.setter
    def local_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_authentication", value)

    @property
    @pulumi.getter(name="localBridging")
    def local_bridging(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_bridging")

    @local_bridging.setter
    def local_bridging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_bridging", value)

    @property
    @pulumi.getter(name="localLan")
    def local_lan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_lan")

    @local_lan.setter
    def local_lan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_lan", value)

    @property
    @pulumi.getter(name="localStandalone")
    def local_standalone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_standalone")

    @local_standalone.setter
    def local_standalone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_standalone", value)

    @property
    @pulumi.getter(name="localStandaloneDns")
    def local_standalone_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_standalone_dns")

    @local_standalone_dns.setter
    def local_standalone_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_standalone_dns", value)

    @property
    @pulumi.getter(name="localStandaloneDnsIp")
    def local_standalone_dns_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_standalone_dns_ip")

    @local_standalone_dns_ip.setter
    def local_standalone_dns_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_standalone_dns_ip", value)

    @property
    @pulumi.getter(name="localStandaloneNat")
    def local_standalone_nat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_standalone_nat")

    @local_standalone_nat.setter
    def local_standalone_nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_standalone_nat", value)

    @property
    @pulumi.getter(name="macAuthBypass")
    def mac_auth_bypass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_auth_bypass")

    @mac_auth_bypass.setter
    def mac_auth_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_auth_bypass", value)

    @property
    @pulumi.getter(name="macCalledStationDelimiter")
    def mac_called_station_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_called_station_delimiter")

    @mac_called_station_delimiter.setter
    def mac_called_station_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_called_station_delimiter", value)

    @property
    @pulumi.getter(name="macCallingStationDelimiter")
    def mac_calling_station_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_calling_station_delimiter")

    @mac_calling_station_delimiter.setter
    def mac_calling_station_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_calling_station_delimiter", value)

    @property
    @pulumi.getter(name="macCase")
    def mac_case(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_case")

    @mac_case.setter
    def mac_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_case", value)

    @property
    @pulumi.getter(name="macFilter")
    def mac_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_filter")

    @mac_filter.setter
    def mac_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_filter", value)

    @property
    @pulumi.getter(name="macFilterLists")
    def mac_filter_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMacFilterListArgs']]]]:
        return pulumi.get(self, "mac_filter_lists")

    @mac_filter_lists.setter
    def mac_filter_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMacFilterListArgs']]]]):
        pulumi.set(self, "mac_filter_lists", value)

    @property
    @pulumi.getter(name="macFilterPolicyOther")
    def mac_filter_policy_other(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_filter_policy_other")

    @mac_filter_policy_other.setter
    def mac_filter_policy_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_filter_policy_other", value)

    @property
    @pulumi.getter(name="macPasswordDelimiter")
    def mac_password_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_password_delimiter")

    @mac_password_delimiter.setter
    def mac_password_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_password_delimiter", value)

    @property
    @pulumi.getter(name="macUsernameDelimiter")
    def mac_username_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_username_delimiter")

    @mac_username_delimiter.setter
    def mac_username_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_username_delimiter", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxClientsAp")
    def max_clients_ap(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients_ap")

    @max_clients_ap.setter
    def max_clients_ap(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients_ap", value)

    @property
    @pulumi.getter
    def mbo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mbo")

    @mbo.setter
    def mbo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mbo", value)

    @property
    @pulumi.getter(name="mboCellDataConnPref")
    def mbo_cell_data_conn_pref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mbo_cell_data_conn_pref")

    @mbo_cell_data_conn_pref.setter
    def mbo_cell_data_conn_pref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mbo_cell_data_conn_pref", value)

    @property
    @pulumi.getter(name="meDisableThresh")
    def me_disable_thresh(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "me_disable_thresh")

    @me_disable_thresh.setter
    def me_disable_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "me_disable_thresh", value)

    @property
    @pulumi.getter(name="meshBackhaul")
    def mesh_backhaul(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mesh_backhaul")

    @mesh_backhaul.setter
    def mesh_backhaul(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_backhaul", value)

    @property
    @pulumi.getter
    def mpsk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mpsk")

    @mpsk.setter
    def mpsk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mpsk", value)

    @property
    @pulumi.getter(name="mpskConcurrentClients")
    def mpsk_concurrent_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mpsk_concurrent_clients")

    @mpsk_concurrent_clients.setter
    def mpsk_concurrent_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mpsk_concurrent_clients", value)

    @property
    @pulumi.getter(name="mpskKeys")
    def mpsk_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyArgs']]]]:
        return pulumi.get(self, "mpsk_keys")

    @mpsk_keys.setter
    def mpsk_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyArgs']]]]):
        pulumi.set(self, "mpsk_keys", value)

    @property
    @pulumi.getter(name="mpskProfile")
    def mpsk_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mpsk_profile")

    @mpsk_profile.setter
    def mpsk_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mpsk_profile", value)

    @property
    @pulumi.getter(name="muMimo")
    def mu_mimo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mu_mimo")

    @mu_mimo.setter
    def mu_mimo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mu_mimo", value)

    @property
    @pulumi.getter(name="multicastEnhance")
    def multicast_enhance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_enhance")

    @multicast_enhance.setter
    def multicast_enhance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_enhance", value)

    @property
    @pulumi.getter(name="multicastRate")
    def multicast_rate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_rate")

    @multicast_rate.setter
    def multicast_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_rate", value)

    @property
    @pulumi.getter
    def nac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nac")

    @nac.setter
    def nac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nac", value)

    @property
    @pulumi.getter(name="nacProfile")
    def nac_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nac_profile")

    @nac_profile.setter
    def nac_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nac_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="neighborReportDualBand")
    def neighbor_report_dual_band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neighbor_report_dual_band")

    @neighbor_report_dual_band.setter
    def neighbor_report_dual_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_report_dual_band", value)

    @property
    @pulumi.getter
    def okc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "okc")

    @okc.setter
    def okc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "okc", value)

    @property
    @pulumi.getter
    def osen(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osen")

    @osen.setter
    def osen(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osen", value)

    @property
    @pulumi.getter(name="oweGroups")
    def owe_groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owe_groups")

    @owe_groups.setter
    def owe_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owe_groups", value)

    @property
    @pulumi.getter(name="oweTransition")
    def owe_transition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owe_transition")

    @owe_transition.setter
    def owe_transition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owe_transition", value)

    @property
    @pulumi.getter(name="oweTransitionSsid")
    def owe_transition_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owe_transition_ssid")

    @owe_transition_ssid.setter
    def owe_transition_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owe_transition_ssid", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter
    def pmf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pmf")

    @pmf.setter
    def pmf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pmf", value)

    @property
    @pulumi.getter(name="pmfAssocComebackTimeout")
    def pmf_assoc_comeback_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pmf_assoc_comeback_timeout")

    @pmf_assoc_comeback_timeout.setter
    def pmf_assoc_comeback_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pmf_assoc_comeback_timeout", value)

    @property
    @pulumi.getter(name="pmfSaQueryRetryTimeout")
    def pmf_sa_query_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pmf_sa_query_retry_timeout")

    @pmf_sa_query_retry_timeout.setter
    def pmf_sa_query_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pmf_sa_query_retry_timeout", value)

    @property
    @pulumi.getter(name="portMacauth")
    def port_macauth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_macauth")

    @port_macauth.setter
    def port_macauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_macauth", value)

    @property
    @pulumi.getter(name="portMacauthReauthTimeout")
    def port_macauth_reauth_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_macauth_reauth_timeout")

    @port_macauth_reauth_timeout.setter
    def port_macauth_reauth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_macauth_reauth_timeout", value)

    @property
    @pulumi.getter(name="portMacauthTimeout")
    def port_macauth_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_macauth_timeout")

    @port_macauth_timeout.setter
    def port_macauth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_macauth_timeout", value)

    @property
    @pulumi.getter(name="portalMessageOverrideGroup")
    def portal_message_override_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_message_override_group")

    @portal_message_override_group.setter
    def portal_message_override_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_message_override_group", value)

    @property
    @pulumi.getter(name="portalMessageOverrides")
    def portal_message_overrides(self) -> Optional[pulumi.Input['WirelessControllerVapPortalMessageOverridesArgs']]:
        return pulumi.get(self, "portal_message_overrides")

    @portal_message_overrides.setter
    def portal_message_overrides(self, value: Optional[pulumi.Input['WirelessControllerVapPortalMessageOverridesArgs']]):
        pulumi.set(self, "portal_message_overrides", value)

    @property
    @pulumi.getter(name="portalType")
    def portal_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_type")

    @portal_type.setter
    def portal_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_type", value)

    @property
    @pulumi.getter(name="primaryWagProfile")
    def primary_wag_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_wag_profile")

    @primary_wag_profile.setter
    def primary_wag_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_wag_profile", value)

    @property
    @pulumi.getter(name="probeRespSuppression")
    def probe_resp_suppression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "probe_resp_suppression")

    @probe_resp_suppression.setter
    def probe_resp_suppression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_resp_suppression", value)

    @property
    @pulumi.getter(name="probeRespThreshold")
    def probe_resp_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "probe_resp_threshold")

    @probe_resp_threshold.setter
    def probe_resp_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_resp_threshold", value)

    @property
    @pulumi.getter(name="ptkRekey")
    def ptk_rekey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ptk_rekey")

    @ptk_rekey.setter
    def ptk_rekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ptk_rekey", value)

    @property
    @pulumi.getter(name="ptkRekeyIntv")
    def ptk_rekey_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ptk_rekey_intv")

    @ptk_rekey_intv.setter
    def ptk_rekey_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ptk_rekey_intv", value)

    @property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qos_profile")

    @qos_profile.setter
    def qos_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_profile", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="radio2gThreshold")
    def radio2g_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radio2g_threshold")

    @radio2g_threshold.setter
    def radio2g_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radio2g_threshold", value)

    @property
    @pulumi.getter(name="radio5gThreshold")
    def radio5g_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radio5g_threshold")

    @radio5g_threshold.setter
    def radio5g_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radio5g_threshold", value)

    @property
    @pulumi.getter(name="radioSensitivity")
    def radio_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radio_sensitivity")

    @radio_sensitivity.setter
    def radio_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radio_sensitivity", value)

    @property
    @pulumi.getter(name="radiusMacAuth")
    def radius_mac_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_mac_auth")

    @radius_mac_auth.setter
    def radius_mac_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_mac_auth", value)

    @property
    @pulumi.getter(name="radiusMacAuthBlockInterval")
    def radius_mac_auth_block_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radius_mac_auth_block_interval")

    @radius_mac_auth_block_interval.setter
    def radius_mac_auth_block_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_mac_auth_block_interval", value)

    @property
    @pulumi.getter(name="radiusMacAuthServer")
    def radius_mac_auth_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_mac_auth_server")

    @radius_mac_auth_server.setter
    def radius_mac_auth_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_mac_auth_server", value)

    @property
    @pulumi.getter(name="radiusMacAuthUsergroups")
    def radius_mac_auth_usergroups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapRadiusMacAuthUsergroupArgs']]]]:
        return pulumi.get(self, "radius_mac_auth_usergroups")

    @radius_mac_auth_usergroups.setter
    def radius_mac_auth_usergroups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapRadiusMacAuthUsergroupArgs']]]]):
        pulumi.set(self, "radius_mac_auth_usergroups", value)

    @property
    @pulumi.getter(name="radiusMacMpskAuth")
    def radius_mac_mpsk_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_mac_mpsk_auth")

    @radius_mac_mpsk_auth.setter
    def radius_mac_mpsk_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_mac_mpsk_auth", value)

    @property
    @pulumi.getter(name="radiusMacMpskTimeout")
    def radius_mac_mpsk_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radius_mac_mpsk_timeout")

    @radius_mac_mpsk_timeout.setter
    def radius_mac_mpsk_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_mac_mpsk_timeout", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter
    def rates11a(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11a")

    @rates11a.setter
    def rates11a(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11a", value)

    @property
    @pulumi.getter(name="rates11acMcsMap")
    def rates11ac_mcs_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ac_mcs_map")

    @rates11ac_mcs_map.setter
    def rates11ac_mcs_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ac_mcs_map", value)

    @property
    @pulumi.getter(name="rates11acSs12")
    def rates11ac_ss12(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ac_ss12")

    @rates11ac_ss12.setter
    def rates11ac_ss12(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ac_ss12", value)

    @property
    @pulumi.getter(name="rates11acSs34")
    def rates11ac_ss34(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ac_ss34")

    @rates11ac_ss34.setter
    def rates11ac_ss34(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ac_ss34", value)

    @property
    @pulumi.getter(name="rates11axMcsMap")
    def rates11ax_mcs_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ax_mcs_map")

    @rates11ax_mcs_map.setter
    def rates11ax_mcs_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ax_mcs_map", value)

    @property
    @pulumi.getter(name="rates11axSs12")
    def rates11ax_ss12(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ax_ss12")

    @rates11ax_ss12.setter
    def rates11ax_ss12(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ax_ss12", value)

    @property
    @pulumi.getter(name="rates11axSs34")
    def rates11ax_ss34(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ax_ss34")

    @rates11ax_ss34.setter
    def rates11ax_ss34(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ax_ss34", value)

    @property
    @pulumi.getter
    def rates11bg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11bg")

    @rates11bg.setter
    def rates11bg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11bg", value)

    @property
    @pulumi.getter(name="rates11nSs12")
    def rates11n_ss12(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11n_ss12")

    @rates11n_ss12.setter
    def rates11n_ss12(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11n_ss12", value)

    @property
    @pulumi.getter(name="rates11nSs34")
    def rates11n_ss34(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11n_ss34")

    @rates11n_ss34.setter
    def rates11n_ss34(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11n_ss34", value)

    @property
    @pulumi.getter(name="saeGroups")
    def sae_groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sae_groups")

    @sae_groups.setter
    def sae_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_groups", value)

    @property
    @pulumi.getter(name="saeH2eOnly")
    def sae_h2e_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sae_h2e_only")

    @sae_h2e_only.setter
    def sae_h2e_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_h2e_only", value)

    @property
    @pulumi.getter(name="saePassword")
    def sae_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sae_password")

    @sae_password.setter
    def sae_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_password", value)

    @property
    @pulumi.getter(name="saePk")
    def sae_pk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sae_pk")

    @sae_pk.setter
    def sae_pk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_pk", value)

    @property
    @pulumi.getter(name="saePrivateKey")
    def sae_private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sae_private_key")

    @sae_private_key.setter
    def sae_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_private_key", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="secondaryWagProfile")
    def secondary_wag_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_wag_profile")

    @secondary_wag_profile.setter
    def secondary_wag_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_wag_profile", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="securityExemptList")
    def security_exempt_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_exempt_list")

    @security_exempt_list.setter
    def security_exempt_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_exempt_list", value)

    @property
    @pulumi.getter(name="securityObsoleteOption")
    def security_obsolete_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_obsolete_option")

    @security_obsolete_option.setter
    def security_obsolete_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_obsolete_option", value)

    @property
    @pulumi.getter(name="securityRedirectUrl")
    def security_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_redirect_url")

    @security_redirect_url.setter
    def security_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_redirect_url", value)

    @property
    @pulumi.getter(name="selectedUsergroups")
    def selected_usergroups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapSelectedUsergroupArgs']]]]:
        return pulumi.get(self, "selected_usergroups")

    @selected_usergroups.setter
    def selected_usergroups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapSelectedUsergroupArgs']]]]):
        pulumi.set(self, "selected_usergroups", value)

    @property
    @pulumi.getter(name="splitTunneling")
    def split_tunneling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling")

    @split_tunneling.setter
    def split_tunneling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling", value)

    @property
    @pulumi.getter
    def ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssid")

    @ssid.setter
    def ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid", value)

    @property
    @pulumi.getter(name="stickyClientRemove")
    def sticky_client_remove(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sticky_client_remove")

    @sticky_client_remove.setter
    def sticky_client_remove(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sticky_client_remove", value)

    @property
    @pulumi.getter(name="stickyClientThreshold2g")
    def sticky_client_threshold2g(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sticky_client_threshold2g")

    @sticky_client_threshold2g.setter
    def sticky_client_threshold2g(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sticky_client_threshold2g", value)

    @property
    @pulumi.getter(name="stickyClientThreshold5g")
    def sticky_client_threshold5g(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sticky_client_threshold5g")

    @sticky_client_threshold5g.setter
    def sticky_client_threshold5g(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sticky_client_threshold5g", value)

    @property
    @pulumi.getter(name="stickyClientThreshold6g")
    def sticky_client_threshold6g(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sticky_client_threshold6g")

    @sticky_client_threshold6g.setter
    def sticky_client_threshold6g(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sticky_client_threshold6g", value)

    @property
    @pulumi.getter(name="targetWakeTime")
    def target_wake_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_wake_time")

    @target_wake_time.setter
    def target_wake_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_wake_time", value)

    @property
    @pulumi.getter(name="tkipCounterMeasure")
    def tkip_counter_measure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tkip_counter_measure")

    @tkip_counter_measure.setter
    def tkip_counter_measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tkip_counter_measure", value)

    @property
    @pulumi.getter(name="tunnelEchoInterval")
    def tunnel_echo_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel_echo_interval")

    @tunnel_echo_interval.setter
    def tunnel_echo_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_echo_interval", value)

    @property
    @pulumi.getter(name="tunnelFallbackInterval")
    def tunnel_fallback_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel_fallback_interval")

    @tunnel_fallback_interval.setter
    def tunnel_fallback_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_fallback_interval", value)

    @property
    @pulumi.getter
    def usergroups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapUsergroupArgs']]]]:
        return pulumi.get(self, "usergroups")

    @usergroups.setter
    def usergroups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapUsergroupArgs']]]]):
        pulumi.set(self, "usergroups", value)

    @property
    @pulumi.getter(name="utmLog")
    def utm_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "utm_log")

    @utm_log.setter
    def utm_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_log", value)

    @property
    @pulumi.getter(name="utmProfile")
    def utm_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "utm_profile")

    @utm_profile.setter
    def utm_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_profile", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vlanAuto")
    def vlan_auto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_auto")

    @vlan_auto.setter
    def vlan_auto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_auto", value)

    @property
    @pulumi.getter(name="vlanNames")
    def vlan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanNameArgs']]]]:
        return pulumi.get(self, "vlan_names")

    @vlan_names.setter
    def vlan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanNameArgs']]]]):
        pulumi.set(self, "vlan_names", value)

    @property
    @pulumi.getter(name="vlanPooling")
    def vlan_pooling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_pooling")

    @vlan_pooling.setter
    def vlan_pooling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_pooling", value)

    @property
    @pulumi.getter(name="vlanPools")
    def vlan_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanPoolArgs']]]]:
        return pulumi.get(self, "vlan_pools")

    @vlan_pools.setter
    def vlan_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanPoolArgs']]]]):
        pulumi.set(self, "vlan_pools", value)

    @property
    @pulumi.getter
    def vlanid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlanid")

    @vlanid.setter
    def vlanid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlanid", value)

    @property
    @pulumi.getter(name="voiceEnterprise")
    def voice_enterprise(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voice_enterprise")

    @voice_enterprise.setter
    def voice_enterprise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voice_enterprise", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)


@pulumi.input_type
class _WirelessControllerVapState:
    def __init__(__self__, *,
                 access_control_list: Optional[pulumi.Input[str]] = None,
                 acct_interim_interval: Optional[pulumi.Input[int]] = None,
                 additional_akms: Optional[pulumi.Input[str]] = None,
                 address_group: Optional[pulumi.Input[str]] = None,
                 address_group_policy: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 antivirus_profile: Optional[pulumi.Input[str]] = None,
                 application_detection_engine: Optional[pulumi.Input[str]] = None,
                 application_dscp_marking: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_report_intv: Optional[pulumi.Input[int]] = None,
                 atf_weight: Optional[pulumi.Input[int]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_portal_addr: Optional[pulumi.Input[str]] = None,
                 beacon_advertising: Optional[pulumi.Input[str]] = None,
                 broadcast_ssid: Optional[pulumi.Input[str]] = None,
                 broadcast_suppression: Optional[pulumi.Input[str]] = None,
                 bss_color_partial: Optional[pulumi.Input[str]] = None,
                 bstm_disassociation_imminent: Optional[pulumi.Input[str]] = None,
                 bstm_load_balancing_disassoc_timer: Optional[pulumi.Input[int]] = None,
                 bstm_rssi_disassoc_timer: Optional[pulumi.Input[int]] = None,
                 captive_portal_ac_name: Optional[pulumi.Input[str]] = None,
                 captive_portal_auth_timeout: Optional[pulumi.Input[int]] = None,
                 captive_portal_fw_accounting: Optional[pulumi.Input[str]] = None,
                 captive_portal_macauth_radius_secret: Optional[pulumi.Input[str]] = None,
                 captive_portal_macauth_radius_server: Optional[pulumi.Input[str]] = None,
                 captive_portal_radius_secret: Optional[pulumi.Input[str]] = None,
                 captive_portal_radius_server: Optional[pulumi.Input[str]] = None,
                 captive_portal_session_timeout_interval: Optional[pulumi.Input[int]] = None,
                 dhcp_address_enforcement: Optional[pulumi.Input[str]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[int]] = None,
                 dhcp_option43_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id_insertion: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamic_vlan: Optional[pulumi.Input[str]] = None,
                 eap_reauth: Optional[pulumi.Input[str]] = None,
                 eap_reauth_intv: Optional[pulumi.Input[int]] = None,
                 eapol_key_retries: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[str]] = None,
                 external_fast_roaming: Optional[pulumi.Input[str]] = None,
                 external_logout: Optional[pulumi.Input[str]] = None,
                 external_web: Optional[pulumi.Input[str]] = None,
                 external_web_format: Optional[pulumi.Input[str]] = None,
                 fast_bss_transition: Optional[pulumi.Input[str]] = None,
                 fast_roaming: Optional[pulumi.Input[str]] = None,
                 ft_mobility_domain: Optional[pulumi.Input[int]] = None,
                 ft_over_ds: Optional[pulumi.Input[str]] = None,
                 ft_r0_key_lifetime: Optional[pulumi.Input[int]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[int]] = None,
                 gas_fragmentation_limit: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gtk_rekey: Optional[pulumi.Input[str]] = None,
                 gtk_rekey_intv: Optional[pulumi.Input[int]] = None,
                 high_efficiency: Optional[pulumi.Input[str]] = None,
                 hotspot20_profile: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[str]] = None,
                 intra_vap_privacy: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ipv6_rules: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 keyindex: Optional[pulumi.Input[int]] = None,
                 l3_roaming: Optional[pulumi.Input[str]] = None,
                 l3_roaming_mode: Optional[pulumi.Input[str]] = None,
                 ldpc: Optional[pulumi.Input[str]] = None,
                 local_authentication: Optional[pulumi.Input[str]] = None,
                 local_bridging: Optional[pulumi.Input[str]] = None,
                 local_lan: Optional[pulumi.Input[str]] = None,
                 local_standalone: Optional[pulumi.Input[str]] = None,
                 local_standalone_dns: Optional[pulumi.Input[str]] = None,
                 local_standalone_dns_ip: Optional[pulumi.Input[str]] = None,
                 local_standalone_nat: Optional[pulumi.Input[str]] = None,
                 mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 mac_called_station_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_calling_station_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_case: Optional[pulumi.Input[str]] = None,
                 mac_filter: Optional[pulumi.Input[str]] = None,
                 mac_filter_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMacFilterListArgs']]]] = None,
                 mac_filter_policy_other: Optional[pulumi.Input[str]] = None,
                 mac_password_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_username_delimiter: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_clients_ap: Optional[pulumi.Input[int]] = None,
                 mbo: Optional[pulumi.Input[str]] = None,
                 mbo_cell_data_conn_pref: Optional[pulumi.Input[str]] = None,
                 me_disable_thresh: Optional[pulumi.Input[int]] = None,
                 mesh_backhaul: Optional[pulumi.Input[str]] = None,
                 mpsk: Optional[pulumi.Input[str]] = None,
                 mpsk_concurrent_clients: Optional[pulumi.Input[int]] = None,
                 mpsk_keys: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyArgs']]]] = None,
                 mpsk_profile: Optional[pulumi.Input[str]] = None,
                 mu_mimo: Optional[pulumi.Input[str]] = None,
                 multicast_enhance: Optional[pulumi.Input[str]] = None,
                 multicast_rate: Optional[pulumi.Input[str]] = None,
                 nac: Optional[pulumi.Input[str]] = None,
                 nac_profile: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbor_report_dual_band: Optional[pulumi.Input[str]] = None,
                 okc: Optional[pulumi.Input[str]] = None,
                 osen: Optional[pulumi.Input[str]] = None,
                 owe_groups: Optional[pulumi.Input[str]] = None,
                 owe_transition: Optional[pulumi.Input[str]] = None,
                 owe_transition_ssid: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pmf: Optional[pulumi.Input[str]] = None,
                 pmf_assoc_comeback_timeout: Optional[pulumi.Input[int]] = None,
                 pmf_sa_query_retry_timeout: Optional[pulumi.Input[int]] = None,
                 port_macauth: Optional[pulumi.Input[str]] = None,
                 port_macauth_reauth_timeout: Optional[pulumi.Input[int]] = None,
                 port_macauth_timeout: Optional[pulumi.Input[int]] = None,
                 portal_message_override_group: Optional[pulumi.Input[str]] = None,
                 portal_message_overrides: Optional[pulumi.Input['WirelessControllerVapPortalMessageOverridesArgs']] = None,
                 portal_type: Optional[pulumi.Input[str]] = None,
                 primary_wag_profile: Optional[pulumi.Input[str]] = None,
                 probe_resp_suppression: Optional[pulumi.Input[str]] = None,
                 probe_resp_threshold: Optional[pulumi.Input[str]] = None,
                 ptk_rekey: Optional[pulumi.Input[str]] = None,
                 ptk_rekey_intv: Optional[pulumi.Input[int]] = None,
                 qos_profile: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 radio2g_threshold: Optional[pulumi.Input[str]] = None,
                 radio5g_threshold: Optional[pulumi.Input[str]] = None,
                 radio_sensitivity: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_block_interval: Optional[pulumi.Input[int]] = None,
                 radius_mac_auth_server: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapRadiusMacAuthUsergroupArgs']]]] = None,
                 radius_mac_mpsk_auth: Optional[pulumi.Input[str]] = None,
                 radius_mac_mpsk_timeout: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 rates11a: Optional[pulumi.Input[str]] = None,
                 rates11ac_mcs_map: Optional[pulumi.Input[str]] = None,
                 rates11ac_ss12: Optional[pulumi.Input[str]] = None,
                 rates11ac_ss34: Optional[pulumi.Input[str]] = None,
                 rates11ax_mcs_map: Optional[pulumi.Input[str]] = None,
                 rates11ax_ss12: Optional[pulumi.Input[str]] = None,
                 rates11ax_ss34: Optional[pulumi.Input[str]] = None,
                 rates11bg: Optional[pulumi.Input[str]] = None,
                 rates11n_ss12: Optional[pulumi.Input[str]] = None,
                 rates11n_ss34: Optional[pulumi.Input[str]] = None,
                 sae_groups: Optional[pulumi.Input[str]] = None,
                 sae_h2e_only: Optional[pulumi.Input[str]] = None,
                 sae_password: Optional[pulumi.Input[str]] = None,
                 sae_pk: Optional[pulumi.Input[str]] = None,
                 sae_private_key: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 secondary_wag_profile: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 security_exempt_list: Optional[pulumi.Input[str]] = None,
                 security_obsolete_option: Optional[pulumi.Input[str]] = None,
                 security_redirect_url: Optional[pulumi.Input[str]] = None,
                 selected_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapSelectedUsergroupArgs']]]] = None,
                 split_tunneling: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 sticky_client_remove: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold2g: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold5g: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold6g: Optional[pulumi.Input[str]] = None,
                 target_wake_time: Optional[pulumi.Input[str]] = None,
                 tkip_counter_measure: Optional[pulumi.Input[str]] = None,
                 tunnel_echo_interval: Optional[pulumi.Input[int]] = None,
                 tunnel_fallback_interval: Optional[pulumi.Input[int]] = None,
                 usergroups: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapUsergroupArgs']]]] = None,
                 utm_log: Optional[pulumi.Input[str]] = None,
                 utm_profile: Optional[pulumi.Input[str]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_auto: Optional[pulumi.Input[str]] = None,
                 vlan_names: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanNameArgs']]]] = None,
                 vlan_pooling: Optional[pulumi.Input[str]] = None,
                 vlan_pools: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanPoolArgs']]]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 voice_enterprise: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WirelessControllerVap resources.
        """
        if access_control_list is not None:
            pulumi.set(__self__, "access_control_list", access_control_list)
        if acct_interim_interval is not None:
            pulumi.set(__self__, "acct_interim_interval", acct_interim_interval)
        if additional_akms is not None:
            pulumi.set(__self__, "additional_akms", additional_akms)
        if address_group is not None:
            pulumi.set(__self__, "address_group", address_group)
        if address_group_policy is not None:
            pulumi.set(__self__, "address_group_policy", address_group_policy)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if antivirus_profile is not None:
            pulumi.set(__self__, "antivirus_profile", antivirus_profile)
        if application_detection_engine is not None:
            pulumi.set(__self__, "application_detection_engine", application_detection_engine)
        if application_dscp_marking is not None:
            pulumi.set(__self__, "application_dscp_marking", application_dscp_marking)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if application_report_intv is not None:
            pulumi.set(__self__, "application_report_intv", application_report_intv)
        if atf_weight is not None:
            pulumi.set(__self__, "atf_weight", atf_weight)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_portal_addr is not None:
            pulumi.set(__self__, "auth_portal_addr", auth_portal_addr)
        if beacon_advertising is not None:
            pulumi.set(__self__, "beacon_advertising", beacon_advertising)
        if broadcast_ssid is not None:
            pulumi.set(__self__, "broadcast_ssid", broadcast_ssid)
        if broadcast_suppression is not None:
            pulumi.set(__self__, "broadcast_suppression", broadcast_suppression)
        if bss_color_partial is not None:
            pulumi.set(__self__, "bss_color_partial", bss_color_partial)
        if bstm_disassociation_imminent is not None:
            pulumi.set(__self__, "bstm_disassociation_imminent", bstm_disassociation_imminent)
        if bstm_load_balancing_disassoc_timer is not None:
            pulumi.set(__self__, "bstm_load_balancing_disassoc_timer", bstm_load_balancing_disassoc_timer)
        if bstm_rssi_disassoc_timer is not None:
            pulumi.set(__self__, "bstm_rssi_disassoc_timer", bstm_rssi_disassoc_timer)
        if captive_portal_ac_name is not None:
            pulumi.set(__self__, "captive_portal_ac_name", captive_portal_ac_name)
        if captive_portal_auth_timeout is not None:
            pulumi.set(__self__, "captive_portal_auth_timeout", captive_portal_auth_timeout)
        if captive_portal_fw_accounting is not None:
            pulumi.set(__self__, "captive_portal_fw_accounting", captive_portal_fw_accounting)
        if captive_portal_macauth_radius_secret is not None:
            pulumi.set(__self__, "captive_portal_macauth_radius_secret", captive_portal_macauth_radius_secret)
        if captive_portal_macauth_radius_server is not None:
            pulumi.set(__self__, "captive_portal_macauth_radius_server", captive_portal_macauth_radius_server)
        if captive_portal_radius_secret is not None:
            pulumi.set(__self__, "captive_portal_radius_secret", captive_portal_radius_secret)
        if captive_portal_radius_server is not None:
            pulumi.set(__self__, "captive_portal_radius_server", captive_portal_radius_server)
        if captive_portal_session_timeout_interval is not None:
            pulumi.set(__self__, "captive_portal_session_timeout_interval", captive_portal_session_timeout_interval)
        if dhcp_address_enforcement is not None:
            pulumi.set(__self__, "dhcp_address_enforcement", dhcp_address_enforcement)
        if dhcp_lease_time is not None:
            pulumi.set(__self__, "dhcp_lease_time", dhcp_lease_time)
        if dhcp_option43_insertion is not None:
            pulumi.set(__self__, "dhcp_option43_insertion", dhcp_option43_insertion)
        if dhcp_option82_circuit_id_insertion is not None:
            pulumi.set(__self__, "dhcp_option82_circuit_id_insertion", dhcp_option82_circuit_id_insertion)
        if dhcp_option82_insertion is not None:
            pulumi.set(__self__, "dhcp_option82_insertion", dhcp_option82_insertion)
        if dhcp_option82_remote_id_insertion is not None:
            pulumi.set(__self__, "dhcp_option82_remote_id_insertion", dhcp_option82_remote_id_insertion)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if dynamic_vlan is not None:
            pulumi.set(__self__, "dynamic_vlan", dynamic_vlan)
        if eap_reauth is not None:
            pulumi.set(__self__, "eap_reauth", eap_reauth)
        if eap_reauth_intv is not None:
            pulumi.set(__self__, "eap_reauth_intv", eap_reauth_intv)
        if eapol_key_retries is not None:
            pulumi.set(__self__, "eapol_key_retries", eapol_key_retries)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if external_fast_roaming is not None:
            pulumi.set(__self__, "external_fast_roaming", external_fast_roaming)
        if external_logout is not None:
            pulumi.set(__self__, "external_logout", external_logout)
        if external_web is not None:
            pulumi.set(__self__, "external_web", external_web)
        if external_web_format is not None:
            pulumi.set(__self__, "external_web_format", external_web_format)
        if fast_bss_transition is not None:
            pulumi.set(__self__, "fast_bss_transition", fast_bss_transition)
        if fast_roaming is not None:
            pulumi.set(__self__, "fast_roaming", fast_roaming)
        if ft_mobility_domain is not None:
            pulumi.set(__self__, "ft_mobility_domain", ft_mobility_domain)
        if ft_over_ds is not None:
            pulumi.set(__self__, "ft_over_ds", ft_over_ds)
        if ft_r0_key_lifetime is not None:
            pulumi.set(__self__, "ft_r0_key_lifetime", ft_r0_key_lifetime)
        if gas_comeback_delay is not None:
            pulumi.set(__self__, "gas_comeback_delay", gas_comeback_delay)
        if gas_fragmentation_limit is not None:
            pulumi.set(__self__, "gas_fragmentation_limit", gas_fragmentation_limit)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gtk_rekey is not None:
            pulumi.set(__self__, "gtk_rekey", gtk_rekey)
        if gtk_rekey_intv is not None:
            pulumi.set(__self__, "gtk_rekey_intv", gtk_rekey_intv)
        if high_efficiency is not None:
            pulumi.set(__self__, "high_efficiency", high_efficiency)
        if hotspot20_profile is not None:
            pulumi.set(__self__, "hotspot20_profile", hotspot20_profile)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if intra_vap_privacy is not None:
            pulumi.set(__self__, "intra_vap_privacy", intra_vap_privacy)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ipv6_rules is not None:
            pulumi.set(__self__, "ipv6_rules", ipv6_rules)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if keyindex is not None:
            pulumi.set(__self__, "keyindex", keyindex)
        if l3_roaming is not None:
            pulumi.set(__self__, "l3_roaming", l3_roaming)
        if l3_roaming_mode is not None:
            pulumi.set(__self__, "l3_roaming_mode", l3_roaming_mode)
        if ldpc is not None:
            pulumi.set(__self__, "ldpc", ldpc)
        if local_authentication is not None:
            pulumi.set(__self__, "local_authentication", local_authentication)
        if local_bridging is not None:
            pulumi.set(__self__, "local_bridging", local_bridging)
        if local_lan is not None:
            pulumi.set(__self__, "local_lan", local_lan)
        if local_standalone is not None:
            pulumi.set(__self__, "local_standalone", local_standalone)
        if local_standalone_dns is not None:
            pulumi.set(__self__, "local_standalone_dns", local_standalone_dns)
        if local_standalone_dns_ip is not None:
            pulumi.set(__self__, "local_standalone_dns_ip", local_standalone_dns_ip)
        if local_standalone_nat is not None:
            pulumi.set(__self__, "local_standalone_nat", local_standalone_nat)
        if mac_auth_bypass is not None:
            pulumi.set(__self__, "mac_auth_bypass", mac_auth_bypass)
        if mac_called_station_delimiter is not None:
            pulumi.set(__self__, "mac_called_station_delimiter", mac_called_station_delimiter)
        if mac_calling_station_delimiter is not None:
            pulumi.set(__self__, "mac_calling_station_delimiter", mac_calling_station_delimiter)
        if mac_case is not None:
            pulumi.set(__self__, "mac_case", mac_case)
        if mac_filter is not None:
            pulumi.set(__self__, "mac_filter", mac_filter)
        if mac_filter_lists is not None:
            pulumi.set(__self__, "mac_filter_lists", mac_filter_lists)
        if mac_filter_policy_other is not None:
            pulumi.set(__self__, "mac_filter_policy_other", mac_filter_policy_other)
        if mac_password_delimiter is not None:
            pulumi.set(__self__, "mac_password_delimiter", mac_password_delimiter)
        if mac_username_delimiter is not None:
            pulumi.set(__self__, "mac_username_delimiter", mac_username_delimiter)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_clients_ap is not None:
            pulumi.set(__self__, "max_clients_ap", max_clients_ap)
        if mbo is not None:
            pulumi.set(__self__, "mbo", mbo)
        if mbo_cell_data_conn_pref is not None:
            pulumi.set(__self__, "mbo_cell_data_conn_pref", mbo_cell_data_conn_pref)
        if me_disable_thresh is not None:
            pulumi.set(__self__, "me_disable_thresh", me_disable_thresh)
        if mesh_backhaul is not None:
            pulumi.set(__self__, "mesh_backhaul", mesh_backhaul)
        if mpsk is not None:
            pulumi.set(__self__, "mpsk", mpsk)
        if mpsk_concurrent_clients is not None:
            pulumi.set(__self__, "mpsk_concurrent_clients", mpsk_concurrent_clients)
        if mpsk_keys is not None:
            pulumi.set(__self__, "mpsk_keys", mpsk_keys)
        if mpsk_profile is not None:
            pulumi.set(__self__, "mpsk_profile", mpsk_profile)
        if mu_mimo is not None:
            pulumi.set(__self__, "mu_mimo", mu_mimo)
        if multicast_enhance is not None:
            pulumi.set(__self__, "multicast_enhance", multicast_enhance)
        if multicast_rate is not None:
            pulumi.set(__self__, "multicast_rate", multicast_rate)
        if nac is not None:
            pulumi.set(__self__, "nac", nac)
        if nac_profile is not None:
            pulumi.set(__self__, "nac_profile", nac_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbor_report_dual_band is not None:
            pulumi.set(__self__, "neighbor_report_dual_band", neighbor_report_dual_band)
        if okc is not None:
            pulumi.set(__self__, "okc", okc)
        if osen is not None:
            pulumi.set(__self__, "osen", osen)
        if owe_groups is not None:
            pulumi.set(__self__, "owe_groups", owe_groups)
        if owe_transition is not None:
            pulumi.set(__self__, "owe_transition", owe_transition)
        if owe_transition_ssid is not None:
            pulumi.set(__self__, "owe_transition_ssid", owe_transition_ssid)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pmf is not None:
            pulumi.set(__self__, "pmf", pmf)
        if pmf_assoc_comeback_timeout is not None:
            pulumi.set(__self__, "pmf_assoc_comeback_timeout", pmf_assoc_comeback_timeout)
        if pmf_sa_query_retry_timeout is not None:
            pulumi.set(__self__, "pmf_sa_query_retry_timeout", pmf_sa_query_retry_timeout)
        if port_macauth is not None:
            pulumi.set(__self__, "port_macauth", port_macauth)
        if port_macauth_reauth_timeout is not None:
            pulumi.set(__self__, "port_macauth_reauth_timeout", port_macauth_reauth_timeout)
        if port_macauth_timeout is not None:
            pulumi.set(__self__, "port_macauth_timeout", port_macauth_timeout)
        if portal_message_override_group is not None:
            pulumi.set(__self__, "portal_message_override_group", portal_message_override_group)
        if portal_message_overrides is not None:
            pulumi.set(__self__, "portal_message_overrides", portal_message_overrides)
        if portal_type is not None:
            pulumi.set(__self__, "portal_type", portal_type)
        if primary_wag_profile is not None:
            pulumi.set(__self__, "primary_wag_profile", primary_wag_profile)
        if probe_resp_suppression is not None:
            pulumi.set(__self__, "probe_resp_suppression", probe_resp_suppression)
        if probe_resp_threshold is not None:
            pulumi.set(__self__, "probe_resp_threshold", probe_resp_threshold)
        if ptk_rekey is not None:
            pulumi.set(__self__, "ptk_rekey", ptk_rekey)
        if ptk_rekey_intv is not None:
            pulumi.set(__self__, "ptk_rekey_intv", ptk_rekey_intv)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if radio2g_threshold is not None:
            pulumi.set(__self__, "radio2g_threshold", radio2g_threshold)
        if radio5g_threshold is not None:
            pulumi.set(__self__, "radio5g_threshold", radio5g_threshold)
        if radio_sensitivity is not None:
            pulumi.set(__self__, "radio_sensitivity", radio_sensitivity)
        if radius_mac_auth is not None:
            pulumi.set(__self__, "radius_mac_auth", radius_mac_auth)
        if radius_mac_auth_block_interval is not None:
            pulumi.set(__self__, "radius_mac_auth_block_interval", radius_mac_auth_block_interval)
        if radius_mac_auth_server is not None:
            pulumi.set(__self__, "radius_mac_auth_server", radius_mac_auth_server)
        if radius_mac_auth_usergroups is not None:
            pulumi.set(__self__, "radius_mac_auth_usergroups", radius_mac_auth_usergroups)
        if radius_mac_mpsk_auth is not None:
            pulumi.set(__self__, "radius_mac_mpsk_auth", radius_mac_mpsk_auth)
        if radius_mac_mpsk_timeout is not None:
            pulumi.set(__self__, "radius_mac_mpsk_timeout", radius_mac_mpsk_timeout)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if rates11a is not None:
            pulumi.set(__self__, "rates11a", rates11a)
        if rates11ac_mcs_map is not None:
            pulumi.set(__self__, "rates11ac_mcs_map", rates11ac_mcs_map)
        if rates11ac_ss12 is not None:
            pulumi.set(__self__, "rates11ac_ss12", rates11ac_ss12)
        if rates11ac_ss34 is not None:
            pulumi.set(__self__, "rates11ac_ss34", rates11ac_ss34)
        if rates11ax_mcs_map is not None:
            pulumi.set(__self__, "rates11ax_mcs_map", rates11ax_mcs_map)
        if rates11ax_ss12 is not None:
            pulumi.set(__self__, "rates11ax_ss12", rates11ax_ss12)
        if rates11ax_ss34 is not None:
            pulumi.set(__self__, "rates11ax_ss34", rates11ax_ss34)
        if rates11bg is not None:
            pulumi.set(__self__, "rates11bg", rates11bg)
        if rates11n_ss12 is not None:
            pulumi.set(__self__, "rates11n_ss12", rates11n_ss12)
        if rates11n_ss34 is not None:
            pulumi.set(__self__, "rates11n_ss34", rates11n_ss34)
        if sae_groups is not None:
            pulumi.set(__self__, "sae_groups", sae_groups)
        if sae_h2e_only is not None:
            pulumi.set(__self__, "sae_h2e_only", sae_h2e_only)
        if sae_password is not None:
            pulumi.set(__self__, "sae_password", sae_password)
        if sae_pk is not None:
            pulumi.set(__self__, "sae_pk", sae_pk)
        if sae_private_key is not None:
            pulumi.set(__self__, "sae_private_key", sae_private_key)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if secondary_wag_profile is not None:
            pulumi.set(__self__, "secondary_wag_profile", secondary_wag_profile)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if security_exempt_list is not None:
            pulumi.set(__self__, "security_exempt_list", security_exempt_list)
        if security_obsolete_option is not None:
            pulumi.set(__self__, "security_obsolete_option", security_obsolete_option)
        if security_redirect_url is not None:
            pulumi.set(__self__, "security_redirect_url", security_redirect_url)
        if selected_usergroups is not None:
            pulumi.set(__self__, "selected_usergroups", selected_usergroups)
        if split_tunneling is not None:
            pulumi.set(__self__, "split_tunneling", split_tunneling)
        if ssid is not None:
            pulumi.set(__self__, "ssid", ssid)
        if sticky_client_remove is not None:
            pulumi.set(__self__, "sticky_client_remove", sticky_client_remove)
        if sticky_client_threshold2g is not None:
            pulumi.set(__self__, "sticky_client_threshold2g", sticky_client_threshold2g)
        if sticky_client_threshold5g is not None:
            pulumi.set(__self__, "sticky_client_threshold5g", sticky_client_threshold5g)
        if sticky_client_threshold6g is not None:
            pulumi.set(__self__, "sticky_client_threshold6g", sticky_client_threshold6g)
        if target_wake_time is not None:
            pulumi.set(__self__, "target_wake_time", target_wake_time)
        if tkip_counter_measure is not None:
            pulumi.set(__self__, "tkip_counter_measure", tkip_counter_measure)
        if tunnel_echo_interval is not None:
            pulumi.set(__self__, "tunnel_echo_interval", tunnel_echo_interval)
        if tunnel_fallback_interval is not None:
            pulumi.set(__self__, "tunnel_fallback_interval", tunnel_fallback_interval)
        if usergroups is not None:
            pulumi.set(__self__, "usergroups", usergroups)
        if utm_log is not None:
            pulumi.set(__self__, "utm_log", utm_log)
        if utm_profile is not None:
            pulumi.set(__self__, "utm_profile", utm_profile)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_auto is not None:
            pulumi.set(__self__, "vlan_auto", vlan_auto)
        if vlan_names is not None:
            pulumi.set(__self__, "vlan_names", vlan_names)
        if vlan_pooling is not None:
            pulumi.set(__self__, "vlan_pooling", vlan_pooling)
        if vlan_pools is not None:
            pulumi.set(__self__, "vlan_pools", vlan_pools)
        if vlanid is not None:
            pulumi.set(__self__, "vlanid", vlanid)
        if voice_enterprise is not None:
            pulumi.set(__self__, "voice_enterprise", voice_enterprise)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)

    @property
    @pulumi.getter(name="accessControlList")
    def access_control_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_control_list")

    @access_control_list.setter
    def access_control_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_control_list", value)

    @property
    @pulumi.getter(name="acctInterimInterval")
    def acct_interim_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "acct_interim_interval")

    @acct_interim_interval.setter
    def acct_interim_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acct_interim_interval", value)

    @property
    @pulumi.getter(name="additionalAkms")
    def additional_akms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_akms")

    @additional_akms.setter
    def additional_akms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_akms", value)

    @property
    @pulumi.getter(name="addressGroup")
    def address_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_group")

    @address_group.setter
    def address_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_group", value)

    @property
    @pulumi.getter(name="addressGroupPolicy")
    def address_group_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_group_policy")

    @address_group_policy.setter
    def address_group_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_group_policy", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="antivirusProfile")
    def antivirus_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "antivirus_profile")

    @antivirus_profile.setter
    def antivirus_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antivirus_profile", value)

    @property
    @pulumi.getter(name="applicationDetectionEngine")
    def application_detection_engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_detection_engine")

    @application_detection_engine.setter
    def application_detection_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_detection_engine", value)

    @property
    @pulumi.getter(name="applicationDscpMarking")
    def application_dscp_marking(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_dscp_marking")

    @application_dscp_marking.setter
    def application_dscp_marking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_dscp_marking", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="applicationReportIntv")
    def application_report_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "application_report_intv")

    @application_report_intv.setter
    def application_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "application_report_intv", value)

    @property
    @pulumi.getter(name="atfWeight")
    def atf_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "atf_weight")

    @atf_weight.setter
    def atf_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "atf_weight", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authPortalAddr")
    def auth_portal_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_portal_addr")

    @auth_portal_addr.setter
    def auth_portal_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_portal_addr", value)

    @property
    @pulumi.getter(name="beaconAdvertising")
    def beacon_advertising(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "beacon_advertising")

    @beacon_advertising.setter
    def beacon_advertising(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "beacon_advertising", value)

    @property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "broadcast_ssid")

    @broadcast_ssid.setter
    def broadcast_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast_ssid", value)

    @property
    @pulumi.getter(name="broadcastSuppression")
    def broadcast_suppression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "broadcast_suppression")

    @broadcast_suppression.setter
    def broadcast_suppression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast_suppression", value)

    @property
    @pulumi.getter(name="bssColorPartial")
    def bss_color_partial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bss_color_partial")

    @bss_color_partial.setter
    def bss_color_partial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_partial", value)

    @property
    @pulumi.getter(name="bstmDisassociationImminent")
    def bstm_disassociation_imminent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bstm_disassociation_imminent")

    @bstm_disassociation_imminent.setter
    def bstm_disassociation_imminent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bstm_disassociation_imminent", value)

    @property
    @pulumi.getter(name="bstmLoadBalancingDisassocTimer")
    def bstm_load_balancing_disassoc_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bstm_load_balancing_disassoc_timer")

    @bstm_load_balancing_disassoc_timer.setter
    def bstm_load_balancing_disassoc_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bstm_load_balancing_disassoc_timer", value)

    @property
    @pulumi.getter(name="bstmRssiDisassocTimer")
    def bstm_rssi_disassoc_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bstm_rssi_disassoc_timer")

    @bstm_rssi_disassoc_timer.setter
    def bstm_rssi_disassoc_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bstm_rssi_disassoc_timer", value)

    @property
    @pulumi.getter(name="captivePortalAcName")
    def captive_portal_ac_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_ac_name")

    @captive_portal_ac_name.setter
    def captive_portal_ac_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_ac_name", value)

    @property
    @pulumi.getter(name="captivePortalAuthTimeout")
    def captive_portal_auth_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "captive_portal_auth_timeout")

    @captive_portal_auth_timeout.setter
    def captive_portal_auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "captive_portal_auth_timeout", value)

    @property
    @pulumi.getter(name="captivePortalFwAccounting")
    def captive_portal_fw_accounting(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_fw_accounting")

    @captive_portal_fw_accounting.setter
    def captive_portal_fw_accounting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_fw_accounting", value)

    @property
    @pulumi.getter(name="captivePortalMacauthRadiusSecret")
    def captive_portal_macauth_radius_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_macauth_radius_secret")

    @captive_portal_macauth_radius_secret.setter
    def captive_portal_macauth_radius_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_macauth_radius_secret", value)

    @property
    @pulumi.getter(name="captivePortalMacauthRadiusServer")
    def captive_portal_macauth_radius_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_macauth_radius_server")

    @captive_portal_macauth_radius_server.setter
    def captive_portal_macauth_radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_macauth_radius_server", value)

    @property
    @pulumi.getter(name="captivePortalRadiusSecret")
    def captive_portal_radius_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_radius_secret")

    @captive_portal_radius_secret.setter
    def captive_portal_radius_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_radius_secret", value)

    @property
    @pulumi.getter(name="captivePortalRadiusServer")
    def captive_portal_radius_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_radius_server")

    @captive_portal_radius_server.setter
    def captive_portal_radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_radius_server", value)

    @property
    @pulumi.getter(name="captivePortalSessionTimeoutInterval")
    def captive_portal_session_timeout_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "captive_portal_session_timeout_interval")

    @captive_portal_session_timeout_interval.setter
    def captive_portal_session_timeout_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "captive_portal_session_timeout_interval", value)

    @property
    @pulumi.getter(name="dhcpAddressEnforcement")
    def dhcp_address_enforcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_address_enforcement")

    @dhcp_address_enforcement.setter
    def dhcp_address_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_address_enforcement", value)

    @property
    @pulumi.getter(name="dhcpLeaseTime")
    def dhcp_lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dhcp_lease_time")

    @dhcp_lease_time.setter
    def dhcp_lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_lease_time", value)

    @property
    @pulumi.getter(name="dhcpOption43Insertion")
    def dhcp_option43_insertion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option43_insertion")

    @dhcp_option43_insertion.setter
    def dhcp_option43_insertion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option43_insertion", value)

    @property
    @pulumi.getter(name="dhcpOption82CircuitIdInsertion")
    def dhcp_option82_circuit_id_insertion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_circuit_id_insertion")

    @dhcp_option82_circuit_id_insertion.setter
    def dhcp_option82_circuit_id_insertion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_circuit_id_insertion", value)

    @property
    @pulumi.getter(name="dhcpOption82Insertion")
    def dhcp_option82_insertion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_insertion")

    @dhcp_option82_insertion.setter
    def dhcp_option82_insertion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_insertion", value)

    @property
    @pulumi.getter(name="dhcpOption82RemoteIdInsertion")
    def dhcp_option82_remote_id_insertion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_option82_remote_id_insertion")

    @dhcp_option82_remote_id_insertion.setter
    def dhcp_option82_remote_id_insertion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option82_remote_id_insertion", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="dynamicVlan")
    def dynamic_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_vlan")

    @dynamic_vlan.setter
    def dynamic_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_vlan", value)

    @property
    @pulumi.getter(name="eapReauth")
    def eap_reauth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eap_reauth")

    @eap_reauth.setter
    def eap_reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_reauth", value)

    @property
    @pulumi.getter(name="eapReauthIntv")
    def eap_reauth_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "eap_reauth_intv")

    @eap_reauth_intv.setter
    def eap_reauth_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eap_reauth_intv", value)

    @property
    @pulumi.getter(name="eapolKeyRetries")
    def eapol_key_retries(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eapol_key_retries")

    @eapol_key_retries.setter
    def eapol_key_retries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eapol_key_retries", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="externalFastRoaming")
    def external_fast_roaming(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_fast_roaming")

    @external_fast_roaming.setter
    def external_fast_roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_fast_roaming", value)

    @property
    @pulumi.getter(name="externalLogout")
    def external_logout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_logout")

    @external_logout.setter
    def external_logout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_logout", value)

    @property
    @pulumi.getter(name="externalWeb")
    def external_web(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_web")

    @external_web.setter
    def external_web(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_web", value)

    @property
    @pulumi.getter(name="externalWebFormat")
    def external_web_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_web_format")

    @external_web_format.setter
    def external_web_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_web_format", value)

    @property
    @pulumi.getter(name="fastBssTransition")
    def fast_bss_transition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fast_bss_transition")

    @fast_bss_transition.setter
    def fast_bss_transition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fast_bss_transition", value)

    @property
    @pulumi.getter(name="fastRoaming")
    def fast_roaming(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fast_roaming")

    @fast_roaming.setter
    def fast_roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fast_roaming", value)

    @property
    @pulumi.getter(name="ftMobilityDomain")
    def ft_mobility_domain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ft_mobility_domain")

    @ft_mobility_domain.setter
    def ft_mobility_domain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ft_mobility_domain", value)

    @property
    @pulumi.getter(name="ftOverDs")
    def ft_over_ds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ft_over_ds")

    @ft_over_ds.setter
    def ft_over_ds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ft_over_ds", value)

    @property
    @pulumi.getter(name="ftR0KeyLifetime")
    def ft_r0_key_lifetime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ft_r0_key_lifetime")

    @ft_r0_key_lifetime.setter
    def ft_r0_key_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ft_r0_key_lifetime", value)

    @property
    @pulumi.getter(name="gasComebackDelay")
    def gas_comeback_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gas_comeback_delay")

    @gas_comeback_delay.setter
    def gas_comeback_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gas_comeback_delay", value)

    @property
    @pulumi.getter(name="gasFragmentationLimit")
    def gas_fragmentation_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gas_fragmentation_limit")

    @gas_fragmentation_limit.setter
    def gas_fragmentation_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gas_fragmentation_limit", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="gtkRekey")
    def gtk_rekey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gtk_rekey")

    @gtk_rekey.setter
    def gtk_rekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gtk_rekey", value)

    @property
    @pulumi.getter(name="gtkRekeyIntv")
    def gtk_rekey_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gtk_rekey_intv")

    @gtk_rekey_intv.setter
    def gtk_rekey_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gtk_rekey_intv", value)

    @property
    @pulumi.getter(name="highEfficiency")
    def high_efficiency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "high_efficiency")

    @high_efficiency.setter
    def high_efficiency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "high_efficiency", value)

    @property
    @pulumi.getter(name="hotspot20Profile")
    def hotspot20_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hotspot20_profile")

    @hotspot20_profile.setter
    def hotspot20_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hotspot20_profile", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="intraVapPrivacy")
    def intra_vap_privacy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "intra_vap_privacy")

    @intra_vap_privacy.setter
    def intra_vap_privacy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intra_vap_privacy", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipv6Rules")
    def ipv6_rules(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_rules")

    @ipv6_rules.setter
    def ipv6_rules(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_rules", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def keyindex(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keyindex")

    @keyindex.setter
    def keyindex(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keyindex", value)

    @property
    @pulumi.getter(name="l3Roaming")
    def l3_roaming(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "l3_roaming")

    @l3_roaming.setter
    def l3_roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l3_roaming", value)

    @property
    @pulumi.getter(name="l3RoamingMode")
    def l3_roaming_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "l3_roaming_mode")

    @l3_roaming_mode.setter
    def l3_roaming_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l3_roaming_mode", value)

    @property
    @pulumi.getter
    def ldpc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldpc")

    @ldpc.setter
    def ldpc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldpc", value)

    @property
    @pulumi.getter(name="localAuthentication")
    def local_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_authentication")

    @local_authentication.setter
    def local_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_authentication", value)

    @property
    @pulumi.getter(name="localBridging")
    def local_bridging(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_bridging")

    @local_bridging.setter
    def local_bridging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_bridging", value)

    @property
    @pulumi.getter(name="localLan")
    def local_lan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_lan")

    @local_lan.setter
    def local_lan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_lan", value)

    @property
    @pulumi.getter(name="localStandalone")
    def local_standalone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_standalone")

    @local_standalone.setter
    def local_standalone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_standalone", value)

    @property
    @pulumi.getter(name="localStandaloneDns")
    def local_standalone_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_standalone_dns")

    @local_standalone_dns.setter
    def local_standalone_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_standalone_dns", value)

    @property
    @pulumi.getter(name="localStandaloneDnsIp")
    def local_standalone_dns_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_standalone_dns_ip")

    @local_standalone_dns_ip.setter
    def local_standalone_dns_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_standalone_dns_ip", value)

    @property
    @pulumi.getter(name="localStandaloneNat")
    def local_standalone_nat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_standalone_nat")

    @local_standalone_nat.setter
    def local_standalone_nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_standalone_nat", value)

    @property
    @pulumi.getter(name="macAuthBypass")
    def mac_auth_bypass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_auth_bypass")

    @mac_auth_bypass.setter
    def mac_auth_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_auth_bypass", value)

    @property
    @pulumi.getter(name="macCalledStationDelimiter")
    def mac_called_station_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_called_station_delimiter")

    @mac_called_station_delimiter.setter
    def mac_called_station_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_called_station_delimiter", value)

    @property
    @pulumi.getter(name="macCallingStationDelimiter")
    def mac_calling_station_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_calling_station_delimiter")

    @mac_calling_station_delimiter.setter
    def mac_calling_station_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_calling_station_delimiter", value)

    @property
    @pulumi.getter(name="macCase")
    def mac_case(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_case")

    @mac_case.setter
    def mac_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_case", value)

    @property
    @pulumi.getter(name="macFilter")
    def mac_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_filter")

    @mac_filter.setter
    def mac_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_filter", value)

    @property
    @pulumi.getter(name="macFilterLists")
    def mac_filter_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMacFilterListArgs']]]]:
        return pulumi.get(self, "mac_filter_lists")

    @mac_filter_lists.setter
    def mac_filter_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMacFilterListArgs']]]]):
        pulumi.set(self, "mac_filter_lists", value)

    @property
    @pulumi.getter(name="macFilterPolicyOther")
    def mac_filter_policy_other(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_filter_policy_other")

    @mac_filter_policy_other.setter
    def mac_filter_policy_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_filter_policy_other", value)

    @property
    @pulumi.getter(name="macPasswordDelimiter")
    def mac_password_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_password_delimiter")

    @mac_password_delimiter.setter
    def mac_password_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_password_delimiter", value)

    @property
    @pulumi.getter(name="macUsernameDelimiter")
    def mac_username_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_username_delimiter")

    @mac_username_delimiter.setter
    def mac_username_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_username_delimiter", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxClientsAp")
    def max_clients_ap(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients_ap")

    @max_clients_ap.setter
    def max_clients_ap(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients_ap", value)

    @property
    @pulumi.getter
    def mbo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mbo")

    @mbo.setter
    def mbo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mbo", value)

    @property
    @pulumi.getter(name="mboCellDataConnPref")
    def mbo_cell_data_conn_pref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mbo_cell_data_conn_pref")

    @mbo_cell_data_conn_pref.setter
    def mbo_cell_data_conn_pref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mbo_cell_data_conn_pref", value)

    @property
    @pulumi.getter(name="meDisableThresh")
    def me_disable_thresh(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "me_disable_thresh")

    @me_disable_thresh.setter
    def me_disable_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "me_disable_thresh", value)

    @property
    @pulumi.getter(name="meshBackhaul")
    def mesh_backhaul(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mesh_backhaul")

    @mesh_backhaul.setter
    def mesh_backhaul(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_backhaul", value)

    @property
    @pulumi.getter
    def mpsk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mpsk")

    @mpsk.setter
    def mpsk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mpsk", value)

    @property
    @pulumi.getter(name="mpskConcurrentClients")
    def mpsk_concurrent_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mpsk_concurrent_clients")

    @mpsk_concurrent_clients.setter
    def mpsk_concurrent_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mpsk_concurrent_clients", value)

    @property
    @pulumi.getter(name="mpskKeys")
    def mpsk_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyArgs']]]]:
        return pulumi.get(self, "mpsk_keys")

    @mpsk_keys.setter
    def mpsk_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyArgs']]]]):
        pulumi.set(self, "mpsk_keys", value)

    @property
    @pulumi.getter(name="mpskProfile")
    def mpsk_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mpsk_profile")

    @mpsk_profile.setter
    def mpsk_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mpsk_profile", value)

    @property
    @pulumi.getter(name="muMimo")
    def mu_mimo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mu_mimo")

    @mu_mimo.setter
    def mu_mimo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mu_mimo", value)

    @property
    @pulumi.getter(name="multicastEnhance")
    def multicast_enhance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_enhance")

    @multicast_enhance.setter
    def multicast_enhance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_enhance", value)

    @property
    @pulumi.getter(name="multicastRate")
    def multicast_rate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_rate")

    @multicast_rate.setter
    def multicast_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_rate", value)

    @property
    @pulumi.getter
    def nac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nac")

    @nac.setter
    def nac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nac", value)

    @property
    @pulumi.getter(name="nacProfile")
    def nac_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nac_profile")

    @nac_profile.setter
    def nac_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nac_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="neighborReportDualBand")
    def neighbor_report_dual_band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neighbor_report_dual_band")

    @neighbor_report_dual_band.setter
    def neighbor_report_dual_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_report_dual_band", value)

    @property
    @pulumi.getter
    def okc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "okc")

    @okc.setter
    def okc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "okc", value)

    @property
    @pulumi.getter
    def osen(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osen")

    @osen.setter
    def osen(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osen", value)

    @property
    @pulumi.getter(name="oweGroups")
    def owe_groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owe_groups")

    @owe_groups.setter
    def owe_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owe_groups", value)

    @property
    @pulumi.getter(name="oweTransition")
    def owe_transition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owe_transition")

    @owe_transition.setter
    def owe_transition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owe_transition", value)

    @property
    @pulumi.getter(name="oweTransitionSsid")
    def owe_transition_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owe_transition_ssid")

    @owe_transition_ssid.setter
    def owe_transition_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owe_transition_ssid", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter
    def pmf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pmf")

    @pmf.setter
    def pmf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pmf", value)

    @property
    @pulumi.getter(name="pmfAssocComebackTimeout")
    def pmf_assoc_comeback_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pmf_assoc_comeback_timeout")

    @pmf_assoc_comeback_timeout.setter
    def pmf_assoc_comeback_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pmf_assoc_comeback_timeout", value)

    @property
    @pulumi.getter(name="pmfSaQueryRetryTimeout")
    def pmf_sa_query_retry_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pmf_sa_query_retry_timeout")

    @pmf_sa_query_retry_timeout.setter
    def pmf_sa_query_retry_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pmf_sa_query_retry_timeout", value)

    @property
    @pulumi.getter(name="portMacauth")
    def port_macauth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_macauth")

    @port_macauth.setter
    def port_macauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_macauth", value)

    @property
    @pulumi.getter(name="portMacauthReauthTimeout")
    def port_macauth_reauth_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_macauth_reauth_timeout")

    @port_macauth_reauth_timeout.setter
    def port_macauth_reauth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_macauth_reauth_timeout", value)

    @property
    @pulumi.getter(name="portMacauthTimeout")
    def port_macauth_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_macauth_timeout")

    @port_macauth_timeout.setter
    def port_macauth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_macauth_timeout", value)

    @property
    @pulumi.getter(name="portalMessageOverrideGroup")
    def portal_message_override_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_message_override_group")

    @portal_message_override_group.setter
    def portal_message_override_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_message_override_group", value)

    @property
    @pulumi.getter(name="portalMessageOverrides")
    def portal_message_overrides(self) -> Optional[pulumi.Input['WirelessControllerVapPortalMessageOverridesArgs']]:
        return pulumi.get(self, "portal_message_overrides")

    @portal_message_overrides.setter
    def portal_message_overrides(self, value: Optional[pulumi.Input['WirelessControllerVapPortalMessageOverridesArgs']]):
        pulumi.set(self, "portal_message_overrides", value)

    @property
    @pulumi.getter(name="portalType")
    def portal_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_type")

    @portal_type.setter
    def portal_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_type", value)

    @property
    @pulumi.getter(name="primaryWagProfile")
    def primary_wag_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_wag_profile")

    @primary_wag_profile.setter
    def primary_wag_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_wag_profile", value)

    @property
    @pulumi.getter(name="probeRespSuppression")
    def probe_resp_suppression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "probe_resp_suppression")

    @probe_resp_suppression.setter
    def probe_resp_suppression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_resp_suppression", value)

    @property
    @pulumi.getter(name="probeRespThreshold")
    def probe_resp_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "probe_resp_threshold")

    @probe_resp_threshold.setter
    def probe_resp_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_resp_threshold", value)

    @property
    @pulumi.getter(name="ptkRekey")
    def ptk_rekey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ptk_rekey")

    @ptk_rekey.setter
    def ptk_rekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ptk_rekey", value)

    @property
    @pulumi.getter(name="ptkRekeyIntv")
    def ptk_rekey_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ptk_rekey_intv")

    @ptk_rekey_intv.setter
    def ptk_rekey_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ptk_rekey_intv", value)

    @property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qos_profile")

    @qos_profile.setter
    def qos_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_profile", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="radio2gThreshold")
    def radio2g_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radio2g_threshold")

    @radio2g_threshold.setter
    def radio2g_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radio2g_threshold", value)

    @property
    @pulumi.getter(name="radio5gThreshold")
    def radio5g_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radio5g_threshold")

    @radio5g_threshold.setter
    def radio5g_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radio5g_threshold", value)

    @property
    @pulumi.getter(name="radioSensitivity")
    def radio_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radio_sensitivity")

    @radio_sensitivity.setter
    def radio_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radio_sensitivity", value)

    @property
    @pulumi.getter(name="radiusMacAuth")
    def radius_mac_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_mac_auth")

    @radius_mac_auth.setter
    def radius_mac_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_mac_auth", value)

    @property
    @pulumi.getter(name="radiusMacAuthBlockInterval")
    def radius_mac_auth_block_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radius_mac_auth_block_interval")

    @radius_mac_auth_block_interval.setter
    def radius_mac_auth_block_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_mac_auth_block_interval", value)

    @property
    @pulumi.getter(name="radiusMacAuthServer")
    def radius_mac_auth_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_mac_auth_server")

    @radius_mac_auth_server.setter
    def radius_mac_auth_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_mac_auth_server", value)

    @property
    @pulumi.getter(name="radiusMacAuthUsergroups")
    def radius_mac_auth_usergroups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapRadiusMacAuthUsergroupArgs']]]]:
        return pulumi.get(self, "radius_mac_auth_usergroups")

    @radius_mac_auth_usergroups.setter
    def radius_mac_auth_usergroups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapRadiusMacAuthUsergroupArgs']]]]):
        pulumi.set(self, "radius_mac_auth_usergroups", value)

    @property
    @pulumi.getter(name="radiusMacMpskAuth")
    def radius_mac_mpsk_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_mac_mpsk_auth")

    @radius_mac_mpsk_auth.setter
    def radius_mac_mpsk_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_mac_mpsk_auth", value)

    @property
    @pulumi.getter(name="radiusMacMpskTimeout")
    def radius_mac_mpsk_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radius_mac_mpsk_timeout")

    @radius_mac_mpsk_timeout.setter
    def radius_mac_mpsk_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_mac_mpsk_timeout", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter
    def rates11a(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11a")

    @rates11a.setter
    def rates11a(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11a", value)

    @property
    @pulumi.getter(name="rates11acMcsMap")
    def rates11ac_mcs_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ac_mcs_map")

    @rates11ac_mcs_map.setter
    def rates11ac_mcs_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ac_mcs_map", value)

    @property
    @pulumi.getter(name="rates11acSs12")
    def rates11ac_ss12(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ac_ss12")

    @rates11ac_ss12.setter
    def rates11ac_ss12(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ac_ss12", value)

    @property
    @pulumi.getter(name="rates11acSs34")
    def rates11ac_ss34(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ac_ss34")

    @rates11ac_ss34.setter
    def rates11ac_ss34(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ac_ss34", value)

    @property
    @pulumi.getter(name="rates11axMcsMap")
    def rates11ax_mcs_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ax_mcs_map")

    @rates11ax_mcs_map.setter
    def rates11ax_mcs_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ax_mcs_map", value)

    @property
    @pulumi.getter(name="rates11axSs12")
    def rates11ax_ss12(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ax_ss12")

    @rates11ax_ss12.setter
    def rates11ax_ss12(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ax_ss12", value)

    @property
    @pulumi.getter(name="rates11axSs34")
    def rates11ax_ss34(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11ax_ss34")

    @rates11ax_ss34.setter
    def rates11ax_ss34(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11ax_ss34", value)

    @property
    @pulumi.getter
    def rates11bg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11bg")

    @rates11bg.setter
    def rates11bg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11bg", value)

    @property
    @pulumi.getter(name="rates11nSs12")
    def rates11n_ss12(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11n_ss12")

    @rates11n_ss12.setter
    def rates11n_ss12(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11n_ss12", value)

    @property
    @pulumi.getter(name="rates11nSs34")
    def rates11n_ss34(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rates11n_ss34")

    @rates11n_ss34.setter
    def rates11n_ss34(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rates11n_ss34", value)

    @property
    @pulumi.getter(name="saeGroups")
    def sae_groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sae_groups")

    @sae_groups.setter
    def sae_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_groups", value)

    @property
    @pulumi.getter(name="saeH2eOnly")
    def sae_h2e_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sae_h2e_only")

    @sae_h2e_only.setter
    def sae_h2e_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_h2e_only", value)

    @property
    @pulumi.getter(name="saePassword")
    def sae_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sae_password")

    @sae_password.setter
    def sae_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_password", value)

    @property
    @pulumi.getter(name="saePk")
    def sae_pk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sae_pk")

    @sae_pk.setter
    def sae_pk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_pk", value)

    @property
    @pulumi.getter(name="saePrivateKey")
    def sae_private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sae_private_key")

    @sae_private_key.setter
    def sae_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sae_private_key", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="secondaryWagProfile")
    def secondary_wag_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_wag_profile")

    @secondary_wag_profile.setter
    def secondary_wag_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_wag_profile", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="securityExemptList")
    def security_exempt_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_exempt_list")

    @security_exempt_list.setter
    def security_exempt_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_exempt_list", value)

    @property
    @pulumi.getter(name="securityObsoleteOption")
    def security_obsolete_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_obsolete_option")

    @security_obsolete_option.setter
    def security_obsolete_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_obsolete_option", value)

    @property
    @pulumi.getter(name="securityRedirectUrl")
    def security_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_redirect_url")

    @security_redirect_url.setter
    def security_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_redirect_url", value)

    @property
    @pulumi.getter(name="selectedUsergroups")
    def selected_usergroups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapSelectedUsergroupArgs']]]]:
        return pulumi.get(self, "selected_usergroups")

    @selected_usergroups.setter
    def selected_usergroups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapSelectedUsergroupArgs']]]]):
        pulumi.set(self, "selected_usergroups", value)

    @property
    @pulumi.getter(name="splitTunneling")
    def split_tunneling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling")

    @split_tunneling.setter
    def split_tunneling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling", value)

    @property
    @pulumi.getter
    def ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssid")

    @ssid.setter
    def ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid", value)

    @property
    @pulumi.getter(name="stickyClientRemove")
    def sticky_client_remove(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sticky_client_remove")

    @sticky_client_remove.setter
    def sticky_client_remove(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sticky_client_remove", value)

    @property
    @pulumi.getter(name="stickyClientThreshold2g")
    def sticky_client_threshold2g(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sticky_client_threshold2g")

    @sticky_client_threshold2g.setter
    def sticky_client_threshold2g(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sticky_client_threshold2g", value)

    @property
    @pulumi.getter(name="stickyClientThreshold5g")
    def sticky_client_threshold5g(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sticky_client_threshold5g")

    @sticky_client_threshold5g.setter
    def sticky_client_threshold5g(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sticky_client_threshold5g", value)

    @property
    @pulumi.getter(name="stickyClientThreshold6g")
    def sticky_client_threshold6g(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sticky_client_threshold6g")

    @sticky_client_threshold6g.setter
    def sticky_client_threshold6g(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sticky_client_threshold6g", value)

    @property
    @pulumi.getter(name="targetWakeTime")
    def target_wake_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_wake_time")

    @target_wake_time.setter
    def target_wake_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_wake_time", value)

    @property
    @pulumi.getter(name="tkipCounterMeasure")
    def tkip_counter_measure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tkip_counter_measure")

    @tkip_counter_measure.setter
    def tkip_counter_measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tkip_counter_measure", value)

    @property
    @pulumi.getter(name="tunnelEchoInterval")
    def tunnel_echo_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel_echo_interval")

    @tunnel_echo_interval.setter
    def tunnel_echo_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_echo_interval", value)

    @property
    @pulumi.getter(name="tunnelFallbackInterval")
    def tunnel_fallback_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel_fallback_interval")

    @tunnel_fallback_interval.setter
    def tunnel_fallback_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_fallback_interval", value)

    @property
    @pulumi.getter
    def usergroups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapUsergroupArgs']]]]:
        return pulumi.get(self, "usergroups")

    @usergroups.setter
    def usergroups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapUsergroupArgs']]]]):
        pulumi.set(self, "usergroups", value)

    @property
    @pulumi.getter(name="utmLog")
    def utm_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "utm_log")

    @utm_log.setter
    def utm_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_log", value)

    @property
    @pulumi.getter(name="utmProfile")
    def utm_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "utm_profile")

    @utm_profile.setter
    def utm_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_profile", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vlanAuto")
    def vlan_auto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_auto")

    @vlan_auto.setter
    def vlan_auto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_auto", value)

    @property
    @pulumi.getter(name="vlanNames")
    def vlan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanNameArgs']]]]:
        return pulumi.get(self, "vlan_names")

    @vlan_names.setter
    def vlan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanNameArgs']]]]):
        pulumi.set(self, "vlan_names", value)

    @property
    @pulumi.getter(name="vlanPooling")
    def vlan_pooling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_pooling")

    @vlan_pooling.setter
    def vlan_pooling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_pooling", value)

    @property
    @pulumi.getter(name="vlanPools")
    def vlan_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanPoolArgs']]]]:
        return pulumi.get(self, "vlan_pools")

    @vlan_pools.setter
    def vlan_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapVlanPoolArgs']]]]):
        pulumi.set(self, "vlan_pools", value)

    @property
    @pulumi.getter
    def vlanid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlanid")

    @vlanid.setter
    def vlanid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlanid", value)

    @property
    @pulumi.getter(name="voiceEnterprise")
    def voice_enterprise(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voice_enterprise")

    @voice_enterprise.setter
    def voice_enterprise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voice_enterprise", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)


class WirelessControllerVap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control_list: Optional[pulumi.Input[str]] = None,
                 acct_interim_interval: Optional[pulumi.Input[int]] = None,
                 additional_akms: Optional[pulumi.Input[str]] = None,
                 address_group: Optional[pulumi.Input[str]] = None,
                 address_group_policy: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 antivirus_profile: Optional[pulumi.Input[str]] = None,
                 application_detection_engine: Optional[pulumi.Input[str]] = None,
                 application_dscp_marking: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_report_intv: Optional[pulumi.Input[int]] = None,
                 atf_weight: Optional[pulumi.Input[int]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_portal_addr: Optional[pulumi.Input[str]] = None,
                 beacon_advertising: Optional[pulumi.Input[str]] = None,
                 broadcast_ssid: Optional[pulumi.Input[str]] = None,
                 broadcast_suppression: Optional[pulumi.Input[str]] = None,
                 bss_color_partial: Optional[pulumi.Input[str]] = None,
                 bstm_disassociation_imminent: Optional[pulumi.Input[str]] = None,
                 bstm_load_balancing_disassoc_timer: Optional[pulumi.Input[int]] = None,
                 bstm_rssi_disassoc_timer: Optional[pulumi.Input[int]] = None,
                 captive_portal_ac_name: Optional[pulumi.Input[str]] = None,
                 captive_portal_auth_timeout: Optional[pulumi.Input[int]] = None,
                 captive_portal_fw_accounting: Optional[pulumi.Input[str]] = None,
                 captive_portal_macauth_radius_secret: Optional[pulumi.Input[str]] = None,
                 captive_portal_macauth_radius_server: Optional[pulumi.Input[str]] = None,
                 captive_portal_radius_secret: Optional[pulumi.Input[str]] = None,
                 captive_portal_radius_server: Optional[pulumi.Input[str]] = None,
                 captive_portal_session_timeout_interval: Optional[pulumi.Input[int]] = None,
                 dhcp_address_enforcement: Optional[pulumi.Input[str]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[int]] = None,
                 dhcp_option43_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id_insertion: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamic_vlan: Optional[pulumi.Input[str]] = None,
                 eap_reauth: Optional[pulumi.Input[str]] = None,
                 eap_reauth_intv: Optional[pulumi.Input[int]] = None,
                 eapol_key_retries: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[str]] = None,
                 external_fast_roaming: Optional[pulumi.Input[str]] = None,
                 external_logout: Optional[pulumi.Input[str]] = None,
                 external_web: Optional[pulumi.Input[str]] = None,
                 external_web_format: Optional[pulumi.Input[str]] = None,
                 fast_bss_transition: Optional[pulumi.Input[str]] = None,
                 fast_roaming: Optional[pulumi.Input[str]] = None,
                 ft_mobility_domain: Optional[pulumi.Input[int]] = None,
                 ft_over_ds: Optional[pulumi.Input[str]] = None,
                 ft_r0_key_lifetime: Optional[pulumi.Input[int]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[int]] = None,
                 gas_fragmentation_limit: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gtk_rekey: Optional[pulumi.Input[str]] = None,
                 gtk_rekey_intv: Optional[pulumi.Input[int]] = None,
                 high_efficiency: Optional[pulumi.Input[str]] = None,
                 hotspot20_profile: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[str]] = None,
                 intra_vap_privacy: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ipv6_rules: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 keyindex: Optional[pulumi.Input[int]] = None,
                 l3_roaming: Optional[pulumi.Input[str]] = None,
                 l3_roaming_mode: Optional[pulumi.Input[str]] = None,
                 ldpc: Optional[pulumi.Input[str]] = None,
                 local_authentication: Optional[pulumi.Input[str]] = None,
                 local_bridging: Optional[pulumi.Input[str]] = None,
                 local_lan: Optional[pulumi.Input[str]] = None,
                 local_standalone: Optional[pulumi.Input[str]] = None,
                 local_standalone_dns: Optional[pulumi.Input[str]] = None,
                 local_standalone_dns_ip: Optional[pulumi.Input[str]] = None,
                 local_standalone_nat: Optional[pulumi.Input[str]] = None,
                 mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 mac_called_station_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_calling_station_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_case: Optional[pulumi.Input[str]] = None,
                 mac_filter: Optional[pulumi.Input[str]] = None,
                 mac_filter_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapMacFilterListArgs']]]]] = None,
                 mac_filter_policy_other: Optional[pulumi.Input[str]] = None,
                 mac_password_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_username_delimiter: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_clients_ap: Optional[pulumi.Input[int]] = None,
                 mbo: Optional[pulumi.Input[str]] = None,
                 mbo_cell_data_conn_pref: Optional[pulumi.Input[str]] = None,
                 me_disable_thresh: Optional[pulumi.Input[int]] = None,
                 mesh_backhaul: Optional[pulumi.Input[str]] = None,
                 mpsk: Optional[pulumi.Input[str]] = None,
                 mpsk_concurrent_clients: Optional[pulumi.Input[int]] = None,
                 mpsk_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapMpskKeyArgs']]]]] = None,
                 mpsk_profile: Optional[pulumi.Input[str]] = None,
                 mu_mimo: Optional[pulumi.Input[str]] = None,
                 multicast_enhance: Optional[pulumi.Input[str]] = None,
                 multicast_rate: Optional[pulumi.Input[str]] = None,
                 nac: Optional[pulumi.Input[str]] = None,
                 nac_profile: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbor_report_dual_band: Optional[pulumi.Input[str]] = None,
                 okc: Optional[pulumi.Input[str]] = None,
                 osen: Optional[pulumi.Input[str]] = None,
                 owe_groups: Optional[pulumi.Input[str]] = None,
                 owe_transition: Optional[pulumi.Input[str]] = None,
                 owe_transition_ssid: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pmf: Optional[pulumi.Input[str]] = None,
                 pmf_assoc_comeback_timeout: Optional[pulumi.Input[int]] = None,
                 pmf_sa_query_retry_timeout: Optional[pulumi.Input[int]] = None,
                 port_macauth: Optional[pulumi.Input[str]] = None,
                 port_macauth_reauth_timeout: Optional[pulumi.Input[int]] = None,
                 port_macauth_timeout: Optional[pulumi.Input[int]] = None,
                 portal_message_override_group: Optional[pulumi.Input[str]] = None,
                 portal_message_overrides: Optional[pulumi.Input[pulumi.InputType['WirelessControllerVapPortalMessageOverridesArgs']]] = None,
                 portal_type: Optional[pulumi.Input[str]] = None,
                 primary_wag_profile: Optional[pulumi.Input[str]] = None,
                 probe_resp_suppression: Optional[pulumi.Input[str]] = None,
                 probe_resp_threshold: Optional[pulumi.Input[str]] = None,
                 ptk_rekey: Optional[pulumi.Input[str]] = None,
                 ptk_rekey_intv: Optional[pulumi.Input[int]] = None,
                 qos_profile: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 radio2g_threshold: Optional[pulumi.Input[str]] = None,
                 radio5g_threshold: Optional[pulumi.Input[str]] = None,
                 radio_sensitivity: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_block_interval: Optional[pulumi.Input[int]] = None,
                 radius_mac_auth_server: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapRadiusMacAuthUsergroupArgs']]]]] = None,
                 radius_mac_mpsk_auth: Optional[pulumi.Input[str]] = None,
                 radius_mac_mpsk_timeout: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 rates11a: Optional[pulumi.Input[str]] = None,
                 rates11ac_mcs_map: Optional[pulumi.Input[str]] = None,
                 rates11ac_ss12: Optional[pulumi.Input[str]] = None,
                 rates11ac_ss34: Optional[pulumi.Input[str]] = None,
                 rates11ax_mcs_map: Optional[pulumi.Input[str]] = None,
                 rates11ax_ss12: Optional[pulumi.Input[str]] = None,
                 rates11ax_ss34: Optional[pulumi.Input[str]] = None,
                 rates11bg: Optional[pulumi.Input[str]] = None,
                 rates11n_ss12: Optional[pulumi.Input[str]] = None,
                 rates11n_ss34: Optional[pulumi.Input[str]] = None,
                 sae_groups: Optional[pulumi.Input[str]] = None,
                 sae_h2e_only: Optional[pulumi.Input[str]] = None,
                 sae_password: Optional[pulumi.Input[str]] = None,
                 sae_pk: Optional[pulumi.Input[str]] = None,
                 sae_private_key: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 secondary_wag_profile: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 security_exempt_list: Optional[pulumi.Input[str]] = None,
                 security_obsolete_option: Optional[pulumi.Input[str]] = None,
                 security_redirect_url: Optional[pulumi.Input[str]] = None,
                 selected_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapSelectedUsergroupArgs']]]]] = None,
                 split_tunneling: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 sticky_client_remove: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold2g: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold5g: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold6g: Optional[pulumi.Input[str]] = None,
                 target_wake_time: Optional[pulumi.Input[str]] = None,
                 tkip_counter_measure: Optional[pulumi.Input[str]] = None,
                 tunnel_echo_interval: Optional[pulumi.Input[int]] = None,
                 tunnel_fallback_interval: Optional[pulumi.Input[int]] = None,
                 usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapUsergroupArgs']]]]] = None,
                 utm_log: Optional[pulumi.Input[str]] = None,
                 utm_profile: Optional[pulumi.Input[str]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_auto: Optional[pulumi.Input[str]] = None,
                 vlan_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapVlanNameArgs']]]]] = None,
                 vlan_pooling: Optional[pulumi.Input[str]] = None,
                 vlan_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapVlanPoolArgs']]]]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 voice_enterprise: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WirelessControllerVap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WirelessControllerVapArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WirelessControllerVap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WirelessControllerVapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WirelessControllerVapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control_list: Optional[pulumi.Input[str]] = None,
                 acct_interim_interval: Optional[pulumi.Input[int]] = None,
                 additional_akms: Optional[pulumi.Input[str]] = None,
                 address_group: Optional[pulumi.Input[str]] = None,
                 address_group_policy: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 antivirus_profile: Optional[pulumi.Input[str]] = None,
                 application_detection_engine: Optional[pulumi.Input[str]] = None,
                 application_dscp_marking: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 application_report_intv: Optional[pulumi.Input[int]] = None,
                 atf_weight: Optional[pulumi.Input[int]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_portal_addr: Optional[pulumi.Input[str]] = None,
                 beacon_advertising: Optional[pulumi.Input[str]] = None,
                 broadcast_ssid: Optional[pulumi.Input[str]] = None,
                 broadcast_suppression: Optional[pulumi.Input[str]] = None,
                 bss_color_partial: Optional[pulumi.Input[str]] = None,
                 bstm_disassociation_imminent: Optional[pulumi.Input[str]] = None,
                 bstm_load_balancing_disassoc_timer: Optional[pulumi.Input[int]] = None,
                 bstm_rssi_disassoc_timer: Optional[pulumi.Input[int]] = None,
                 captive_portal_ac_name: Optional[pulumi.Input[str]] = None,
                 captive_portal_auth_timeout: Optional[pulumi.Input[int]] = None,
                 captive_portal_fw_accounting: Optional[pulumi.Input[str]] = None,
                 captive_portal_macauth_radius_secret: Optional[pulumi.Input[str]] = None,
                 captive_portal_macauth_radius_server: Optional[pulumi.Input[str]] = None,
                 captive_portal_radius_secret: Optional[pulumi.Input[str]] = None,
                 captive_portal_radius_server: Optional[pulumi.Input[str]] = None,
                 captive_portal_session_timeout_interval: Optional[pulumi.Input[int]] = None,
                 dhcp_address_enforcement: Optional[pulumi.Input[str]] = None,
                 dhcp_lease_time: Optional[pulumi.Input[int]] = None,
                 dhcp_option43_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_circuit_id_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_insertion: Optional[pulumi.Input[str]] = None,
                 dhcp_option82_remote_id_insertion: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 dynamic_vlan: Optional[pulumi.Input[str]] = None,
                 eap_reauth: Optional[pulumi.Input[str]] = None,
                 eap_reauth_intv: Optional[pulumi.Input[int]] = None,
                 eapol_key_retries: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[str]] = None,
                 external_fast_roaming: Optional[pulumi.Input[str]] = None,
                 external_logout: Optional[pulumi.Input[str]] = None,
                 external_web: Optional[pulumi.Input[str]] = None,
                 external_web_format: Optional[pulumi.Input[str]] = None,
                 fast_bss_transition: Optional[pulumi.Input[str]] = None,
                 fast_roaming: Optional[pulumi.Input[str]] = None,
                 ft_mobility_domain: Optional[pulumi.Input[int]] = None,
                 ft_over_ds: Optional[pulumi.Input[str]] = None,
                 ft_r0_key_lifetime: Optional[pulumi.Input[int]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[int]] = None,
                 gas_fragmentation_limit: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gtk_rekey: Optional[pulumi.Input[str]] = None,
                 gtk_rekey_intv: Optional[pulumi.Input[int]] = None,
                 high_efficiency: Optional[pulumi.Input[str]] = None,
                 hotspot20_profile: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[str]] = None,
                 intra_vap_privacy: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ipv6_rules: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 keyindex: Optional[pulumi.Input[int]] = None,
                 l3_roaming: Optional[pulumi.Input[str]] = None,
                 l3_roaming_mode: Optional[pulumi.Input[str]] = None,
                 ldpc: Optional[pulumi.Input[str]] = None,
                 local_authentication: Optional[pulumi.Input[str]] = None,
                 local_bridging: Optional[pulumi.Input[str]] = None,
                 local_lan: Optional[pulumi.Input[str]] = None,
                 local_standalone: Optional[pulumi.Input[str]] = None,
                 local_standalone_dns: Optional[pulumi.Input[str]] = None,
                 local_standalone_dns_ip: Optional[pulumi.Input[str]] = None,
                 local_standalone_nat: Optional[pulumi.Input[str]] = None,
                 mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 mac_called_station_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_calling_station_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_case: Optional[pulumi.Input[str]] = None,
                 mac_filter: Optional[pulumi.Input[str]] = None,
                 mac_filter_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapMacFilterListArgs']]]]] = None,
                 mac_filter_policy_other: Optional[pulumi.Input[str]] = None,
                 mac_password_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_username_delimiter: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_clients_ap: Optional[pulumi.Input[int]] = None,
                 mbo: Optional[pulumi.Input[str]] = None,
                 mbo_cell_data_conn_pref: Optional[pulumi.Input[str]] = None,
                 me_disable_thresh: Optional[pulumi.Input[int]] = None,
                 mesh_backhaul: Optional[pulumi.Input[str]] = None,
                 mpsk: Optional[pulumi.Input[str]] = None,
                 mpsk_concurrent_clients: Optional[pulumi.Input[int]] = None,
                 mpsk_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapMpskKeyArgs']]]]] = None,
                 mpsk_profile: Optional[pulumi.Input[str]] = None,
                 mu_mimo: Optional[pulumi.Input[str]] = None,
                 multicast_enhance: Optional[pulumi.Input[str]] = None,
                 multicast_rate: Optional[pulumi.Input[str]] = None,
                 nac: Optional[pulumi.Input[str]] = None,
                 nac_profile: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbor_report_dual_band: Optional[pulumi.Input[str]] = None,
                 okc: Optional[pulumi.Input[str]] = None,
                 osen: Optional[pulumi.Input[str]] = None,
                 owe_groups: Optional[pulumi.Input[str]] = None,
                 owe_transition: Optional[pulumi.Input[str]] = None,
                 owe_transition_ssid: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pmf: Optional[pulumi.Input[str]] = None,
                 pmf_assoc_comeback_timeout: Optional[pulumi.Input[int]] = None,
                 pmf_sa_query_retry_timeout: Optional[pulumi.Input[int]] = None,
                 port_macauth: Optional[pulumi.Input[str]] = None,
                 port_macauth_reauth_timeout: Optional[pulumi.Input[int]] = None,
                 port_macauth_timeout: Optional[pulumi.Input[int]] = None,
                 portal_message_override_group: Optional[pulumi.Input[str]] = None,
                 portal_message_overrides: Optional[pulumi.Input[pulumi.InputType['WirelessControllerVapPortalMessageOverridesArgs']]] = None,
                 portal_type: Optional[pulumi.Input[str]] = None,
                 primary_wag_profile: Optional[pulumi.Input[str]] = None,
                 probe_resp_suppression: Optional[pulumi.Input[str]] = None,
                 probe_resp_threshold: Optional[pulumi.Input[str]] = None,
                 ptk_rekey: Optional[pulumi.Input[str]] = None,
                 ptk_rekey_intv: Optional[pulumi.Input[int]] = None,
                 qos_profile: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 radio2g_threshold: Optional[pulumi.Input[str]] = None,
                 radio5g_threshold: Optional[pulumi.Input[str]] = None,
                 radio_sensitivity: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_block_interval: Optional[pulumi.Input[int]] = None,
                 radius_mac_auth_server: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapRadiusMacAuthUsergroupArgs']]]]] = None,
                 radius_mac_mpsk_auth: Optional[pulumi.Input[str]] = None,
                 radius_mac_mpsk_timeout: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 rates11a: Optional[pulumi.Input[str]] = None,
                 rates11ac_mcs_map: Optional[pulumi.Input[str]] = None,
                 rates11ac_ss12: Optional[pulumi.Input[str]] = None,
                 rates11ac_ss34: Optional[pulumi.Input[str]] = None,
                 rates11ax_mcs_map: Optional[pulumi.Input[str]] = None,
                 rates11ax_ss12: Optional[pulumi.Input[str]] = None,
                 rates11ax_ss34: Optional[pulumi.Input[str]] = None,
                 rates11bg: Optional[pulumi.Input[str]] = None,
                 rates11n_ss12: Optional[pulumi.Input[str]] = None,
                 rates11n_ss34: Optional[pulumi.Input[str]] = None,
                 sae_groups: Optional[pulumi.Input[str]] = None,
                 sae_h2e_only: Optional[pulumi.Input[str]] = None,
                 sae_password: Optional[pulumi.Input[str]] = None,
                 sae_pk: Optional[pulumi.Input[str]] = None,
                 sae_private_key: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 secondary_wag_profile: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 security_exempt_list: Optional[pulumi.Input[str]] = None,
                 security_obsolete_option: Optional[pulumi.Input[str]] = None,
                 security_redirect_url: Optional[pulumi.Input[str]] = None,
                 selected_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapSelectedUsergroupArgs']]]]] = None,
                 split_tunneling: Optional[pulumi.Input[str]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 sticky_client_remove: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold2g: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold5g: Optional[pulumi.Input[str]] = None,
                 sticky_client_threshold6g: Optional[pulumi.Input[str]] = None,
                 target_wake_time: Optional[pulumi.Input[str]] = None,
                 tkip_counter_measure: Optional[pulumi.Input[str]] = None,
                 tunnel_echo_interval: Optional[pulumi.Input[int]] = None,
                 tunnel_fallback_interval: Optional[pulumi.Input[int]] = None,
                 usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapUsergroupArgs']]]]] = None,
                 utm_log: Optional[pulumi.Input[str]] = None,
                 utm_profile: Optional[pulumi.Input[str]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_auto: Optional[pulumi.Input[str]] = None,
                 vlan_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapVlanNameArgs']]]]] = None,
                 vlan_pooling: Optional[pulumi.Input[str]] = None,
                 vlan_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapVlanPoolArgs']]]]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 voice_enterprise: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WirelessControllerVapArgs.__new__(WirelessControllerVapArgs)

            __props__.__dict__["access_control_list"] = access_control_list
            __props__.__dict__["acct_interim_interval"] = acct_interim_interval
            __props__.__dict__["additional_akms"] = additional_akms
            __props__.__dict__["address_group"] = address_group
            __props__.__dict__["address_group_policy"] = address_group_policy
            __props__.__dict__["alias"] = alias
            __props__.__dict__["antivirus_profile"] = antivirus_profile
            __props__.__dict__["application_detection_engine"] = application_detection_engine
            __props__.__dict__["application_dscp_marking"] = application_dscp_marking
            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["application_report_intv"] = application_report_intv
            __props__.__dict__["atf_weight"] = atf_weight
            __props__.__dict__["auth"] = auth
            __props__.__dict__["auth_cert"] = auth_cert
            __props__.__dict__["auth_portal_addr"] = auth_portal_addr
            __props__.__dict__["beacon_advertising"] = beacon_advertising
            __props__.__dict__["broadcast_ssid"] = broadcast_ssid
            __props__.__dict__["broadcast_suppression"] = broadcast_suppression
            __props__.__dict__["bss_color_partial"] = bss_color_partial
            __props__.__dict__["bstm_disassociation_imminent"] = bstm_disassociation_imminent
            __props__.__dict__["bstm_load_balancing_disassoc_timer"] = bstm_load_balancing_disassoc_timer
            __props__.__dict__["bstm_rssi_disassoc_timer"] = bstm_rssi_disassoc_timer
            __props__.__dict__["captive_portal_ac_name"] = captive_portal_ac_name
            __props__.__dict__["captive_portal_auth_timeout"] = captive_portal_auth_timeout
            __props__.__dict__["captive_portal_fw_accounting"] = captive_portal_fw_accounting
            __props__.__dict__["captive_portal_macauth_radius_secret"] = None if captive_portal_macauth_radius_secret is None else pulumi.Output.secret(captive_portal_macauth_radius_secret)
            __props__.__dict__["captive_portal_macauth_radius_server"] = captive_portal_macauth_radius_server
            __props__.__dict__["captive_portal_radius_secret"] = None if captive_portal_radius_secret is None else pulumi.Output.secret(captive_portal_radius_secret)
            __props__.__dict__["captive_portal_radius_server"] = captive_portal_radius_server
            __props__.__dict__["captive_portal_session_timeout_interval"] = captive_portal_session_timeout_interval
            __props__.__dict__["dhcp_address_enforcement"] = dhcp_address_enforcement
            __props__.__dict__["dhcp_lease_time"] = dhcp_lease_time
            __props__.__dict__["dhcp_option43_insertion"] = dhcp_option43_insertion
            __props__.__dict__["dhcp_option82_circuit_id_insertion"] = dhcp_option82_circuit_id_insertion
            __props__.__dict__["dhcp_option82_insertion"] = dhcp_option82_insertion
            __props__.__dict__["dhcp_option82_remote_id_insertion"] = dhcp_option82_remote_id_insertion
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["dynamic_vlan"] = dynamic_vlan
            __props__.__dict__["eap_reauth"] = eap_reauth
            __props__.__dict__["eap_reauth_intv"] = eap_reauth_intv
            __props__.__dict__["eapol_key_retries"] = eapol_key_retries
            __props__.__dict__["encrypt"] = encrypt
            __props__.__dict__["external_fast_roaming"] = external_fast_roaming
            __props__.__dict__["external_logout"] = external_logout
            __props__.__dict__["external_web"] = external_web
            __props__.__dict__["external_web_format"] = external_web_format
            __props__.__dict__["fast_bss_transition"] = fast_bss_transition
            __props__.__dict__["fast_roaming"] = fast_roaming
            __props__.__dict__["ft_mobility_domain"] = ft_mobility_domain
            __props__.__dict__["ft_over_ds"] = ft_over_ds
            __props__.__dict__["ft_r0_key_lifetime"] = ft_r0_key_lifetime
            __props__.__dict__["gas_comeback_delay"] = gas_comeback_delay
            __props__.__dict__["gas_fragmentation_limit"] = gas_fragmentation_limit
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["gtk_rekey"] = gtk_rekey
            __props__.__dict__["gtk_rekey_intv"] = gtk_rekey_intv
            __props__.__dict__["high_efficiency"] = high_efficiency
            __props__.__dict__["hotspot20_profile"] = hotspot20_profile
            __props__.__dict__["igmp_snooping"] = igmp_snooping
            __props__.__dict__["intra_vap_privacy"] = intra_vap_privacy
            __props__.__dict__["ip"] = ip
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["ipv6_rules"] = ipv6_rules
            __props__.__dict__["key"] = None if key is None else pulumi.Output.secret(key)
            __props__.__dict__["keyindex"] = keyindex
            __props__.__dict__["l3_roaming"] = l3_roaming
            __props__.__dict__["l3_roaming_mode"] = l3_roaming_mode
            __props__.__dict__["ldpc"] = ldpc
            __props__.__dict__["local_authentication"] = local_authentication
            __props__.__dict__["local_bridging"] = local_bridging
            __props__.__dict__["local_lan"] = local_lan
            __props__.__dict__["local_standalone"] = local_standalone
            __props__.__dict__["local_standalone_dns"] = local_standalone_dns
            __props__.__dict__["local_standalone_dns_ip"] = local_standalone_dns_ip
            __props__.__dict__["local_standalone_nat"] = local_standalone_nat
            __props__.__dict__["mac_auth_bypass"] = mac_auth_bypass
            __props__.__dict__["mac_called_station_delimiter"] = mac_called_station_delimiter
            __props__.__dict__["mac_calling_station_delimiter"] = mac_calling_station_delimiter
            __props__.__dict__["mac_case"] = mac_case
            __props__.__dict__["mac_filter"] = mac_filter
            __props__.__dict__["mac_filter_lists"] = mac_filter_lists
            __props__.__dict__["mac_filter_policy_other"] = mac_filter_policy_other
            __props__.__dict__["mac_password_delimiter"] = mac_password_delimiter
            __props__.__dict__["mac_username_delimiter"] = mac_username_delimiter
            __props__.__dict__["max_clients"] = max_clients
            __props__.__dict__["max_clients_ap"] = max_clients_ap
            __props__.__dict__["mbo"] = mbo
            __props__.__dict__["mbo_cell_data_conn_pref"] = mbo_cell_data_conn_pref
            __props__.__dict__["me_disable_thresh"] = me_disable_thresh
            __props__.__dict__["mesh_backhaul"] = mesh_backhaul
            __props__.__dict__["mpsk"] = mpsk
            __props__.__dict__["mpsk_concurrent_clients"] = mpsk_concurrent_clients
            __props__.__dict__["mpsk_keys"] = mpsk_keys
            __props__.__dict__["mpsk_profile"] = mpsk_profile
            __props__.__dict__["mu_mimo"] = mu_mimo
            __props__.__dict__["multicast_enhance"] = multicast_enhance
            __props__.__dict__["multicast_rate"] = multicast_rate
            __props__.__dict__["nac"] = nac
            __props__.__dict__["nac_profile"] = nac_profile
            __props__.__dict__["name"] = name
            __props__.__dict__["neighbor_report_dual_band"] = neighbor_report_dual_band
            __props__.__dict__["okc"] = okc
            __props__.__dict__["osen"] = osen
            __props__.__dict__["owe_groups"] = owe_groups
            __props__.__dict__["owe_transition"] = owe_transition
            __props__.__dict__["owe_transition_ssid"] = owe_transition_ssid
            __props__.__dict__["passphrase"] = None if passphrase is None else pulumi.Output.secret(passphrase)
            __props__.__dict__["pmf"] = pmf
            __props__.__dict__["pmf_assoc_comeback_timeout"] = pmf_assoc_comeback_timeout
            __props__.__dict__["pmf_sa_query_retry_timeout"] = pmf_sa_query_retry_timeout
            __props__.__dict__["port_macauth"] = port_macauth
            __props__.__dict__["port_macauth_reauth_timeout"] = port_macauth_reauth_timeout
            __props__.__dict__["port_macauth_timeout"] = port_macauth_timeout
            __props__.__dict__["portal_message_override_group"] = portal_message_override_group
            __props__.__dict__["portal_message_overrides"] = portal_message_overrides
            __props__.__dict__["portal_type"] = portal_type
            __props__.__dict__["primary_wag_profile"] = primary_wag_profile
            __props__.__dict__["probe_resp_suppression"] = probe_resp_suppression
            __props__.__dict__["probe_resp_threshold"] = probe_resp_threshold
            __props__.__dict__["ptk_rekey"] = ptk_rekey
            __props__.__dict__["ptk_rekey_intv"] = ptk_rekey_intv
            __props__.__dict__["qos_profile"] = qos_profile
            __props__.__dict__["quarantine"] = quarantine
            __props__.__dict__["radio2g_threshold"] = radio2g_threshold
            __props__.__dict__["radio5g_threshold"] = radio5g_threshold
            __props__.__dict__["radio_sensitivity"] = radio_sensitivity
            __props__.__dict__["radius_mac_auth"] = radius_mac_auth
            __props__.__dict__["radius_mac_auth_block_interval"] = radius_mac_auth_block_interval
            __props__.__dict__["radius_mac_auth_server"] = radius_mac_auth_server
            __props__.__dict__["radius_mac_auth_usergroups"] = radius_mac_auth_usergroups
            __props__.__dict__["radius_mac_mpsk_auth"] = radius_mac_mpsk_auth
            __props__.__dict__["radius_mac_mpsk_timeout"] = radius_mac_mpsk_timeout
            __props__.__dict__["radius_server"] = radius_server
            __props__.__dict__["rates11a"] = rates11a
            __props__.__dict__["rates11ac_mcs_map"] = rates11ac_mcs_map
            __props__.__dict__["rates11ac_ss12"] = rates11ac_ss12
            __props__.__dict__["rates11ac_ss34"] = rates11ac_ss34
            __props__.__dict__["rates11ax_mcs_map"] = rates11ax_mcs_map
            __props__.__dict__["rates11ax_ss12"] = rates11ax_ss12
            __props__.__dict__["rates11ax_ss34"] = rates11ax_ss34
            __props__.__dict__["rates11bg"] = rates11bg
            __props__.__dict__["rates11n_ss12"] = rates11n_ss12
            __props__.__dict__["rates11n_ss34"] = rates11n_ss34
            __props__.__dict__["sae_groups"] = sae_groups
            __props__.__dict__["sae_h2e_only"] = sae_h2e_only
            __props__.__dict__["sae_password"] = None if sae_password is None else pulumi.Output.secret(sae_password)
            __props__.__dict__["sae_pk"] = sae_pk
            __props__.__dict__["sae_private_key"] = sae_private_key
            __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["secondary_wag_profile"] = secondary_wag_profile
            __props__.__dict__["security"] = security
            __props__.__dict__["security_exempt_list"] = security_exempt_list
            __props__.__dict__["security_obsolete_option"] = security_obsolete_option
            __props__.__dict__["security_redirect_url"] = security_redirect_url
            __props__.__dict__["selected_usergroups"] = selected_usergroups
            __props__.__dict__["split_tunneling"] = split_tunneling
            __props__.__dict__["ssid"] = ssid
            __props__.__dict__["sticky_client_remove"] = sticky_client_remove
            __props__.__dict__["sticky_client_threshold2g"] = sticky_client_threshold2g
            __props__.__dict__["sticky_client_threshold5g"] = sticky_client_threshold5g
            __props__.__dict__["sticky_client_threshold6g"] = sticky_client_threshold6g
            __props__.__dict__["target_wake_time"] = target_wake_time
            __props__.__dict__["tkip_counter_measure"] = tkip_counter_measure
            __props__.__dict__["tunnel_echo_interval"] = tunnel_echo_interval
            __props__.__dict__["tunnel_fallback_interval"] = tunnel_fallback_interval
            __props__.__dict__["usergroups"] = usergroups
            __props__.__dict__["utm_log"] = utm_log
            __props__.__dict__["utm_profile"] = utm_profile
            __props__.__dict__["utm_status"] = utm_status
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vlan_auto"] = vlan_auto
            __props__.__dict__["vlan_names"] = vlan_names
            __props__.__dict__["vlan_pooling"] = vlan_pooling
            __props__.__dict__["vlan_pools"] = vlan_pools
            __props__.__dict__["vlanid"] = vlanid
            __props__.__dict__["voice_enterprise"] = voice_enterprise
            __props__.__dict__["webfilter_profile"] = webfilter_profile
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["captivePortalMacauthRadiusSecret", "captivePortalRadiusSecret", "key", "passphrase", "saePassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(WirelessControllerVap, __self__).__init__(
            'fortios:index/wirelessControllerVap:WirelessControllerVap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_control_list: Optional[pulumi.Input[str]] = None,
            acct_interim_interval: Optional[pulumi.Input[int]] = None,
            additional_akms: Optional[pulumi.Input[str]] = None,
            address_group: Optional[pulumi.Input[str]] = None,
            address_group_policy: Optional[pulumi.Input[str]] = None,
            alias: Optional[pulumi.Input[str]] = None,
            antivirus_profile: Optional[pulumi.Input[str]] = None,
            application_detection_engine: Optional[pulumi.Input[str]] = None,
            application_dscp_marking: Optional[pulumi.Input[str]] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            application_report_intv: Optional[pulumi.Input[int]] = None,
            atf_weight: Optional[pulumi.Input[int]] = None,
            auth: Optional[pulumi.Input[str]] = None,
            auth_cert: Optional[pulumi.Input[str]] = None,
            auth_portal_addr: Optional[pulumi.Input[str]] = None,
            beacon_advertising: Optional[pulumi.Input[str]] = None,
            broadcast_ssid: Optional[pulumi.Input[str]] = None,
            broadcast_suppression: Optional[pulumi.Input[str]] = None,
            bss_color_partial: Optional[pulumi.Input[str]] = None,
            bstm_disassociation_imminent: Optional[pulumi.Input[str]] = None,
            bstm_load_balancing_disassoc_timer: Optional[pulumi.Input[int]] = None,
            bstm_rssi_disassoc_timer: Optional[pulumi.Input[int]] = None,
            captive_portal_ac_name: Optional[pulumi.Input[str]] = None,
            captive_portal_auth_timeout: Optional[pulumi.Input[int]] = None,
            captive_portal_fw_accounting: Optional[pulumi.Input[str]] = None,
            captive_portal_macauth_radius_secret: Optional[pulumi.Input[str]] = None,
            captive_portal_macauth_radius_server: Optional[pulumi.Input[str]] = None,
            captive_portal_radius_secret: Optional[pulumi.Input[str]] = None,
            captive_portal_radius_server: Optional[pulumi.Input[str]] = None,
            captive_portal_session_timeout_interval: Optional[pulumi.Input[int]] = None,
            dhcp_address_enforcement: Optional[pulumi.Input[str]] = None,
            dhcp_lease_time: Optional[pulumi.Input[int]] = None,
            dhcp_option43_insertion: Optional[pulumi.Input[str]] = None,
            dhcp_option82_circuit_id_insertion: Optional[pulumi.Input[str]] = None,
            dhcp_option82_insertion: Optional[pulumi.Input[str]] = None,
            dhcp_option82_remote_id_insertion: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            dynamic_vlan: Optional[pulumi.Input[str]] = None,
            eap_reauth: Optional[pulumi.Input[str]] = None,
            eap_reauth_intv: Optional[pulumi.Input[int]] = None,
            eapol_key_retries: Optional[pulumi.Input[str]] = None,
            encrypt: Optional[pulumi.Input[str]] = None,
            external_fast_roaming: Optional[pulumi.Input[str]] = None,
            external_logout: Optional[pulumi.Input[str]] = None,
            external_web: Optional[pulumi.Input[str]] = None,
            external_web_format: Optional[pulumi.Input[str]] = None,
            fast_bss_transition: Optional[pulumi.Input[str]] = None,
            fast_roaming: Optional[pulumi.Input[str]] = None,
            ft_mobility_domain: Optional[pulumi.Input[int]] = None,
            ft_over_ds: Optional[pulumi.Input[str]] = None,
            ft_r0_key_lifetime: Optional[pulumi.Input[int]] = None,
            gas_comeback_delay: Optional[pulumi.Input[int]] = None,
            gas_fragmentation_limit: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            gtk_rekey: Optional[pulumi.Input[str]] = None,
            gtk_rekey_intv: Optional[pulumi.Input[int]] = None,
            high_efficiency: Optional[pulumi.Input[str]] = None,
            hotspot20_profile: Optional[pulumi.Input[str]] = None,
            igmp_snooping: Optional[pulumi.Input[str]] = None,
            intra_vap_privacy: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            ipv6_rules: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            keyindex: Optional[pulumi.Input[int]] = None,
            l3_roaming: Optional[pulumi.Input[str]] = None,
            l3_roaming_mode: Optional[pulumi.Input[str]] = None,
            ldpc: Optional[pulumi.Input[str]] = None,
            local_authentication: Optional[pulumi.Input[str]] = None,
            local_bridging: Optional[pulumi.Input[str]] = None,
            local_lan: Optional[pulumi.Input[str]] = None,
            local_standalone: Optional[pulumi.Input[str]] = None,
            local_standalone_dns: Optional[pulumi.Input[str]] = None,
            local_standalone_dns_ip: Optional[pulumi.Input[str]] = None,
            local_standalone_nat: Optional[pulumi.Input[str]] = None,
            mac_auth_bypass: Optional[pulumi.Input[str]] = None,
            mac_called_station_delimiter: Optional[pulumi.Input[str]] = None,
            mac_calling_station_delimiter: Optional[pulumi.Input[str]] = None,
            mac_case: Optional[pulumi.Input[str]] = None,
            mac_filter: Optional[pulumi.Input[str]] = None,
            mac_filter_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapMacFilterListArgs']]]]] = None,
            mac_filter_policy_other: Optional[pulumi.Input[str]] = None,
            mac_password_delimiter: Optional[pulumi.Input[str]] = None,
            mac_username_delimiter: Optional[pulumi.Input[str]] = None,
            max_clients: Optional[pulumi.Input[int]] = None,
            max_clients_ap: Optional[pulumi.Input[int]] = None,
            mbo: Optional[pulumi.Input[str]] = None,
            mbo_cell_data_conn_pref: Optional[pulumi.Input[str]] = None,
            me_disable_thresh: Optional[pulumi.Input[int]] = None,
            mesh_backhaul: Optional[pulumi.Input[str]] = None,
            mpsk: Optional[pulumi.Input[str]] = None,
            mpsk_concurrent_clients: Optional[pulumi.Input[int]] = None,
            mpsk_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapMpskKeyArgs']]]]] = None,
            mpsk_profile: Optional[pulumi.Input[str]] = None,
            mu_mimo: Optional[pulumi.Input[str]] = None,
            multicast_enhance: Optional[pulumi.Input[str]] = None,
            multicast_rate: Optional[pulumi.Input[str]] = None,
            nac: Optional[pulumi.Input[str]] = None,
            nac_profile: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            neighbor_report_dual_band: Optional[pulumi.Input[str]] = None,
            okc: Optional[pulumi.Input[str]] = None,
            osen: Optional[pulumi.Input[str]] = None,
            owe_groups: Optional[pulumi.Input[str]] = None,
            owe_transition: Optional[pulumi.Input[str]] = None,
            owe_transition_ssid: Optional[pulumi.Input[str]] = None,
            passphrase: Optional[pulumi.Input[str]] = None,
            pmf: Optional[pulumi.Input[str]] = None,
            pmf_assoc_comeback_timeout: Optional[pulumi.Input[int]] = None,
            pmf_sa_query_retry_timeout: Optional[pulumi.Input[int]] = None,
            port_macauth: Optional[pulumi.Input[str]] = None,
            port_macauth_reauth_timeout: Optional[pulumi.Input[int]] = None,
            port_macauth_timeout: Optional[pulumi.Input[int]] = None,
            portal_message_override_group: Optional[pulumi.Input[str]] = None,
            portal_message_overrides: Optional[pulumi.Input[pulumi.InputType['WirelessControllerVapPortalMessageOverridesArgs']]] = None,
            portal_type: Optional[pulumi.Input[str]] = None,
            primary_wag_profile: Optional[pulumi.Input[str]] = None,
            probe_resp_suppression: Optional[pulumi.Input[str]] = None,
            probe_resp_threshold: Optional[pulumi.Input[str]] = None,
            ptk_rekey: Optional[pulumi.Input[str]] = None,
            ptk_rekey_intv: Optional[pulumi.Input[int]] = None,
            qos_profile: Optional[pulumi.Input[str]] = None,
            quarantine: Optional[pulumi.Input[str]] = None,
            radio2g_threshold: Optional[pulumi.Input[str]] = None,
            radio5g_threshold: Optional[pulumi.Input[str]] = None,
            radio_sensitivity: Optional[pulumi.Input[str]] = None,
            radius_mac_auth: Optional[pulumi.Input[str]] = None,
            radius_mac_auth_block_interval: Optional[pulumi.Input[int]] = None,
            radius_mac_auth_server: Optional[pulumi.Input[str]] = None,
            radius_mac_auth_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapRadiusMacAuthUsergroupArgs']]]]] = None,
            radius_mac_mpsk_auth: Optional[pulumi.Input[str]] = None,
            radius_mac_mpsk_timeout: Optional[pulumi.Input[int]] = None,
            radius_server: Optional[pulumi.Input[str]] = None,
            rates11a: Optional[pulumi.Input[str]] = None,
            rates11ac_mcs_map: Optional[pulumi.Input[str]] = None,
            rates11ac_ss12: Optional[pulumi.Input[str]] = None,
            rates11ac_ss34: Optional[pulumi.Input[str]] = None,
            rates11ax_mcs_map: Optional[pulumi.Input[str]] = None,
            rates11ax_ss12: Optional[pulumi.Input[str]] = None,
            rates11ax_ss34: Optional[pulumi.Input[str]] = None,
            rates11bg: Optional[pulumi.Input[str]] = None,
            rates11n_ss12: Optional[pulumi.Input[str]] = None,
            rates11n_ss34: Optional[pulumi.Input[str]] = None,
            sae_groups: Optional[pulumi.Input[str]] = None,
            sae_h2e_only: Optional[pulumi.Input[str]] = None,
            sae_password: Optional[pulumi.Input[str]] = None,
            sae_pk: Optional[pulumi.Input[str]] = None,
            sae_private_key: Optional[pulumi.Input[str]] = None,
            scan_botnet_connections: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            secondary_wag_profile: Optional[pulumi.Input[str]] = None,
            security: Optional[pulumi.Input[str]] = None,
            security_exempt_list: Optional[pulumi.Input[str]] = None,
            security_obsolete_option: Optional[pulumi.Input[str]] = None,
            security_redirect_url: Optional[pulumi.Input[str]] = None,
            selected_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapSelectedUsergroupArgs']]]]] = None,
            split_tunneling: Optional[pulumi.Input[str]] = None,
            ssid: Optional[pulumi.Input[str]] = None,
            sticky_client_remove: Optional[pulumi.Input[str]] = None,
            sticky_client_threshold2g: Optional[pulumi.Input[str]] = None,
            sticky_client_threshold5g: Optional[pulumi.Input[str]] = None,
            sticky_client_threshold6g: Optional[pulumi.Input[str]] = None,
            target_wake_time: Optional[pulumi.Input[str]] = None,
            tkip_counter_measure: Optional[pulumi.Input[str]] = None,
            tunnel_echo_interval: Optional[pulumi.Input[int]] = None,
            tunnel_fallback_interval: Optional[pulumi.Input[int]] = None,
            usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapUsergroupArgs']]]]] = None,
            utm_log: Optional[pulumi.Input[str]] = None,
            utm_profile: Optional[pulumi.Input[str]] = None,
            utm_status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vlan_auto: Optional[pulumi.Input[str]] = None,
            vlan_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapVlanNameArgs']]]]] = None,
            vlan_pooling: Optional[pulumi.Input[str]] = None,
            vlan_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerVapVlanPoolArgs']]]]] = None,
            vlanid: Optional[pulumi.Input[int]] = None,
            voice_enterprise: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None) -> 'WirelessControllerVap':
        """
        Get an existing WirelessControllerVap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WirelessControllerVapState.__new__(_WirelessControllerVapState)

        __props__.__dict__["access_control_list"] = access_control_list
        __props__.__dict__["acct_interim_interval"] = acct_interim_interval
        __props__.__dict__["additional_akms"] = additional_akms
        __props__.__dict__["address_group"] = address_group
        __props__.__dict__["address_group_policy"] = address_group_policy
        __props__.__dict__["alias"] = alias
        __props__.__dict__["antivirus_profile"] = antivirus_profile
        __props__.__dict__["application_detection_engine"] = application_detection_engine
        __props__.__dict__["application_dscp_marking"] = application_dscp_marking
        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["application_report_intv"] = application_report_intv
        __props__.__dict__["atf_weight"] = atf_weight
        __props__.__dict__["auth"] = auth
        __props__.__dict__["auth_cert"] = auth_cert
        __props__.__dict__["auth_portal_addr"] = auth_portal_addr
        __props__.__dict__["beacon_advertising"] = beacon_advertising
        __props__.__dict__["broadcast_ssid"] = broadcast_ssid
        __props__.__dict__["broadcast_suppression"] = broadcast_suppression
        __props__.__dict__["bss_color_partial"] = bss_color_partial
        __props__.__dict__["bstm_disassociation_imminent"] = bstm_disassociation_imminent
        __props__.__dict__["bstm_load_balancing_disassoc_timer"] = bstm_load_balancing_disassoc_timer
        __props__.__dict__["bstm_rssi_disassoc_timer"] = bstm_rssi_disassoc_timer
        __props__.__dict__["captive_portal_ac_name"] = captive_portal_ac_name
        __props__.__dict__["captive_portal_auth_timeout"] = captive_portal_auth_timeout
        __props__.__dict__["captive_portal_fw_accounting"] = captive_portal_fw_accounting
        __props__.__dict__["captive_portal_macauth_radius_secret"] = captive_portal_macauth_radius_secret
        __props__.__dict__["captive_portal_macauth_radius_server"] = captive_portal_macauth_radius_server
        __props__.__dict__["captive_portal_radius_secret"] = captive_portal_radius_secret
        __props__.__dict__["captive_portal_radius_server"] = captive_portal_radius_server
        __props__.__dict__["captive_portal_session_timeout_interval"] = captive_portal_session_timeout_interval
        __props__.__dict__["dhcp_address_enforcement"] = dhcp_address_enforcement
        __props__.__dict__["dhcp_lease_time"] = dhcp_lease_time
        __props__.__dict__["dhcp_option43_insertion"] = dhcp_option43_insertion
        __props__.__dict__["dhcp_option82_circuit_id_insertion"] = dhcp_option82_circuit_id_insertion
        __props__.__dict__["dhcp_option82_insertion"] = dhcp_option82_insertion
        __props__.__dict__["dhcp_option82_remote_id_insertion"] = dhcp_option82_remote_id_insertion
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["dynamic_vlan"] = dynamic_vlan
        __props__.__dict__["eap_reauth"] = eap_reauth
        __props__.__dict__["eap_reauth_intv"] = eap_reauth_intv
        __props__.__dict__["eapol_key_retries"] = eapol_key_retries
        __props__.__dict__["encrypt"] = encrypt
        __props__.__dict__["external_fast_roaming"] = external_fast_roaming
        __props__.__dict__["external_logout"] = external_logout
        __props__.__dict__["external_web"] = external_web
        __props__.__dict__["external_web_format"] = external_web_format
        __props__.__dict__["fast_bss_transition"] = fast_bss_transition
        __props__.__dict__["fast_roaming"] = fast_roaming
        __props__.__dict__["ft_mobility_domain"] = ft_mobility_domain
        __props__.__dict__["ft_over_ds"] = ft_over_ds
        __props__.__dict__["ft_r0_key_lifetime"] = ft_r0_key_lifetime
        __props__.__dict__["gas_comeback_delay"] = gas_comeback_delay
        __props__.__dict__["gas_fragmentation_limit"] = gas_fragmentation_limit
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["gtk_rekey"] = gtk_rekey
        __props__.__dict__["gtk_rekey_intv"] = gtk_rekey_intv
        __props__.__dict__["high_efficiency"] = high_efficiency
        __props__.__dict__["hotspot20_profile"] = hotspot20_profile
        __props__.__dict__["igmp_snooping"] = igmp_snooping
        __props__.__dict__["intra_vap_privacy"] = intra_vap_privacy
        __props__.__dict__["ip"] = ip
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["ipv6_rules"] = ipv6_rules
        __props__.__dict__["key"] = key
        __props__.__dict__["keyindex"] = keyindex
        __props__.__dict__["l3_roaming"] = l3_roaming
        __props__.__dict__["l3_roaming_mode"] = l3_roaming_mode
        __props__.__dict__["ldpc"] = ldpc
        __props__.__dict__["local_authentication"] = local_authentication
        __props__.__dict__["local_bridging"] = local_bridging
        __props__.__dict__["local_lan"] = local_lan
        __props__.__dict__["local_standalone"] = local_standalone
        __props__.__dict__["local_standalone_dns"] = local_standalone_dns
        __props__.__dict__["local_standalone_dns_ip"] = local_standalone_dns_ip
        __props__.__dict__["local_standalone_nat"] = local_standalone_nat
        __props__.__dict__["mac_auth_bypass"] = mac_auth_bypass
        __props__.__dict__["mac_called_station_delimiter"] = mac_called_station_delimiter
        __props__.__dict__["mac_calling_station_delimiter"] = mac_calling_station_delimiter
        __props__.__dict__["mac_case"] = mac_case
        __props__.__dict__["mac_filter"] = mac_filter
        __props__.__dict__["mac_filter_lists"] = mac_filter_lists
        __props__.__dict__["mac_filter_policy_other"] = mac_filter_policy_other
        __props__.__dict__["mac_password_delimiter"] = mac_password_delimiter
        __props__.__dict__["mac_username_delimiter"] = mac_username_delimiter
        __props__.__dict__["max_clients"] = max_clients
        __props__.__dict__["max_clients_ap"] = max_clients_ap
        __props__.__dict__["mbo"] = mbo
        __props__.__dict__["mbo_cell_data_conn_pref"] = mbo_cell_data_conn_pref
        __props__.__dict__["me_disable_thresh"] = me_disable_thresh
        __props__.__dict__["mesh_backhaul"] = mesh_backhaul
        __props__.__dict__["mpsk"] = mpsk
        __props__.__dict__["mpsk_concurrent_clients"] = mpsk_concurrent_clients
        __props__.__dict__["mpsk_keys"] = mpsk_keys
        __props__.__dict__["mpsk_profile"] = mpsk_profile
        __props__.__dict__["mu_mimo"] = mu_mimo
        __props__.__dict__["multicast_enhance"] = multicast_enhance
        __props__.__dict__["multicast_rate"] = multicast_rate
        __props__.__dict__["nac"] = nac
        __props__.__dict__["nac_profile"] = nac_profile
        __props__.__dict__["name"] = name
        __props__.__dict__["neighbor_report_dual_band"] = neighbor_report_dual_band
        __props__.__dict__["okc"] = okc
        __props__.__dict__["osen"] = osen
        __props__.__dict__["owe_groups"] = owe_groups
        __props__.__dict__["owe_transition"] = owe_transition
        __props__.__dict__["owe_transition_ssid"] = owe_transition_ssid
        __props__.__dict__["passphrase"] = passphrase
        __props__.__dict__["pmf"] = pmf
        __props__.__dict__["pmf_assoc_comeback_timeout"] = pmf_assoc_comeback_timeout
        __props__.__dict__["pmf_sa_query_retry_timeout"] = pmf_sa_query_retry_timeout
        __props__.__dict__["port_macauth"] = port_macauth
        __props__.__dict__["port_macauth_reauth_timeout"] = port_macauth_reauth_timeout
        __props__.__dict__["port_macauth_timeout"] = port_macauth_timeout
        __props__.__dict__["portal_message_override_group"] = portal_message_override_group
        __props__.__dict__["portal_message_overrides"] = portal_message_overrides
        __props__.__dict__["portal_type"] = portal_type
        __props__.__dict__["primary_wag_profile"] = primary_wag_profile
        __props__.__dict__["probe_resp_suppression"] = probe_resp_suppression
        __props__.__dict__["probe_resp_threshold"] = probe_resp_threshold
        __props__.__dict__["ptk_rekey"] = ptk_rekey
        __props__.__dict__["ptk_rekey_intv"] = ptk_rekey_intv
        __props__.__dict__["qos_profile"] = qos_profile
        __props__.__dict__["quarantine"] = quarantine
        __props__.__dict__["radio2g_threshold"] = radio2g_threshold
        __props__.__dict__["radio5g_threshold"] = radio5g_threshold
        __props__.__dict__["radio_sensitivity"] = radio_sensitivity
        __props__.__dict__["radius_mac_auth"] = radius_mac_auth
        __props__.__dict__["radius_mac_auth_block_interval"] = radius_mac_auth_block_interval
        __props__.__dict__["radius_mac_auth_server"] = radius_mac_auth_server
        __props__.__dict__["radius_mac_auth_usergroups"] = radius_mac_auth_usergroups
        __props__.__dict__["radius_mac_mpsk_auth"] = radius_mac_mpsk_auth
        __props__.__dict__["radius_mac_mpsk_timeout"] = radius_mac_mpsk_timeout
        __props__.__dict__["radius_server"] = radius_server
        __props__.__dict__["rates11a"] = rates11a
        __props__.__dict__["rates11ac_mcs_map"] = rates11ac_mcs_map
        __props__.__dict__["rates11ac_ss12"] = rates11ac_ss12
        __props__.__dict__["rates11ac_ss34"] = rates11ac_ss34
        __props__.__dict__["rates11ax_mcs_map"] = rates11ax_mcs_map
        __props__.__dict__["rates11ax_ss12"] = rates11ax_ss12
        __props__.__dict__["rates11ax_ss34"] = rates11ax_ss34
        __props__.__dict__["rates11bg"] = rates11bg
        __props__.__dict__["rates11n_ss12"] = rates11n_ss12
        __props__.__dict__["rates11n_ss34"] = rates11n_ss34
        __props__.__dict__["sae_groups"] = sae_groups
        __props__.__dict__["sae_h2e_only"] = sae_h2e_only
        __props__.__dict__["sae_password"] = sae_password
        __props__.__dict__["sae_pk"] = sae_pk
        __props__.__dict__["sae_private_key"] = sae_private_key
        __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["secondary_wag_profile"] = secondary_wag_profile
        __props__.__dict__["security"] = security
        __props__.__dict__["security_exempt_list"] = security_exempt_list
        __props__.__dict__["security_obsolete_option"] = security_obsolete_option
        __props__.__dict__["security_redirect_url"] = security_redirect_url
        __props__.__dict__["selected_usergroups"] = selected_usergroups
        __props__.__dict__["split_tunneling"] = split_tunneling
        __props__.__dict__["ssid"] = ssid
        __props__.__dict__["sticky_client_remove"] = sticky_client_remove
        __props__.__dict__["sticky_client_threshold2g"] = sticky_client_threshold2g
        __props__.__dict__["sticky_client_threshold5g"] = sticky_client_threshold5g
        __props__.__dict__["sticky_client_threshold6g"] = sticky_client_threshold6g
        __props__.__dict__["target_wake_time"] = target_wake_time
        __props__.__dict__["tkip_counter_measure"] = tkip_counter_measure
        __props__.__dict__["tunnel_echo_interval"] = tunnel_echo_interval
        __props__.__dict__["tunnel_fallback_interval"] = tunnel_fallback_interval
        __props__.__dict__["usergroups"] = usergroups
        __props__.__dict__["utm_log"] = utm_log
        __props__.__dict__["utm_profile"] = utm_profile
        __props__.__dict__["utm_status"] = utm_status
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vlan_auto"] = vlan_auto
        __props__.__dict__["vlan_names"] = vlan_names
        __props__.__dict__["vlan_pooling"] = vlan_pooling
        __props__.__dict__["vlan_pools"] = vlan_pools
        __props__.__dict__["vlanid"] = vlanid
        __props__.__dict__["voice_enterprise"] = voice_enterprise
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        return WirelessControllerVap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessControlList")
    def access_control_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "access_control_list")

    @property
    @pulumi.getter(name="acctInterimInterval")
    def acct_interim_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "acct_interim_interval")

    @property
    @pulumi.getter(name="additionalAkms")
    def additional_akms(self) -> pulumi.Output[str]:
        return pulumi.get(self, "additional_akms")

    @property
    @pulumi.getter(name="addressGroup")
    def address_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "address_group")

    @property
    @pulumi.getter(name="addressGroupPolicy")
    def address_group_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "address_group_policy")

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="antivirusProfile")
    def antivirus_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "antivirus_profile")

    @property
    @pulumi.getter(name="applicationDetectionEngine")
    def application_detection_engine(self) -> pulumi.Output[str]:
        return pulumi.get(self, "application_detection_engine")

    @property
    @pulumi.getter(name="applicationDscpMarking")
    def application_dscp_marking(self) -> pulumi.Output[str]:
        return pulumi.get(self, "application_dscp_marking")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter(name="applicationReportIntv")
    def application_report_intv(self) -> pulumi.Output[int]:
        return pulumi.get(self, "application_report_intv")

    @property
    @pulumi.getter(name="atfWeight")
    def atf_weight(self) -> pulumi.Output[int]:
        return pulumi.get(self, "atf_weight")

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_cert")

    @property
    @pulumi.getter(name="authPortalAddr")
    def auth_portal_addr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_portal_addr")

    @property
    @pulumi.getter(name="beaconAdvertising")
    def beacon_advertising(self) -> pulumi.Output[str]:
        return pulumi.get(self, "beacon_advertising")

    @property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "broadcast_ssid")

    @property
    @pulumi.getter(name="broadcastSuppression")
    def broadcast_suppression(self) -> pulumi.Output[str]:
        return pulumi.get(self, "broadcast_suppression")

    @property
    @pulumi.getter(name="bssColorPartial")
    def bss_color_partial(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bss_color_partial")

    @property
    @pulumi.getter(name="bstmDisassociationImminent")
    def bstm_disassociation_imminent(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bstm_disassociation_imminent")

    @property
    @pulumi.getter(name="bstmLoadBalancingDisassocTimer")
    def bstm_load_balancing_disassoc_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "bstm_load_balancing_disassoc_timer")

    @property
    @pulumi.getter(name="bstmRssiDisassocTimer")
    def bstm_rssi_disassoc_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "bstm_rssi_disassoc_timer")

    @property
    @pulumi.getter(name="captivePortalAcName")
    def captive_portal_ac_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "captive_portal_ac_name")

    @property
    @pulumi.getter(name="captivePortalAuthTimeout")
    def captive_portal_auth_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "captive_portal_auth_timeout")

    @property
    @pulumi.getter(name="captivePortalFwAccounting")
    def captive_portal_fw_accounting(self) -> pulumi.Output[str]:
        return pulumi.get(self, "captive_portal_fw_accounting")

    @property
    @pulumi.getter(name="captivePortalMacauthRadiusSecret")
    def captive_portal_macauth_radius_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "captive_portal_macauth_radius_secret")

    @property
    @pulumi.getter(name="captivePortalMacauthRadiusServer")
    def captive_portal_macauth_radius_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "captive_portal_macauth_radius_server")

    @property
    @pulumi.getter(name="captivePortalRadiusSecret")
    def captive_portal_radius_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "captive_portal_radius_secret")

    @property
    @pulumi.getter(name="captivePortalRadiusServer")
    def captive_portal_radius_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "captive_portal_radius_server")

    @property
    @pulumi.getter(name="captivePortalSessionTimeoutInterval")
    def captive_portal_session_timeout_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "captive_portal_session_timeout_interval")

    @property
    @pulumi.getter(name="dhcpAddressEnforcement")
    def dhcp_address_enforcement(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_address_enforcement")

    @property
    @pulumi.getter(name="dhcpLeaseTime")
    def dhcp_lease_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dhcp_lease_time")

    @property
    @pulumi.getter(name="dhcpOption43Insertion")
    def dhcp_option43_insertion(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_option43_insertion")

    @property
    @pulumi.getter(name="dhcpOption82CircuitIdInsertion")
    def dhcp_option82_circuit_id_insertion(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_option82_circuit_id_insertion")

    @property
    @pulumi.getter(name="dhcpOption82Insertion")
    def dhcp_option82_insertion(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_option82_insertion")

    @property
    @pulumi.getter(name="dhcpOption82RemoteIdInsertion")
    def dhcp_option82_remote_id_insertion(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_option82_remote_id_insertion")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="dynamicVlan")
    def dynamic_vlan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dynamic_vlan")

    @property
    @pulumi.getter(name="eapReauth")
    def eap_reauth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "eap_reauth")

    @property
    @pulumi.getter(name="eapReauthIntv")
    def eap_reauth_intv(self) -> pulumi.Output[int]:
        return pulumi.get(self, "eap_reauth_intv")

    @property
    @pulumi.getter(name="eapolKeyRetries")
    def eapol_key_retries(self) -> pulumi.Output[str]:
        return pulumi.get(self, "eapol_key_retries")

    @property
    @pulumi.getter
    def encrypt(self) -> pulumi.Output[str]:
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="externalFastRoaming")
    def external_fast_roaming(self) -> pulumi.Output[str]:
        return pulumi.get(self, "external_fast_roaming")

    @property
    @pulumi.getter(name="externalLogout")
    def external_logout(self) -> pulumi.Output[str]:
        return pulumi.get(self, "external_logout")

    @property
    @pulumi.getter(name="externalWeb")
    def external_web(self) -> pulumi.Output[str]:
        return pulumi.get(self, "external_web")

    @property
    @pulumi.getter(name="externalWebFormat")
    def external_web_format(self) -> pulumi.Output[str]:
        return pulumi.get(self, "external_web_format")

    @property
    @pulumi.getter(name="fastBssTransition")
    def fast_bss_transition(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fast_bss_transition")

    @property
    @pulumi.getter(name="fastRoaming")
    def fast_roaming(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fast_roaming")

    @property
    @pulumi.getter(name="ftMobilityDomain")
    def ft_mobility_domain(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ft_mobility_domain")

    @property
    @pulumi.getter(name="ftOverDs")
    def ft_over_ds(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ft_over_ds")

    @property
    @pulumi.getter(name="ftR0KeyLifetime")
    def ft_r0_key_lifetime(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ft_r0_key_lifetime")

    @property
    @pulumi.getter(name="gasComebackDelay")
    def gas_comeback_delay(self) -> pulumi.Output[int]:
        return pulumi.get(self, "gas_comeback_delay")

    @property
    @pulumi.getter(name="gasFragmentationLimit")
    def gas_fragmentation_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "gas_fragmentation_limit")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="gtkRekey")
    def gtk_rekey(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gtk_rekey")

    @property
    @pulumi.getter(name="gtkRekeyIntv")
    def gtk_rekey_intv(self) -> pulumi.Output[int]:
        return pulumi.get(self, "gtk_rekey_intv")

    @property
    @pulumi.getter(name="highEfficiency")
    def high_efficiency(self) -> pulumi.Output[str]:
        return pulumi.get(self, "high_efficiency")

    @property
    @pulumi.getter(name="hotspot20Profile")
    def hotspot20_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hotspot20_profile")

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> pulumi.Output[str]:
        return pulumi.get(self, "igmp_snooping")

    @property
    @pulumi.getter(name="intraVapPrivacy")
    def intra_vap_privacy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "intra_vap_privacy")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter(name="ipv6Rules")
    def ipv6_rules(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_rules")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def keyindex(self) -> pulumi.Output[int]:
        return pulumi.get(self, "keyindex")

    @property
    @pulumi.getter(name="l3Roaming")
    def l3_roaming(self) -> pulumi.Output[str]:
        return pulumi.get(self, "l3_roaming")

    @property
    @pulumi.getter(name="l3RoamingMode")
    def l3_roaming_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "l3_roaming_mode")

    @property
    @pulumi.getter
    def ldpc(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ldpc")

    @property
    @pulumi.getter(name="localAuthentication")
    def local_authentication(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_authentication")

    @property
    @pulumi.getter(name="localBridging")
    def local_bridging(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_bridging")

    @property
    @pulumi.getter(name="localLan")
    def local_lan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_lan")

    @property
    @pulumi.getter(name="localStandalone")
    def local_standalone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_standalone")

    @property
    @pulumi.getter(name="localStandaloneDns")
    def local_standalone_dns(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_standalone_dns")

    @property
    @pulumi.getter(name="localStandaloneDnsIp")
    def local_standalone_dns_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_standalone_dns_ip")

    @property
    @pulumi.getter(name="localStandaloneNat")
    def local_standalone_nat(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_standalone_nat")

    @property
    @pulumi.getter(name="macAuthBypass")
    def mac_auth_bypass(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_auth_bypass")

    @property
    @pulumi.getter(name="macCalledStationDelimiter")
    def mac_called_station_delimiter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_called_station_delimiter")

    @property
    @pulumi.getter(name="macCallingStationDelimiter")
    def mac_calling_station_delimiter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_calling_station_delimiter")

    @property
    @pulumi.getter(name="macCase")
    def mac_case(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_case")

    @property
    @pulumi.getter(name="macFilter")
    def mac_filter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_filter")

    @property
    @pulumi.getter(name="macFilterLists")
    def mac_filter_lists(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerVapMacFilterList']]]:
        return pulumi.get(self, "mac_filter_lists")

    @property
    @pulumi.getter(name="macFilterPolicyOther")
    def mac_filter_policy_other(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_filter_policy_other")

    @property
    @pulumi.getter(name="macPasswordDelimiter")
    def mac_password_delimiter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_password_delimiter")

    @property
    @pulumi.getter(name="macUsernameDelimiter")
    def mac_username_delimiter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_username_delimiter")

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_clients")

    @property
    @pulumi.getter(name="maxClientsAp")
    def max_clients_ap(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_clients_ap")

    @property
    @pulumi.getter
    def mbo(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mbo")

    @property
    @pulumi.getter(name="mboCellDataConnPref")
    def mbo_cell_data_conn_pref(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mbo_cell_data_conn_pref")

    @property
    @pulumi.getter(name="meDisableThresh")
    def me_disable_thresh(self) -> pulumi.Output[int]:
        return pulumi.get(self, "me_disable_thresh")

    @property
    @pulumi.getter(name="meshBackhaul")
    def mesh_backhaul(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mesh_backhaul")

    @property
    @pulumi.getter
    def mpsk(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mpsk")

    @property
    @pulumi.getter(name="mpskConcurrentClients")
    def mpsk_concurrent_clients(self) -> pulumi.Output[int]:
        return pulumi.get(self, "mpsk_concurrent_clients")

    @property
    @pulumi.getter(name="mpskKeys")
    def mpsk_keys(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerVapMpskKey']]]:
        return pulumi.get(self, "mpsk_keys")

    @property
    @pulumi.getter(name="mpskProfile")
    def mpsk_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mpsk_profile")

    @property
    @pulumi.getter(name="muMimo")
    def mu_mimo(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mu_mimo")

    @property
    @pulumi.getter(name="multicastEnhance")
    def multicast_enhance(self) -> pulumi.Output[str]:
        return pulumi.get(self, "multicast_enhance")

    @property
    @pulumi.getter(name="multicastRate")
    def multicast_rate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "multicast_rate")

    @property
    @pulumi.getter
    def nac(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nac")

    @property
    @pulumi.getter(name="nacProfile")
    def nac_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nac_profile")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="neighborReportDualBand")
    def neighbor_report_dual_band(self) -> pulumi.Output[str]:
        return pulumi.get(self, "neighbor_report_dual_band")

    @property
    @pulumi.getter
    def okc(self) -> pulumi.Output[str]:
        return pulumi.get(self, "okc")

    @property
    @pulumi.getter
    def osen(self) -> pulumi.Output[str]:
        return pulumi.get(self, "osen")

    @property
    @pulumi.getter(name="oweGroups")
    def owe_groups(self) -> pulumi.Output[str]:
        return pulumi.get(self, "owe_groups")

    @property
    @pulumi.getter(name="oweTransition")
    def owe_transition(self) -> pulumi.Output[str]:
        return pulumi.get(self, "owe_transition")

    @property
    @pulumi.getter(name="oweTransitionSsid")
    def owe_transition_ssid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "owe_transition_ssid")

    @property
    @pulumi.getter
    def passphrase(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter
    def pmf(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pmf")

    @property
    @pulumi.getter(name="pmfAssocComebackTimeout")
    def pmf_assoc_comeback_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "pmf_assoc_comeback_timeout")

    @property
    @pulumi.getter(name="pmfSaQueryRetryTimeout")
    def pmf_sa_query_retry_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "pmf_sa_query_retry_timeout")

    @property
    @pulumi.getter(name="portMacauth")
    def port_macauth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "port_macauth")

    @property
    @pulumi.getter(name="portMacauthReauthTimeout")
    def port_macauth_reauth_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "port_macauth_reauth_timeout")

    @property
    @pulumi.getter(name="portMacauthTimeout")
    def port_macauth_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "port_macauth_timeout")

    @property
    @pulumi.getter(name="portalMessageOverrideGroup")
    def portal_message_override_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "portal_message_override_group")

    @property
    @pulumi.getter(name="portalMessageOverrides")
    def portal_message_overrides(self) -> pulumi.Output['outputs.WirelessControllerVapPortalMessageOverrides']:
        return pulumi.get(self, "portal_message_overrides")

    @property
    @pulumi.getter(name="portalType")
    def portal_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "portal_type")

    @property
    @pulumi.getter(name="primaryWagProfile")
    def primary_wag_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "primary_wag_profile")

    @property
    @pulumi.getter(name="probeRespSuppression")
    def probe_resp_suppression(self) -> pulumi.Output[str]:
        return pulumi.get(self, "probe_resp_suppression")

    @property
    @pulumi.getter(name="probeRespThreshold")
    def probe_resp_threshold(self) -> pulumi.Output[str]:
        return pulumi.get(self, "probe_resp_threshold")

    @property
    @pulumi.getter(name="ptkRekey")
    def ptk_rekey(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ptk_rekey")

    @property
    @pulumi.getter(name="ptkRekeyIntv")
    def ptk_rekey_intv(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ptk_rekey_intv")

    @property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "qos_profile")

    @property
    @pulumi.getter
    def quarantine(self) -> pulumi.Output[str]:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="radio2gThreshold")
    def radio2g_threshold(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radio2g_threshold")

    @property
    @pulumi.getter(name="radio5gThreshold")
    def radio5g_threshold(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radio5g_threshold")

    @property
    @pulumi.getter(name="radioSensitivity")
    def radio_sensitivity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radio_sensitivity")

    @property
    @pulumi.getter(name="radiusMacAuth")
    def radius_mac_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radius_mac_auth")

    @property
    @pulumi.getter(name="radiusMacAuthBlockInterval")
    def radius_mac_auth_block_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "radius_mac_auth_block_interval")

    @property
    @pulumi.getter(name="radiusMacAuthServer")
    def radius_mac_auth_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radius_mac_auth_server")

    @property
    @pulumi.getter(name="radiusMacAuthUsergroups")
    def radius_mac_auth_usergroups(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerVapRadiusMacAuthUsergroup']]]:
        return pulumi.get(self, "radius_mac_auth_usergroups")

    @property
    @pulumi.getter(name="radiusMacMpskAuth")
    def radius_mac_mpsk_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radius_mac_mpsk_auth")

    @property
    @pulumi.getter(name="radiusMacMpskTimeout")
    def radius_mac_mpsk_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "radius_mac_mpsk_timeout")

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radius_server")

    @property
    @pulumi.getter
    def rates11a(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rates11a")

    @property
    @pulumi.getter(name="rates11acMcsMap")
    def rates11ac_mcs_map(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rates11ac_mcs_map")

    @property
    @pulumi.getter(name="rates11acSs12")
    def rates11ac_ss12(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rates11ac_ss12")

    @property
    @pulumi.getter(name="rates11acSs34")
    def rates11ac_ss34(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rates11ac_ss34")

    @property
    @pulumi.getter(name="rates11axMcsMap")
    def rates11ax_mcs_map(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rates11ax_mcs_map")

    @property
    @pulumi.getter(name="rates11axSs12")
    def rates11ax_ss12(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rates11ax_ss12")

    @property
    @pulumi.getter(name="rates11axSs34")
    def rates11ax_ss34(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rates11ax_ss34")

    @property
    @pulumi.getter
    def rates11bg(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rates11bg")

    @property
    @pulumi.getter(name="rates11nSs12")
    def rates11n_ss12(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rates11n_ss12")

    @property
    @pulumi.getter(name="rates11nSs34")
    def rates11n_ss34(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rates11n_ss34")

    @property
    @pulumi.getter(name="saeGroups")
    def sae_groups(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sae_groups")

    @property
    @pulumi.getter(name="saeH2eOnly")
    def sae_h2e_only(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sae_h2e_only")

    @property
    @pulumi.getter(name="saePassword")
    def sae_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "sae_password")

    @property
    @pulumi.getter(name="saePk")
    def sae_pk(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sae_pk")

    @property
    @pulumi.getter(name="saePrivateKey")
    def sae_private_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sae_private_key")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> pulumi.Output[str]:
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="secondaryWagProfile")
    def secondary_wag_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "secondary_wag_profile")

    @property
    @pulumi.getter
    def security(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="securityExemptList")
    def security_exempt_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_exempt_list")

    @property
    @pulumi.getter(name="securityObsoleteOption")
    def security_obsolete_option(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_obsolete_option")

    @property
    @pulumi.getter(name="securityRedirectUrl")
    def security_redirect_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_redirect_url")

    @property
    @pulumi.getter(name="selectedUsergroups")
    def selected_usergroups(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerVapSelectedUsergroup']]]:
        return pulumi.get(self, "selected_usergroups")

    @property
    @pulumi.getter(name="splitTunneling")
    def split_tunneling(self) -> pulumi.Output[str]:
        return pulumi.get(self, "split_tunneling")

    @property
    @pulumi.getter
    def ssid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssid")

    @property
    @pulumi.getter(name="stickyClientRemove")
    def sticky_client_remove(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sticky_client_remove")

    @property
    @pulumi.getter(name="stickyClientThreshold2g")
    def sticky_client_threshold2g(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sticky_client_threshold2g")

    @property
    @pulumi.getter(name="stickyClientThreshold5g")
    def sticky_client_threshold5g(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sticky_client_threshold5g")

    @property
    @pulumi.getter(name="stickyClientThreshold6g")
    def sticky_client_threshold6g(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sticky_client_threshold6g")

    @property
    @pulumi.getter(name="targetWakeTime")
    def target_wake_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "target_wake_time")

    @property
    @pulumi.getter(name="tkipCounterMeasure")
    def tkip_counter_measure(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tkip_counter_measure")

    @property
    @pulumi.getter(name="tunnelEchoInterval")
    def tunnel_echo_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tunnel_echo_interval")

    @property
    @pulumi.getter(name="tunnelFallbackInterval")
    def tunnel_fallback_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tunnel_fallback_interval")

    @property
    @pulumi.getter
    def usergroups(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerVapUsergroup']]]:
        return pulumi.get(self, "usergroups")

    @property
    @pulumi.getter(name="utmLog")
    def utm_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "utm_log")

    @property
    @pulumi.getter(name="utmProfile")
    def utm_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "utm_profile")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vlanAuto")
    def vlan_auto(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vlan_auto")

    @property
    @pulumi.getter(name="vlanNames")
    def vlan_names(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerVapVlanName']]]:
        return pulumi.get(self, "vlan_names")

    @property
    @pulumi.getter(name="vlanPooling")
    def vlan_pooling(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vlan_pooling")

    @property
    @pulumi.getter(name="vlanPools")
    def vlan_pools(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerVapVlanPool']]]:
        return pulumi.get(self, "vlan_pools")

    @property
    @pulumi.getter
    def vlanid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vlanid")

    @property
    @pulumi.getter(name="voiceEnterprise")
    def voice_enterprise(self) -> pulumi.Output[str]:
        return pulumi.get(self, "voice_enterprise")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "webfilter_profile")

