# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerSwitchProfileArgs', 'SwitchControllerSwitchProfile']

@pulumi.input_type
class SwitchControllerSwitchProfileArgs:
    def __init__(__self__, *,
                 login: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_logout: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_upgrade: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerSwitchProfile resource.
        """
        if login is not None:
            pulumi.set(__self__, "login", login)
        if login_passwd is not None:
            pulumi.set(__self__, "login_passwd", login_passwd)
        if login_passwd_override is not None:
            pulumi.set(__self__, "login_passwd_override", login_passwd_override)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if revision_backup_on_logout is not None:
            pulumi.set(__self__, "revision_backup_on_logout", revision_backup_on_logout)
        if revision_backup_on_upgrade is not None:
            pulumi.set(__self__, "revision_backup_on_upgrade", revision_backup_on_upgrade)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter(name="loginPasswd")
    def login_passwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd")

    @login_passwd.setter
    def login_passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd", value)

    @property
    @pulumi.getter(name="loginPasswdOverride")
    def login_passwd_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd_override")

    @login_passwd_override.setter
    def login_passwd_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd_override", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="revisionBackupOnLogout")
    def revision_backup_on_logout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revision_backup_on_logout")

    @revision_backup_on_logout.setter
    def revision_backup_on_logout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_backup_on_logout", value)

    @property
    @pulumi.getter(name="revisionBackupOnUpgrade")
    def revision_backup_on_upgrade(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revision_backup_on_upgrade")

    @revision_backup_on_upgrade.setter
    def revision_backup_on_upgrade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_backup_on_upgrade", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchControllerSwitchProfileState:
    def __init__(__self__, *,
                 login: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_logout: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_upgrade: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerSwitchProfile resources.
        """
        if login is not None:
            pulumi.set(__self__, "login", login)
        if login_passwd is not None:
            pulumi.set(__self__, "login_passwd", login_passwd)
        if login_passwd_override is not None:
            pulumi.set(__self__, "login_passwd_override", login_passwd_override)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if revision_backup_on_logout is not None:
            pulumi.set(__self__, "revision_backup_on_logout", revision_backup_on_logout)
        if revision_backup_on_upgrade is not None:
            pulumi.set(__self__, "revision_backup_on_upgrade", revision_backup_on_upgrade)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter(name="loginPasswd")
    def login_passwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd")

    @login_passwd.setter
    def login_passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd", value)

    @property
    @pulumi.getter(name="loginPasswdOverride")
    def login_passwd_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd_override")

    @login_passwd_override.setter
    def login_passwd_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd_override", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="revisionBackupOnLogout")
    def revision_backup_on_logout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revision_backup_on_logout")

    @revision_backup_on_logout.setter
    def revision_backup_on_logout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_backup_on_logout", value)

    @property
    @pulumi.getter(name="revisionBackupOnUpgrade")
    def revision_backup_on_upgrade(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revision_backup_on_upgrade")

    @revision_backup_on_upgrade.setter
    def revision_backup_on_upgrade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_backup_on_upgrade", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchControllerSwitchProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_logout: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_upgrade: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerSwitchProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerSwitchProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerSwitchProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerSwitchProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerSwitchProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_logout: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_upgrade: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerSwitchProfileArgs.__new__(SwitchControllerSwitchProfileArgs)

            __props__.__dict__["login"] = login
            __props__.__dict__["login_passwd"] = None if login_passwd is None else pulumi.Output.secret(login_passwd)
            __props__.__dict__["login_passwd_override"] = login_passwd_override
            __props__.__dict__["name"] = name
            __props__.__dict__["revision_backup_on_logout"] = revision_backup_on_logout
            __props__.__dict__["revision_backup_on_upgrade"] = revision_backup_on_upgrade
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["loginPasswd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SwitchControllerSwitchProfile, __self__).__init__(
            'fortios:index/switchControllerSwitchProfile:SwitchControllerSwitchProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            login: Optional[pulumi.Input[str]] = None,
            login_passwd: Optional[pulumi.Input[str]] = None,
            login_passwd_override: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            revision_backup_on_logout: Optional[pulumi.Input[str]] = None,
            revision_backup_on_upgrade: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerSwitchProfile':
        """
        Get an existing SwitchControllerSwitchProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerSwitchProfileState.__new__(_SwitchControllerSwitchProfileState)

        __props__.__dict__["login"] = login
        __props__.__dict__["login_passwd"] = login_passwd
        __props__.__dict__["login_passwd_override"] = login_passwd_override
        __props__.__dict__["name"] = name
        __props__.__dict__["revision_backup_on_logout"] = revision_backup_on_logout
        __props__.__dict__["revision_backup_on_upgrade"] = revision_backup_on_upgrade
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchControllerSwitchProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def login(self) -> pulumi.Output[str]:
        return pulumi.get(self, "login")

    @property
    @pulumi.getter(name="loginPasswd")
    def login_passwd(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "login_passwd")

    @property
    @pulumi.getter(name="loginPasswdOverride")
    def login_passwd_override(self) -> pulumi.Output[str]:
        return pulumi.get(self, "login_passwd_override")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="revisionBackupOnLogout")
    def revision_backup_on_logout(self) -> pulumi.Output[str]:
        return pulumi.get(self, "revision_backup_on_logout")

    @property
    @pulumi.getter(name="revisionBackupOnUpgrade")
    def revision_backup_on_upgrade(self) -> pulumi.Output[str]:
        return pulumi.get(self, "revision_backup_on_upgrade")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

