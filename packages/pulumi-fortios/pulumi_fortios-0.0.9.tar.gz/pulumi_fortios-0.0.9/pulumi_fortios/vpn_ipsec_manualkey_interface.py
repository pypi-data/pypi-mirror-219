# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpnIpsecManualkeyInterfaceArgs', 'VpnIpsecManualkeyInterface']

@pulumi.input_type
class VpnIpsecManualkeyInterfaceArgs:
    def __init__(__self__, *,
                 auth_alg: pulumi.Input[str],
                 enc_alg: pulumi.Input[str],
                 interface: pulumi.Input[str],
                 remote_gw: pulumi.Input[str],
                 remote_gw6: pulumi.Input[str],
                 addr_type: Optional[pulumi.Input[str]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 local_spi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_spi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpnIpsecManualkeyInterface resource.
        """
        pulumi.set(__self__, "auth_alg", auth_alg)
        pulumi.set(__self__, "enc_alg", enc_alg)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "remote_gw", remote_gw)
        pulumi.set(__self__, "remote_gw6", remote_gw6)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if local_gw6 is not None:
            pulumi.set(__self__, "local_gw6", local_gw6)
        if local_spi is not None:
            pulumi.set(__self__, "local_spi", local_spi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if npu_offload is not None:
            pulumi.set(__self__, "npu_offload", npu_offload)
        if remote_spi is not None:
            pulumi.set(__self__, "remote_spi", remote_spi)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authAlg")
    def auth_alg(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_alg")

    @auth_alg.setter
    def auth_alg(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_alg", value)

    @property
    @pulumi.getter(name="encAlg")
    def enc_alg(self) -> pulumi.Input[str]:
        return pulumi.get(self, "enc_alg")

    @enc_alg.setter
    def enc_alg(self, value: pulumi.Input[str]):
        pulumi.set(self, "enc_alg", value)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Input[str]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> pulumi.Input[str]:
        return pulumi.get(self, "remote_gw6")

    @remote_gw6.setter
    def remote_gw6(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_gw6", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw6")

    @local_gw6.setter
    def local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw6", value)

    @property
    @pulumi.getter(name="localSpi")
    def local_spi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_spi")

    @local_spi.setter
    def local_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_spi", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npu_offload")

    @npu_offload.setter
    def npu_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npu_offload", value)

    @property
    @pulumi.getter(name="remoteSpi")
    def remote_spi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_spi")

    @remote_spi.setter
    def remote_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_spi", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _VpnIpsecManualkeyInterfaceState:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 auth_alg: Optional[pulumi.Input[str]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_alg: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 local_spi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 remote_spi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpnIpsecManualkeyInterface resources.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if auth_alg is not None:
            pulumi.set(__self__, "auth_alg", auth_alg)
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_alg is not None:
            pulumi.set(__self__, "enc_alg", enc_alg)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if local_gw6 is not None:
            pulumi.set(__self__, "local_gw6", local_gw6)
        if local_spi is not None:
            pulumi.set(__self__, "local_spi", local_spi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if npu_offload is not None:
            pulumi.set(__self__, "npu_offload", npu_offload)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if remote_gw6 is not None:
            pulumi.set(__self__, "remote_gw6", remote_gw6)
        if remote_spi is not None:
            pulumi.set(__self__, "remote_spi", remote_spi)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="authAlg")
    def auth_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_alg")

    @auth_alg.setter
    def auth_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_alg", value)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encAlg")
    def enc_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enc_alg")

    @enc_alg.setter
    def enc_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_alg", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw6")

    @local_gw6.setter
    def local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw6", value)

    @property
    @pulumi.getter(name="localSpi")
    def local_spi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_spi")

    @local_spi.setter
    def local_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_spi", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npu_offload")

    @npu_offload.setter
    def npu_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npu_offload", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw6")

    @remote_gw6.setter
    def remote_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw6", value)

    @property
    @pulumi.getter(name="remoteSpi")
    def remote_spi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_spi")

    @remote_spi.setter
    def remote_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_spi", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class VpnIpsecManualkeyInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 auth_alg: Optional[pulumi.Input[str]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_alg: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 local_spi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 remote_spi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VpnIpsecManualkeyInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpnIpsecManualkeyInterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpnIpsecManualkeyInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpnIpsecManualkeyInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnIpsecManualkeyInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 auth_alg: Optional[pulumi.Input[str]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_alg: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 local_spi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 remote_spi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnIpsecManualkeyInterfaceArgs.__new__(VpnIpsecManualkeyInterfaceArgs)

            __props__.__dict__["addr_type"] = addr_type
            if auth_alg is None and not opts.urn:
                raise TypeError("Missing required property 'auth_alg'")
            __props__.__dict__["auth_alg"] = auth_alg
            __props__.__dict__["auth_key"] = None if auth_key is None else pulumi.Output.secret(auth_key)
            if enc_alg is None and not opts.urn:
                raise TypeError("Missing required property 'enc_alg'")
            __props__.__dict__["enc_alg"] = enc_alg
            __props__.__dict__["enc_key"] = None if enc_key is None else pulumi.Output.secret(enc_key)
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["local_gw"] = local_gw
            __props__.__dict__["local_gw6"] = local_gw6
            __props__.__dict__["local_spi"] = local_spi
            __props__.__dict__["name"] = name
            __props__.__dict__["npu_offload"] = npu_offload
            if remote_gw is None and not opts.urn:
                raise TypeError("Missing required property 'remote_gw'")
            __props__.__dict__["remote_gw"] = remote_gw
            if remote_gw6 is None and not opts.urn:
                raise TypeError("Missing required property 'remote_gw6'")
            __props__.__dict__["remote_gw6"] = remote_gw6
            __props__.__dict__["remote_spi"] = remote_spi
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authKey", "encKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(VpnIpsecManualkeyInterface, __self__).__init__(
            'fortios:index/vpnIpsecManualkeyInterface:VpnIpsecManualkeyInterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addr_type: Optional[pulumi.Input[str]] = None,
            auth_alg: Optional[pulumi.Input[str]] = None,
            auth_key: Optional[pulumi.Input[str]] = None,
            enc_alg: Optional[pulumi.Input[str]] = None,
            enc_key: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip_version: Optional[pulumi.Input[str]] = None,
            local_gw: Optional[pulumi.Input[str]] = None,
            local_gw6: Optional[pulumi.Input[str]] = None,
            local_spi: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            npu_offload: Optional[pulumi.Input[str]] = None,
            remote_gw: Optional[pulumi.Input[str]] = None,
            remote_gw6: Optional[pulumi.Input[str]] = None,
            remote_spi: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'VpnIpsecManualkeyInterface':
        """
        Get an existing VpnIpsecManualkeyInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnIpsecManualkeyInterfaceState.__new__(_VpnIpsecManualkeyInterfaceState)

        __props__.__dict__["addr_type"] = addr_type
        __props__.__dict__["auth_alg"] = auth_alg
        __props__.__dict__["auth_key"] = auth_key
        __props__.__dict__["enc_alg"] = enc_alg
        __props__.__dict__["enc_key"] = enc_key
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["local_gw"] = local_gw
        __props__.__dict__["local_gw6"] = local_gw6
        __props__.__dict__["local_spi"] = local_spi
        __props__.__dict__["name"] = name
        __props__.__dict__["npu_offload"] = npu_offload
        __props__.__dict__["remote_gw"] = remote_gw
        __props__.__dict__["remote_gw6"] = remote_gw6
        __props__.__dict__["remote_spi"] = remote_spi
        __props__.__dict__["vdomparam"] = vdomparam
        return VpnIpsecManualkeyInterface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter(name="authAlg")
    def auth_alg(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_alg")

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encAlg")
    def enc_alg(self) -> pulumi.Output[str]:
        return pulumi.get(self, "enc_alg")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_gw")

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_gw6")

    @property
    @pulumi.getter(name="localSpi")
    def local_spi(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_spi")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "npu_offload")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remote_gw6")

    @property
    @pulumi.getter(name="remoteSpi")
    def remote_spi(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remote_spi")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

