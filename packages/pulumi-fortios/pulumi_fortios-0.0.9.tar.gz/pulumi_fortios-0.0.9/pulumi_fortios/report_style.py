# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ReportStyleArgs', 'ReportStyle']

@pulumi.input_type
class ReportStyleArgs:
    def __init__(__self__, *,
                 align: Optional[pulumi.Input[str]] = None,
                 bg_color: Optional[pulumi.Input[str]] = None,
                 border_bottom: Optional[pulumi.Input[str]] = None,
                 border_left: Optional[pulumi.Input[str]] = None,
                 border_right: Optional[pulumi.Input[str]] = None,
                 border_top: Optional[pulumi.Input[str]] = None,
                 column_gap: Optional[pulumi.Input[str]] = None,
                 column_span: Optional[pulumi.Input[str]] = None,
                 fg_color: Optional[pulumi.Input[str]] = None,
                 font_family: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 font_style: Optional[pulumi.Input[str]] = None,
                 font_weight: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 line_height: Optional[pulumi.Input[str]] = None,
                 margin_bottom: Optional[pulumi.Input[str]] = None,
                 margin_left: Optional[pulumi.Input[str]] = None,
                 margin_right: Optional[pulumi.Input[str]] = None,
                 margin_top: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 padding_bottom: Optional[pulumi.Input[str]] = None,
                 padding_left: Optional[pulumi.Input[str]] = None,
                 padding_right: Optional[pulumi.Input[str]] = None,
                 padding_top: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ReportStyle resource.
        """
        if align is not None:
            pulumi.set(__self__, "align", align)
        if bg_color is not None:
            pulumi.set(__self__, "bg_color", bg_color)
        if border_bottom is not None:
            pulumi.set(__self__, "border_bottom", border_bottom)
        if border_left is not None:
            pulumi.set(__self__, "border_left", border_left)
        if border_right is not None:
            pulumi.set(__self__, "border_right", border_right)
        if border_top is not None:
            pulumi.set(__self__, "border_top", border_top)
        if column_gap is not None:
            pulumi.set(__self__, "column_gap", column_gap)
        if column_span is not None:
            pulumi.set(__self__, "column_span", column_span)
        if fg_color is not None:
            pulumi.set(__self__, "fg_color", fg_color)
        if font_family is not None:
            pulumi.set(__self__, "font_family", font_family)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_style is not None:
            pulumi.set(__self__, "font_style", font_style)
        if font_weight is not None:
            pulumi.set(__self__, "font_weight", font_weight)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if line_height is not None:
            pulumi.set(__self__, "line_height", line_height)
        if margin_bottom is not None:
            pulumi.set(__self__, "margin_bottom", margin_bottom)
        if margin_left is not None:
            pulumi.set(__self__, "margin_left", margin_left)
        if margin_right is not None:
            pulumi.set(__self__, "margin_right", margin_right)
        if margin_top is not None:
            pulumi.set(__self__, "margin_top", margin_top)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if padding_bottom is not None:
            pulumi.set(__self__, "padding_bottom", padding_bottom)
        if padding_left is not None:
            pulumi.set(__self__, "padding_left", padding_left)
        if padding_right is not None:
            pulumi.set(__self__, "padding_right", padding_right)
        if padding_top is not None:
            pulumi.set(__self__, "padding_top", padding_top)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "align")

    @align.setter
    def align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "align", value)

    @property
    @pulumi.getter(name="bgColor")
    def bg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bg_color")

    @bg_color.setter
    def bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bg_color", value)

    @property
    @pulumi.getter(name="borderBottom")
    def border_bottom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_bottom")

    @border_bottom.setter
    def border_bottom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_bottom", value)

    @property
    @pulumi.getter(name="borderLeft")
    def border_left(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_left")

    @border_left.setter
    def border_left(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_left", value)

    @property
    @pulumi.getter(name="borderRight")
    def border_right(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_right")

    @border_right.setter
    def border_right(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_right", value)

    @property
    @pulumi.getter(name="borderTop")
    def border_top(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_top")

    @border_top.setter
    def border_top(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_top", value)

    @property
    @pulumi.getter(name="columnGap")
    def column_gap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_gap")

    @column_gap.setter
    def column_gap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_gap", value)

    @property
    @pulumi.getter(name="columnSpan")
    def column_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_span")

    @column_span.setter
    def column_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_span", value)

    @property
    @pulumi.getter(name="fgColor")
    def fg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fg_color")

    @fg_color.setter
    def fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fg_color", value)

    @property
    @pulumi.getter(name="fontFamily")
    def font_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_family")

    @font_family.setter
    def font_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_family", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontStyle")
    def font_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_style")

    @font_style.setter
    def font_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_style", value)

    @property
    @pulumi.getter(name="fontWeight")
    def font_weight(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_weight")

    @font_weight.setter
    def font_weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_weight", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="lineHeight")
    def line_height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_height")

    @line_height.setter
    def line_height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_height", value)

    @property
    @pulumi.getter(name="marginBottom")
    def margin_bottom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin_bottom")

    @margin_bottom.setter
    def margin_bottom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin_bottom", value)

    @property
    @pulumi.getter(name="marginLeft")
    def margin_left(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin_left")

    @margin_left.setter
    def margin_left(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin_left", value)

    @property
    @pulumi.getter(name="marginRight")
    def margin_right(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin_right")

    @margin_right.setter
    def margin_right(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin_right", value)

    @property
    @pulumi.getter(name="marginTop")
    def margin_top(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin_top")

    @margin_top.setter
    def margin_top(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin_top", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="paddingBottom")
    def padding_bottom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "padding_bottom")

    @padding_bottom.setter
    def padding_bottom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "padding_bottom", value)

    @property
    @pulumi.getter(name="paddingLeft")
    def padding_left(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "padding_left")

    @padding_left.setter
    def padding_left(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "padding_left", value)

    @property
    @pulumi.getter(name="paddingRight")
    def padding_right(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "padding_right")

    @padding_right.setter
    def padding_right(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "padding_right", value)

    @property
    @pulumi.getter(name="paddingTop")
    def padding_top(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "padding_top")

    @padding_top.setter
    def padding_top(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "padding_top", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class _ReportStyleState:
    def __init__(__self__, *,
                 align: Optional[pulumi.Input[str]] = None,
                 bg_color: Optional[pulumi.Input[str]] = None,
                 border_bottom: Optional[pulumi.Input[str]] = None,
                 border_left: Optional[pulumi.Input[str]] = None,
                 border_right: Optional[pulumi.Input[str]] = None,
                 border_top: Optional[pulumi.Input[str]] = None,
                 column_gap: Optional[pulumi.Input[str]] = None,
                 column_span: Optional[pulumi.Input[str]] = None,
                 fg_color: Optional[pulumi.Input[str]] = None,
                 font_family: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 font_style: Optional[pulumi.Input[str]] = None,
                 font_weight: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 line_height: Optional[pulumi.Input[str]] = None,
                 margin_bottom: Optional[pulumi.Input[str]] = None,
                 margin_left: Optional[pulumi.Input[str]] = None,
                 margin_right: Optional[pulumi.Input[str]] = None,
                 margin_top: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 padding_bottom: Optional[pulumi.Input[str]] = None,
                 padding_left: Optional[pulumi.Input[str]] = None,
                 padding_right: Optional[pulumi.Input[str]] = None,
                 padding_top: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ReportStyle resources.
        """
        if align is not None:
            pulumi.set(__self__, "align", align)
        if bg_color is not None:
            pulumi.set(__self__, "bg_color", bg_color)
        if border_bottom is not None:
            pulumi.set(__self__, "border_bottom", border_bottom)
        if border_left is not None:
            pulumi.set(__self__, "border_left", border_left)
        if border_right is not None:
            pulumi.set(__self__, "border_right", border_right)
        if border_top is not None:
            pulumi.set(__self__, "border_top", border_top)
        if column_gap is not None:
            pulumi.set(__self__, "column_gap", column_gap)
        if column_span is not None:
            pulumi.set(__self__, "column_span", column_span)
        if fg_color is not None:
            pulumi.set(__self__, "fg_color", fg_color)
        if font_family is not None:
            pulumi.set(__self__, "font_family", font_family)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_style is not None:
            pulumi.set(__self__, "font_style", font_style)
        if font_weight is not None:
            pulumi.set(__self__, "font_weight", font_weight)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if line_height is not None:
            pulumi.set(__self__, "line_height", line_height)
        if margin_bottom is not None:
            pulumi.set(__self__, "margin_bottom", margin_bottom)
        if margin_left is not None:
            pulumi.set(__self__, "margin_left", margin_left)
        if margin_right is not None:
            pulumi.set(__self__, "margin_right", margin_right)
        if margin_top is not None:
            pulumi.set(__self__, "margin_top", margin_top)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if padding_bottom is not None:
            pulumi.set(__self__, "padding_bottom", padding_bottom)
        if padding_left is not None:
            pulumi.set(__self__, "padding_left", padding_left)
        if padding_right is not None:
            pulumi.set(__self__, "padding_right", padding_right)
        if padding_top is not None:
            pulumi.set(__self__, "padding_top", padding_top)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def align(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "align")

    @align.setter
    def align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "align", value)

    @property
    @pulumi.getter(name="bgColor")
    def bg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bg_color")

    @bg_color.setter
    def bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bg_color", value)

    @property
    @pulumi.getter(name="borderBottom")
    def border_bottom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_bottom")

    @border_bottom.setter
    def border_bottom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_bottom", value)

    @property
    @pulumi.getter(name="borderLeft")
    def border_left(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_left")

    @border_left.setter
    def border_left(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_left", value)

    @property
    @pulumi.getter(name="borderRight")
    def border_right(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_right")

    @border_right.setter
    def border_right(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_right", value)

    @property
    @pulumi.getter(name="borderTop")
    def border_top(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_top")

    @border_top.setter
    def border_top(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_top", value)

    @property
    @pulumi.getter(name="columnGap")
    def column_gap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_gap")

    @column_gap.setter
    def column_gap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_gap", value)

    @property
    @pulumi.getter(name="columnSpan")
    def column_span(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_span")

    @column_span.setter
    def column_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_span", value)

    @property
    @pulumi.getter(name="fgColor")
    def fg_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fg_color")

    @fg_color.setter
    def fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fg_color", value)

    @property
    @pulumi.getter(name="fontFamily")
    def font_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_family")

    @font_family.setter
    def font_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_family", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontStyle")
    def font_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_style")

    @font_style.setter
    def font_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_style", value)

    @property
    @pulumi.getter(name="fontWeight")
    def font_weight(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_weight")

    @font_weight.setter
    def font_weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_weight", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="lineHeight")
    def line_height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_height")

    @line_height.setter
    def line_height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_height", value)

    @property
    @pulumi.getter(name="marginBottom")
    def margin_bottom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin_bottom")

    @margin_bottom.setter
    def margin_bottom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin_bottom", value)

    @property
    @pulumi.getter(name="marginLeft")
    def margin_left(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin_left")

    @margin_left.setter
    def margin_left(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin_left", value)

    @property
    @pulumi.getter(name="marginRight")
    def margin_right(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin_right")

    @margin_right.setter
    def margin_right(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin_right", value)

    @property
    @pulumi.getter(name="marginTop")
    def margin_top(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin_top")

    @margin_top.setter
    def margin_top(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin_top", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="paddingBottom")
    def padding_bottom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "padding_bottom")

    @padding_bottom.setter
    def padding_bottom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "padding_bottom", value)

    @property
    @pulumi.getter(name="paddingLeft")
    def padding_left(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "padding_left")

    @padding_left.setter
    def padding_left(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "padding_left", value)

    @property
    @pulumi.getter(name="paddingRight")
    def padding_right(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "padding_right")

    @padding_right.setter
    def padding_right(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "padding_right", value)

    @property
    @pulumi.getter(name="paddingTop")
    def padding_top(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "padding_top")

    @padding_top.setter
    def padding_top(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "padding_top", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


class ReportStyle(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 align: Optional[pulumi.Input[str]] = None,
                 bg_color: Optional[pulumi.Input[str]] = None,
                 border_bottom: Optional[pulumi.Input[str]] = None,
                 border_left: Optional[pulumi.Input[str]] = None,
                 border_right: Optional[pulumi.Input[str]] = None,
                 border_top: Optional[pulumi.Input[str]] = None,
                 column_gap: Optional[pulumi.Input[str]] = None,
                 column_span: Optional[pulumi.Input[str]] = None,
                 fg_color: Optional[pulumi.Input[str]] = None,
                 font_family: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 font_style: Optional[pulumi.Input[str]] = None,
                 font_weight: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 line_height: Optional[pulumi.Input[str]] = None,
                 margin_bottom: Optional[pulumi.Input[str]] = None,
                 margin_left: Optional[pulumi.Input[str]] = None,
                 margin_right: Optional[pulumi.Input[str]] = None,
                 margin_top: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 padding_bottom: Optional[pulumi.Input[str]] = None,
                 padding_left: Optional[pulumi.Input[str]] = None,
                 padding_right: Optional[pulumi.Input[str]] = None,
                 padding_top: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ReportStyle resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ReportStyleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ReportStyle resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ReportStyleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReportStyleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 align: Optional[pulumi.Input[str]] = None,
                 bg_color: Optional[pulumi.Input[str]] = None,
                 border_bottom: Optional[pulumi.Input[str]] = None,
                 border_left: Optional[pulumi.Input[str]] = None,
                 border_right: Optional[pulumi.Input[str]] = None,
                 border_top: Optional[pulumi.Input[str]] = None,
                 column_gap: Optional[pulumi.Input[str]] = None,
                 column_span: Optional[pulumi.Input[str]] = None,
                 fg_color: Optional[pulumi.Input[str]] = None,
                 font_family: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 font_style: Optional[pulumi.Input[str]] = None,
                 font_weight: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 line_height: Optional[pulumi.Input[str]] = None,
                 margin_bottom: Optional[pulumi.Input[str]] = None,
                 margin_left: Optional[pulumi.Input[str]] = None,
                 margin_right: Optional[pulumi.Input[str]] = None,
                 margin_top: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 padding_bottom: Optional[pulumi.Input[str]] = None,
                 padding_left: Optional[pulumi.Input[str]] = None,
                 padding_right: Optional[pulumi.Input[str]] = None,
                 padding_top: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReportStyleArgs.__new__(ReportStyleArgs)

            __props__.__dict__["align"] = align
            __props__.__dict__["bg_color"] = bg_color
            __props__.__dict__["border_bottom"] = border_bottom
            __props__.__dict__["border_left"] = border_left
            __props__.__dict__["border_right"] = border_right
            __props__.__dict__["border_top"] = border_top
            __props__.__dict__["column_gap"] = column_gap
            __props__.__dict__["column_span"] = column_span
            __props__.__dict__["fg_color"] = fg_color
            __props__.__dict__["font_family"] = font_family
            __props__.__dict__["font_size"] = font_size
            __props__.__dict__["font_style"] = font_style
            __props__.__dict__["font_weight"] = font_weight
            __props__.__dict__["height"] = height
            __props__.__dict__["line_height"] = line_height
            __props__.__dict__["margin_bottom"] = margin_bottom
            __props__.__dict__["margin_left"] = margin_left
            __props__.__dict__["margin_right"] = margin_right
            __props__.__dict__["margin_top"] = margin_top
            __props__.__dict__["name"] = name
            __props__.__dict__["options"] = options
            __props__.__dict__["padding_bottom"] = padding_bottom
            __props__.__dict__["padding_left"] = padding_left
            __props__.__dict__["padding_right"] = padding_right
            __props__.__dict__["padding_top"] = padding_top
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["width"] = width
        super(ReportStyle, __self__).__init__(
            'fortios:index/reportStyle:ReportStyle',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            align: Optional[pulumi.Input[str]] = None,
            bg_color: Optional[pulumi.Input[str]] = None,
            border_bottom: Optional[pulumi.Input[str]] = None,
            border_left: Optional[pulumi.Input[str]] = None,
            border_right: Optional[pulumi.Input[str]] = None,
            border_top: Optional[pulumi.Input[str]] = None,
            column_gap: Optional[pulumi.Input[str]] = None,
            column_span: Optional[pulumi.Input[str]] = None,
            fg_color: Optional[pulumi.Input[str]] = None,
            font_family: Optional[pulumi.Input[str]] = None,
            font_size: Optional[pulumi.Input[str]] = None,
            font_style: Optional[pulumi.Input[str]] = None,
            font_weight: Optional[pulumi.Input[str]] = None,
            height: Optional[pulumi.Input[str]] = None,
            line_height: Optional[pulumi.Input[str]] = None,
            margin_bottom: Optional[pulumi.Input[str]] = None,
            margin_left: Optional[pulumi.Input[str]] = None,
            margin_right: Optional[pulumi.Input[str]] = None,
            margin_top: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[str]] = None,
            padding_bottom: Optional[pulumi.Input[str]] = None,
            padding_left: Optional[pulumi.Input[str]] = None,
            padding_right: Optional[pulumi.Input[str]] = None,
            padding_top: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            width: Optional[pulumi.Input[str]] = None) -> 'ReportStyle':
        """
        Get an existing ReportStyle resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReportStyleState.__new__(_ReportStyleState)

        __props__.__dict__["align"] = align
        __props__.__dict__["bg_color"] = bg_color
        __props__.__dict__["border_bottom"] = border_bottom
        __props__.__dict__["border_left"] = border_left
        __props__.__dict__["border_right"] = border_right
        __props__.__dict__["border_top"] = border_top
        __props__.__dict__["column_gap"] = column_gap
        __props__.__dict__["column_span"] = column_span
        __props__.__dict__["fg_color"] = fg_color
        __props__.__dict__["font_family"] = font_family
        __props__.__dict__["font_size"] = font_size
        __props__.__dict__["font_style"] = font_style
        __props__.__dict__["font_weight"] = font_weight
        __props__.__dict__["height"] = height
        __props__.__dict__["line_height"] = line_height
        __props__.__dict__["margin_bottom"] = margin_bottom
        __props__.__dict__["margin_left"] = margin_left
        __props__.__dict__["margin_right"] = margin_right
        __props__.__dict__["margin_top"] = margin_top
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["padding_bottom"] = padding_bottom
        __props__.__dict__["padding_left"] = padding_left
        __props__.__dict__["padding_right"] = padding_right
        __props__.__dict__["padding_top"] = padding_top
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["width"] = width
        return ReportStyle(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def align(self) -> pulumi.Output[str]:
        return pulumi.get(self, "align")

    @property
    @pulumi.getter(name="bgColor")
    def bg_color(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bg_color")

    @property
    @pulumi.getter(name="borderBottom")
    def border_bottom(self) -> pulumi.Output[str]:
        return pulumi.get(self, "border_bottom")

    @property
    @pulumi.getter(name="borderLeft")
    def border_left(self) -> pulumi.Output[str]:
        return pulumi.get(self, "border_left")

    @property
    @pulumi.getter(name="borderRight")
    def border_right(self) -> pulumi.Output[str]:
        return pulumi.get(self, "border_right")

    @property
    @pulumi.getter(name="borderTop")
    def border_top(self) -> pulumi.Output[str]:
        return pulumi.get(self, "border_top")

    @property
    @pulumi.getter(name="columnGap")
    def column_gap(self) -> pulumi.Output[str]:
        return pulumi.get(self, "column_gap")

    @property
    @pulumi.getter(name="columnSpan")
    def column_span(self) -> pulumi.Output[str]:
        return pulumi.get(self, "column_span")

    @property
    @pulumi.getter(name="fgColor")
    def fg_color(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fg_color")

    @property
    @pulumi.getter(name="fontFamily")
    def font_family(self) -> pulumi.Output[str]:
        return pulumi.get(self, "font_family")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> pulumi.Output[str]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontStyle")
    def font_style(self) -> pulumi.Output[str]:
        return pulumi.get(self, "font_style")

    @property
    @pulumi.getter(name="fontWeight")
    def font_weight(self) -> pulumi.Output[str]:
        return pulumi.get(self, "font_weight")

    @property
    @pulumi.getter
    def height(self) -> pulumi.Output[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="lineHeight")
    def line_height(self) -> pulumi.Output[str]:
        return pulumi.get(self, "line_height")

    @property
    @pulumi.getter(name="marginBottom")
    def margin_bottom(self) -> pulumi.Output[str]:
        return pulumi.get(self, "margin_bottom")

    @property
    @pulumi.getter(name="marginLeft")
    def margin_left(self) -> pulumi.Output[str]:
        return pulumi.get(self, "margin_left")

    @property
    @pulumi.getter(name="marginRight")
    def margin_right(self) -> pulumi.Output[str]:
        return pulumi.get(self, "margin_right")

    @property
    @pulumi.getter(name="marginTop")
    def margin_top(self) -> pulumi.Output[str]:
        return pulumi.get(self, "margin_top")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="paddingBottom")
    def padding_bottom(self) -> pulumi.Output[str]:
        return pulumi.get(self, "padding_bottom")

    @property
    @pulumi.getter(name="paddingLeft")
    def padding_left(self) -> pulumi.Output[str]:
        return pulumi.get(self, "padding_left")

    @property
    @pulumi.getter(name="paddingRight")
    def padding_right(self) -> pulumi.Output[str]:
        return pulumi.get(self, "padding_right")

    @property
    @pulumi.getter(name="paddingTop")
    def padding_top(self) -> pulumi.Output[str]:
        return pulumi.get(self, "padding_top")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def width(self) -> pulumi.Output[str]:
        return pulumi.get(self, "width")

