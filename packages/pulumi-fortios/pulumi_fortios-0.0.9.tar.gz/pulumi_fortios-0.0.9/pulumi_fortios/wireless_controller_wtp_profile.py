# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WirelessControllerWtpProfileArgs', 'WirelessControllerWtpProfile']

@pulumi.input_type
class WirelessControllerWtpProfileArgs:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 ap_country: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 apcfg_profile: Optional[pulumi.Input[str]] = None,
                 ble_profile: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 console_login: Optional[pulumi.Input[str]] = None,
                 control_message_offload: Optional[pulumi.Input[str]] = None,
                 deny_mac_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileDenyMacListArgs']]]] = None,
                 dtls_in_kernel: Optional[pulumi.Input[str]] = None,
                 dtls_policy: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 energy_efficient_ethernet: Optional[pulumi.Input[str]] = None,
                 esl_ses_dongle: Optional[pulumi.Input['WirelessControllerWtpProfileEslSesDongleArgs']] = None,
                 ext_info_enable: Optional[pulumi.Input[str]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 handoff_roaming: Optional[pulumi.Input[str]] = None,
                 handoff_rssi: Optional[pulumi.Input[int]] = None,
                 handoff_sta_thresh: Optional[pulumi.Input[int]] = None,
                 indoor_outdoor_deployment: Optional[pulumi.Input[str]] = None,
                 ip_fragment_preventing: Optional[pulumi.Input[str]] = None,
                 lan: Optional[pulumi.Input['WirelessControllerWtpProfileLanArgs']] = None,
                 lbs: Optional[pulumi.Input['WirelessControllerWtpProfileLbsArgs']] = None,
                 led_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileLedScheduleArgs']]]] = None,
                 led_state: Optional[pulumi.Input[str]] = None,
                 lldp: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_change: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input['WirelessControllerWtpProfilePlatformArgs']] = None,
                 poe_mode: Optional[pulumi.Input[str]] = None,
                 radio1: Optional[pulumi.Input['WirelessControllerWtpProfileRadio1Args']] = None,
                 radio2: Optional[pulumi.Input['WirelessControllerWtpProfileRadio2Args']] = None,
                 radio3: Optional[pulumi.Input['WirelessControllerWtpProfileRadio3Args']] = None,
                 radio4: Optional[pulumi.Input['WirelessControllerWtpProfileRadio4Args']] = None,
                 split_tunneling_acl_local_ap_subnet: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_path: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acls: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileSplitTunnelingAclArgs']]]] = None,
                 syslog_profile: Optional[pulumi.Input[str]] = None,
                 tun_mtu_downlink: Optional[pulumi.Input[int]] = None,
                 tun_mtu_uplink: Optional[pulumi.Input[int]] = None,
                 unii45ghz_band: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_port_auth: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_methods: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_password: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_usrname: Optional[pulumi.Input[str]] = None,
                 wan_port_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WirelessControllerWtpProfile resource.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if ap_country is not None:
            pulumi.set(__self__, "ap_country", ap_country)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if apcfg_profile is not None:
            pulumi.set(__self__, "apcfg_profile", apcfg_profile)
        if ble_profile is not None:
            pulumi.set(__self__, "ble_profile", ble_profile)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if console_login is not None:
            pulumi.set(__self__, "console_login", console_login)
        if control_message_offload is not None:
            pulumi.set(__self__, "control_message_offload", control_message_offload)
        if deny_mac_lists is not None:
            pulumi.set(__self__, "deny_mac_lists", deny_mac_lists)
        if dtls_in_kernel is not None:
            pulumi.set(__self__, "dtls_in_kernel", dtls_in_kernel)
        if dtls_policy is not None:
            pulumi.set(__self__, "dtls_policy", dtls_policy)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if energy_efficient_ethernet is not None:
            pulumi.set(__self__, "energy_efficient_ethernet", energy_efficient_ethernet)
        if esl_ses_dongle is not None:
            pulumi.set(__self__, "esl_ses_dongle", esl_ses_dongle)
        if ext_info_enable is not None:
            pulumi.set(__self__, "ext_info_enable", ext_info_enable)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if handoff_roaming is not None:
            pulumi.set(__self__, "handoff_roaming", handoff_roaming)
        if handoff_rssi is not None:
            pulumi.set(__self__, "handoff_rssi", handoff_rssi)
        if handoff_sta_thresh is not None:
            pulumi.set(__self__, "handoff_sta_thresh", handoff_sta_thresh)
        if indoor_outdoor_deployment is not None:
            pulumi.set(__self__, "indoor_outdoor_deployment", indoor_outdoor_deployment)
        if ip_fragment_preventing is not None:
            pulumi.set(__self__, "ip_fragment_preventing", ip_fragment_preventing)
        if lan is not None:
            pulumi.set(__self__, "lan", lan)
        if lbs is not None:
            pulumi.set(__self__, "lbs", lbs)
        if led_schedules is not None:
            pulumi.set(__self__, "led_schedules", led_schedules)
        if led_state is not None:
            pulumi.set(__self__, "led_state", led_state)
        if lldp is not None:
            pulumi.set(__self__, "lldp", lldp)
        if login_passwd is not None:
            pulumi.set(__self__, "login_passwd", login_passwd)
        if login_passwd_change is not None:
            pulumi.set(__self__, "login_passwd_change", login_passwd_change)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if poe_mode is not None:
            pulumi.set(__self__, "poe_mode", poe_mode)
        if radio1 is not None:
            pulumi.set(__self__, "radio1", radio1)
        if radio2 is not None:
            pulumi.set(__self__, "radio2", radio2)
        if radio3 is not None:
            pulumi.set(__self__, "radio3", radio3)
        if radio4 is not None:
            pulumi.set(__self__, "radio4", radio4)
        if split_tunneling_acl_local_ap_subnet is not None:
            pulumi.set(__self__, "split_tunneling_acl_local_ap_subnet", split_tunneling_acl_local_ap_subnet)
        if split_tunneling_acl_path is not None:
            pulumi.set(__self__, "split_tunneling_acl_path", split_tunneling_acl_path)
        if split_tunneling_acls is not None:
            pulumi.set(__self__, "split_tunneling_acls", split_tunneling_acls)
        if syslog_profile is not None:
            pulumi.set(__self__, "syslog_profile", syslog_profile)
        if tun_mtu_downlink is not None:
            pulumi.set(__self__, "tun_mtu_downlink", tun_mtu_downlink)
        if tun_mtu_uplink is not None:
            pulumi.set(__self__, "tun_mtu_uplink", tun_mtu_uplink)
        if unii45ghz_band is not None:
            pulumi.set(__self__, "unii45ghz_band", unii45ghz_band)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wan_port_auth is not None:
            pulumi.set(__self__, "wan_port_auth", wan_port_auth)
        if wan_port_auth_methods is not None:
            pulumi.set(__self__, "wan_port_auth_methods", wan_port_auth_methods)
        if wan_port_auth_password is not None:
            pulumi.set(__self__, "wan_port_auth_password", wan_port_auth_password)
        if wan_port_auth_usrname is not None:
            pulumi.set(__self__, "wan_port_auth_usrname", wan_port_auth_usrname)
        if wan_port_mode is not None:
            pulumi.set(__self__, "wan_port_mode", wan_port_mode)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="apCountry")
    def ap_country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_country")

    @ap_country.setter
    def ap_country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_country", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apcfgProfile")
    def apcfg_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apcfg_profile")

    @apcfg_profile.setter
    def apcfg_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apcfg_profile", value)

    @property
    @pulumi.getter(name="bleProfile")
    def ble_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ble_profile")

    @ble_profile.setter
    def ble_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ble_profile", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "console_login")

    @console_login.setter
    def console_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "console_login", value)

    @property
    @pulumi.getter(name="controlMessageOffload")
    def control_message_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "control_message_offload")

    @control_message_offload.setter
    def control_message_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_message_offload", value)

    @property
    @pulumi.getter(name="denyMacLists")
    def deny_mac_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileDenyMacListArgs']]]]:
        return pulumi.get(self, "deny_mac_lists")

    @deny_mac_lists.setter
    def deny_mac_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileDenyMacListArgs']]]]):
        pulumi.set(self, "deny_mac_lists", value)

    @property
    @pulumi.getter(name="dtlsInKernel")
    def dtls_in_kernel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dtls_in_kernel")

    @dtls_in_kernel.setter
    def dtls_in_kernel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtls_in_kernel", value)

    @property
    @pulumi.getter(name="dtlsPolicy")
    def dtls_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dtls_policy")

    @dtls_policy.setter
    def dtls_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtls_policy", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="energyEfficientEthernet")
    def energy_efficient_ethernet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "energy_efficient_ethernet")

    @energy_efficient_ethernet.setter
    def energy_efficient_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "energy_efficient_ethernet", value)

    @property
    @pulumi.getter(name="eslSesDongle")
    def esl_ses_dongle(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileEslSesDongleArgs']]:
        return pulumi.get(self, "esl_ses_dongle")

    @esl_ses_dongle.setter
    def esl_ses_dongle(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileEslSesDongleArgs']]):
        pulumi.set(self, "esl_ses_dongle", value)

    @property
    @pulumi.getter(name="extInfoEnable")
    def ext_info_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ext_info_enable")

    @ext_info_enable.setter
    def ext_info_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_info_enable", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="handoffRoaming")
    def handoff_roaming(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "handoff_roaming")

    @handoff_roaming.setter
    def handoff_roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "handoff_roaming", value)

    @property
    @pulumi.getter(name="handoffRssi")
    def handoff_rssi(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "handoff_rssi")

    @handoff_rssi.setter
    def handoff_rssi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "handoff_rssi", value)

    @property
    @pulumi.getter(name="handoffStaThresh")
    def handoff_sta_thresh(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "handoff_sta_thresh")

    @handoff_sta_thresh.setter
    def handoff_sta_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "handoff_sta_thresh", value)

    @property
    @pulumi.getter(name="indoorOutdoorDeployment")
    def indoor_outdoor_deployment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indoor_outdoor_deployment")

    @indoor_outdoor_deployment.setter
    def indoor_outdoor_deployment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indoor_outdoor_deployment", value)

    @property
    @pulumi.getter(name="ipFragmentPreventing")
    def ip_fragment_preventing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_fragment_preventing")

    @ip_fragment_preventing.setter
    def ip_fragment_preventing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_fragment_preventing", value)

    @property
    @pulumi.getter
    def lan(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileLanArgs']]:
        return pulumi.get(self, "lan")

    @lan.setter
    def lan(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileLanArgs']]):
        pulumi.set(self, "lan", value)

    @property
    @pulumi.getter
    def lbs(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileLbsArgs']]:
        return pulumi.get(self, "lbs")

    @lbs.setter
    def lbs(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileLbsArgs']]):
        pulumi.set(self, "lbs", value)

    @property
    @pulumi.getter(name="ledSchedules")
    def led_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileLedScheduleArgs']]]]:
        return pulumi.get(self, "led_schedules")

    @led_schedules.setter
    def led_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileLedScheduleArgs']]]]):
        pulumi.set(self, "led_schedules", value)

    @property
    @pulumi.getter(name="ledState")
    def led_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "led_state")

    @led_state.setter
    def led_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "led_state", value)

    @property
    @pulumi.getter
    def lldp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp")

    @lldp.setter
    def lldp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp", value)

    @property
    @pulumi.getter(name="loginPasswd")
    def login_passwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd")

    @login_passwd.setter
    def login_passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd", value)

    @property
    @pulumi.getter(name="loginPasswdChange")
    def login_passwd_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd_change")

    @login_passwd_change.setter
    def login_passwd_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd_change", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input['WirelessControllerWtpProfilePlatformArgs']]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input['WirelessControllerWtpProfilePlatformArgs']]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_mode")

    @poe_mode.setter
    def poe_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_mode", value)

    @property
    @pulumi.getter
    def radio1(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileRadio1Args']]:
        return pulumi.get(self, "radio1")

    @radio1.setter
    def radio1(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileRadio1Args']]):
        pulumi.set(self, "radio1", value)

    @property
    @pulumi.getter
    def radio2(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileRadio2Args']]:
        return pulumi.get(self, "radio2")

    @radio2.setter
    def radio2(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileRadio2Args']]):
        pulumi.set(self, "radio2", value)

    @property
    @pulumi.getter
    def radio3(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileRadio3Args']]:
        return pulumi.get(self, "radio3")

    @radio3.setter
    def radio3(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileRadio3Args']]):
        pulumi.set(self, "radio3", value)

    @property
    @pulumi.getter
    def radio4(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileRadio4Args']]:
        return pulumi.get(self, "radio4")

    @radio4.setter
    def radio4(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileRadio4Args']]):
        pulumi.set(self, "radio4", value)

    @property
    @pulumi.getter(name="splitTunnelingAclLocalApSubnet")
    def split_tunneling_acl_local_ap_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling_acl_local_ap_subnet")

    @split_tunneling_acl_local_ap_subnet.setter
    def split_tunneling_acl_local_ap_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling_acl_local_ap_subnet", value)

    @property
    @pulumi.getter(name="splitTunnelingAclPath")
    def split_tunneling_acl_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling_acl_path")

    @split_tunneling_acl_path.setter
    def split_tunneling_acl_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling_acl_path", value)

    @property
    @pulumi.getter(name="splitTunnelingAcls")
    def split_tunneling_acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileSplitTunnelingAclArgs']]]]:
        return pulumi.get(self, "split_tunneling_acls")

    @split_tunneling_acls.setter
    def split_tunneling_acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileSplitTunnelingAclArgs']]]]):
        pulumi.set(self, "split_tunneling_acls", value)

    @property
    @pulumi.getter(name="syslogProfile")
    def syslog_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "syslog_profile")

    @syslog_profile.setter
    def syslog_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "syslog_profile", value)

    @property
    @pulumi.getter(name="tunMtuDownlink")
    def tun_mtu_downlink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tun_mtu_downlink")

    @tun_mtu_downlink.setter
    def tun_mtu_downlink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tun_mtu_downlink", value)

    @property
    @pulumi.getter(name="tunMtuUplink")
    def tun_mtu_uplink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tun_mtu_uplink")

    @tun_mtu_uplink.setter
    def tun_mtu_uplink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tun_mtu_uplink", value)

    @property
    @pulumi.getter(name="unii45ghzBand")
    def unii45ghz_band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unii45ghz_band")

    @unii45ghz_band.setter
    def unii45ghz_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unii45ghz_band", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wanPortAuth")
    def wan_port_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_auth")

    @wan_port_auth.setter
    def wan_port_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_auth", value)

    @property
    @pulumi.getter(name="wanPortAuthMethods")
    def wan_port_auth_methods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_auth_methods")

    @wan_port_auth_methods.setter
    def wan_port_auth_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_auth_methods", value)

    @property
    @pulumi.getter(name="wanPortAuthPassword")
    def wan_port_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_auth_password")

    @wan_port_auth_password.setter
    def wan_port_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_auth_password", value)

    @property
    @pulumi.getter(name="wanPortAuthUsrname")
    def wan_port_auth_usrname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_auth_usrname")

    @wan_port_auth_usrname.setter
    def wan_port_auth_usrname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_auth_usrname", value)

    @property
    @pulumi.getter(name="wanPortMode")
    def wan_port_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_mode")

    @wan_port_mode.setter
    def wan_port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_mode", value)


@pulumi.input_type
class _WirelessControllerWtpProfileState:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 ap_country: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 apcfg_profile: Optional[pulumi.Input[str]] = None,
                 ble_profile: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 console_login: Optional[pulumi.Input[str]] = None,
                 control_message_offload: Optional[pulumi.Input[str]] = None,
                 deny_mac_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileDenyMacListArgs']]]] = None,
                 dtls_in_kernel: Optional[pulumi.Input[str]] = None,
                 dtls_policy: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 energy_efficient_ethernet: Optional[pulumi.Input[str]] = None,
                 esl_ses_dongle: Optional[pulumi.Input['WirelessControllerWtpProfileEslSesDongleArgs']] = None,
                 ext_info_enable: Optional[pulumi.Input[str]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 handoff_roaming: Optional[pulumi.Input[str]] = None,
                 handoff_rssi: Optional[pulumi.Input[int]] = None,
                 handoff_sta_thresh: Optional[pulumi.Input[int]] = None,
                 indoor_outdoor_deployment: Optional[pulumi.Input[str]] = None,
                 ip_fragment_preventing: Optional[pulumi.Input[str]] = None,
                 lan: Optional[pulumi.Input['WirelessControllerWtpProfileLanArgs']] = None,
                 lbs: Optional[pulumi.Input['WirelessControllerWtpProfileLbsArgs']] = None,
                 led_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileLedScheduleArgs']]]] = None,
                 led_state: Optional[pulumi.Input[str]] = None,
                 lldp: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_change: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input['WirelessControllerWtpProfilePlatformArgs']] = None,
                 poe_mode: Optional[pulumi.Input[str]] = None,
                 radio1: Optional[pulumi.Input['WirelessControllerWtpProfileRadio1Args']] = None,
                 radio2: Optional[pulumi.Input['WirelessControllerWtpProfileRadio2Args']] = None,
                 radio3: Optional[pulumi.Input['WirelessControllerWtpProfileRadio3Args']] = None,
                 radio4: Optional[pulumi.Input['WirelessControllerWtpProfileRadio4Args']] = None,
                 split_tunneling_acl_local_ap_subnet: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_path: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acls: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileSplitTunnelingAclArgs']]]] = None,
                 syslog_profile: Optional[pulumi.Input[str]] = None,
                 tun_mtu_downlink: Optional[pulumi.Input[int]] = None,
                 tun_mtu_uplink: Optional[pulumi.Input[int]] = None,
                 unii45ghz_band: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_port_auth: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_methods: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_password: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_usrname: Optional[pulumi.Input[str]] = None,
                 wan_port_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WirelessControllerWtpProfile resources.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if ap_country is not None:
            pulumi.set(__self__, "ap_country", ap_country)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if apcfg_profile is not None:
            pulumi.set(__self__, "apcfg_profile", apcfg_profile)
        if ble_profile is not None:
            pulumi.set(__self__, "ble_profile", ble_profile)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if console_login is not None:
            pulumi.set(__self__, "console_login", console_login)
        if control_message_offload is not None:
            pulumi.set(__self__, "control_message_offload", control_message_offload)
        if deny_mac_lists is not None:
            pulumi.set(__self__, "deny_mac_lists", deny_mac_lists)
        if dtls_in_kernel is not None:
            pulumi.set(__self__, "dtls_in_kernel", dtls_in_kernel)
        if dtls_policy is not None:
            pulumi.set(__self__, "dtls_policy", dtls_policy)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if energy_efficient_ethernet is not None:
            pulumi.set(__self__, "energy_efficient_ethernet", energy_efficient_ethernet)
        if esl_ses_dongle is not None:
            pulumi.set(__self__, "esl_ses_dongle", esl_ses_dongle)
        if ext_info_enable is not None:
            pulumi.set(__self__, "ext_info_enable", ext_info_enable)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if handoff_roaming is not None:
            pulumi.set(__self__, "handoff_roaming", handoff_roaming)
        if handoff_rssi is not None:
            pulumi.set(__self__, "handoff_rssi", handoff_rssi)
        if handoff_sta_thresh is not None:
            pulumi.set(__self__, "handoff_sta_thresh", handoff_sta_thresh)
        if indoor_outdoor_deployment is not None:
            pulumi.set(__self__, "indoor_outdoor_deployment", indoor_outdoor_deployment)
        if ip_fragment_preventing is not None:
            pulumi.set(__self__, "ip_fragment_preventing", ip_fragment_preventing)
        if lan is not None:
            pulumi.set(__self__, "lan", lan)
        if lbs is not None:
            pulumi.set(__self__, "lbs", lbs)
        if led_schedules is not None:
            pulumi.set(__self__, "led_schedules", led_schedules)
        if led_state is not None:
            pulumi.set(__self__, "led_state", led_state)
        if lldp is not None:
            pulumi.set(__self__, "lldp", lldp)
        if login_passwd is not None:
            pulumi.set(__self__, "login_passwd", login_passwd)
        if login_passwd_change is not None:
            pulumi.set(__self__, "login_passwd_change", login_passwd_change)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if poe_mode is not None:
            pulumi.set(__self__, "poe_mode", poe_mode)
        if radio1 is not None:
            pulumi.set(__self__, "radio1", radio1)
        if radio2 is not None:
            pulumi.set(__self__, "radio2", radio2)
        if radio3 is not None:
            pulumi.set(__self__, "radio3", radio3)
        if radio4 is not None:
            pulumi.set(__self__, "radio4", radio4)
        if split_tunneling_acl_local_ap_subnet is not None:
            pulumi.set(__self__, "split_tunneling_acl_local_ap_subnet", split_tunneling_acl_local_ap_subnet)
        if split_tunneling_acl_path is not None:
            pulumi.set(__self__, "split_tunneling_acl_path", split_tunneling_acl_path)
        if split_tunneling_acls is not None:
            pulumi.set(__self__, "split_tunneling_acls", split_tunneling_acls)
        if syslog_profile is not None:
            pulumi.set(__self__, "syslog_profile", syslog_profile)
        if tun_mtu_downlink is not None:
            pulumi.set(__self__, "tun_mtu_downlink", tun_mtu_downlink)
        if tun_mtu_uplink is not None:
            pulumi.set(__self__, "tun_mtu_uplink", tun_mtu_uplink)
        if unii45ghz_band is not None:
            pulumi.set(__self__, "unii45ghz_band", unii45ghz_band)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wan_port_auth is not None:
            pulumi.set(__self__, "wan_port_auth", wan_port_auth)
        if wan_port_auth_methods is not None:
            pulumi.set(__self__, "wan_port_auth_methods", wan_port_auth_methods)
        if wan_port_auth_password is not None:
            pulumi.set(__self__, "wan_port_auth_password", wan_port_auth_password)
        if wan_port_auth_usrname is not None:
            pulumi.set(__self__, "wan_port_auth_usrname", wan_port_auth_usrname)
        if wan_port_mode is not None:
            pulumi.set(__self__, "wan_port_mode", wan_port_mode)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="apCountry")
    def ap_country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_country")

    @ap_country.setter
    def ap_country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_country", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apcfgProfile")
    def apcfg_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apcfg_profile")

    @apcfg_profile.setter
    def apcfg_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apcfg_profile", value)

    @property
    @pulumi.getter(name="bleProfile")
    def ble_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ble_profile")

    @ble_profile.setter
    def ble_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ble_profile", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "console_login")

    @console_login.setter
    def console_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "console_login", value)

    @property
    @pulumi.getter(name="controlMessageOffload")
    def control_message_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "control_message_offload")

    @control_message_offload.setter
    def control_message_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_message_offload", value)

    @property
    @pulumi.getter(name="denyMacLists")
    def deny_mac_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileDenyMacListArgs']]]]:
        return pulumi.get(self, "deny_mac_lists")

    @deny_mac_lists.setter
    def deny_mac_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileDenyMacListArgs']]]]):
        pulumi.set(self, "deny_mac_lists", value)

    @property
    @pulumi.getter(name="dtlsInKernel")
    def dtls_in_kernel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dtls_in_kernel")

    @dtls_in_kernel.setter
    def dtls_in_kernel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtls_in_kernel", value)

    @property
    @pulumi.getter(name="dtlsPolicy")
    def dtls_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dtls_policy")

    @dtls_policy.setter
    def dtls_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtls_policy", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="energyEfficientEthernet")
    def energy_efficient_ethernet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "energy_efficient_ethernet")

    @energy_efficient_ethernet.setter
    def energy_efficient_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "energy_efficient_ethernet", value)

    @property
    @pulumi.getter(name="eslSesDongle")
    def esl_ses_dongle(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileEslSesDongleArgs']]:
        return pulumi.get(self, "esl_ses_dongle")

    @esl_ses_dongle.setter
    def esl_ses_dongle(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileEslSesDongleArgs']]):
        pulumi.set(self, "esl_ses_dongle", value)

    @property
    @pulumi.getter(name="extInfoEnable")
    def ext_info_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ext_info_enable")

    @ext_info_enable.setter
    def ext_info_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_info_enable", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="handoffRoaming")
    def handoff_roaming(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "handoff_roaming")

    @handoff_roaming.setter
    def handoff_roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "handoff_roaming", value)

    @property
    @pulumi.getter(name="handoffRssi")
    def handoff_rssi(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "handoff_rssi")

    @handoff_rssi.setter
    def handoff_rssi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "handoff_rssi", value)

    @property
    @pulumi.getter(name="handoffStaThresh")
    def handoff_sta_thresh(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "handoff_sta_thresh")

    @handoff_sta_thresh.setter
    def handoff_sta_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "handoff_sta_thresh", value)

    @property
    @pulumi.getter(name="indoorOutdoorDeployment")
    def indoor_outdoor_deployment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "indoor_outdoor_deployment")

    @indoor_outdoor_deployment.setter
    def indoor_outdoor_deployment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "indoor_outdoor_deployment", value)

    @property
    @pulumi.getter(name="ipFragmentPreventing")
    def ip_fragment_preventing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_fragment_preventing")

    @ip_fragment_preventing.setter
    def ip_fragment_preventing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_fragment_preventing", value)

    @property
    @pulumi.getter
    def lan(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileLanArgs']]:
        return pulumi.get(self, "lan")

    @lan.setter
    def lan(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileLanArgs']]):
        pulumi.set(self, "lan", value)

    @property
    @pulumi.getter
    def lbs(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileLbsArgs']]:
        return pulumi.get(self, "lbs")

    @lbs.setter
    def lbs(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileLbsArgs']]):
        pulumi.set(self, "lbs", value)

    @property
    @pulumi.getter(name="ledSchedules")
    def led_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileLedScheduleArgs']]]]:
        return pulumi.get(self, "led_schedules")

    @led_schedules.setter
    def led_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileLedScheduleArgs']]]]):
        pulumi.set(self, "led_schedules", value)

    @property
    @pulumi.getter(name="ledState")
    def led_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "led_state")

    @led_state.setter
    def led_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "led_state", value)

    @property
    @pulumi.getter
    def lldp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp")

    @lldp.setter
    def lldp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp", value)

    @property
    @pulumi.getter(name="loginPasswd")
    def login_passwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd")

    @login_passwd.setter
    def login_passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd", value)

    @property
    @pulumi.getter(name="loginPasswdChange")
    def login_passwd_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd_change")

    @login_passwd_change.setter
    def login_passwd_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd_change", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input['WirelessControllerWtpProfilePlatformArgs']]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input['WirelessControllerWtpProfilePlatformArgs']]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_mode")

    @poe_mode.setter
    def poe_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_mode", value)

    @property
    @pulumi.getter
    def radio1(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileRadio1Args']]:
        return pulumi.get(self, "radio1")

    @radio1.setter
    def radio1(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileRadio1Args']]):
        pulumi.set(self, "radio1", value)

    @property
    @pulumi.getter
    def radio2(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileRadio2Args']]:
        return pulumi.get(self, "radio2")

    @radio2.setter
    def radio2(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileRadio2Args']]):
        pulumi.set(self, "radio2", value)

    @property
    @pulumi.getter
    def radio3(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileRadio3Args']]:
        return pulumi.get(self, "radio3")

    @radio3.setter
    def radio3(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileRadio3Args']]):
        pulumi.set(self, "radio3", value)

    @property
    @pulumi.getter
    def radio4(self) -> Optional[pulumi.Input['WirelessControllerWtpProfileRadio4Args']]:
        return pulumi.get(self, "radio4")

    @radio4.setter
    def radio4(self, value: Optional[pulumi.Input['WirelessControllerWtpProfileRadio4Args']]):
        pulumi.set(self, "radio4", value)

    @property
    @pulumi.getter(name="splitTunnelingAclLocalApSubnet")
    def split_tunneling_acl_local_ap_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling_acl_local_ap_subnet")

    @split_tunneling_acl_local_ap_subnet.setter
    def split_tunneling_acl_local_ap_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling_acl_local_ap_subnet", value)

    @property
    @pulumi.getter(name="splitTunnelingAclPath")
    def split_tunneling_acl_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling_acl_path")

    @split_tunneling_acl_path.setter
    def split_tunneling_acl_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling_acl_path", value)

    @property
    @pulumi.getter(name="splitTunnelingAcls")
    def split_tunneling_acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileSplitTunnelingAclArgs']]]]:
        return pulumi.get(self, "split_tunneling_acls")

    @split_tunneling_acls.setter
    def split_tunneling_acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileSplitTunnelingAclArgs']]]]):
        pulumi.set(self, "split_tunneling_acls", value)

    @property
    @pulumi.getter(name="syslogProfile")
    def syslog_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "syslog_profile")

    @syslog_profile.setter
    def syslog_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "syslog_profile", value)

    @property
    @pulumi.getter(name="tunMtuDownlink")
    def tun_mtu_downlink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tun_mtu_downlink")

    @tun_mtu_downlink.setter
    def tun_mtu_downlink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tun_mtu_downlink", value)

    @property
    @pulumi.getter(name="tunMtuUplink")
    def tun_mtu_uplink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tun_mtu_uplink")

    @tun_mtu_uplink.setter
    def tun_mtu_uplink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tun_mtu_uplink", value)

    @property
    @pulumi.getter(name="unii45ghzBand")
    def unii45ghz_band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unii45ghz_band")

    @unii45ghz_band.setter
    def unii45ghz_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unii45ghz_band", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wanPortAuth")
    def wan_port_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_auth")

    @wan_port_auth.setter
    def wan_port_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_auth", value)

    @property
    @pulumi.getter(name="wanPortAuthMethods")
    def wan_port_auth_methods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_auth_methods")

    @wan_port_auth_methods.setter
    def wan_port_auth_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_auth_methods", value)

    @property
    @pulumi.getter(name="wanPortAuthPassword")
    def wan_port_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_auth_password")

    @wan_port_auth_password.setter
    def wan_port_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_auth_password", value)

    @property
    @pulumi.getter(name="wanPortAuthUsrname")
    def wan_port_auth_usrname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_auth_usrname")

    @wan_port_auth_usrname.setter
    def wan_port_auth_usrname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_auth_usrname", value)

    @property
    @pulumi.getter(name="wanPortMode")
    def wan_port_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_mode")

    @wan_port_mode.setter
    def wan_port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_mode", value)


class WirelessControllerWtpProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 ap_country: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 apcfg_profile: Optional[pulumi.Input[str]] = None,
                 ble_profile: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 console_login: Optional[pulumi.Input[str]] = None,
                 control_message_offload: Optional[pulumi.Input[str]] = None,
                 deny_mac_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileDenyMacListArgs']]]]] = None,
                 dtls_in_kernel: Optional[pulumi.Input[str]] = None,
                 dtls_policy: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 energy_efficient_ethernet: Optional[pulumi.Input[str]] = None,
                 esl_ses_dongle: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileEslSesDongleArgs']]] = None,
                 ext_info_enable: Optional[pulumi.Input[str]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 handoff_roaming: Optional[pulumi.Input[str]] = None,
                 handoff_rssi: Optional[pulumi.Input[int]] = None,
                 handoff_sta_thresh: Optional[pulumi.Input[int]] = None,
                 indoor_outdoor_deployment: Optional[pulumi.Input[str]] = None,
                 ip_fragment_preventing: Optional[pulumi.Input[str]] = None,
                 lan: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileLanArgs']]] = None,
                 lbs: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileLbsArgs']]] = None,
                 led_schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileLedScheduleArgs']]]]] = None,
                 led_state: Optional[pulumi.Input[str]] = None,
                 lldp: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_change: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfilePlatformArgs']]] = None,
                 poe_mode: Optional[pulumi.Input[str]] = None,
                 radio1: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio1Args']]] = None,
                 radio2: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio2Args']]] = None,
                 radio3: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio3Args']]] = None,
                 radio4: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio4Args']]] = None,
                 split_tunneling_acl_local_ap_subnet: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_path: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileSplitTunnelingAclArgs']]]]] = None,
                 syslog_profile: Optional[pulumi.Input[str]] = None,
                 tun_mtu_downlink: Optional[pulumi.Input[int]] = None,
                 tun_mtu_uplink: Optional[pulumi.Input[int]] = None,
                 unii45ghz_band: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_port_auth: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_methods: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_password: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_usrname: Optional[pulumi.Input[str]] = None,
                 wan_port_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WirelessControllerWtpProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WirelessControllerWtpProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WirelessControllerWtpProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WirelessControllerWtpProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WirelessControllerWtpProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 ap_country: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 apcfg_profile: Optional[pulumi.Input[str]] = None,
                 ble_profile: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 console_login: Optional[pulumi.Input[str]] = None,
                 control_message_offload: Optional[pulumi.Input[str]] = None,
                 deny_mac_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileDenyMacListArgs']]]]] = None,
                 dtls_in_kernel: Optional[pulumi.Input[str]] = None,
                 dtls_policy: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 energy_efficient_ethernet: Optional[pulumi.Input[str]] = None,
                 esl_ses_dongle: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileEslSesDongleArgs']]] = None,
                 ext_info_enable: Optional[pulumi.Input[str]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 handoff_roaming: Optional[pulumi.Input[str]] = None,
                 handoff_rssi: Optional[pulumi.Input[int]] = None,
                 handoff_sta_thresh: Optional[pulumi.Input[int]] = None,
                 indoor_outdoor_deployment: Optional[pulumi.Input[str]] = None,
                 ip_fragment_preventing: Optional[pulumi.Input[str]] = None,
                 lan: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileLanArgs']]] = None,
                 lbs: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileLbsArgs']]] = None,
                 led_schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileLedScheduleArgs']]]]] = None,
                 led_state: Optional[pulumi.Input[str]] = None,
                 lldp: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_change: Optional[pulumi.Input[str]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfilePlatformArgs']]] = None,
                 poe_mode: Optional[pulumi.Input[str]] = None,
                 radio1: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio1Args']]] = None,
                 radio2: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio2Args']]] = None,
                 radio3: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio3Args']]] = None,
                 radio4: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio4Args']]] = None,
                 split_tunneling_acl_local_ap_subnet: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_path: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileSplitTunnelingAclArgs']]]]] = None,
                 syslog_profile: Optional[pulumi.Input[str]] = None,
                 tun_mtu_downlink: Optional[pulumi.Input[int]] = None,
                 tun_mtu_uplink: Optional[pulumi.Input[int]] = None,
                 unii45ghz_band: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_port_auth: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_methods: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_password: Optional[pulumi.Input[str]] = None,
                 wan_port_auth_usrname: Optional[pulumi.Input[str]] = None,
                 wan_port_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WirelessControllerWtpProfileArgs.__new__(WirelessControllerWtpProfileArgs)

            __props__.__dict__["allowaccess"] = allowaccess
            __props__.__dict__["ap_country"] = ap_country
            __props__.__dict__["ap_handoff"] = ap_handoff
            __props__.__dict__["apcfg_profile"] = apcfg_profile
            __props__.__dict__["ble_profile"] = ble_profile
            __props__.__dict__["comment"] = comment
            __props__.__dict__["console_login"] = console_login
            __props__.__dict__["control_message_offload"] = control_message_offload
            __props__.__dict__["deny_mac_lists"] = deny_mac_lists
            __props__.__dict__["dtls_in_kernel"] = dtls_in_kernel
            __props__.__dict__["dtls_policy"] = dtls_policy
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["energy_efficient_ethernet"] = energy_efficient_ethernet
            __props__.__dict__["esl_ses_dongle"] = esl_ses_dongle
            __props__.__dict__["ext_info_enable"] = ext_info_enable
            __props__.__dict__["frequency_handoff"] = frequency_handoff
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["handoff_roaming"] = handoff_roaming
            __props__.__dict__["handoff_rssi"] = handoff_rssi
            __props__.__dict__["handoff_sta_thresh"] = handoff_sta_thresh
            __props__.__dict__["indoor_outdoor_deployment"] = indoor_outdoor_deployment
            __props__.__dict__["ip_fragment_preventing"] = ip_fragment_preventing
            __props__.__dict__["lan"] = lan
            __props__.__dict__["lbs"] = lbs
            __props__.__dict__["led_schedules"] = led_schedules
            __props__.__dict__["led_state"] = led_state
            __props__.__dict__["lldp"] = lldp
            __props__.__dict__["login_passwd"] = None if login_passwd is None else pulumi.Output.secret(login_passwd)
            __props__.__dict__["login_passwd_change"] = login_passwd_change
            __props__.__dict__["max_clients"] = max_clients
            __props__.__dict__["name"] = name
            __props__.__dict__["platform"] = platform
            __props__.__dict__["poe_mode"] = poe_mode
            __props__.__dict__["radio1"] = radio1
            __props__.__dict__["radio2"] = radio2
            __props__.__dict__["radio3"] = radio3
            __props__.__dict__["radio4"] = radio4
            __props__.__dict__["split_tunneling_acl_local_ap_subnet"] = split_tunneling_acl_local_ap_subnet
            __props__.__dict__["split_tunneling_acl_path"] = split_tunneling_acl_path
            __props__.__dict__["split_tunneling_acls"] = split_tunneling_acls
            __props__.__dict__["syslog_profile"] = syslog_profile
            __props__.__dict__["tun_mtu_downlink"] = tun_mtu_downlink
            __props__.__dict__["tun_mtu_uplink"] = tun_mtu_uplink
            __props__.__dict__["unii45ghz_band"] = unii45ghz_band
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wan_port_auth"] = wan_port_auth
            __props__.__dict__["wan_port_auth_methods"] = wan_port_auth_methods
            __props__.__dict__["wan_port_auth_password"] = wan_port_auth_password
            __props__.__dict__["wan_port_auth_usrname"] = wan_port_auth_usrname
            __props__.__dict__["wan_port_mode"] = wan_port_mode
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["loginPasswd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(WirelessControllerWtpProfile, __self__).__init__(
            'fortios:index/wirelessControllerWtpProfile:WirelessControllerWtpProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowaccess: Optional[pulumi.Input[str]] = None,
            ap_country: Optional[pulumi.Input[str]] = None,
            ap_handoff: Optional[pulumi.Input[str]] = None,
            apcfg_profile: Optional[pulumi.Input[str]] = None,
            ble_profile: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            console_login: Optional[pulumi.Input[str]] = None,
            control_message_offload: Optional[pulumi.Input[str]] = None,
            deny_mac_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileDenyMacListArgs']]]]] = None,
            dtls_in_kernel: Optional[pulumi.Input[str]] = None,
            dtls_policy: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            energy_efficient_ethernet: Optional[pulumi.Input[str]] = None,
            esl_ses_dongle: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileEslSesDongleArgs']]] = None,
            ext_info_enable: Optional[pulumi.Input[str]] = None,
            frequency_handoff: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            handoff_roaming: Optional[pulumi.Input[str]] = None,
            handoff_rssi: Optional[pulumi.Input[int]] = None,
            handoff_sta_thresh: Optional[pulumi.Input[int]] = None,
            indoor_outdoor_deployment: Optional[pulumi.Input[str]] = None,
            ip_fragment_preventing: Optional[pulumi.Input[str]] = None,
            lan: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileLanArgs']]] = None,
            lbs: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileLbsArgs']]] = None,
            led_schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileLedScheduleArgs']]]]] = None,
            led_state: Optional[pulumi.Input[str]] = None,
            lldp: Optional[pulumi.Input[str]] = None,
            login_passwd: Optional[pulumi.Input[str]] = None,
            login_passwd_change: Optional[pulumi.Input[str]] = None,
            max_clients: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            platform: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfilePlatformArgs']]] = None,
            poe_mode: Optional[pulumi.Input[str]] = None,
            radio1: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio1Args']]] = None,
            radio2: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio2Args']]] = None,
            radio3: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio3Args']]] = None,
            radio4: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileRadio4Args']]] = None,
            split_tunneling_acl_local_ap_subnet: Optional[pulumi.Input[str]] = None,
            split_tunneling_acl_path: Optional[pulumi.Input[str]] = None,
            split_tunneling_acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpProfileSplitTunnelingAclArgs']]]]] = None,
            syslog_profile: Optional[pulumi.Input[str]] = None,
            tun_mtu_downlink: Optional[pulumi.Input[int]] = None,
            tun_mtu_uplink: Optional[pulumi.Input[int]] = None,
            unii45ghz_band: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wan_port_auth: Optional[pulumi.Input[str]] = None,
            wan_port_auth_methods: Optional[pulumi.Input[str]] = None,
            wan_port_auth_password: Optional[pulumi.Input[str]] = None,
            wan_port_auth_usrname: Optional[pulumi.Input[str]] = None,
            wan_port_mode: Optional[pulumi.Input[str]] = None) -> 'WirelessControllerWtpProfile':
        """
        Get an existing WirelessControllerWtpProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WirelessControllerWtpProfileState.__new__(_WirelessControllerWtpProfileState)

        __props__.__dict__["allowaccess"] = allowaccess
        __props__.__dict__["ap_country"] = ap_country
        __props__.__dict__["ap_handoff"] = ap_handoff
        __props__.__dict__["apcfg_profile"] = apcfg_profile
        __props__.__dict__["ble_profile"] = ble_profile
        __props__.__dict__["comment"] = comment
        __props__.__dict__["console_login"] = console_login
        __props__.__dict__["control_message_offload"] = control_message_offload
        __props__.__dict__["deny_mac_lists"] = deny_mac_lists
        __props__.__dict__["dtls_in_kernel"] = dtls_in_kernel
        __props__.__dict__["dtls_policy"] = dtls_policy
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["energy_efficient_ethernet"] = energy_efficient_ethernet
        __props__.__dict__["esl_ses_dongle"] = esl_ses_dongle
        __props__.__dict__["ext_info_enable"] = ext_info_enable
        __props__.__dict__["frequency_handoff"] = frequency_handoff
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["handoff_roaming"] = handoff_roaming
        __props__.__dict__["handoff_rssi"] = handoff_rssi
        __props__.__dict__["handoff_sta_thresh"] = handoff_sta_thresh
        __props__.__dict__["indoor_outdoor_deployment"] = indoor_outdoor_deployment
        __props__.__dict__["ip_fragment_preventing"] = ip_fragment_preventing
        __props__.__dict__["lan"] = lan
        __props__.__dict__["lbs"] = lbs
        __props__.__dict__["led_schedules"] = led_schedules
        __props__.__dict__["led_state"] = led_state
        __props__.__dict__["lldp"] = lldp
        __props__.__dict__["login_passwd"] = login_passwd
        __props__.__dict__["login_passwd_change"] = login_passwd_change
        __props__.__dict__["max_clients"] = max_clients
        __props__.__dict__["name"] = name
        __props__.__dict__["platform"] = platform
        __props__.__dict__["poe_mode"] = poe_mode
        __props__.__dict__["radio1"] = radio1
        __props__.__dict__["radio2"] = radio2
        __props__.__dict__["radio3"] = radio3
        __props__.__dict__["radio4"] = radio4
        __props__.__dict__["split_tunneling_acl_local_ap_subnet"] = split_tunneling_acl_local_ap_subnet
        __props__.__dict__["split_tunneling_acl_path"] = split_tunneling_acl_path
        __props__.__dict__["split_tunneling_acls"] = split_tunneling_acls
        __props__.__dict__["syslog_profile"] = syslog_profile
        __props__.__dict__["tun_mtu_downlink"] = tun_mtu_downlink
        __props__.__dict__["tun_mtu_uplink"] = tun_mtu_uplink
        __props__.__dict__["unii45ghz_band"] = unii45ghz_band
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wan_port_auth"] = wan_port_auth
        __props__.__dict__["wan_port_auth_methods"] = wan_port_auth_methods
        __props__.__dict__["wan_port_auth_password"] = wan_port_auth_password
        __props__.__dict__["wan_port_auth_usrname"] = wan_port_auth_usrname
        __props__.__dict__["wan_port_mode"] = wan_port_mode
        return WirelessControllerWtpProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def allowaccess(self) -> pulumi.Output[str]:
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter(name="apCountry")
    def ap_country(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ap_country")

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ap_handoff")

    @property
    @pulumi.getter(name="apcfgProfile")
    def apcfg_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "apcfg_profile")

    @property
    @pulumi.getter(name="bleProfile")
    def ble_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ble_profile")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> pulumi.Output[str]:
        return pulumi.get(self, "console_login")

    @property
    @pulumi.getter(name="controlMessageOffload")
    def control_message_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "control_message_offload")

    @property
    @pulumi.getter(name="denyMacLists")
    def deny_mac_lists(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerWtpProfileDenyMacList']]]:
        return pulumi.get(self, "deny_mac_lists")

    @property
    @pulumi.getter(name="dtlsInKernel")
    def dtls_in_kernel(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dtls_in_kernel")

    @property
    @pulumi.getter(name="dtlsPolicy")
    def dtls_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dtls_policy")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="energyEfficientEthernet")
    def energy_efficient_ethernet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "energy_efficient_ethernet")

    @property
    @pulumi.getter(name="eslSesDongle")
    def esl_ses_dongle(self) -> pulumi.Output['outputs.WirelessControllerWtpProfileEslSesDongle']:
        return pulumi.get(self, "esl_ses_dongle")

    @property
    @pulumi.getter(name="extInfoEnable")
    def ext_info_enable(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ext_info_enable")

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> pulumi.Output[str]:
        return pulumi.get(self, "frequency_handoff")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="handoffRoaming")
    def handoff_roaming(self) -> pulumi.Output[str]:
        return pulumi.get(self, "handoff_roaming")

    @property
    @pulumi.getter(name="handoffRssi")
    def handoff_rssi(self) -> pulumi.Output[int]:
        return pulumi.get(self, "handoff_rssi")

    @property
    @pulumi.getter(name="handoffStaThresh")
    def handoff_sta_thresh(self) -> pulumi.Output[int]:
        return pulumi.get(self, "handoff_sta_thresh")

    @property
    @pulumi.getter(name="indoorOutdoorDeployment")
    def indoor_outdoor_deployment(self) -> pulumi.Output[str]:
        return pulumi.get(self, "indoor_outdoor_deployment")

    @property
    @pulumi.getter(name="ipFragmentPreventing")
    def ip_fragment_preventing(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_fragment_preventing")

    @property
    @pulumi.getter
    def lan(self) -> pulumi.Output['outputs.WirelessControllerWtpProfileLan']:
        return pulumi.get(self, "lan")

    @property
    @pulumi.getter
    def lbs(self) -> pulumi.Output['outputs.WirelessControllerWtpProfileLbs']:
        return pulumi.get(self, "lbs")

    @property
    @pulumi.getter(name="ledSchedules")
    def led_schedules(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerWtpProfileLedSchedule']]]:
        return pulumi.get(self, "led_schedules")

    @property
    @pulumi.getter(name="ledState")
    def led_state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "led_state")

    @property
    @pulumi.getter
    def lldp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "lldp")

    @property
    @pulumi.getter(name="loginPasswd")
    def login_passwd(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "login_passwd")

    @property
    @pulumi.getter(name="loginPasswdChange")
    def login_passwd_change(self) -> pulumi.Output[str]:
        return pulumi.get(self, "login_passwd_change")

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_clients")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def platform(self) -> pulumi.Output['outputs.WirelessControllerWtpProfilePlatform']:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "poe_mode")

    @property
    @pulumi.getter
    def radio1(self) -> pulumi.Output['outputs.WirelessControllerWtpProfileRadio1']:
        return pulumi.get(self, "radio1")

    @property
    @pulumi.getter
    def radio2(self) -> pulumi.Output['outputs.WirelessControllerWtpProfileRadio2']:
        return pulumi.get(self, "radio2")

    @property
    @pulumi.getter
    def radio3(self) -> pulumi.Output['outputs.WirelessControllerWtpProfileRadio3']:
        return pulumi.get(self, "radio3")

    @property
    @pulumi.getter
    def radio4(self) -> pulumi.Output['outputs.WirelessControllerWtpProfileRadio4']:
        return pulumi.get(self, "radio4")

    @property
    @pulumi.getter(name="splitTunnelingAclLocalApSubnet")
    def split_tunneling_acl_local_ap_subnet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "split_tunneling_acl_local_ap_subnet")

    @property
    @pulumi.getter(name="splitTunnelingAclPath")
    def split_tunneling_acl_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "split_tunneling_acl_path")

    @property
    @pulumi.getter(name="splitTunnelingAcls")
    def split_tunneling_acls(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerWtpProfileSplitTunnelingAcl']]]:
        return pulumi.get(self, "split_tunneling_acls")

    @property
    @pulumi.getter(name="syslogProfile")
    def syslog_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "syslog_profile")

    @property
    @pulumi.getter(name="tunMtuDownlink")
    def tun_mtu_downlink(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tun_mtu_downlink")

    @property
    @pulumi.getter(name="tunMtuUplink")
    def tun_mtu_uplink(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tun_mtu_uplink")

    @property
    @pulumi.getter(name="unii45ghzBand")
    def unii45ghz_band(self) -> pulumi.Output[str]:
        return pulumi.get(self, "unii45ghz_band")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="wanPortAuth")
    def wan_port_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wan_port_auth")

    @property
    @pulumi.getter(name="wanPortAuthMethods")
    def wan_port_auth_methods(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wan_port_auth_methods")

    @property
    @pulumi.getter(name="wanPortAuthPassword")
    def wan_port_auth_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "wan_port_auth_password")

    @property
    @pulumi.getter(name="wanPortAuthUsrname")
    def wan_port_auth_usrname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wan_port_auth_usrname")

    @property
    @pulumi.getter(name="wanPortMode")
    def wan_port_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wan_port_mode")

