# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IpsGlobalArgs', 'IpsGlobal']

@pulumi.input_type
class IpsGlobalArgs:
    def __init__(__self__, *,
                 anomaly_mode: Optional[pulumi.Input[str]] = None,
                 cp_accel_mode: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 deep_app_insp_db_limit: Optional[pulumi.Input[int]] = None,
                 deep_app_insp_timeout: Optional[pulumi.Input[int]] = None,
                 engine_count: Optional[pulumi.Input[int]] = None,
                 exclude_signatures: Optional[pulumi.Input[str]] = None,
                 fail_open: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 intelligent_mode: Optional[pulumi.Input[str]] = None,
                 ips_reserve_cpu: Optional[pulumi.Input[str]] = None,
                 ngfw_max_scan_range: Optional[pulumi.Input[int]] = None,
                 np_accel_mode: Optional[pulumi.Input[str]] = None,
                 packet_log_queue_depth: Optional[pulumi.Input[int]] = None,
                 session_limit_mode: Optional[pulumi.Input[str]] = None,
                 skype_client_public_ipaddr: Optional[pulumi.Input[str]] = None,
                 socket_size: Optional[pulumi.Input[int]] = None,
                 sync_session_ttl: Optional[pulumi.Input[str]] = None,
                 tls_active_probe: Optional[pulumi.Input['IpsGlobalTlsActiveProbeArgs']] = None,
                 traffic_submit: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IpsGlobal resource.
        """
        if anomaly_mode is not None:
            pulumi.set(__self__, "anomaly_mode", anomaly_mode)
        if cp_accel_mode is not None:
            pulumi.set(__self__, "cp_accel_mode", cp_accel_mode)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if deep_app_insp_db_limit is not None:
            pulumi.set(__self__, "deep_app_insp_db_limit", deep_app_insp_db_limit)
        if deep_app_insp_timeout is not None:
            pulumi.set(__self__, "deep_app_insp_timeout", deep_app_insp_timeout)
        if engine_count is not None:
            pulumi.set(__self__, "engine_count", engine_count)
        if exclude_signatures is not None:
            pulumi.set(__self__, "exclude_signatures", exclude_signatures)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if intelligent_mode is not None:
            pulumi.set(__self__, "intelligent_mode", intelligent_mode)
        if ips_reserve_cpu is not None:
            pulumi.set(__self__, "ips_reserve_cpu", ips_reserve_cpu)
        if ngfw_max_scan_range is not None:
            pulumi.set(__self__, "ngfw_max_scan_range", ngfw_max_scan_range)
        if np_accel_mode is not None:
            pulumi.set(__self__, "np_accel_mode", np_accel_mode)
        if packet_log_queue_depth is not None:
            pulumi.set(__self__, "packet_log_queue_depth", packet_log_queue_depth)
        if session_limit_mode is not None:
            pulumi.set(__self__, "session_limit_mode", session_limit_mode)
        if skype_client_public_ipaddr is not None:
            pulumi.set(__self__, "skype_client_public_ipaddr", skype_client_public_ipaddr)
        if socket_size is not None:
            pulumi.set(__self__, "socket_size", socket_size)
        if sync_session_ttl is not None:
            pulumi.set(__self__, "sync_session_ttl", sync_session_ttl)
        if tls_active_probe is not None:
            pulumi.set(__self__, "tls_active_probe", tls_active_probe)
        if traffic_submit is not None:
            pulumi.set(__self__, "traffic_submit", traffic_submit)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="anomalyMode")
    def anomaly_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anomaly_mode")

    @anomaly_mode.setter
    def anomaly_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anomaly_mode", value)

    @property
    @pulumi.getter(name="cpAccelMode")
    def cp_accel_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cp_accel_mode")

    @cp_accel_mode.setter
    def cp_accel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cp_accel_mode", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="deepAppInspDbLimit")
    def deep_app_insp_db_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "deep_app_insp_db_limit")

    @deep_app_insp_db_limit.setter
    def deep_app_insp_db_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deep_app_insp_db_limit", value)

    @property
    @pulumi.getter(name="deepAppInspTimeout")
    def deep_app_insp_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "deep_app_insp_timeout")

    @deep_app_insp_timeout.setter
    def deep_app_insp_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deep_app_insp_timeout", value)

    @property
    @pulumi.getter(name="engineCount")
    def engine_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "engine_count")

    @engine_count.setter
    def engine_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "engine_count", value)

    @property
    @pulumi.getter(name="excludeSignatures")
    def exclude_signatures(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_signatures")

    @exclude_signatures.setter
    def exclude_signatures(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_signatures", value)

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fail_open")

    @fail_open.setter
    def fail_open(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_open", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="intelligentMode")
    def intelligent_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "intelligent_mode")

    @intelligent_mode.setter
    def intelligent_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intelligent_mode", value)

    @property
    @pulumi.getter(name="ipsReserveCpu")
    def ips_reserve_cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_reserve_cpu")

    @ips_reserve_cpu.setter
    def ips_reserve_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_reserve_cpu", value)

    @property
    @pulumi.getter(name="ngfwMaxScanRange")
    def ngfw_max_scan_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ngfw_max_scan_range")

    @ngfw_max_scan_range.setter
    def ngfw_max_scan_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ngfw_max_scan_range", value)

    @property
    @pulumi.getter(name="npAccelMode")
    def np_accel_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "np_accel_mode")

    @np_accel_mode.setter
    def np_accel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "np_accel_mode", value)

    @property
    @pulumi.getter(name="packetLogQueueDepth")
    def packet_log_queue_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "packet_log_queue_depth")

    @packet_log_queue_depth.setter
    def packet_log_queue_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_log_queue_depth", value)

    @property
    @pulumi.getter(name="sessionLimitMode")
    def session_limit_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_limit_mode")

    @session_limit_mode.setter
    def session_limit_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_limit_mode", value)

    @property
    @pulumi.getter(name="skypeClientPublicIpaddr")
    def skype_client_public_ipaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skype_client_public_ipaddr")

    @skype_client_public_ipaddr.setter
    def skype_client_public_ipaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skype_client_public_ipaddr", value)

    @property
    @pulumi.getter(name="socketSize")
    def socket_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "socket_size")

    @socket_size.setter
    def socket_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "socket_size", value)

    @property
    @pulumi.getter(name="syncSessionTtl")
    def sync_session_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_session_ttl")

    @sync_session_ttl.setter
    def sync_session_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_session_ttl", value)

    @property
    @pulumi.getter(name="tlsActiveProbe")
    def tls_active_probe(self) -> Optional[pulumi.Input['IpsGlobalTlsActiveProbeArgs']]:
        return pulumi.get(self, "tls_active_probe")

    @tls_active_probe.setter
    def tls_active_probe(self, value: Optional[pulumi.Input['IpsGlobalTlsActiveProbeArgs']]):
        pulumi.set(self, "tls_active_probe", value)

    @property
    @pulumi.getter(name="trafficSubmit")
    def traffic_submit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_submit")

    @traffic_submit.setter
    def traffic_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_submit", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _IpsGlobalState:
    def __init__(__self__, *,
                 anomaly_mode: Optional[pulumi.Input[str]] = None,
                 cp_accel_mode: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 deep_app_insp_db_limit: Optional[pulumi.Input[int]] = None,
                 deep_app_insp_timeout: Optional[pulumi.Input[int]] = None,
                 engine_count: Optional[pulumi.Input[int]] = None,
                 exclude_signatures: Optional[pulumi.Input[str]] = None,
                 fail_open: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 intelligent_mode: Optional[pulumi.Input[str]] = None,
                 ips_reserve_cpu: Optional[pulumi.Input[str]] = None,
                 ngfw_max_scan_range: Optional[pulumi.Input[int]] = None,
                 np_accel_mode: Optional[pulumi.Input[str]] = None,
                 packet_log_queue_depth: Optional[pulumi.Input[int]] = None,
                 session_limit_mode: Optional[pulumi.Input[str]] = None,
                 skype_client_public_ipaddr: Optional[pulumi.Input[str]] = None,
                 socket_size: Optional[pulumi.Input[int]] = None,
                 sync_session_ttl: Optional[pulumi.Input[str]] = None,
                 tls_active_probe: Optional[pulumi.Input['IpsGlobalTlsActiveProbeArgs']] = None,
                 traffic_submit: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IpsGlobal resources.
        """
        if anomaly_mode is not None:
            pulumi.set(__self__, "anomaly_mode", anomaly_mode)
        if cp_accel_mode is not None:
            pulumi.set(__self__, "cp_accel_mode", cp_accel_mode)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if deep_app_insp_db_limit is not None:
            pulumi.set(__self__, "deep_app_insp_db_limit", deep_app_insp_db_limit)
        if deep_app_insp_timeout is not None:
            pulumi.set(__self__, "deep_app_insp_timeout", deep_app_insp_timeout)
        if engine_count is not None:
            pulumi.set(__self__, "engine_count", engine_count)
        if exclude_signatures is not None:
            pulumi.set(__self__, "exclude_signatures", exclude_signatures)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if intelligent_mode is not None:
            pulumi.set(__self__, "intelligent_mode", intelligent_mode)
        if ips_reserve_cpu is not None:
            pulumi.set(__self__, "ips_reserve_cpu", ips_reserve_cpu)
        if ngfw_max_scan_range is not None:
            pulumi.set(__self__, "ngfw_max_scan_range", ngfw_max_scan_range)
        if np_accel_mode is not None:
            pulumi.set(__self__, "np_accel_mode", np_accel_mode)
        if packet_log_queue_depth is not None:
            pulumi.set(__self__, "packet_log_queue_depth", packet_log_queue_depth)
        if session_limit_mode is not None:
            pulumi.set(__self__, "session_limit_mode", session_limit_mode)
        if skype_client_public_ipaddr is not None:
            pulumi.set(__self__, "skype_client_public_ipaddr", skype_client_public_ipaddr)
        if socket_size is not None:
            pulumi.set(__self__, "socket_size", socket_size)
        if sync_session_ttl is not None:
            pulumi.set(__self__, "sync_session_ttl", sync_session_ttl)
        if tls_active_probe is not None:
            pulumi.set(__self__, "tls_active_probe", tls_active_probe)
        if traffic_submit is not None:
            pulumi.set(__self__, "traffic_submit", traffic_submit)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="anomalyMode")
    def anomaly_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anomaly_mode")

    @anomaly_mode.setter
    def anomaly_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anomaly_mode", value)

    @property
    @pulumi.getter(name="cpAccelMode")
    def cp_accel_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cp_accel_mode")

    @cp_accel_mode.setter
    def cp_accel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cp_accel_mode", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="deepAppInspDbLimit")
    def deep_app_insp_db_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "deep_app_insp_db_limit")

    @deep_app_insp_db_limit.setter
    def deep_app_insp_db_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deep_app_insp_db_limit", value)

    @property
    @pulumi.getter(name="deepAppInspTimeout")
    def deep_app_insp_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "deep_app_insp_timeout")

    @deep_app_insp_timeout.setter
    def deep_app_insp_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deep_app_insp_timeout", value)

    @property
    @pulumi.getter(name="engineCount")
    def engine_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "engine_count")

    @engine_count.setter
    def engine_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "engine_count", value)

    @property
    @pulumi.getter(name="excludeSignatures")
    def exclude_signatures(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_signatures")

    @exclude_signatures.setter
    def exclude_signatures(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_signatures", value)

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fail_open")

    @fail_open.setter
    def fail_open(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_open", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="intelligentMode")
    def intelligent_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "intelligent_mode")

    @intelligent_mode.setter
    def intelligent_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intelligent_mode", value)

    @property
    @pulumi.getter(name="ipsReserveCpu")
    def ips_reserve_cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_reserve_cpu")

    @ips_reserve_cpu.setter
    def ips_reserve_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_reserve_cpu", value)

    @property
    @pulumi.getter(name="ngfwMaxScanRange")
    def ngfw_max_scan_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ngfw_max_scan_range")

    @ngfw_max_scan_range.setter
    def ngfw_max_scan_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ngfw_max_scan_range", value)

    @property
    @pulumi.getter(name="npAccelMode")
    def np_accel_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "np_accel_mode")

    @np_accel_mode.setter
    def np_accel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "np_accel_mode", value)

    @property
    @pulumi.getter(name="packetLogQueueDepth")
    def packet_log_queue_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "packet_log_queue_depth")

    @packet_log_queue_depth.setter
    def packet_log_queue_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_log_queue_depth", value)

    @property
    @pulumi.getter(name="sessionLimitMode")
    def session_limit_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_limit_mode")

    @session_limit_mode.setter
    def session_limit_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_limit_mode", value)

    @property
    @pulumi.getter(name="skypeClientPublicIpaddr")
    def skype_client_public_ipaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skype_client_public_ipaddr")

    @skype_client_public_ipaddr.setter
    def skype_client_public_ipaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skype_client_public_ipaddr", value)

    @property
    @pulumi.getter(name="socketSize")
    def socket_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "socket_size")

    @socket_size.setter
    def socket_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "socket_size", value)

    @property
    @pulumi.getter(name="syncSessionTtl")
    def sync_session_ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_session_ttl")

    @sync_session_ttl.setter
    def sync_session_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_session_ttl", value)

    @property
    @pulumi.getter(name="tlsActiveProbe")
    def tls_active_probe(self) -> Optional[pulumi.Input['IpsGlobalTlsActiveProbeArgs']]:
        return pulumi.get(self, "tls_active_probe")

    @tls_active_probe.setter
    def tls_active_probe(self, value: Optional[pulumi.Input['IpsGlobalTlsActiveProbeArgs']]):
        pulumi.set(self, "tls_active_probe", value)

    @property
    @pulumi.getter(name="trafficSubmit")
    def traffic_submit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_submit")

    @traffic_submit.setter
    def traffic_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_submit", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class IpsGlobal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anomaly_mode: Optional[pulumi.Input[str]] = None,
                 cp_accel_mode: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 deep_app_insp_db_limit: Optional[pulumi.Input[int]] = None,
                 deep_app_insp_timeout: Optional[pulumi.Input[int]] = None,
                 engine_count: Optional[pulumi.Input[int]] = None,
                 exclude_signatures: Optional[pulumi.Input[str]] = None,
                 fail_open: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 intelligent_mode: Optional[pulumi.Input[str]] = None,
                 ips_reserve_cpu: Optional[pulumi.Input[str]] = None,
                 ngfw_max_scan_range: Optional[pulumi.Input[int]] = None,
                 np_accel_mode: Optional[pulumi.Input[str]] = None,
                 packet_log_queue_depth: Optional[pulumi.Input[int]] = None,
                 session_limit_mode: Optional[pulumi.Input[str]] = None,
                 skype_client_public_ipaddr: Optional[pulumi.Input[str]] = None,
                 socket_size: Optional[pulumi.Input[int]] = None,
                 sync_session_ttl: Optional[pulumi.Input[str]] = None,
                 tls_active_probe: Optional[pulumi.Input[pulumi.InputType['IpsGlobalTlsActiveProbeArgs']]] = None,
                 traffic_submit: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a IpsGlobal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IpsGlobalArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IpsGlobal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IpsGlobalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpsGlobalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anomaly_mode: Optional[pulumi.Input[str]] = None,
                 cp_accel_mode: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 deep_app_insp_db_limit: Optional[pulumi.Input[int]] = None,
                 deep_app_insp_timeout: Optional[pulumi.Input[int]] = None,
                 engine_count: Optional[pulumi.Input[int]] = None,
                 exclude_signatures: Optional[pulumi.Input[str]] = None,
                 fail_open: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 intelligent_mode: Optional[pulumi.Input[str]] = None,
                 ips_reserve_cpu: Optional[pulumi.Input[str]] = None,
                 ngfw_max_scan_range: Optional[pulumi.Input[int]] = None,
                 np_accel_mode: Optional[pulumi.Input[str]] = None,
                 packet_log_queue_depth: Optional[pulumi.Input[int]] = None,
                 session_limit_mode: Optional[pulumi.Input[str]] = None,
                 skype_client_public_ipaddr: Optional[pulumi.Input[str]] = None,
                 socket_size: Optional[pulumi.Input[int]] = None,
                 sync_session_ttl: Optional[pulumi.Input[str]] = None,
                 tls_active_probe: Optional[pulumi.Input[pulumi.InputType['IpsGlobalTlsActiveProbeArgs']]] = None,
                 traffic_submit: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpsGlobalArgs.__new__(IpsGlobalArgs)

            __props__.__dict__["anomaly_mode"] = anomaly_mode
            __props__.__dict__["cp_accel_mode"] = cp_accel_mode
            __props__.__dict__["database"] = database
            __props__.__dict__["deep_app_insp_db_limit"] = deep_app_insp_db_limit
            __props__.__dict__["deep_app_insp_timeout"] = deep_app_insp_timeout
            __props__.__dict__["engine_count"] = engine_count
            __props__.__dict__["exclude_signatures"] = exclude_signatures
            __props__.__dict__["fail_open"] = fail_open
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["intelligent_mode"] = intelligent_mode
            __props__.__dict__["ips_reserve_cpu"] = ips_reserve_cpu
            __props__.__dict__["ngfw_max_scan_range"] = ngfw_max_scan_range
            __props__.__dict__["np_accel_mode"] = np_accel_mode
            __props__.__dict__["packet_log_queue_depth"] = packet_log_queue_depth
            __props__.__dict__["session_limit_mode"] = session_limit_mode
            __props__.__dict__["skype_client_public_ipaddr"] = skype_client_public_ipaddr
            __props__.__dict__["socket_size"] = socket_size
            __props__.__dict__["sync_session_ttl"] = sync_session_ttl
            __props__.__dict__["tls_active_probe"] = tls_active_probe
            __props__.__dict__["traffic_submit"] = traffic_submit
            __props__.__dict__["vdomparam"] = vdomparam
        super(IpsGlobal, __self__).__init__(
            'fortios:index/ipsGlobal:IpsGlobal',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anomaly_mode: Optional[pulumi.Input[str]] = None,
            cp_accel_mode: Optional[pulumi.Input[str]] = None,
            database: Optional[pulumi.Input[str]] = None,
            deep_app_insp_db_limit: Optional[pulumi.Input[int]] = None,
            deep_app_insp_timeout: Optional[pulumi.Input[int]] = None,
            engine_count: Optional[pulumi.Input[int]] = None,
            exclude_signatures: Optional[pulumi.Input[str]] = None,
            fail_open: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            intelligent_mode: Optional[pulumi.Input[str]] = None,
            ips_reserve_cpu: Optional[pulumi.Input[str]] = None,
            ngfw_max_scan_range: Optional[pulumi.Input[int]] = None,
            np_accel_mode: Optional[pulumi.Input[str]] = None,
            packet_log_queue_depth: Optional[pulumi.Input[int]] = None,
            session_limit_mode: Optional[pulumi.Input[str]] = None,
            skype_client_public_ipaddr: Optional[pulumi.Input[str]] = None,
            socket_size: Optional[pulumi.Input[int]] = None,
            sync_session_ttl: Optional[pulumi.Input[str]] = None,
            tls_active_probe: Optional[pulumi.Input[pulumi.InputType['IpsGlobalTlsActiveProbeArgs']]] = None,
            traffic_submit: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'IpsGlobal':
        """
        Get an existing IpsGlobal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpsGlobalState.__new__(_IpsGlobalState)

        __props__.__dict__["anomaly_mode"] = anomaly_mode
        __props__.__dict__["cp_accel_mode"] = cp_accel_mode
        __props__.__dict__["database"] = database
        __props__.__dict__["deep_app_insp_db_limit"] = deep_app_insp_db_limit
        __props__.__dict__["deep_app_insp_timeout"] = deep_app_insp_timeout
        __props__.__dict__["engine_count"] = engine_count
        __props__.__dict__["exclude_signatures"] = exclude_signatures
        __props__.__dict__["fail_open"] = fail_open
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["intelligent_mode"] = intelligent_mode
        __props__.__dict__["ips_reserve_cpu"] = ips_reserve_cpu
        __props__.__dict__["ngfw_max_scan_range"] = ngfw_max_scan_range
        __props__.__dict__["np_accel_mode"] = np_accel_mode
        __props__.__dict__["packet_log_queue_depth"] = packet_log_queue_depth
        __props__.__dict__["session_limit_mode"] = session_limit_mode
        __props__.__dict__["skype_client_public_ipaddr"] = skype_client_public_ipaddr
        __props__.__dict__["socket_size"] = socket_size
        __props__.__dict__["sync_session_ttl"] = sync_session_ttl
        __props__.__dict__["tls_active_probe"] = tls_active_probe
        __props__.__dict__["traffic_submit"] = traffic_submit
        __props__.__dict__["vdomparam"] = vdomparam
        return IpsGlobal(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="anomalyMode")
    def anomaly_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "anomaly_mode")

    @property
    @pulumi.getter(name="cpAccelMode")
    def cp_accel_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cp_accel_mode")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="deepAppInspDbLimit")
    def deep_app_insp_db_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "deep_app_insp_db_limit")

    @property
    @pulumi.getter(name="deepAppInspTimeout")
    def deep_app_insp_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "deep_app_insp_timeout")

    @property
    @pulumi.getter(name="engineCount")
    def engine_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "engine_count")

    @property
    @pulumi.getter(name="excludeSignatures")
    def exclude_signatures(self) -> pulumi.Output[str]:
        return pulumi.get(self, "exclude_signatures")

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fail_open")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="intelligentMode")
    def intelligent_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "intelligent_mode")

    @property
    @pulumi.getter(name="ipsReserveCpu")
    def ips_reserve_cpu(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ips_reserve_cpu")

    @property
    @pulumi.getter(name="ngfwMaxScanRange")
    def ngfw_max_scan_range(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ngfw_max_scan_range")

    @property
    @pulumi.getter(name="npAccelMode")
    def np_accel_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "np_accel_mode")

    @property
    @pulumi.getter(name="packetLogQueueDepth")
    def packet_log_queue_depth(self) -> pulumi.Output[int]:
        return pulumi.get(self, "packet_log_queue_depth")

    @property
    @pulumi.getter(name="sessionLimitMode")
    def session_limit_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "session_limit_mode")

    @property
    @pulumi.getter(name="skypeClientPublicIpaddr")
    def skype_client_public_ipaddr(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "skype_client_public_ipaddr")

    @property
    @pulumi.getter(name="socketSize")
    def socket_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "socket_size")

    @property
    @pulumi.getter(name="syncSessionTtl")
    def sync_session_ttl(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sync_session_ttl")

    @property
    @pulumi.getter(name="tlsActiveProbe")
    def tls_active_probe(self) -> pulumi.Output['outputs.IpsGlobalTlsActiveProbe']:
        return pulumi.get(self, "tls_active_probe")

    @property
    @pulumi.getter(name="trafficSubmit")
    def traffic_submit(self) -> pulumi.Output[str]:
        return pulumi.get(self, "traffic_submit")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

