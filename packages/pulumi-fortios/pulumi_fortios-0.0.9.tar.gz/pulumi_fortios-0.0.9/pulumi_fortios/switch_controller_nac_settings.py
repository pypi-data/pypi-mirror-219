# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerNacSettingsArgs', 'SwitchControllerNacSettings']

@pulumi.input_type
class SwitchControllerNacSettingsArgs:
    def __init__(__self__, *,
                 auto_auth: Optional[pulumi.Input[str]] = None,
                 bounce_nac_port: Optional[pulumi.Input[str]] = None,
                 inactive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_flush: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 onboarding_vlan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerNacSettings resource.
        """
        if auto_auth is not None:
            pulumi.set(__self__, "auto_auth", auto_auth)
        if bounce_nac_port is not None:
            pulumi.set(__self__, "bounce_nac_port", bounce_nac_port)
        if inactive_timer is not None:
            pulumi.set(__self__, "inactive_timer", inactive_timer)
        if link_down_flush is not None:
            pulumi.set(__self__, "link_down_flush", link_down_flush)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if onboarding_vlan is not None:
            pulumi.set(__self__, "onboarding_vlan", onboarding_vlan)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoAuth")
    def auto_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_auth")

    @auto_auth.setter
    def auto_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_auth", value)

    @property
    @pulumi.getter(name="bounceNacPort")
    def bounce_nac_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bounce_nac_port")

    @bounce_nac_port.setter
    def bounce_nac_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_nac_port", value)

    @property
    @pulumi.getter(name="inactiveTimer")
    def inactive_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "inactive_timer")

    @inactive_timer.setter
    def inactive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactive_timer", value)

    @property
    @pulumi.getter(name="linkDownFlush")
    def link_down_flush(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_down_flush")

    @link_down_flush.setter
    def link_down_flush(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_flush", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onboardingVlan")
    def onboarding_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "onboarding_vlan")

    @onboarding_vlan.setter
    def onboarding_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onboarding_vlan", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchControllerNacSettingsState:
    def __init__(__self__, *,
                 auto_auth: Optional[pulumi.Input[str]] = None,
                 bounce_nac_port: Optional[pulumi.Input[str]] = None,
                 inactive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_flush: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 onboarding_vlan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerNacSettings resources.
        """
        if auto_auth is not None:
            pulumi.set(__self__, "auto_auth", auto_auth)
        if bounce_nac_port is not None:
            pulumi.set(__self__, "bounce_nac_port", bounce_nac_port)
        if inactive_timer is not None:
            pulumi.set(__self__, "inactive_timer", inactive_timer)
        if link_down_flush is not None:
            pulumi.set(__self__, "link_down_flush", link_down_flush)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if onboarding_vlan is not None:
            pulumi.set(__self__, "onboarding_vlan", onboarding_vlan)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoAuth")
    def auto_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_auth")

    @auto_auth.setter
    def auto_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_auth", value)

    @property
    @pulumi.getter(name="bounceNacPort")
    def bounce_nac_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bounce_nac_port")

    @bounce_nac_port.setter
    def bounce_nac_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_nac_port", value)

    @property
    @pulumi.getter(name="inactiveTimer")
    def inactive_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "inactive_timer")

    @inactive_timer.setter
    def inactive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactive_timer", value)

    @property
    @pulumi.getter(name="linkDownFlush")
    def link_down_flush(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_down_flush")

    @link_down_flush.setter
    def link_down_flush(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_flush", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onboardingVlan")
    def onboarding_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "onboarding_vlan")

    @onboarding_vlan.setter
    def onboarding_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onboarding_vlan", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchControllerNacSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_auth: Optional[pulumi.Input[str]] = None,
                 bounce_nac_port: Optional[pulumi.Input[str]] = None,
                 inactive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_flush: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 onboarding_vlan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerNacSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerNacSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerNacSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerNacSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerNacSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_auth: Optional[pulumi.Input[str]] = None,
                 bounce_nac_port: Optional[pulumi.Input[str]] = None,
                 inactive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_flush: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 onboarding_vlan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerNacSettingsArgs.__new__(SwitchControllerNacSettingsArgs)

            __props__.__dict__["auto_auth"] = auto_auth
            __props__.__dict__["bounce_nac_port"] = bounce_nac_port
            __props__.__dict__["inactive_timer"] = inactive_timer
            __props__.__dict__["link_down_flush"] = link_down_flush
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["onboarding_vlan"] = onboarding_vlan
            __props__.__dict__["vdomparam"] = vdomparam
        super(SwitchControllerNacSettings, __self__).__init__(
            'fortios:index/switchControllerNacSettings:SwitchControllerNacSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_auth: Optional[pulumi.Input[str]] = None,
            bounce_nac_port: Optional[pulumi.Input[str]] = None,
            inactive_timer: Optional[pulumi.Input[int]] = None,
            link_down_flush: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            onboarding_vlan: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerNacSettings':
        """
        Get an existing SwitchControllerNacSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerNacSettingsState.__new__(_SwitchControllerNacSettingsState)

        __props__.__dict__["auto_auth"] = auto_auth
        __props__.__dict__["bounce_nac_port"] = bounce_nac_port
        __props__.__dict__["inactive_timer"] = inactive_timer
        __props__.__dict__["link_down_flush"] = link_down_flush
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["onboarding_vlan"] = onboarding_vlan
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchControllerNacSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoAuth")
    def auto_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_auth")

    @property
    @pulumi.getter(name="bounceNacPort")
    def bounce_nac_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bounce_nac_port")

    @property
    @pulumi.getter(name="inactiveTimer")
    def inactive_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "inactive_timer")

    @property
    @pulumi.getter(name="linkDownFlush")
    def link_down_flush(self) -> pulumi.Output[str]:
        return pulumi.get(self, "link_down_flush")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onboardingVlan")
    def onboarding_vlan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "onboarding_vlan")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

