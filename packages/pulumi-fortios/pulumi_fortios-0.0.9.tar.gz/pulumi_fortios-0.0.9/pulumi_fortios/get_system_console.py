# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSystemConsoleResult',
    'AwaitableGetSystemConsoleResult',
    'get_system_console',
    'get_system_console_output',
]

@pulumi.output_type
class GetSystemConsoleResult:
    """
    A collection of values returned by GetSystemConsole.
    """
    def __init__(__self__, baudrate=None, fortiexplorer=None, id=None, login=None, mode=None, output=None, vdomparam=None):
        if baudrate and not isinstance(baudrate, str):
            raise TypeError("Expected argument 'baudrate' to be a str")
        pulumi.set(__self__, "baudrate", baudrate)
        if fortiexplorer and not isinstance(fortiexplorer, str):
            raise TypeError("Expected argument 'fortiexplorer' to be a str")
        pulumi.set(__self__, "fortiexplorer", fortiexplorer)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if login and not isinstance(login, str):
            raise TypeError("Expected argument 'login' to be a str")
        pulumi.set(__self__, "login", login)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if output and not isinstance(output, str):
            raise TypeError("Expected argument 'output' to be a str")
        pulumi.set(__self__, "output", output)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def baudrate(self) -> str:
        return pulumi.get(self, "baudrate")

    @property
    @pulumi.getter
    def fortiexplorer(self) -> str:
        return pulumi.get(self, "fortiexplorer")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def login(self) -> str:
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def output(self) -> str:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetSystemConsoleResult(GetSystemConsoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemConsoleResult(
            baudrate=self.baudrate,
            fortiexplorer=self.fortiexplorer,
            id=self.id,
            login=self.login,
            mode=self.mode,
            output=self.output,
            vdomparam=self.vdomparam)


def get_system_console(vdomparam: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemConsoleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemConsole:GetSystemConsole', __args__, opts=opts, typ=GetSystemConsoleResult).value

    return AwaitableGetSystemConsoleResult(
        baudrate=pulumi.get(__ret__, 'baudrate'),
        fortiexplorer=pulumi.get(__ret__, 'fortiexplorer'),
        id=pulumi.get(__ret__, 'id'),
        login=pulumi.get(__ret__, 'login'),
        mode=pulumi.get(__ret__, 'mode'),
        output=pulumi.get(__ret__, 'output'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_system_console)
def get_system_console_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemConsoleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
