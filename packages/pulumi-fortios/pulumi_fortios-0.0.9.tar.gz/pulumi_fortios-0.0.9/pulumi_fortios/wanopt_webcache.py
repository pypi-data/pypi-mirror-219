# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WanoptWebcacheArgs', 'WanoptWebcache']

@pulumi.input_type
class WanoptWebcacheArgs:
    def __init__(__self__, *,
                 always_revalidate: Optional[pulumi.Input[str]] = None,
                 cache_by_default: Optional[pulumi.Input[str]] = None,
                 cache_cookie: Optional[pulumi.Input[str]] = None,
                 cache_expired: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 fresh_factor: Optional[pulumi.Input[int]] = None,
                 host_validate: Optional[pulumi.Input[str]] = None,
                 ignore_conditional: Optional[pulumi.Input[str]] = None,
                 ignore_ie_reload: Optional[pulumi.Input[str]] = None,
                 ignore_ims: Optional[pulumi.Input[str]] = None,
                 ignore_pnc: Optional[pulumi.Input[str]] = None,
                 max_object_size: Optional[pulumi.Input[int]] = None,
                 max_ttl: Optional[pulumi.Input[int]] = None,
                 min_ttl: Optional[pulumi.Input[int]] = None,
                 neg_resp_time: Optional[pulumi.Input[int]] = None,
                 reval_pnc: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WanoptWebcache resource.
        """
        if always_revalidate is not None:
            pulumi.set(__self__, "always_revalidate", always_revalidate)
        if cache_by_default is not None:
            pulumi.set(__self__, "cache_by_default", cache_by_default)
        if cache_cookie is not None:
            pulumi.set(__self__, "cache_cookie", cache_cookie)
        if cache_expired is not None:
            pulumi.set(__self__, "cache_expired", cache_expired)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if fresh_factor is not None:
            pulumi.set(__self__, "fresh_factor", fresh_factor)
        if host_validate is not None:
            pulumi.set(__self__, "host_validate", host_validate)
        if ignore_conditional is not None:
            pulumi.set(__self__, "ignore_conditional", ignore_conditional)
        if ignore_ie_reload is not None:
            pulumi.set(__self__, "ignore_ie_reload", ignore_ie_reload)
        if ignore_ims is not None:
            pulumi.set(__self__, "ignore_ims", ignore_ims)
        if ignore_pnc is not None:
            pulumi.set(__self__, "ignore_pnc", ignore_pnc)
        if max_object_size is not None:
            pulumi.set(__self__, "max_object_size", max_object_size)
        if max_ttl is not None:
            pulumi.set(__self__, "max_ttl", max_ttl)
        if min_ttl is not None:
            pulumi.set(__self__, "min_ttl", min_ttl)
        if neg_resp_time is not None:
            pulumi.set(__self__, "neg_resp_time", neg_resp_time)
        if reval_pnc is not None:
            pulumi.set(__self__, "reval_pnc", reval_pnc)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="alwaysRevalidate")
    def always_revalidate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "always_revalidate")

    @always_revalidate.setter
    def always_revalidate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "always_revalidate", value)

    @property
    @pulumi.getter(name="cacheByDefault")
    def cache_by_default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_by_default")

    @cache_by_default.setter
    def cache_by_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_by_default", value)

    @property
    @pulumi.getter(name="cacheCookie")
    def cache_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_cookie")

    @cache_cookie.setter
    def cache_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_cookie", value)

    @property
    @pulumi.getter(name="cacheExpired")
    def cache_expired(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_expired")

    @cache_expired.setter
    def cache_expired(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_expired", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="freshFactor")
    def fresh_factor(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fresh_factor")

    @fresh_factor.setter
    def fresh_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fresh_factor", value)

    @property
    @pulumi.getter(name="hostValidate")
    def host_validate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_validate")

    @host_validate.setter
    def host_validate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_validate", value)

    @property
    @pulumi.getter(name="ignoreConditional")
    def ignore_conditional(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_conditional")

    @ignore_conditional.setter
    def ignore_conditional(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_conditional", value)

    @property
    @pulumi.getter(name="ignoreIeReload")
    def ignore_ie_reload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_ie_reload")

    @ignore_ie_reload.setter
    def ignore_ie_reload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_ie_reload", value)

    @property
    @pulumi.getter(name="ignoreIms")
    def ignore_ims(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_ims")

    @ignore_ims.setter
    def ignore_ims(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_ims", value)

    @property
    @pulumi.getter(name="ignorePnc")
    def ignore_pnc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_pnc")

    @ignore_pnc.setter
    def ignore_pnc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_pnc", value)

    @property
    @pulumi.getter(name="maxObjectSize")
    def max_object_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_object_size")

    @max_object_size.setter
    def max_object_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_object_size", value)

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_ttl")

    @max_ttl.setter
    def max_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ttl", value)

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_ttl")

    @min_ttl.setter
    def min_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ttl", value)

    @property
    @pulumi.getter(name="negRespTime")
    def neg_resp_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "neg_resp_time")

    @neg_resp_time.setter
    def neg_resp_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neg_resp_time", value)

    @property
    @pulumi.getter(name="revalPnc")
    def reval_pnc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reval_pnc")

    @reval_pnc.setter
    def reval_pnc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reval_pnc", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _WanoptWebcacheState:
    def __init__(__self__, *,
                 always_revalidate: Optional[pulumi.Input[str]] = None,
                 cache_by_default: Optional[pulumi.Input[str]] = None,
                 cache_cookie: Optional[pulumi.Input[str]] = None,
                 cache_expired: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 fresh_factor: Optional[pulumi.Input[int]] = None,
                 host_validate: Optional[pulumi.Input[str]] = None,
                 ignore_conditional: Optional[pulumi.Input[str]] = None,
                 ignore_ie_reload: Optional[pulumi.Input[str]] = None,
                 ignore_ims: Optional[pulumi.Input[str]] = None,
                 ignore_pnc: Optional[pulumi.Input[str]] = None,
                 max_object_size: Optional[pulumi.Input[int]] = None,
                 max_ttl: Optional[pulumi.Input[int]] = None,
                 min_ttl: Optional[pulumi.Input[int]] = None,
                 neg_resp_time: Optional[pulumi.Input[int]] = None,
                 reval_pnc: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WanoptWebcache resources.
        """
        if always_revalidate is not None:
            pulumi.set(__self__, "always_revalidate", always_revalidate)
        if cache_by_default is not None:
            pulumi.set(__self__, "cache_by_default", cache_by_default)
        if cache_cookie is not None:
            pulumi.set(__self__, "cache_cookie", cache_cookie)
        if cache_expired is not None:
            pulumi.set(__self__, "cache_expired", cache_expired)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if fresh_factor is not None:
            pulumi.set(__self__, "fresh_factor", fresh_factor)
        if host_validate is not None:
            pulumi.set(__self__, "host_validate", host_validate)
        if ignore_conditional is not None:
            pulumi.set(__self__, "ignore_conditional", ignore_conditional)
        if ignore_ie_reload is not None:
            pulumi.set(__self__, "ignore_ie_reload", ignore_ie_reload)
        if ignore_ims is not None:
            pulumi.set(__self__, "ignore_ims", ignore_ims)
        if ignore_pnc is not None:
            pulumi.set(__self__, "ignore_pnc", ignore_pnc)
        if max_object_size is not None:
            pulumi.set(__self__, "max_object_size", max_object_size)
        if max_ttl is not None:
            pulumi.set(__self__, "max_ttl", max_ttl)
        if min_ttl is not None:
            pulumi.set(__self__, "min_ttl", min_ttl)
        if neg_resp_time is not None:
            pulumi.set(__self__, "neg_resp_time", neg_resp_time)
        if reval_pnc is not None:
            pulumi.set(__self__, "reval_pnc", reval_pnc)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="alwaysRevalidate")
    def always_revalidate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "always_revalidate")

    @always_revalidate.setter
    def always_revalidate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "always_revalidate", value)

    @property
    @pulumi.getter(name="cacheByDefault")
    def cache_by_default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_by_default")

    @cache_by_default.setter
    def cache_by_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_by_default", value)

    @property
    @pulumi.getter(name="cacheCookie")
    def cache_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_cookie")

    @cache_cookie.setter
    def cache_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_cookie", value)

    @property
    @pulumi.getter(name="cacheExpired")
    def cache_expired(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_expired")

    @cache_expired.setter
    def cache_expired(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_expired", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="freshFactor")
    def fresh_factor(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fresh_factor")

    @fresh_factor.setter
    def fresh_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fresh_factor", value)

    @property
    @pulumi.getter(name="hostValidate")
    def host_validate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_validate")

    @host_validate.setter
    def host_validate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_validate", value)

    @property
    @pulumi.getter(name="ignoreConditional")
    def ignore_conditional(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_conditional")

    @ignore_conditional.setter
    def ignore_conditional(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_conditional", value)

    @property
    @pulumi.getter(name="ignoreIeReload")
    def ignore_ie_reload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_ie_reload")

    @ignore_ie_reload.setter
    def ignore_ie_reload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_ie_reload", value)

    @property
    @pulumi.getter(name="ignoreIms")
    def ignore_ims(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_ims")

    @ignore_ims.setter
    def ignore_ims(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_ims", value)

    @property
    @pulumi.getter(name="ignorePnc")
    def ignore_pnc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_pnc")

    @ignore_pnc.setter
    def ignore_pnc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_pnc", value)

    @property
    @pulumi.getter(name="maxObjectSize")
    def max_object_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_object_size")

    @max_object_size.setter
    def max_object_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_object_size", value)

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_ttl")

    @max_ttl.setter
    def max_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ttl", value)

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_ttl")

    @min_ttl.setter
    def min_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ttl", value)

    @property
    @pulumi.getter(name="negRespTime")
    def neg_resp_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "neg_resp_time")

    @neg_resp_time.setter
    def neg_resp_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neg_resp_time", value)

    @property
    @pulumi.getter(name="revalPnc")
    def reval_pnc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reval_pnc")

    @reval_pnc.setter
    def reval_pnc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reval_pnc", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class WanoptWebcache(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_revalidate: Optional[pulumi.Input[str]] = None,
                 cache_by_default: Optional[pulumi.Input[str]] = None,
                 cache_cookie: Optional[pulumi.Input[str]] = None,
                 cache_expired: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 fresh_factor: Optional[pulumi.Input[int]] = None,
                 host_validate: Optional[pulumi.Input[str]] = None,
                 ignore_conditional: Optional[pulumi.Input[str]] = None,
                 ignore_ie_reload: Optional[pulumi.Input[str]] = None,
                 ignore_ims: Optional[pulumi.Input[str]] = None,
                 ignore_pnc: Optional[pulumi.Input[str]] = None,
                 max_object_size: Optional[pulumi.Input[int]] = None,
                 max_ttl: Optional[pulumi.Input[int]] = None,
                 min_ttl: Optional[pulumi.Input[int]] = None,
                 neg_resp_time: Optional[pulumi.Input[int]] = None,
                 reval_pnc: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WanoptWebcache resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WanoptWebcacheArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WanoptWebcache resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WanoptWebcacheArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WanoptWebcacheArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_revalidate: Optional[pulumi.Input[str]] = None,
                 cache_by_default: Optional[pulumi.Input[str]] = None,
                 cache_cookie: Optional[pulumi.Input[str]] = None,
                 cache_expired: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 fresh_factor: Optional[pulumi.Input[int]] = None,
                 host_validate: Optional[pulumi.Input[str]] = None,
                 ignore_conditional: Optional[pulumi.Input[str]] = None,
                 ignore_ie_reload: Optional[pulumi.Input[str]] = None,
                 ignore_ims: Optional[pulumi.Input[str]] = None,
                 ignore_pnc: Optional[pulumi.Input[str]] = None,
                 max_object_size: Optional[pulumi.Input[int]] = None,
                 max_ttl: Optional[pulumi.Input[int]] = None,
                 min_ttl: Optional[pulumi.Input[int]] = None,
                 neg_resp_time: Optional[pulumi.Input[int]] = None,
                 reval_pnc: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WanoptWebcacheArgs.__new__(WanoptWebcacheArgs)

            __props__.__dict__["always_revalidate"] = always_revalidate
            __props__.__dict__["cache_by_default"] = cache_by_default
            __props__.__dict__["cache_cookie"] = cache_cookie
            __props__.__dict__["cache_expired"] = cache_expired
            __props__.__dict__["default_ttl"] = default_ttl
            __props__.__dict__["external"] = external
            __props__.__dict__["fresh_factor"] = fresh_factor
            __props__.__dict__["host_validate"] = host_validate
            __props__.__dict__["ignore_conditional"] = ignore_conditional
            __props__.__dict__["ignore_ie_reload"] = ignore_ie_reload
            __props__.__dict__["ignore_ims"] = ignore_ims
            __props__.__dict__["ignore_pnc"] = ignore_pnc
            __props__.__dict__["max_object_size"] = max_object_size
            __props__.__dict__["max_ttl"] = max_ttl
            __props__.__dict__["min_ttl"] = min_ttl
            __props__.__dict__["neg_resp_time"] = neg_resp_time
            __props__.__dict__["reval_pnc"] = reval_pnc
            __props__.__dict__["vdomparam"] = vdomparam
        super(WanoptWebcache, __self__).__init__(
            'fortios:index/wanoptWebcache:WanoptWebcache',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            always_revalidate: Optional[pulumi.Input[str]] = None,
            cache_by_default: Optional[pulumi.Input[str]] = None,
            cache_cookie: Optional[pulumi.Input[str]] = None,
            cache_expired: Optional[pulumi.Input[str]] = None,
            default_ttl: Optional[pulumi.Input[int]] = None,
            external: Optional[pulumi.Input[str]] = None,
            fresh_factor: Optional[pulumi.Input[int]] = None,
            host_validate: Optional[pulumi.Input[str]] = None,
            ignore_conditional: Optional[pulumi.Input[str]] = None,
            ignore_ie_reload: Optional[pulumi.Input[str]] = None,
            ignore_ims: Optional[pulumi.Input[str]] = None,
            ignore_pnc: Optional[pulumi.Input[str]] = None,
            max_object_size: Optional[pulumi.Input[int]] = None,
            max_ttl: Optional[pulumi.Input[int]] = None,
            min_ttl: Optional[pulumi.Input[int]] = None,
            neg_resp_time: Optional[pulumi.Input[int]] = None,
            reval_pnc: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'WanoptWebcache':
        """
        Get an existing WanoptWebcache resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WanoptWebcacheState.__new__(_WanoptWebcacheState)

        __props__.__dict__["always_revalidate"] = always_revalidate
        __props__.__dict__["cache_by_default"] = cache_by_default
        __props__.__dict__["cache_cookie"] = cache_cookie
        __props__.__dict__["cache_expired"] = cache_expired
        __props__.__dict__["default_ttl"] = default_ttl
        __props__.__dict__["external"] = external
        __props__.__dict__["fresh_factor"] = fresh_factor
        __props__.__dict__["host_validate"] = host_validate
        __props__.__dict__["ignore_conditional"] = ignore_conditional
        __props__.__dict__["ignore_ie_reload"] = ignore_ie_reload
        __props__.__dict__["ignore_ims"] = ignore_ims
        __props__.__dict__["ignore_pnc"] = ignore_pnc
        __props__.__dict__["max_object_size"] = max_object_size
        __props__.__dict__["max_ttl"] = max_ttl
        __props__.__dict__["min_ttl"] = min_ttl
        __props__.__dict__["neg_resp_time"] = neg_resp_time
        __props__.__dict__["reval_pnc"] = reval_pnc
        __props__.__dict__["vdomparam"] = vdomparam
        return WanoptWebcache(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alwaysRevalidate")
    def always_revalidate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "always_revalidate")

    @property
    @pulumi.getter(name="cacheByDefault")
    def cache_by_default(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_by_default")

    @property
    @pulumi.getter(name="cacheCookie")
    def cache_cookie(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_cookie")

    @property
    @pulumi.getter(name="cacheExpired")
    def cache_expired(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_expired")

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "default_ttl")

    @property
    @pulumi.getter
    def external(self) -> pulumi.Output[str]:
        return pulumi.get(self, "external")

    @property
    @pulumi.getter(name="freshFactor")
    def fresh_factor(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fresh_factor")

    @property
    @pulumi.getter(name="hostValidate")
    def host_validate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "host_validate")

    @property
    @pulumi.getter(name="ignoreConditional")
    def ignore_conditional(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ignore_conditional")

    @property
    @pulumi.getter(name="ignoreIeReload")
    def ignore_ie_reload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ignore_ie_reload")

    @property
    @pulumi.getter(name="ignoreIms")
    def ignore_ims(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ignore_ims")

    @property
    @pulumi.getter(name="ignorePnc")
    def ignore_pnc(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ignore_pnc")

    @property
    @pulumi.getter(name="maxObjectSize")
    def max_object_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_object_size")

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_ttl")

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "min_ttl")

    @property
    @pulumi.getter(name="negRespTime")
    def neg_resp_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "neg_resp_time")

    @property
    @pulumi.getter(name="revalPnc")
    def reval_pnc(self) -> pulumi.Output[str]:
        return pulumi.get(self, "reval_pnc")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

