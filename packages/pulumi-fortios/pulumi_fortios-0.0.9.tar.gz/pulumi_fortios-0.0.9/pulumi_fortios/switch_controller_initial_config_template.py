# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerInitialConfigTemplateArgs', 'SwitchControllerInitialConfigTemplate']

@pulumi.input_type
class SwitchControllerInitialConfigTemplateArgs:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 auto_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_server: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SwitchControllerInitialConfigTemplate resource.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if auto_ip is not None:
            pulumi.set(__self__, "auto_ip", auto_ip)
        if dhcp_server is not None:
            pulumi.set(__self__, "dhcp_server", dhcp_server)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlanid is not None:
            pulumi.set(__self__, "vlanid", vlanid)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="autoIp")
    def auto_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_ip")

    @auto_ip.setter
    def auto_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_ip", value)

    @property
    @pulumi.getter(name="dhcpServer")
    def dhcp_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_server")

    @dhcp_server.setter
    def dhcp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vlanid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlanid")

    @vlanid.setter
    def vlanid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlanid", value)


@pulumi.input_type
class _SwitchControllerInitialConfigTemplateState:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 auto_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_server: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerInitialConfigTemplate resources.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if auto_ip is not None:
            pulumi.set(__self__, "auto_ip", auto_ip)
        if dhcp_server is not None:
            pulumi.set(__self__, "dhcp_server", dhcp_server)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlanid is not None:
            pulumi.set(__self__, "vlanid", vlanid)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="autoIp")
    def auto_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_ip")

    @auto_ip.setter
    def auto_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_ip", value)

    @property
    @pulumi.getter(name="dhcpServer")
    def dhcp_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_server")

    @dhcp_server.setter
    def dhcp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vlanid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlanid")

    @vlanid.setter
    def vlanid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlanid", value)


class SwitchControllerInitialConfigTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 auto_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_server: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a SwitchControllerInitialConfigTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerInitialConfigTemplateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerInitialConfigTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerInitialConfigTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerInitialConfigTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 auto_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_server: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerInitialConfigTemplateArgs.__new__(SwitchControllerInitialConfigTemplateArgs)

            __props__.__dict__["allowaccess"] = allowaccess
            __props__.__dict__["auto_ip"] = auto_ip
            __props__.__dict__["dhcp_server"] = dhcp_server
            __props__.__dict__["ip"] = ip
            __props__.__dict__["name"] = name
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vlanid"] = vlanid
        super(SwitchControllerInitialConfigTemplate, __self__).__init__(
            'fortios:index/switchControllerInitialConfigTemplate:SwitchControllerInitialConfigTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowaccess: Optional[pulumi.Input[str]] = None,
            auto_ip: Optional[pulumi.Input[str]] = None,
            dhcp_server: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vlanid: Optional[pulumi.Input[int]] = None) -> 'SwitchControllerInitialConfigTemplate':
        """
        Get an existing SwitchControllerInitialConfigTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerInitialConfigTemplateState.__new__(_SwitchControllerInitialConfigTemplateState)

        __props__.__dict__["allowaccess"] = allowaccess
        __props__.__dict__["auto_ip"] = auto_ip
        __props__.__dict__["dhcp_server"] = dhcp_server
        __props__.__dict__["ip"] = ip
        __props__.__dict__["name"] = name
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vlanid"] = vlanid
        return SwitchControllerInitialConfigTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def allowaccess(self) -> pulumi.Output[str]:
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter(name="autoIp")
    def auto_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_ip")

    @property
    @pulumi.getter(name="dhcpServer")
    def dhcp_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_server")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vlanid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vlanid")

