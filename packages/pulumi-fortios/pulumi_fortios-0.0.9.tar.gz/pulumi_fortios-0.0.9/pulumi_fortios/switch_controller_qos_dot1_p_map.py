# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerQosDot1PMapArgs', 'SwitchControllerQosDot1PMap']

@pulumi.input_type
class SwitchControllerQosDot1PMapArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 egress_pri_tagging: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority0: Optional[pulumi.Input[str]] = None,
                 priority1: Optional[pulumi.Input[str]] = None,
                 priority2: Optional[pulumi.Input[str]] = None,
                 priority3: Optional[pulumi.Input[str]] = None,
                 priority4: Optional[pulumi.Input[str]] = None,
                 priority5: Optional[pulumi.Input[str]] = None,
                 priority6: Optional[pulumi.Input[str]] = None,
                 priority7: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerQosDot1PMap resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if egress_pri_tagging is not None:
            pulumi.set(__self__, "egress_pri_tagging", egress_pri_tagging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority0 is not None:
            pulumi.set(__self__, "priority0", priority0)
        if priority1 is not None:
            pulumi.set(__self__, "priority1", priority1)
        if priority2 is not None:
            pulumi.set(__self__, "priority2", priority2)
        if priority3 is not None:
            pulumi.set(__self__, "priority3", priority3)
        if priority4 is not None:
            pulumi.set(__self__, "priority4", priority4)
        if priority5 is not None:
            pulumi.set(__self__, "priority5", priority5)
        if priority6 is not None:
            pulumi.set(__self__, "priority6", priority6)
        if priority7 is not None:
            pulumi.set(__self__, "priority7", priority7)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="egressPriTagging")
    def egress_pri_tagging(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "egress_pri_tagging")

    @egress_pri_tagging.setter
    def egress_pri_tagging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_pri_tagging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority0(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority0")

    @priority0.setter
    def priority0(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority0", value)

    @property
    @pulumi.getter
    def priority1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority1")

    @priority1.setter
    def priority1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority1", value)

    @property
    @pulumi.getter
    def priority2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority2")

    @priority2.setter
    def priority2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority2", value)

    @property
    @pulumi.getter
    def priority3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority3")

    @priority3.setter
    def priority3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority3", value)

    @property
    @pulumi.getter
    def priority4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority4")

    @priority4.setter
    def priority4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority4", value)

    @property
    @pulumi.getter
    def priority5(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority5")

    @priority5.setter
    def priority5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority5", value)

    @property
    @pulumi.getter
    def priority6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority6")

    @priority6.setter
    def priority6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority6", value)

    @property
    @pulumi.getter
    def priority7(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority7")

    @priority7.setter
    def priority7(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority7", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchControllerQosDot1PMapState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 egress_pri_tagging: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority0: Optional[pulumi.Input[str]] = None,
                 priority1: Optional[pulumi.Input[str]] = None,
                 priority2: Optional[pulumi.Input[str]] = None,
                 priority3: Optional[pulumi.Input[str]] = None,
                 priority4: Optional[pulumi.Input[str]] = None,
                 priority5: Optional[pulumi.Input[str]] = None,
                 priority6: Optional[pulumi.Input[str]] = None,
                 priority7: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerQosDot1PMap resources.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if egress_pri_tagging is not None:
            pulumi.set(__self__, "egress_pri_tagging", egress_pri_tagging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority0 is not None:
            pulumi.set(__self__, "priority0", priority0)
        if priority1 is not None:
            pulumi.set(__self__, "priority1", priority1)
        if priority2 is not None:
            pulumi.set(__self__, "priority2", priority2)
        if priority3 is not None:
            pulumi.set(__self__, "priority3", priority3)
        if priority4 is not None:
            pulumi.set(__self__, "priority4", priority4)
        if priority5 is not None:
            pulumi.set(__self__, "priority5", priority5)
        if priority6 is not None:
            pulumi.set(__self__, "priority6", priority6)
        if priority7 is not None:
            pulumi.set(__self__, "priority7", priority7)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="egressPriTagging")
    def egress_pri_tagging(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "egress_pri_tagging")

    @egress_pri_tagging.setter
    def egress_pri_tagging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_pri_tagging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority0(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority0")

    @priority0.setter
    def priority0(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority0", value)

    @property
    @pulumi.getter
    def priority1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority1")

    @priority1.setter
    def priority1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority1", value)

    @property
    @pulumi.getter
    def priority2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority2")

    @priority2.setter
    def priority2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority2", value)

    @property
    @pulumi.getter
    def priority3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority3")

    @priority3.setter
    def priority3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority3", value)

    @property
    @pulumi.getter
    def priority4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority4")

    @priority4.setter
    def priority4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority4", value)

    @property
    @pulumi.getter
    def priority5(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority5")

    @priority5.setter
    def priority5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority5", value)

    @property
    @pulumi.getter
    def priority6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority6")

    @priority6.setter
    def priority6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority6", value)

    @property
    @pulumi.getter
    def priority7(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority7")

    @priority7.setter
    def priority7(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority7", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchControllerQosDot1PMap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 egress_pri_tagging: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority0: Optional[pulumi.Input[str]] = None,
                 priority1: Optional[pulumi.Input[str]] = None,
                 priority2: Optional[pulumi.Input[str]] = None,
                 priority3: Optional[pulumi.Input[str]] = None,
                 priority4: Optional[pulumi.Input[str]] = None,
                 priority5: Optional[pulumi.Input[str]] = None,
                 priority6: Optional[pulumi.Input[str]] = None,
                 priority7: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerQosDot1PMap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerQosDot1PMapArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerQosDot1PMap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerQosDot1PMapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerQosDot1PMapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 egress_pri_tagging: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority0: Optional[pulumi.Input[str]] = None,
                 priority1: Optional[pulumi.Input[str]] = None,
                 priority2: Optional[pulumi.Input[str]] = None,
                 priority3: Optional[pulumi.Input[str]] = None,
                 priority4: Optional[pulumi.Input[str]] = None,
                 priority5: Optional[pulumi.Input[str]] = None,
                 priority6: Optional[pulumi.Input[str]] = None,
                 priority7: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerQosDot1PMapArgs.__new__(SwitchControllerQosDot1PMapArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["egress_pri_tagging"] = egress_pri_tagging
            __props__.__dict__["name"] = name
            __props__.__dict__["priority0"] = priority0
            __props__.__dict__["priority1"] = priority1
            __props__.__dict__["priority2"] = priority2
            __props__.__dict__["priority3"] = priority3
            __props__.__dict__["priority4"] = priority4
            __props__.__dict__["priority5"] = priority5
            __props__.__dict__["priority6"] = priority6
            __props__.__dict__["priority7"] = priority7
            __props__.__dict__["vdomparam"] = vdomparam
        super(SwitchControllerQosDot1PMap, __self__).__init__(
            'fortios:index/switchControllerQosDot1PMap:SwitchControllerQosDot1PMap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            egress_pri_tagging: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            priority0: Optional[pulumi.Input[str]] = None,
            priority1: Optional[pulumi.Input[str]] = None,
            priority2: Optional[pulumi.Input[str]] = None,
            priority3: Optional[pulumi.Input[str]] = None,
            priority4: Optional[pulumi.Input[str]] = None,
            priority5: Optional[pulumi.Input[str]] = None,
            priority6: Optional[pulumi.Input[str]] = None,
            priority7: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerQosDot1PMap':
        """
        Get an existing SwitchControllerQosDot1PMap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerQosDot1PMapState.__new__(_SwitchControllerQosDot1PMapState)

        __props__.__dict__["description"] = description
        __props__.__dict__["egress_pri_tagging"] = egress_pri_tagging
        __props__.__dict__["name"] = name
        __props__.__dict__["priority0"] = priority0
        __props__.__dict__["priority1"] = priority1
        __props__.__dict__["priority2"] = priority2
        __props__.__dict__["priority3"] = priority3
        __props__.__dict__["priority4"] = priority4
        __props__.__dict__["priority5"] = priority5
        __props__.__dict__["priority6"] = priority6
        __props__.__dict__["priority7"] = priority7
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchControllerQosDot1PMap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="egressPriTagging")
    def egress_pri_tagging(self) -> pulumi.Output[str]:
        return pulumi.get(self, "egress_pri_tagging")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority0(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priority0")

    @property
    @pulumi.getter
    def priority1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priority1")

    @property
    @pulumi.getter
    def priority2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priority2")

    @property
    @pulumi.getter
    def priority3(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priority3")

    @property
    @pulumi.getter
    def priority4(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priority4")

    @property
    @pulumi.getter
    def priority5(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priority5")

    @property
    @pulumi.getter
    def priority6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priority6")

    @property
    @pulumi.getter
    def priority7(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priority7")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

