# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallVipArgs', 'FirewallVip']

@pulumi.input_type
class FirewallVipArgs:
    def __init__(__self__, *,
                 add_nat46_route: Optional[pulumi.Input[str]] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns_mapping_ttl: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipExtaddrArgs']]]] = None,
                 extintf: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gratuitous_arp_interval: Optional[pulumi.Input[int]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 http_ip_header: Optional[pulumi.Input[str]] = None,
                 http_ip_header_name: Optional[pulumi.Input[str]] = None,
                 http_multiplex: Optional[pulumi.Input[str]] = None,
                 http_multiplex_max_request: Optional[pulumi.Input[int]] = None,
                 http_multiplex_ttl: Optional[pulumi.Input[int]] = None,
                 http_redirect: Optional[pulumi.Input[str]] = None,
                 http_supported_max_version: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 ipv6_mappedip: Optional[pulumi.Input[str]] = None,
                 ipv6_mappedport: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mapped_addr: Optional[pulumi.Input[str]] = None,
                 mappedips: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMappedipArgs']]]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 max_embryonic_connections: Optional[pulumi.Input[int]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMonitorArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat44: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat_source_vip: Optional[pulumi.Input[str]] = None,
                 outlook_web_access: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 portmapping_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipRealserverArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipServiceArgs']]]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcFilterArgs']]]] = None,
                 srcintf_filters: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcintfFilterArgs']]]] = None,
                 ssl_accept_ffdhe_groups: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslCipherSuiteArgs']]]] = None,
                 ssl_client_fallback: Optional[pulumi.Input[str]] = None,
                 ssl_client_rekey_count: Optional[pulumi.Input[int]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_client_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_type: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_age: Optional[pulumi.Input[int]] = None,
                 ssl_hpkp_backup: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_primary: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_report_uri: Optional[pulumi.Input[str]] = None,
                 ssl_hsts: Optional[pulumi.Input[str]] = None,
                 ssl_hsts_age: Optional[pulumi.Input[int]] = None,
                 ssl_hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_http_location_conversion: Optional[pulumi.Input[str]] = None,
                 ssl_http_match_host: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_server_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslServerCipherSuiteArgs']]]] = None,
                 ssl_server_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_server_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weblogic_server: Optional[pulumi.Input[str]] = None,
                 websphere_server: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallVip resource.
        """
        if add_nat46_route is not None:
            pulumi.set(__self__, "add_nat46_route", add_nat46_route)
        if arp_reply is not None:
            pulumi.set(__self__, "arp_reply", arp_reply)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dns_mapping_ttl is not None:
            pulumi.set(__self__, "dns_mapping_ttl", dns_mapping_ttl)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extaddrs is not None:
            pulumi.set(__self__, "extaddrs", extaddrs)
        if extintf is not None:
            pulumi.set(__self__, "extintf", extintf)
        if extip is not None:
            pulumi.set(__self__, "extip", extip)
        if extport is not None:
            pulumi.set(__self__, "extport", extport)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gratuitous_arp_interval is not None:
            pulumi.set(__self__, "gratuitous_arp_interval", gratuitous_arp_interval)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if http_ip_header is not None:
            pulumi.set(__self__, "http_ip_header", http_ip_header)
        if http_ip_header_name is not None:
            pulumi.set(__self__, "http_ip_header_name", http_ip_header_name)
        if http_multiplex is not None:
            pulumi.set(__self__, "http_multiplex", http_multiplex)
        if http_multiplex_max_request is not None:
            pulumi.set(__self__, "http_multiplex_max_request", http_multiplex_max_request)
        if http_multiplex_ttl is not None:
            pulumi.set(__self__, "http_multiplex_ttl", http_multiplex_ttl)
        if http_redirect is not None:
            pulumi.set(__self__, "http_redirect", http_redirect)
        if http_supported_max_version is not None:
            pulumi.set(__self__, "http_supported_max_version", http_supported_max_version)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if ipv6_mappedip is not None:
            pulumi.set(__self__, "ipv6_mappedip", ipv6_mappedip)
        if ipv6_mappedport is not None:
            pulumi.set(__self__, "ipv6_mappedport", ipv6_mappedport)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if mapped_addr is not None:
            pulumi.set(__self__, "mapped_addr", mapped_addr)
        if mappedips is not None:
            pulumi.set(__self__, "mappedips", mappedips)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if max_embryonic_connections is not None:
            pulumi.set(__self__, "max_embryonic_connections", max_embryonic_connections)
        if monitors is not None:
            pulumi.set(__self__, "monitors", monitors)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat44 is not None:
            pulumi.set(__self__, "nat44", nat44)
        if nat46 is not None:
            pulumi.set(__self__, "nat46", nat46)
        if nat_source_vip is not None:
            pulumi.set(__self__, "nat_source_vip", nat_source_vip)
        if outlook_web_access is not None:
            pulumi.set(__self__, "outlook_web_access", outlook_web_access)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if portforward is not None:
            pulumi.set(__self__, "portforward", portforward)
        if portmapping_type is not None:
            pulumi.set(__self__, "portmapping_type", portmapping_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if src_filters is not None:
            pulumi.set(__self__, "src_filters", src_filters)
        if srcintf_filters is not None:
            pulumi.set(__self__, "srcintf_filters", srcintf_filters)
        if ssl_accept_ffdhe_groups is not None:
            pulumi.set(__self__, "ssl_accept_ffdhe_groups", ssl_accept_ffdhe_groups)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_client_fallback is not None:
            pulumi.set(__self__, "ssl_client_fallback", ssl_client_fallback)
        if ssl_client_rekey_count is not None:
            pulumi.set(__self__, "ssl_client_rekey_count", ssl_client_rekey_count)
        if ssl_client_renegotiation is not None:
            pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_client_session_state_max is not None:
            pulumi.set(__self__, "ssl_client_session_state_max", ssl_client_session_state_max)
        if ssl_client_session_state_timeout is not None:
            pulumi.set(__self__, "ssl_client_session_state_timeout", ssl_client_session_state_timeout)
        if ssl_client_session_state_type is not None:
            pulumi.set(__self__, "ssl_client_session_state_type", ssl_client_session_state_type)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_hpkp is not None:
            pulumi.set(__self__, "ssl_hpkp", ssl_hpkp)
        if ssl_hpkp_age is not None:
            pulumi.set(__self__, "ssl_hpkp_age", ssl_hpkp_age)
        if ssl_hpkp_backup is not None:
            pulumi.set(__self__, "ssl_hpkp_backup", ssl_hpkp_backup)
        if ssl_hpkp_include_subdomains is not None:
            pulumi.set(__self__, "ssl_hpkp_include_subdomains", ssl_hpkp_include_subdomains)
        if ssl_hpkp_primary is not None:
            pulumi.set(__self__, "ssl_hpkp_primary", ssl_hpkp_primary)
        if ssl_hpkp_report_uri is not None:
            pulumi.set(__self__, "ssl_hpkp_report_uri", ssl_hpkp_report_uri)
        if ssl_hsts is not None:
            pulumi.set(__self__, "ssl_hsts", ssl_hsts)
        if ssl_hsts_age is not None:
            pulumi.set(__self__, "ssl_hsts_age", ssl_hsts_age)
        if ssl_hsts_include_subdomains is not None:
            pulumi.set(__self__, "ssl_hsts_include_subdomains", ssl_hsts_include_subdomains)
        if ssl_http_location_conversion is not None:
            pulumi.set(__self__, "ssl_http_location_conversion", ssl_http_location_conversion)
        if ssl_http_match_host is not None:
            pulumi.set(__self__, "ssl_http_match_host", ssl_http_match_host)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if ssl_pfs is not None:
            pulumi.set(__self__, "ssl_pfs", ssl_pfs)
        if ssl_send_empty_frags is not None:
            pulumi.set(__self__, "ssl_send_empty_frags", ssl_send_empty_frags)
        if ssl_server_algorithm is not None:
            pulumi.set(__self__, "ssl_server_algorithm", ssl_server_algorithm)
        if ssl_server_cipher_suites is not None:
            pulumi.set(__self__, "ssl_server_cipher_suites", ssl_server_cipher_suites)
        if ssl_server_max_version is not None:
            pulumi.set(__self__, "ssl_server_max_version", ssl_server_max_version)
        if ssl_server_min_version is not None:
            pulumi.set(__self__, "ssl_server_min_version", ssl_server_min_version)
        if ssl_server_renegotiation is not None:
            pulumi.set(__self__, "ssl_server_renegotiation", ssl_server_renegotiation)
        if ssl_server_session_state_max is not None:
            pulumi.set(__self__, "ssl_server_session_state_max", ssl_server_session_state_max)
        if ssl_server_session_state_timeout is not None:
            pulumi.set(__self__, "ssl_server_session_state_timeout", ssl_server_session_state_timeout)
        if ssl_server_session_state_type is not None:
            pulumi.set(__self__, "ssl_server_session_state_type", ssl_server_session_state_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weblogic_server is not None:
            pulumi.set(__self__, "weblogic_server", weblogic_server)
        if websphere_server is not None:
            pulumi.set(__self__, "websphere_server", websphere_server)

    @property
    @pulumi.getter(name="addNat46Route")
    def add_nat46_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "add_nat46_route")

    @add_nat46_route.setter
    def add_nat46_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_nat46_route", value)

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arp_reply")

    @arp_reply.setter
    def arp_reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_reply", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dnsMappingTtl")
    def dns_mapping_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dns_mapping_ttl")

    @dns_mapping_ttl.setter
    def dns_mapping_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_mapping_ttl", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def extaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipExtaddrArgs']]]]:
        return pulumi.get(self, "extaddrs")

    @extaddrs.setter
    def extaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipExtaddrArgs']]]]):
        pulumi.set(self, "extaddrs", value)

    @property
    @pulumi.getter
    def extintf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extintf")

    @extintf.setter
    def extintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extintf", value)

    @property
    @pulumi.getter
    def extip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extip")

    @extip.setter
    def extip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extip", value)

    @property
    @pulumi.getter
    def extport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extport")

    @extport.setter
    def extport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extport", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="gratuitousArpInterval")
    def gratuitous_arp_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gratuitous_arp_interval")

    @gratuitous_arp_interval.setter
    def gratuitous_arp_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gratuitous_arp_interval", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpIpHeader")
    def http_ip_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_ip_header")

    @http_ip_header.setter
    def http_ip_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_ip_header", value)

    @property
    @pulumi.getter(name="httpIpHeaderName")
    def http_ip_header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_ip_header_name")

    @http_ip_header_name.setter
    def http_ip_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_ip_header_name", value)

    @property
    @pulumi.getter(name="httpMultiplex")
    def http_multiplex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_multiplex")

    @http_multiplex.setter
    def http_multiplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_multiplex", value)

    @property
    @pulumi.getter(name="httpMultiplexMaxRequest")
    def http_multiplex_max_request(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_multiplex_max_request")

    @http_multiplex_max_request.setter
    def http_multiplex_max_request(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_multiplex_max_request", value)

    @property
    @pulumi.getter(name="httpMultiplexTtl")
    def http_multiplex_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_multiplex_ttl")

    @http_multiplex_ttl.setter
    def http_multiplex_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_multiplex_ttl", value)

    @property
    @pulumi.getter(name="httpRedirect")
    def http_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_redirect")

    @http_redirect.setter
    def http_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_redirect", value)

    @property
    @pulumi.getter(name="httpSupportedMaxVersion")
    def http_supported_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_supported_max_version")

    @http_supported_max_version.setter
    def http_supported_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_supported_max_version", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter(name="ipv6Mappedip")
    def ipv6_mappedip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_mappedip")

    @ipv6_mappedip.setter
    def ipv6_mappedip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_mappedip", value)

    @property
    @pulumi.getter(name="ipv6Mappedport")
    def ipv6_mappedport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_mappedport")

    @ipv6_mappedport.setter
    def ipv6_mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_mappedport", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter(name="mappedAddr")
    def mapped_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mapped_addr")

    @mapped_addr.setter
    def mapped_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapped_addr", value)

    @property
    @pulumi.getter
    def mappedips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMappedipArgs']]]]:
        return pulumi.get(self, "mappedips")

    @mappedips.setter
    def mappedips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMappedipArgs']]]]):
        pulumi.set(self, "mappedips", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter(name="maxEmbryonicConnections")
    def max_embryonic_connections(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_embryonic_connections")

    @max_embryonic_connections.setter
    def max_embryonic_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_embryonic_connections", value)

    @property
    @pulumi.getter
    def monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMonitorArgs']]]]:
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMonitorArgs']]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat44(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat44")

    @nat44.setter
    def nat44(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat44", value)

    @property
    @pulumi.getter
    def nat46(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat46")

    @nat46.setter
    def nat46(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46", value)

    @property
    @pulumi.getter(name="natSourceVip")
    def nat_source_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat_source_vip")

    @nat_source_vip.setter
    def nat_source_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_source_vip", value)

    @property
    @pulumi.getter(name="outlookWebAccess")
    def outlook_web_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outlook_web_access")

    @outlook_web_access.setter
    def outlook_web_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outlook_web_access", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def portforward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portforward")

    @portforward.setter
    def portforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portforward", value)

    @property
    @pulumi.getter(name="portmappingType")
    def portmapping_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portmapping_type")

    @portmapping_type.setter
    def portmapping_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portmapping_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipRealserverArgs']]]]:
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipRealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipServiceArgs']]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="srcFilters")
    def src_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcFilterArgs']]]]:
        return pulumi.get(self, "src_filters")

    @src_filters.setter
    def src_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcFilterArgs']]]]):
        pulumi.set(self, "src_filters", value)

    @property
    @pulumi.getter(name="srcintfFilters")
    def srcintf_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcintfFilterArgs']]]]:
        return pulumi.get(self, "srcintf_filters")

    @srcintf_filters.setter
    def srcintf_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcintfFilterArgs']]]]):
        pulumi.set(self, "srcintf_filters", value)

    @property
    @pulumi.getter(name="sslAcceptFfdheGroups")
    def ssl_accept_ffdhe_groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_accept_ffdhe_groups")

    @ssl_accept_ffdhe_groups.setter
    def ssl_accept_ffdhe_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_accept_ffdhe_groups", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslCipherSuiteArgs']]]]:
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslClientFallback")
    def ssl_client_fallback(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_fallback")

    @ssl_client_fallback.setter
    def ssl_client_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_fallback", value)

    @property
    @pulumi.getter(name="sslClientRekeyCount")
    def ssl_client_rekey_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_client_rekey_count")

    @ssl_client_rekey_count.setter
    def ssl_client_rekey_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_rekey_count", value)

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_renegotiation")

    @ssl_client_renegotiation.setter
    def ssl_client_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_renegotiation", value)

    @property
    @pulumi.getter(name="sslClientSessionStateMax")
    def ssl_client_session_state_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_client_session_state_max")

    @ssl_client_session_state_max.setter
    def ssl_client_session_state_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_session_state_max", value)

    @property
    @pulumi.getter(name="sslClientSessionStateTimeout")
    def ssl_client_session_state_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_client_session_state_timeout")

    @ssl_client_session_state_timeout.setter
    def ssl_client_session_state_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_session_state_timeout", value)

    @property
    @pulumi.getter(name="sslClientSessionStateType")
    def ssl_client_session_state_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_session_state_type")

    @ssl_client_session_state_type.setter
    def ssl_client_session_state_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_session_state_type", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslHpkp")
    def ssl_hpkp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hpkp")

    @ssl_hpkp.setter
    def ssl_hpkp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp", value)

    @property
    @pulumi.getter(name="sslHpkpAge")
    def ssl_hpkp_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_hpkp_age")

    @ssl_hpkp_age.setter
    def ssl_hpkp_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_hpkp_age", value)

    @property
    @pulumi.getter(name="sslHpkpBackup")
    def ssl_hpkp_backup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hpkp_backup")

    @ssl_hpkp_backup.setter
    def ssl_hpkp_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_backup", value)

    @property
    @pulumi.getter(name="sslHpkpIncludeSubdomains")
    def ssl_hpkp_include_subdomains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hpkp_include_subdomains")

    @ssl_hpkp_include_subdomains.setter
    def ssl_hpkp_include_subdomains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_include_subdomains", value)

    @property
    @pulumi.getter(name="sslHpkpPrimary")
    def ssl_hpkp_primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hpkp_primary")

    @ssl_hpkp_primary.setter
    def ssl_hpkp_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_primary", value)

    @property
    @pulumi.getter(name="sslHpkpReportUri")
    def ssl_hpkp_report_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hpkp_report_uri")

    @ssl_hpkp_report_uri.setter
    def ssl_hpkp_report_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_report_uri", value)

    @property
    @pulumi.getter(name="sslHsts")
    def ssl_hsts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hsts")

    @ssl_hsts.setter
    def ssl_hsts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hsts", value)

    @property
    @pulumi.getter(name="sslHstsAge")
    def ssl_hsts_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_hsts_age")

    @ssl_hsts_age.setter
    def ssl_hsts_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_hsts_age", value)

    @property
    @pulumi.getter(name="sslHstsIncludeSubdomains")
    def ssl_hsts_include_subdomains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hsts_include_subdomains")

    @ssl_hsts_include_subdomains.setter
    def ssl_hsts_include_subdomains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hsts_include_subdomains", value)

    @property
    @pulumi.getter(name="sslHttpLocationConversion")
    def ssl_http_location_conversion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_http_location_conversion")

    @ssl_http_location_conversion.setter
    def ssl_http_location_conversion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_http_location_conversion", value)

    @property
    @pulumi.getter(name="sslHttpMatchHost")
    def ssl_http_match_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_http_match_host")

    @ssl_http_match_host.setter
    def ssl_http_match_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_http_match_host", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="sslPfs")
    def ssl_pfs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_pfs")

    @ssl_pfs.setter
    def ssl_pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_pfs", value)

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_send_empty_frags")

    @ssl_send_empty_frags.setter
    def ssl_send_empty_frags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_send_empty_frags", value)

    @property
    @pulumi.getter(name="sslServerAlgorithm")
    def ssl_server_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_algorithm")

    @ssl_server_algorithm.setter
    def ssl_server_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_algorithm", value)

    @property
    @pulumi.getter(name="sslServerCipherSuites")
    def ssl_server_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslServerCipherSuiteArgs']]]]:
        return pulumi.get(self, "ssl_server_cipher_suites")

    @ssl_server_cipher_suites.setter
    def ssl_server_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslServerCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_server_cipher_suites", value)

    @property
    @pulumi.getter(name="sslServerMaxVersion")
    def ssl_server_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_max_version")

    @ssl_server_max_version.setter
    def ssl_server_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_max_version", value)

    @property
    @pulumi.getter(name="sslServerMinVersion")
    def ssl_server_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_min_version")

    @ssl_server_min_version.setter
    def ssl_server_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_min_version", value)

    @property
    @pulumi.getter(name="sslServerRenegotiation")
    def ssl_server_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_renegotiation")

    @ssl_server_renegotiation.setter
    def ssl_server_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_renegotiation", value)

    @property
    @pulumi.getter(name="sslServerSessionStateMax")
    def ssl_server_session_state_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_server_session_state_max")

    @ssl_server_session_state_max.setter
    def ssl_server_session_state_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_server_session_state_max", value)

    @property
    @pulumi.getter(name="sslServerSessionStateTimeout")
    def ssl_server_session_state_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_server_session_state_timeout")

    @ssl_server_session_state_timeout.setter
    def ssl_server_session_state_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_server_session_state_timeout", value)

    @property
    @pulumi.getter(name="sslServerSessionStateType")
    def ssl_server_session_state_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_session_state_type")

    @ssl_server_session_state_type.setter
    def ssl_server_session_state_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_session_state_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="weblogicServer")
    def weblogic_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "weblogic_server")

    @weblogic_server.setter
    def weblogic_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weblogic_server", value)

    @property
    @pulumi.getter(name="websphereServer")
    def websphere_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "websphere_server")

    @websphere_server.setter
    def websphere_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "websphere_server", value)


@pulumi.input_type
class _FirewallVipState:
    def __init__(__self__, *,
                 add_nat46_route: Optional[pulumi.Input[str]] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns_mapping_ttl: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipExtaddrArgs']]]] = None,
                 extintf: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gratuitous_arp_interval: Optional[pulumi.Input[int]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 http_ip_header: Optional[pulumi.Input[str]] = None,
                 http_ip_header_name: Optional[pulumi.Input[str]] = None,
                 http_multiplex: Optional[pulumi.Input[str]] = None,
                 http_multiplex_max_request: Optional[pulumi.Input[int]] = None,
                 http_multiplex_ttl: Optional[pulumi.Input[int]] = None,
                 http_redirect: Optional[pulumi.Input[str]] = None,
                 http_supported_max_version: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 ipv6_mappedip: Optional[pulumi.Input[str]] = None,
                 ipv6_mappedport: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mapped_addr: Optional[pulumi.Input[str]] = None,
                 mappedips: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMappedipArgs']]]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 max_embryonic_connections: Optional[pulumi.Input[int]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMonitorArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat44: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat_source_vip: Optional[pulumi.Input[str]] = None,
                 outlook_web_access: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 portmapping_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipRealserverArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipServiceArgs']]]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcFilterArgs']]]] = None,
                 srcintf_filters: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcintfFilterArgs']]]] = None,
                 ssl_accept_ffdhe_groups: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslCipherSuiteArgs']]]] = None,
                 ssl_client_fallback: Optional[pulumi.Input[str]] = None,
                 ssl_client_rekey_count: Optional[pulumi.Input[int]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_client_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_type: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_age: Optional[pulumi.Input[int]] = None,
                 ssl_hpkp_backup: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_primary: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_report_uri: Optional[pulumi.Input[str]] = None,
                 ssl_hsts: Optional[pulumi.Input[str]] = None,
                 ssl_hsts_age: Optional[pulumi.Input[int]] = None,
                 ssl_hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_http_location_conversion: Optional[pulumi.Input[str]] = None,
                 ssl_http_match_host: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_server_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslServerCipherSuiteArgs']]]] = None,
                 ssl_server_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_server_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weblogic_server: Optional[pulumi.Input[str]] = None,
                 websphere_server: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallVip resources.
        """
        if add_nat46_route is not None:
            pulumi.set(__self__, "add_nat46_route", add_nat46_route)
        if arp_reply is not None:
            pulumi.set(__self__, "arp_reply", arp_reply)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dns_mapping_ttl is not None:
            pulumi.set(__self__, "dns_mapping_ttl", dns_mapping_ttl)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extaddrs is not None:
            pulumi.set(__self__, "extaddrs", extaddrs)
        if extintf is not None:
            pulumi.set(__self__, "extintf", extintf)
        if extip is not None:
            pulumi.set(__self__, "extip", extip)
        if extport is not None:
            pulumi.set(__self__, "extport", extport)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gratuitous_arp_interval is not None:
            pulumi.set(__self__, "gratuitous_arp_interval", gratuitous_arp_interval)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if http_ip_header is not None:
            pulumi.set(__self__, "http_ip_header", http_ip_header)
        if http_ip_header_name is not None:
            pulumi.set(__self__, "http_ip_header_name", http_ip_header_name)
        if http_multiplex is not None:
            pulumi.set(__self__, "http_multiplex", http_multiplex)
        if http_multiplex_max_request is not None:
            pulumi.set(__self__, "http_multiplex_max_request", http_multiplex_max_request)
        if http_multiplex_ttl is not None:
            pulumi.set(__self__, "http_multiplex_ttl", http_multiplex_ttl)
        if http_redirect is not None:
            pulumi.set(__self__, "http_redirect", http_redirect)
        if http_supported_max_version is not None:
            pulumi.set(__self__, "http_supported_max_version", http_supported_max_version)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if ipv6_mappedip is not None:
            pulumi.set(__self__, "ipv6_mappedip", ipv6_mappedip)
        if ipv6_mappedport is not None:
            pulumi.set(__self__, "ipv6_mappedport", ipv6_mappedport)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if mapped_addr is not None:
            pulumi.set(__self__, "mapped_addr", mapped_addr)
        if mappedips is not None:
            pulumi.set(__self__, "mappedips", mappedips)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if max_embryonic_connections is not None:
            pulumi.set(__self__, "max_embryonic_connections", max_embryonic_connections)
        if monitors is not None:
            pulumi.set(__self__, "monitors", monitors)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat44 is not None:
            pulumi.set(__self__, "nat44", nat44)
        if nat46 is not None:
            pulumi.set(__self__, "nat46", nat46)
        if nat_source_vip is not None:
            pulumi.set(__self__, "nat_source_vip", nat_source_vip)
        if outlook_web_access is not None:
            pulumi.set(__self__, "outlook_web_access", outlook_web_access)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if portforward is not None:
            pulumi.set(__self__, "portforward", portforward)
        if portmapping_type is not None:
            pulumi.set(__self__, "portmapping_type", portmapping_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if src_filters is not None:
            pulumi.set(__self__, "src_filters", src_filters)
        if srcintf_filters is not None:
            pulumi.set(__self__, "srcintf_filters", srcintf_filters)
        if ssl_accept_ffdhe_groups is not None:
            pulumi.set(__self__, "ssl_accept_ffdhe_groups", ssl_accept_ffdhe_groups)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_client_fallback is not None:
            pulumi.set(__self__, "ssl_client_fallback", ssl_client_fallback)
        if ssl_client_rekey_count is not None:
            pulumi.set(__self__, "ssl_client_rekey_count", ssl_client_rekey_count)
        if ssl_client_renegotiation is not None:
            pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_client_session_state_max is not None:
            pulumi.set(__self__, "ssl_client_session_state_max", ssl_client_session_state_max)
        if ssl_client_session_state_timeout is not None:
            pulumi.set(__self__, "ssl_client_session_state_timeout", ssl_client_session_state_timeout)
        if ssl_client_session_state_type is not None:
            pulumi.set(__self__, "ssl_client_session_state_type", ssl_client_session_state_type)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_hpkp is not None:
            pulumi.set(__self__, "ssl_hpkp", ssl_hpkp)
        if ssl_hpkp_age is not None:
            pulumi.set(__self__, "ssl_hpkp_age", ssl_hpkp_age)
        if ssl_hpkp_backup is not None:
            pulumi.set(__self__, "ssl_hpkp_backup", ssl_hpkp_backup)
        if ssl_hpkp_include_subdomains is not None:
            pulumi.set(__self__, "ssl_hpkp_include_subdomains", ssl_hpkp_include_subdomains)
        if ssl_hpkp_primary is not None:
            pulumi.set(__self__, "ssl_hpkp_primary", ssl_hpkp_primary)
        if ssl_hpkp_report_uri is not None:
            pulumi.set(__self__, "ssl_hpkp_report_uri", ssl_hpkp_report_uri)
        if ssl_hsts is not None:
            pulumi.set(__self__, "ssl_hsts", ssl_hsts)
        if ssl_hsts_age is not None:
            pulumi.set(__self__, "ssl_hsts_age", ssl_hsts_age)
        if ssl_hsts_include_subdomains is not None:
            pulumi.set(__self__, "ssl_hsts_include_subdomains", ssl_hsts_include_subdomains)
        if ssl_http_location_conversion is not None:
            pulumi.set(__self__, "ssl_http_location_conversion", ssl_http_location_conversion)
        if ssl_http_match_host is not None:
            pulumi.set(__self__, "ssl_http_match_host", ssl_http_match_host)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if ssl_pfs is not None:
            pulumi.set(__self__, "ssl_pfs", ssl_pfs)
        if ssl_send_empty_frags is not None:
            pulumi.set(__self__, "ssl_send_empty_frags", ssl_send_empty_frags)
        if ssl_server_algorithm is not None:
            pulumi.set(__self__, "ssl_server_algorithm", ssl_server_algorithm)
        if ssl_server_cipher_suites is not None:
            pulumi.set(__self__, "ssl_server_cipher_suites", ssl_server_cipher_suites)
        if ssl_server_max_version is not None:
            pulumi.set(__self__, "ssl_server_max_version", ssl_server_max_version)
        if ssl_server_min_version is not None:
            pulumi.set(__self__, "ssl_server_min_version", ssl_server_min_version)
        if ssl_server_renegotiation is not None:
            pulumi.set(__self__, "ssl_server_renegotiation", ssl_server_renegotiation)
        if ssl_server_session_state_max is not None:
            pulumi.set(__self__, "ssl_server_session_state_max", ssl_server_session_state_max)
        if ssl_server_session_state_timeout is not None:
            pulumi.set(__self__, "ssl_server_session_state_timeout", ssl_server_session_state_timeout)
        if ssl_server_session_state_type is not None:
            pulumi.set(__self__, "ssl_server_session_state_type", ssl_server_session_state_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weblogic_server is not None:
            pulumi.set(__self__, "weblogic_server", weblogic_server)
        if websphere_server is not None:
            pulumi.set(__self__, "websphere_server", websphere_server)

    @property
    @pulumi.getter(name="addNat46Route")
    def add_nat46_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "add_nat46_route")

    @add_nat46_route.setter
    def add_nat46_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_nat46_route", value)

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arp_reply")

    @arp_reply.setter
    def arp_reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_reply", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dnsMappingTtl")
    def dns_mapping_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dns_mapping_ttl")

    @dns_mapping_ttl.setter
    def dns_mapping_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_mapping_ttl", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def extaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipExtaddrArgs']]]]:
        return pulumi.get(self, "extaddrs")

    @extaddrs.setter
    def extaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipExtaddrArgs']]]]):
        pulumi.set(self, "extaddrs", value)

    @property
    @pulumi.getter
    def extintf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extintf")

    @extintf.setter
    def extintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extintf", value)

    @property
    @pulumi.getter
    def extip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extip")

    @extip.setter
    def extip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extip", value)

    @property
    @pulumi.getter
    def extport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extport")

    @extport.setter
    def extport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extport", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="gratuitousArpInterval")
    def gratuitous_arp_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gratuitous_arp_interval")

    @gratuitous_arp_interval.setter
    def gratuitous_arp_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gratuitous_arp_interval", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpIpHeader")
    def http_ip_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_ip_header")

    @http_ip_header.setter
    def http_ip_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_ip_header", value)

    @property
    @pulumi.getter(name="httpIpHeaderName")
    def http_ip_header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_ip_header_name")

    @http_ip_header_name.setter
    def http_ip_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_ip_header_name", value)

    @property
    @pulumi.getter(name="httpMultiplex")
    def http_multiplex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_multiplex")

    @http_multiplex.setter
    def http_multiplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_multiplex", value)

    @property
    @pulumi.getter(name="httpMultiplexMaxRequest")
    def http_multiplex_max_request(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_multiplex_max_request")

    @http_multiplex_max_request.setter
    def http_multiplex_max_request(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_multiplex_max_request", value)

    @property
    @pulumi.getter(name="httpMultiplexTtl")
    def http_multiplex_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_multiplex_ttl")

    @http_multiplex_ttl.setter
    def http_multiplex_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_multiplex_ttl", value)

    @property
    @pulumi.getter(name="httpRedirect")
    def http_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_redirect")

    @http_redirect.setter
    def http_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_redirect", value)

    @property
    @pulumi.getter(name="httpSupportedMaxVersion")
    def http_supported_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_supported_max_version")

    @http_supported_max_version.setter
    def http_supported_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_supported_max_version", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter(name="ipv6Mappedip")
    def ipv6_mappedip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_mappedip")

    @ipv6_mappedip.setter
    def ipv6_mappedip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_mappedip", value)

    @property
    @pulumi.getter(name="ipv6Mappedport")
    def ipv6_mappedport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_mappedport")

    @ipv6_mappedport.setter
    def ipv6_mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_mappedport", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter(name="mappedAddr")
    def mapped_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mapped_addr")

    @mapped_addr.setter
    def mapped_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapped_addr", value)

    @property
    @pulumi.getter
    def mappedips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMappedipArgs']]]]:
        return pulumi.get(self, "mappedips")

    @mappedips.setter
    def mappedips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMappedipArgs']]]]):
        pulumi.set(self, "mappedips", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter(name="maxEmbryonicConnections")
    def max_embryonic_connections(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_embryonic_connections")

    @max_embryonic_connections.setter
    def max_embryonic_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_embryonic_connections", value)

    @property
    @pulumi.getter
    def monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMonitorArgs']]]]:
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipMonitorArgs']]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat44(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat44")

    @nat44.setter
    def nat44(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat44", value)

    @property
    @pulumi.getter
    def nat46(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat46")

    @nat46.setter
    def nat46(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46", value)

    @property
    @pulumi.getter(name="natSourceVip")
    def nat_source_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat_source_vip")

    @nat_source_vip.setter
    def nat_source_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_source_vip", value)

    @property
    @pulumi.getter(name="outlookWebAccess")
    def outlook_web_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outlook_web_access")

    @outlook_web_access.setter
    def outlook_web_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outlook_web_access", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def portforward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portforward")

    @portforward.setter
    def portforward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portforward", value)

    @property
    @pulumi.getter(name="portmappingType")
    def portmapping_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portmapping_type")

    @portmapping_type.setter
    def portmapping_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portmapping_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipRealserverArgs']]]]:
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipRealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipServiceArgs']]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="srcFilters")
    def src_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcFilterArgs']]]]:
        return pulumi.get(self, "src_filters")

    @src_filters.setter
    def src_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcFilterArgs']]]]):
        pulumi.set(self, "src_filters", value)

    @property
    @pulumi.getter(name="srcintfFilters")
    def srcintf_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcintfFilterArgs']]]]:
        return pulumi.get(self, "srcintf_filters")

    @srcintf_filters.setter
    def srcintf_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSrcintfFilterArgs']]]]):
        pulumi.set(self, "srcintf_filters", value)

    @property
    @pulumi.getter(name="sslAcceptFfdheGroups")
    def ssl_accept_ffdhe_groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_accept_ffdhe_groups")

    @ssl_accept_ffdhe_groups.setter
    def ssl_accept_ffdhe_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_accept_ffdhe_groups", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslCipherSuiteArgs']]]]:
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslClientFallback")
    def ssl_client_fallback(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_fallback")

    @ssl_client_fallback.setter
    def ssl_client_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_fallback", value)

    @property
    @pulumi.getter(name="sslClientRekeyCount")
    def ssl_client_rekey_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_client_rekey_count")

    @ssl_client_rekey_count.setter
    def ssl_client_rekey_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_rekey_count", value)

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_renegotiation")

    @ssl_client_renegotiation.setter
    def ssl_client_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_renegotiation", value)

    @property
    @pulumi.getter(name="sslClientSessionStateMax")
    def ssl_client_session_state_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_client_session_state_max")

    @ssl_client_session_state_max.setter
    def ssl_client_session_state_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_session_state_max", value)

    @property
    @pulumi.getter(name="sslClientSessionStateTimeout")
    def ssl_client_session_state_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_client_session_state_timeout")

    @ssl_client_session_state_timeout.setter
    def ssl_client_session_state_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_client_session_state_timeout", value)

    @property
    @pulumi.getter(name="sslClientSessionStateType")
    def ssl_client_session_state_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_session_state_type")

    @ssl_client_session_state_type.setter
    def ssl_client_session_state_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_session_state_type", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslHpkp")
    def ssl_hpkp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hpkp")

    @ssl_hpkp.setter
    def ssl_hpkp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp", value)

    @property
    @pulumi.getter(name="sslHpkpAge")
    def ssl_hpkp_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_hpkp_age")

    @ssl_hpkp_age.setter
    def ssl_hpkp_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_hpkp_age", value)

    @property
    @pulumi.getter(name="sslHpkpBackup")
    def ssl_hpkp_backup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hpkp_backup")

    @ssl_hpkp_backup.setter
    def ssl_hpkp_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_backup", value)

    @property
    @pulumi.getter(name="sslHpkpIncludeSubdomains")
    def ssl_hpkp_include_subdomains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hpkp_include_subdomains")

    @ssl_hpkp_include_subdomains.setter
    def ssl_hpkp_include_subdomains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_include_subdomains", value)

    @property
    @pulumi.getter(name="sslHpkpPrimary")
    def ssl_hpkp_primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hpkp_primary")

    @ssl_hpkp_primary.setter
    def ssl_hpkp_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_primary", value)

    @property
    @pulumi.getter(name="sslHpkpReportUri")
    def ssl_hpkp_report_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hpkp_report_uri")

    @ssl_hpkp_report_uri.setter
    def ssl_hpkp_report_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hpkp_report_uri", value)

    @property
    @pulumi.getter(name="sslHsts")
    def ssl_hsts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hsts")

    @ssl_hsts.setter
    def ssl_hsts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hsts", value)

    @property
    @pulumi.getter(name="sslHstsAge")
    def ssl_hsts_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_hsts_age")

    @ssl_hsts_age.setter
    def ssl_hsts_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_hsts_age", value)

    @property
    @pulumi.getter(name="sslHstsIncludeSubdomains")
    def ssl_hsts_include_subdomains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_hsts_include_subdomains")

    @ssl_hsts_include_subdomains.setter
    def ssl_hsts_include_subdomains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_hsts_include_subdomains", value)

    @property
    @pulumi.getter(name="sslHttpLocationConversion")
    def ssl_http_location_conversion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_http_location_conversion")

    @ssl_http_location_conversion.setter
    def ssl_http_location_conversion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_http_location_conversion", value)

    @property
    @pulumi.getter(name="sslHttpMatchHost")
    def ssl_http_match_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_http_match_host")

    @ssl_http_match_host.setter
    def ssl_http_match_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_http_match_host", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="sslPfs")
    def ssl_pfs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_pfs")

    @ssl_pfs.setter
    def ssl_pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_pfs", value)

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_send_empty_frags")

    @ssl_send_empty_frags.setter
    def ssl_send_empty_frags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_send_empty_frags", value)

    @property
    @pulumi.getter(name="sslServerAlgorithm")
    def ssl_server_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_algorithm")

    @ssl_server_algorithm.setter
    def ssl_server_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_algorithm", value)

    @property
    @pulumi.getter(name="sslServerCipherSuites")
    def ssl_server_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslServerCipherSuiteArgs']]]]:
        return pulumi.get(self, "ssl_server_cipher_suites")

    @ssl_server_cipher_suites.setter
    def ssl_server_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallVipSslServerCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_server_cipher_suites", value)

    @property
    @pulumi.getter(name="sslServerMaxVersion")
    def ssl_server_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_max_version")

    @ssl_server_max_version.setter
    def ssl_server_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_max_version", value)

    @property
    @pulumi.getter(name="sslServerMinVersion")
    def ssl_server_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_min_version")

    @ssl_server_min_version.setter
    def ssl_server_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_min_version", value)

    @property
    @pulumi.getter(name="sslServerRenegotiation")
    def ssl_server_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_renegotiation")

    @ssl_server_renegotiation.setter
    def ssl_server_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_renegotiation", value)

    @property
    @pulumi.getter(name="sslServerSessionStateMax")
    def ssl_server_session_state_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_server_session_state_max")

    @ssl_server_session_state_max.setter
    def ssl_server_session_state_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_server_session_state_max", value)

    @property
    @pulumi.getter(name="sslServerSessionStateTimeout")
    def ssl_server_session_state_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_server_session_state_timeout")

    @ssl_server_session_state_timeout.setter
    def ssl_server_session_state_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_server_session_state_timeout", value)

    @property
    @pulumi.getter(name="sslServerSessionStateType")
    def ssl_server_session_state_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_session_state_type")

    @ssl_server_session_state_type.setter
    def ssl_server_session_state_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_session_state_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="weblogicServer")
    def weblogic_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "weblogic_server")

    @weblogic_server.setter
    def weblogic_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weblogic_server", value)

    @property
    @pulumi.getter(name="websphereServer")
    def websphere_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "websphere_server")

    @websphere_server.setter
    def websphere_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "websphere_server", value)


class FirewallVip(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_nat46_route: Optional[pulumi.Input[str]] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns_mapping_ttl: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipExtaddrArgs']]]]] = None,
                 extintf: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gratuitous_arp_interval: Optional[pulumi.Input[int]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 http_ip_header: Optional[pulumi.Input[str]] = None,
                 http_ip_header_name: Optional[pulumi.Input[str]] = None,
                 http_multiplex: Optional[pulumi.Input[str]] = None,
                 http_multiplex_max_request: Optional[pulumi.Input[int]] = None,
                 http_multiplex_ttl: Optional[pulumi.Input[int]] = None,
                 http_redirect: Optional[pulumi.Input[str]] = None,
                 http_supported_max_version: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 ipv6_mappedip: Optional[pulumi.Input[str]] = None,
                 ipv6_mappedport: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mapped_addr: Optional[pulumi.Input[str]] = None,
                 mappedips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipMappedipArgs']]]]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 max_embryonic_connections: Optional[pulumi.Input[int]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipMonitorArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat44: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat_source_vip: Optional[pulumi.Input[str]] = None,
                 outlook_web_access: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 portmapping_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipRealserverArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipServiceArgs']]]]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSrcFilterArgs']]]]] = None,
                 srcintf_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSrcintfFilterArgs']]]]] = None,
                 ssl_accept_ffdhe_groups: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSslCipherSuiteArgs']]]]] = None,
                 ssl_client_fallback: Optional[pulumi.Input[str]] = None,
                 ssl_client_rekey_count: Optional[pulumi.Input[int]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_client_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_type: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_age: Optional[pulumi.Input[int]] = None,
                 ssl_hpkp_backup: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_primary: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_report_uri: Optional[pulumi.Input[str]] = None,
                 ssl_hsts: Optional[pulumi.Input[str]] = None,
                 ssl_hsts_age: Optional[pulumi.Input[int]] = None,
                 ssl_hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_http_location_conversion: Optional[pulumi.Input[str]] = None,
                 ssl_http_match_host: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_server_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSslServerCipherSuiteArgs']]]]] = None,
                 ssl_server_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_server_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weblogic_server: Optional[pulumi.Input[str]] = None,
                 websphere_server: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallVip resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallVipArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallVip resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallVipArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallVipArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_nat46_route: Optional[pulumi.Input[str]] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns_mapping_ttl: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipExtaddrArgs']]]]] = None,
                 extintf: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gratuitous_arp_interval: Optional[pulumi.Input[int]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 http_ip_header: Optional[pulumi.Input[str]] = None,
                 http_ip_header_name: Optional[pulumi.Input[str]] = None,
                 http_multiplex: Optional[pulumi.Input[str]] = None,
                 http_multiplex_max_request: Optional[pulumi.Input[int]] = None,
                 http_multiplex_ttl: Optional[pulumi.Input[int]] = None,
                 http_redirect: Optional[pulumi.Input[str]] = None,
                 http_supported_max_version: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 ipv6_mappedip: Optional[pulumi.Input[str]] = None,
                 ipv6_mappedport: Optional[pulumi.Input[str]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 mapped_addr: Optional[pulumi.Input[str]] = None,
                 mappedips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipMappedipArgs']]]]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 max_embryonic_connections: Optional[pulumi.Input[int]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipMonitorArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat44: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat_source_vip: Optional[pulumi.Input[str]] = None,
                 outlook_web_access: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 portforward: Optional[pulumi.Input[str]] = None,
                 portmapping_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipRealserverArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipServiceArgs']]]]] = None,
                 src_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSrcFilterArgs']]]]] = None,
                 srcintf_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSrcintfFilterArgs']]]]] = None,
                 ssl_accept_ffdhe_groups: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSslCipherSuiteArgs']]]]] = None,
                 ssl_client_fallback: Optional[pulumi.Input[str]] = None,
                 ssl_client_rekey_count: Optional[pulumi.Input[int]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_client_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_client_session_state_type: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_age: Optional[pulumi.Input[int]] = None,
                 ssl_hpkp_backup: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_primary: Optional[pulumi.Input[str]] = None,
                 ssl_hpkp_report_uri: Optional[pulumi.Input[str]] = None,
                 ssl_hsts: Optional[pulumi.Input[str]] = None,
                 ssl_hsts_age: Optional[pulumi.Input[int]] = None,
                 ssl_hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 ssl_http_location_conversion: Optional[pulumi.Input[str]] = None,
                 ssl_http_match_host: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_server_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSslServerCipherSuiteArgs']]]]] = None,
                 ssl_server_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_server_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_server_session_state_max: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_server_session_state_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weblogic_server: Optional[pulumi.Input[str]] = None,
                 websphere_server: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallVipArgs.__new__(FirewallVipArgs)

            __props__.__dict__["add_nat46_route"] = add_nat46_route
            __props__.__dict__["arp_reply"] = arp_reply
            __props__.__dict__["color"] = color
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dns_mapping_ttl"] = dns_mapping_ttl
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["extaddrs"] = extaddrs
            __props__.__dict__["extintf"] = extintf
            __props__.__dict__["extip"] = extip
            __props__.__dict__["extport"] = extport
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["gratuitous_arp_interval"] = gratuitous_arp_interval
            __props__.__dict__["http_cookie_age"] = http_cookie_age
            __props__.__dict__["http_cookie_domain"] = http_cookie_domain
            __props__.__dict__["http_cookie_domain_from_host"] = http_cookie_domain_from_host
            __props__.__dict__["http_cookie_generation"] = http_cookie_generation
            __props__.__dict__["http_cookie_path"] = http_cookie_path
            __props__.__dict__["http_cookie_share"] = http_cookie_share
            __props__.__dict__["http_ip_header"] = http_ip_header
            __props__.__dict__["http_ip_header_name"] = http_ip_header_name
            __props__.__dict__["http_multiplex"] = http_multiplex
            __props__.__dict__["http_multiplex_max_request"] = http_multiplex_max_request
            __props__.__dict__["http_multiplex_ttl"] = http_multiplex_ttl
            __props__.__dict__["http_redirect"] = http_redirect
            __props__.__dict__["http_supported_max_version"] = http_supported_max_version
            __props__.__dict__["https_cookie_secure"] = https_cookie_secure
            __props__.__dict__["ipv6_mappedip"] = ipv6_mappedip
            __props__.__dict__["ipv6_mappedport"] = ipv6_mappedport
            __props__.__dict__["ldb_method"] = ldb_method
            __props__.__dict__["mapped_addr"] = mapped_addr
            __props__.__dict__["mappedips"] = mappedips
            __props__.__dict__["mappedport"] = mappedport
            __props__.__dict__["max_embryonic_connections"] = max_embryonic_connections
            __props__.__dict__["monitors"] = monitors
            __props__.__dict__["name"] = name
            __props__.__dict__["nat44"] = nat44
            __props__.__dict__["nat46"] = nat46
            __props__.__dict__["nat_source_vip"] = nat_source_vip
            __props__.__dict__["outlook_web_access"] = outlook_web_access
            __props__.__dict__["persistence"] = persistence
            __props__.__dict__["portforward"] = portforward
            __props__.__dict__["portmapping_type"] = portmapping_type
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["realservers"] = realservers
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["services"] = services
            __props__.__dict__["src_filters"] = src_filters
            __props__.__dict__["srcintf_filters"] = srcintf_filters
            __props__.__dict__["ssl_accept_ffdhe_groups"] = ssl_accept_ffdhe_groups
            __props__.__dict__["ssl_algorithm"] = ssl_algorithm
            __props__.__dict__["ssl_certificate"] = ssl_certificate
            __props__.__dict__["ssl_cipher_suites"] = ssl_cipher_suites
            __props__.__dict__["ssl_client_fallback"] = ssl_client_fallback
            __props__.__dict__["ssl_client_rekey_count"] = ssl_client_rekey_count
            __props__.__dict__["ssl_client_renegotiation"] = ssl_client_renegotiation
            __props__.__dict__["ssl_client_session_state_max"] = ssl_client_session_state_max
            __props__.__dict__["ssl_client_session_state_timeout"] = ssl_client_session_state_timeout
            __props__.__dict__["ssl_client_session_state_type"] = ssl_client_session_state_type
            __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
            __props__.__dict__["ssl_hpkp"] = ssl_hpkp
            __props__.__dict__["ssl_hpkp_age"] = ssl_hpkp_age
            __props__.__dict__["ssl_hpkp_backup"] = ssl_hpkp_backup
            __props__.__dict__["ssl_hpkp_include_subdomains"] = ssl_hpkp_include_subdomains
            __props__.__dict__["ssl_hpkp_primary"] = ssl_hpkp_primary
            __props__.__dict__["ssl_hpkp_report_uri"] = ssl_hpkp_report_uri
            __props__.__dict__["ssl_hsts"] = ssl_hsts
            __props__.__dict__["ssl_hsts_age"] = ssl_hsts_age
            __props__.__dict__["ssl_hsts_include_subdomains"] = ssl_hsts_include_subdomains
            __props__.__dict__["ssl_http_location_conversion"] = ssl_http_location_conversion
            __props__.__dict__["ssl_http_match_host"] = ssl_http_match_host
            __props__.__dict__["ssl_max_version"] = ssl_max_version
            __props__.__dict__["ssl_min_version"] = ssl_min_version
            __props__.__dict__["ssl_mode"] = ssl_mode
            __props__.__dict__["ssl_pfs"] = ssl_pfs
            __props__.__dict__["ssl_send_empty_frags"] = ssl_send_empty_frags
            __props__.__dict__["ssl_server_algorithm"] = ssl_server_algorithm
            __props__.__dict__["ssl_server_cipher_suites"] = ssl_server_cipher_suites
            __props__.__dict__["ssl_server_max_version"] = ssl_server_max_version
            __props__.__dict__["ssl_server_min_version"] = ssl_server_min_version
            __props__.__dict__["ssl_server_renegotiation"] = ssl_server_renegotiation
            __props__.__dict__["ssl_server_session_state_max"] = ssl_server_session_state_max
            __props__.__dict__["ssl_server_session_state_timeout"] = ssl_server_session_state_timeout
            __props__.__dict__["ssl_server_session_state_type"] = ssl_server_session_state_type
            __props__.__dict__["status"] = status
            __props__.__dict__["type"] = type
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["weblogic_server"] = weblogic_server
            __props__.__dict__["websphere_server"] = websphere_server
        super(FirewallVip, __self__).__init__(
            'fortios:index/firewallVip:FirewallVip',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_nat46_route: Optional[pulumi.Input[str]] = None,
            arp_reply: Optional[pulumi.Input[str]] = None,
            color: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dns_mapping_ttl: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            extaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipExtaddrArgs']]]]] = None,
            extintf: Optional[pulumi.Input[str]] = None,
            extip: Optional[pulumi.Input[str]] = None,
            extport: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            gratuitous_arp_interval: Optional[pulumi.Input[int]] = None,
            http_cookie_age: Optional[pulumi.Input[int]] = None,
            http_cookie_domain: Optional[pulumi.Input[str]] = None,
            http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
            http_cookie_generation: Optional[pulumi.Input[int]] = None,
            http_cookie_path: Optional[pulumi.Input[str]] = None,
            http_cookie_share: Optional[pulumi.Input[str]] = None,
            http_ip_header: Optional[pulumi.Input[str]] = None,
            http_ip_header_name: Optional[pulumi.Input[str]] = None,
            http_multiplex: Optional[pulumi.Input[str]] = None,
            http_multiplex_max_request: Optional[pulumi.Input[int]] = None,
            http_multiplex_ttl: Optional[pulumi.Input[int]] = None,
            http_redirect: Optional[pulumi.Input[str]] = None,
            http_supported_max_version: Optional[pulumi.Input[str]] = None,
            https_cookie_secure: Optional[pulumi.Input[str]] = None,
            ipv6_mappedip: Optional[pulumi.Input[str]] = None,
            ipv6_mappedport: Optional[pulumi.Input[str]] = None,
            ldb_method: Optional[pulumi.Input[str]] = None,
            mapped_addr: Optional[pulumi.Input[str]] = None,
            mappedips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipMappedipArgs']]]]] = None,
            mappedport: Optional[pulumi.Input[str]] = None,
            max_embryonic_connections: Optional[pulumi.Input[int]] = None,
            monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipMonitorArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat44: Optional[pulumi.Input[str]] = None,
            nat46: Optional[pulumi.Input[str]] = None,
            nat_source_vip: Optional[pulumi.Input[str]] = None,
            outlook_web_access: Optional[pulumi.Input[str]] = None,
            persistence: Optional[pulumi.Input[str]] = None,
            portforward: Optional[pulumi.Input[str]] = None,
            portmapping_type: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            realservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipRealserverArgs']]]]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipServiceArgs']]]]] = None,
            src_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSrcFilterArgs']]]]] = None,
            srcintf_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSrcintfFilterArgs']]]]] = None,
            ssl_accept_ffdhe_groups: Optional[pulumi.Input[str]] = None,
            ssl_algorithm: Optional[pulumi.Input[str]] = None,
            ssl_certificate: Optional[pulumi.Input[str]] = None,
            ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSslCipherSuiteArgs']]]]] = None,
            ssl_client_fallback: Optional[pulumi.Input[str]] = None,
            ssl_client_rekey_count: Optional[pulumi.Input[int]] = None,
            ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
            ssl_client_session_state_max: Optional[pulumi.Input[int]] = None,
            ssl_client_session_state_timeout: Optional[pulumi.Input[int]] = None,
            ssl_client_session_state_type: Optional[pulumi.Input[str]] = None,
            ssl_dh_bits: Optional[pulumi.Input[str]] = None,
            ssl_hpkp: Optional[pulumi.Input[str]] = None,
            ssl_hpkp_age: Optional[pulumi.Input[int]] = None,
            ssl_hpkp_backup: Optional[pulumi.Input[str]] = None,
            ssl_hpkp_include_subdomains: Optional[pulumi.Input[str]] = None,
            ssl_hpkp_primary: Optional[pulumi.Input[str]] = None,
            ssl_hpkp_report_uri: Optional[pulumi.Input[str]] = None,
            ssl_hsts: Optional[pulumi.Input[str]] = None,
            ssl_hsts_age: Optional[pulumi.Input[int]] = None,
            ssl_hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
            ssl_http_location_conversion: Optional[pulumi.Input[str]] = None,
            ssl_http_match_host: Optional[pulumi.Input[str]] = None,
            ssl_max_version: Optional[pulumi.Input[str]] = None,
            ssl_min_version: Optional[pulumi.Input[str]] = None,
            ssl_mode: Optional[pulumi.Input[str]] = None,
            ssl_pfs: Optional[pulumi.Input[str]] = None,
            ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
            ssl_server_algorithm: Optional[pulumi.Input[str]] = None,
            ssl_server_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallVipSslServerCipherSuiteArgs']]]]] = None,
            ssl_server_max_version: Optional[pulumi.Input[str]] = None,
            ssl_server_min_version: Optional[pulumi.Input[str]] = None,
            ssl_server_renegotiation: Optional[pulumi.Input[str]] = None,
            ssl_server_session_state_max: Optional[pulumi.Input[int]] = None,
            ssl_server_session_state_timeout: Optional[pulumi.Input[int]] = None,
            ssl_server_session_state_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            weblogic_server: Optional[pulumi.Input[str]] = None,
            websphere_server: Optional[pulumi.Input[str]] = None) -> 'FirewallVip':
        """
        Get an existing FirewallVip resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallVipState.__new__(_FirewallVipState)

        __props__.__dict__["add_nat46_route"] = add_nat46_route
        __props__.__dict__["arp_reply"] = arp_reply
        __props__.__dict__["color"] = color
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dns_mapping_ttl"] = dns_mapping_ttl
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["extaddrs"] = extaddrs
        __props__.__dict__["extintf"] = extintf
        __props__.__dict__["extip"] = extip
        __props__.__dict__["extport"] = extport
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["gratuitous_arp_interval"] = gratuitous_arp_interval
        __props__.__dict__["http_cookie_age"] = http_cookie_age
        __props__.__dict__["http_cookie_domain"] = http_cookie_domain
        __props__.__dict__["http_cookie_domain_from_host"] = http_cookie_domain_from_host
        __props__.__dict__["http_cookie_generation"] = http_cookie_generation
        __props__.__dict__["http_cookie_path"] = http_cookie_path
        __props__.__dict__["http_cookie_share"] = http_cookie_share
        __props__.__dict__["http_ip_header"] = http_ip_header
        __props__.__dict__["http_ip_header_name"] = http_ip_header_name
        __props__.__dict__["http_multiplex"] = http_multiplex
        __props__.__dict__["http_multiplex_max_request"] = http_multiplex_max_request
        __props__.__dict__["http_multiplex_ttl"] = http_multiplex_ttl
        __props__.__dict__["http_redirect"] = http_redirect
        __props__.__dict__["http_supported_max_version"] = http_supported_max_version
        __props__.__dict__["https_cookie_secure"] = https_cookie_secure
        __props__.__dict__["ipv6_mappedip"] = ipv6_mappedip
        __props__.__dict__["ipv6_mappedport"] = ipv6_mappedport
        __props__.__dict__["ldb_method"] = ldb_method
        __props__.__dict__["mapped_addr"] = mapped_addr
        __props__.__dict__["mappedips"] = mappedips
        __props__.__dict__["mappedport"] = mappedport
        __props__.__dict__["max_embryonic_connections"] = max_embryonic_connections
        __props__.__dict__["monitors"] = monitors
        __props__.__dict__["name"] = name
        __props__.__dict__["nat44"] = nat44
        __props__.__dict__["nat46"] = nat46
        __props__.__dict__["nat_source_vip"] = nat_source_vip
        __props__.__dict__["outlook_web_access"] = outlook_web_access
        __props__.__dict__["persistence"] = persistence
        __props__.__dict__["portforward"] = portforward
        __props__.__dict__["portmapping_type"] = portmapping_type
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["realservers"] = realservers
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["services"] = services
        __props__.__dict__["src_filters"] = src_filters
        __props__.__dict__["srcintf_filters"] = srcintf_filters
        __props__.__dict__["ssl_accept_ffdhe_groups"] = ssl_accept_ffdhe_groups
        __props__.__dict__["ssl_algorithm"] = ssl_algorithm
        __props__.__dict__["ssl_certificate"] = ssl_certificate
        __props__.__dict__["ssl_cipher_suites"] = ssl_cipher_suites
        __props__.__dict__["ssl_client_fallback"] = ssl_client_fallback
        __props__.__dict__["ssl_client_rekey_count"] = ssl_client_rekey_count
        __props__.__dict__["ssl_client_renegotiation"] = ssl_client_renegotiation
        __props__.__dict__["ssl_client_session_state_max"] = ssl_client_session_state_max
        __props__.__dict__["ssl_client_session_state_timeout"] = ssl_client_session_state_timeout
        __props__.__dict__["ssl_client_session_state_type"] = ssl_client_session_state_type
        __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
        __props__.__dict__["ssl_hpkp"] = ssl_hpkp
        __props__.__dict__["ssl_hpkp_age"] = ssl_hpkp_age
        __props__.__dict__["ssl_hpkp_backup"] = ssl_hpkp_backup
        __props__.__dict__["ssl_hpkp_include_subdomains"] = ssl_hpkp_include_subdomains
        __props__.__dict__["ssl_hpkp_primary"] = ssl_hpkp_primary
        __props__.__dict__["ssl_hpkp_report_uri"] = ssl_hpkp_report_uri
        __props__.__dict__["ssl_hsts"] = ssl_hsts
        __props__.__dict__["ssl_hsts_age"] = ssl_hsts_age
        __props__.__dict__["ssl_hsts_include_subdomains"] = ssl_hsts_include_subdomains
        __props__.__dict__["ssl_http_location_conversion"] = ssl_http_location_conversion
        __props__.__dict__["ssl_http_match_host"] = ssl_http_match_host
        __props__.__dict__["ssl_max_version"] = ssl_max_version
        __props__.__dict__["ssl_min_version"] = ssl_min_version
        __props__.__dict__["ssl_mode"] = ssl_mode
        __props__.__dict__["ssl_pfs"] = ssl_pfs
        __props__.__dict__["ssl_send_empty_frags"] = ssl_send_empty_frags
        __props__.__dict__["ssl_server_algorithm"] = ssl_server_algorithm
        __props__.__dict__["ssl_server_cipher_suites"] = ssl_server_cipher_suites
        __props__.__dict__["ssl_server_max_version"] = ssl_server_max_version
        __props__.__dict__["ssl_server_min_version"] = ssl_server_min_version
        __props__.__dict__["ssl_server_renegotiation"] = ssl_server_renegotiation
        __props__.__dict__["ssl_server_session_state_max"] = ssl_server_session_state_max
        __props__.__dict__["ssl_server_session_state_timeout"] = ssl_server_session_state_timeout
        __props__.__dict__["ssl_server_session_state_type"] = ssl_server_session_state_type
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["weblogic_server"] = weblogic_server
        __props__.__dict__["websphere_server"] = websphere_server
        return FirewallVip(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addNat46Route")
    def add_nat46_route(self) -> pulumi.Output[str]:
        return pulumi.get(self, "add_nat46_route")

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arp_reply")

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[int]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dnsMappingTtl")
    def dns_mapping_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dns_mapping_ttl")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def extaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallVipExtaddr']]]:
        return pulumi.get(self, "extaddrs")

    @property
    @pulumi.getter
    def extintf(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extintf")

    @property
    @pulumi.getter
    def extip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extip")

    @property
    @pulumi.getter
    def extport(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extport")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="gratuitousArpInterval")
    def gratuitous_arp_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "gratuitous_arp_interval")

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> pulumi.Output[int]:
        return pulumi.get(self, "http_cookie_age")

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_cookie_domain")

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> pulumi.Output[int]:
        return pulumi.get(self, "http_cookie_generation")

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_cookie_path")

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_cookie_share")

    @property
    @pulumi.getter(name="httpIpHeader")
    def http_ip_header(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_ip_header")

    @property
    @pulumi.getter(name="httpIpHeaderName")
    def http_ip_header_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_ip_header_name")

    @property
    @pulumi.getter(name="httpMultiplex")
    def http_multiplex(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_multiplex")

    @property
    @pulumi.getter(name="httpMultiplexMaxRequest")
    def http_multiplex_max_request(self) -> pulumi.Output[int]:
        return pulumi.get(self, "http_multiplex_max_request")

    @property
    @pulumi.getter(name="httpMultiplexTtl")
    def http_multiplex_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "http_multiplex_ttl")

    @property
    @pulumi.getter(name="httpRedirect")
    def http_redirect(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_redirect")

    @property
    @pulumi.getter(name="httpSupportedMaxVersion")
    def http_supported_max_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_supported_max_version")

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> pulumi.Output[str]:
        return pulumi.get(self, "https_cookie_secure")

    @property
    @pulumi.getter(name="ipv6Mappedip")
    def ipv6_mappedip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_mappedip")

    @property
    @pulumi.getter(name="ipv6Mappedport")
    def ipv6_mappedport(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_mappedport")

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ldb_method")

    @property
    @pulumi.getter(name="mappedAddr")
    def mapped_addr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mapped_addr")

    @property
    @pulumi.getter
    def mappedips(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallVipMappedip']]]:
        return pulumi.get(self, "mappedips")

    @property
    @pulumi.getter
    def mappedport(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mappedport")

    @property
    @pulumi.getter(name="maxEmbryonicConnections")
    def max_embryonic_connections(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_embryonic_connections")

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallVipMonitor']]]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat44(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat44")

    @property
    @pulumi.getter
    def nat46(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat46")

    @property
    @pulumi.getter(name="natSourceVip")
    def nat_source_vip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat_source_vip")

    @property
    @pulumi.getter(name="outlookWebAccess")
    def outlook_web_access(self) -> pulumi.Output[str]:
        return pulumi.get(self, "outlook_web_access")

    @property
    @pulumi.getter
    def persistence(self) -> pulumi.Output[str]:
        return pulumi.get(self, "persistence")

    @property
    @pulumi.getter
    def portforward(self) -> pulumi.Output[str]:
        return pulumi.get(self, "portforward")

    @property
    @pulumi.getter(name="portmappingType")
    def portmapping_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "portmapping_type")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def realservers(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallVipRealserver']]]:
        return pulumi.get(self, "realservers")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallVipService']]]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="srcFilters")
    def src_filters(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallVipSrcFilter']]]:
        return pulumi.get(self, "src_filters")

    @property
    @pulumi.getter(name="srcintfFilters")
    def srcintf_filters(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallVipSrcintfFilter']]]:
        return pulumi.get(self, "srcintf_filters")

    @property
    @pulumi.getter(name="sslAcceptFfdheGroups")
    def ssl_accept_ffdhe_groups(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_accept_ffdhe_groups")

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_algorithm")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_certificate")

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallVipSslCipherSuite']]]:
        return pulumi.get(self, "ssl_cipher_suites")

    @property
    @pulumi.getter(name="sslClientFallback")
    def ssl_client_fallback(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_client_fallback")

    @property
    @pulumi.getter(name="sslClientRekeyCount")
    def ssl_client_rekey_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssl_client_rekey_count")

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_client_renegotiation")

    @property
    @pulumi.getter(name="sslClientSessionStateMax")
    def ssl_client_session_state_max(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssl_client_session_state_max")

    @property
    @pulumi.getter(name="sslClientSessionStateTimeout")
    def ssl_client_session_state_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssl_client_session_state_timeout")

    @property
    @pulumi.getter(name="sslClientSessionStateType")
    def ssl_client_session_state_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_client_session_state_type")

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_dh_bits")

    @property
    @pulumi.getter(name="sslHpkp")
    def ssl_hpkp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_hpkp")

    @property
    @pulumi.getter(name="sslHpkpAge")
    def ssl_hpkp_age(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssl_hpkp_age")

    @property
    @pulumi.getter(name="sslHpkpBackup")
    def ssl_hpkp_backup(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_hpkp_backup")

    @property
    @pulumi.getter(name="sslHpkpIncludeSubdomains")
    def ssl_hpkp_include_subdomains(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_hpkp_include_subdomains")

    @property
    @pulumi.getter(name="sslHpkpPrimary")
    def ssl_hpkp_primary(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_hpkp_primary")

    @property
    @pulumi.getter(name="sslHpkpReportUri")
    def ssl_hpkp_report_uri(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ssl_hpkp_report_uri")

    @property
    @pulumi.getter(name="sslHsts")
    def ssl_hsts(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_hsts")

    @property
    @pulumi.getter(name="sslHstsAge")
    def ssl_hsts_age(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssl_hsts_age")

    @property
    @pulumi.getter(name="sslHstsIncludeSubdomains")
    def ssl_hsts_include_subdomains(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_hsts_include_subdomains")

    @property
    @pulumi.getter(name="sslHttpLocationConversion")
    def ssl_http_location_conversion(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_http_location_conversion")

    @property
    @pulumi.getter(name="sslHttpMatchHost")
    def ssl_http_match_host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_http_match_host")

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_max_version")

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_min_version")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="sslPfs")
    def ssl_pfs(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_pfs")

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_send_empty_frags")

    @property
    @pulumi.getter(name="sslServerAlgorithm")
    def ssl_server_algorithm(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_server_algorithm")

    @property
    @pulumi.getter(name="sslServerCipherSuites")
    def ssl_server_cipher_suites(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallVipSslServerCipherSuite']]]:
        return pulumi.get(self, "ssl_server_cipher_suites")

    @property
    @pulumi.getter(name="sslServerMaxVersion")
    def ssl_server_max_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_server_max_version")

    @property
    @pulumi.getter(name="sslServerMinVersion")
    def ssl_server_min_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_server_min_version")

    @property
    @pulumi.getter(name="sslServerRenegotiation")
    def ssl_server_renegotiation(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_server_renegotiation")

    @property
    @pulumi.getter(name="sslServerSessionStateMax")
    def ssl_server_session_state_max(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssl_server_session_state_max")

    @property
    @pulumi.getter(name="sslServerSessionStateTimeout")
    def ssl_server_session_state_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssl_server_session_state_timeout")

    @property
    @pulumi.getter(name="sslServerSessionStateType")
    def ssl_server_session_state_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_server_session_state_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="weblogicServer")
    def weblogic_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "weblogic_server")

    @property
    @pulumi.getter(name="websphereServer")
    def websphere_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "websphere_server")

