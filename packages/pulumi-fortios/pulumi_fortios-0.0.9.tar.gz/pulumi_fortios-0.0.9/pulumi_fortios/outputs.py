# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AntivirusProfileCifs',
    'AntivirusProfileContentDisarm',
    'AntivirusProfileExternalBlocklist',
    'AntivirusProfileFtp',
    'AntivirusProfileHttp',
    'AntivirusProfileImap',
    'AntivirusProfileMapi',
    'AntivirusProfileNacQuar',
    'AntivirusProfileNntp',
    'AntivirusProfileOutbreakPrevention',
    'AntivirusProfilePop3',
    'AntivirusProfileSmb',
    'AntivirusProfileSmtp',
    'AntivirusProfileSsh',
    'ApplicationGroupApplication',
    'ApplicationGroupCategory',
    'ApplicationGroupRisk',
    'ApplicationListDefaultNetworkService',
    'ApplicationListEntry',
    'ApplicationListEntryApplication',
    'ApplicationListEntryCategory',
    'ApplicationListEntryExclusion',
    'ApplicationListEntryParameter',
    'ApplicationListEntryParameterMember',
    'ApplicationListEntryRisk',
    'ApplicationListEntrySubCategory',
    'ApplicationNameMetadata',
    'ApplicationNameParameter',
    'AuthenticationRuleDstaddr6',
    'AuthenticationRuleDstaddr',
    'AuthenticationRuleSrcaddr6',
    'AuthenticationRuleSrcaddr',
    'AuthenticationRuleSrcintf',
    'AuthenticationSchemeUserDatabase',
    'AuthenticationSettingDevRange',
    'AuthenticationSettingUserCertCa',
    'CifsProfileFileFilter',
    'CifsProfileFileFilterEntry',
    'CifsProfileFileFilterEntryFileType',
    'CifsProfileServerKeytab',
    'DlpDictionaryEntry',
    'DlpFilepatternEntry',
    'DlpProfileRule',
    'DlpProfileRuleSensitivity',
    'DlpProfileRuleSensor',
    'DlpSensorEntry',
    'DlpSensorFilter',
    'DlpSensorFilterFpSensitivity',
    'DlpSensorFilterSensitivity',
    'DnsfilterDomainFilterEntry',
    'DnsfilterProfileDnsTranslation',
    'DnsfilterProfileDomainFilter',
    'DnsfilterProfileExternalIpBlocklist',
    'DnsfilterProfileFtgdDns',
    'DnsfilterProfileFtgdDnsFilter',
    'DpdkGlobalInterface',
    'EmailfilterBlockAllowListEntry',
    'EmailfilterBwlEntry',
    'EmailfilterBwordEntry',
    'EmailfilterDnsblEntry',
    'EmailfilterIptrustEntry',
    'EmailfilterMheaderEntry',
    'EmailfilterProfileFileFilter',
    'EmailfilterProfileFileFilterEntry',
    'EmailfilterProfileFileFilterEntryFileType',
    'EmailfilterProfileGmail',
    'EmailfilterProfileImap',
    'EmailfilterProfileMapi',
    'EmailfilterProfileMsnHotmail',
    'EmailfilterProfileOtherWebmails',
    'EmailfilterProfilePop3',
    'EmailfilterProfileSmtp',
    'EmailfilterProfileYahooMail',
    'EndpointControlProfileDeviceGroup',
    'EndpointControlProfileForticlientAndroidSettings',
    'EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting',
    'EndpointControlProfileForticlientIosSettings',
    'EndpointControlProfileForticlientIosSettingsClientVpnSetting',
    'EndpointControlProfileForticlientWinmacSettings',
    'EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntry',
    'EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem',
    'EndpointControlProfileForticlientWinmacSettingsForticlientOwnFile',
    'EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry',
    'EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp',
    'EndpointControlProfileOnNetAddr',
    'EndpointControlProfileSrcAddr',
    'EndpointControlProfileUser',
    'EndpointControlProfileUserGroup',
    'ExtenderControllerExtender1ControllerReport',
    'ExtenderControllerExtender1Modem1',
    'ExtenderControllerExtender1Modem1AutoSwitch',
    'ExtenderControllerExtender1Modem2',
    'ExtenderControllerExtender1Modem2AutoSwitch',
    'ExtenderControllerExtenderControllerReport',
    'ExtenderControllerExtenderModem1',
    'ExtenderControllerExtenderModem1AutoSwitch',
    'ExtenderControllerExtenderModem2',
    'ExtenderControllerExtenderModem2AutoSwitch',
    'ExtenderControllerExtenderProfileCellular',
    'ExtenderControllerExtenderProfileCellularControllerReport',
    'ExtenderControllerExtenderProfileCellularDataplan',
    'ExtenderControllerExtenderProfileCellularModem1',
    'ExtenderControllerExtenderProfileCellularModem1AutoSwitch',
    'ExtenderControllerExtenderProfileCellularModem2',
    'ExtenderControllerExtenderProfileCellularModem2AutoSwitch',
    'ExtenderControllerExtenderProfileCellularSmsNotification',
    'ExtenderControllerExtenderProfileCellularSmsNotificationAlert',
    'ExtenderControllerExtenderProfileCellularSmsNotificationReceiver',
    'ExtenderControllerExtenderProfileLanExtension',
    'ExtenderControllerExtenderProfileLanExtensionBackhaul',
    'ExtenderControllerExtenderWanExtension',
    'ExtensionControllerExtenderProfileCellular',
    'ExtensionControllerExtenderProfileCellularControllerReport',
    'ExtensionControllerExtenderProfileCellularDataplan',
    'ExtensionControllerExtenderProfileCellularModem1',
    'ExtensionControllerExtenderProfileCellularModem1AutoSwitch',
    'ExtensionControllerExtenderProfileCellularModem2',
    'ExtensionControllerExtenderProfileCellularModem2AutoSwitch',
    'ExtensionControllerExtenderProfileCellularSmsNotification',
    'ExtensionControllerExtenderProfileCellularSmsNotificationAlert',
    'ExtensionControllerExtenderProfileCellularSmsNotificationReceiver',
    'ExtensionControllerExtenderProfileLanExtension',
    'ExtensionControllerExtenderProfileLanExtensionBackhaul',
    'ExtensionControllerExtenderWanExtension',
    'ExtensionControllerFortigateProfileLanExtension',
    'FileFilterProfileRule',
    'FileFilterProfileRuleFileType',
    'FirewallAccessProxy6ApiGateway6',
    'FirewallAccessProxy6ApiGateway6Application',
    'FirewallAccessProxy6ApiGateway6Realserver',
    'FirewallAccessProxy6ApiGateway6RealserverSshHostKey',
    'FirewallAccessProxy6ApiGateway6SslCipherSuite',
    'FirewallAccessProxy6ApiGateway',
    'FirewallAccessProxy6ApiGatewayApplication',
    'FirewallAccessProxy6ApiGatewayRealserver',
    'FirewallAccessProxy6ApiGatewayRealserverSshHostKey',
    'FirewallAccessProxy6ApiGatewaySslCipherSuite',
    'FirewallAccessProxyApiGateway6',
    'FirewallAccessProxyApiGateway6Application',
    'FirewallAccessProxyApiGateway6Realserver',
    'FirewallAccessProxyApiGateway6RealserverSshHostKey',
    'FirewallAccessProxyApiGateway6SslCipherSuite',
    'FirewallAccessProxyApiGateway',
    'FirewallAccessProxyApiGatewayApplication',
    'FirewallAccessProxyApiGatewayRealserver',
    'FirewallAccessProxyApiGatewayRealserverSshHostKey',
    'FirewallAccessProxyApiGatewaySslCipherSuite',
    'FirewallAccessProxySshClientCertCertExtension',
    'FirewallAddress6List',
    'FirewallAddress6Macaddr',
    'FirewallAddress6SubnetSegment',
    'FirewallAddress6Tagging',
    'FirewallAddress6TaggingTag',
    'FirewallAddress6TemplateSubnetSegment',
    'FirewallAddress6TemplateSubnetSegmentValue',
    'FirewallAddressFssoGroup',
    'FirewallAddressList',
    'FirewallAddressMacaddr',
    'FirewallAddressTagging',
    'FirewallAddressTaggingTag',
    'FirewallAddrgrp6ExcludeMember',
    'FirewallAddrgrp6Member',
    'FirewallAddrgrp6Tagging',
    'FirewallAddrgrp6TaggingTag',
    'FirewallAddrgrpExcludeMember',
    'FirewallAddrgrpMember',
    'FirewallAddrgrpTagging',
    'FirewallAddrgrpTaggingTag',
    'FirewallAuthPortalGroup',
    'FirewallCentralSnatMapDstAddr6',
    'FirewallCentralSnatMapDstAddr',
    'FirewallCentralSnatMapDstintf',
    'FirewallCentralSnatMapNatIppool6',
    'FirewallCentralSnatMapNatIppool',
    'FirewallCentralSnatMapOrigAddr6',
    'FirewallCentralSnatMapOrigAddr',
    'FirewallCentralSnatMapSrcintf',
    'FirewallConsolidatedPolicyAppCategory',
    'FirewallConsolidatedPolicyAppGroup',
    'FirewallConsolidatedPolicyApplication',
    'FirewallConsolidatedPolicyDstaddr4',
    'FirewallConsolidatedPolicyDstaddr6',
    'FirewallConsolidatedPolicyDstintf',
    'FirewallConsolidatedPolicyFssoGroup',
    'FirewallConsolidatedPolicyGroup',
    'FirewallConsolidatedPolicyInternetServiceCustom',
    'FirewallConsolidatedPolicyInternetServiceCustomGroup',
    'FirewallConsolidatedPolicyInternetServiceGroup',
    'FirewallConsolidatedPolicyInternetServiceId',
    'FirewallConsolidatedPolicyInternetServiceName',
    'FirewallConsolidatedPolicyInternetServiceSrcCustom',
    'FirewallConsolidatedPolicyInternetServiceSrcCustomGroup',
    'FirewallConsolidatedPolicyInternetServiceSrcGroup',
    'FirewallConsolidatedPolicyInternetServiceSrcId',
    'FirewallConsolidatedPolicyInternetServiceSrcName',
    'FirewallConsolidatedPolicyPoolname4',
    'FirewallConsolidatedPolicyPoolname6',
    'FirewallConsolidatedPolicyService',
    'FirewallConsolidatedPolicySrcaddr4',
    'FirewallConsolidatedPolicySrcaddr6',
    'FirewallConsolidatedPolicySrcintf',
    'FirewallConsolidatedPolicyUrlCategory',
    'FirewallConsolidatedPolicyUser',
    'FirewallCountryRegion',
    'FirewallDecryptedTrafficMirrorInterface',
    'FirewallDosPolicy6Anomaly',
    'FirewallDosPolicy6Dstaddr',
    'FirewallDosPolicy6Service',
    'FirewallDosPolicy6Srcaddr',
    'FirewallDosPolicyAnomaly',
    'FirewallDosPolicyDstaddr',
    'FirewallDosPolicyService',
    'FirewallDosPolicySrcaddr',
    'FirewallIdentityBasedRouteRule',
    'FirewallIdentityBasedRouteRuleGroup',
    'FirewallInterfacePolicy6Dstaddr6',
    'FirewallInterfacePolicy6Service6',
    'FirewallInterfacePolicy6Srcaddr6',
    'FirewallInterfacePolicyDstaddr',
    'FirewallInterfacePolicyService',
    'FirewallInterfacePolicySrcaddr',
    'FirewallInternetServiceAdditionEntry',
    'FirewallInternetServiceAdditionEntryPortRange',
    'FirewallInternetServiceCustomEntry',
    'FirewallInternetServiceCustomEntryDst6',
    'FirewallInternetServiceCustomEntryDst',
    'FirewallInternetServiceCustomEntryPortRange',
    'FirewallInternetServiceCustomGroupMember',
    'FirewallInternetServiceDefinitionEntry',
    'FirewallInternetServiceDefinitionEntryPortRange',
    'FirewallInternetServiceExtensionDisableEntry',
    'FirewallInternetServiceExtensionDisableEntryIp6Range',
    'FirewallInternetServiceExtensionDisableEntryIpRange',
    'FirewallInternetServiceExtensionDisableEntryPortRange',
    'FirewallInternetServiceExtensionEntry',
    'FirewallInternetServiceExtensionEntryDst6',
    'FirewallInternetServiceExtensionEntryDst',
    'FirewallInternetServiceExtensionEntryPortRange',
    'FirewallInternetServiceGroupMember',
    'FirewallInternetServiceSubappSubApp',
    'FirewallLocalInPolicy6Dstaddr',
    'FirewallLocalInPolicy6Service',
    'FirewallLocalInPolicy6Srcaddr',
    'FirewallLocalInPolicyDstaddr',
    'FirewallLocalInPolicyService',
    'FirewallLocalInPolicySrcaddr',
    'FirewallMulticastAddress6Tagging',
    'FirewallMulticastAddress6TaggingTag',
    'FirewallMulticastAddressTagging',
    'FirewallMulticastAddressTaggingTag',
    'FirewallMulticastPolicy6Dstaddr',
    'FirewallMulticastPolicy6Srcaddr',
    'FirewallMulticastPolicyDstaddr',
    'FirewallMulticastPolicySrcaddr',
    'FirewallPolicy46Dstaddr',
    'FirewallPolicy46Poolname',
    'FirewallPolicy46Service',
    'FirewallPolicy46Srcaddr',
    'FirewallPolicy64Dstaddr',
    'FirewallPolicy64Poolname',
    'FirewallPolicy64Service',
    'FirewallPolicy64Srcaddr',
    'FirewallPolicy6AppCategory',
    'FirewallPolicy6AppGroup',
    'FirewallPolicy6Application',
    'FirewallPolicy6CustomLogField',
    'FirewallPolicy6Device',
    'FirewallPolicy6Dstaddr',
    'FirewallPolicy6Dstintf',
    'FirewallPolicy6FssoGroup',
    'FirewallPolicy6Group',
    'FirewallPolicy6Poolname',
    'FirewallPolicy6Service',
    'FirewallPolicy6Srcaddr',
    'FirewallPolicy6Srcintf',
    'FirewallPolicy6SslMirrorIntf',
    'FirewallPolicy6UrlCategory',
    'FirewallPolicy6User',
    'FirewallPolicyAppCategory',
    'FirewallPolicyAppGroup',
    'FirewallPolicyApplication',
    'FirewallPolicyCustomLogField',
    'FirewallPolicyDevice',
    'FirewallPolicyDstaddr6',
    'FirewallPolicyDstaddr',
    'FirewallPolicyDstintf',
    'FirewallPolicyFssoGroup',
    'FirewallPolicyGroup',
    'FirewallPolicyInternetService6Custom',
    'FirewallPolicyInternetService6CustomGroup',
    'FirewallPolicyInternetService6Group',
    'FirewallPolicyInternetService6Name',
    'FirewallPolicyInternetService6SrcCustom',
    'FirewallPolicyInternetService6SrcCustomGroup',
    'FirewallPolicyInternetService6SrcGroup',
    'FirewallPolicyInternetService6SrcName',
    'FirewallPolicyInternetServiceCustom',
    'FirewallPolicyInternetServiceCustomGroup',
    'FirewallPolicyInternetServiceGroup',
    'FirewallPolicyInternetServiceId',
    'FirewallPolicyInternetServiceName',
    'FirewallPolicyInternetServiceSrcCustom',
    'FirewallPolicyInternetServiceSrcCustomGroup',
    'FirewallPolicyInternetServiceSrcGroup',
    'FirewallPolicyInternetServiceSrcId',
    'FirewallPolicyInternetServiceSrcName',
    'FirewallPolicyNetworkServiceDynamic',
    'FirewallPolicyNetworkServiceSrcDynamic',
    'FirewallPolicyNtlmEnabledBrowser',
    'FirewallPolicyPcpPoolname',
    'FirewallPolicyPoolname6',
    'FirewallPolicyPoolname',
    'FirewallPolicyRtpAddr',
    'FirewallPolicyService',
    'FirewallPolicySgt',
    'FirewallPolicySrcVendorMac',
    'FirewallPolicySrcaddr6',
    'FirewallPolicySrcaddr',
    'FirewallPolicySrcintf',
    'FirewallPolicySslMirrorIntf',
    'FirewallPolicyUrlCategory',
    'FirewallPolicyUser',
    'FirewallPolicyZtnaEmsTag',
    'FirewallPolicyZtnaEmsTagSecondary',
    'FirewallPolicyZtnaGeoTag',
    'FirewallProfileProtocolOptionsCifs',
    'FirewallProfileProtocolOptionsCifsServerKeytab',
    'FirewallProfileProtocolOptionsDns',
    'FirewallProfileProtocolOptionsFtp',
    'FirewallProfileProtocolOptionsHttp',
    'FirewallProfileProtocolOptionsImap',
    'FirewallProfileProtocolOptionsMailSignature',
    'FirewallProfileProtocolOptionsMapi',
    'FirewallProfileProtocolOptionsNntp',
    'FirewallProfileProtocolOptionsPop3',
    'FirewallProfileProtocolOptionsSmtp',
    'FirewallProfileProtocolOptionsSsh',
    'FirewallProxyAddressApplication',
    'FirewallProxyAddressCategory',
    'FirewallProxyAddressHeaderGroup',
    'FirewallProxyAddressTagging',
    'FirewallProxyAddressTaggingTag',
    'FirewallProxyAddrgrpMember',
    'FirewallProxyAddrgrpTagging',
    'FirewallProxyAddrgrpTaggingTag',
    'FirewallProxyPolicyAccessProxy6',
    'FirewallProxyPolicyAccessProxy',
    'FirewallProxyPolicyDstaddr6',
    'FirewallProxyPolicyDstaddr',
    'FirewallProxyPolicyDstintf',
    'FirewallProxyPolicyGroup',
    'FirewallProxyPolicyInternetService6Custom',
    'FirewallProxyPolicyInternetService6CustomGroup',
    'FirewallProxyPolicyInternetService6Group',
    'FirewallProxyPolicyInternetService6Name',
    'FirewallProxyPolicyInternetServiceCustom',
    'FirewallProxyPolicyInternetServiceCustomGroup',
    'FirewallProxyPolicyInternetServiceGroup',
    'FirewallProxyPolicyInternetServiceId',
    'FirewallProxyPolicyInternetServiceName',
    'FirewallProxyPolicyPoolname',
    'FirewallProxyPolicyService',
    'FirewallProxyPolicySrcaddr6',
    'FirewallProxyPolicySrcaddr',
    'FirewallProxyPolicySrcintf',
    'FirewallProxyPolicyUser',
    'FirewallProxyPolicyZtnaEmsTag',
    'FirewallRegionCity',
    'FirewallScheduleGroupMember',
    'FirewallSecurityPolicyAppCategory',
    'FirewallSecurityPolicyAppGroup',
    'FirewallSecurityPolicyApplication',
    'FirewallSecurityPolicyDstaddr4',
    'FirewallSecurityPolicyDstaddr6',
    'FirewallSecurityPolicyDstaddr',
    'FirewallSecurityPolicyDstintf',
    'FirewallSecurityPolicyFssoGroup',
    'FirewallSecurityPolicyGroup',
    'FirewallSecurityPolicyInternetService6Custom',
    'FirewallSecurityPolicyInternetService6CustomGroup',
    'FirewallSecurityPolicyInternetService6Group',
    'FirewallSecurityPolicyInternetService6Name',
    'FirewallSecurityPolicyInternetService6SrcCustom',
    'FirewallSecurityPolicyInternetService6SrcCustomGroup',
    'FirewallSecurityPolicyInternetService6SrcGroup',
    'FirewallSecurityPolicyInternetService6SrcName',
    'FirewallSecurityPolicyInternetServiceCustom',
    'FirewallSecurityPolicyInternetServiceCustomGroup',
    'FirewallSecurityPolicyInternetServiceGroup',
    'FirewallSecurityPolicyInternetServiceId',
    'FirewallSecurityPolicyInternetServiceName',
    'FirewallSecurityPolicyInternetServiceSrcCustom',
    'FirewallSecurityPolicyInternetServiceSrcCustomGroup',
    'FirewallSecurityPolicyInternetServiceSrcGroup',
    'FirewallSecurityPolicyInternetServiceSrcId',
    'FirewallSecurityPolicyInternetServiceSrcName',
    'FirewallSecurityPolicySeqStatePolicyList',
    'FirewallSecurityPolicyService',
    'FirewallSecurityPolicySortStatePolicyList',
    'FirewallSecurityPolicySrcaddr4',
    'FirewallSecurityPolicySrcaddr6',
    'FirewallSecurityPolicySrcaddr',
    'FirewallSecurityPolicySrcintf',
    'FirewallSecurityPolicyUrlCategory',
    'FirewallSecurityPolicyUser',
    'FirewallServiceCustomAppCategory',
    'FirewallServiceCustomApplication',
    'FirewallServiceGroupMember',
    'FirewallShapingPolicyAppCategory',
    'FirewallShapingPolicyAppGroup',
    'FirewallShapingPolicyApplication',
    'FirewallShapingPolicyDstaddr6',
    'FirewallShapingPolicyDstaddr',
    'FirewallShapingPolicyDstintf',
    'FirewallShapingPolicyGroup',
    'FirewallShapingPolicyInternetServiceCustom',
    'FirewallShapingPolicyInternetServiceCustomGroup',
    'FirewallShapingPolicyInternetServiceGroup',
    'FirewallShapingPolicyInternetServiceId',
    'FirewallShapingPolicyInternetServiceName',
    'FirewallShapingPolicyInternetServiceSrcCustom',
    'FirewallShapingPolicyInternetServiceSrcCustomGroup',
    'FirewallShapingPolicyInternetServiceSrcGroup',
    'FirewallShapingPolicyInternetServiceSrcId',
    'FirewallShapingPolicyInternetServiceSrcName',
    'FirewallShapingPolicyService',
    'FirewallShapingPolicySrcaddr6',
    'FirewallShapingPolicySrcaddr',
    'FirewallShapingPolicySrcintf',
    'FirewallShapingPolicyUrlCategory',
    'FirewallShapingPolicyUser',
    'FirewallShapingProfileShapingEntry',
    'FirewallSnifferAnomaly',
    'FirewallSnifferIpThreatfeed',
    'FirewallSslSshProfileDot',
    'FirewallSslSshProfileFtps',
    'FirewallSslSshProfileHttps',
    'FirewallSslSshProfileImaps',
    'FirewallSslSshProfilePop3s',
    'FirewallSslSshProfileSmtps',
    'FirewallSslSshProfileSsh',
    'FirewallSslSshProfileSsl',
    'FirewallSslSshProfileSslExempt',
    'FirewallSslSshProfileSslServer',
    'FirewallTtlPolicyService',
    'FirewallTtlPolicySrcaddr',
    'FirewallVip46Monitor',
    'FirewallVip46Realserver',
    'FirewallVip46SrcFilter',
    'FirewallVip46SrcintfFilter',
    'FirewallVip64Monitor',
    'FirewallVip64Realserver',
    'FirewallVip64SrcFilter',
    'FirewallVip6Monitor',
    'FirewallVip6Realserver',
    'FirewallVip6SrcFilter',
    'FirewallVip6SslCipherSuite',
    'FirewallVip6SslServerCipherSuite',
    'FirewallVipExtaddr',
    'FirewallVipMappedip',
    'FirewallVipMonitor',
    'FirewallVipRealserver',
    'FirewallVipService',
    'FirewallVipSrcFilter',
    'FirewallVipSrcintfFilter',
    'FirewallVipSslCipherSuite',
    'FirewallVipSslServerCipherSuite',
    'FirewallVipgrp46Member',
    'FirewallVipgrp64Member',
    'FirewallVipgrp6Member',
    'FirewallVipgrpMember',
    'FirewallWildcardFqdnGroupMember',
    'GetFirewallAddress6ListResult',
    'GetFirewallAddress6MacaddrResult',
    'GetFirewallAddress6SubnetSegmentResult',
    'GetFirewallAddress6TaggingResult',
    'GetFirewallAddress6TaggingTagResult',
    'GetFirewallAddress6TemplateSubnetSegmentResult',
    'GetFirewallAddress6TemplateSubnetSegmentValueResult',
    'GetFirewallAddressFssoGroupResult',
    'GetFirewallAddressListResult',
    'GetFirewallAddressMacaddrResult',
    'GetFirewallAddressTaggingResult',
    'GetFirewallAddressTaggingTagResult',
    'GetFirewallAddrgrp6ExcludeMemberResult',
    'GetFirewallAddrgrp6MemberResult',
    'GetFirewallAddrgrp6TaggingResult',
    'GetFirewallAddrgrp6TaggingTagResult',
    'GetFirewallAddrgrpExcludeMemberResult',
    'GetFirewallAddrgrpMemberResult',
    'GetFirewallAddrgrpTaggingResult',
    'GetFirewallAddrgrpTaggingTagResult',
    'GetFirewallCentralSnatMapDstAddr6Result',
    'GetFirewallCentralSnatMapDstAddrResult',
    'GetFirewallCentralSnatMapDstintfResult',
    'GetFirewallCentralSnatMapNatIppool6Result',
    'GetFirewallCentralSnatMapNatIppoolResult',
    'GetFirewallCentralSnatMapOrigAddr6Result',
    'GetFirewallCentralSnatMapOrigAddrResult',
    'GetFirewallCentralSnatMapSrcintfResult',
    'GetFirewallConsolidatedPolicyAppCategoryResult',
    'GetFirewallConsolidatedPolicyAppGroupResult',
    'GetFirewallConsolidatedPolicyApplicationResult',
    'GetFirewallConsolidatedPolicyDstaddr4Result',
    'GetFirewallConsolidatedPolicyDstaddr6Result',
    'GetFirewallConsolidatedPolicyDstintfResult',
    'GetFirewallConsolidatedPolicyFssoGroupResult',
    'GetFirewallConsolidatedPolicyGroupResult',
    'GetFirewallConsolidatedPolicyInternetServiceCustomResult',
    'GetFirewallConsolidatedPolicyInternetServiceCustomGroupResult',
    'GetFirewallConsolidatedPolicyInternetServiceGroupResult',
    'GetFirewallConsolidatedPolicyInternetServiceIdResult',
    'GetFirewallConsolidatedPolicyInternetServiceNameResult',
    'GetFirewallConsolidatedPolicyInternetServiceSrcCustomResult',
    'GetFirewallConsolidatedPolicyInternetServiceSrcCustomGroupResult',
    'GetFirewallConsolidatedPolicyInternetServiceSrcGroupResult',
    'GetFirewallConsolidatedPolicyInternetServiceSrcIdResult',
    'GetFirewallConsolidatedPolicyInternetServiceSrcNameResult',
    'GetFirewallConsolidatedPolicyPoolname4Result',
    'GetFirewallConsolidatedPolicyPoolname6Result',
    'GetFirewallConsolidatedPolicyServiceResult',
    'GetFirewallConsolidatedPolicySrcaddr4Result',
    'GetFirewallConsolidatedPolicySrcaddr6Result',
    'GetFirewallConsolidatedPolicySrcintfResult',
    'GetFirewallConsolidatedPolicyUrlCategoryResult',
    'GetFirewallConsolidatedPolicyUserResult',
    'GetFirewallDosPolicy6AnomalyResult',
    'GetFirewallDosPolicy6DstaddrResult',
    'GetFirewallDosPolicy6ServiceResult',
    'GetFirewallDosPolicy6SrcaddrResult',
    'GetFirewallDosPolicyAnomalyResult',
    'GetFirewallDosPolicyDstaddrResult',
    'GetFirewallDosPolicyServiceResult',
    'GetFirewallDosPolicySrcaddrResult',
    'GetFirewallInternetServiceCustomEntryResult',
    'GetFirewallInternetServiceCustomEntryDst6Result',
    'GetFirewallInternetServiceCustomEntryDstResult',
    'GetFirewallInternetServiceCustomEntryPortRangeResult',
    'GetFirewallInternetServiceCustomGroupMemberResult',
    'GetFirewallInternetServiceDefinitionEntryResult',
    'GetFirewallInternetServiceDefinitionEntryPortRangeResult',
    'GetFirewallInternetServiceExtensionDisableEntryResult',
    'GetFirewallInternetServiceExtensionDisableEntryIp6RangeResult',
    'GetFirewallInternetServiceExtensionDisableEntryIpRangeResult',
    'GetFirewallInternetServiceExtensionDisableEntryPortRangeResult',
    'GetFirewallInternetServiceExtensionEntryResult',
    'GetFirewallInternetServiceExtensionEntryDst6Result',
    'GetFirewallInternetServiceExtensionEntryDstResult',
    'GetFirewallInternetServiceExtensionEntryPortRangeResult',
    'GetFirewallInternetServiceGroupMemberResult',
    'GetFirewallMulticastAddress6TaggingResult',
    'GetFirewallMulticastAddress6TaggingTagResult',
    'GetFirewallMulticastAddressTaggingResult',
    'GetFirewallMulticastAddressTaggingTagResult',
    'GetFirewallPolicy46DstaddrResult',
    'GetFirewallPolicy46PoolnameResult',
    'GetFirewallPolicy46ServiceResult',
    'GetFirewallPolicy46SrcaddrResult',
    'GetFirewallPolicy64DstaddrResult',
    'GetFirewallPolicy64PoolnameResult',
    'GetFirewallPolicy64ServiceResult',
    'GetFirewallPolicy64SrcaddrResult',
    'GetFirewallPolicy6AppCategoryResult',
    'GetFirewallPolicy6AppGroupResult',
    'GetFirewallPolicy6ApplicationResult',
    'GetFirewallPolicy6CustomLogFieldResult',
    'GetFirewallPolicy6DeviceResult',
    'GetFirewallPolicy6DstaddrResult',
    'GetFirewallPolicy6DstintfResult',
    'GetFirewallPolicy6FssoGroupResult',
    'GetFirewallPolicy6GroupResult',
    'GetFirewallPolicy6PoolnameResult',
    'GetFirewallPolicy6ServiceResult',
    'GetFirewallPolicy6SrcaddrResult',
    'GetFirewallPolicy6SrcintfResult',
    'GetFirewallPolicy6SslMirrorIntfResult',
    'GetFirewallPolicy6UrlCategoryResult',
    'GetFirewallPolicy6UserResult',
    'GetFirewallPolicyAppCategoryResult',
    'GetFirewallPolicyAppGroupResult',
    'GetFirewallPolicyApplicationResult',
    'GetFirewallPolicyCustomLogFieldResult',
    'GetFirewallPolicyDeviceResult',
    'GetFirewallPolicyDstaddr6Result',
    'GetFirewallPolicyDstaddrResult',
    'GetFirewallPolicyDstintfResult',
    'GetFirewallPolicyFssoGroupResult',
    'GetFirewallPolicyGroupResult',
    'GetFirewallPolicyInternetService6CustomResult',
    'GetFirewallPolicyInternetService6CustomGroupResult',
    'GetFirewallPolicyInternetService6GroupResult',
    'GetFirewallPolicyInternetService6NameResult',
    'GetFirewallPolicyInternetService6SrcCustomResult',
    'GetFirewallPolicyInternetService6SrcCustomGroupResult',
    'GetFirewallPolicyInternetService6SrcGroupResult',
    'GetFirewallPolicyInternetService6SrcNameResult',
    'GetFirewallPolicyInternetServiceCustomResult',
    'GetFirewallPolicyInternetServiceCustomGroupResult',
    'GetFirewallPolicyInternetServiceGroupResult',
    'GetFirewallPolicyInternetServiceIdResult',
    'GetFirewallPolicyInternetServiceNameResult',
    'GetFirewallPolicyInternetServiceSrcCustomResult',
    'GetFirewallPolicyInternetServiceSrcCustomGroupResult',
    'GetFirewallPolicyInternetServiceSrcGroupResult',
    'GetFirewallPolicyInternetServiceSrcIdResult',
    'GetFirewallPolicyInternetServiceSrcNameResult',
    'GetFirewallPolicyNetworkServiceDynamicResult',
    'GetFirewallPolicyNetworkServiceSrcDynamicResult',
    'GetFirewallPolicyNtlmEnabledBrowserResult',
    'GetFirewallPolicyPcpPoolnameResult',
    'GetFirewallPolicyPoolname6Result',
    'GetFirewallPolicyPoolnameResult',
    'GetFirewallPolicyRtpAddrResult',
    'GetFirewallPolicyServiceResult',
    'GetFirewallPolicySgtResult',
    'GetFirewallPolicySrcVendorMacResult',
    'GetFirewallPolicySrcaddr6Result',
    'GetFirewallPolicySrcaddrResult',
    'GetFirewallPolicySrcintfResult',
    'GetFirewallPolicySslMirrorIntfResult',
    'GetFirewallPolicyUrlCategoryResult',
    'GetFirewallPolicyUserResult',
    'GetFirewallPolicyZtnaEmsTagResult',
    'GetFirewallPolicyZtnaEmsTagSecondaryResult',
    'GetFirewallPolicyZtnaGeoTagResult',
    'GetFirewallProfileProtocolOptionsCifResult',
    'GetFirewallProfileProtocolOptionsCifServerKeytabResult',
    'GetFirewallProfileProtocolOptionsDnResult',
    'GetFirewallProfileProtocolOptionsFtpResult',
    'GetFirewallProfileProtocolOptionsHttpResult',
    'GetFirewallProfileProtocolOptionsImapResult',
    'GetFirewallProfileProtocolOptionsMailSignatureResult',
    'GetFirewallProfileProtocolOptionsMapiResult',
    'GetFirewallProfileProtocolOptionsNntpResult',
    'GetFirewallProfileProtocolOptionsPop3Result',
    'GetFirewallProfileProtocolOptionsSmtpResult',
    'GetFirewallProfileProtocolOptionsSshResult',
    'GetFirewallProxyAddressApplicationResult',
    'GetFirewallProxyAddressCategoryResult',
    'GetFirewallProxyAddressHeaderGroupResult',
    'GetFirewallProxyAddressTaggingResult',
    'GetFirewallProxyAddressTaggingTagResult',
    'GetFirewallProxyAddrgrpMemberResult',
    'GetFirewallProxyAddrgrpTaggingResult',
    'GetFirewallProxyAddrgrpTaggingTagResult',
    'GetFirewallProxyPolicyAccessProxy6Result',
    'GetFirewallProxyPolicyAccessProxyResult',
    'GetFirewallProxyPolicyDstaddr6Result',
    'GetFirewallProxyPolicyDstaddrResult',
    'GetFirewallProxyPolicyDstintfResult',
    'GetFirewallProxyPolicyGroupResult',
    'GetFirewallProxyPolicyInternetService6CustomResult',
    'GetFirewallProxyPolicyInternetService6CustomGroupResult',
    'GetFirewallProxyPolicyInternetService6GroupResult',
    'GetFirewallProxyPolicyInternetService6NameResult',
    'GetFirewallProxyPolicyInternetServiceCustomResult',
    'GetFirewallProxyPolicyInternetServiceCustomGroupResult',
    'GetFirewallProxyPolicyInternetServiceGroupResult',
    'GetFirewallProxyPolicyInternetServiceIdResult',
    'GetFirewallProxyPolicyInternetServiceNameResult',
    'GetFirewallProxyPolicyPoolnameResult',
    'GetFirewallProxyPolicyServiceResult',
    'GetFirewallProxyPolicySrcaddr6Result',
    'GetFirewallProxyPolicySrcaddrResult',
    'GetFirewallProxyPolicySrcintfResult',
    'GetFirewallProxyPolicyUserResult',
    'GetFirewallProxyPolicyZtnaEmsTagResult',
    'GetFirewallScheduleGroupMemberResult',
    'GetFirewallServiceCustomAppCategoryResult',
    'GetFirewallServiceCustomApplicationResult',
    'GetFirewallServiceGroupMemberResult',
    'GetFirewallWildcardFqdnGroupMemberResult',
    'GetRouterAccessList6RuleResult',
    'GetRouterAccessListRuleResult',
    'GetRouterAspathListRuleResult',
    'GetRouterBfd6MultihopTemplateResult',
    'GetRouterBfd6NeighborResult',
    'GetRouterBfdMultihopTemplateResult',
    'GetRouterBfdNeighborResult',
    'GetRouterBgpAdminDistanceResult',
    'GetRouterBgpAggregateAddress6Result',
    'GetRouterBgpAggregateAddressResult',
    'GetRouterBgpConfederationPeerResult',
    'GetRouterBgpNeighborResult',
    'GetRouterBgpNeighborConditionalAdvertise6Result',
    'GetRouterBgpNeighborConditionalAdvertiseResult',
    'GetRouterBgpNeighborGroupResult',
    'GetRouterBgpNeighborRange6Result',
    'GetRouterBgpNeighborRangeResult',
    'GetRouterBgpNetwork6Result',
    'GetRouterBgpNetworkResult',
    'GetRouterBgpRedistribute6Result',
    'GetRouterBgpRedistributeResult',
    'GetRouterBgpVrf6Result',
    'GetRouterBgpVrf6LeakTargetResult',
    'GetRouterBgpVrfResult',
    'GetRouterBgpVrfExportRtResult',
    'GetRouterBgpVrfImportRtResult',
    'GetRouterBgpVrfLeak6Result',
    'GetRouterBgpVrfLeak6TargetResult',
    'GetRouterBgpVrfLeakResult',
    'GetRouterBgpVrfLeakTargetResult',
    'GetRouterCommunityListRuleResult',
    'GetRouterIsisIsisInterfaceResult',
    'GetRouterIsisIsisNetResult',
    'GetRouterIsisRedistribute6Result',
    'GetRouterIsisRedistributeResult',
    'GetRouterIsisSummaryAddress6Result',
    'GetRouterIsisSummaryAddressResult',
    'GetRouterKeyChainKeyResult',
    'GetRouterMulticast6InterfaceResult',
    'GetRouterMulticast6PimSmGlobalResult',
    'GetRouterMulticast6PimSmGlobalRpAddressResult',
    'GetRouterMulticastFlowFlowResult',
    'GetRouterMulticastInterfaceResult',
    'GetRouterMulticastInterfaceIgmpResult',
    'GetRouterMulticastInterfaceJoinGroupResult',
    'GetRouterMulticastPimSmGlobalResult',
    'GetRouterMulticastPimSmGlobalRpAddressResult',
    'GetRouterOspf6AreaResult',
    'GetRouterOspf6AreaIpsecKeyResult',
    'GetRouterOspf6AreaRangeResult',
    'GetRouterOspf6AreaVirtualLinkResult',
    'GetRouterOspf6AreaVirtualLinkIpsecKeyResult',
    'GetRouterOspf6Ospf6InterfaceResult',
    'GetRouterOspf6Ospf6InterfaceIpsecKeyResult',
    'GetRouterOspf6Ospf6InterfaceNeighborResult',
    'GetRouterOspf6PassiveInterfaceResult',
    'GetRouterOspf6RedistributeResult',
    'GetRouterOspf6SummaryAddressResult',
    'GetRouterOspfAreaResult',
    'GetRouterOspfAreaFilterListResult',
    'GetRouterOspfAreaRangeResult',
    'GetRouterOspfAreaVirtualLinkResult',
    'GetRouterOspfAreaVirtualLinkMd5KeyResult',
    'GetRouterOspfDistributeListResult',
    'GetRouterOspfNeighborResult',
    'GetRouterOspfNetworkResult',
    'GetRouterOspfOspfInterfaceResult',
    'GetRouterOspfOspfInterfaceMd5KeyResult',
    'GetRouterOspfPassiveInterfaceResult',
    'GetRouterOspfRedistributeResult',
    'GetRouterOspfSummaryAddressResult',
    'GetRouterPolicy6DstaddrResult',
    'GetRouterPolicy6InternetServiceCustomResult',
    'GetRouterPolicy6InternetServiceIdResult',
    'GetRouterPolicy6SrcaddrResult',
    'GetRouterPolicyDstResult',
    'GetRouterPolicyDstaddrResult',
    'GetRouterPolicyInputDeviceResult',
    'GetRouterPolicyInternetServiceCustomResult',
    'GetRouterPolicyInternetServiceIdResult',
    'GetRouterPolicySrcResult',
    'GetRouterPolicySrcaddrResult',
    'GetRouterPrefixList6RuleResult',
    'GetRouterPrefixListRuleResult',
    'GetRouterRipDistanceResult',
    'GetRouterRipDistributeListResult',
    'GetRouterRipInterfaceResult',
    'GetRouterRipNeighborResult',
    'GetRouterRipNetworkResult',
    'GetRouterRipOffsetListResult',
    'GetRouterRipPassiveInterfaceResult',
    'GetRouterRipRedistributeResult',
    'GetRouterRipngAggregateAddressResult',
    'GetRouterRipngDistanceResult',
    'GetRouterRipngDistributeListResult',
    'GetRouterRipngInterfaceResult',
    'GetRouterRipngNeighborResult',
    'GetRouterRipngNetworkResult',
    'GetRouterRipngOffsetListResult',
    'GetRouterRipngPassiveInterfaceResult',
    'GetRouterRipngRedistributeResult',
    'GetRouterRouteMapRuleResult',
    'GetRouterRouteMapRuleSetAspathResult',
    'GetRouterRouteMapRuleSetCommunityResult',
    'GetRouterRouteMapRuleSetExtcommunityRtResult',
    'GetRouterRouteMapRuleSetExtcommunitySooResult',
    'GetRouterStatic6SdwanZoneResult',
    'GetRouterStaticSdwanZoneResult',
    'GetRouterbgpNeighborConditionalAdvertise6Result',
    'GetRouterbgpNeighborConditionalAdvertiseResult',
    'GetSystemAccprofileFwgrpPermissionResult',
    'GetSystemAccprofileLoggrpPermissionResult',
    'GetSystemAccprofileNetgrpPermissionResult',
    'GetSystemAccprofileSysgrpPermissionResult',
    'GetSystemAccprofileUtmgrpPermissionResult',
    'GetSystemAdminGuestUsergroupResult',
    'GetSystemAdminGuiDashboardResult',
    'GetSystemAdminGuiDashboardWidgetResult',
    'GetSystemAdminGuiDashboardWidgetFilterResult',
    'GetSystemAdminGuiGlobalMenuFavoriteResult',
    'GetSystemAdminGuiNewFeatureAcknowledgeResult',
    'GetSystemAdminGuiVdomMenuFavoriteResult',
    'GetSystemAdminLoginTimeResult',
    'GetSystemAdminVdomResult',
    'GetSystemApiUserTrusthostResult',
    'GetSystemApiUserVdomResult',
    'GetSystemAutomationActionEmailToResult',
    'GetSystemAutomationActionHeaderResult',
    'GetSystemAutomationActionHttpHeaderResult',
    'GetSystemAutomationActionSdnConnectorResult',
    'GetSystemAutomationDestinationDestinationResult',
    'GetSystemAutomationTriggerFieldResult',
    'GetSystemAutomationTriggerLogidBlockResult',
    'GetSystemAutomationTriggerVdomResult',
    'GetSystemCentralManagementServerListResult',
    'GetSystemClusterSyncDownIntfsBeforeSessSyncResult',
    'GetSystemClusterSyncSessionSyncFilterResult',
    'GetSystemClusterSyncSessionSyncFilterCustomServiceResult',
    'GetSystemClusterSyncSyncvdResult',
    'GetSystemCsfFabricConnectorResult',
    'GetSystemCsfFabricConnectorVdomResult',
    'GetSystemCsfFabricDeviceResult',
    'GetSystemCsfTrustedListResult',
    'GetSystemDdnsDdnsServerAddrResult',
    'GetSystemDdnsMonitorInterfaceResult',
    'GetSystemDhcpServerExcludeRangeResult',
    'GetSystemDhcpServerExcludeRangeUciStringResult',
    'GetSystemDhcpServerExcludeRangeVciStringResult',
    'GetSystemDhcpServerIpRangeResult',
    'GetSystemDhcpServerIpRangeUciStringResult',
    'GetSystemDhcpServerIpRangeVciStringResult',
    'GetSystemDhcpServerOptionResult',
    'GetSystemDhcpServerOptionUciStringResult',
    'GetSystemDhcpServerOptionVciStringResult',
    'GetSystemDhcpServerReservedAddressResult',
    'GetSystemDhcpServerTftpServerResult',
    'GetSystemDhcpServerVciStringResult',
    'GetSystemDnsDatabaseDnsEntryResult',
    'GetSystemDnsDomainResult',
    'GetSystemDnsServerHostnameResult',
    'GetSystemGlobalInternetServiceDownloadListResult',
    'GetSystemHaHaMgmtInterfaceResult',
    'GetSystemHaSecondaryVclusterResult',
    'GetSystemHaUnicastPeerResult',
    'GetSystemHaVclusterResult',
    'GetSystemHaVclusterVdomResult',
    'GetSystemInterfaceClientOptionResult',
    'GetSystemInterfaceDhcpSnoopingServerListResult',
    'GetSystemInterfaceFailAlertInterfaceResult',
    'GetSystemInterfaceIpv6Result',
    'GetSystemInterfaceIpv6Dhcp6IapdListResult',
    'GetSystemInterfaceIpv6Ip6DelegatedPrefixListResult',
    'GetSystemInterfaceIpv6Ip6ExtraAddrResult',
    'GetSystemInterfaceIpv6Ip6PrefixListResult',
    'GetSystemInterfaceIpv6Ip6PrefixListDnsslResult',
    'GetSystemInterfaceIpv6Vrrp6Result',
    'GetSystemInterfaceManagedDeviceResult',
    'GetSystemInterfaceMemberResult',
    'GetSystemInterfaceSecondaryipResult',
    'GetSystemInterfaceSecurityGroupResult',
    'GetSystemInterfaceTaggingResult',
    'GetSystemInterfaceTaggingTagResult',
    'GetSystemInterfaceVrrpResult',
    'GetSystemInterfaceVrrpProxyArpResult',
    'GetSystemLinkMonitorRouteResult',
    'GetSystemLinkMonitorServerResult',
    'GetSystemLinkMonitorServerListResult',
    'GetSystemLldpNetworkPolicyGuestResult',
    'GetSystemLldpNetworkPolicyGuestVoiceSignalingResult',
    'GetSystemLldpNetworkPolicySoftphoneResult',
    'GetSystemLldpNetworkPolicyStreamingVideoResult',
    'GetSystemLldpNetworkPolicyVideoConferencingResult',
    'GetSystemLldpNetworkPolicyVideoSignalingResult',
    'GetSystemLldpNetworkPolicyVoiceResult',
    'GetSystemLldpNetworkPolicyVoiceSignalingResult',
    'GetSystemMobileTunnelNetworkResult',
    'GetSystemNat64SecondaryPrefixResult',
    'GetSystemNdProxyMemberResult',
    'GetSystemNtpInterfaceResult',
    'GetSystemNtpNtpserverResult',
    'GetSystemObjectTaggingTagResult',
    'GetSystemReplacemsgGroupAdminResult',
    'GetSystemReplacemsgGroupAlertmailResult',
    'GetSystemReplacemsgGroupAuthResult',
    'GetSystemReplacemsgGroupAutomationResult',
    'GetSystemReplacemsgGroupCustomMessageResult',
    'GetSystemReplacemsgGroupDeviceDetectionPortalResult',
    'GetSystemReplacemsgGroupEcResult',
    'GetSystemReplacemsgGroupFortiguardWfResult',
    'GetSystemReplacemsgGroupFtpResult',
    'GetSystemReplacemsgGroupHttpResult',
    'GetSystemReplacemsgGroupIcapResult',
    'GetSystemReplacemsgGroupMailResult',
    'GetSystemReplacemsgGroupNacQuarResult',
    'GetSystemReplacemsgGroupNntpResult',
    'GetSystemReplacemsgGroupSpamResult',
    'GetSystemReplacemsgGroupSslvpnResult',
    'GetSystemReplacemsgGroupTrafficQuotaResult',
    'GetSystemReplacemsgGroupUtmResult',
    'GetSystemReplacemsgGroupWebproxyResult',
    'GetSystemSdnConnectorCompartmentListResult',
    'GetSystemSdnConnectorExternalAccountListResult',
    'GetSystemSdnConnectorExternalAccountListRegionListResult',
    'GetSystemSdnConnectorExternalIpResult',
    'GetSystemSdnConnectorForwardingRuleResult',
    'GetSystemSdnConnectorGcpProjectListResult',
    'GetSystemSdnConnectorGcpProjectListGcpZoneListResult',
    'GetSystemSdnConnectorNicResult',
    'GetSystemSdnConnectorNicIpResult',
    'GetSystemSdnConnectorOciRegionListResult',
    'GetSystemSdnConnectorRouteResult',
    'GetSystemSdnConnectorRouteTableResult',
    'GetSystemSdnConnectorRouteTableRouteResult',
    'GetSystemSdnConnectorServerListResult',
    'GetSystemSessionTtlPortResult',
    'GetSystemSnmpCommunityHostResult',
    'GetSystemSnmpCommunityHosts6Result',
    'GetSystemSnmpCommunityVdomResult',
    'GetSystemSnmpUserVdomResult',
    'GetSystemVdomExceptionVdomResult',
    'GetSystemVirtualWanLinkFailAlertInterfaceResult',
    'GetSystemVirtualWanLinkHealthCheckResult',
    'GetSystemVirtualWanLinkHealthCheckMemberResult',
    'GetSystemVirtualWanLinkHealthCheckSlaResult',
    'GetSystemVirtualWanLinkMemberResult',
    'GetSystemVirtualWanLinkNeighborResult',
    'GetSystemVirtualWanLinkServiceResult',
    'GetSystemVirtualWanLinkServiceDst6Result',
    'GetSystemVirtualWanLinkServiceDstResult',
    'GetSystemVirtualWanLinkServiceGroupResult',
    'GetSystemVirtualWanLinkServiceInputDeviceResult',
    'GetSystemVirtualWanLinkServiceInternetServiceAppCtrlResult',
    'GetSystemVirtualWanLinkServiceInternetServiceAppCtrlGroupResult',
    'GetSystemVirtualWanLinkServiceInternetServiceCtrlResult',
    'GetSystemVirtualWanLinkServiceInternetServiceCtrlGroupResult',
    'GetSystemVirtualWanLinkServiceInternetServiceCustomResult',
    'GetSystemVirtualWanLinkServiceInternetServiceCustomGroupResult',
    'GetSystemVirtualWanLinkServiceInternetServiceGroupResult',
    'GetSystemVirtualWanLinkServiceInternetServiceIdResult',
    'GetSystemVirtualWanLinkServiceInternetServiceNameResult',
    'GetSystemVirtualWanLinkServicePriorityMemberResult',
    'GetSystemVirtualWanLinkServiceSlaResult',
    'GetSystemVirtualWanLinkServiceSrc6Result',
    'GetSystemVirtualWanLinkServiceSrcResult',
    'GetSystemVirtualWanLinkServiceUserResult',
    'GetSystemVirtualWanLinkZoneResult',
    'GetSystemVxlanRemoteIp6Result',
    'GetSystemVxlanRemoteIpResult',
    'GetSystemZoneInterfaceResult',
    'GetSystemZoneTaggingResult',
    'GetSystemZoneTaggingTagResult',
    'IcapProfileIcapHeader',
    'IcapProfileRespmodForwardRule',
    'IcapProfileRespmodForwardRuleHeaderGroup',
    'IcapProfileRespmodForwardRuleHttpRespStatusCode',
    'IcapServerGroupServerList',
    'IpsDecoderParameter',
    'IpsGlobalTlsActiveProbe',
    'IpsRuleMetadata',
    'IpsSensorEntry',
    'IpsSensorEntryCfe',
    'IpsSensorEntryExemptIp',
    'IpsSensorEntryRule',
    'IpsSensorEntryVulnType',
    'IpsSensorFilter',
    'IpsSensorOverride',
    'IpsSensorOverrideExemptIp',
    'LogDiskFilterFreeStyle',
    'LogFortianalyzer2FilterFreeStyle',
    'LogFortianalyzer2OverrideFilterFreeStyle',
    'LogFortianalyzer2OverrideSettingSerial',
    'LogFortianalyzer2SettingSerial',
    'LogFortianalyzer3FilterFreeStyle',
    'LogFortianalyzer3OverrideFilterFreeStyle',
    'LogFortianalyzer3OverrideSettingSerial',
    'LogFortianalyzer3SettingSerial',
    'LogFortianalyzerCloudFilterFreeStyle',
    'LogFortianalyzerCloudOverrideFilterFreeStyle',
    'LogFortianalyzerCloudSettingSerial',
    'LogFortianalyzerFilterFreeStyle',
    'LogFortianalyzerOverrideFilterFreeStyle',
    'LogFortianalyzerOverrideSettingSerial',
    'LogFortianalyzerSettingSerial',
    'LogFortiguardFilterFreeStyle',
    'LogFortiguardOverrideFilterFreeStyle',
    'LogMemoryFilterFreeStyle',
    'LogNullDeviceFilterFreeStyle',
    'LogSettingCustomLogField',
    'LogSyslogd2FilterFreeStyle',
    'LogSyslogd2OverrideFilterFreeStyle',
    'LogSyslogd2OverrideSettingCustomFieldName',
    'LogSyslogd2SettingCustomFieldName',
    'LogSyslogd3FilterFreeStyle',
    'LogSyslogd3OverrideFilterFreeStyle',
    'LogSyslogd3OverrideSettingCustomFieldName',
    'LogSyslogd3SettingCustomFieldName',
    'LogSyslogd4FilterFreeStyle',
    'LogSyslogd4OverrideFilterFreeStyle',
    'LogSyslogd4OverrideSettingCustomFieldName',
    'LogSyslogd4SettingCustomFieldName',
    'LogSyslogdFilterFreeStyle',
    'LogSyslogdOverrideFilterFreeStyle',
    'LogSyslogdOverrideSettingCustomFieldName',
    'LogSyslogdSettingCustomFieldName',
    'LogThreatWeightApplication',
    'LogThreatWeightGeolocation',
    'LogThreatWeightIps',
    'LogThreatWeightLevel',
    'LogThreatWeightMalware',
    'LogThreatWeightWeb',
    'LogWebtrendsFilterFreeStyle',
    'NsxtServiceChainServiceIndex',
    'ReportChartCategorySeries',
    'ReportChartColumn',
    'ReportChartColumnMapping',
    'ReportChartDrillDownChart',
    'ReportChartValueSeries',
    'ReportChartXSeries',
    'ReportChartYSeries',
    'ReportDatasetField',
    'ReportDatasetParameter',
    'ReportLayoutBodyItem',
    'ReportLayoutBodyItemList',
    'ReportLayoutBodyItemParameter',
    'ReportLayoutPage',
    'ReportLayoutPageFooter',
    'ReportLayoutPageFooterFooterItem',
    'ReportLayoutPageHeader',
    'ReportLayoutPageHeaderHeaderItem',
    'RouterAccessList6Rule',
    'RouterAccessListRule',
    'RouterAspathListRule',
    'RouterBfd6MultihopTemplate',
    'RouterBfd6Neighbor',
    'RouterBfdMultihopTemplate',
    'RouterBfdNeighbor',
    'RouterBgpAdminDistance',
    'RouterBgpAggregateAddress6',
    'RouterBgpAggregateAddress',
    'RouterBgpConfederationPeer',
    'RouterBgpNeighbor',
    'RouterBgpNeighborConditionalAdvertise6',
    'RouterBgpNeighborConditionalAdvertise',
    'RouterBgpNeighborGroup',
    'RouterBgpNeighborRange6',
    'RouterBgpNeighborRange',
    'RouterBgpNetwork6',
    'RouterBgpNetwork',
    'RouterBgpRedistribute6',
    'RouterBgpRedistribute',
    'RouterBgpVrf6',
    'RouterBgpVrf6LeakTarget',
    'RouterBgpVrf',
    'RouterBgpVrfExportRt',
    'RouterBgpVrfImportRt',
    'RouterBgpVrfLeak6',
    'RouterBgpVrfLeak6Target',
    'RouterBgpVrfLeak',
    'RouterBgpVrfLeakTarget',
    'RouterCommunityListRule',
    'RouterExtcommunityListRule',
    'RouterIsisIsisInterface',
    'RouterIsisIsisNet',
    'RouterIsisRedistribute6',
    'RouterIsisRedistribute',
    'RouterIsisSummaryAddress6',
    'RouterIsisSummaryAddress',
    'RouterKeyChainKey',
    'RouterMulticast6Interface',
    'RouterMulticast6PimSmGlobal',
    'RouterMulticast6PimSmGlobalRpAddress',
    'RouterMulticastFlowFlow',
    'RouterMulticastInterface',
    'RouterMulticastInterfaceIgmp',
    'RouterMulticastInterfaceJoinGroup',
    'RouterMulticastPimSmGlobal',
    'RouterMulticastPimSmGlobalRpAddress',
    'RouterOspf6Area',
    'RouterOspf6AreaIpsecKey',
    'RouterOspf6AreaRange',
    'RouterOspf6AreaVirtualLink',
    'RouterOspf6AreaVirtualLinkIpsecKey',
    'RouterOspf6Ospf6Interface',
    'RouterOspf6Ospf6InterfaceIpsecKey',
    'RouterOspf6Ospf6InterfaceNeighbor',
    'RouterOspf6PassiveInterface',
    'RouterOspf6Redistribute',
    'RouterOspf6SummaryAddress',
    'RouterOspfArea',
    'RouterOspfAreaFilterList',
    'RouterOspfAreaRange',
    'RouterOspfAreaVirtualLink',
    'RouterOspfAreaVirtualLinkMd5Key',
    'RouterOspfDistributeList',
    'RouterOspfNeighbor',
    'RouterOspfNetwork',
    'RouterOspfOspfInterface',
    'RouterOspfOspfInterfaceMd5Key',
    'RouterOspfPassiveInterface',
    'RouterOspfRedistribute',
    'RouterOspfSummaryAddress',
    'RouterPolicy6Dstaddr',
    'RouterPolicy6InternetServiceCustom',
    'RouterPolicy6InternetServiceId',
    'RouterPolicy6Srcaddr',
    'RouterPolicyDst',
    'RouterPolicyDstaddr',
    'RouterPolicyInputDevice',
    'RouterPolicyInternetServiceCustom',
    'RouterPolicyInternetServiceId',
    'RouterPolicySrc',
    'RouterPolicySrcaddr',
    'RouterPrefixList6Rule',
    'RouterPrefixListRule',
    'RouterRipDistance',
    'RouterRipDistributeList',
    'RouterRipInterface',
    'RouterRipNeighbor',
    'RouterRipNetwork',
    'RouterRipOffsetList',
    'RouterRipPassiveInterface',
    'RouterRipRedistribute',
    'RouterRipngAggregateAddress',
    'RouterRipngDistance',
    'RouterRipngDistributeList',
    'RouterRipngInterface',
    'RouterRipngNeighbor',
    'RouterRipngNetwork',
    'RouterRipngOffsetList',
    'RouterRipngPassiveInterface',
    'RouterRipngRedistribute',
    'RouterRouteMapRule',
    'RouterRouteMapRuleSetAspath',
    'RouterRouteMapRuleSetCommunity',
    'RouterRouteMapRuleSetExtcommunityRt',
    'RouterRouteMapRuleSetExtcommunitySoo',
    'RouterStatic6SdwanZone',
    'RouterStaticSdwanZone',
    'RouterbgpNeighborConditionalAdvertise6',
    'RouterbgpNeighborConditionalAdvertise',
    'Routerospf6Ospf6InterfaceIpsecKey',
    'Routerospf6Ospf6InterfaceNeighbor',
    'RouterospfOspfInterfaceMd5Key',
    'SctpFilterProfilePpidFilter',
    'SpamfilterBwlEntry',
    'SpamfilterBwordEntry',
    'SpamfilterDnsblEntry',
    'SpamfilterIptrustEntry',
    'SpamfilterMheaderEntry',
    'SpamfilterProfileGmail',
    'SpamfilterProfileImap',
    'SpamfilterProfileMapi',
    'SpamfilterProfileMsnHotmail',
    'SpamfilterProfilePop3',
    'SpamfilterProfileSmtp',
    'SpamfilterProfileYahooMail',
    'SshFilterProfileFileFilter',
    'SshFilterProfileFileFilterEntry',
    'SshFilterProfileFileFilterEntryFileType',
    'SshFilterProfileShellCommand',
    'SwitchControllerAclGroupIngress',
    'SwitchControllerAclIngressAction',
    'SwitchControllerAclIngressClassifier',
    'SwitchControllerAutoConfigCustomSwitchBinding',
    'SwitchControllerDynamicPortPolicyPolicy',
    'SwitchControllerDynamicPortPolicyPolicyInterfaceTag',
    'SwitchControllerFlowTrackingAggregate',
    'SwitchControllerFlowTrackingCollector',
    'SwitchControllerFortilinkSettingsNacPorts',
    'SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan',
    'SwitchControllerGlobalCustomCommand',
    'SwitchControllerGlobalDisableDiscovery',
    'SwitchControllerLldpProfileCustomTlv',
    'SwitchControllerLldpProfileMedLocationService',
    'SwitchControllerLldpProfileMedNetworkPolicy',
    'SwitchControllerLocationAddressCivic',
    'SwitchControllerLocationCoordinates',
    'SwitchControllerLocationElinNumber',
    'SwitchControllerManagedSwitchCustomCommand',
    'SwitchControllerManagedSwitchDhcpSnoopingStaticClient',
    'SwitchControllerManagedSwitchIgmpSnooping',
    'SwitchControllerManagedSwitchIgmpSnoopingVlan',
    'SwitchControllerManagedSwitchIpSourceGuard',
    'SwitchControllerManagedSwitchIpSourceGuardBindingEntry',
    'SwitchControllerManagedSwitchMirror',
    'SwitchControllerManagedSwitchMirrorSrcEgress',
    'SwitchControllerManagedSwitchMirrorSrcIngress',
    'SwitchControllerManagedSwitchN8021xSettings',
    'SwitchControllerManagedSwitchPort',
    'SwitchControllerManagedSwitchPortAclGroup',
    'SwitchControllerManagedSwitchPortAllowedVlan',
    'SwitchControllerManagedSwitchPortDhcpSnoopOption82Override',
    'SwitchControllerManagedSwitchPortExportTag',
    'SwitchControllerManagedSwitchPortFortiswitchAcl',
    'SwitchControllerManagedSwitchPortInterfaceTag',
    'SwitchControllerManagedSwitchPortMember',
    'SwitchControllerManagedSwitchPortUntaggedVlan',
    'SwitchControllerManagedSwitchRemoteLog',
    'SwitchControllerManagedSwitchSnmpCommunity',
    'SwitchControllerManagedSwitchSnmpCommunityHost',
    'SwitchControllerManagedSwitchSnmpSysinfo',
    'SwitchControllerManagedSwitchSnmpTrapThreshold',
    'SwitchControllerManagedSwitchSnmpUser',
    'SwitchControllerManagedSwitchStaticMac',
    'SwitchControllerManagedSwitchStormControl',
    'SwitchControllerManagedSwitchStpInstance',
    'SwitchControllerManagedSwitchStpSettings',
    'SwitchControllerManagedSwitchSwitchLog',
    'SwitchControllerManagedSwitchSwitchStpSettings',
    'SwitchControllerQosIpDscpMapMap',
    'SwitchControllerQosQueuePolicyCosQueue',
    'SwitchControllerQuarantineTarget',
    'SwitchControllerQuarantineTargetTag',
    'SwitchControllerSecurityPolicy8021XUserGroup',
    'SwitchControllerSnmpCommunityHost',
    'SwitchControllerStpInstanceVlanRange',
    'SwitchControllerSwitchGroupMember',
    'SwitchControllerTrafficSnifferTargetIp',
    'SwitchControllerTrafficSnifferTargetMac',
    'SwitchControllerTrafficSnifferTargetPort',
    'SwitchControllerTrafficSnifferTargetPortInPort',
    'SwitchControllerTrafficSnifferTargetPortOutPort',
    'SwitchControllerVlanPolicyAllowedVlan',
    'SwitchControllerVlanPolicyUntaggedVlan',
    'SwitchControllerVlanPortalMessageOverrides',
    'SwitchControllerVlanSelectedUsergroup',
    'SystemAPIUserSettingTrusthost',
    'SystemAccprofileFwgrpPermission',
    'SystemAccprofileLoggrpPermission',
    'SystemAccprofileNetgrpPermission',
    'SystemAccprofileSysgrpPermission',
    'SystemAccprofileUtmgrpPermission',
    'SystemAcmeAccount',
    'SystemAcmeInterface',
    'SystemAdminGuestUsergroup',
    'SystemAdminGuiDashboard',
    'SystemAdminGuiDashboardWidget',
    'SystemAdminGuiDashboardWidgetFilter',
    'SystemAdminGuiGlobalMenuFavorite',
    'SystemAdminGuiNewFeatureAcknowledge',
    'SystemAdminGuiVdomMenuFavorite',
    'SystemAdminLoginTime',
    'SystemAdminVdom',
    'SystemAlarmGroup',
    'SystemAlarmGroupFwPolicyViolation',
    'SystemApiUserTrusthost',
    'SystemApiUserVdom',
    'SystemAutomationActionEmailTo',
    'SystemAutomationActionHeader',
    'SystemAutomationActionHttpHeader',
    'SystemAutomationActionSdnConnector',
    'SystemAutomationDestinationDestination',
    'SystemAutomationStitchAction',
    'SystemAutomationStitchDestination',
    'SystemAutomationTriggerField',
    'SystemAutomationTriggerLogidBlock',
    'SystemAutomationTriggerVdom',
    'SystemCentralManagementServerList',
    'SystemClusterSyncDownIntfsBeforeSessSync',
    'SystemClusterSyncSessionSyncFilter',
    'SystemClusterSyncSessionSyncFilterCustomService',
    'SystemClusterSyncSyncvd',
    'SystemCsfFabricConnector',
    'SystemCsfFabricConnectorVdom',
    'SystemCsfFabricDevice',
    'SystemCsfTrustedList',
    'SystemDdnsDdnsServerAddr',
    'SystemDdnsMonitorInterface',
    'SystemDhcp6ServerIpRange',
    'SystemDhcp6ServerPrefixRange',
    'SystemDhcpServerExcludeRange',
    'SystemDhcpServerExcludeRangeUciString',
    'SystemDhcpServerExcludeRangeVciString',
    'SystemDhcpServerIpRange',
    'SystemDhcpServerIpRangeUciString',
    'SystemDhcpServerIpRangeVciString',
    'SystemDhcpServerOption',
    'SystemDhcpServerOptionUciString',
    'SystemDhcpServerOptionVciString',
    'SystemDhcpServerReservedAddress',
    'SystemDhcpServerTftpServer',
    'SystemDhcpServerVciString',
    'SystemDnsDatabaseDnsEntry',
    'SystemDnsDomain',
    'SystemDnsServerHostname',
    'SystemEvpnExportRt',
    'SystemEvpnImportRt',
    'SystemFabricVpnAdvertisedSubnet',
    'SystemFabricVpnOverlay',
    'SystemFederatedUpgradeNodeList',
    'SystemGeoipOverrideIp6Range',
    'SystemGeoipOverrideIpRange',
    'SystemGlobalInternetServiceDownloadList',
    'SystemHaHaMgmtInterface',
    'SystemHaSecondaryVcluster',
    'SystemHaUnicastPeer',
    'SystemHaVcluster',
    'SystemHaVclusterVdom',
    'SystemIkeDhGroup14',
    'SystemIkeDhGroup15',
    'SystemIkeDhGroup16',
    'SystemIkeDhGroup17',
    'SystemIkeDhGroup18',
    'SystemIkeDhGroup19',
    'SystemIkeDhGroup1',
    'SystemIkeDhGroup20',
    'SystemIkeDhGroup21',
    'SystemIkeDhGroup27',
    'SystemIkeDhGroup28',
    'SystemIkeDhGroup29',
    'SystemIkeDhGroup2',
    'SystemIkeDhGroup30',
    'SystemIkeDhGroup31',
    'SystemIkeDhGroup32',
    'SystemIkeDhGroup5',
    'SystemInterfaceClientOption',
    'SystemInterfaceDhcpSnoopingServerList',
    'SystemInterfaceFailAlertInterface',
    'SystemInterfaceIpv6',
    'SystemInterfaceIpv6Dhcp6IapdList',
    'SystemInterfaceIpv6Ip6DelegatedPrefixList',
    'SystemInterfaceIpv6Ip6ExtraAddr',
    'SystemInterfaceIpv6Ip6PrefixList',
    'SystemInterfaceIpv6Ip6PrefixListDnssl',
    'SystemInterfaceIpv6Vrrp6',
    'SystemInterfaceManagedDevice',
    'SystemInterfaceMember',
    'SystemInterfaceSecondaryip',
    'SystemInterfaceSecurityGroup',
    'SystemInterfaceTagging',
    'SystemInterfaceTaggingTag',
    'SystemInterfaceVrrp',
    'SystemInterfaceVrrpProxyArp',
    'SystemIpamPool',
    'SystemIpamRule',
    'SystemIpamRuleDevice',
    'SystemIpamRuleInterface',
    'SystemIpamRulePool',
    'SystemIpsecAggregateMember',
    'SystemLinkMonitorRoute',
    'SystemLinkMonitorServer',
    'SystemLinkMonitorServerList',
    'SystemLldpNetworkPolicyGuest',
    'SystemLldpNetworkPolicyGuestVoiceSignaling',
    'SystemLldpNetworkPolicySoftphone',
    'SystemLldpNetworkPolicyStreamingVideo',
    'SystemLldpNetworkPolicyVideoConferencing',
    'SystemLldpNetworkPolicyVideoSignaling',
    'SystemLldpNetworkPolicyVoice',
    'SystemLldpNetworkPolicyVoiceSignaling',
    'SystemMobileTunnelNetwork',
    'SystemNat64SecondaryPrefix',
    'SystemNdProxyMember',
    'SystemNpuPriorityProtocol',
    'SystemNtpInterface',
    'SystemNtpNtpserver',
    'SystemObjectTaggingTag',
    'SystemPcpServerPool',
    'SystemPcpServerPoolClientSubnet',
    'SystemPcpServerPoolIntlIntf',
    'SystemPcpServerPoolThirdPartySubnet',
    'SystemPtpServerInterface',
    'SystemReplacemsgGroupAdmin',
    'SystemReplacemsgGroupAlertmail',
    'SystemReplacemsgGroupAuth',
    'SystemReplacemsgGroupAutomation',
    'SystemReplacemsgGroupCustomMessage',
    'SystemReplacemsgGroupDeviceDetectionPortal',
    'SystemReplacemsgGroupEc',
    'SystemReplacemsgGroupFortiguardWf',
    'SystemReplacemsgGroupFtp',
    'SystemReplacemsgGroupHttp',
    'SystemReplacemsgGroupIcap',
    'SystemReplacemsgGroupMail',
    'SystemReplacemsgGroupNacQuar',
    'SystemReplacemsgGroupNntp',
    'SystemReplacemsgGroupSpam',
    'SystemReplacemsgGroupSslvpn',
    'SystemReplacemsgGroupTrafficQuota',
    'SystemReplacemsgGroupUtm',
    'SystemReplacemsgGroupWebproxy',
    'SystemSamlServiceProvider',
    'SystemSamlServiceProviderAssertionAttribute',
    'SystemSdnConnectorCompartmentList',
    'SystemSdnConnectorExternalAccountList',
    'SystemSdnConnectorExternalAccountListRegionList',
    'SystemSdnConnectorExternalIp',
    'SystemSdnConnectorForwardingRule',
    'SystemSdnConnectorGcpProjectList',
    'SystemSdnConnectorGcpProjectListGcpZoneList',
    'SystemSdnConnectorNic',
    'SystemSdnConnectorNicIp',
    'SystemSdnConnectorOciRegionList',
    'SystemSdnConnectorRoute',
    'SystemSdnConnectorRouteTable',
    'SystemSdnConnectorRouteTableRoute',
    'SystemSdnConnectorServerList',
    'SystemSdwanDuplication',
    'SystemSdwanDuplicationDstaddr6',
    'SystemSdwanDuplicationDstaddr',
    'SystemSdwanDuplicationDstintf',
    'SystemSdwanDuplicationService',
    'SystemSdwanDuplicationServiceId',
    'SystemSdwanDuplicationSrcaddr6',
    'SystemSdwanDuplicationSrcaddr',
    'SystemSdwanDuplicationSrcintf',
    'SystemSdwanFailAlertInterface',
    'SystemSdwanHealthCheck',
    'SystemSdwanHealthCheckMember',
    'SystemSdwanHealthCheckSla',
    'SystemSdwanMember',
    'SystemSdwanNeighbor',
    'SystemSdwanNeighborMemberBlock',
    'SystemSdwanService',
    'SystemSdwanServiceDst6',
    'SystemSdwanServiceDst',
    'SystemSdwanServiceGroup',
    'SystemSdwanServiceHealthCheck',
    'SystemSdwanServiceInputDevice',
    'SystemSdwanServiceInputZone',
    'SystemSdwanServiceInternetServiceAppCtrl',
    'SystemSdwanServiceInternetServiceAppCtrlCategory',
    'SystemSdwanServiceInternetServiceAppCtrlGroup',
    'SystemSdwanServiceInternetServiceCustom',
    'SystemSdwanServiceInternetServiceCustomGroup',
    'SystemSdwanServiceInternetServiceGroup',
    'SystemSdwanServiceInternetServiceName',
    'SystemSdwanServicePriorityMember',
    'SystemSdwanServicePriorityZone',
    'SystemSdwanServiceSla',
    'SystemSdwanServiceSrc6',
    'SystemSdwanServiceSrc',
    'SystemSdwanServiceUser',
    'SystemSdwanZone',
    'SystemSessionTtlPort',
    'SystemSettingsGuiDefaultPolicyColumn',
    'SystemSnmpCommunityHost',
    'SystemSnmpCommunityHosts6',
    'SystemSnmpCommunityVdom',
    'SystemSnmpUserVdom',
    'SystemSpeedTestScheduleSchedule',
    'SystemSpeedTestServerHost',
    'SystemSsoAdminVdom',
    'SystemSsoForticloudAdminVdom',
    'SystemSsoFortigateCloudAdminVdom',
    'SystemStandaloneClusterClusterPeer',
    'SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSync',
    'SystemStandaloneClusterClusterPeerSessionSyncFilter',
    'SystemStandaloneClusterClusterPeerSessionSyncFilterCustomService',
    'SystemStandaloneClusterClusterPeerSyncvd',
    'SystemSwitchInterfaceMember',
    'SystemSwitchInterfaceSpanSourcePort',
    'SystemVdomDnsServerHostname',
    'SystemVdomExceptionVdom',
    'SystemVirtualSwitchPort',
    'SystemVirtualWanLinkFailAlertInterface',
    'SystemVirtualWanLinkHealthCheck',
    'SystemVirtualWanLinkHealthCheckMember',
    'SystemVirtualWanLinkHealthCheckSla',
    'SystemVirtualWanLinkMember',
    'SystemVirtualWanLinkNeighbor',
    'SystemVirtualWanLinkService',
    'SystemVirtualWanLinkServiceDst6',
    'SystemVirtualWanLinkServiceDst',
    'SystemVirtualWanLinkServiceGroup',
    'SystemVirtualWanLinkServiceInputDevice',
    'SystemVirtualWanLinkServiceInternetServiceAppCtrl',
    'SystemVirtualWanLinkServiceInternetServiceAppCtrlGroup',
    'SystemVirtualWanLinkServiceInternetServiceCtrl',
    'SystemVirtualWanLinkServiceInternetServiceCtrlGroup',
    'SystemVirtualWanLinkServiceInternetServiceCustom',
    'SystemVirtualWanLinkServiceInternetServiceCustomGroup',
    'SystemVirtualWanLinkServiceInternetServiceGroup',
    'SystemVirtualWanLinkServiceInternetServiceId',
    'SystemVirtualWanLinkServiceInternetServiceName',
    'SystemVirtualWanLinkServicePriorityMember',
    'SystemVirtualWanLinkServiceSla',
    'SystemVirtualWanLinkServiceSrc6',
    'SystemVirtualWanLinkServiceSrc',
    'SystemVirtualWanLinkServiceUser',
    'SystemVirtualWanLinkZone',
    'SystemVirtualWirePairMember',
    'SystemVxlanRemoteIp6',
    'SystemVxlanRemoteIp',
    'SystemZoneInterface',
    'SystemZoneTagging',
    'SystemZoneTaggingTag',
    'UserDeviceAccessListDeviceList',
    'UserDeviceGroupMember',
    'UserDeviceGroupTagging',
    'UserDeviceGroupTaggingTag',
    'UserDeviceTagging',
    'UserDeviceTaggingTag',
    'UserDomainControllerExtraServer',
    'UserExchangeKdcIp',
    'UserFssoPollingAdgrp',
    'UserGroupGuest',
    'UserGroupMatch',
    'UserGroupMember',
    'UserNacPolicySeverity',
    'UserNacPolicySwitchGroup',
    'UserNacPolicySwitchScope',
    'UserPeergrpMember',
    'UserQuarantineTarget',
    'UserQuarantineTargetMac',
    'UserRadiusAccountingServer',
    'UserRadiusClass',
    'UserSecurityExemptListRule',
    'UserSecurityExemptListRuleDevice',
    'UserSecurityExemptListRuleDstaddr',
    'UserSecurityExemptListRuleService',
    'UserSecurityExemptListRuleSrcaddr',
    'UserSettingAuthPort',
    'VideofilterProfileFortiguardCategory',
    'VideofilterProfileFortiguardCategoryFilter',
    'VideofilterYoutubeChannelFilterEntry',
    'VoipProfileMsrp',
    'VoipProfileSccp',
    'VoipProfileSip',
    'VpnCertificateSettingCrlVerification',
    'VpnIpsecConcentratorMember',
    'VpnIpsecFecMapping',
    'VpnIpsecPhase1BackupGateway',
    'VpnIpsecPhase1Certificate',
    'VpnIpsecPhase1InterfaceBackupGateway',
    'VpnIpsecPhase1InterfaceCertificate',
    'VpnIpsecPhase1InterfaceIpv4ExcludeRange',
    'VpnIpsecPhase1InterfaceIpv6ExcludeRange',
    'VpnIpsecPhase1Ipv4ExcludeRange',
    'VpnIpsecPhase1Ipv6ExcludeRange',
    'VpnKmipServerServerList',
    'VpnOcvpnForticlientAccess',
    'VpnOcvpnForticlientAccessAuthGroup',
    'VpnOcvpnForticlientAccessAuthGroupOverlay',
    'VpnOcvpnOverlay',
    'VpnOcvpnOverlaySubnet',
    'VpnOcvpnWanInterface',
    'VpnSslSettingsAuthenticationRule',
    'VpnSslSettingsAuthenticationRuleGroup',
    'VpnSslSettingsAuthenticationRuleSourceAddress6',
    'VpnSslSettingsAuthenticationRuleSourceAddress',
    'VpnSslSettingsAuthenticationRuleSourceInterface',
    'VpnSslSettingsAuthenticationRuleUser',
    'VpnSslSettingsSourceAddress6',
    'VpnSslSettingsSourceAddress',
    'VpnSslSettingsSourceInterface',
    'VpnSslSettingsTunnelIpPool',
    'VpnSslSettingsTunnelIpv6Pool',
    'VpnSslWebHostCheckSoftwareCheckItemList',
    'VpnSslWebHostCheckSoftwareCheckItemListMd5',
    'VpnSslWebPortalBookmarkGroup',
    'VpnSslWebPortalBookmarkGroupBookmark',
    'VpnSslWebPortalBookmarkGroupBookmarkFormData',
    'VpnSslWebPortalHostCheckPolicy',
    'VpnSslWebPortalIpPool',
    'VpnSslWebPortalIpv6Pool',
    'VpnSslWebPortalIpv6SplitTunnelingRoutingAddress',
    'VpnSslWebPortalLandingPage',
    'VpnSslWebPortalLandingPageFormData',
    'VpnSslWebPortalMacAddrCheckRule',
    'VpnSslWebPortalMacAddrCheckRuleMacAddrList',
    'VpnSslWebPortalOsCheckList',
    'VpnSslWebPortalSplitDn',
    'VpnSslWebPortalSplitTunnelingRoutingAddress',
    'VpnSslWebUserBookmarkBookmark',
    'VpnSslWebUserBookmarkBookmarkFormData',
    'VpnSslWebUserGroupBookmarkBookmark',
    'VpnSslWebUserGroupBookmarkBookmarkFormData',
    'WafProfileAddressList',
    'WafProfileAddressListBlockedAddress',
    'WafProfileAddressListTrustedAddress',
    'WafProfileConstraint',
    'WafProfileConstraintContentLength',
    'WafProfileConstraintException',
    'WafProfileConstraintHeaderLength',
    'WafProfileConstraintHostname',
    'WafProfileConstraintLineLength',
    'WafProfileConstraintMalformed',
    'WafProfileConstraintMaxCookie',
    'WafProfileConstraintMaxHeaderLine',
    'WafProfileConstraintMaxRangeSegment',
    'WafProfileConstraintMaxUrlParam',
    'WafProfileConstraintMethod',
    'WafProfileConstraintParamLength',
    'WafProfileConstraintUrlParamLength',
    'WafProfileConstraintVersion',
    'WafProfileMethod',
    'WafProfileMethodMethodPolicy',
    'WafProfileSignature',
    'WafProfileSignatureCustomSignature',
    'WafProfileSignatureDisabledSignature',
    'WafProfileSignatureDisabledSubClass',
    'WafProfileSignatureMainClass',
    'WafProfileUrlAccess',
    'WafProfileUrlAccessAccessPattern',
    'WanoptCacheServiceDstPeer',
    'WanoptCacheServiceSrcPeer',
    'WanoptContentDeliveryNetworkRuleHostDomainNameSuffix',
    'WanoptContentDeliveryNetworkRuleRule',
    'WanoptContentDeliveryNetworkRuleRuleContentId',
    'WanoptContentDeliveryNetworkRuleRuleMatchEntry',
    'WanoptContentDeliveryNetworkRuleRuleMatchEntryPattern',
    'WanoptContentDeliveryNetworkRuleRuleSkipEntry',
    'WanoptContentDeliveryNetworkRuleRuleSkipEntryPattern',
    'WanoptProfileCifs',
    'WanoptProfileFtp',
    'WanoptProfileHttp',
    'WanoptProfileMapi',
    'WanoptProfileTcp',
    'WebProxyExplicitPacPolicy',
    'WebProxyExplicitPacPolicyDstaddr',
    'WebProxyExplicitPacPolicySrcaddr6',
    'WebProxyExplicitPacPolicySrcaddr',
    'WebProxyExplicitSecureWebProxyCert',
    'WebProxyForwardServerGroupServerList',
    'WebProxyGlobalLearnClientIpSrcaddr6',
    'WebProxyGlobalLearnClientIpSrcaddr',
    'WebProxyProfileHeader',
    'WebProxyProfileHeaderDstaddr6',
    'WebProxyProfileHeaderDstaddr',
    'WebfilterContentEntry',
    'WebfilterContentHeaderEntry',
    'WebfilterProfileAntiphish',
    'WebfilterProfileAntiphishCustomPattern',
    'WebfilterProfileAntiphishInspectionEntry',
    'WebfilterProfileFileFilter',
    'WebfilterProfileFileFilterEntry',
    'WebfilterProfileFileFilterEntryFileType',
    'WebfilterProfileFtgdWf',
    'WebfilterProfileFtgdWfFilter',
    'WebfilterProfileFtgdWfFilterAuthUsrGrp',
    'WebfilterProfileFtgdWfQuota',
    'WebfilterProfileOverride',
    'WebfilterProfileOverrideOvrdUserGroup',
    'WebfilterProfileOverrideProfile',
    'WebfilterProfileWeb',
    'WebfilterProfileWebKeywordMatch',
    'WebfilterProfileWispServer',
    'WebfilterProfileYoutubeChannelFilter',
    'WebfilterUrlfilterEntry',
    'WirelessControllerAccessControlListLayer3Ipv4Rule',
    'WirelessControllerAccessControlListLayer3Ipv6Rule',
    'WirelessControllerAddrgrpAddress',
    'WirelessControllerApcfgProfileCommandList',
    'WirelessControllerArrpProfileDarrpOptimizeSchedule',
    'WirelessControllerBonjourProfilePolicyList',
    'WirelessControllerHotspot20Anqp3GppCellularMccMncList',
    'WirelessControllerHotspot20AnqpNaiRealmNaiList',
    'WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod',
    'WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam',
    'WirelessControllerHotspot20AnqpRoamingConsortiumOiList',
    'WirelessControllerHotspot20AnqpVenueNameValueList',
    'WirelessControllerHotspot20AnqpVenueUrlValueList',
    'WirelessControllerHotspot20H2QpAdviceOfChargeAocList',
    'WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo',
    'WirelessControllerHotspot20H2QpOperatorNameValueList',
    'WirelessControllerHotspot20H2QpOsuProviderFriendlyName',
    'WirelessControllerHotspot20H2QpOsuProviderNaiNaiList',
    'WirelessControllerHotspot20H2QpOsuProviderServiceDescription',
    'WirelessControllerHotspot20HsProfileOsuProvider',
    'WirelessControllerHotspot20IconIconList',
    'WirelessControllerHotspot20QosMapDscpExcept',
    'WirelessControllerHotspot20QosMapDscpRange',
    'WirelessControllerInterControllerInterControllerPeer',
    'WirelessControllerMpskProfileMpskGroup',
    'WirelessControllerMpskProfileMpskGroupMpskKey',
    'WirelessControllerMpskProfileMpskGroupMpskKeyMpskSchedule',
    'WirelessControllerQosProfileDscpWmmBe',
    'WirelessControllerQosProfileDscpWmmBk',
    'WirelessControllerQosProfileDscpWmmVi',
    'WirelessControllerQosProfileDscpWmmVo',
    'WirelessControllerSettingDarrpOptimizeSchedule',
    'WirelessControllerSettingOffendingSsid',
    'WirelessControllerSnmpCommunity',
    'WirelessControllerSnmpCommunityHost',
    'WirelessControllerSnmpUser',
    'WirelessControllerTimersDarrpTime',
    'WirelessControllerVapGroupVap',
    'WirelessControllerVapMacFilterList',
    'WirelessControllerVapMpskKey',
    'WirelessControllerVapMpskKeyMpskSchedule',
    'WirelessControllerVapPortalMessageOverrides',
    'WirelessControllerVapRadiusMacAuthUsergroup',
    'WirelessControllerVapSelectedUsergroup',
    'WirelessControllerVapUsergroup',
    'WirelessControllerVapVlanName',
    'WirelessControllerVapVlanPool',
    'WirelessControllerWidsProfileApBgscanDisableSchedule',
    'WirelessControllerWtpGroupWtp',
    'WirelessControllerWtpLan',
    'WirelessControllerWtpProfileDenyMacList',
    'WirelessControllerWtpProfileEslSesDongle',
    'WirelessControllerWtpProfileLan',
    'WirelessControllerWtpProfileLbs',
    'WirelessControllerWtpProfileLedSchedule',
    'WirelessControllerWtpProfilePlatform',
    'WirelessControllerWtpProfileRadio1',
    'WirelessControllerWtpProfileRadio1Channel',
    'WirelessControllerWtpProfileRadio1Vap',
    'WirelessControllerWtpProfileRadio2',
    'WirelessControllerWtpProfileRadio2Channel',
    'WirelessControllerWtpProfileRadio2Vap',
    'WirelessControllerWtpProfileRadio3',
    'WirelessControllerWtpProfileRadio3Channel',
    'WirelessControllerWtpProfileRadio3Vap',
    'WirelessControllerWtpProfileRadio4',
    'WirelessControllerWtpProfileRadio4Channel',
    'WirelessControllerWtpProfileRadio4Vap',
    'WirelessControllerWtpProfileSplitTunnelingAcl',
    'WirelessControllerWtpRadio1',
    'WirelessControllerWtpRadio1Channel',
    'WirelessControllerWtpRadio1Vap',
    'WirelessControllerWtpRadio2',
    'WirelessControllerWtpRadio2Channel',
    'WirelessControllerWtpRadio2Vap',
    'WirelessControllerWtpRadio3',
    'WirelessControllerWtpRadio3Channel',
    'WirelessControllerWtpRadio3Vap',
    'WirelessControllerWtpRadio4',
    'WirelessControllerWtpRadio4Channel',
    'WirelessControllerWtpRadio4Vap',
    'WirelessControllerWtpSplitTunnelingAcl',
]

@pulumi.output_type
class AntivirusProfileCifs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileCifs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileCifs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileCifs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 emulator: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class AntivirusProfileContentDisarm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coverPage":
            suggest = "cover_page"
        elif key == "detectOnly":
            suggest = "detect_only"
        elif key == "errorAction":
            suggest = "error_action"
        elif key == "officeAction":
            suggest = "office_action"
        elif key == "officeDde":
            suggest = "office_dde"
        elif key == "officeEmbed":
            suggest = "office_embed"
        elif key == "officeHylink":
            suggest = "office_hylink"
        elif key == "officeLinked":
            suggest = "office_linked"
        elif key == "officeMacro":
            suggest = "office_macro"
        elif key == "originalFileDestination":
            suggest = "original_file_destination"
        elif key == "pdfActForm":
            suggest = "pdf_act_form"
        elif key == "pdfActGotor":
            suggest = "pdf_act_gotor"
        elif key == "pdfActJava":
            suggest = "pdf_act_java"
        elif key == "pdfActLaunch":
            suggest = "pdf_act_launch"
        elif key == "pdfActMovie":
            suggest = "pdf_act_movie"
        elif key == "pdfActSound":
            suggest = "pdf_act_sound"
        elif key == "pdfEmbedfile":
            suggest = "pdf_embedfile"
        elif key == "pdfHyperlink":
            suggest = "pdf_hyperlink"
        elif key == "pdfJavacode":
            suggest = "pdf_javacode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileContentDisarm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileContentDisarm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileContentDisarm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cover_page: Optional[str] = None,
                 detect_only: Optional[str] = None,
                 error_action: Optional[str] = None,
                 office_action: Optional[str] = None,
                 office_dde: Optional[str] = None,
                 office_embed: Optional[str] = None,
                 office_hylink: Optional[str] = None,
                 office_linked: Optional[str] = None,
                 office_macro: Optional[str] = None,
                 original_file_destination: Optional[str] = None,
                 pdf_act_form: Optional[str] = None,
                 pdf_act_gotor: Optional[str] = None,
                 pdf_act_java: Optional[str] = None,
                 pdf_act_launch: Optional[str] = None,
                 pdf_act_movie: Optional[str] = None,
                 pdf_act_sound: Optional[str] = None,
                 pdf_embedfile: Optional[str] = None,
                 pdf_hyperlink: Optional[str] = None,
                 pdf_javacode: Optional[str] = None):
        if cover_page is not None:
            pulumi.set(__self__, "cover_page", cover_page)
        if detect_only is not None:
            pulumi.set(__self__, "detect_only", detect_only)
        if error_action is not None:
            pulumi.set(__self__, "error_action", error_action)
        if office_action is not None:
            pulumi.set(__self__, "office_action", office_action)
        if office_dde is not None:
            pulumi.set(__self__, "office_dde", office_dde)
        if office_embed is not None:
            pulumi.set(__self__, "office_embed", office_embed)
        if office_hylink is not None:
            pulumi.set(__self__, "office_hylink", office_hylink)
        if office_linked is not None:
            pulumi.set(__self__, "office_linked", office_linked)
        if office_macro is not None:
            pulumi.set(__self__, "office_macro", office_macro)
        if original_file_destination is not None:
            pulumi.set(__self__, "original_file_destination", original_file_destination)
        if pdf_act_form is not None:
            pulumi.set(__self__, "pdf_act_form", pdf_act_form)
        if pdf_act_gotor is not None:
            pulumi.set(__self__, "pdf_act_gotor", pdf_act_gotor)
        if pdf_act_java is not None:
            pulumi.set(__self__, "pdf_act_java", pdf_act_java)
        if pdf_act_launch is not None:
            pulumi.set(__self__, "pdf_act_launch", pdf_act_launch)
        if pdf_act_movie is not None:
            pulumi.set(__self__, "pdf_act_movie", pdf_act_movie)
        if pdf_act_sound is not None:
            pulumi.set(__self__, "pdf_act_sound", pdf_act_sound)
        if pdf_embedfile is not None:
            pulumi.set(__self__, "pdf_embedfile", pdf_embedfile)
        if pdf_hyperlink is not None:
            pulumi.set(__self__, "pdf_hyperlink", pdf_hyperlink)
        if pdf_javacode is not None:
            pulumi.set(__self__, "pdf_javacode", pdf_javacode)

    @property
    @pulumi.getter(name="coverPage")
    def cover_page(self) -> Optional[str]:
        return pulumi.get(self, "cover_page")

    @property
    @pulumi.getter(name="detectOnly")
    def detect_only(self) -> Optional[str]:
        return pulumi.get(self, "detect_only")

    @property
    @pulumi.getter(name="errorAction")
    def error_action(self) -> Optional[str]:
        return pulumi.get(self, "error_action")

    @property
    @pulumi.getter(name="officeAction")
    def office_action(self) -> Optional[str]:
        return pulumi.get(self, "office_action")

    @property
    @pulumi.getter(name="officeDde")
    def office_dde(self) -> Optional[str]:
        return pulumi.get(self, "office_dde")

    @property
    @pulumi.getter(name="officeEmbed")
    def office_embed(self) -> Optional[str]:
        return pulumi.get(self, "office_embed")

    @property
    @pulumi.getter(name="officeHylink")
    def office_hylink(self) -> Optional[str]:
        return pulumi.get(self, "office_hylink")

    @property
    @pulumi.getter(name="officeLinked")
    def office_linked(self) -> Optional[str]:
        return pulumi.get(self, "office_linked")

    @property
    @pulumi.getter(name="officeMacro")
    def office_macro(self) -> Optional[str]:
        return pulumi.get(self, "office_macro")

    @property
    @pulumi.getter(name="originalFileDestination")
    def original_file_destination(self) -> Optional[str]:
        return pulumi.get(self, "original_file_destination")

    @property
    @pulumi.getter(name="pdfActForm")
    def pdf_act_form(self) -> Optional[str]:
        return pulumi.get(self, "pdf_act_form")

    @property
    @pulumi.getter(name="pdfActGotor")
    def pdf_act_gotor(self) -> Optional[str]:
        return pulumi.get(self, "pdf_act_gotor")

    @property
    @pulumi.getter(name="pdfActJava")
    def pdf_act_java(self) -> Optional[str]:
        return pulumi.get(self, "pdf_act_java")

    @property
    @pulumi.getter(name="pdfActLaunch")
    def pdf_act_launch(self) -> Optional[str]:
        return pulumi.get(self, "pdf_act_launch")

    @property
    @pulumi.getter(name="pdfActMovie")
    def pdf_act_movie(self) -> Optional[str]:
        return pulumi.get(self, "pdf_act_movie")

    @property
    @pulumi.getter(name="pdfActSound")
    def pdf_act_sound(self) -> Optional[str]:
        return pulumi.get(self, "pdf_act_sound")

    @property
    @pulumi.getter(name="pdfEmbedfile")
    def pdf_embedfile(self) -> Optional[str]:
        return pulumi.get(self, "pdf_embedfile")

    @property
    @pulumi.getter(name="pdfHyperlink")
    def pdf_hyperlink(self) -> Optional[str]:
        return pulumi.get(self, "pdf_hyperlink")

    @property
    @pulumi.getter(name="pdfJavacode")
    def pdf_javacode(self) -> Optional[str]:
        return pulumi.get(self, "pdf_javacode")


@pulumi.output_type
class AntivirusProfileExternalBlocklist(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AntivirusProfileFtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileFtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileFtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileFtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 emulator: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class AntivirusProfileHttp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "contentDisarm":
            suggest = "content_disarm"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"
        elif key == "unknownContentEncoding":
            suggest = "unknown_content_encoding"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileHttp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileHttp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileHttp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 content_disarm: Optional[str] = None,
                 emulator: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 unknown_content_encoding: Optional[str] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if unknown_content_encoding is not None:
            pulumi.set(__self__, "unknown_content_encoding", unknown_content_encoding)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[str]:
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="unknownContentEncoding")
    def unknown_content_encoding(self) -> Optional[str]:
        return pulumi.get(self, "unknown_content_encoding")


@pulumi.output_type
class AntivirusProfileImap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "contentDisarm":
            suggest = "content_disarm"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileImap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileImap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileImap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 content_disarm: Optional[str] = None,
                 emulator: Optional[str] = None,
                 executables: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[str]:
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter
    def executables(self) -> Optional[str]:
        return pulumi.get(self, "executables")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class AntivirusProfileMapi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileMapi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileMapi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileMapi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 emulator: Optional[str] = None,
                 executables: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter
    def executables(self) -> Optional[str]:
        return pulumi.get(self, "executables")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class AntivirusProfileNacQuar(dict):
    def __init__(__self__, *,
                 expiry: Optional[str] = None,
                 infected: Optional[str] = None,
                 log: Optional[str] = None):
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if infected is not None:
            pulumi.set(__self__, "infected", infected)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[str]:
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter
    def infected(self) -> Optional[str]:
        return pulumi.get(self, "infected")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")


@pulumi.output_type
class AntivirusProfileNntp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileNntp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileNntp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileNntp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 emulator: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class AntivirusProfileOutbreakPrevention(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "ftgdService":
            suggest = "ftgd_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileOutbreakPrevention. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileOutbreakPrevention.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileOutbreakPrevention.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_blocklist: Optional[str] = None,
                 ftgd_service: Optional[str] = None):
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if ftgd_service is not None:
            pulumi.set(__self__, "ftgd_service", ftgd_service)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter(name="ftgdService")
    def ftgd_service(self) -> Optional[str]:
        return pulumi.get(self, "ftgd_service")


@pulumi.output_type
class AntivirusProfilePop3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "contentDisarm":
            suggest = "content_disarm"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfilePop3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfilePop3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfilePop3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 content_disarm: Optional[str] = None,
                 emulator: Optional[str] = None,
                 executables: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[str]:
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter
    def executables(self) -> Optional[str]:
        return pulumi.get(self, "executables")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class AntivirusProfileSmb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileSmb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileSmb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileSmb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 emulator: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "outbreak_prevention")


@pulumi.output_type
class AntivirusProfileSmtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "contentDisarm":
            suggest = "content_disarm"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileSmtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileSmtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileSmtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 content_disarm: Optional[str] = None,
                 emulator: Optional[str] = None,
                 executables: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[str]:
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter
    def executables(self) -> Optional[str]:
        return pulumi.get(self, "executables")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class AntivirusProfileSsh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AntivirusProfileSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AntivirusProfileSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AntivirusProfileSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 emulator: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class ApplicationGroupApplication(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ApplicationGroupCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ApplicationGroupRisk(dict):
    def __init__(__self__, *,
                 level: Optional[int] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> Optional[int]:
        return pulumi.get(self, "level")


@pulumi.output_type
class ApplicationListDefaultNetworkService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "violationAction":
            suggest = "violation_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationListDefaultNetworkService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationListDefaultNetworkService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationListDefaultNetworkService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 port: Optional[int] = None,
                 services: Optional[str] = None,
                 violation_action: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if violation_action is not None:
            pulumi.set(__self__, "violation_action", violation_action)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def services(self) -> Optional[str]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> Optional[str]:
        return pulumi.get(self, "violation_action")


@pulumi.output_type
class ApplicationListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logPacket":
            suggest = "log_packet"
        elif key == "perIpShaper":
            suggest = "per_ip_shaper"
        elif key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"
        elif key == "rateCount":
            suggest = "rate_count"
        elif key == "rateDuration":
            suggest = "rate_duration"
        elif key == "rateMode":
            suggest = "rate_mode"
        elif key == "rateTrack":
            suggest = "rate_track"
        elif key == "sessionTtl":
            suggest = "session_ttl"
        elif key == "shaperReverse":
            suggest = "shaper_reverse"
        elif key == "subCategories":
            suggest = "sub_categories"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 applications: Optional[Sequence['outputs.ApplicationListEntryApplication']] = None,
                 behavior: Optional[str] = None,
                 categories: Optional[Sequence['outputs.ApplicationListEntryCategory']] = None,
                 exclusions: Optional[Sequence['outputs.ApplicationListEntryExclusion']] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None,
                 log_packet: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ApplicationListEntryParameter']] = None,
                 per_ip_shaper: Optional[str] = None,
                 popularity: Optional[str] = None,
                 protocols: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[str] = None,
                 quarantine_log: Optional[str] = None,
                 rate_count: Optional[int] = None,
                 rate_duration: Optional[int] = None,
                 rate_mode: Optional[str] = None,
                 rate_track: Optional[str] = None,
                 risks: Optional[Sequence['outputs.ApplicationListEntryRisk']] = None,
                 session_ttl: Optional[int] = None,
                 shaper: Optional[str] = None,
                 shaper_reverse: Optional[str] = None,
                 sub_categories: Optional[Sequence['outputs.ApplicationListEntrySubCategory']] = None,
                 technology: Optional[str] = None,
                 vendor: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if popularity is not None:
            pulumi.set(__self__, "popularity", popularity)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rate_count is not None:
            pulumi.set(__self__, "rate_count", rate_count)
        if rate_duration is not None:
            pulumi.set(__self__, "rate_duration", rate_duration)
        if rate_mode is not None:
            pulumi.set(__self__, "rate_mode", rate_mode)
        if rate_track is not None:
            pulumi.set(__self__, "rate_track", rate_track)
        if risks is not None:
            pulumi.set(__self__, "risks", risks)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if shaper is not None:
            pulumi.set(__self__, "shaper", shaper)
        if shaper_reverse is not None:
            pulumi.set(__self__, "shaper_reverse", shaper_reverse)
        if sub_categories is not None:
            pulumi.set(__self__, "sub_categories", sub_categories)
        if technology is not None:
            pulumi.set(__self__, "technology", technology)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence['outputs.ApplicationListEntryApplication']]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence['outputs.ApplicationListEntryCategory']]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.ApplicationListEntryExclusion']]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[str]:
        return pulumi.get(self, "log_packet")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ApplicationListEntryParameter']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[str]:
        return pulumi.get(self, "per_ip_shaper")

    @property
    @pulumi.getter
    def popularity(self) -> Optional[str]:
        return pulumi.get(self, "popularity")

    @property
    @pulumi.getter
    def protocols(self) -> Optional[str]:
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter(name="rateCount")
    def rate_count(self) -> Optional[int]:
        return pulumi.get(self, "rate_count")

    @property
    @pulumi.getter(name="rateDuration")
    def rate_duration(self) -> Optional[int]:
        return pulumi.get(self, "rate_duration")

    @property
    @pulumi.getter(name="rateMode")
    def rate_mode(self) -> Optional[str]:
        return pulumi.get(self, "rate_mode")

    @property
    @pulumi.getter(name="rateTrack")
    def rate_track(self) -> Optional[str]:
        return pulumi.get(self, "rate_track")

    @property
    @pulumi.getter
    def risks(self) -> Optional[Sequence['outputs.ApplicationListEntryRisk']]:
        return pulumi.get(self, "risks")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[int]:
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter
    def shaper(self) -> Optional[str]:
        return pulumi.get(self, "shaper")

    @property
    @pulumi.getter(name="shaperReverse")
    def shaper_reverse(self) -> Optional[str]:
        return pulumi.get(self, "shaper_reverse")

    @property
    @pulumi.getter(name="subCategories")
    def sub_categories(self) -> Optional[Sequence['outputs.ApplicationListEntrySubCategory']]:
        return pulumi.get(self, "sub_categories")

    @property
    @pulumi.getter
    def technology(self) -> Optional[str]:
        return pulumi.get(self, "technology")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class ApplicationListEntryApplication(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ApplicationListEntryCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ApplicationListEntryExclusion(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ApplicationListEntryParameter(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 members: Optional[Sequence['outputs.ApplicationListEntryParameterMember']] = None,
                 value: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.ApplicationListEntryParameterMember']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationListEntryParameterMember(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationListEntryRisk(dict):
    def __init__(__self__, *,
                 level: Optional[int] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> Optional[int]:
        return pulumi.get(self, "level")


@pulumi.output_type
class ApplicationListEntrySubCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ApplicationNameMetadata(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 metaid: Optional[int] = None,
                 valueid: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metaid is not None:
            pulumi.set(__self__, "metaid", metaid)
        if valueid is not None:
            pulumi.set(__self__, "valueid", valueid)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metaid(self) -> Optional[int]:
        return pulumi.get(self, "metaid")

    @property
    @pulumi.getter
    def valueid(self) -> Optional[int]:
        return pulumi.get(self, "valueid")


@pulumi.output_type
class ApplicationNameParameter(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AuthenticationRuleDstaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AuthenticationRuleDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AuthenticationRuleSrcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AuthenticationRuleSrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AuthenticationRuleSrcintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AuthenticationSchemeUserDatabase(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AuthenticationSettingDevRange(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AuthenticationSettingUserCertCa(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class CifsProfileFileFilter(dict):
    def __init__(__self__, *,
                 entries: Optional[Sequence['outputs.CifsProfileFileFilterEntry']] = None,
                 log: Optional[str] = None,
                 status: Optional[str] = None):
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[Sequence['outputs.CifsProfileFileFilterEntry']]:
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class CifsProfileFileFilterEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileTypes":
            suggest = "file_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CifsProfileFileFilterEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CifsProfileFileFilterEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CifsProfileFileFilterEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 comment: Optional[str] = None,
                 direction: Optional[str] = None,
                 file_types: Optional[Sequence['outputs.CifsProfileFileFilterEntryFileType']] = None,
                 filter: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[Sequence['outputs.CifsProfileFileFilterEntryFileType']]:
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")


@pulumi.output_type
class CifsProfileFileFilterEntryFileType(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class CifsProfileServerKeytab(dict):
    def __init__(__self__, *,
                 keytab: Optional[str] = None,
                 principal: Optional[str] = None):
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def keytab(self) -> Optional[str]:
        return pulumi.get(self, "keytab")

    @property
    @pulumi.getter
    def principal(self) -> Optional[str]:
        return pulumi.get(self, "principal")


@pulumi.output_type
class DlpDictionaryEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreCase":
            suggest = "ignore_case"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DlpDictionaryEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DlpDictionaryEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DlpDictionaryEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 id: Optional[int] = None,
                 ignore_case: Optional[str] = None,
                 pattern: Optional[str] = None,
                 repeat: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[str]:
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def repeat(self) -> Optional[str]:
        return pulumi.get(self, "repeat")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DlpFilepatternEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileType":
            suggest = "file_type"
        elif key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DlpFilepatternEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DlpFilepatternEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DlpFilepatternEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_type: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 pattern: Optional[str] = None):
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[str]:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")


@pulumi.output_type
class DlpProfileRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileSize":
            suggest = "file_size"
        elif key == "fileType":
            suggest = "file_type"
        elif key == "filterBy":
            suggest = "filter_by"
        elif key == "matchPercentage":
            suggest = "match_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DlpProfileRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DlpProfileRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DlpProfileRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 archive: Optional[str] = None,
                 expiry: Optional[str] = None,
                 file_size: Optional[int] = None,
                 file_type: Optional[int] = None,
                 filter_by: Optional[str] = None,
                 id: Optional[int] = None,
                 label: Optional[str] = None,
                 match_percentage: Optional[int] = None,
                 name: Optional[str] = None,
                 proto: Optional[str] = None,
                 sensitivities: Optional[Sequence['outputs.DlpProfileRuleSensitivity']] = None,
                 sensors: Optional[Sequence['outputs.DlpProfileRuleSensor']] = None,
                 severity: Optional[str] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if file_size is not None:
            pulumi.set(__self__, "file_size", file_size)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_by is not None:
            pulumi.set(__self__, "filter_by", filter_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if match_percentage is not None:
            pulumi.set(__self__, "match_percentage", match_percentage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if sensitivities is not None:
            pulumi.set(__self__, "sensitivities", sensitivities)
        if sensors is not None:
            pulumi.set(__self__, "sensors", sensors)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def archive(self) -> Optional[str]:
        return pulumi.get(self, "archive")

    @property
    @pulumi.getter
    def expiry(self) -> Optional[str]:
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> Optional[int]:
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[int]:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="filterBy")
    def filter_by(self) -> Optional[str]:
        return pulumi.get(self, "filter_by")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="matchPercentage")
    def match_percentage(self) -> Optional[int]:
        return pulumi.get(self, "match_percentage")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def proto(self) -> Optional[str]:
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter
    def sensitivities(self) -> Optional[Sequence['outputs.DlpProfileRuleSensitivity']]:
        return pulumi.get(self, "sensitivities")

    @property
    @pulumi.getter
    def sensors(self) -> Optional[Sequence['outputs.DlpProfileRuleSensor']]:
        return pulumi.get(self, "sensors")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DlpProfileRuleSensitivity(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class DlpProfileRuleSensor(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class DlpSensorEntry(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 dictionary: Optional[str] = None,
                 id: Optional[int] = None,
                 status: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dictionary is not None:
            pulumi.set(__self__, "dictionary", dictionary)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dictionary(self) -> Optional[str]:
        return pulumi.get(self, "dictionary")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class DlpSensorFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "companyIdentifier":
            suggest = "company_identifier"
        elif key == "fileSize":
            suggest = "file_size"
        elif key == "fileType":
            suggest = "file_type"
        elif key == "filterBy":
            suggest = "filter_by"
        elif key == "fpSensitivities":
            suggest = "fp_sensitivities"
        elif key == "matchPercentage":
            suggest = "match_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DlpSensorFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DlpSensorFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DlpSensorFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 archive: Optional[str] = None,
                 company_identifier: Optional[str] = None,
                 expiry: Optional[str] = None,
                 file_size: Optional[int] = None,
                 file_type: Optional[int] = None,
                 filter_by: Optional[str] = None,
                 fp_sensitivities: Optional[Sequence['outputs.DlpSensorFilterFpSensitivity']] = None,
                 id: Optional[int] = None,
                 match_percentage: Optional[int] = None,
                 name: Optional[str] = None,
                 proto: Optional[str] = None,
                 regexp: Optional[str] = None,
                 sensitivities: Optional[Sequence['outputs.DlpSensorFilterSensitivity']] = None,
                 severity: Optional[str] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if company_identifier is not None:
            pulumi.set(__self__, "company_identifier", company_identifier)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if file_size is not None:
            pulumi.set(__self__, "file_size", file_size)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_by is not None:
            pulumi.set(__self__, "filter_by", filter_by)
        if fp_sensitivities is not None:
            pulumi.set(__self__, "fp_sensitivities", fp_sensitivities)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_percentage is not None:
            pulumi.set(__self__, "match_percentage", match_percentage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if sensitivities is not None:
            pulumi.set(__self__, "sensitivities", sensitivities)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def archive(self) -> Optional[str]:
        return pulumi.get(self, "archive")

    @property
    @pulumi.getter(name="companyIdentifier")
    def company_identifier(self) -> Optional[str]:
        return pulumi.get(self, "company_identifier")

    @property
    @pulumi.getter
    def expiry(self) -> Optional[str]:
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> Optional[int]:
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[int]:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="filterBy")
    def filter_by(self) -> Optional[str]:
        return pulumi.get(self, "filter_by")

    @property
    @pulumi.getter(name="fpSensitivities")
    def fp_sensitivities(self) -> Optional[Sequence['outputs.DlpSensorFilterFpSensitivity']]:
        return pulumi.get(self, "fp_sensitivities")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchPercentage")
    def match_percentage(self) -> Optional[int]:
        return pulumi.get(self, "match_percentage")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def proto(self) -> Optional[str]:
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def sensitivities(self) -> Optional[Sequence['outputs.DlpSensorFilterSensitivity']]:
        return pulumi.get(self, "sensitivities")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DlpSensorFilterFpSensitivity(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class DlpSensorFilterSensitivity(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class DnsfilterDomainFilterEntry(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 domain: Optional[str] = None,
                 id: Optional[int] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DnsfilterProfileDnsTranslation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DnsfilterProfileDnsTranslation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DnsfilterProfileDnsTranslation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DnsfilterProfileDnsTranslation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_type: Optional[str] = None,
                 dst: Optional[str] = None,
                 dst6: Optional[str] = None,
                 id: Optional[int] = None,
                 netmask: Optional[str] = None,
                 prefix: Optional[int] = None,
                 src: Optional[str] = None,
                 src6: Optional[str] = None,
                 status: Optional[str] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if dst6 is not None:
            pulumi.set(__self__, "dst6", dst6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if src6 is not None:
            pulumi.set(__self__, "src6", src6)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def dst(self) -> Optional[str]:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def dst6(self) -> Optional[str]:
        return pulumi.get(self, "dst6")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[int]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def src(self) -> Optional[str]:
        return pulumi.get(self, "src")

    @property
    @pulumi.getter
    def src6(self) -> Optional[str]:
        return pulumi.get(self, "src6")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class DnsfilterProfileDomainFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainFilterTable":
            suggest = "domain_filter_table"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DnsfilterProfileDomainFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DnsfilterProfileDomainFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DnsfilterProfileDomainFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_filter_table: Optional[int] = None):
        if domain_filter_table is not None:
            pulumi.set(__self__, "domain_filter_table", domain_filter_table)

    @property
    @pulumi.getter(name="domainFilterTable")
    def domain_filter_table(self) -> Optional[int]:
        return pulumi.get(self, "domain_filter_table")


@pulumi.output_type
class DnsfilterProfileExternalIpBlocklist(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class DnsfilterProfileFtgdDns(dict):
    def __init__(__self__, *,
                 filters: Optional[Sequence['outputs.DnsfilterProfileFtgdDnsFilter']] = None,
                 options: Optional[str] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.DnsfilterProfileFtgdDnsFilter']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")


@pulumi.output_type
class DnsfilterProfileFtgdDnsFilter(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 category: Optional[int] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def category(self) -> Optional[int]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")


@pulumi.output_type
class DpdkGlobalInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DpdkGlobalInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DpdkGlobalInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DpdkGlobalInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class EmailfilterBlockAllowListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "emailPattern":
            suggest = "email_pattern"
        elif key == "ip4Subnet":
            suggest = "ip4_subnet"
        elif key == "ip6Subnet":
            suggest = "ip6_subnet"
        elif key == "patternType":
            suggest = "pattern_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterBlockAllowListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterBlockAllowListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterBlockAllowListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 addr_type: Optional[str] = None,
                 email_pattern: Optional[str] = None,
                 id: Optional[int] = None,
                 ip4_subnet: Optional[str] = None,
                 ip6_subnet: Optional[str] = None,
                 pattern: Optional[str] = None,
                 pattern_type: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[str]:
        return pulumi.get(self, "email_pattern")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip4_subnet")

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip6_subnet")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[str]:
        return pulumi.get(self, "pattern_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class EmailfilterBwlEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "emailPattern":
            suggest = "email_pattern"
        elif key == "ip4Subnet":
            suggest = "ip4_subnet"
        elif key == "ip6Subnet":
            suggest = "ip6_subnet"
        elif key == "patternType":
            suggest = "pattern_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterBwlEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterBwlEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterBwlEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 addr_type: Optional[str] = None,
                 email_pattern: Optional[str] = None,
                 id: Optional[int] = None,
                 ip4_subnet: Optional[str] = None,
                 ip6_subnet: Optional[str] = None,
                 pattern_type: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[str]:
        return pulumi.get(self, "email_pattern")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip4_subnet")

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip6_subnet")

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[str]:
        return pulumi.get(self, "pattern_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class EmailfilterBwordEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "patternType":
            suggest = "pattern_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterBwordEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterBwordEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterBwordEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 language: Optional[str] = None,
                 pattern: Optional[str] = None,
                 pattern_type: Optional[str] = None,
                 score: Optional[int] = None,
                 status: Optional[str] = None,
                 where: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if where is not None:
            pulumi.set(__self__, "where", where)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[str]:
        return pulumi.get(self, "pattern_type")

    @property
    @pulumi.getter
    def score(self) -> Optional[int]:
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def where(self) -> Optional[str]:
        return pulumi.get(self, "where")


@pulumi.output_type
class EmailfilterDnsblEntry(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 server: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class EmailfilterIptrustEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "ip4Subnet":
            suggest = "ip4_subnet"
        elif key == "ip6Subnet":
            suggest = "ip6_subnet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterIptrustEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterIptrustEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterIptrustEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_type: Optional[str] = None,
                 id: Optional[int] = None,
                 ip4_subnet: Optional[str] = None,
                 ip6_subnet: Optional[str] = None,
                 status: Optional[str] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip4_subnet")

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip6_subnet")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class EmailfilterMheaderEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "patternType":
            suggest = "pattern_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterMheaderEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterMheaderEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterMheaderEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 fieldbody: Optional[str] = None,
                 fieldname: Optional[str] = None,
                 id: Optional[int] = None,
                 pattern_type: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fieldbody is not None:
            pulumi.set(__self__, "fieldbody", fieldbody)
        if fieldname is not None:
            pulumi.set(__self__, "fieldname", fieldname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def fieldbody(self) -> Optional[str]:
        return pulumi.get(self, "fieldbody")

    @property
    @pulumi.getter
    def fieldname(self) -> Optional[str]:
        return pulumi.get(self, "fieldname")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[str]:
        return pulumi.get(self, "pattern_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class EmailfilterProfileFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanArchiveContents":
            suggest = "scan_archive_contents"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterProfileFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterProfileFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterProfileFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entries: Optional[Sequence['outputs.EmailfilterProfileFileFilterEntry']] = None,
                 log: Optional[str] = None,
                 scan_archive_contents: Optional[str] = None,
                 status: Optional[str] = None):
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[Sequence['outputs.EmailfilterProfileFileFilterEntry']]:
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[str]:
        return pulumi.get(self, "scan_archive_contents")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class EmailfilterProfileFileFilterEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileTypes":
            suggest = "file_types"
        elif key == "passwordProtected":
            suggest = "password_protected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterProfileFileFilterEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterProfileFileFilterEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterProfileFileFilterEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 comment: Optional[str] = None,
                 file_types: Optional[Sequence['outputs.EmailfilterProfileFileFilterEntryFileType']] = None,
                 filter: Optional[str] = None,
                 password_protected: Optional[str] = None,
                 protocol: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[Sequence['outputs.EmailfilterProfileFileFilterEntryFileType']]:
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[str]:
        return pulumi.get(self, "password_protected")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class EmailfilterProfileFileFilterEntryFileType(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class EmailfilterProfileGmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logAll":
            suggest = "log_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterProfileGmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterProfileGmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterProfileGmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log: Optional[str] = None,
                 log_all: Optional[str] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[str]:
        return pulumi.get(self, "log_all")


@pulumi.output_type
class EmailfilterProfileImap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logAll":
            suggest = "log_all"
        elif key == "tagMsg":
            suggest = "tag_msg"
        elif key == "tagType":
            suggest = "tag_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterProfileImap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterProfileImap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterProfileImap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 log_all: Optional[str] = None,
                 tag_msg: Optional[str] = None,
                 tag_type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[str]:
        return pulumi.get(self, "log_all")

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[str]:
        return pulumi.get(self, "tag_msg")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[str]:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class EmailfilterProfileMapi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logAll":
            suggest = "log_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterProfileMapi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterProfileMapi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterProfileMapi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 log_all: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[str]:
        return pulumi.get(self, "log_all")


@pulumi.output_type
class EmailfilterProfileMsnHotmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logAll":
            suggest = "log_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterProfileMsnHotmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterProfileMsnHotmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterProfileMsnHotmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log: Optional[str] = None,
                 log_all: Optional[str] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[str]:
        return pulumi.get(self, "log_all")


@pulumi.output_type
class EmailfilterProfileOtherWebmails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logAll":
            suggest = "log_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterProfileOtherWebmails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterProfileOtherWebmails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterProfileOtherWebmails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_all: Optional[str] = None):
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[str]:
        return pulumi.get(self, "log_all")


@pulumi.output_type
class EmailfilterProfilePop3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logAll":
            suggest = "log_all"
        elif key == "tagMsg":
            suggest = "tag_msg"
        elif key == "tagType":
            suggest = "tag_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterProfilePop3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterProfilePop3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterProfilePop3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 log_all: Optional[str] = None,
                 tag_msg: Optional[str] = None,
                 tag_type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[str]:
        return pulumi.get(self, "log_all")

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[str]:
        return pulumi.get(self, "tag_msg")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[str]:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class EmailfilterProfileSmtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localOverride":
            suggest = "local_override"
        elif key == "logAll":
            suggest = "log_all"
        elif key == "tagMsg":
            suggest = "tag_msg"
        elif key == "tagType":
            suggest = "tag_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterProfileSmtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterProfileSmtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterProfileSmtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 hdrip: Optional[str] = None,
                 local_override: Optional[str] = None,
                 log: Optional[str] = None,
                 log_all: Optional[str] = None,
                 tag_msg: Optional[str] = None,
                 tag_type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if hdrip is not None:
            pulumi.set(__self__, "hdrip", hdrip)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def hdrip(self) -> Optional[str]:
        return pulumi.get(self, "hdrip")

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[str]:
        return pulumi.get(self, "local_override")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[str]:
        return pulumi.get(self, "log_all")

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[str]:
        return pulumi.get(self, "tag_msg")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[str]:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class EmailfilterProfileYahooMail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logAll":
            suggest = "log_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailfilterProfileYahooMail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailfilterProfileYahooMail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailfilterProfileYahooMail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log: Optional[str] = None,
                 log_all: Optional[str] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[str]:
        return pulumi.get(self, "log_all")


@pulumi.output_type
class EndpointControlProfileDeviceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class EndpointControlProfileForticlientAndroidSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableWfWhenProtected":
            suggest = "disable_wf_when_protected"
        elif key == "forticlientAdvancedVpn":
            suggest = "forticlient_advanced_vpn"
        elif key == "forticlientAdvancedVpnBuffer":
            suggest = "forticlient_advanced_vpn_buffer"
        elif key == "forticlientVpnProvisioning":
            suggest = "forticlient_vpn_provisioning"
        elif key == "forticlientVpnSettings":
            suggest = "forticlient_vpn_settings"
        elif key == "forticlientWf":
            suggest = "forticlient_wf"
        elif key == "forticlientWfProfile":
            suggest = "forticlient_wf_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointControlProfileForticlientAndroidSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointControlProfileForticlientAndroidSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointControlProfileForticlientAndroidSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_wf_when_protected: Optional[str] = None,
                 forticlient_advanced_vpn: Optional[str] = None,
                 forticlient_advanced_vpn_buffer: Optional[str] = None,
                 forticlient_vpn_provisioning: Optional[str] = None,
                 forticlient_vpn_settings: Optional[Sequence['outputs.EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting']] = None,
                 forticlient_wf: Optional[str] = None,
                 forticlient_wf_profile: Optional[str] = None):
        if disable_wf_when_protected is not None:
            pulumi.set(__self__, "disable_wf_when_protected", disable_wf_when_protected)
        if forticlient_advanced_vpn is not None:
            pulumi.set(__self__, "forticlient_advanced_vpn", forticlient_advanced_vpn)
        if forticlient_advanced_vpn_buffer is not None:
            pulumi.set(__self__, "forticlient_advanced_vpn_buffer", forticlient_advanced_vpn_buffer)
        if forticlient_vpn_provisioning is not None:
            pulumi.set(__self__, "forticlient_vpn_provisioning", forticlient_vpn_provisioning)
        if forticlient_vpn_settings is not None:
            pulumi.set(__self__, "forticlient_vpn_settings", forticlient_vpn_settings)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)

    @property
    @pulumi.getter(name="disableWfWhenProtected")
    def disable_wf_when_protected(self) -> Optional[str]:
        return pulumi.get(self, "disable_wf_when_protected")

    @property
    @pulumi.getter(name="forticlientAdvancedVpn")
    def forticlient_advanced_vpn(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_advanced_vpn")

    @property
    @pulumi.getter(name="forticlientAdvancedVpnBuffer")
    def forticlient_advanced_vpn_buffer(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_advanced_vpn_buffer")

    @property
    @pulumi.getter(name="forticlientVpnProvisioning")
    def forticlient_vpn_provisioning(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_vpn_provisioning")

    @property
    @pulumi.getter(name="forticlientVpnSettings")
    def forticlient_vpn_settings(self) -> Optional[Sequence['outputs.EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting']]:
        return pulumi.get(self, "forticlient_vpn_settings")

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_wf")

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_wf_profile")


@pulumi.output_type
class EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "presharedKey":
            suggest = "preshared_key"
        elif key == "remoteGw":
            suggest = "remote_gw"
        elif key == "sslvpnAccessPort":
            suggest = "sslvpn_access_port"
        elif key == "sslvpnRequireCertificate":
            suggest = "sslvpn_require_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointControlProfileForticlientAndroidSettingsForticlientVpnSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: Optional[str] = None,
                 name: Optional[str] = None,
                 preshared_key: Optional[str] = None,
                 remote_gw: Optional[str] = None,
                 sslvpn_access_port: Optional[int] = None,
                 sslvpn_require_certificate: Optional[str] = None,
                 type: Optional[str] = None):
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if sslvpn_access_port is not None:
            pulumi.set(__self__, "sslvpn_access_port", sslvpn_access_port)
        if sslvpn_require_certificate is not None:
            pulumi.set(__self__, "sslvpn_require_certificate", sslvpn_require_certificate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[str]:
        return pulumi.get(self, "preshared_key")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[str]:
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="sslvpnAccessPort")
    def sslvpn_access_port(self) -> Optional[int]:
        return pulumi.get(self, "sslvpn_access_port")

    @property
    @pulumi.getter(name="sslvpnRequireCertificate")
    def sslvpn_require_certificate(self) -> Optional[str]:
        return pulumi.get(self, "sslvpn_require_certificate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class EndpointControlProfileForticlientIosSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientVpnProvisioning":
            suggest = "client_vpn_provisioning"
        elif key == "clientVpnSettings":
            suggest = "client_vpn_settings"
        elif key == "configurationContent":
            suggest = "configuration_content"
        elif key == "configurationName":
            suggest = "configuration_name"
        elif key == "disableWfWhenProtected":
            suggest = "disable_wf_when_protected"
        elif key == "distributeConfigurationProfile":
            suggest = "distribute_configuration_profile"
        elif key == "forticlientWf":
            suggest = "forticlient_wf"
        elif key == "forticlientWfProfile":
            suggest = "forticlient_wf_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointControlProfileForticlientIosSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointControlProfileForticlientIosSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointControlProfileForticlientIosSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_vpn_provisioning: Optional[str] = None,
                 client_vpn_settings: Optional[Sequence['outputs.EndpointControlProfileForticlientIosSettingsClientVpnSetting']] = None,
                 configuration_content: Optional[str] = None,
                 configuration_name: Optional[str] = None,
                 disable_wf_when_protected: Optional[str] = None,
                 distribute_configuration_profile: Optional[str] = None,
                 forticlient_wf: Optional[str] = None,
                 forticlient_wf_profile: Optional[str] = None):
        if client_vpn_provisioning is not None:
            pulumi.set(__self__, "client_vpn_provisioning", client_vpn_provisioning)
        if client_vpn_settings is not None:
            pulumi.set(__self__, "client_vpn_settings", client_vpn_settings)
        if configuration_content is not None:
            pulumi.set(__self__, "configuration_content", configuration_content)
        if configuration_name is not None:
            pulumi.set(__self__, "configuration_name", configuration_name)
        if disable_wf_when_protected is not None:
            pulumi.set(__self__, "disable_wf_when_protected", disable_wf_when_protected)
        if distribute_configuration_profile is not None:
            pulumi.set(__self__, "distribute_configuration_profile", distribute_configuration_profile)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)

    @property
    @pulumi.getter(name="clientVpnProvisioning")
    def client_vpn_provisioning(self) -> Optional[str]:
        return pulumi.get(self, "client_vpn_provisioning")

    @property
    @pulumi.getter(name="clientVpnSettings")
    def client_vpn_settings(self) -> Optional[Sequence['outputs.EndpointControlProfileForticlientIosSettingsClientVpnSetting']]:
        return pulumi.get(self, "client_vpn_settings")

    @property
    @pulumi.getter(name="configurationContent")
    def configuration_content(self) -> Optional[str]:
        return pulumi.get(self, "configuration_content")

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> Optional[str]:
        return pulumi.get(self, "configuration_name")

    @property
    @pulumi.getter(name="disableWfWhenProtected")
    def disable_wf_when_protected(self) -> Optional[str]:
        return pulumi.get(self, "disable_wf_when_protected")

    @property
    @pulumi.getter(name="distributeConfigurationProfile")
    def distribute_configuration_profile(self) -> Optional[str]:
        return pulumi.get(self, "distribute_configuration_profile")

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_wf")

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_wf_profile")


@pulumi.output_type
class EndpointControlProfileForticlientIosSettingsClientVpnSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "presharedKey":
            suggest = "preshared_key"
        elif key == "remoteGw":
            suggest = "remote_gw"
        elif key == "sslvpnAccessPort":
            suggest = "sslvpn_access_port"
        elif key == "sslvpnRequireCertificate":
            suggest = "sslvpn_require_certificate"
        elif key == "vpnConfigurationContent":
            suggest = "vpn_configuration_content"
        elif key == "vpnConfigurationName":
            suggest = "vpn_configuration_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointControlProfileForticlientIosSettingsClientVpnSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointControlProfileForticlientIosSettingsClientVpnSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointControlProfileForticlientIosSettingsClientVpnSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: Optional[str] = None,
                 name: Optional[str] = None,
                 preshared_key: Optional[str] = None,
                 remote_gw: Optional[str] = None,
                 sslvpn_access_port: Optional[int] = None,
                 sslvpn_require_certificate: Optional[str] = None,
                 type: Optional[str] = None,
                 vpn_configuration_content: Optional[str] = None,
                 vpn_configuration_name: Optional[str] = None):
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if sslvpn_access_port is not None:
            pulumi.set(__self__, "sslvpn_access_port", sslvpn_access_port)
        if sslvpn_require_certificate is not None:
            pulumi.set(__self__, "sslvpn_require_certificate", sslvpn_require_certificate)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpn_configuration_content is not None:
            pulumi.set(__self__, "vpn_configuration_content", vpn_configuration_content)
        if vpn_configuration_name is not None:
            pulumi.set(__self__, "vpn_configuration_name", vpn_configuration_name)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[str]:
        return pulumi.get(self, "preshared_key")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[str]:
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="sslvpnAccessPort")
    def sslvpn_access_port(self) -> Optional[int]:
        return pulumi.get(self, "sslvpn_access_port")

    @property
    @pulumi.getter(name="sslvpnRequireCertificate")
    def sslvpn_require_certificate(self) -> Optional[str]:
        return pulumi.get(self, "sslvpn_require_certificate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpnConfigurationContent")
    def vpn_configuration_content(self) -> Optional[str]:
        return pulumi.get(self, "vpn_configuration_content")

    @property
    @pulumi.getter(name="vpnConfigurationName")
    def vpn_configuration_name(self) -> Optional[str]:
        return pulumi.get(self, "vpn_configuration_name")


@pulumi.output_type
class EndpointControlProfileForticlientWinmacSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "avRealtimeProtection":
            suggest = "av_realtime_protection"
        elif key == "avSignatureUpToDate":
            suggest = "av_signature_up_to_date"
        elif key == "forticlientApplicationFirewall":
            suggest = "forticlient_application_firewall"
        elif key == "forticlientApplicationFirewallList":
            suggest = "forticlient_application_firewall_list"
        elif key == "forticlientAv":
            suggest = "forticlient_av"
        elif key == "forticlientEmsCompliance":
            suggest = "forticlient_ems_compliance"
        elif key == "forticlientEmsComplianceAction":
            suggest = "forticlient_ems_compliance_action"
        elif key == "forticlientEmsEntries":
            suggest = "forticlient_ems_entries"
        elif key == "forticlientLinuxVer":
            suggest = "forticlient_linux_ver"
        elif key == "forticlientLogUpload":
            suggest = "forticlient_log_upload"
        elif key == "forticlientLogUploadLevel":
            suggest = "forticlient_log_upload_level"
        elif key == "forticlientLogUploadServer":
            suggest = "forticlient_log_upload_server"
        elif key == "forticlientMacVer":
            suggest = "forticlient_mac_ver"
        elif key == "forticlientMinimumSoftwareVersion":
            suggest = "forticlient_minimum_software_version"
        elif key == "forticlientOperatingSystems":
            suggest = "forticlient_operating_systems"
        elif key == "forticlientOwnFiles":
            suggest = "forticlient_own_files"
        elif key == "forticlientRegistrationComplianceAction":
            suggest = "forticlient_registration_compliance_action"
        elif key == "forticlientRegistryEntries":
            suggest = "forticlient_registry_entries"
        elif key == "forticlientRunningApps":
            suggest = "forticlient_running_apps"
        elif key == "forticlientSecurityPosture":
            suggest = "forticlient_security_posture"
        elif key == "forticlientSecurityPostureComplianceAction":
            suggest = "forticlient_security_posture_compliance_action"
        elif key == "forticlientSystemCompliance":
            suggest = "forticlient_system_compliance"
        elif key == "forticlientSystemComplianceAction":
            suggest = "forticlient_system_compliance_action"
        elif key == "forticlientVulnScan":
            suggest = "forticlient_vuln_scan"
        elif key == "forticlientVulnScanComplianceAction":
            suggest = "forticlient_vuln_scan_compliance_action"
        elif key == "forticlientVulnScanEnforce":
            suggest = "forticlient_vuln_scan_enforce"
        elif key == "forticlientVulnScanEnforceGrace":
            suggest = "forticlient_vuln_scan_enforce_grace"
        elif key == "forticlientVulnScanExempt":
            suggest = "forticlient_vuln_scan_exempt"
        elif key == "forticlientWf":
            suggest = "forticlient_wf"
        elif key == "forticlientWfProfile":
            suggest = "forticlient_wf_profile"
        elif key == "forticlientWinVer":
            suggest = "forticlient_win_ver"
        elif key == "osAvSoftwareInstalled":
            suggest = "os_av_software_installed"
        elif key == "sandboxAddress":
            suggest = "sandbox_address"
        elif key == "sandboxAnalysis":
            suggest = "sandbox_analysis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointControlProfileForticlientWinmacSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointControlProfileForticlientWinmacSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointControlProfileForticlientWinmacSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 av_realtime_protection: Optional[str] = None,
                 av_signature_up_to_date: Optional[str] = None,
                 forticlient_application_firewall: Optional[str] = None,
                 forticlient_application_firewall_list: Optional[str] = None,
                 forticlient_av: Optional[str] = None,
                 forticlient_ems_compliance: Optional[str] = None,
                 forticlient_ems_compliance_action: Optional[str] = None,
                 forticlient_ems_entries: Optional[Sequence['outputs.EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntry']] = None,
                 forticlient_linux_ver: Optional[str] = None,
                 forticlient_log_upload: Optional[str] = None,
                 forticlient_log_upload_level: Optional[str] = None,
                 forticlient_log_upload_server: Optional[str] = None,
                 forticlient_mac_ver: Optional[str] = None,
                 forticlient_minimum_software_version: Optional[str] = None,
                 forticlient_operating_systems: Optional[Sequence['outputs.EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem']] = None,
                 forticlient_own_files: Optional[Sequence['outputs.EndpointControlProfileForticlientWinmacSettingsForticlientOwnFile']] = None,
                 forticlient_registration_compliance_action: Optional[str] = None,
                 forticlient_registry_entries: Optional[Sequence['outputs.EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry']] = None,
                 forticlient_running_apps: Optional[Sequence['outputs.EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp']] = None,
                 forticlient_security_posture: Optional[str] = None,
                 forticlient_security_posture_compliance_action: Optional[str] = None,
                 forticlient_system_compliance: Optional[str] = None,
                 forticlient_system_compliance_action: Optional[str] = None,
                 forticlient_vuln_scan: Optional[str] = None,
                 forticlient_vuln_scan_compliance_action: Optional[str] = None,
                 forticlient_vuln_scan_enforce: Optional[str] = None,
                 forticlient_vuln_scan_enforce_grace: Optional[int] = None,
                 forticlient_vuln_scan_exempt: Optional[str] = None,
                 forticlient_wf: Optional[str] = None,
                 forticlient_wf_profile: Optional[str] = None,
                 forticlient_win_ver: Optional[str] = None,
                 os_av_software_installed: Optional[str] = None,
                 sandbox_address: Optional[str] = None,
                 sandbox_analysis: Optional[str] = None):
        if av_realtime_protection is not None:
            pulumi.set(__self__, "av_realtime_protection", av_realtime_protection)
        if av_signature_up_to_date is not None:
            pulumi.set(__self__, "av_signature_up_to_date", av_signature_up_to_date)
        if forticlient_application_firewall is not None:
            pulumi.set(__self__, "forticlient_application_firewall", forticlient_application_firewall)
        if forticlient_application_firewall_list is not None:
            pulumi.set(__self__, "forticlient_application_firewall_list", forticlient_application_firewall_list)
        if forticlient_av is not None:
            pulumi.set(__self__, "forticlient_av", forticlient_av)
        if forticlient_ems_compliance is not None:
            pulumi.set(__self__, "forticlient_ems_compliance", forticlient_ems_compliance)
        if forticlient_ems_compliance_action is not None:
            pulumi.set(__self__, "forticlient_ems_compliance_action", forticlient_ems_compliance_action)
        if forticlient_ems_entries is not None:
            pulumi.set(__self__, "forticlient_ems_entries", forticlient_ems_entries)
        if forticlient_linux_ver is not None:
            pulumi.set(__self__, "forticlient_linux_ver", forticlient_linux_ver)
        if forticlient_log_upload is not None:
            pulumi.set(__self__, "forticlient_log_upload", forticlient_log_upload)
        if forticlient_log_upload_level is not None:
            pulumi.set(__self__, "forticlient_log_upload_level", forticlient_log_upload_level)
        if forticlient_log_upload_server is not None:
            pulumi.set(__self__, "forticlient_log_upload_server", forticlient_log_upload_server)
        if forticlient_mac_ver is not None:
            pulumi.set(__self__, "forticlient_mac_ver", forticlient_mac_ver)
        if forticlient_minimum_software_version is not None:
            pulumi.set(__self__, "forticlient_minimum_software_version", forticlient_minimum_software_version)
        if forticlient_operating_systems is not None:
            pulumi.set(__self__, "forticlient_operating_systems", forticlient_operating_systems)
        if forticlient_own_files is not None:
            pulumi.set(__self__, "forticlient_own_files", forticlient_own_files)
        if forticlient_registration_compliance_action is not None:
            pulumi.set(__self__, "forticlient_registration_compliance_action", forticlient_registration_compliance_action)
        if forticlient_registry_entries is not None:
            pulumi.set(__self__, "forticlient_registry_entries", forticlient_registry_entries)
        if forticlient_running_apps is not None:
            pulumi.set(__self__, "forticlient_running_apps", forticlient_running_apps)
        if forticlient_security_posture is not None:
            pulumi.set(__self__, "forticlient_security_posture", forticlient_security_posture)
        if forticlient_security_posture_compliance_action is not None:
            pulumi.set(__self__, "forticlient_security_posture_compliance_action", forticlient_security_posture_compliance_action)
        if forticlient_system_compliance is not None:
            pulumi.set(__self__, "forticlient_system_compliance", forticlient_system_compliance)
        if forticlient_system_compliance_action is not None:
            pulumi.set(__self__, "forticlient_system_compliance_action", forticlient_system_compliance_action)
        if forticlient_vuln_scan is not None:
            pulumi.set(__self__, "forticlient_vuln_scan", forticlient_vuln_scan)
        if forticlient_vuln_scan_compliance_action is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_compliance_action", forticlient_vuln_scan_compliance_action)
        if forticlient_vuln_scan_enforce is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_enforce", forticlient_vuln_scan_enforce)
        if forticlient_vuln_scan_enforce_grace is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_enforce_grace", forticlient_vuln_scan_enforce_grace)
        if forticlient_vuln_scan_exempt is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_exempt", forticlient_vuln_scan_exempt)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)
        if forticlient_win_ver is not None:
            pulumi.set(__self__, "forticlient_win_ver", forticlient_win_ver)
        if os_av_software_installed is not None:
            pulumi.set(__self__, "os_av_software_installed", os_av_software_installed)
        if sandbox_address is not None:
            pulumi.set(__self__, "sandbox_address", sandbox_address)
        if sandbox_analysis is not None:
            pulumi.set(__self__, "sandbox_analysis", sandbox_analysis)

    @property
    @pulumi.getter(name="avRealtimeProtection")
    def av_realtime_protection(self) -> Optional[str]:
        return pulumi.get(self, "av_realtime_protection")

    @property
    @pulumi.getter(name="avSignatureUpToDate")
    def av_signature_up_to_date(self) -> Optional[str]:
        return pulumi.get(self, "av_signature_up_to_date")

    @property
    @pulumi.getter(name="forticlientApplicationFirewall")
    def forticlient_application_firewall(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_application_firewall")

    @property
    @pulumi.getter(name="forticlientApplicationFirewallList")
    def forticlient_application_firewall_list(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_application_firewall_list")

    @property
    @pulumi.getter(name="forticlientAv")
    def forticlient_av(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_av")

    @property
    @pulumi.getter(name="forticlientEmsCompliance")
    def forticlient_ems_compliance(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_ems_compliance")

    @property
    @pulumi.getter(name="forticlientEmsComplianceAction")
    def forticlient_ems_compliance_action(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_ems_compliance_action")

    @property
    @pulumi.getter(name="forticlientEmsEntries")
    def forticlient_ems_entries(self) -> Optional[Sequence['outputs.EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntry']]:
        return pulumi.get(self, "forticlient_ems_entries")

    @property
    @pulumi.getter(name="forticlientLinuxVer")
    def forticlient_linux_ver(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_linux_ver")

    @property
    @pulumi.getter(name="forticlientLogUpload")
    def forticlient_log_upload(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_log_upload")

    @property
    @pulumi.getter(name="forticlientLogUploadLevel")
    def forticlient_log_upload_level(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_log_upload_level")

    @property
    @pulumi.getter(name="forticlientLogUploadServer")
    def forticlient_log_upload_server(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_log_upload_server")

    @property
    @pulumi.getter(name="forticlientMacVer")
    def forticlient_mac_ver(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_mac_ver")

    @property
    @pulumi.getter(name="forticlientMinimumSoftwareVersion")
    def forticlient_minimum_software_version(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_minimum_software_version")

    @property
    @pulumi.getter(name="forticlientOperatingSystems")
    def forticlient_operating_systems(self) -> Optional[Sequence['outputs.EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem']]:
        return pulumi.get(self, "forticlient_operating_systems")

    @property
    @pulumi.getter(name="forticlientOwnFiles")
    def forticlient_own_files(self) -> Optional[Sequence['outputs.EndpointControlProfileForticlientWinmacSettingsForticlientOwnFile']]:
        return pulumi.get(self, "forticlient_own_files")

    @property
    @pulumi.getter(name="forticlientRegistrationComplianceAction")
    def forticlient_registration_compliance_action(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_registration_compliance_action")

    @property
    @pulumi.getter(name="forticlientRegistryEntries")
    def forticlient_registry_entries(self) -> Optional[Sequence['outputs.EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry']]:
        return pulumi.get(self, "forticlient_registry_entries")

    @property
    @pulumi.getter(name="forticlientRunningApps")
    def forticlient_running_apps(self) -> Optional[Sequence['outputs.EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp']]:
        return pulumi.get(self, "forticlient_running_apps")

    @property
    @pulumi.getter(name="forticlientSecurityPosture")
    def forticlient_security_posture(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_security_posture")

    @property
    @pulumi.getter(name="forticlientSecurityPostureComplianceAction")
    def forticlient_security_posture_compliance_action(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_security_posture_compliance_action")

    @property
    @pulumi.getter(name="forticlientSystemCompliance")
    def forticlient_system_compliance(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_system_compliance")

    @property
    @pulumi.getter(name="forticlientSystemComplianceAction")
    def forticlient_system_compliance_action(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_system_compliance_action")

    @property
    @pulumi.getter(name="forticlientVulnScan")
    def forticlient_vuln_scan(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_vuln_scan")

    @property
    @pulumi.getter(name="forticlientVulnScanComplianceAction")
    def forticlient_vuln_scan_compliance_action(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_vuln_scan_compliance_action")

    @property
    @pulumi.getter(name="forticlientVulnScanEnforce")
    def forticlient_vuln_scan_enforce(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_vuln_scan_enforce")

    @property
    @pulumi.getter(name="forticlientVulnScanEnforceGrace")
    def forticlient_vuln_scan_enforce_grace(self) -> Optional[int]:
        return pulumi.get(self, "forticlient_vuln_scan_enforce_grace")

    @property
    @pulumi.getter(name="forticlientVulnScanExempt")
    def forticlient_vuln_scan_exempt(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_vuln_scan_exempt")

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_wf")

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_wf_profile")

    @property
    @pulumi.getter(name="forticlientWinVer")
    def forticlient_win_ver(self) -> Optional[str]:
        return pulumi.get(self, "forticlient_win_ver")

    @property
    @pulumi.getter(name="osAvSoftwareInstalled")
    def os_av_software_installed(self) -> Optional[str]:
        return pulumi.get(self, "os_av_software_installed")

    @property
    @pulumi.getter(name="sandboxAddress")
    def sandbox_address(self) -> Optional[str]:
        return pulumi.get(self, "sandbox_address")

    @property
    @pulumi.getter(name="sandboxAnalysis")
    def sandbox_analysis(self) -> Optional[str]:
        return pulumi.get(self, "sandbox_analysis")


@pulumi.output_type
class EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntry(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osName":
            suggest = "os_name"
        elif key == "osType":
            suggest = "os_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 os_name: Optional[str] = None,
                 os_type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[str]:
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        return pulumi.get(self, "os_type")


@pulumi.output_type
class EndpointControlProfileForticlientWinmacSettingsForticlientOwnFile(dict):
    def __init__(__self__, *,
                 file: Optional[str] = None,
                 id: Optional[int] = None):
        if file is not None:
            pulumi.set(__self__, "file", file)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def file(self) -> Optional[str]:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "registryEntry":
            suggest = "registry_entry"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 registry_entry: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if registry_entry is not None:
            pulumi.set(__self__, "registry_entry", registry_entry)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="registryEntry")
    def registry_entry(self) -> Optional[str]:
        return pulumi.get(self, "registry_entry")


@pulumi.output_type
class EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appName":
            suggest = "app_name"
        elif key == "appSha256Signature":
            suggest = "app_sha256_signature"
        elif key == "appSha256Signature2":
            suggest = "app_sha256_signature2"
        elif key == "appSha256Signature3":
            suggest = "app_sha256_signature3"
        elif key == "appSha256Signature4":
            suggest = "app_sha256_signature4"
        elif key == "applicationCheckRule":
            suggest = "application_check_rule"
        elif key == "processName":
            suggest = "process_name"
        elif key == "processName2":
            suggest = "process_name2"
        elif key == "processName3":
            suggest = "process_name3"
        elif key == "processName4":
            suggest = "process_name4"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointControlProfileForticlientWinmacSettingsForticlientRunningApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_name: Optional[str] = None,
                 app_sha256_signature: Optional[str] = None,
                 app_sha256_signature2: Optional[str] = None,
                 app_sha256_signature3: Optional[str] = None,
                 app_sha256_signature4: Optional[str] = None,
                 application_check_rule: Optional[str] = None,
                 id: Optional[int] = None,
                 process_name: Optional[str] = None,
                 process_name2: Optional[str] = None,
                 process_name3: Optional[str] = None,
                 process_name4: Optional[str] = None):
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if app_sha256_signature is not None:
            pulumi.set(__self__, "app_sha256_signature", app_sha256_signature)
        if app_sha256_signature2 is not None:
            pulumi.set(__self__, "app_sha256_signature2", app_sha256_signature2)
        if app_sha256_signature3 is not None:
            pulumi.set(__self__, "app_sha256_signature3", app_sha256_signature3)
        if app_sha256_signature4 is not None:
            pulumi.set(__self__, "app_sha256_signature4", app_sha256_signature4)
        if application_check_rule is not None:
            pulumi.set(__self__, "application_check_rule", application_check_rule)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if process_name is not None:
            pulumi.set(__self__, "process_name", process_name)
        if process_name2 is not None:
            pulumi.set(__self__, "process_name2", process_name2)
        if process_name3 is not None:
            pulumi.set(__self__, "process_name3", process_name3)
        if process_name4 is not None:
            pulumi.set(__self__, "process_name4", process_name4)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="appSha256Signature")
    def app_sha256_signature(self) -> Optional[str]:
        return pulumi.get(self, "app_sha256_signature")

    @property
    @pulumi.getter(name="appSha256Signature2")
    def app_sha256_signature2(self) -> Optional[str]:
        return pulumi.get(self, "app_sha256_signature2")

    @property
    @pulumi.getter(name="appSha256Signature3")
    def app_sha256_signature3(self) -> Optional[str]:
        return pulumi.get(self, "app_sha256_signature3")

    @property
    @pulumi.getter(name="appSha256Signature4")
    def app_sha256_signature4(self) -> Optional[str]:
        return pulumi.get(self, "app_sha256_signature4")

    @property
    @pulumi.getter(name="applicationCheckRule")
    def application_check_rule(self) -> Optional[str]:
        return pulumi.get(self, "application_check_rule")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="processName")
    def process_name(self) -> Optional[str]:
        return pulumi.get(self, "process_name")

    @property
    @pulumi.getter(name="processName2")
    def process_name2(self) -> Optional[str]:
        return pulumi.get(self, "process_name2")

    @property
    @pulumi.getter(name="processName3")
    def process_name3(self) -> Optional[str]:
        return pulumi.get(self, "process_name3")

    @property
    @pulumi.getter(name="processName4")
    def process_name4(self) -> Optional[str]:
        return pulumi.get(self, "process_name4")


@pulumi.output_type
class EndpointControlProfileOnNetAddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class EndpointControlProfileSrcAddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class EndpointControlProfileUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class EndpointControlProfileUserGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ExtenderControllerExtender1ControllerReport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "signalThreshold":
            suggest = "signal_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtender1ControllerReport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtender1ControllerReport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtender1ControllerReport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 signal_threshold: Optional[int] = None,
                 status: Optional[str] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[int]:
        return pulumi.get(self, "signal_threshold")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ExtenderControllerExtender1Modem1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSwitch":
            suggest = "auto_switch"
        elif key == "connStatus":
            suggest = "conn_status"
        elif key == "defaultSim":
            suggest = "default_sim"
        elif key == "preferredCarrier":
            suggest = "preferred_carrier"
        elif key == "redundantIntf":
            suggest = "redundant_intf"
        elif key == "redundantMode":
            suggest = "redundant_mode"
        elif key == "sim1Pin":
            suggest = "sim1_pin"
        elif key == "sim1PinCode":
            suggest = "sim1_pin_code"
        elif key == "sim2Pin":
            suggest = "sim2_pin"
        elif key == "sim2PinCode":
            suggest = "sim2_pin_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtender1Modem1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtender1Modem1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtender1Modem1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_switch: Optional['outputs.ExtenderControllerExtender1Modem1AutoSwitch'] = None,
                 conn_status: Optional[int] = None,
                 default_sim: Optional[str] = None,
                 gps: Optional[str] = None,
                 ifname: Optional[str] = None,
                 preferred_carrier: Optional[str] = None,
                 redundant_intf: Optional[str] = None,
                 redundant_mode: Optional[str] = None,
                 sim1_pin: Optional[str] = None,
                 sim1_pin_code: Optional[str] = None,
                 sim2_pin: Optional[str] = None,
                 sim2_pin_code: Optional[str] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional['outputs.ExtenderControllerExtender1Modem1AutoSwitch']:
        return pulumi.get(self, "auto_switch")

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[int]:
        return pulumi.get(self, "conn_status")

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[str]:
        return pulumi.get(self, "default_sim")

    @property
    @pulumi.getter
    def gps(self) -> Optional[str]:
        return pulumi.get(self, "gps")

    @property
    @pulumi.getter
    def ifname(self) -> Optional[str]:
        return pulumi.get(self, "ifname")

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[str]:
        return pulumi.get(self, "preferred_carrier")

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[str]:
        return pulumi.get(self, "redundant_intf")

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[str]:
        return pulumi.get(self, "redundant_mode")

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin")

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin_code")

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin")

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin_code")


@pulumi.output_type
class ExtenderControllerExtender1Modem1AutoSwitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disconnectPeriod":
            suggest = "disconnect_period"
        elif key == "disconnectThreshold":
            suggest = "disconnect_threshold"
        elif key == "switchBack":
            suggest = "switch_back"
        elif key == "switchBackTime":
            suggest = "switch_back_time"
        elif key == "switchBackTimer":
            suggest = "switch_back_timer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtender1Modem1AutoSwitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtender1Modem1AutoSwitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtender1Modem1AutoSwitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplan: Optional[str] = None,
                 disconnect: Optional[str] = None,
                 disconnect_period: Optional[int] = None,
                 disconnect_threshold: Optional[int] = None,
                 signal: Optional[str] = None,
                 switch_back: Optional[str] = None,
                 switch_back_time: Optional[str] = None,
                 switch_back_timer: Optional[int] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[str]:
        return pulumi.get(self, "dataplan")

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[str]:
        return pulumi.get(self, "disconnect")

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_period")

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_threshold")

    @property
    @pulumi.getter
    def signal(self) -> Optional[str]:
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[str]:
        return pulumi.get(self, "switch_back")

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[str]:
        return pulumi.get(self, "switch_back_time")

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[int]:
        return pulumi.get(self, "switch_back_timer")


@pulumi.output_type
class ExtenderControllerExtender1Modem2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSwitch":
            suggest = "auto_switch"
        elif key == "connStatus":
            suggest = "conn_status"
        elif key == "defaultSim":
            suggest = "default_sim"
        elif key == "preferredCarrier":
            suggest = "preferred_carrier"
        elif key == "redundantIntf":
            suggest = "redundant_intf"
        elif key == "redundantMode":
            suggest = "redundant_mode"
        elif key == "sim1Pin":
            suggest = "sim1_pin"
        elif key == "sim1PinCode":
            suggest = "sim1_pin_code"
        elif key == "sim2Pin":
            suggest = "sim2_pin"
        elif key == "sim2PinCode":
            suggest = "sim2_pin_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtender1Modem2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtender1Modem2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtender1Modem2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_switch: Optional['outputs.ExtenderControllerExtender1Modem2AutoSwitch'] = None,
                 conn_status: Optional[int] = None,
                 default_sim: Optional[str] = None,
                 gps: Optional[str] = None,
                 ifname: Optional[str] = None,
                 preferred_carrier: Optional[str] = None,
                 redundant_intf: Optional[str] = None,
                 redundant_mode: Optional[str] = None,
                 sim1_pin: Optional[str] = None,
                 sim1_pin_code: Optional[str] = None,
                 sim2_pin: Optional[str] = None,
                 sim2_pin_code: Optional[str] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional['outputs.ExtenderControllerExtender1Modem2AutoSwitch']:
        return pulumi.get(self, "auto_switch")

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[int]:
        return pulumi.get(self, "conn_status")

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[str]:
        return pulumi.get(self, "default_sim")

    @property
    @pulumi.getter
    def gps(self) -> Optional[str]:
        return pulumi.get(self, "gps")

    @property
    @pulumi.getter
    def ifname(self) -> Optional[str]:
        return pulumi.get(self, "ifname")

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[str]:
        return pulumi.get(self, "preferred_carrier")

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[str]:
        return pulumi.get(self, "redundant_intf")

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[str]:
        return pulumi.get(self, "redundant_mode")

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin")

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin_code")

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin")

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin_code")


@pulumi.output_type
class ExtenderControllerExtender1Modem2AutoSwitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disconnectPeriod":
            suggest = "disconnect_period"
        elif key == "disconnectThreshold":
            suggest = "disconnect_threshold"
        elif key == "switchBack":
            suggest = "switch_back"
        elif key == "switchBackTime":
            suggest = "switch_back_time"
        elif key == "switchBackTimer":
            suggest = "switch_back_timer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtender1Modem2AutoSwitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtender1Modem2AutoSwitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtender1Modem2AutoSwitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplan: Optional[str] = None,
                 disconnect: Optional[str] = None,
                 disconnect_period: Optional[int] = None,
                 disconnect_threshold: Optional[int] = None,
                 signal: Optional[str] = None,
                 switch_back: Optional[str] = None,
                 switch_back_time: Optional[str] = None,
                 switch_back_timer: Optional[int] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[str]:
        return pulumi.get(self, "dataplan")

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[str]:
        return pulumi.get(self, "disconnect")

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_period")

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_threshold")

    @property
    @pulumi.getter
    def signal(self) -> Optional[str]:
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[str]:
        return pulumi.get(self, "switch_back")

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[str]:
        return pulumi.get(self, "switch_back_time")

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[int]:
        return pulumi.get(self, "switch_back_timer")


@pulumi.output_type
class ExtenderControllerExtenderControllerReport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "signalThreshold":
            suggest = "signal_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderControllerReport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderControllerReport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderControllerReport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 signal_threshold: Optional[int] = None,
                 status: Optional[str] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[int]:
        return pulumi.get(self, "signal_threshold")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ExtenderControllerExtenderModem1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSwitch":
            suggest = "auto_switch"
        elif key == "connStatus":
            suggest = "conn_status"
        elif key == "defaultSim":
            suggest = "default_sim"
        elif key == "preferredCarrier":
            suggest = "preferred_carrier"
        elif key == "redundantIntf":
            suggest = "redundant_intf"
        elif key == "redundantMode":
            suggest = "redundant_mode"
        elif key == "sim1Pin":
            suggest = "sim1_pin"
        elif key == "sim1PinCode":
            suggest = "sim1_pin_code"
        elif key == "sim2Pin":
            suggest = "sim2_pin"
        elif key == "sim2PinCode":
            suggest = "sim2_pin_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderModem1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderModem1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderModem1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_switch: Optional['outputs.ExtenderControllerExtenderModem1AutoSwitch'] = None,
                 conn_status: Optional[int] = None,
                 default_sim: Optional[str] = None,
                 gps: Optional[str] = None,
                 ifname: Optional[str] = None,
                 preferred_carrier: Optional[str] = None,
                 redundant_intf: Optional[str] = None,
                 redundant_mode: Optional[str] = None,
                 sim1_pin: Optional[str] = None,
                 sim1_pin_code: Optional[str] = None,
                 sim2_pin: Optional[str] = None,
                 sim2_pin_code: Optional[str] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional['outputs.ExtenderControllerExtenderModem1AutoSwitch']:
        return pulumi.get(self, "auto_switch")

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[int]:
        return pulumi.get(self, "conn_status")

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[str]:
        return pulumi.get(self, "default_sim")

    @property
    @pulumi.getter
    def gps(self) -> Optional[str]:
        return pulumi.get(self, "gps")

    @property
    @pulumi.getter
    def ifname(self) -> Optional[str]:
        return pulumi.get(self, "ifname")

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[str]:
        return pulumi.get(self, "preferred_carrier")

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[str]:
        return pulumi.get(self, "redundant_intf")

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[str]:
        return pulumi.get(self, "redundant_mode")

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin")

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin_code")

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin")

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin_code")


@pulumi.output_type
class ExtenderControllerExtenderModem1AutoSwitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disconnectPeriod":
            suggest = "disconnect_period"
        elif key == "disconnectThreshold":
            suggest = "disconnect_threshold"
        elif key == "switchBack":
            suggest = "switch_back"
        elif key == "switchBackTime":
            suggest = "switch_back_time"
        elif key == "switchBackTimer":
            suggest = "switch_back_timer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderModem1AutoSwitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderModem1AutoSwitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderModem1AutoSwitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplan: Optional[str] = None,
                 disconnect: Optional[str] = None,
                 disconnect_period: Optional[int] = None,
                 disconnect_threshold: Optional[int] = None,
                 signal: Optional[str] = None,
                 switch_back: Optional[str] = None,
                 switch_back_time: Optional[str] = None,
                 switch_back_timer: Optional[int] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[str]:
        return pulumi.get(self, "dataplan")

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[str]:
        return pulumi.get(self, "disconnect")

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_period")

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_threshold")

    @property
    @pulumi.getter
    def signal(self) -> Optional[str]:
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[str]:
        return pulumi.get(self, "switch_back")

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[str]:
        return pulumi.get(self, "switch_back_time")

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[int]:
        return pulumi.get(self, "switch_back_timer")


@pulumi.output_type
class ExtenderControllerExtenderModem2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSwitch":
            suggest = "auto_switch"
        elif key == "connStatus":
            suggest = "conn_status"
        elif key == "defaultSim":
            suggest = "default_sim"
        elif key == "preferredCarrier":
            suggest = "preferred_carrier"
        elif key == "redundantIntf":
            suggest = "redundant_intf"
        elif key == "redundantMode":
            suggest = "redundant_mode"
        elif key == "sim1Pin":
            suggest = "sim1_pin"
        elif key == "sim1PinCode":
            suggest = "sim1_pin_code"
        elif key == "sim2Pin":
            suggest = "sim2_pin"
        elif key == "sim2PinCode":
            suggest = "sim2_pin_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderModem2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderModem2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderModem2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_switch: Optional['outputs.ExtenderControllerExtenderModem2AutoSwitch'] = None,
                 conn_status: Optional[int] = None,
                 default_sim: Optional[str] = None,
                 gps: Optional[str] = None,
                 ifname: Optional[str] = None,
                 preferred_carrier: Optional[str] = None,
                 redundant_intf: Optional[str] = None,
                 redundant_mode: Optional[str] = None,
                 sim1_pin: Optional[str] = None,
                 sim1_pin_code: Optional[str] = None,
                 sim2_pin: Optional[str] = None,
                 sim2_pin_code: Optional[str] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional['outputs.ExtenderControllerExtenderModem2AutoSwitch']:
        return pulumi.get(self, "auto_switch")

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[int]:
        return pulumi.get(self, "conn_status")

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[str]:
        return pulumi.get(self, "default_sim")

    @property
    @pulumi.getter
    def gps(self) -> Optional[str]:
        return pulumi.get(self, "gps")

    @property
    @pulumi.getter
    def ifname(self) -> Optional[str]:
        return pulumi.get(self, "ifname")

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[str]:
        return pulumi.get(self, "preferred_carrier")

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[str]:
        return pulumi.get(self, "redundant_intf")

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[str]:
        return pulumi.get(self, "redundant_mode")

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin")

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin_code")

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin")

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin_code")


@pulumi.output_type
class ExtenderControllerExtenderModem2AutoSwitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disconnectPeriod":
            suggest = "disconnect_period"
        elif key == "disconnectThreshold":
            suggest = "disconnect_threshold"
        elif key == "switchBack":
            suggest = "switch_back"
        elif key == "switchBackTime":
            suggest = "switch_back_time"
        elif key == "switchBackTimer":
            suggest = "switch_back_timer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderModem2AutoSwitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderModem2AutoSwitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderModem2AutoSwitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplan: Optional[str] = None,
                 disconnect: Optional[str] = None,
                 disconnect_period: Optional[int] = None,
                 disconnect_threshold: Optional[int] = None,
                 signal: Optional[str] = None,
                 switch_back: Optional[str] = None,
                 switch_back_time: Optional[str] = None,
                 switch_back_timer: Optional[int] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[str]:
        return pulumi.get(self, "dataplan")

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[str]:
        return pulumi.get(self, "disconnect")

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_period")

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_threshold")

    @property
    @pulumi.getter
    def signal(self) -> Optional[str]:
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[str]:
        return pulumi.get(self, "switch_back")

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[str]:
        return pulumi.get(self, "switch_back_time")

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[int]:
        return pulumi.get(self, "switch_back_timer")


@pulumi.output_type
class ExtenderControllerExtenderProfileCellular(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerReport":
            suggest = "controller_report"
        elif key == "smsNotification":
            suggest = "sms_notification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderProfileCellular. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderProfileCellular.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderProfileCellular.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_report: Optional['outputs.ExtenderControllerExtenderProfileCellularControllerReport'] = None,
                 dataplans: Optional[Sequence['outputs.ExtenderControllerExtenderProfileCellularDataplan']] = None,
                 modem1: Optional['outputs.ExtenderControllerExtenderProfileCellularModem1'] = None,
                 modem2: Optional['outputs.ExtenderControllerExtenderProfileCellularModem2'] = None,
                 sms_notification: Optional['outputs.ExtenderControllerExtenderProfileCellularSmsNotification'] = None):
        if controller_report is not None:
            pulumi.set(__self__, "controller_report", controller_report)
        if dataplans is not None:
            pulumi.set(__self__, "dataplans", dataplans)
        if modem1 is not None:
            pulumi.set(__self__, "modem1", modem1)
        if modem2 is not None:
            pulumi.set(__self__, "modem2", modem2)
        if sms_notification is not None:
            pulumi.set(__self__, "sms_notification", sms_notification)

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> Optional['outputs.ExtenderControllerExtenderProfileCellularControllerReport']:
        return pulumi.get(self, "controller_report")

    @property
    @pulumi.getter
    def dataplans(self) -> Optional[Sequence['outputs.ExtenderControllerExtenderProfileCellularDataplan']]:
        return pulumi.get(self, "dataplans")

    @property
    @pulumi.getter
    def modem1(self) -> Optional['outputs.ExtenderControllerExtenderProfileCellularModem1']:
        return pulumi.get(self, "modem1")

    @property
    @pulumi.getter
    def modem2(self) -> Optional['outputs.ExtenderControllerExtenderProfileCellularModem2']:
        return pulumi.get(self, "modem2")

    @property
    @pulumi.getter(name="smsNotification")
    def sms_notification(self) -> Optional['outputs.ExtenderControllerExtenderProfileCellularSmsNotification']:
        return pulumi.get(self, "sms_notification")


@pulumi.output_type
class ExtenderControllerExtenderProfileCellularControllerReport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "signalThreshold":
            suggest = "signal_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderProfileCellularControllerReport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderProfileCellularControllerReport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderProfileCellularControllerReport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 signal_threshold: Optional[int] = None,
                 status: Optional[str] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[int]:
        return pulumi.get(self, "signal_threshold")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ExtenderControllerExtenderProfileCellularDataplan(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ExtenderControllerExtenderProfileCellularModem1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSwitch":
            suggest = "auto_switch"
        elif key == "connStatus":
            suggest = "conn_status"
        elif key == "defaultSim":
            suggest = "default_sim"
        elif key == "preferredCarrier":
            suggest = "preferred_carrier"
        elif key == "redundantIntf":
            suggest = "redundant_intf"
        elif key == "redundantMode":
            suggest = "redundant_mode"
        elif key == "sim1Pin":
            suggest = "sim1_pin"
        elif key == "sim1PinCode":
            suggest = "sim1_pin_code"
        elif key == "sim2Pin":
            suggest = "sim2_pin"
        elif key == "sim2PinCode":
            suggest = "sim2_pin_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderProfileCellularModem1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderProfileCellularModem1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderProfileCellularModem1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_switch: Optional['outputs.ExtenderControllerExtenderProfileCellularModem1AutoSwitch'] = None,
                 conn_status: Optional[int] = None,
                 default_sim: Optional[str] = None,
                 gps: Optional[str] = None,
                 preferred_carrier: Optional[str] = None,
                 redundant_intf: Optional[str] = None,
                 redundant_mode: Optional[str] = None,
                 sim1_pin: Optional[str] = None,
                 sim1_pin_code: Optional[str] = None,
                 sim2_pin: Optional[str] = None,
                 sim2_pin_code: Optional[str] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional['outputs.ExtenderControllerExtenderProfileCellularModem1AutoSwitch']:
        return pulumi.get(self, "auto_switch")

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[int]:
        return pulumi.get(self, "conn_status")

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[str]:
        return pulumi.get(self, "default_sim")

    @property
    @pulumi.getter
    def gps(self) -> Optional[str]:
        return pulumi.get(self, "gps")

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[str]:
        return pulumi.get(self, "preferred_carrier")

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[str]:
        return pulumi.get(self, "redundant_intf")

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[str]:
        return pulumi.get(self, "redundant_mode")

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin")

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin_code")

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin")

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin_code")


@pulumi.output_type
class ExtenderControllerExtenderProfileCellularModem1AutoSwitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disconnectPeriod":
            suggest = "disconnect_period"
        elif key == "disconnectThreshold":
            suggest = "disconnect_threshold"
        elif key == "switchBack":
            suggest = "switch_back"
        elif key == "switchBackTime":
            suggest = "switch_back_time"
        elif key == "switchBackTimer":
            suggest = "switch_back_timer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderProfileCellularModem1AutoSwitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderProfileCellularModem1AutoSwitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderProfileCellularModem1AutoSwitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplan: Optional[str] = None,
                 disconnect: Optional[str] = None,
                 disconnect_period: Optional[int] = None,
                 disconnect_threshold: Optional[int] = None,
                 signal: Optional[str] = None,
                 switch_back: Optional[str] = None,
                 switch_back_time: Optional[str] = None,
                 switch_back_timer: Optional[int] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[str]:
        return pulumi.get(self, "dataplan")

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[str]:
        return pulumi.get(self, "disconnect")

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_period")

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_threshold")

    @property
    @pulumi.getter
    def signal(self) -> Optional[str]:
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[str]:
        return pulumi.get(self, "switch_back")

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[str]:
        return pulumi.get(self, "switch_back_time")

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[int]:
        return pulumi.get(self, "switch_back_timer")


@pulumi.output_type
class ExtenderControllerExtenderProfileCellularModem2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSwitch":
            suggest = "auto_switch"
        elif key == "connStatus":
            suggest = "conn_status"
        elif key == "defaultSim":
            suggest = "default_sim"
        elif key == "preferredCarrier":
            suggest = "preferred_carrier"
        elif key == "redundantIntf":
            suggest = "redundant_intf"
        elif key == "redundantMode":
            suggest = "redundant_mode"
        elif key == "sim1Pin":
            suggest = "sim1_pin"
        elif key == "sim1PinCode":
            suggest = "sim1_pin_code"
        elif key == "sim2Pin":
            suggest = "sim2_pin"
        elif key == "sim2PinCode":
            suggest = "sim2_pin_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderProfileCellularModem2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderProfileCellularModem2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderProfileCellularModem2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_switch: Optional['outputs.ExtenderControllerExtenderProfileCellularModem2AutoSwitch'] = None,
                 conn_status: Optional[int] = None,
                 default_sim: Optional[str] = None,
                 gps: Optional[str] = None,
                 preferred_carrier: Optional[str] = None,
                 redundant_intf: Optional[str] = None,
                 redundant_mode: Optional[str] = None,
                 sim1_pin: Optional[str] = None,
                 sim1_pin_code: Optional[str] = None,
                 sim2_pin: Optional[str] = None,
                 sim2_pin_code: Optional[str] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional['outputs.ExtenderControllerExtenderProfileCellularModem2AutoSwitch']:
        return pulumi.get(self, "auto_switch")

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[int]:
        return pulumi.get(self, "conn_status")

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[str]:
        return pulumi.get(self, "default_sim")

    @property
    @pulumi.getter
    def gps(self) -> Optional[str]:
        return pulumi.get(self, "gps")

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[str]:
        return pulumi.get(self, "preferred_carrier")

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[str]:
        return pulumi.get(self, "redundant_intf")

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[str]:
        return pulumi.get(self, "redundant_mode")

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin")

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin_code")

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin")

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin_code")


@pulumi.output_type
class ExtenderControllerExtenderProfileCellularModem2AutoSwitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disconnectPeriod":
            suggest = "disconnect_period"
        elif key == "disconnectThreshold":
            suggest = "disconnect_threshold"
        elif key == "switchBack":
            suggest = "switch_back"
        elif key == "switchBackTime":
            suggest = "switch_back_time"
        elif key == "switchBackTimer":
            suggest = "switch_back_timer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderProfileCellularModem2AutoSwitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderProfileCellularModem2AutoSwitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderProfileCellularModem2AutoSwitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplan: Optional[str] = None,
                 disconnect: Optional[str] = None,
                 disconnect_period: Optional[int] = None,
                 disconnect_threshold: Optional[int] = None,
                 signal: Optional[str] = None,
                 switch_back: Optional[str] = None,
                 switch_back_time: Optional[str] = None,
                 switch_back_timer: Optional[int] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[str]:
        return pulumi.get(self, "dataplan")

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[str]:
        return pulumi.get(self, "disconnect")

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_period")

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_threshold")

    @property
    @pulumi.getter
    def signal(self) -> Optional[str]:
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[str]:
        return pulumi.get(self, "switch_back")

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[str]:
        return pulumi.get(self, "switch_back_time")

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[int]:
        return pulumi.get(self, "switch_back_timer")


@pulumi.output_type
class ExtenderControllerExtenderProfileCellularSmsNotification(dict):
    def __init__(__self__, *,
                 alert: Optional['outputs.ExtenderControllerExtenderProfileCellularSmsNotificationAlert'] = None,
                 receivers: Optional[Sequence['outputs.ExtenderControllerExtenderProfileCellularSmsNotificationReceiver']] = None,
                 status: Optional[str] = None):
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional['outputs.ExtenderControllerExtenderProfileCellularSmsNotificationAlert']:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def receivers(self) -> Optional[Sequence['outputs.ExtenderControllerExtenderProfileCellularSmsNotificationReceiver']]:
        return pulumi.get(self, "receivers")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ExtenderControllerExtenderProfileCellularSmsNotificationAlert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataExhausted":
            suggest = "data_exhausted"
        elif key == "fgtBackupModeSwitch":
            suggest = "fgt_backup_mode_switch"
        elif key == "lowSignalStrength":
            suggest = "low_signal_strength"
        elif key == "modeSwitch":
            suggest = "mode_switch"
        elif key == "osImageFallback":
            suggest = "os_image_fallback"
        elif key == "sessionDisconnect":
            suggest = "session_disconnect"
        elif key == "systemReboot":
            suggest = "system_reboot"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderProfileCellularSmsNotificationAlert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderProfileCellularSmsNotificationAlert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderProfileCellularSmsNotificationAlert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_exhausted: Optional[str] = None,
                 fgt_backup_mode_switch: Optional[str] = None,
                 low_signal_strength: Optional[str] = None,
                 mode_switch: Optional[str] = None,
                 os_image_fallback: Optional[str] = None,
                 session_disconnect: Optional[str] = None,
                 system_reboot: Optional[str] = None):
        if data_exhausted is not None:
            pulumi.set(__self__, "data_exhausted", data_exhausted)
        if fgt_backup_mode_switch is not None:
            pulumi.set(__self__, "fgt_backup_mode_switch", fgt_backup_mode_switch)
        if low_signal_strength is not None:
            pulumi.set(__self__, "low_signal_strength", low_signal_strength)
        if mode_switch is not None:
            pulumi.set(__self__, "mode_switch", mode_switch)
        if os_image_fallback is not None:
            pulumi.set(__self__, "os_image_fallback", os_image_fallback)
        if session_disconnect is not None:
            pulumi.set(__self__, "session_disconnect", session_disconnect)
        if system_reboot is not None:
            pulumi.set(__self__, "system_reboot", system_reboot)

    @property
    @pulumi.getter(name="dataExhausted")
    def data_exhausted(self) -> Optional[str]:
        return pulumi.get(self, "data_exhausted")

    @property
    @pulumi.getter(name="fgtBackupModeSwitch")
    def fgt_backup_mode_switch(self) -> Optional[str]:
        return pulumi.get(self, "fgt_backup_mode_switch")

    @property
    @pulumi.getter(name="lowSignalStrength")
    def low_signal_strength(self) -> Optional[str]:
        return pulumi.get(self, "low_signal_strength")

    @property
    @pulumi.getter(name="modeSwitch")
    def mode_switch(self) -> Optional[str]:
        return pulumi.get(self, "mode_switch")

    @property
    @pulumi.getter(name="osImageFallback")
    def os_image_fallback(self) -> Optional[str]:
        return pulumi.get(self, "os_image_fallback")

    @property
    @pulumi.getter(name="sessionDisconnect")
    def session_disconnect(self) -> Optional[str]:
        return pulumi.get(self, "session_disconnect")

    @property
    @pulumi.getter(name="systemReboot")
    def system_reboot(self) -> Optional[str]:
        return pulumi.get(self, "system_reboot")


@pulumi.output_type
class ExtenderControllerExtenderProfileCellularSmsNotificationReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderProfileCellularSmsNotificationReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderProfileCellularSmsNotificationReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderProfileCellularSmsNotificationReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert: Optional[str] = None,
                 name: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 status: Optional[str] = None):
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional[str]:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ExtenderControllerExtenderProfileLanExtension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backhaulInterface":
            suggest = "backhaul_interface"
        elif key == "backhaulIp":
            suggest = "backhaul_ip"
        elif key == "ipsecTunnel":
            suggest = "ipsec_tunnel"
        elif key == "linkLoadbalance":
            suggest = "link_loadbalance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderProfileLanExtension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderProfileLanExtension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderProfileLanExtension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backhaul_interface: Optional[str] = None,
                 backhaul_ip: Optional[str] = None,
                 backhauls: Optional[Sequence['outputs.ExtenderControllerExtenderProfileLanExtensionBackhaul']] = None,
                 ipsec_tunnel: Optional[str] = None,
                 link_loadbalance: Optional[str] = None):
        if backhaul_interface is not None:
            pulumi.set(__self__, "backhaul_interface", backhaul_interface)
        if backhaul_ip is not None:
            pulumi.set(__self__, "backhaul_ip", backhaul_ip)
        if backhauls is not None:
            pulumi.set(__self__, "backhauls", backhauls)
        if ipsec_tunnel is not None:
            pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)
        if link_loadbalance is not None:
            pulumi.set(__self__, "link_loadbalance", link_loadbalance)

    @property
    @pulumi.getter(name="backhaulInterface")
    def backhaul_interface(self) -> Optional[str]:
        return pulumi.get(self, "backhaul_interface")

    @property
    @pulumi.getter(name="backhaulIp")
    def backhaul_ip(self) -> Optional[str]:
        return pulumi.get(self, "backhaul_ip")

    @property
    @pulumi.getter
    def backhauls(self) -> Optional[Sequence['outputs.ExtenderControllerExtenderProfileLanExtensionBackhaul']]:
        return pulumi.get(self, "backhauls")

    @property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_tunnel")

    @property
    @pulumi.getter(name="linkLoadbalance")
    def link_loadbalance(self) -> Optional[str]:
        return pulumi.get(self, "link_loadbalance")


@pulumi.output_type
class ExtenderControllerExtenderProfileLanExtensionBackhaul(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 port: Optional[str] = None,
                 role: Optional[str] = None,
                 weight: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class ExtenderControllerExtenderWanExtension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modem1Extension":
            suggest = "modem1_extension"
        elif key == "modem2Extension":
            suggest = "modem2_extension"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtenderControllerExtenderWanExtension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtenderControllerExtenderWanExtension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtenderControllerExtenderWanExtension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 modem1_extension: Optional[str] = None,
                 modem2_extension: Optional[str] = None):
        if modem1_extension is not None:
            pulumi.set(__self__, "modem1_extension", modem1_extension)
        if modem2_extension is not None:
            pulumi.set(__self__, "modem2_extension", modem2_extension)

    @property
    @pulumi.getter(name="modem1Extension")
    def modem1_extension(self) -> Optional[str]:
        return pulumi.get(self, "modem1_extension")

    @property
    @pulumi.getter(name="modem2Extension")
    def modem2_extension(self) -> Optional[str]:
        return pulumi.get(self, "modem2_extension")


@pulumi.output_type
class ExtensionControllerExtenderProfileCellular(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerReport":
            suggest = "controller_report"
        elif key == "smsNotification":
            suggest = "sms_notification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerExtenderProfileCellular. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerExtenderProfileCellular.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerExtenderProfileCellular.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_report: Optional['outputs.ExtensionControllerExtenderProfileCellularControllerReport'] = None,
                 dataplans: Optional[Sequence['outputs.ExtensionControllerExtenderProfileCellularDataplan']] = None,
                 modem1: Optional['outputs.ExtensionControllerExtenderProfileCellularModem1'] = None,
                 modem2: Optional['outputs.ExtensionControllerExtenderProfileCellularModem2'] = None,
                 sms_notification: Optional['outputs.ExtensionControllerExtenderProfileCellularSmsNotification'] = None):
        if controller_report is not None:
            pulumi.set(__self__, "controller_report", controller_report)
        if dataplans is not None:
            pulumi.set(__self__, "dataplans", dataplans)
        if modem1 is not None:
            pulumi.set(__self__, "modem1", modem1)
        if modem2 is not None:
            pulumi.set(__self__, "modem2", modem2)
        if sms_notification is not None:
            pulumi.set(__self__, "sms_notification", sms_notification)

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> Optional['outputs.ExtensionControllerExtenderProfileCellularControllerReport']:
        return pulumi.get(self, "controller_report")

    @property
    @pulumi.getter
    def dataplans(self) -> Optional[Sequence['outputs.ExtensionControllerExtenderProfileCellularDataplan']]:
        return pulumi.get(self, "dataplans")

    @property
    @pulumi.getter
    def modem1(self) -> Optional['outputs.ExtensionControllerExtenderProfileCellularModem1']:
        return pulumi.get(self, "modem1")

    @property
    @pulumi.getter
    def modem2(self) -> Optional['outputs.ExtensionControllerExtenderProfileCellularModem2']:
        return pulumi.get(self, "modem2")

    @property
    @pulumi.getter(name="smsNotification")
    def sms_notification(self) -> Optional['outputs.ExtensionControllerExtenderProfileCellularSmsNotification']:
        return pulumi.get(self, "sms_notification")


@pulumi.output_type
class ExtensionControllerExtenderProfileCellularControllerReport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "signalThreshold":
            suggest = "signal_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerExtenderProfileCellularControllerReport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerExtenderProfileCellularControllerReport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerExtenderProfileCellularControllerReport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 signal_threshold: Optional[int] = None,
                 status: Optional[str] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[int]:
        return pulumi.get(self, "signal_threshold")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ExtensionControllerExtenderProfileCellularDataplan(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ExtensionControllerExtenderProfileCellularModem1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSwitch":
            suggest = "auto_switch"
        elif key == "connStatus":
            suggest = "conn_status"
        elif key == "defaultSim":
            suggest = "default_sim"
        elif key == "preferredCarrier":
            suggest = "preferred_carrier"
        elif key == "redundantIntf":
            suggest = "redundant_intf"
        elif key == "redundantMode":
            suggest = "redundant_mode"
        elif key == "sim1Pin":
            suggest = "sim1_pin"
        elif key == "sim1PinCode":
            suggest = "sim1_pin_code"
        elif key == "sim2Pin":
            suggest = "sim2_pin"
        elif key == "sim2PinCode":
            suggest = "sim2_pin_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerExtenderProfileCellularModem1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerExtenderProfileCellularModem1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerExtenderProfileCellularModem1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_switch: Optional['outputs.ExtensionControllerExtenderProfileCellularModem1AutoSwitch'] = None,
                 conn_status: Optional[int] = None,
                 default_sim: Optional[str] = None,
                 gps: Optional[str] = None,
                 preferred_carrier: Optional[str] = None,
                 redundant_intf: Optional[str] = None,
                 redundant_mode: Optional[str] = None,
                 sim1_pin: Optional[str] = None,
                 sim1_pin_code: Optional[str] = None,
                 sim2_pin: Optional[str] = None,
                 sim2_pin_code: Optional[str] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional['outputs.ExtensionControllerExtenderProfileCellularModem1AutoSwitch']:
        return pulumi.get(self, "auto_switch")

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[int]:
        return pulumi.get(self, "conn_status")

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[str]:
        return pulumi.get(self, "default_sim")

    @property
    @pulumi.getter
    def gps(self) -> Optional[str]:
        return pulumi.get(self, "gps")

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[str]:
        return pulumi.get(self, "preferred_carrier")

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[str]:
        return pulumi.get(self, "redundant_intf")

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[str]:
        return pulumi.get(self, "redundant_mode")

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin")

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin_code")

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin")

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin_code")


@pulumi.output_type
class ExtensionControllerExtenderProfileCellularModem1AutoSwitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disconnectPeriod":
            suggest = "disconnect_period"
        elif key == "disconnectThreshold":
            suggest = "disconnect_threshold"
        elif key == "switchBack":
            suggest = "switch_back"
        elif key == "switchBackTime":
            suggest = "switch_back_time"
        elif key == "switchBackTimer":
            suggest = "switch_back_timer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerExtenderProfileCellularModem1AutoSwitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerExtenderProfileCellularModem1AutoSwitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerExtenderProfileCellularModem1AutoSwitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplan: Optional[str] = None,
                 disconnect: Optional[str] = None,
                 disconnect_period: Optional[int] = None,
                 disconnect_threshold: Optional[int] = None,
                 signal: Optional[str] = None,
                 switch_back: Optional[str] = None,
                 switch_back_time: Optional[str] = None,
                 switch_back_timer: Optional[int] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[str]:
        return pulumi.get(self, "dataplan")

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[str]:
        return pulumi.get(self, "disconnect")

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_period")

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_threshold")

    @property
    @pulumi.getter
    def signal(self) -> Optional[str]:
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[str]:
        return pulumi.get(self, "switch_back")

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[str]:
        return pulumi.get(self, "switch_back_time")

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[int]:
        return pulumi.get(self, "switch_back_timer")


@pulumi.output_type
class ExtensionControllerExtenderProfileCellularModem2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSwitch":
            suggest = "auto_switch"
        elif key == "connStatus":
            suggest = "conn_status"
        elif key == "defaultSim":
            suggest = "default_sim"
        elif key == "preferredCarrier":
            suggest = "preferred_carrier"
        elif key == "redundantIntf":
            suggest = "redundant_intf"
        elif key == "redundantMode":
            suggest = "redundant_mode"
        elif key == "sim1Pin":
            suggest = "sim1_pin"
        elif key == "sim1PinCode":
            suggest = "sim1_pin_code"
        elif key == "sim2Pin":
            suggest = "sim2_pin"
        elif key == "sim2PinCode":
            suggest = "sim2_pin_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerExtenderProfileCellularModem2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerExtenderProfileCellularModem2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerExtenderProfileCellularModem2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_switch: Optional['outputs.ExtensionControllerExtenderProfileCellularModem2AutoSwitch'] = None,
                 conn_status: Optional[int] = None,
                 default_sim: Optional[str] = None,
                 gps: Optional[str] = None,
                 preferred_carrier: Optional[str] = None,
                 redundant_intf: Optional[str] = None,
                 redundant_mode: Optional[str] = None,
                 sim1_pin: Optional[str] = None,
                 sim1_pin_code: Optional[str] = None,
                 sim2_pin: Optional[str] = None,
                 sim2_pin_code: Optional[str] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional['outputs.ExtensionControllerExtenderProfileCellularModem2AutoSwitch']:
        return pulumi.get(self, "auto_switch")

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[int]:
        return pulumi.get(self, "conn_status")

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[str]:
        return pulumi.get(self, "default_sim")

    @property
    @pulumi.getter
    def gps(self) -> Optional[str]:
        return pulumi.get(self, "gps")

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[str]:
        return pulumi.get(self, "preferred_carrier")

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[str]:
        return pulumi.get(self, "redundant_intf")

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[str]:
        return pulumi.get(self, "redundant_mode")

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin")

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim1_pin_code")

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin")

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[str]:
        return pulumi.get(self, "sim2_pin_code")


@pulumi.output_type
class ExtensionControllerExtenderProfileCellularModem2AutoSwitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disconnectPeriod":
            suggest = "disconnect_period"
        elif key == "disconnectThreshold":
            suggest = "disconnect_threshold"
        elif key == "switchBack":
            suggest = "switch_back"
        elif key == "switchBackTime":
            suggest = "switch_back_time"
        elif key == "switchBackTimer":
            suggest = "switch_back_timer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerExtenderProfileCellularModem2AutoSwitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerExtenderProfileCellularModem2AutoSwitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerExtenderProfileCellularModem2AutoSwitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataplan: Optional[str] = None,
                 disconnect: Optional[str] = None,
                 disconnect_period: Optional[int] = None,
                 disconnect_threshold: Optional[int] = None,
                 signal: Optional[str] = None,
                 switch_back: Optional[str] = None,
                 switch_back_time: Optional[str] = None,
                 switch_back_timer: Optional[int] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[str]:
        return pulumi.get(self, "dataplan")

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[str]:
        return pulumi.get(self, "disconnect")

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_period")

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[int]:
        return pulumi.get(self, "disconnect_threshold")

    @property
    @pulumi.getter
    def signal(self) -> Optional[str]:
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[str]:
        return pulumi.get(self, "switch_back")

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[str]:
        return pulumi.get(self, "switch_back_time")

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[int]:
        return pulumi.get(self, "switch_back_timer")


@pulumi.output_type
class ExtensionControllerExtenderProfileCellularSmsNotification(dict):
    def __init__(__self__, *,
                 alert: Optional['outputs.ExtensionControllerExtenderProfileCellularSmsNotificationAlert'] = None,
                 receivers: Optional[Sequence['outputs.ExtensionControllerExtenderProfileCellularSmsNotificationReceiver']] = None,
                 status: Optional[str] = None):
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional['outputs.ExtensionControllerExtenderProfileCellularSmsNotificationAlert']:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def receivers(self) -> Optional[Sequence['outputs.ExtensionControllerExtenderProfileCellularSmsNotificationReceiver']]:
        return pulumi.get(self, "receivers")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ExtensionControllerExtenderProfileCellularSmsNotificationAlert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataExhausted":
            suggest = "data_exhausted"
        elif key == "fgtBackupModeSwitch":
            suggest = "fgt_backup_mode_switch"
        elif key == "lowSignalStrength":
            suggest = "low_signal_strength"
        elif key == "modeSwitch":
            suggest = "mode_switch"
        elif key == "osImageFallback":
            suggest = "os_image_fallback"
        elif key == "sessionDisconnect":
            suggest = "session_disconnect"
        elif key == "systemReboot":
            suggest = "system_reboot"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerExtenderProfileCellularSmsNotificationAlert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerExtenderProfileCellularSmsNotificationAlert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerExtenderProfileCellularSmsNotificationAlert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_exhausted: Optional[str] = None,
                 fgt_backup_mode_switch: Optional[str] = None,
                 low_signal_strength: Optional[str] = None,
                 mode_switch: Optional[str] = None,
                 os_image_fallback: Optional[str] = None,
                 session_disconnect: Optional[str] = None,
                 system_reboot: Optional[str] = None):
        if data_exhausted is not None:
            pulumi.set(__self__, "data_exhausted", data_exhausted)
        if fgt_backup_mode_switch is not None:
            pulumi.set(__self__, "fgt_backup_mode_switch", fgt_backup_mode_switch)
        if low_signal_strength is not None:
            pulumi.set(__self__, "low_signal_strength", low_signal_strength)
        if mode_switch is not None:
            pulumi.set(__self__, "mode_switch", mode_switch)
        if os_image_fallback is not None:
            pulumi.set(__self__, "os_image_fallback", os_image_fallback)
        if session_disconnect is not None:
            pulumi.set(__self__, "session_disconnect", session_disconnect)
        if system_reboot is not None:
            pulumi.set(__self__, "system_reboot", system_reboot)

    @property
    @pulumi.getter(name="dataExhausted")
    def data_exhausted(self) -> Optional[str]:
        return pulumi.get(self, "data_exhausted")

    @property
    @pulumi.getter(name="fgtBackupModeSwitch")
    def fgt_backup_mode_switch(self) -> Optional[str]:
        return pulumi.get(self, "fgt_backup_mode_switch")

    @property
    @pulumi.getter(name="lowSignalStrength")
    def low_signal_strength(self) -> Optional[str]:
        return pulumi.get(self, "low_signal_strength")

    @property
    @pulumi.getter(name="modeSwitch")
    def mode_switch(self) -> Optional[str]:
        return pulumi.get(self, "mode_switch")

    @property
    @pulumi.getter(name="osImageFallback")
    def os_image_fallback(self) -> Optional[str]:
        return pulumi.get(self, "os_image_fallback")

    @property
    @pulumi.getter(name="sessionDisconnect")
    def session_disconnect(self) -> Optional[str]:
        return pulumi.get(self, "session_disconnect")

    @property
    @pulumi.getter(name="systemReboot")
    def system_reboot(self) -> Optional[str]:
        return pulumi.get(self, "system_reboot")


@pulumi.output_type
class ExtensionControllerExtenderProfileCellularSmsNotificationReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerExtenderProfileCellularSmsNotificationReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerExtenderProfileCellularSmsNotificationReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerExtenderProfileCellularSmsNotificationReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert: Optional[str] = None,
                 name: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 status: Optional[str] = None):
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional[str]:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ExtensionControllerExtenderProfileLanExtension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backhaulInterface":
            suggest = "backhaul_interface"
        elif key == "backhaulIp":
            suggest = "backhaul_ip"
        elif key == "ipsecTunnel":
            suggest = "ipsec_tunnel"
        elif key == "linkLoadbalance":
            suggest = "link_loadbalance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerExtenderProfileLanExtension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerExtenderProfileLanExtension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerExtenderProfileLanExtension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backhaul_interface: Optional[str] = None,
                 backhaul_ip: Optional[str] = None,
                 backhauls: Optional[Sequence['outputs.ExtensionControllerExtenderProfileLanExtensionBackhaul']] = None,
                 ipsec_tunnel: Optional[str] = None,
                 link_loadbalance: Optional[str] = None):
        if backhaul_interface is not None:
            pulumi.set(__self__, "backhaul_interface", backhaul_interface)
        if backhaul_ip is not None:
            pulumi.set(__self__, "backhaul_ip", backhaul_ip)
        if backhauls is not None:
            pulumi.set(__self__, "backhauls", backhauls)
        if ipsec_tunnel is not None:
            pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)
        if link_loadbalance is not None:
            pulumi.set(__self__, "link_loadbalance", link_loadbalance)

    @property
    @pulumi.getter(name="backhaulInterface")
    def backhaul_interface(self) -> Optional[str]:
        return pulumi.get(self, "backhaul_interface")

    @property
    @pulumi.getter(name="backhaulIp")
    def backhaul_ip(self) -> Optional[str]:
        return pulumi.get(self, "backhaul_ip")

    @property
    @pulumi.getter
    def backhauls(self) -> Optional[Sequence['outputs.ExtensionControllerExtenderProfileLanExtensionBackhaul']]:
        return pulumi.get(self, "backhauls")

    @property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_tunnel")

    @property
    @pulumi.getter(name="linkLoadbalance")
    def link_loadbalance(self) -> Optional[str]:
        return pulumi.get(self, "link_loadbalance")


@pulumi.output_type
class ExtensionControllerExtenderProfileLanExtensionBackhaul(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 port: Optional[str] = None,
                 role: Optional[str] = None,
                 weight: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class ExtensionControllerExtenderWanExtension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modem1Extension":
            suggest = "modem1_extension"
        elif key == "modem2Extension":
            suggest = "modem2_extension"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerExtenderWanExtension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerExtenderWanExtension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerExtenderWanExtension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 modem1_extension: Optional[str] = None,
                 modem2_extension: Optional[str] = None):
        if modem1_extension is not None:
            pulumi.set(__self__, "modem1_extension", modem1_extension)
        if modem2_extension is not None:
            pulumi.set(__self__, "modem2_extension", modem2_extension)

    @property
    @pulumi.getter(name="modem1Extension")
    def modem1_extension(self) -> Optional[str]:
        return pulumi.get(self, "modem1_extension")

    @property
    @pulumi.getter(name="modem2Extension")
    def modem2_extension(self) -> Optional[str]:
        return pulumi.get(self, "modem2_extension")


@pulumi.output_type
class ExtensionControllerFortigateProfileLanExtension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backhaulInterface":
            suggest = "backhaul_interface"
        elif key == "backhaulIp":
            suggest = "backhaul_ip"
        elif key == "ipsecTunnel":
            suggest = "ipsec_tunnel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionControllerFortigateProfileLanExtension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionControllerFortigateProfileLanExtension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionControllerFortigateProfileLanExtension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backhaul_interface: Optional[str] = None,
                 backhaul_ip: Optional[str] = None,
                 ipsec_tunnel: Optional[str] = None):
        if backhaul_interface is not None:
            pulumi.set(__self__, "backhaul_interface", backhaul_interface)
        if backhaul_ip is not None:
            pulumi.set(__self__, "backhaul_ip", backhaul_ip)
        if ipsec_tunnel is not None:
            pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)

    @property
    @pulumi.getter(name="backhaulInterface")
    def backhaul_interface(self) -> Optional[str]:
        return pulumi.get(self, "backhaul_interface")

    @property
    @pulumi.getter(name="backhaulIp")
    def backhaul_ip(self) -> Optional[str]:
        return pulumi.get(self, "backhaul_ip")

    @property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_tunnel")


@pulumi.output_type
class FileFilterProfileRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileTypes":
            suggest = "file_types"
        elif key == "passwordProtected":
            suggest = "password_protected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileFilterProfileRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileFilterProfileRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileFilterProfileRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 comment: Optional[str] = None,
                 direction: Optional[str] = None,
                 file_types: Optional[Sequence['outputs.FileFilterProfileRuleFileType']] = None,
                 name: Optional[str] = None,
                 password_protected: Optional[str] = None,
                 protocol: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[Sequence['outputs.FileFilterProfileRuleFileType']]:
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[str]:
        return pulumi.get(self, "password_protected")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class FileFilterProfileRuleFileType(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAccessProxy6ApiGateway6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpCookieAge":
            suggest = "http_cookie_age"
        elif key == "httpCookieDomain":
            suggest = "http_cookie_domain"
        elif key == "httpCookieDomainFromHost":
            suggest = "http_cookie_domain_from_host"
        elif key == "httpCookieGeneration":
            suggest = "http_cookie_generation"
        elif key == "httpCookiePath":
            suggest = "http_cookie_path"
        elif key == "httpCookieShare":
            suggest = "http_cookie_share"
        elif key == "httpsCookieSecure":
            suggest = "https_cookie_secure"
        elif key == "ldbMethod":
            suggest = "ldb_method"
        elif key == "samlRedirect":
            suggest = "saml_redirect"
        elif key == "samlServer":
            suggest = "saml_server"
        elif key == "sslAlgorithm":
            suggest = "ssl_algorithm"
        elif key == "sslCipherSuites":
            suggest = "ssl_cipher_suites"
        elif key == "sslDhBits":
            suggest = "ssl_dh_bits"
        elif key == "sslMaxVersion":
            suggest = "ssl_max_version"
        elif key == "sslMinVersion":
            suggest = "ssl_min_version"
        elif key == "sslRenegotiation":
            suggest = "ssl_renegotiation"
        elif key == "sslVpnWebPortal":
            suggest = "ssl_vpn_web_portal"
        elif key == "urlMap":
            suggest = "url_map"
        elif key == "urlMapType":
            suggest = "url_map_type"
        elif key == "virtualHost":
            suggest = "virtual_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallAccessProxy6ApiGateway6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallAccessProxy6ApiGateway6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallAccessProxy6ApiGateway6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applications: Optional[Sequence['outputs.FirewallAccessProxy6ApiGateway6Application']] = None,
                 http_cookie_age: Optional[int] = None,
                 http_cookie_domain: Optional[str] = None,
                 http_cookie_domain_from_host: Optional[str] = None,
                 http_cookie_generation: Optional[int] = None,
                 http_cookie_path: Optional[str] = None,
                 http_cookie_share: Optional[str] = None,
                 https_cookie_secure: Optional[str] = None,
                 id: Optional[int] = None,
                 ldb_method: Optional[str] = None,
                 persistence: Optional[str] = None,
                 realservers: Optional[Sequence['outputs.FirewallAccessProxy6ApiGateway6Realserver']] = None,
                 saml_redirect: Optional[str] = None,
                 saml_server: Optional[str] = None,
                 service: Optional[str] = None,
                 ssl_algorithm: Optional[str] = None,
                 ssl_cipher_suites: Optional[Sequence['outputs.FirewallAccessProxy6ApiGateway6SslCipherSuite']] = None,
                 ssl_dh_bits: Optional[str] = None,
                 ssl_max_version: Optional[str] = None,
                 ssl_min_version: Optional[str] = None,
                 ssl_renegotiation: Optional[str] = None,
                 ssl_vpn_web_portal: Optional[str] = None,
                 url_map: Optional[str] = None,
                 url_map_type: Optional[str] = None,
                 virtual_host: Optional[str] = None):
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence['outputs.FirewallAccessProxy6ApiGateway6Application']]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[int]:
        return pulumi.get(self, "http_cookie_age")

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_domain")

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[int]:
        return pulumi.get(self, "http_cookie_generation")

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_path")

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_share")

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[str]:
        return pulumi.get(self, "https_cookie_secure")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[str]:
        return pulumi.get(self, "ldb_method")

    @property
    @pulumi.getter
    def persistence(self) -> Optional[str]:
        return pulumi.get(self, "persistence")

    @property
    @pulumi.getter
    def realservers(self) -> Optional[Sequence['outputs.FirewallAccessProxy6ApiGateway6Realserver']]:
        return pulumi.get(self, "realservers")

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[str]:
        return pulumi.get(self, "saml_redirect")

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[str]:
        return pulumi.get(self, "saml_server")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "ssl_algorithm")

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[Sequence['outputs.FirewallAccessProxy6ApiGateway6SslCipherSuite']]:
        return pulumi.get(self, "ssl_cipher_suites")

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[str]:
        return pulumi.get(self, "ssl_dh_bits")

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[str]:
        return pulumi.get(self, "ssl_max_version")

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[str]:
        return pulumi.get(self, "ssl_min_version")

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[str]:
        return pulumi.get(self, "ssl_renegotiation")

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[str]:
        return pulumi.get(self, "ssl_vpn_web_portal")

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[str]:
        return pulumi.get(self, "url_map")

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[str]:
        return pulumi.get(self, "url_map_type")

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[str]:
        return pulumi.get(self, "virtual_host")


@pulumi.output_type
class FirewallAccessProxy6ApiGateway6Application(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAccessProxy6ApiGateway6Realserver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "externalAuth":
            suggest = "external_auth"
        elif key == "healthCheck":
            suggest = "health_check"
        elif key == "healthCheckProto":
            suggest = "health_check_proto"
        elif key == "holddownInterval":
            suggest = "holddown_interval"
        elif key == "httpHost":
            suggest = "http_host"
        elif key == "sshClientCert":
            suggest = "ssh_client_cert"
        elif key == "sshHostKeyValidation":
            suggest = "ssh_host_key_validation"
        elif key == "sshHostKeys":
            suggest = "ssh_host_keys"
        elif key == "translateHost":
            suggest = "translate_host"
        elif key == "tunnelEncryption":
            suggest = "tunnel_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallAccessProxy6ApiGateway6Realserver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallAccessProxy6ApiGateway6Realserver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallAccessProxy6ApiGateway6Realserver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_type: Optional[str] = None,
                 address: Optional[str] = None,
                 domain: Optional[str] = None,
                 external_auth: Optional[str] = None,
                 health_check: Optional[str] = None,
                 health_check_proto: Optional[str] = None,
                 holddown_interval: Optional[str] = None,
                 http_host: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 mappedport: Optional[str] = None,
                 port: Optional[int] = None,
                 ssh_client_cert: Optional[str] = None,
                 ssh_host_key_validation: Optional[str] = None,
                 ssh_host_keys: Optional[Sequence['outputs.FirewallAccessProxy6ApiGateway6RealserverSshHostKey']] = None,
                 status: Optional[str] = None,
                 translate_host: Optional[str] = None,
                 tunnel_encryption: Optional[str] = None,
                 type: Optional[str] = None,
                 weight: Optional[int] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[str]:
        return pulumi.get(self, "external_auth")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[str]:
        return pulumi.get(self, "health_check_proto")

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[str]:
        return pulumi.get(self, "holddown_interval")

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[str]:
        return pulumi.get(self, "http_host")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[str]:
        return pulumi.get(self, "mappedport")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[str]:
        return pulumi.get(self, "ssh_client_cert")

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[str]:
        return pulumi.get(self, "ssh_host_key_validation")

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[Sequence['outputs.FirewallAccessProxy6ApiGateway6RealserverSshHostKey']]:
        return pulumi.get(self, "ssh_host_keys")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[str]:
        return pulumi.get(self, "translate_host")

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_encryption")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FirewallAccessProxy6ApiGateway6RealserverSshHostKey(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAccessProxy6ApiGateway6SslCipherSuite(dict):
    def __init__(__self__, *,
                 cipher: Optional[str] = None,
                 priority: Optional[int] = None,
                 versions: Optional[str] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def versions(self) -> Optional[str]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class FirewallAccessProxy6ApiGateway(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpCookieAge":
            suggest = "http_cookie_age"
        elif key == "httpCookieDomain":
            suggest = "http_cookie_domain"
        elif key == "httpCookieDomainFromHost":
            suggest = "http_cookie_domain_from_host"
        elif key == "httpCookieGeneration":
            suggest = "http_cookie_generation"
        elif key == "httpCookiePath":
            suggest = "http_cookie_path"
        elif key == "httpCookieShare":
            suggest = "http_cookie_share"
        elif key == "httpsCookieSecure":
            suggest = "https_cookie_secure"
        elif key == "ldbMethod":
            suggest = "ldb_method"
        elif key == "samlRedirect":
            suggest = "saml_redirect"
        elif key == "samlServer":
            suggest = "saml_server"
        elif key == "sslAlgorithm":
            suggest = "ssl_algorithm"
        elif key == "sslCipherSuites":
            suggest = "ssl_cipher_suites"
        elif key == "sslDhBits":
            suggest = "ssl_dh_bits"
        elif key == "sslMaxVersion":
            suggest = "ssl_max_version"
        elif key == "sslMinVersion":
            suggest = "ssl_min_version"
        elif key == "sslRenegotiation":
            suggest = "ssl_renegotiation"
        elif key == "sslVpnWebPortal":
            suggest = "ssl_vpn_web_portal"
        elif key == "urlMap":
            suggest = "url_map"
        elif key == "urlMapType":
            suggest = "url_map_type"
        elif key == "virtualHost":
            suggest = "virtual_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallAccessProxy6ApiGateway. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallAccessProxy6ApiGateway.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallAccessProxy6ApiGateway.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applications: Optional[Sequence['outputs.FirewallAccessProxy6ApiGatewayApplication']] = None,
                 http_cookie_age: Optional[int] = None,
                 http_cookie_domain: Optional[str] = None,
                 http_cookie_domain_from_host: Optional[str] = None,
                 http_cookie_generation: Optional[int] = None,
                 http_cookie_path: Optional[str] = None,
                 http_cookie_share: Optional[str] = None,
                 https_cookie_secure: Optional[str] = None,
                 id: Optional[int] = None,
                 ldb_method: Optional[str] = None,
                 persistence: Optional[str] = None,
                 realservers: Optional[Sequence['outputs.FirewallAccessProxy6ApiGatewayRealserver']] = None,
                 saml_redirect: Optional[str] = None,
                 saml_server: Optional[str] = None,
                 service: Optional[str] = None,
                 ssl_algorithm: Optional[str] = None,
                 ssl_cipher_suites: Optional[Sequence['outputs.FirewallAccessProxy6ApiGatewaySslCipherSuite']] = None,
                 ssl_dh_bits: Optional[str] = None,
                 ssl_max_version: Optional[str] = None,
                 ssl_min_version: Optional[str] = None,
                 ssl_renegotiation: Optional[str] = None,
                 ssl_vpn_web_portal: Optional[str] = None,
                 url_map: Optional[str] = None,
                 url_map_type: Optional[str] = None,
                 virtual_host: Optional[str] = None):
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence['outputs.FirewallAccessProxy6ApiGatewayApplication']]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[int]:
        return pulumi.get(self, "http_cookie_age")

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_domain")

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[int]:
        return pulumi.get(self, "http_cookie_generation")

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_path")

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_share")

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[str]:
        return pulumi.get(self, "https_cookie_secure")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[str]:
        return pulumi.get(self, "ldb_method")

    @property
    @pulumi.getter
    def persistence(self) -> Optional[str]:
        return pulumi.get(self, "persistence")

    @property
    @pulumi.getter
    def realservers(self) -> Optional[Sequence['outputs.FirewallAccessProxy6ApiGatewayRealserver']]:
        return pulumi.get(self, "realservers")

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[str]:
        return pulumi.get(self, "saml_redirect")

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[str]:
        return pulumi.get(self, "saml_server")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "ssl_algorithm")

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[Sequence['outputs.FirewallAccessProxy6ApiGatewaySslCipherSuite']]:
        return pulumi.get(self, "ssl_cipher_suites")

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[str]:
        return pulumi.get(self, "ssl_dh_bits")

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[str]:
        return pulumi.get(self, "ssl_max_version")

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[str]:
        return pulumi.get(self, "ssl_min_version")

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[str]:
        return pulumi.get(self, "ssl_renegotiation")

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[str]:
        return pulumi.get(self, "ssl_vpn_web_portal")

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[str]:
        return pulumi.get(self, "url_map")

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[str]:
        return pulumi.get(self, "url_map_type")

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[str]:
        return pulumi.get(self, "virtual_host")


@pulumi.output_type
class FirewallAccessProxy6ApiGatewayApplication(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAccessProxy6ApiGatewayRealserver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "externalAuth":
            suggest = "external_auth"
        elif key == "healthCheck":
            suggest = "health_check"
        elif key == "healthCheckProto":
            suggest = "health_check_proto"
        elif key == "holddownInterval":
            suggest = "holddown_interval"
        elif key == "httpHost":
            suggest = "http_host"
        elif key == "sshClientCert":
            suggest = "ssh_client_cert"
        elif key == "sshHostKeyValidation":
            suggest = "ssh_host_key_validation"
        elif key == "sshHostKeys":
            suggest = "ssh_host_keys"
        elif key == "translateHost":
            suggest = "translate_host"
        elif key == "tunnelEncryption":
            suggest = "tunnel_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallAccessProxy6ApiGatewayRealserver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallAccessProxy6ApiGatewayRealserver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallAccessProxy6ApiGatewayRealserver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_type: Optional[str] = None,
                 address: Optional[str] = None,
                 domain: Optional[str] = None,
                 external_auth: Optional[str] = None,
                 health_check: Optional[str] = None,
                 health_check_proto: Optional[str] = None,
                 holddown_interval: Optional[str] = None,
                 http_host: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 mappedport: Optional[str] = None,
                 port: Optional[int] = None,
                 ssh_client_cert: Optional[str] = None,
                 ssh_host_key_validation: Optional[str] = None,
                 ssh_host_keys: Optional[Sequence['outputs.FirewallAccessProxy6ApiGatewayRealserverSshHostKey']] = None,
                 status: Optional[str] = None,
                 translate_host: Optional[str] = None,
                 tunnel_encryption: Optional[str] = None,
                 type: Optional[str] = None,
                 weight: Optional[int] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[str]:
        return pulumi.get(self, "external_auth")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[str]:
        return pulumi.get(self, "health_check_proto")

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[str]:
        return pulumi.get(self, "holddown_interval")

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[str]:
        return pulumi.get(self, "http_host")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[str]:
        return pulumi.get(self, "mappedport")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[str]:
        return pulumi.get(self, "ssh_client_cert")

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[str]:
        return pulumi.get(self, "ssh_host_key_validation")

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[Sequence['outputs.FirewallAccessProxy6ApiGatewayRealserverSshHostKey']]:
        return pulumi.get(self, "ssh_host_keys")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[str]:
        return pulumi.get(self, "translate_host")

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_encryption")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FirewallAccessProxy6ApiGatewayRealserverSshHostKey(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAccessProxy6ApiGatewaySslCipherSuite(dict):
    def __init__(__self__, *,
                 cipher: Optional[str] = None,
                 priority: Optional[int] = None,
                 versions: Optional[str] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def versions(self) -> Optional[str]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class FirewallAccessProxyApiGateway6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpCookieAge":
            suggest = "http_cookie_age"
        elif key == "httpCookieDomain":
            suggest = "http_cookie_domain"
        elif key == "httpCookieDomainFromHost":
            suggest = "http_cookie_domain_from_host"
        elif key == "httpCookieGeneration":
            suggest = "http_cookie_generation"
        elif key == "httpCookiePath":
            suggest = "http_cookie_path"
        elif key == "httpCookieShare":
            suggest = "http_cookie_share"
        elif key == "httpsCookieSecure":
            suggest = "https_cookie_secure"
        elif key == "ldbMethod":
            suggest = "ldb_method"
        elif key == "samlRedirect":
            suggest = "saml_redirect"
        elif key == "samlServer":
            suggest = "saml_server"
        elif key == "sslAlgorithm":
            suggest = "ssl_algorithm"
        elif key == "sslCipherSuites":
            suggest = "ssl_cipher_suites"
        elif key == "sslDhBits":
            suggest = "ssl_dh_bits"
        elif key == "sslMaxVersion":
            suggest = "ssl_max_version"
        elif key == "sslMinVersion":
            suggest = "ssl_min_version"
        elif key == "sslRenegotiation":
            suggest = "ssl_renegotiation"
        elif key == "sslVpnWebPortal":
            suggest = "ssl_vpn_web_portal"
        elif key == "urlMap":
            suggest = "url_map"
        elif key == "urlMapType":
            suggest = "url_map_type"
        elif key == "virtualHost":
            suggest = "virtual_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallAccessProxyApiGateway6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallAccessProxyApiGateway6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallAccessProxyApiGateway6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applications: Optional[Sequence['outputs.FirewallAccessProxyApiGateway6Application']] = None,
                 http_cookie_age: Optional[int] = None,
                 http_cookie_domain: Optional[str] = None,
                 http_cookie_domain_from_host: Optional[str] = None,
                 http_cookie_generation: Optional[int] = None,
                 http_cookie_path: Optional[str] = None,
                 http_cookie_share: Optional[str] = None,
                 https_cookie_secure: Optional[str] = None,
                 id: Optional[int] = None,
                 ldb_method: Optional[str] = None,
                 persistence: Optional[str] = None,
                 realservers: Optional[Sequence['outputs.FirewallAccessProxyApiGateway6Realserver']] = None,
                 saml_redirect: Optional[str] = None,
                 saml_server: Optional[str] = None,
                 service: Optional[str] = None,
                 ssl_algorithm: Optional[str] = None,
                 ssl_cipher_suites: Optional[Sequence['outputs.FirewallAccessProxyApiGateway6SslCipherSuite']] = None,
                 ssl_dh_bits: Optional[str] = None,
                 ssl_max_version: Optional[str] = None,
                 ssl_min_version: Optional[str] = None,
                 ssl_renegotiation: Optional[str] = None,
                 ssl_vpn_web_portal: Optional[str] = None,
                 url_map: Optional[str] = None,
                 url_map_type: Optional[str] = None,
                 virtual_host: Optional[str] = None):
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence['outputs.FirewallAccessProxyApiGateway6Application']]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[int]:
        return pulumi.get(self, "http_cookie_age")

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_domain")

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[int]:
        return pulumi.get(self, "http_cookie_generation")

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_path")

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_share")

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[str]:
        return pulumi.get(self, "https_cookie_secure")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[str]:
        return pulumi.get(self, "ldb_method")

    @property
    @pulumi.getter
    def persistence(self) -> Optional[str]:
        return pulumi.get(self, "persistence")

    @property
    @pulumi.getter
    def realservers(self) -> Optional[Sequence['outputs.FirewallAccessProxyApiGateway6Realserver']]:
        return pulumi.get(self, "realservers")

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[str]:
        return pulumi.get(self, "saml_redirect")

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[str]:
        return pulumi.get(self, "saml_server")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "ssl_algorithm")

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[Sequence['outputs.FirewallAccessProxyApiGateway6SslCipherSuite']]:
        return pulumi.get(self, "ssl_cipher_suites")

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[str]:
        return pulumi.get(self, "ssl_dh_bits")

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[str]:
        return pulumi.get(self, "ssl_max_version")

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[str]:
        return pulumi.get(self, "ssl_min_version")

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[str]:
        return pulumi.get(self, "ssl_renegotiation")

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[str]:
        return pulumi.get(self, "ssl_vpn_web_portal")

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[str]:
        return pulumi.get(self, "url_map")

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[str]:
        return pulumi.get(self, "url_map_type")

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[str]:
        return pulumi.get(self, "virtual_host")


@pulumi.output_type
class FirewallAccessProxyApiGateway6Application(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAccessProxyApiGateway6Realserver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "externalAuth":
            suggest = "external_auth"
        elif key == "healthCheck":
            suggest = "health_check"
        elif key == "healthCheckProto":
            suggest = "health_check_proto"
        elif key == "holddownInterval":
            suggest = "holddown_interval"
        elif key == "httpHost":
            suggest = "http_host"
        elif key == "sshClientCert":
            suggest = "ssh_client_cert"
        elif key == "sshHostKeyValidation":
            suggest = "ssh_host_key_validation"
        elif key == "sshHostKeys":
            suggest = "ssh_host_keys"
        elif key == "translateHost":
            suggest = "translate_host"
        elif key == "tunnelEncryption":
            suggest = "tunnel_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallAccessProxyApiGateway6Realserver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallAccessProxyApiGateway6Realserver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallAccessProxyApiGateway6Realserver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_type: Optional[str] = None,
                 address: Optional[str] = None,
                 domain: Optional[str] = None,
                 external_auth: Optional[str] = None,
                 health_check: Optional[str] = None,
                 health_check_proto: Optional[str] = None,
                 holddown_interval: Optional[str] = None,
                 http_host: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 mappedport: Optional[str] = None,
                 port: Optional[int] = None,
                 ssh_client_cert: Optional[str] = None,
                 ssh_host_key_validation: Optional[str] = None,
                 ssh_host_keys: Optional[Sequence['outputs.FirewallAccessProxyApiGateway6RealserverSshHostKey']] = None,
                 status: Optional[str] = None,
                 translate_host: Optional[str] = None,
                 tunnel_encryption: Optional[str] = None,
                 type: Optional[str] = None,
                 weight: Optional[int] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[str]:
        return pulumi.get(self, "external_auth")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[str]:
        return pulumi.get(self, "health_check_proto")

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[str]:
        return pulumi.get(self, "holddown_interval")

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[str]:
        return pulumi.get(self, "http_host")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[str]:
        return pulumi.get(self, "mappedport")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[str]:
        return pulumi.get(self, "ssh_client_cert")

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[str]:
        return pulumi.get(self, "ssh_host_key_validation")

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[Sequence['outputs.FirewallAccessProxyApiGateway6RealserverSshHostKey']]:
        return pulumi.get(self, "ssh_host_keys")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[str]:
        return pulumi.get(self, "translate_host")

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_encryption")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FirewallAccessProxyApiGateway6RealserverSshHostKey(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAccessProxyApiGateway6SslCipherSuite(dict):
    def __init__(__self__, *,
                 cipher: Optional[str] = None,
                 priority: Optional[int] = None,
                 versions: Optional[str] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def versions(self) -> Optional[str]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class FirewallAccessProxyApiGateway(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpCookieAge":
            suggest = "http_cookie_age"
        elif key == "httpCookieDomain":
            suggest = "http_cookie_domain"
        elif key == "httpCookieDomainFromHost":
            suggest = "http_cookie_domain_from_host"
        elif key == "httpCookieGeneration":
            suggest = "http_cookie_generation"
        elif key == "httpCookiePath":
            suggest = "http_cookie_path"
        elif key == "httpCookieShare":
            suggest = "http_cookie_share"
        elif key == "httpsCookieSecure":
            suggest = "https_cookie_secure"
        elif key == "ldbMethod":
            suggest = "ldb_method"
        elif key == "samlRedirect":
            suggest = "saml_redirect"
        elif key == "samlServer":
            suggest = "saml_server"
        elif key == "sslAlgorithm":
            suggest = "ssl_algorithm"
        elif key == "sslCipherSuites":
            suggest = "ssl_cipher_suites"
        elif key == "sslDhBits":
            suggest = "ssl_dh_bits"
        elif key == "sslMaxVersion":
            suggest = "ssl_max_version"
        elif key == "sslMinVersion":
            suggest = "ssl_min_version"
        elif key == "sslRenegotiation":
            suggest = "ssl_renegotiation"
        elif key == "sslVpnWebPortal":
            suggest = "ssl_vpn_web_portal"
        elif key == "urlMap":
            suggest = "url_map"
        elif key == "urlMapType":
            suggest = "url_map_type"
        elif key == "virtualHost":
            suggest = "virtual_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallAccessProxyApiGateway. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallAccessProxyApiGateway.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallAccessProxyApiGateway.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applications: Optional[Sequence['outputs.FirewallAccessProxyApiGatewayApplication']] = None,
                 http_cookie_age: Optional[int] = None,
                 http_cookie_domain: Optional[str] = None,
                 http_cookie_domain_from_host: Optional[str] = None,
                 http_cookie_generation: Optional[int] = None,
                 http_cookie_path: Optional[str] = None,
                 http_cookie_share: Optional[str] = None,
                 https_cookie_secure: Optional[str] = None,
                 id: Optional[int] = None,
                 ldb_method: Optional[str] = None,
                 persistence: Optional[str] = None,
                 realservers: Optional[Sequence['outputs.FirewallAccessProxyApiGatewayRealserver']] = None,
                 saml_redirect: Optional[str] = None,
                 saml_server: Optional[str] = None,
                 service: Optional[str] = None,
                 ssl_algorithm: Optional[str] = None,
                 ssl_cipher_suites: Optional[Sequence['outputs.FirewallAccessProxyApiGatewaySslCipherSuite']] = None,
                 ssl_dh_bits: Optional[str] = None,
                 ssl_max_version: Optional[str] = None,
                 ssl_min_version: Optional[str] = None,
                 ssl_renegotiation: Optional[str] = None,
                 ssl_vpn_web_portal: Optional[str] = None,
                 url_map: Optional[str] = None,
                 url_map_type: Optional[str] = None,
                 virtual_host: Optional[str] = None):
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence['outputs.FirewallAccessProxyApiGatewayApplication']]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[int]:
        return pulumi.get(self, "http_cookie_age")

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_domain")

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[int]:
        return pulumi.get(self, "http_cookie_generation")

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_path")

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[str]:
        return pulumi.get(self, "http_cookie_share")

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[str]:
        return pulumi.get(self, "https_cookie_secure")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[str]:
        return pulumi.get(self, "ldb_method")

    @property
    @pulumi.getter
    def persistence(self) -> Optional[str]:
        return pulumi.get(self, "persistence")

    @property
    @pulumi.getter
    def realservers(self) -> Optional[Sequence['outputs.FirewallAccessProxyApiGatewayRealserver']]:
        return pulumi.get(self, "realservers")

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[str]:
        return pulumi.get(self, "saml_redirect")

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[str]:
        return pulumi.get(self, "saml_server")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "ssl_algorithm")

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[Sequence['outputs.FirewallAccessProxyApiGatewaySslCipherSuite']]:
        return pulumi.get(self, "ssl_cipher_suites")

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[str]:
        return pulumi.get(self, "ssl_dh_bits")

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[str]:
        return pulumi.get(self, "ssl_max_version")

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[str]:
        return pulumi.get(self, "ssl_min_version")

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[str]:
        return pulumi.get(self, "ssl_renegotiation")

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[str]:
        return pulumi.get(self, "ssl_vpn_web_portal")

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[str]:
        return pulumi.get(self, "url_map")

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[str]:
        return pulumi.get(self, "url_map_type")

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[str]:
        return pulumi.get(self, "virtual_host")


@pulumi.output_type
class FirewallAccessProxyApiGatewayApplication(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAccessProxyApiGatewayRealserver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "externalAuth":
            suggest = "external_auth"
        elif key == "healthCheck":
            suggest = "health_check"
        elif key == "healthCheckProto":
            suggest = "health_check_proto"
        elif key == "holddownInterval":
            suggest = "holddown_interval"
        elif key == "httpHost":
            suggest = "http_host"
        elif key == "sshClientCert":
            suggest = "ssh_client_cert"
        elif key == "sshHostKeyValidation":
            suggest = "ssh_host_key_validation"
        elif key == "sshHostKeys":
            suggest = "ssh_host_keys"
        elif key == "translateHost":
            suggest = "translate_host"
        elif key == "tunnelEncryption":
            suggest = "tunnel_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallAccessProxyApiGatewayRealserver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallAccessProxyApiGatewayRealserver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallAccessProxyApiGatewayRealserver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_type: Optional[str] = None,
                 address: Optional[str] = None,
                 domain: Optional[str] = None,
                 external_auth: Optional[str] = None,
                 health_check: Optional[str] = None,
                 health_check_proto: Optional[str] = None,
                 holddown_interval: Optional[str] = None,
                 http_host: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 mappedport: Optional[str] = None,
                 port: Optional[int] = None,
                 ssh_client_cert: Optional[str] = None,
                 ssh_host_key_validation: Optional[str] = None,
                 ssh_host_keys: Optional[Sequence['outputs.FirewallAccessProxyApiGatewayRealserverSshHostKey']] = None,
                 status: Optional[str] = None,
                 translate_host: Optional[str] = None,
                 tunnel_encryption: Optional[str] = None,
                 type: Optional[str] = None,
                 weight: Optional[int] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[str]:
        return pulumi.get(self, "external_auth")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[str]:
        return pulumi.get(self, "health_check_proto")

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[str]:
        return pulumi.get(self, "holddown_interval")

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[str]:
        return pulumi.get(self, "http_host")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[str]:
        return pulumi.get(self, "mappedport")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[str]:
        return pulumi.get(self, "ssh_client_cert")

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[str]:
        return pulumi.get(self, "ssh_host_key_validation")

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[Sequence['outputs.FirewallAccessProxyApiGatewayRealserverSshHostKey']]:
        return pulumi.get(self, "ssh_host_keys")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[str]:
        return pulumi.get(self, "translate_host")

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_encryption")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FirewallAccessProxyApiGatewayRealserverSshHostKey(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAccessProxyApiGatewaySslCipherSuite(dict):
    def __init__(__self__, *,
                 cipher: Optional[str] = None,
                 priority: Optional[int] = None,
                 versions: Optional[str] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def versions(self) -> Optional[str]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class FirewallAccessProxySshClientCertCertExtension(dict):
    def __init__(__self__, *,
                 critical: Optional[str] = None,
                 data: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def critical(self) -> Optional[str]:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class FirewallAddress6List(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class FirewallAddress6Macaddr(dict):
    def __init__(__self__, *,
                 macaddr: Optional[str] = None):
        if macaddr is not None:
            pulumi.set(__self__, "macaddr", macaddr)

    @property
    @pulumi.getter
    def macaddr(self) -> Optional[str]:
        return pulumi.get(self, "macaddr")


@pulumi.output_type
class FirewallAddress6SubnetSegment(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FirewallAddress6Tagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.FirewallAddress6TaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FirewallAddress6TaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class FirewallAddress6TaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAddress6TemplateSubnetSegment(dict):
    def __init__(__self__, *,
                 bits: Optional[int] = None,
                 exclusive: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence['outputs.FirewallAddress6TemplateSubnetSegmentValue']] = None):
        if bits is not None:
            pulumi.set(__self__, "bits", bits)
        if exclusive is not None:
            pulumi.set(__self__, "exclusive", exclusive)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def bits(self) -> Optional[int]:
        return pulumi.get(self, "bits")

    @property
    @pulumi.getter
    def exclusive(self) -> Optional[str]:
        return pulumi.get(self, "exclusive")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.FirewallAddress6TemplateSubnetSegmentValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class FirewallAddress6TemplateSubnetSegmentValue(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FirewallAddressFssoGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAddressList(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class FirewallAddressMacaddr(dict):
    def __init__(__self__, *,
                 macaddr: Optional[str] = None):
        if macaddr is not None:
            pulumi.set(__self__, "macaddr", macaddr)

    @property
    @pulumi.getter
    def macaddr(self) -> Optional[str]:
        return pulumi.get(self, "macaddr")


@pulumi.output_type
class FirewallAddressTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.FirewallAddressTaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FirewallAddressTaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class FirewallAddressTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAddrgrp6ExcludeMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAddrgrp6Member(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAddrgrp6Tagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.FirewallAddrgrp6TaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FirewallAddrgrp6TaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class FirewallAddrgrp6TaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAddrgrpExcludeMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAddrgrpMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAddrgrpTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.FirewallAddrgrpTaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FirewallAddrgrpTaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class FirewallAddrgrpTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallAuthPortalGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallCentralSnatMapDstAddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallCentralSnatMapDstAddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallCentralSnatMapDstintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallCentralSnatMapNatIppool6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallCentralSnatMapNatIppool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallCentralSnatMapOrigAddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallCentralSnatMapOrigAddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallCentralSnatMapSrcintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyAppCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallConsolidatedPolicyAppGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyApplication(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallConsolidatedPolicyDstaddr4(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyDstaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyDstintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyFssoGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyInternetServiceCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyInternetServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyInternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallConsolidatedPolicyInternetServiceName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyInternetServiceSrcCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyInternetServiceSrcCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyInternetServiceSrcGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyInternetServiceSrcId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallConsolidatedPolicyInternetServiceSrcName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyPoolname4(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyPoolname6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicySrcaddr4(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicySrcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicySrcintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallConsolidatedPolicyUrlCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallConsolidatedPolicyUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallCountryRegion(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallDecryptedTrafficMirrorInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallDosPolicy6Anomaly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallDosPolicy6Anomaly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallDosPolicy6Anomaly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallDosPolicy6Anomaly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 name: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[str] = None,
                 quarantine_log: Optional[str] = None,
                 status: Optional[str] = None,
                 threshold: Optional[int] = None,
                 thresholddefault: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[int]:
        return pulumi.get(self, "thresholddefault")


@pulumi.output_type
class FirewallDosPolicy6Dstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallDosPolicy6Service(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallDosPolicy6Srcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallDosPolicyAnomaly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallDosPolicyAnomaly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallDosPolicyAnomaly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallDosPolicyAnomaly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 name: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[str] = None,
                 quarantine_log: Optional[str] = None,
                 status: Optional[str] = None,
                 threshold: Optional[int] = None,
                 thresholddefault: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[int]:
        return pulumi.get(self, "thresholddefault")


@pulumi.output_type
class FirewallDosPolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallDosPolicyService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallDosPolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallIdentityBasedRouteRule(dict):
    def __init__(__self__, *,
                 device: Optional[str] = None,
                 gateway: Optional[str] = None,
                 groups: Optional[Sequence['outputs.FirewallIdentityBasedRouteRuleGroup']] = None,
                 id: Optional[int] = None):
        if device is not None:
            pulumi.set(__self__, "device", device)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.FirewallIdentityBasedRouteRuleGroup']]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallIdentityBasedRouteRuleGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInterfacePolicy6Dstaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInterfacePolicy6Service6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInterfacePolicy6Srcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInterfacePolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInterfacePolicyService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInterfacePolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInternetServiceAdditionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "portRanges":
            suggest = "port_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceAdditionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceAdditionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceAdditionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 id: Optional[int] = None,
                 port_ranges: Optional[Sequence['outputs.FirewallInternetServiceAdditionEntryPortRange']] = None,
                 protocol: Optional[int] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.FirewallInternetServiceAdditionEntryPortRange']]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class FirewallInternetServiceAdditionEntryPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceAdditionEntryPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceAdditionEntryPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceAdditionEntryPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 id: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class FirewallInternetServiceCustomEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "portRanges":
            suggest = "port_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceCustomEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceCustomEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceCustomEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 dst6s: Optional[Sequence['outputs.FirewallInternetServiceCustomEntryDst6']] = None,
                 dsts: Optional[Sequence['outputs.FirewallInternetServiceCustomEntryDst']] = None,
                 id: Optional[int] = None,
                 port_ranges: Optional[Sequence['outputs.FirewallInternetServiceCustomEntryPortRange']] = None,
                 protocol: Optional[int] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[Sequence['outputs.FirewallInternetServiceCustomEntryDst6']]:
        return pulumi.get(self, "dst6s")

    @property
    @pulumi.getter
    def dsts(self) -> Optional[Sequence['outputs.FirewallInternetServiceCustomEntryDst']]:
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.FirewallInternetServiceCustomEntryPortRange']]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class FirewallInternetServiceCustomEntryDst6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInternetServiceCustomEntryDst(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInternetServiceCustomEntryPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceCustomEntryPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceCustomEntryPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceCustomEntryPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 id: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class FirewallInternetServiceCustomGroupMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInternetServiceDefinitionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryId":
            suggest = "category_id"
        elif key == "portRanges":
            suggest = "port_ranges"
        elif key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceDefinitionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceDefinitionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceDefinitionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_id: Optional[int] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 port_ranges: Optional[Sequence['outputs.FirewallInternetServiceDefinitionEntryPortRange']] = None,
                 protocol: Optional[int] = None,
                 seq_num: Optional[int] = None):
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[int]:
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.FirewallInternetServiceDefinitionEntryPortRange']]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class FirewallInternetServiceDefinitionEntryPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceDefinitionEntryPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceDefinitionEntryPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceDefinitionEntryPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 id: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class FirewallInternetServiceExtensionDisableEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "ip6Ranges":
            suggest = "ip6_ranges"
        elif key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "portRanges":
            suggest = "port_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceExtensionDisableEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceExtensionDisableEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceExtensionDisableEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 id: Optional[int] = None,
                 ip6_ranges: Optional[Sequence['outputs.FirewallInternetServiceExtensionDisableEntryIp6Range']] = None,
                 ip_ranges: Optional[Sequence['outputs.FirewallInternetServiceExtensionDisableEntryIpRange']] = None,
                 port: Optional[int] = None,
                 port_ranges: Optional[Sequence['outputs.FirewallInternetServiceExtensionDisableEntryPortRange']] = None,
                 protocol: Optional[int] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip6_ranges is not None:
            pulumi.set(__self__, "ip6_ranges", ip6_ranges)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip6Ranges")
    def ip6_ranges(self) -> Optional[Sequence['outputs.FirewallInternetServiceExtensionDisableEntryIp6Range']]:
        return pulumi.get(self, "ip6_ranges")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence['outputs.FirewallInternetServiceExtensionDisableEntryIpRange']]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.FirewallInternetServiceExtensionDisableEntryPortRange']]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class FirewallInternetServiceExtensionDisableEntryIp6Range(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp6":
            suggest = "end_ip6"
        elif key == "startIp6":
            suggest = "start_ip6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceExtensionDisableEntryIp6Range. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceExtensionDisableEntryIp6Range.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceExtensionDisableEntryIp6Range.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip6: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip6: Optional[str] = None):
        if end_ip6 is not None:
            pulumi.set(__self__, "end_ip6", end_ip6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip6 is not None:
            pulumi.set(__self__, "start_ip6", start_ip6)

    @property
    @pulumi.getter(name="endIp6")
    def end_ip6(self) -> Optional[str]:
        return pulumi.get(self, "end_ip6")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp6")
    def start_ip6(self) -> Optional[str]:
        return pulumi.get(self, "start_ip6")


@pulumi.output_type
class FirewallInternetServiceExtensionDisableEntryIpRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceExtensionDisableEntryIpRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceExtensionDisableEntryIpRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceExtensionDisableEntryIpRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class FirewallInternetServiceExtensionDisableEntryPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceExtensionDisableEntryPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceExtensionDisableEntryPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceExtensionDisableEntryPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 id: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class FirewallInternetServiceExtensionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "portRanges":
            suggest = "port_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceExtensionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceExtensionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceExtensionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 dst6s: Optional[Sequence['outputs.FirewallInternetServiceExtensionEntryDst6']] = None,
                 dsts: Optional[Sequence['outputs.FirewallInternetServiceExtensionEntryDst']] = None,
                 id: Optional[int] = None,
                 port_ranges: Optional[Sequence['outputs.FirewallInternetServiceExtensionEntryPortRange']] = None,
                 protocol: Optional[int] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[Sequence['outputs.FirewallInternetServiceExtensionEntryDst6']]:
        return pulumi.get(self, "dst6s")

    @property
    @pulumi.getter
    def dsts(self) -> Optional[Sequence['outputs.FirewallInternetServiceExtensionEntryDst']]:
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.FirewallInternetServiceExtensionEntryPortRange']]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class FirewallInternetServiceExtensionEntryDst6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInternetServiceExtensionEntryDst(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInternetServiceExtensionEntryPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallInternetServiceExtensionEntryPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallInternetServiceExtensionEntryPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallInternetServiceExtensionEntryPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 id: Optional[int] = None,
                 start_port: Optional[int] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class FirewallInternetServiceGroupMember(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallInternetServiceSubappSubApp(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallLocalInPolicy6Dstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallLocalInPolicy6Service(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallLocalInPolicy6Srcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallLocalInPolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallLocalInPolicyService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallLocalInPolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallMulticastAddress6Tagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.FirewallMulticastAddress6TaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FirewallMulticastAddress6TaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class FirewallMulticastAddress6TaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallMulticastAddressTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.FirewallMulticastAddressTaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FirewallMulticastAddressTaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class FirewallMulticastAddressTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallMulticastPolicy6Dstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallMulticastPolicy6Srcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallMulticastPolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallMulticastPolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy46Dstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy46Poolname(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy46Service(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy46Srcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy64Dstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy64Poolname(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy64Service(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy64Srcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6AppCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallPolicy6AppGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6Application(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallPolicy6CustomLogField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicy6CustomLogField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicy6CustomLogField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicy6CustomLogField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: Optional[str] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[str]:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class FirewallPolicy6Device(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6Dstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6Dstintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6FssoGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6Group(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6Poolname(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6Service(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6Srcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6Srcintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6SslMirrorIntf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicy6UrlCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallPolicy6User(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyAppCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallPolicyAppGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyApplication(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallPolicyCustomLogField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyCustomLogField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyCustomLogField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyCustomLogField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: Optional[str] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[str]:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class FirewallPolicyDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyDstaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyDstintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyFssoGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetService6Custom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetService6CustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetService6Group(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetService6Name(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetService6SrcCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetService6SrcCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetService6SrcGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetService6SrcName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetServiceCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallPolicyInternetServiceName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetServiceSrcCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetServiceSrcCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetServiceSrcGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyInternetServiceSrcId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallPolicyInternetServiceSrcName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyNetworkServiceDynamic(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyNetworkServiceSrcDynamic(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyNtlmEnabledBrowser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAgentString":
            suggest = "user_agent_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyNtlmEnabledBrowser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyNtlmEnabledBrowser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyNtlmEnabledBrowser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_agent_string: Optional[str] = None):
        if user_agent_string is not None:
            pulumi.set(__self__, "user_agent_string", user_agent_string)

    @property
    @pulumi.getter(name="userAgentString")
    def user_agent_string(self) -> Optional[str]:
        return pulumi.get(self, "user_agent_string")


@pulumi.output_type
class FirewallPolicyPcpPoolname(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyPoolname6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyPoolname(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyRtpAddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicySgt(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallPolicySrcVendorMac(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallPolicySrcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicySrcintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicySslMirrorIntf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyUrlCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallPolicyUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyZtnaEmsTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyZtnaEmsTagSecondary(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallPolicyZtnaGeoTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProfileProtocolOptionsCifs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainController":
            suggest = "domain_controller"
        elif key == "oversizeLimit":
            suggest = "oversize_limit"
        elif key == "scanBzip2":
            suggest = "scan_bzip2"
        elif key == "serverCredentialType":
            suggest = "server_credential_type"
        elif key == "serverKeytabs":
            suggest = "server_keytabs"
        elif key == "tcpWindowMaximum":
            suggest = "tcp_window_maximum"
        elif key == "tcpWindowMinimum":
            suggest = "tcp_window_minimum"
        elif key == "tcpWindowSize":
            suggest = "tcp_window_size"
        elif key == "tcpWindowType":
            suggest = "tcp_window_type"
        elif key == "uncompressedNestLimit":
            suggest = "uncompressed_nest_limit"
        elif key == "uncompressedOversizeLimit":
            suggest = "uncompressed_oversize_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallProfileProtocolOptionsCifs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallProfileProtocolOptionsCifs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallProfileProtocolOptionsCifs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_controller: Optional[str] = None,
                 options: Optional[str] = None,
                 oversize_limit: Optional[int] = None,
                 ports: Optional[int] = None,
                 scan_bzip2: Optional[str] = None,
                 server_credential_type: Optional[str] = None,
                 server_keytabs: Optional[Sequence['outputs.FirewallProfileProtocolOptionsCifsServerKeytab']] = None,
                 status: Optional[str] = None,
                 tcp_window_maximum: Optional[int] = None,
                 tcp_window_minimum: Optional[int] = None,
                 tcp_window_size: Optional[int] = None,
                 tcp_window_type: Optional[str] = None,
                 uncompressed_nest_limit: Optional[int] = None,
                 uncompressed_oversize_limit: Optional[int] = None):
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if server_credential_type is not None:
            pulumi.set(__self__, "server_credential_type", server_credential_type)
        if server_keytabs is not None:
            pulumi.set(__self__, "server_keytabs", server_keytabs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional[str]:
        return pulumi.get(self, "domain_controller")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> Optional[int]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[str]:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="serverCredentialType")
    def server_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "server_credential_type")

    @property
    @pulumi.getter(name="serverKeytabs")
    def server_keytabs(self) -> Optional[Sequence['outputs.FirewallProfileProtocolOptionsCifsServerKeytab']]:
        return pulumi.get(self, "server_keytabs")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_maximum")

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_minimum")

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_size")

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[str]:
        return pulumi.get(self, "tcp_window_type")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class FirewallProfileProtocolOptionsCifsServerKeytab(dict):
    def __init__(__self__, *,
                 keytab: Optional[str] = None,
                 principal: Optional[str] = None):
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def keytab(self) -> Optional[str]:
        return pulumi.get(self, "keytab")

    @property
    @pulumi.getter
    def principal(self) -> Optional[str]:
        return pulumi.get(self, "principal")


@pulumi.output_type
class FirewallProfileProtocolOptionsDns(dict):
    def __init__(__self__, *,
                 ports: Optional[int] = None,
                 status: Optional[str] = None):
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def ports(self) -> Optional[int]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class FirewallProfileProtocolOptionsFtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comfortAmount":
            suggest = "comfort_amount"
        elif key == "comfortInterval":
            suggest = "comfort_interval"
        elif key == "explicitFtpTls":
            suggest = "explicit_ftp_tls"
        elif key == "inspectAll":
            suggest = "inspect_all"
        elif key == "oversizeLimit":
            suggest = "oversize_limit"
        elif key == "scanBzip2":
            suggest = "scan_bzip2"
        elif key == "sslOffloaded":
            suggest = "ssl_offloaded"
        elif key == "streamBasedUncompressedLimit":
            suggest = "stream_based_uncompressed_limit"
        elif key == "tcpWindowMaximum":
            suggest = "tcp_window_maximum"
        elif key == "tcpWindowMinimum":
            suggest = "tcp_window_minimum"
        elif key == "tcpWindowSize":
            suggest = "tcp_window_size"
        elif key == "tcpWindowType":
            suggest = "tcp_window_type"
        elif key == "uncompressedNestLimit":
            suggest = "uncompressed_nest_limit"
        elif key == "uncompressedOversizeLimit":
            suggest = "uncompressed_oversize_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallProfileProtocolOptionsFtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallProfileProtocolOptionsFtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallProfileProtocolOptionsFtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comfort_amount: Optional[int] = None,
                 comfort_interval: Optional[int] = None,
                 explicit_ftp_tls: Optional[str] = None,
                 inspect_all: Optional[str] = None,
                 options: Optional[str] = None,
                 oversize_limit: Optional[int] = None,
                 ports: Optional[int] = None,
                 scan_bzip2: Optional[str] = None,
                 ssl_offloaded: Optional[str] = None,
                 status: Optional[str] = None,
                 stream_based_uncompressed_limit: Optional[int] = None,
                 tcp_window_maximum: Optional[int] = None,
                 tcp_window_minimum: Optional[int] = None,
                 tcp_window_size: Optional[int] = None,
                 tcp_window_type: Optional[str] = None,
                 uncompressed_nest_limit: Optional[int] = None,
                 uncompressed_oversize_limit: Optional[int] = None):
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if explicit_ftp_tls is not None:
            pulumi.set(__self__, "explicit_ftp_tls", explicit_ftp_tls)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[int]:
        return pulumi.get(self, "comfort_amount")

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[int]:
        return pulumi.get(self, "comfort_interval")

    @property
    @pulumi.getter(name="explicitFtpTls")
    def explicit_ftp_tls(self) -> Optional[str]:
        return pulumi.get(self, "explicit_ftp_tls")

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[str]:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> Optional[int]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[str]:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[str]:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[int]:
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_maximum")

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_minimum")

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_size")

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[str]:
        return pulumi.get(self, "tcp_window_type")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class FirewallProfileProtocolOptionsHttp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressIpRating":
            suggest = "address_ip_rating"
        elif key == "blockPageStatusCode":
            suggest = "block_page_status_code"
        elif key == "comfortAmount":
            suggest = "comfort_amount"
        elif key == "comfortInterval":
            suggest = "comfort_interval"
        elif key == "fortinetBar":
            suggest = "fortinet_bar"
        elif key == "fortinetBarPort":
            suggest = "fortinet_bar_port"
        elif key == "httpPolicy":
            suggest = "http_policy"
        elif key == "inspectAll":
            suggest = "inspect_all"
        elif key == "oversizeLimit":
            suggest = "oversize_limit"
        elif key == "postLang":
            suggest = "post_lang"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "rangeBlock":
            suggest = "range_block"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "scanBzip2":
            suggest = "scan_bzip2"
        elif key == "sslOffloaded":
            suggest = "ssl_offloaded"
        elif key == "streamBasedUncompressedLimit":
            suggest = "stream_based_uncompressed_limit"
        elif key == "streamingContentBypass":
            suggest = "streaming_content_bypass"
        elif key == "stripXForwardedFor":
            suggest = "strip_x_forwarded_for"
        elif key == "switchingProtocols":
            suggest = "switching_protocols"
        elif key == "tcpWindowMaximum":
            suggest = "tcp_window_maximum"
        elif key == "tcpWindowMinimum":
            suggest = "tcp_window_minimum"
        elif key == "tcpWindowSize":
            suggest = "tcp_window_size"
        elif key == "tcpWindowType":
            suggest = "tcp_window_type"
        elif key == "tunnelNonHttp":
            suggest = "tunnel_non_http"
        elif key == "uncompressedNestLimit":
            suggest = "uncompressed_nest_limit"
        elif key == "uncompressedOversizeLimit":
            suggest = "uncompressed_oversize_limit"
        elif key == "unknownContentEncoding":
            suggest = "unknown_content_encoding"
        elif key == "unknownHttpVersion":
            suggest = "unknown_http_version"
        elif key == "verifyDnsForPolicyMatching":
            suggest = "verify_dns_for_policy_matching"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallProfileProtocolOptionsHttp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallProfileProtocolOptionsHttp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallProfileProtocolOptionsHttp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_ip_rating: Optional[str] = None,
                 block_page_status_code: Optional[int] = None,
                 comfort_amount: Optional[int] = None,
                 comfort_interval: Optional[int] = None,
                 fortinet_bar: Optional[str] = None,
                 fortinet_bar_port: Optional[int] = None,
                 h2c: Optional[str] = None,
                 http_policy: Optional[str] = None,
                 inspect_all: Optional[str] = None,
                 options: Optional[str] = None,
                 oversize_limit: Optional[int] = None,
                 ports: Optional[int] = None,
                 post_lang: Optional[str] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 range_block: Optional[str] = None,
                 retry_count: Optional[int] = None,
                 scan_bzip2: Optional[str] = None,
                 ssl_offloaded: Optional[str] = None,
                 status: Optional[str] = None,
                 stream_based_uncompressed_limit: Optional[int] = None,
                 streaming_content_bypass: Optional[str] = None,
                 strip_x_forwarded_for: Optional[str] = None,
                 switching_protocols: Optional[str] = None,
                 tcp_window_maximum: Optional[int] = None,
                 tcp_window_minimum: Optional[int] = None,
                 tcp_window_size: Optional[int] = None,
                 tcp_window_type: Optional[str] = None,
                 tunnel_non_http: Optional[str] = None,
                 uncompressed_nest_limit: Optional[int] = None,
                 uncompressed_oversize_limit: Optional[int] = None,
                 unknown_content_encoding: Optional[str] = None,
                 unknown_http_version: Optional[str] = None,
                 verify_dns_for_policy_matching: Optional[str] = None):
        if address_ip_rating is not None:
            pulumi.set(__self__, "address_ip_rating", address_ip_rating)
        if block_page_status_code is not None:
            pulumi.set(__self__, "block_page_status_code", block_page_status_code)
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if fortinet_bar is not None:
            pulumi.set(__self__, "fortinet_bar", fortinet_bar)
        if fortinet_bar_port is not None:
            pulumi.set(__self__, "fortinet_bar_port", fortinet_bar_port)
        if h2c is not None:
            pulumi.set(__self__, "h2c", h2c)
        if http_policy is not None:
            pulumi.set(__self__, "http_policy", http_policy)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if post_lang is not None:
            pulumi.set(__self__, "post_lang", post_lang)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if range_block is not None:
            pulumi.set(__self__, "range_block", range_block)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if streaming_content_bypass is not None:
            pulumi.set(__self__, "streaming_content_bypass", streaming_content_bypass)
        if strip_x_forwarded_for is not None:
            pulumi.set(__self__, "strip_x_forwarded_for", strip_x_forwarded_for)
        if switching_protocols is not None:
            pulumi.set(__self__, "switching_protocols", switching_protocols)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if tunnel_non_http is not None:
            pulumi.set(__self__, "tunnel_non_http", tunnel_non_http)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)
        if unknown_content_encoding is not None:
            pulumi.set(__self__, "unknown_content_encoding", unknown_content_encoding)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)
        if verify_dns_for_policy_matching is not None:
            pulumi.set(__self__, "verify_dns_for_policy_matching", verify_dns_for_policy_matching)

    @property
    @pulumi.getter(name="addressIpRating")
    def address_ip_rating(self) -> Optional[str]:
        return pulumi.get(self, "address_ip_rating")

    @property
    @pulumi.getter(name="blockPageStatusCode")
    def block_page_status_code(self) -> Optional[int]:
        return pulumi.get(self, "block_page_status_code")

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[int]:
        return pulumi.get(self, "comfort_amount")

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[int]:
        return pulumi.get(self, "comfort_interval")

    @property
    @pulumi.getter(name="fortinetBar")
    def fortinet_bar(self) -> Optional[str]:
        return pulumi.get(self, "fortinet_bar")

    @property
    @pulumi.getter(name="fortinetBarPort")
    def fortinet_bar_port(self) -> Optional[int]:
        return pulumi.get(self, "fortinet_bar_port")

    @property
    @pulumi.getter
    def h2c(self) -> Optional[str]:
        return pulumi.get(self, "h2c")

    @property
    @pulumi.getter(name="httpPolicy")
    def http_policy(self) -> Optional[str]:
        return pulumi.get(self, "http_policy")

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[str]:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> Optional[int]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="postLang")
    def post_lang(self) -> Optional[str]:
        return pulumi.get(self, "post_lang")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="rangeBlock")
    def range_block(self) -> Optional[str]:
        return pulumi.get(self, "range_block")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[str]:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[str]:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[int]:
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> Optional[str]:
        return pulumi.get(self, "streaming_content_bypass")

    @property
    @pulumi.getter(name="stripXForwardedFor")
    def strip_x_forwarded_for(self) -> Optional[str]:
        return pulumi.get(self, "strip_x_forwarded_for")

    @property
    @pulumi.getter(name="switchingProtocols")
    def switching_protocols(self) -> Optional[str]:
        return pulumi.get(self, "switching_protocols")

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_maximum")

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_minimum")

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_size")

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[str]:
        return pulumi.get(self, "tcp_window_type")

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_non_http")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @property
    @pulumi.getter(name="unknownContentEncoding")
    def unknown_content_encoding(self) -> Optional[str]:
        return pulumi.get(self, "unknown_content_encoding")

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[str]:
        return pulumi.get(self, "unknown_http_version")

    @property
    @pulumi.getter(name="verifyDnsForPolicyMatching")
    def verify_dns_for_policy_matching(self) -> Optional[str]:
        return pulumi.get(self, "verify_dns_for_policy_matching")


@pulumi.output_type
class FirewallProfileProtocolOptionsImap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inspectAll":
            suggest = "inspect_all"
        elif key == "oversizeLimit":
            suggest = "oversize_limit"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "scanBzip2":
            suggest = "scan_bzip2"
        elif key == "sslOffloaded":
            suggest = "ssl_offloaded"
        elif key == "uncompressedNestLimit":
            suggest = "uncompressed_nest_limit"
        elif key == "uncompressedOversizeLimit":
            suggest = "uncompressed_oversize_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallProfileProtocolOptionsImap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallProfileProtocolOptionsImap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallProfileProtocolOptionsImap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inspect_all: Optional[str] = None,
                 options: Optional[str] = None,
                 oversize_limit: Optional[int] = None,
                 ports: Optional[int] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 scan_bzip2: Optional[str] = None,
                 ssl_offloaded: Optional[str] = None,
                 status: Optional[str] = None,
                 uncompressed_nest_limit: Optional[int] = None,
                 uncompressed_oversize_limit: Optional[int] = None):
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[str]:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> Optional[int]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[str]:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[str]:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class FirewallProfileProtocolOptionsMailSignature(dict):
    def __init__(__self__, *,
                 signature: Optional[str] = None,
                 status: Optional[str] = None):
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def signature(self) -> Optional[str]:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class FirewallProfileProtocolOptionsMapi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "oversizeLimit":
            suggest = "oversize_limit"
        elif key == "scanBzip2":
            suggest = "scan_bzip2"
        elif key == "uncompressedNestLimit":
            suggest = "uncompressed_nest_limit"
        elif key == "uncompressedOversizeLimit":
            suggest = "uncompressed_oversize_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallProfileProtocolOptionsMapi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallProfileProtocolOptionsMapi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallProfileProtocolOptionsMapi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 options: Optional[str] = None,
                 oversize_limit: Optional[int] = None,
                 ports: Optional[int] = None,
                 scan_bzip2: Optional[str] = None,
                 status: Optional[str] = None,
                 uncompressed_nest_limit: Optional[int] = None,
                 uncompressed_oversize_limit: Optional[int] = None):
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> Optional[int]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[str]:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class FirewallProfileProtocolOptionsNntp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inspectAll":
            suggest = "inspect_all"
        elif key == "oversizeLimit":
            suggest = "oversize_limit"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "scanBzip2":
            suggest = "scan_bzip2"
        elif key == "uncompressedNestLimit":
            suggest = "uncompressed_nest_limit"
        elif key == "uncompressedOversizeLimit":
            suggest = "uncompressed_oversize_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallProfileProtocolOptionsNntp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallProfileProtocolOptionsNntp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallProfileProtocolOptionsNntp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inspect_all: Optional[str] = None,
                 options: Optional[str] = None,
                 oversize_limit: Optional[int] = None,
                 ports: Optional[int] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 scan_bzip2: Optional[str] = None,
                 status: Optional[str] = None,
                 uncompressed_nest_limit: Optional[int] = None,
                 uncompressed_oversize_limit: Optional[int] = None):
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[str]:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> Optional[int]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[str]:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class FirewallProfileProtocolOptionsPop3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inspectAll":
            suggest = "inspect_all"
        elif key == "oversizeLimit":
            suggest = "oversize_limit"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "scanBzip2":
            suggest = "scan_bzip2"
        elif key == "sslOffloaded":
            suggest = "ssl_offloaded"
        elif key == "uncompressedNestLimit":
            suggest = "uncompressed_nest_limit"
        elif key == "uncompressedOversizeLimit":
            suggest = "uncompressed_oversize_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallProfileProtocolOptionsPop3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallProfileProtocolOptionsPop3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallProfileProtocolOptionsPop3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inspect_all: Optional[str] = None,
                 options: Optional[str] = None,
                 oversize_limit: Optional[int] = None,
                 ports: Optional[int] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 scan_bzip2: Optional[str] = None,
                 ssl_offloaded: Optional[str] = None,
                 status: Optional[str] = None,
                 uncompressed_nest_limit: Optional[int] = None,
                 uncompressed_oversize_limit: Optional[int] = None):
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[str]:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> Optional[int]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[str]:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[str]:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class FirewallProfileProtocolOptionsSmtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inspectAll":
            suggest = "inspect_all"
        elif key == "oversizeLimit":
            suggest = "oversize_limit"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "scanBzip2":
            suggest = "scan_bzip2"
        elif key == "serverBusy":
            suggest = "server_busy"
        elif key == "sslOffloaded":
            suggest = "ssl_offloaded"
        elif key == "uncompressedNestLimit":
            suggest = "uncompressed_nest_limit"
        elif key == "uncompressedOversizeLimit":
            suggest = "uncompressed_oversize_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallProfileProtocolOptionsSmtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallProfileProtocolOptionsSmtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallProfileProtocolOptionsSmtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inspect_all: Optional[str] = None,
                 options: Optional[str] = None,
                 oversize_limit: Optional[int] = None,
                 ports: Optional[int] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 scan_bzip2: Optional[str] = None,
                 server_busy: Optional[str] = None,
                 ssl_offloaded: Optional[str] = None,
                 status: Optional[str] = None,
                 uncompressed_nest_limit: Optional[int] = None,
                 uncompressed_oversize_limit: Optional[int] = None):
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if server_busy is not None:
            pulumi.set(__self__, "server_busy", server_busy)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[str]:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> Optional[int]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[str]:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="serverBusy")
    def server_busy(self) -> Optional[str]:
        return pulumi.get(self, "server_busy")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[str]:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class FirewallProfileProtocolOptionsSsh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comfortAmount":
            suggest = "comfort_amount"
        elif key == "comfortInterval":
            suggest = "comfort_interval"
        elif key == "oversizeLimit":
            suggest = "oversize_limit"
        elif key == "scanBzip2":
            suggest = "scan_bzip2"
        elif key == "sslOffloaded":
            suggest = "ssl_offloaded"
        elif key == "streamBasedUncompressedLimit":
            suggest = "stream_based_uncompressed_limit"
        elif key == "tcpWindowMaximum":
            suggest = "tcp_window_maximum"
        elif key == "tcpWindowMinimum":
            suggest = "tcp_window_minimum"
        elif key == "tcpWindowSize":
            suggest = "tcp_window_size"
        elif key == "tcpWindowType":
            suggest = "tcp_window_type"
        elif key == "uncompressedNestLimit":
            suggest = "uncompressed_nest_limit"
        elif key == "uncompressedOversizeLimit":
            suggest = "uncompressed_oversize_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallProfileProtocolOptionsSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallProfileProtocolOptionsSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallProfileProtocolOptionsSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comfort_amount: Optional[int] = None,
                 comfort_interval: Optional[int] = None,
                 options: Optional[str] = None,
                 oversize_limit: Optional[int] = None,
                 scan_bzip2: Optional[str] = None,
                 ssl_offloaded: Optional[str] = None,
                 stream_based_uncompressed_limit: Optional[int] = None,
                 tcp_window_maximum: Optional[int] = None,
                 tcp_window_minimum: Optional[int] = None,
                 tcp_window_size: Optional[int] = None,
                 tcp_window_type: Optional[str] = None,
                 uncompressed_nest_limit: Optional[int] = None,
                 uncompressed_oversize_limit: Optional[int] = None):
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[int]:
        return pulumi.get(self, "comfort_amount")

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[int]:
        return pulumi.get(self, "comfort_interval")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[str]:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[str]:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[int]:
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_maximum")

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_minimum")

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[int]:
        return pulumi.get(self, "tcp_window_size")

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[str]:
        return pulumi.get(self, "tcp_window_type")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class FirewallProxyAddressApplication(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyAddressCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallProxyAddressHeaderGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitivity":
            suggest = "case_sensitivity"
        elif key == "headerName":
            suggest = "header_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallProxyAddressHeaderGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallProxyAddressHeaderGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallProxyAddressHeaderGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 case_sensitivity: Optional[str] = None,
                 header: Optional[str] = None,
                 header_name: Optional[str] = None,
                 id: Optional[int] = None):
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[str]:
        return pulumi.get(self, "case_sensitivity")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallProxyAddressTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.FirewallProxyAddressTaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FirewallProxyAddressTaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class FirewallProxyAddressTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyAddrgrpMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyAddrgrpTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.FirewallProxyAddrgrpTaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FirewallProxyAddrgrpTaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class FirewallProxyAddrgrpTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyAccessProxy6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyAccessProxy(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyDstaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyDstintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyInternetService6Custom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyInternetService6CustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyInternetService6Group(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyInternetService6Name(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyInternetServiceCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyInternetServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyInternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallProxyPolicyInternetServiceName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyPoolname(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicySrcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicySrcintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallProxyPolicyZtnaEmsTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallRegionCity(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallScheduleGroupMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyAppCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallSecurityPolicyAppGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyApplication(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallSecurityPolicyDstaddr4(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyDstaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyDstintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyFssoGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetService6Custom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetService6CustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetService6Group(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetService6Name(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetService6SrcCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetService6SrcCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetService6SrcGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetService6SrcName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetServiceCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallSecurityPolicyInternetServiceName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetServiceSrcCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetServiceSrcCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetServiceSrcGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyInternetServiceSrcId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallSecurityPolicyInternetServiceSrcName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicySeqStatePolicyList(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 policyid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policyid(self) -> Optional[str]:
        return pulumi.get(self, "policyid")


@pulumi.output_type
class FirewallSecurityPolicyService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicySortStatePolicyList(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 policyid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policyid(self) -> Optional[str]:
        return pulumi.get(self, "policyid")


@pulumi.output_type
class FirewallSecurityPolicySrcaddr4(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicySrcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicySrcintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSecurityPolicyUrlCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallSecurityPolicyUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallServiceCustomAppCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallServiceCustomApplication(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallServiceGroupMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyAppCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallShapingPolicyAppGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyApplication(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallShapingPolicyDstaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyDstintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyInternetServiceCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyInternetServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyInternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallShapingPolicyInternetServiceName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyInternetServiceSrcCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyInternetServiceSrcCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyInternetServiceSrcGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyInternetServiceSrcId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallShapingPolicyInternetServiceSrcName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicySrcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicySrcintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingPolicyUrlCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallShapingPolicyUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallShapingProfileShapingEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "burstInMsec":
            suggest = "burst_in_msec"
        elif key == "cburstInMsec":
            suggest = "cburst_in_msec"
        elif key == "classId":
            suggest = "class_id"
        elif key == "guaranteedBandwidthPercentage":
            suggest = "guaranteed_bandwidth_percentage"
        elif key == "maximumBandwidthPercentage":
            suggest = "maximum_bandwidth_percentage"
        elif key == "redProbability":
            suggest = "red_probability"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallShapingProfileShapingEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallShapingProfileShapingEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallShapingProfileShapingEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst_in_msec: Optional[int] = None,
                 cburst_in_msec: Optional[int] = None,
                 class_id: Optional[int] = None,
                 guaranteed_bandwidth_percentage: Optional[int] = None,
                 id: Optional[int] = None,
                 limit: Optional[int] = None,
                 max: Optional[int] = None,
                 maximum_bandwidth_percentage: Optional[int] = None,
                 min: Optional[int] = None,
                 priority: Optional[str] = None,
                 red_probability: Optional[int] = None):
        if burst_in_msec is not None:
            pulumi.set(__self__, "burst_in_msec", burst_in_msec)
        if cburst_in_msec is not None:
            pulumi.set(__self__, "cburst_in_msec", cburst_in_msec)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if guaranteed_bandwidth_percentage is not None:
            pulumi.set(__self__, "guaranteed_bandwidth_percentage", guaranteed_bandwidth_percentage)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if maximum_bandwidth_percentage is not None:
            pulumi.set(__self__, "maximum_bandwidth_percentage", maximum_bandwidth_percentage)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if red_probability is not None:
            pulumi.set(__self__, "red_probability", red_probability)

    @property
    @pulumi.getter(name="burstInMsec")
    def burst_in_msec(self) -> Optional[int]:
        return pulumi.get(self, "burst_in_msec")

    @property
    @pulumi.getter(name="cburstInMsec")
    def cburst_in_msec(self) -> Optional[int]:
        return pulumi.get(self, "cburst_in_msec")

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[int]:
        return pulumi.get(self, "class_id")

    @property
    @pulumi.getter(name="guaranteedBandwidthPercentage")
    def guaranteed_bandwidth_percentage(self) -> Optional[int]:
        return pulumi.get(self, "guaranteed_bandwidth_percentage")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter(name="maximumBandwidthPercentage")
    def maximum_bandwidth_percentage(self) -> Optional[int]:
        return pulumi.get(self, "maximum_bandwidth_percentage")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="redProbability")
    def red_probability(self) -> Optional[int]:
        return pulumi.get(self, "red_probability")


@pulumi.output_type
class FirewallSnifferAnomaly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSnifferAnomaly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSnifferAnomaly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSnifferAnomaly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 name: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[str] = None,
                 quarantine_log: Optional[str] = None,
                 status: Optional[str] = None,
                 threshold: Optional[int] = None,
                 thresholddefault: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[int]:
        return pulumi.get(self, "thresholddefault")


@pulumi.output_type
class FirewallSnifferIpThreatfeed(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallSslSshProfileDot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certValidationFailure":
            suggest = "cert_validation_failure"
        elif key == "certValidationTimeout":
            suggest = "cert_validation_timeout"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "expiredServerCert":
            suggest = "expired_server_cert"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "revokedServerCert":
            suggest = "revoked_server_cert"
        elif key == "sniServerCertCheck":
            suggest = "sni_server_cert_check"
        elif key == "unsupportedSslCipher":
            suggest = "unsupported_ssl_cipher"
        elif key == "unsupportedSslNegotiation":
            suggest = "unsupported_ssl_negotiation"
        elif key == "unsupportedSslVersion":
            suggest = "unsupported_ssl_version"
        elif key == "untrustedServerCert":
            suggest = "untrusted_server_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSslSshProfileDot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSslSshProfileDot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSslSshProfileDot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_validation_failure: Optional[str] = None,
                 cert_validation_timeout: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 expired_server_cert: Optional[str] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 revoked_server_cert: Optional[str] = None,
                 sni_server_cert_check: Optional[str] = None,
                 status: Optional[str] = None,
                 unsupported_ssl_cipher: Optional[str] = None,
                 unsupported_ssl_negotiation: Optional[str] = None,
                 unsupported_ssl_version: Optional[str] = None,
                 untrusted_server_cert: Optional[str] = None):
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_failure")

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_timeout")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "expired_server_cert")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "revoked_server_cert")

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[str]:
        return pulumi.get(self, "sni_server_cert_check")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_version")

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "untrusted_server_cert")


@pulumi.output_type
class FirewallSslSshProfileFtps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certValidationFailure":
            suggest = "cert_validation_failure"
        elif key == "certValidationTimeout":
            suggest = "cert_validation_timeout"
        elif key == "clientCertRequest":
            suggest = "client_cert_request"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "expiredServerCert":
            suggest = "expired_server_cert"
        elif key == "invalidServerCert":
            suggest = "invalid_server_cert"
        elif key == "minAllowedSslVersion":
            suggest = "min_allowed_ssl_version"
        elif key == "revokedServerCert":
            suggest = "revoked_server_cert"
        elif key == "sniServerCertCheck":
            suggest = "sni_server_cert_check"
        elif key == "unsupportedSsl":
            suggest = "unsupported_ssl"
        elif key == "unsupportedSslCipher":
            suggest = "unsupported_ssl_cipher"
        elif key == "unsupportedSslNegotiation":
            suggest = "unsupported_ssl_negotiation"
        elif key == "unsupportedSslVersion":
            suggest = "unsupported_ssl_version"
        elif key == "untrustedServerCert":
            suggest = "untrusted_server_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSslSshProfileFtps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSslSshProfileFtps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSslSshProfileFtps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_validation_failure: Optional[str] = None,
                 cert_validation_timeout: Optional[str] = None,
                 client_cert_request: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 expired_server_cert: Optional[str] = None,
                 invalid_server_cert: Optional[str] = None,
                 min_allowed_ssl_version: Optional[str] = None,
                 ports: Optional[str] = None,
                 revoked_server_cert: Optional[str] = None,
                 sni_server_cert_check: Optional[str] = None,
                 status: Optional[str] = None,
                 unsupported_ssl: Optional[str] = None,
                 unsupported_ssl_cipher: Optional[str] = None,
                 unsupported_ssl_negotiation: Optional[str] = None,
                 unsupported_ssl_version: Optional[str] = None,
                 untrusted_server_cert: Optional[str] = None):
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_failure")

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_timeout")

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "client_cert_request")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "expired_server_cert")

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "invalid_server_cert")

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[str]:
        return pulumi.get(self, "min_allowed_ssl_version")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "revoked_server_cert")

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[str]:
        return pulumi.get(self, "sni_server_cert_check")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl")

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_version")

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "untrusted_server_cert")


@pulumi.output_type
class FirewallSslSshProfileHttps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certProbeFailure":
            suggest = "cert_probe_failure"
        elif key == "certValidationFailure":
            suggest = "cert_validation_failure"
        elif key == "certValidationTimeout":
            suggest = "cert_validation_timeout"
        elif key == "clientCertRequest":
            suggest = "client_cert_request"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "expiredServerCert":
            suggest = "expired_server_cert"
        elif key == "invalidServerCert":
            suggest = "invalid_server_cert"
        elif key == "minAllowedSslVersion":
            suggest = "min_allowed_ssl_version"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "revokedServerCert":
            suggest = "revoked_server_cert"
        elif key == "sniServerCertCheck":
            suggest = "sni_server_cert_check"
        elif key == "unsupportedSsl":
            suggest = "unsupported_ssl"
        elif key == "unsupportedSslCipher":
            suggest = "unsupported_ssl_cipher"
        elif key == "unsupportedSslNegotiation":
            suggest = "unsupported_ssl_negotiation"
        elif key == "unsupportedSslVersion":
            suggest = "unsupported_ssl_version"
        elif key == "untrustedServerCert":
            suggest = "untrusted_server_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSslSshProfileHttps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSslSshProfileHttps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSslSshProfileHttps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_probe_failure: Optional[str] = None,
                 cert_validation_failure: Optional[str] = None,
                 cert_validation_timeout: Optional[str] = None,
                 client_cert_request: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 expired_server_cert: Optional[str] = None,
                 invalid_server_cert: Optional[str] = None,
                 min_allowed_ssl_version: Optional[str] = None,
                 ports: Optional[str] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 revoked_server_cert: Optional[str] = None,
                 sni_server_cert_check: Optional[str] = None,
                 status: Optional[str] = None,
                 unsupported_ssl: Optional[str] = None,
                 unsupported_ssl_cipher: Optional[str] = None,
                 unsupported_ssl_negotiation: Optional[str] = None,
                 unsupported_ssl_version: Optional[str] = None,
                 untrusted_server_cert: Optional[str] = None):
        if cert_probe_failure is not None:
            pulumi.set(__self__, "cert_probe_failure", cert_probe_failure)
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certProbeFailure")
    def cert_probe_failure(self) -> Optional[str]:
        return pulumi.get(self, "cert_probe_failure")

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_failure")

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_timeout")

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "client_cert_request")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "expired_server_cert")

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "invalid_server_cert")

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[str]:
        return pulumi.get(self, "min_allowed_ssl_version")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "revoked_server_cert")

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[str]:
        return pulumi.get(self, "sni_server_cert_check")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl")

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_version")

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "untrusted_server_cert")


@pulumi.output_type
class FirewallSslSshProfileImaps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certValidationFailure":
            suggest = "cert_validation_failure"
        elif key == "certValidationTimeout":
            suggest = "cert_validation_timeout"
        elif key == "clientCertRequest":
            suggest = "client_cert_request"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "expiredServerCert":
            suggest = "expired_server_cert"
        elif key == "invalidServerCert":
            suggest = "invalid_server_cert"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "revokedServerCert":
            suggest = "revoked_server_cert"
        elif key == "sniServerCertCheck":
            suggest = "sni_server_cert_check"
        elif key == "unsupportedSsl":
            suggest = "unsupported_ssl"
        elif key == "unsupportedSslCipher":
            suggest = "unsupported_ssl_cipher"
        elif key == "unsupportedSslNegotiation":
            suggest = "unsupported_ssl_negotiation"
        elif key == "unsupportedSslVersion":
            suggest = "unsupported_ssl_version"
        elif key == "untrustedServerCert":
            suggest = "untrusted_server_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSslSshProfileImaps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSslSshProfileImaps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSslSshProfileImaps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_validation_failure: Optional[str] = None,
                 cert_validation_timeout: Optional[str] = None,
                 client_cert_request: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 expired_server_cert: Optional[str] = None,
                 invalid_server_cert: Optional[str] = None,
                 ports: Optional[str] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 revoked_server_cert: Optional[str] = None,
                 sni_server_cert_check: Optional[str] = None,
                 status: Optional[str] = None,
                 unsupported_ssl: Optional[str] = None,
                 unsupported_ssl_cipher: Optional[str] = None,
                 unsupported_ssl_negotiation: Optional[str] = None,
                 unsupported_ssl_version: Optional[str] = None,
                 untrusted_server_cert: Optional[str] = None):
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_failure")

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_timeout")

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "client_cert_request")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "expired_server_cert")

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "invalid_server_cert")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "revoked_server_cert")

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[str]:
        return pulumi.get(self, "sni_server_cert_check")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl")

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_version")

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "untrusted_server_cert")


@pulumi.output_type
class FirewallSslSshProfilePop3s(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certValidationFailure":
            suggest = "cert_validation_failure"
        elif key == "certValidationTimeout":
            suggest = "cert_validation_timeout"
        elif key == "clientCertRequest":
            suggest = "client_cert_request"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "expiredServerCert":
            suggest = "expired_server_cert"
        elif key == "invalidServerCert":
            suggest = "invalid_server_cert"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "revokedServerCert":
            suggest = "revoked_server_cert"
        elif key == "sniServerCertCheck":
            suggest = "sni_server_cert_check"
        elif key == "unsupportedSsl":
            suggest = "unsupported_ssl"
        elif key == "unsupportedSslCipher":
            suggest = "unsupported_ssl_cipher"
        elif key == "unsupportedSslNegotiation":
            suggest = "unsupported_ssl_negotiation"
        elif key == "unsupportedSslVersion":
            suggest = "unsupported_ssl_version"
        elif key == "untrustedServerCert":
            suggest = "untrusted_server_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSslSshProfilePop3s. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSslSshProfilePop3s.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSslSshProfilePop3s.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_validation_failure: Optional[str] = None,
                 cert_validation_timeout: Optional[str] = None,
                 client_cert_request: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 expired_server_cert: Optional[str] = None,
                 invalid_server_cert: Optional[str] = None,
                 ports: Optional[str] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 revoked_server_cert: Optional[str] = None,
                 sni_server_cert_check: Optional[str] = None,
                 status: Optional[str] = None,
                 unsupported_ssl: Optional[str] = None,
                 unsupported_ssl_cipher: Optional[str] = None,
                 unsupported_ssl_negotiation: Optional[str] = None,
                 unsupported_ssl_version: Optional[str] = None,
                 untrusted_server_cert: Optional[str] = None):
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_failure")

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_timeout")

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "client_cert_request")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "expired_server_cert")

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "invalid_server_cert")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "revoked_server_cert")

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[str]:
        return pulumi.get(self, "sni_server_cert_check")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl")

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_version")

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "untrusted_server_cert")


@pulumi.output_type
class FirewallSslSshProfileSmtps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certValidationFailure":
            suggest = "cert_validation_failure"
        elif key == "certValidationTimeout":
            suggest = "cert_validation_timeout"
        elif key == "clientCertRequest":
            suggest = "client_cert_request"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "expiredServerCert":
            suggest = "expired_server_cert"
        elif key == "invalidServerCert":
            suggest = "invalid_server_cert"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "revokedServerCert":
            suggest = "revoked_server_cert"
        elif key == "sniServerCertCheck":
            suggest = "sni_server_cert_check"
        elif key == "unsupportedSsl":
            suggest = "unsupported_ssl"
        elif key == "unsupportedSslCipher":
            suggest = "unsupported_ssl_cipher"
        elif key == "unsupportedSslNegotiation":
            suggest = "unsupported_ssl_negotiation"
        elif key == "unsupportedSslVersion":
            suggest = "unsupported_ssl_version"
        elif key == "untrustedServerCert":
            suggest = "untrusted_server_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSslSshProfileSmtps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSslSshProfileSmtps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSslSshProfileSmtps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_validation_failure: Optional[str] = None,
                 cert_validation_timeout: Optional[str] = None,
                 client_cert_request: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 expired_server_cert: Optional[str] = None,
                 invalid_server_cert: Optional[str] = None,
                 ports: Optional[str] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 revoked_server_cert: Optional[str] = None,
                 sni_server_cert_check: Optional[str] = None,
                 status: Optional[str] = None,
                 unsupported_ssl: Optional[str] = None,
                 unsupported_ssl_cipher: Optional[str] = None,
                 unsupported_ssl_negotiation: Optional[str] = None,
                 unsupported_ssl_version: Optional[str] = None,
                 untrusted_server_cert: Optional[str] = None):
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_failure")

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_timeout")

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "client_cert_request")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "expired_server_cert")

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "invalid_server_cert")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "revoked_server_cert")

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[str]:
        return pulumi.get(self, "sni_server_cert_check")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl")

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_version")

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "untrusted_server_cert")


@pulumi.output_type
class FirewallSslSshProfileSsh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inspectAll":
            suggest = "inspect_all"
        elif key == "proxyAfterTcpHandshake":
            suggest = "proxy_after_tcp_handshake"
        elif key == "sshAlgorithm":
            suggest = "ssh_algorithm"
        elif key == "sshPolicyCheck":
            suggest = "ssh_policy_check"
        elif key == "sshTunPolicyCheck":
            suggest = "ssh_tun_policy_check"
        elif key == "unsupportedVersion":
            suggest = "unsupported_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSslSshProfileSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSslSshProfileSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSslSshProfileSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inspect_all: Optional[str] = None,
                 ports: Optional[str] = None,
                 proxy_after_tcp_handshake: Optional[str] = None,
                 ssh_algorithm: Optional[str] = None,
                 ssh_policy_check: Optional[str] = None,
                 ssh_tun_policy_check: Optional[str] = None,
                 status: Optional[str] = None,
                 unsupported_version: Optional[str] = None):
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if ssh_algorithm is not None:
            pulumi.set(__self__, "ssh_algorithm", ssh_algorithm)
        if ssh_policy_check is not None:
            pulumi.set(__self__, "ssh_policy_check", ssh_policy_check)
        if ssh_tun_policy_check is not None:
            pulumi.set(__self__, "ssh_tun_policy_check", ssh_tun_policy_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_version is not None:
            pulumi.set(__self__, "unsupported_version", unsupported_version)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[str]:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[str]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="sshAlgorithm")
    def ssh_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "ssh_algorithm")

    @property
    @pulumi.getter(name="sshPolicyCheck")
    def ssh_policy_check(self) -> Optional[str]:
        return pulumi.get(self, "ssh_policy_check")

    @property
    @pulumi.getter(name="sshTunPolicyCheck")
    def ssh_tun_policy_check(self) -> Optional[str]:
        return pulumi.get(self, "ssh_tun_policy_check")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="unsupportedVersion")
    def unsupported_version(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_version")


@pulumi.output_type
class FirewallSslSshProfileSsl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certProbeFailure":
            suggest = "cert_probe_failure"
        elif key == "certValidationFailure":
            suggest = "cert_validation_failure"
        elif key == "certValidationTimeout":
            suggest = "cert_validation_timeout"
        elif key == "clientCertRequest":
            suggest = "client_cert_request"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "expiredServerCert":
            suggest = "expired_server_cert"
        elif key == "inspectAll":
            suggest = "inspect_all"
        elif key == "invalidServerCert":
            suggest = "invalid_server_cert"
        elif key == "minAllowedSslVersion":
            suggest = "min_allowed_ssl_version"
        elif key == "revokedServerCert":
            suggest = "revoked_server_cert"
        elif key == "sniServerCertCheck":
            suggest = "sni_server_cert_check"
        elif key == "unsupportedSsl":
            suggest = "unsupported_ssl"
        elif key == "unsupportedSslCipher":
            suggest = "unsupported_ssl_cipher"
        elif key == "unsupportedSslNegotiation":
            suggest = "unsupported_ssl_negotiation"
        elif key == "unsupportedSslVersion":
            suggest = "unsupported_ssl_version"
        elif key == "untrustedServerCert":
            suggest = "untrusted_server_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSslSshProfileSsl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSslSshProfileSsl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSslSshProfileSsl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_probe_failure: Optional[str] = None,
                 cert_validation_failure: Optional[str] = None,
                 cert_validation_timeout: Optional[str] = None,
                 client_cert_request: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 expired_server_cert: Optional[str] = None,
                 inspect_all: Optional[str] = None,
                 invalid_server_cert: Optional[str] = None,
                 min_allowed_ssl_version: Optional[str] = None,
                 revoked_server_cert: Optional[str] = None,
                 sni_server_cert_check: Optional[str] = None,
                 unsupported_ssl: Optional[str] = None,
                 unsupported_ssl_cipher: Optional[str] = None,
                 unsupported_ssl_negotiation: Optional[str] = None,
                 unsupported_ssl_version: Optional[str] = None,
                 untrusted_server_cert: Optional[str] = None):
        if cert_probe_failure is not None:
            pulumi.set(__self__, "cert_probe_failure", cert_probe_failure)
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certProbeFailure")
    def cert_probe_failure(self) -> Optional[str]:
        return pulumi.get(self, "cert_probe_failure")

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_failure")

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[str]:
        return pulumi.get(self, "cert_validation_timeout")

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "client_cert_request")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "expired_server_cert")

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[str]:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "invalid_server_cert")

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[str]:
        return pulumi.get(self, "min_allowed_ssl_version")

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "revoked_server_cert")

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[str]:
        return pulumi.get(self, "sni_server_cert_check")

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl")

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[str]:
        return pulumi.get(self, "unsupported_ssl_version")

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[str]:
        return pulumi.get(self, "untrusted_server_cert")


@pulumi.output_type
class FirewallSslSshProfileSslExempt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fortiguardCategory":
            suggest = "fortiguard_category"
        elif key == "wildcardFqdn":
            suggest = "wildcard_fqdn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSslSshProfileSslExempt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSslSshProfileSslExempt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSslSshProfileSslExempt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 address6: Optional[str] = None,
                 fortiguard_category: Optional[int] = None,
                 id: Optional[int] = None,
                 regex: Optional[str] = None,
                 type: Optional[str] = None,
                 wildcard_fqdn: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address6 is not None:
            pulumi.set(__self__, "address6", address6)
        if fortiguard_category is not None:
            pulumi.set(__self__, "fortiguard_category", fortiguard_category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wildcard_fqdn is not None:
            pulumi.set(__self__, "wildcard_fqdn", wildcard_fqdn)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def address6(self) -> Optional[str]:
        return pulumi.get(self, "address6")

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> Optional[int]:
        return pulumi.get(self, "fortiguard_category")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="wildcardFqdn")
    def wildcard_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "wildcard_fqdn")


@pulumi.output_type
class FirewallSslSshProfileSslServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ftpsClientCertRequest":
            suggest = "ftps_client_cert_request"
        elif key == "ftpsClientCertificate":
            suggest = "ftps_client_certificate"
        elif key == "httpsClientCertRequest":
            suggest = "https_client_cert_request"
        elif key == "httpsClientCertificate":
            suggest = "https_client_certificate"
        elif key == "imapsClientCertRequest":
            suggest = "imaps_client_cert_request"
        elif key == "imapsClientCertificate":
            suggest = "imaps_client_certificate"
        elif key == "pop3sClientCertRequest":
            suggest = "pop3s_client_cert_request"
        elif key == "pop3sClientCertificate":
            suggest = "pop3s_client_certificate"
        elif key == "smtpsClientCertRequest":
            suggest = "smtps_client_cert_request"
        elif key == "smtpsClientCertificate":
            suggest = "smtps_client_certificate"
        elif key == "sslOtherClientCertRequest":
            suggest = "ssl_other_client_cert_request"
        elif key == "sslOtherClientCertificate":
            suggest = "ssl_other_client_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSslSshProfileSslServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSslSshProfileSslServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSslSshProfileSslServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ftps_client_cert_request: Optional[str] = None,
                 ftps_client_certificate: Optional[str] = None,
                 https_client_cert_request: Optional[str] = None,
                 https_client_certificate: Optional[str] = None,
                 id: Optional[int] = None,
                 imaps_client_cert_request: Optional[str] = None,
                 imaps_client_certificate: Optional[str] = None,
                 ip: Optional[str] = None,
                 pop3s_client_cert_request: Optional[str] = None,
                 pop3s_client_certificate: Optional[str] = None,
                 smtps_client_cert_request: Optional[str] = None,
                 smtps_client_certificate: Optional[str] = None,
                 ssl_other_client_cert_request: Optional[str] = None,
                 ssl_other_client_certificate: Optional[str] = None):
        if ftps_client_cert_request is not None:
            pulumi.set(__self__, "ftps_client_cert_request", ftps_client_cert_request)
        if ftps_client_certificate is not None:
            pulumi.set(__self__, "ftps_client_certificate", ftps_client_certificate)
        if https_client_cert_request is not None:
            pulumi.set(__self__, "https_client_cert_request", https_client_cert_request)
        if https_client_certificate is not None:
            pulumi.set(__self__, "https_client_certificate", https_client_certificate)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if imaps_client_cert_request is not None:
            pulumi.set(__self__, "imaps_client_cert_request", imaps_client_cert_request)
        if imaps_client_certificate is not None:
            pulumi.set(__self__, "imaps_client_certificate", imaps_client_certificate)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if pop3s_client_cert_request is not None:
            pulumi.set(__self__, "pop3s_client_cert_request", pop3s_client_cert_request)
        if pop3s_client_certificate is not None:
            pulumi.set(__self__, "pop3s_client_certificate", pop3s_client_certificate)
        if smtps_client_cert_request is not None:
            pulumi.set(__self__, "smtps_client_cert_request", smtps_client_cert_request)
        if smtps_client_certificate is not None:
            pulumi.set(__self__, "smtps_client_certificate", smtps_client_certificate)
        if ssl_other_client_cert_request is not None:
            pulumi.set(__self__, "ssl_other_client_cert_request", ssl_other_client_cert_request)
        if ssl_other_client_certificate is not None:
            pulumi.set(__self__, "ssl_other_client_certificate", ssl_other_client_certificate)

    @property
    @pulumi.getter(name="ftpsClientCertRequest")
    def ftps_client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "ftps_client_cert_request")

    @property
    @pulumi.getter(name="ftpsClientCertificate")
    def ftps_client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "ftps_client_certificate")

    @property
    @pulumi.getter(name="httpsClientCertRequest")
    def https_client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "https_client_cert_request")

    @property
    @pulumi.getter(name="httpsClientCertificate")
    def https_client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "https_client_certificate")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imapsClientCertRequest")
    def imaps_client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "imaps_client_cert_request")

    @property
    @pulumi.getter(name="imapsClientCertificate")
    def imaps_client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "imaps_client_certificate")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="pop3sClientCertRequest")
    def pop3s_client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "pop3s_client_cert_request")

    @property
    @pulumi.getter(name="pop3sClientCertificate")
    def pop3s_client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "pop3s_client_certificate")

    @property
    @pulumi.getter(name="smtpsClientCertRequest")
    def smtps_client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "smtps_client_cert_request")

    @property
    @pulumi.getter(name="smtpsClientCertificate")
    def smtps_client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "smtps_client_certificate")

    @property
    @pulumi.getter(name="sslOtherClientCertRequest")
    def ssl_other_client_cert_request(self) -> Optional[str]:
        return pulumi.get(self, "ssl_other_client_cert_request")

    @property
    @pulumi.getter(name="sslOtherClientCertificate")
    def ssl_other_client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "ssl_other_client_certificate")


@pulumi.output_type
class FirewallTtlPolicyService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallTtlPolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallVip46Monitor(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallVip46Realserver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIp":
            suggest = "client_ip"
        elif key == "holddownInterval":
            suggest = "holddown_interval"
        elif key == "maxConnections":
            suggest = "max_connections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallVip46Realserver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallVip46Realserver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallVip46Realserver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_ip: Optional[str] = None,
                 healthcheck: Optional[str] = None,
                 holddown_interval: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 max_connections: Optional[int] = None,
                 monitor: Optional[str] = None,
                 port: Optional[int] = None,
                 status: Optional[str] = None,
                 weight: Optional[int] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[str]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[str]:
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[int]:
        return pulumi.get(self, "holddown_interval")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter
    def monitor(self) -> Optional[str]:
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FirewallVip46SrcFilter(dict):
    def __init__(__self__, *,
                 range: Optional[str] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[str]:
        return pulumi.get(self, "range")


@pulumi.output_type
class FirewallVip46SrcintfFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallVip46SrcintfFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallVip46SrcintfFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallVip46SrcintfFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class FirewallVip64Monitor(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallVip64Realserver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIp":
            suggest = "client_ip"
        elif key == "holddownInterval":
            suggest = "holddown_interval"
        elif key == "maxConnections":
            suggest = "max_connections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallVip64Realserver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallVip64Realserver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallVip64Realserver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_ip: Optional[str] = None,
                 healthcheck: Optional[str] = None,
                 holddown_interval: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 max_connections: Optional[int] = None,
                 monitor: Optional[str] = None,
                 port: Optional[int] = None,
                 status: Optional[str] = None,
                 weight: Optional[int] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[str]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[str]:
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[int]:
        return pulumi.get(self, "holddown_interval")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter
    def monitor(self) -> Optional[str]:
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FirewallVip64SrcFilter(dict):
    def __init__(__self__, *,
                 range: Optional[str] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[str]:
        return pulumi.get(self, "range")


@pulumi.output_type
class FirewallVip6Monitor(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallVip6Realserver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIp":
            suggest = "client_ip"
        elif key == "holddownInterval":
            suggest = "holddown_interval"
        elif key == "httpHost":
            suggest = "http_host"
        elif key == "maxConnections":
            suggest = "max_connections"
        elif key == "translateHost":
            suggest = "translate_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallVip6Realserver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallVip6Realserver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallVip6Realserver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_ip: Optional[str] = None,
                 healthcheck: Optional[str] = None,
                 holddown_interval: Optional[int] = None,
                 http_host: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 max_connections: Optional[int] = None,
                 monitor: Optional[str] = None,
                 port: Optional[int] = None,
                 status: Optional[str] = None,
                 translate_host: Optional[str] = None,
                 weight: Optional[int] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[str]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[str]:
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[int]:
        return pulumi.get(self, "holddown_interval")

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[str]:
        return pulumi.get(self, "http_host")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter
    def monitor(self) -> Optional[str]:
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[str]:
        return pulumi.get(self, "translate_host")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FirewallVip6SrcFilter(dict):
    def __init__(__self__, *,
                 range: Optional[str] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[str]:
        return pulumi.get(self, "range")


@pulumi.output_type
class FirewallVip6SslCipherSuite(dict):
    def __init__(__self__, *,
                 cipher: Optional[str] = None,
                 priority: Optional[int] = None,
                 versions: Optional[str] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def versions(self) -> Optional[str]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class FirewallVip6SslServerCipherSuite(dict):
    def __init__(__self__, *,
                 cipher: Optional[str] = None,
                 priority: Optional[int] = None,
                 versions: Optional[str] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def versions(self) -> Optional[str]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class FirewallVipExtaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallVipMappedip(dict):
    def __init__(__self__, *,
                 range: Optional[str] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[str]:
        return pulumi.get(self, "range")


@pulumi.output_type
class FirewallVipMonitor(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallVipRealserver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIp":
            suggest = "client_ip"
        elif key == "holddownInterval":
            suggest = "holddown_interval"
        elif key == "httpHost":
            suggest = "http_host"
        elif key == "maxConnections":
            suggest = "max_connections"
        elif key == "translateHost":
            suggest = "translate_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallVipRealserver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallVipRealserver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallVipRealserver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 client_ip: Optional[str] = None,
                 healthcheck: Optional[str] = None,
                 holddown_interval: Optional[int] = None,
                 http_host: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 max_connections: Optional[int] = None,
                 monitor: Optional[str] = None,
                 port: Optional[int] = None,
                 status: Optional[str] = None,
                 translate_host: Optional[str] = None,
                 type: Optional[str] = None,
                 weight: Optional[int] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[str]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[str]:
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[int]:
        return pulumi.get(self, "holddown_interval")

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[str]:
        return pulumi.get(self, "http_host")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter
    def monitor(self) -> Optional[str]:
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[str]:
        return pulumi.get(self, "translate_host")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FirewallVipService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallVipSrcFilter(dict):
    def __init__(__self__, *,
                 range: Optional[str] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[str]:
        return pulumi.get(self, "range")


@pulumi.output_type
class FirewallVipSrcintfFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallVipSrcintfFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallVipSrcintfFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallVipSrcintfFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class FirewallVipSslCipherSuite(dict):
    def __init__(__self__, *,
                 cipher: Optional[str] = None,
                 priority: Optional[int] = None,
                 versions: Optional[str] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def versions(self) -> Optional[str]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class FirewallVipSslServerCipherSuite(dict):
    def __init__(__self__, *,
                 cipher: Optional[str] = None,
                 priority: Optional[int] = None,
                 versions: Optional[str] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def versions(self) -> Optional[str]:
        return pulumi.get(self, "versions")


@pulumi.output_type
class FirewallVipgrp46Member(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallVipgrp64Member(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallVipgrp6Member(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallVipgrpMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallWildcardFqdnGroupMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallAddress6ListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetFirewallAddress6MacaddrResult(dict):
    def __init__(__self__, *,
                 macaddr: str):
        pulumi.set(__self__, "macaddr", macaddr)

    @property
    @pulumi.getter
    def macaddr(self) -> str:
        return pulumi.get(self, "macaddr")


@pulumi.output_type
class GetFirewallAddress6SubnetSegmentResult(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFirewallAddress6TaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetFirewallAddress6TaggingTagResult']):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFirewallAddress6TaggingTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetFirewallAddress6TaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallAddress6TemplateSubnetSegmentResult(dict):
    def __init__(__self__, *,
                 bits: int,
                 exclusive: str,
                 id: int,
                 name: str,
                 values: Sequence['outputs.GetFirewallAddress6TemplateSubnetSegmentValueResult']):
        pulumi.set(__self__, "bits", bits)
        pulumi.set(__self__, "exclusive", exclusive)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def bits(self) -> int:
        return pulumi.get(self, "bits")

    @property
    @pulumi.getter
    def exclusive(self) -> str:
        return pulumi.get(self, "exclusive")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetFirewallAddress6TemplateSubnetSegmentValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetFirewallAddress6TemplateSubnetSegmentValueResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFirewallAddressFssoGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallAddressListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetFirewallAddressMacaddrResult(dict):
    def __init__(__self__, *,
                 macaddr: str):
        pulumi.set(__self__, "macaddr", macaddr)

    @property
    @pulumi.getter
    def macaddr(self) -> str:
        return pulumi.get(self, "macaddr")


@pulumi.output_type
class GetFirewallAddressTaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetFirewallAddressTaggingTagResult']):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFirewallAddressTaggingTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetFirewallAddressTaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallAddrgrp6ExcludeMemberResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallAddrgrp6MemberResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallAddrgrp6TaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetFirewallAddrgrp6TaggingTagResult']):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFirewallAddrgrp6TaggingTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetFirewallAddrgrp6TaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallAddrgrpExcludeMemberResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallAddrgrpMemberResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallAddrgrpTaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetFirewallAddrgrpTaggingTagResult']):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFirewallAddrgrpTaggingTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetFirewallAddrgrpTaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallCentralSnatMapDstAddr6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallCentralSnatMapDstAddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallCentralSnatMapDstintfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallCentralSnatMapNatIppool6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallCentralSnatMapNatIppoolResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallCentralSnatMapOrigAddr6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallCentralSnatMapOrigAddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallCentralSnatMapSrcintfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyAppCategoryResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallConsolidatedPolicyAppGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyApplicationResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallConsolidatedPolicyDstaddr4Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyDstaddr6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyDstintfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyFssoGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyInternetServiceCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyInternetServiceCustomGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyInternetServiceGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyInternetServiceIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallConsolidatedPolicyInternetServiceNameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyInternetServiceSrcCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyInternetServiceSrcCustomGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyInternetServiceSrcGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyInternetServiceSrcIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallConsolidatedPolicyInternetServiceSrcNameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyPoolname4Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyPoolname6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyServiceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicySrcaddr4Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicySrcaddr6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicySrcintfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallConsolidatedPolicyUrlCategoryResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallConsolidatedPolicyUserResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDosPolicy6AnomalyResult(dict):
    def __init__(__self__, *,
                 action: str,
                 log: str,
                 name: str,
                 quarantine: str,
                 quarantine_expiry: str,
                 quarantine_log: str,
                 status: str,
                 threshold: int,
                 thresholddefault: int):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "quarantine", quarantine)
        pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        pulumi.set(__self__, "quarantine_log", quarantine_log)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> str:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def quarantine(self) -> str:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> str:
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> str:
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def threshold(self) -> int:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def thresholddefault(self) -> int:
        return pulumi.get(self, "thresholddefault")


@pulumi.output_type
class GetFirewallDosPolicy6DstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDosPolicy6ServiceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDosPolicy6SrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDosPolicyAnomalyResult(dict):
    def __init__(__self__, *,
                 action: str,
                 log: str,
                 name: str,
                 quarantine: str,
                 quarantine_expiry: str,
                 quarantine_log: str,
                 status: str,
                 threshold: int,
                 thresholddefault: int):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "quarantine", quarantine)
        pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        pulumi.set(__self__, "quarantine_log", quarantine_log)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> str:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def quarantine(self) -> str:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> str:
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> str:
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def threshold(self) -> int:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def thresholddefault(self) -> int:
        return pulumi.get(self, "thresholddefault")


@pulumi.output_type
class GetFirewallDosPolicyDstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDosPolicyServiceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDosPolicySrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallInternetServiceCustomEntryResult(dict):
    def __init__(__self__, *,
                 addr_mode: str,
                 dst6s: Sequence['outputs.GetFirewallInternetServiceCustomEntryDst6Result'],
                 dsts: Sequence['outputs.GetFirewallInternetServiceCustomEntryDstResult'],
                 id: int,
                 port_ranges: Sequence['outputs.GetFirewallInternetServiceCustomEntryPortRangeResult'],
                 protocol: int):
        pulumi.set(__self__, "addr_mode", addr_mode)
        pulumi.set(__self__, "dst6s", dst6s)
        pulumi.set(__self__, "dsts", dsts)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "port_ranges", port_ranges)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> str:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def dst6s(self) -> Sequence['outputs.GetFirewallInternetServiceCustomEntryDst6Result']:
        return pulumi.get(self, "dst6s")

    @property
    @pulumi.getter
    def dsts(self) -> Sequence['outputs.GetFirewallInternetServiceCustomEntryDstResult']:
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Sequence['outputs.GetFirewallInternetServiceCustomEntryPortRangeResult']:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetFirewallInternetServiceCustomEntryDst6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallInternetServiceCustomEntryDstResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallInternetServiceCustomEntryPortRangeResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 id: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetFirewallInternetServiceCustomGroupMemberResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallInternetServiceDefinitionEntryResult(dict):
    def __init__(__self__, *,
                 category_id: int,
                 name: str,
                 port: int,
                 port_ranges: Sequence['outputs.GetFirewallInternetServiceDefinitionEntryPortRangeResult'],
                 protocol: int,
                 seq_num: int):
        pulumi.set(__self__, "category_id", category_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "port_ranges", port_ranges)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> int:
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Sequence['outputs.GetFirewallInternetServiceDefinitionEntryPortRangeResult']:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> int:
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class GetFirewallInternetServiceDefinitionEntryPortRangeResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 id: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetFirewallInternetServiceExtensionDisableEntryResult(dict):
    def __init__(__self__, *,
                 addr_mode: str,
                 id: int,
                 ip6_ranges: Sequence['outputs.GetFirewallInternetServiceExtensionDisableEntryIp6RangeResult'],
                 ip_ranges: Sequence['outputs.GetFirewallInternetServiceExtensionDisableEntryIpRangeResult'],
                 port: int,
                 port_ranges: Sequence['outputs.GetFirewallInternetServiceExtensionDisableEntryPortRangeResult'],
                 protocol: int):
        pulumi.set(__self__, "addr_mode", addr_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip6_ranges", ip6_ranges)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "port_ranges", port_ranges)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> str:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip6Ranges")
    def ip6_ranges(self) -> Sequence['outputs.GetFirewallInternetServiceExtensionDisableEntryIp6RangeResult']:
        return pulumi.get(self, "ip6_ranges")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence['outputs.GetFirewallInternetServiceExtensionDisableEntryIpRangeResult']:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Sequence['outputs.GetFirewallInternetServiceExtensionDisableEntryPortRangeResult']:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetFirewallInternetServiceExtensionDisableEntryIp6RangeResult(dict):
    def __init__(__self__, *,
                 end_ip6: str,
                 id: int,
                 start_ip6: str):
        pulumi.set(__self__, "end_ip6", end_ip6)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "start_ip6", start_ip6)

    @property
    @pulumi.getter(name="endIp6")
    def end_ip6(self) -> str:
        return pulumi.get(self, "end_ip6")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp6")
    def start_ip6(self) -> str:
        return pulumi.get(self, "start_ip6")


@pulumi.output_type
class GetFirewallInternetServiceExtensionDisableEntryIpRangeResult(dict):
    def __init__(__self__, *,
                 end_ip: str,
                 id: int,
                 start_ip: str):
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class GetFirewallInternetServiceExtensionDisableEntryPortRangeResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 id: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetFirewallInternetServiceExtensionEntryResult(dict):
    def __init__(__self__, *,
                 addr_mode: str,
                 dst6s: Sequence['outputs.GetFirewallInternetServiceExtensionEntryDst6Result'],
                 dsts: Sequence['outputs.GetFirewallInternetServiceExtensionEntryDstResult'],
                 id: int,
                 port_ranges: Sequence['outputs.GetFirewallInternetServiceExtensionEntryPortRangeResult'],
                 protocol: int):
        pulumi.set(__self__, "addr_mode", addr_mode)
        pulumi.set(__self__, "dst6s", dst6s)
        pulumi.set(__self__, "dsts", dsts)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "port_ranges", port_ranges)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> str:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def dst6s(self) -> Sequence['outputs.GetFirewallInternetServiceExtensionEntryDst6Result']:
        return pulumi.get(self, "dst6s")

    @property
    @pulumi.getter
    def dsts(self) -> Sequence['outputs.GetFirewallInternetServiceExtensionEntryDstResult']:
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Sequence['outputs.GetFirewallInternetServiceExtensionEntryPortRangeResult']:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetFirewallInternetServiceExtensionEntryDst6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallInternetServiceExtensionEntryDstResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallInternetServiceExtensionEntryPortRangeResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 id: int,
                 start_port: int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class GetFirewallInternetServiceGroupMemberResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallMulticastAddress6TaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetFirewallMulticastAddress6TaggingTagResult']):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFirewallMulticastAddress6TaggingTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetFirewallMulticastAddress6TaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallMulticastAddressTaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetFirewallMulticastAddressTaggingTagResult']):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFirewallMulticastAddressTaggingTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetFirewallMulticastAddressTaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy46DstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy46PoolnameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy46ServiceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy46SrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy64DstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy64PoolnameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy64ServiceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy64SrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6AppCategoryResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallPolicy6AppGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6ApplicationResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallPolicy6CustomLogFieldResult(dict):
    def __init__(__self__, *,
                 field_id: str):
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class GetFirewallPolicy6DeviceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6DstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6DstintfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6FssoGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6GroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6PoolnameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6ServiceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6SrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6SrcintfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6SslMirrorIntfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicy6UrlCategoryResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallPolicy6UserResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyAppCategoryResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallPolicyAppGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyApplicationResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallPolicyCustomLogFieldResult(dict):
    def __init__(__self__, *,
                 field_id: str):
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class GetFirewallPolicyDeviceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyDstaddr6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyDstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyDstintfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyFssoGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetService6CustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetService6CustomGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetService6GroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetService6NameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetService6SrcCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetService6SrcCustomGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetService6SrcGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetService6SrcNameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetServiceCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetServiceCustomGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetServiceGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetServiceIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallPolicyInternetServiceNameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetServiceSrcCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetServiceSrcCustomGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetServiceSrcGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyInternetServiceSrcIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallPolicyInternetServiceSrcNameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyNetworkServiceDynamicResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyNetworkServiceSrcDynamicResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyNtlmEnabledBrowserResult(dict):
    def __init__(__self__, *,
                 user_agent_string: str):
        pulumi.set(__self__, "user_agent_string", user_agent_string)

    @property
    @pulumi.getter(name="userAgentString")
    def user_agent_string(self) -> str:
        return pulumi.get(self, "user_agent_string")


@pulumi.output_type
class GetFirewallPolicyPcpPoolnameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyPoolname6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyPoolnameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyRtpAddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyServiceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicySgtResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallPolicySrcVendorMacResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallPolicySrcaddr6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicySrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicySrcintfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicySslMirrorIntfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyUrlCategoryResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallPolicyUserResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyZtnaEmsTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyZtnaEmsTagSecondaryResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallPolicyZtnaGeoTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsCifResult(dict):
    def __init__(__self__, *,
                 domain_controller: str,
                 options: str,
                 oversize_limit: int,
                 ports: int,
                 scan_bzip2: str,
                 server_credential_type: str,
                 server_keytabs: Sequence['outputs.GetFirewallProfileProtocolOptionsCifServerKeytabResult'],
                 status: str,
                 tcp_window_maximum: int,
                 tcp_window_minimum: int,
                 tcp_window_size: int,
                 tcp_window_type: str,
                 uncompressed_nest_limit: int,
                 uncompressed_oversize_limit: int):
        pulumi.set(__self__, "domain_controller", domain_controller)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "oversize_limit", oversize_limit)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        pulumi.set(__self__, "server_credential_type", server_credential_type)
        pulumi.set(__self__, "server_keytabs", server_keytabs)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> str:
        return pulumi.get(self, "domain_controller")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> int:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> int:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> str:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="serverCredentialType")
    def server_credential_type(self) -> str:
        return pulumi.get(self, "server_credential_type")

    @property
    @pulumi.getter(name="serverKeytabs")
    def server_keytabs(self) -> Sequence['outputs.GetFirewallProfileProtocolOptionsCifServerKeytabResult']:
        return pulumi.get(self, "server_keytabs")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> int:
        return pulumi.get(self, "tcp_window_maximum")

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> int:
        return pulumi.get(self, "tcp_window_minimum")

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> int:
        return pulumi.get(self, "tcp_window_size")

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> str:
        return pulumi.get(self, "tcp_window_type")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> int:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> int:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsCifServerKeytabResult(dict):
    def __init__(__self__, *,
                 keytab: str,
                 principal: str):
        pulumi.set(__self__, "keytab", keytab)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def keytab(self) -> str:
        return pulumi.get(self, "keytab")

    @property
    @pulumi.getter
    def principal(self) -> str:
        return pulumi.get(self, "principal")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsDnResult(dict):
    def __init__(__self__, *,
                 ports: int,
                 status: str):
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def ports(self) -> int:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsFtpResult(dict):
    def __init__(__self__, *,
                 comfort_amount: int,
                 comfort_interval: int,
                 explicit_ftp_tls: str,
                 inspect_all: str,
                 options: str,
                 oversize_limit: int,
                 ports: int,
                 scan_bzip2: str,
                 ssl_offloaded: str,
                 status: str,
                 stream_based_uncompressed_limit: int,
                 tcp_window_maximum: int,
                 tcp_window_minimum: int,
                 tcp_window_size: int,
                 tcp_window_type: str,
                 uncompressed_nest_limit: int,
                 uncompressed_oversize_limit: int):
        pulumi.set(__self__, "comfort_amount", comfort_amount)
        pulumi.set(__self__, "comfort_interval", comfort_interval)
        pulumi.set(__self__, "explicit_ftp_tls", explicit_ftp_tls)
        pulumi.set(__self__, "inspect_all", inspect_all)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "oversize_limit", oversize_limit)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> int:
        return pulumi.get(self, "comfort_amount")

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> int:
        return pulumi.get(self, "comfort_interval")

    @property
    @pulumi.getter(name="explicitFtpTls")
    def explicit_ftp_tls(self) -> str:
        return pulumi.get(self, "explicit_ftp_tls")

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> str:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> int:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> int:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> str:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> str:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> int:
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> int:
        return pulumi.get(self, "tcp_window_maximum")

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> int:
        return pulumi.get(self, "tcp_window_minimum")

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> int:
        return pulumi.get(self, "tcp_window_size")

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> str:
        return pulumi.get(self, "tcp_window_type")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> int:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> int:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsHttpResult(dict):
    def __init__(__self__, *,
                 address_ip_rating: str,
                 block_page_status_code: int,
                 comfort_amount: int,
                 comfort_interval: int,
                 fortinet_bar: str,
                 fortinet_bar_port: int,
                 h2c: str,
                 http_policy: str,
                 inspect_all: str,
                 options: str,
                 oversize_limit: int,
                 ports: int,
                 post_lang: str,
                 proxy_after_tcp_handshake: str,
                 range_block: str,
                 retry_count: int,
                 scan_bzip2: str,
                 ssl_offloaded: str,
                 status: str,
                 stream_based_uncompressed_limit: int,
                 streaming_content_bypass: str,
                 strip_x_forwarded_for: str,
                 switching_protocols: str,
                 tcp_window_maximum: int,
                 tcp_window_minimum: int,
                 tcp_window_size: int,
                 tcp_window_type: str,
                 tunnel_non_http: str,
                 uncompressed_nest_limit: int,
                 uncompressed_oversize_limit: int,
                 unknown_content_encoding: str,
                 unknown_http_version: str,
                 verify_dns_for_policy_matching: str):
        pulumi.set(__self__, "address_ip_rating", address_ip_rating)
        pulumi.set(__self__, "block_page_status_code", block_page_status_code)
        pulumi.set(__self__, "comfort_amount", comfort_amount)
        pulumi.set(__self__, "comfort_interval", comfort_interval)
        pulumi.set(__self__, "fortinet_bar", fortinet_bar)
        pulumi.set(__self__, "fortinet_bar_port", fortinet_bar_port)
        pulumi.set(__self__, "h2c", h2c)
        pulumi.set(__self__, "http_policy", http_policy)
        pulumi.set(__self__, "inspect_all", inspect_all)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "oversize_limit", oversize_limit)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "post_lang", post_lang)
        pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        pulumi.set(__self__, "range_block", range_block)
        pulumi.set(__self__, "retry_count", retry_count)
        pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        pulumi.set(__self__, "streaming_content_bypass", streaming_content_bypass)
        pulumi.set(__self__, "strip_x_forwarded_for", strip_x_forwarded_for)
        pulumi.set(__self__, "switching_protocols", switching_protocols)
        pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        pulumi.set(__self__, "tunnel_non_http", tunnel_non_http)
        pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)
        pulumi.set(__self__, "unknown_content_encoding", unknown_content_encoding)
        pulumi.set(__self__, "unknown_http_version", unknown_http_version)
        pulumi.set(__self__, "verify_dns_for_policy_matching", verify_dns_for_policy_matching)

    @property
    @pulumi.getter(name="addressIpRating")
    def address_ip_rating(self) -> str:
        return pulumi.get(self, "address_ip_rating")

    @property
    @pulumi.getter(name="blockPageStatusCode")
    def block_page_status_code(self) -> int:
        return pulumi.get(self, "block_page_status_code")

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> int:
        return pulumi.get(self, "comfort_amount")

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> int:
        return pulumi.get(self, "comfort_interval")

    @property
    @pulumi.getter(name="fortinetBar")
    def fortinet_bar(self) -> str:
        return pulumi.get(self, "fortinet_bar")

    @property
    @pulumi.getter(name="fortinetBarPort")
    def fortinet_bar_port(self) -> int:
        return pulumi.get(self, "fortinet_bar_port")

    @property
    @pulumi.getter
    def h2c(self) -> str:
        return pulumi.get(self, "h2c")

    @property
    @pulumi.getter(name="httpPolicy")
    def http_policy(self) -> str:
        return pulumi.get(self, "http_policy")

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> str:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> int:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> int:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="postLang")
    def post_lang(self) -> str:
        return pulumi.get(self, "post_lang")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> str:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="rangeBlock")
    def range_block(self) -> str:
        return pulumi.get(self, "range_block")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> int:
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> str:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> str:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> int:
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> str:
        return pulumi.get(self, "streaming_content_bypass")

    @property
    @pulumi.getter(name="stripXForwardedFor")
    def strip_x_forwarded_for(self) -> str:
        return pulumi.get(self, "strip_x_forwarded_for")

    @property
    @pulumi.getter(name="switchingProtocols")
    def switching_protocols(self) -> str:
        return pulumi.get(self, "switching_protocols")

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> int:
        return pulumi.get(self, "tcp_window_maximum")

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> int:
        return pulumi.get(self, "tcp_window_minimum")

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> int:
        return pulumi.get(self, "tcp_window_size")

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> str:
        return pulumi.get(self, "tcp_window_type")

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> str:
        return pulumi.get(self, "tunnel_non_http")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> int:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> int:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @property
    @pulumi.getter(name="unknownContentEncoding")
    def unknown_content_encoding(self) -> str:
        return pulumi.get(self, "unknown_content_encoding")

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> str:
        return pulumi.get(self, "unknown_http_version")

    @property
    @pulumi.getter(name="verifyDnsForPolicyMatching")
    def verify_dns_for_policy_matching(self) -> str:
        return pulumi.get(self, "verify_dns_for_policy_matching")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsImapResult(dict):
    def __init__(__self__, *,
                 inspect_all: str,
                 options: str,
                 oversize_limit: int,
                 ports: int,
                 proxy_after_tcp_handshake: str,
                 scan_bzip2: str,
                 ssl_offloaded: str,
                 status: str,
                 uncompressed_nest_limit: int,
                 uncompressed_oversize_limit: int):
        pulumi.set(__self__, "inspect_all", inspect_all)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "oversize_limit", oversize_limit)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> str:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> int:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> int:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> str:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> str:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> str:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> int:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> int:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsMailSignatureResult(dict):
    def __init__(__self__, *,
                 signature: str,
                 status: str):
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsMapiResult(dict):
    def __init__(__self__, *,
                 options: str,
                 oversize_limit: int,
                 ports: int,
                 scan_bzip2: str,
                 status: str,
                 uncompressed_nest_limit: int,
                 uncompressed_oversize_limit: int):
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "oversize_limit", oversize_limit)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> int:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> int:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> str:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> int:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> int:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsNntpResult(dict):
    def __init__(__self__, *,
                 inspect_all: str,
                 options: str,
                 oversize_limit: int,
                 ports: int,
                 proxy_after_tcp_handshake: str,
                 scan_bzip2: str,
                 status: str,
                 uncompressed_nest_limit: int,
                 uncompressed_oversize_limit: int):
        pulumi.set(__self__, "inspect_all", inspect_all)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "oversize_limit", oversize_limit)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> str:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> int:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> int:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> str:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> str:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> int:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> int:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsPop3Result(dict):
    def __init__(__self__, *,
                 inspect_all: str,
                 options: str,
                 oversize_limit: int,
                 ports: int,
                 proxy_after_tcp_handshake: str,
                 scan_bzip2: str,
                 ssl_offloaded: str,
                 status: str,
                 uncompressed_nest_limit: int,
                 uncompressed_oversize_limit: int):
        pulumi.set(__self__, "inspect_all", inspect_all)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "oversize_limit", oversize_limit)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> str:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> int:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> int:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> str:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> str:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> str:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> int:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> int:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsSmtpResult(dict):
    def __init__(__self__, *,
                 inspect_all: str,
                 options: str,
                 oversize_limit: int,
                 ports: int,
                 proxy_after_tcp_handshake: str,
                 scan_bzip2: str,
                 server_busy: str,
                 ssl_offloaded: str,
                 status: str,
                 uncompressed_nest_limit: int,
                 uncompressed_oversize_limit: int):
        pulumi.set(__self__, "inspect_all", inspect_all)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "oversize_limit", oversize_limit)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        pulumi.set(__self__, "server_busy", server_busy)
        pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> str:
        return pulumi.get(self, "inspect_all")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> int:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter
    def ports(self) -> int:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> str:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> str:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="serverBusy")
    def server_busy(self) -> str:
        return pulumi.get(self, "server_busy")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> str:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> int:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> int:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class GetFirewallProfileProtocolOptionsSshResult(dict):
    def __init__(__self__, *,
                 comfort_amount: int,
                 comfort_interval: int,
                 options: str,
                 oversize_limit: int,
                 scan_bzip2: str,
                 ssl_offloaded: str,
                 stream_based_uncompressed_limit: int,
                 tcp_window_maximum: int,
                 tcp_window_minimum: int,
                 tcp_window_size: int,
                 tcp_window_type: str,
                 uncompressed_nest_limit: int,
                 uncompressed_oversize_limit: int):
        pulumi.set(__self__, "comfort_amount", comfort_amount)
        pulumi.set(__self__, "comfort_interval", comfort_interval)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "oversize_limit", oversize_limit)
        pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> int:
        return pulumi.get(self, "comfort_amount")

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> int:
        return pulumi.get(self, "comfort_interval")

    @property
    @pulumi.getter
    def options(self) -> str:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> int:
        return pulumi.get(self, "oversize_limit")

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> str:
        return pulumi.get(self, "scan_bzip2")

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> str:
        return pulumi.get(self, "ssl_offloaded")

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> int:
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> int:
        return pulumi.get(self, "tcp_window_maximum")

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> int:
        return pulumi.get(self, "tcp_window_minimum")

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> int:
        return pulumi.get(self, "tcp_window_size")

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> str:
        return pulumi.get(self, "tcp_window_type")

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> int:
        return pulumi.get(self, "uncompressed_nest_limit")

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> int:
        return pulumi.get(self, "uncompressed_oversize_limit")


@pulumi.output_type
class GetFirewallProxyAddressApplicationResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyAddressCategoryResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallProxyAddressHeaderGroupResult(dict):
    def __init__(__self__, *,
                 case_sensitivity: str,
                 header: str,
                 header_name: str,
                 id: int):
        pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> str:
        return pulumi.get(self, "case_sensitivity")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallProxyAddressTaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetFirewallProxyAddressTaggingTagResult']):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFirewallProxyAddressTaggingTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetFirewallProxyAddressTaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyAddrgrpMemberResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyAddrgrpTaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetFirewallProxyAddrgrpTaggingTagResult']):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFirewallProxyAddrgrpTaggingTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetFirewallProxyAddrgrpTaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyAccessProxy6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyAccessProxyResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyDstaddr6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyDstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyDstintfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyInternetService6CustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyInternetService6CustomGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyInternetService6GroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyInternetService6NameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyInternetServiceCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyInternetServiceCustomGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyInternetServiceGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyInternetServiceIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallProxyPolicyInternetServiceNameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyPoolnameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyServiceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicySrcaddr6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicySrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicySrcintfResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyUserResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallProxyPolicyZtnaEmsTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallScheduleGroupMemberResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallServiceCustomAppCategoryResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallServiceCustomApplicationResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirewallServiceGroupMemberResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallWildcardFqdnGroupMemberResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterAccessList6RuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 exact_match: str,
                 flags: int,
                 id: int,
                 prefix6: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def flags(self) -> int:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetRouterAccessListRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 exact_match: str,
                 flags: int,
                 id: int,
                 prefix: str,
                 wildcard: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def flags(self) -> int:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def wildcard(self) -> str:
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class GetRouterAspathListRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 id: int,
                 regexp: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")


@pulumi.output_type
class GetRouterBfd6MultihopTemplateResult(dict):
    def __init__(__self__, *,
                 auth_mode: str,
                 bfd_desired_min_tx: int,
                 bfd_detect_mult: int,
                 bfd_required_min_rx: int,
                 dst: str,
                 id: int,
                 md5_key: str,
                 src: str):
        pulumi.set(__self__, "auth_mode", auth_mode)
        pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        pulumi.set(__self__, "dst", dst)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "md5_key", md5_key)
        pulumi.set(__self__, "src", src)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> str:
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> int:
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> int:
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> int:
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter
    def dst(self) -> str:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> str:
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter
    def src(self) -> str:
        return pulumi.get(self, "src")


@pulumi.output_type
class GetRouterBfd6NeighborResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 ip6_address: str):
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> str:
        return pulumi.get(self, "ip6_address")


@pulumi.output_type
class GetRouterBfdMultihopTemplateResult(dict):
    def __init__(__self__, *,
                 auth_mode: str,
                 bfd_desired_min_tx: int,
                 bfd_detect_mult: int,
                 bfd_required_min_rx: int,
                 dst: str,
                 id: int,
                 md5_key: str,
                 src: str):
        pulumi.set(__self__, "auth_mode", auth_mode)
        pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        pulumi.set(__self__, "dst", dst)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "md5_key", md5_key)
        pulumi.set(__self__, "src", src)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> str:
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> int:
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> int:
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> int:
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter
    def dst(self) -> str:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> str:
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter
    def src(self) -> str:
        return pulumi.get(self, "src")


@pulumi.output_type
class GetRouterBfdNeighborResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 ip: str):
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetRouterBgpAdminDistanceResult(dict):
    def __init__(__self__, *,
                 distance: int,
                 id: int,
                 neighbour_prefix: str,
                 route_list: str):
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "neighbour_prefix", neighbour_prefix)
        pulumi.set(__self__, "route_list", route_list)

    @property
    @pulumi.getter
    def distance(self) -> int:
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="neighbourPrefix")
    def neighbour_prefix(self) -> str:
        return pulumi.get(self, "neighbour_prefix")

    @property
    @pulumi.getter(name="routeList")
    def route_list(self) -> str:
        return pulumi.get(self, "route_list")


@pulumi.output_type
class GetRouterBgpAggregateAddress6Result(dict):
    def __init__(__self__, *,
                 as_set: str,
                 id: int,
                 prefix6: str,
                 summary_only: str):
        pulumi.set(__self__, "as_set", as_set)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)
        pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> str:
        return pulumi.get(self, "as_set")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> str:
        return pulumi.get(self, "summary_only")


@pulumi.output_type
class GetRouterBgpAggregateAddressResult(dict):
    def __init__(__self__, *,
                 as_set: str,
                 id: int,
                 prefix: str,
                 summary_only: str):
        pulumi.set(__self__, "as_set", as_set)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> str:
        return pulumi.get(self, "as_set")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> str:
        return pulumi.get(self, "summary_only")


@pulumi.output_type
class GetRouterBgpConfederationPeerResult(dict):
    def __init__(__self__, *,
                 peer: str):
        pulumi.set(__self__, "peer", peer)

    @property
    @pulumi.getter
    def peer(self) -> str:
        return pulumi.get(self, "peer")


@pulumi.output_type
class GetRouterBgpNeighborResult(dict):
    def __init__(__self__, *,
                 activate: str,
                 activate6: str,
                 activate_evpn: str,
                 activate_vpnv4: str,
                 additional_path: str,
                 additional_path6: str,
                 additional_path_vpnv4: str,
                 adv_additional_path: int,
                 adv_additional_path6: int,
                 adv_additional_path_vpnv4: int,
                 advertisement_interval: int,
                 allowas_in: int,
                 allowas_in6: int,
                 allowas_in_enable: str,
                 allowas_in_enable6: str,
                 allowas_in_enable_evpn: str,
                 allowas_in_enable_vpnv4: str,
                 allowas_in_evpn: int,
                 allowas_in_vpnv4: int,
                 as_override: str,
                 as_override6: str,
                 attribute_unchanged: str,
                 attribute_unchanged6: str,
                 attribute_unchanged_vpnv4: str,
                 bfd: str,
                 capability_default_originate: str,
                 capability_default_originate6: str,
                 capability_dynamic: str,
                 capability_graceful_restart: str,
                 capability_graceful_restart6: str,
                 capability_graceful_restart_evpn: str,
                 capability_graceful_restart_vpnv4: str,
                 capability_orf: str,
                 capability_orf6: str,
                 capability_route_refresh: str,
                 conditional_advertise6s: Sequence['outputs.GetRouterBgpNeighborConditionalAdvertise6Result'],
                 conditional_advertises: Sequence['outputs.GetRouterBgpNeighborConditionalAdvertiseResult'],
                 connect_timer: int,
                 default_originate_routemap: str,
                 default_originate_routemap6: str,
                 description: str,
                 distribute_list_in: str,
                 distribute_list_in6: str,
                 distribute_list_in_vpnv4: str,
                 distribute_list_out: str,
                 distribute_list_out6: str,
                 distribute_list_out_vpnv4: str,
                 dont_capability_negotiate: str,
                 ebgp_enforce_multihop: str,
                 ebgp_multihop_ttl: int,
                 filter_list_in: str,
                 filter_list_in6: str,
                 filter_list_out: str,
                 filter_list_out6: str,
                 holdtime_timer: int,
                 interface: str,
                 ip: str,
                 keep_alive_timer: int,
                 link_down_failover: str,
                 local_as: int,
                 local_as_no_prepend: str,
                 local_as_replace_as: str,
                 maximum_prefix: int,
                 maximum_prefix6: int,
                 maximum_prefix_evpn: int,
                 maximum_prefix_threshold: int,
                 maximum_prefix_threshold6: int,
                 maximum_prefix_threshold_evpn: int,
                 maximum_prefix_threshold_vpnv4: int,
                 maximum_prefix_vpnv4: int,
                 maximum_prefix_warning_only: str,
                 maximum_prefix_warning_only6: str,
                 maximum_prefix_warning_only_evpn: str,
                 maximum_prefix_warning_only_vpnv4: str,
                 next_hop_self: str,
                 next_hop_self6: str,
                 next_hop_self_rr: str,
                 next_hop_self_rr6: str,
                 next_hop_self_vpnv4: str,
                 override_capability: str,
                 passive: str,
                 password: str,
                 prefix_list_in: str,
                 prefix_list_in6: str,
                 prefix_list_in_vpnv4: str,
                 prefix_list_out: str,
                 prefix_list_out6: str,
                 prefix_list_out_vpnv4: str,
                 remote_as: int,
                 remove_private_as: str,
                 remove_private_as6: str,
                 remove_private_as_evpn: str,
                 remove_private_as_vpnv4: str,
                 restart_time: int,
                 retain_stale_time: int,
                 route_map_in: str,
                 route_map_in6: str,
                 route_map_in_evpn: str,
                 route_map_in_vpnv4: str,
                 route_map_out: str,
                 route_map_out6: str,
                 route_map_out6_preferable: str,
                 route_map_out_evpn: str,
                 route_map_out_preferable: str,
                 route_map_out_vpnv4: str,
                 route_map_out_vpnv4_preferable: str,
                 route_reflector_client: str,
                 route_reflector_client6: str,
                 route_reflector_client_evpn: str,
                 route_reflector_client_vpnv4: str,
                 route_server_client: str,
                 route_server_client6: str,
                 route_server_client_evpn: str,
                 route_server_client_vpnv4: str,
                 send_community: str,
                 send_community6: str,
                 send_community_evpn: str,
                 send_community_vpnv4: str,
                 shutdown: str,
                 soft_reconfiguration: str,
                 soft_reconfiguration6: str,
                 soft_reconfiguration_evpn: str,
                 soft_reconfiguration_vpnv4: str,
                 stale_route: str,
                 strict_capability_match: str,
                 unsuppress_map: str,
                 unsuppress_map6: str,
                 update_source: str,
                 weight: int):
        pulumi.set(__self__, "activate", activate)
        pulumi.set(__self__, "activate6", activate6)
        pulumi.set(__self__, "activate_evpn", activate_evpn)
        pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        pulumi.set(__self__, "additional_path", additional_path)
        pulumi.set(__self__, "additional_path6", additional_path6)
        pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        pulumi.set(__self__, "allowas_in", allowas_in)
        pulumi.set(__self__, "allowas_in6", allowas_in6)
        pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        pulumi.set(__self__, "as_override", as_override)
        pulumi.set(__self__, "as_override6", as_override6)
        pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        pulumi.set(__self__, "bfd", bfd)
        pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        pulumi.set(__self__, "capability_orf", capability_orf)
        pulumi.set(__self__, "capability_orf6", capability_orf6)
        pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        pulumi.set(__self__, "conditional_advertise6s", conditional_advertise6s)
        pulumi.set(__self__, "conditional_advertises", conditional_advertises)
        pulumi.set(__self__, "connect_timer", connect_timer)
        pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        pulumi.set(__self__, "filter_list_in", filter_list_in)
        pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        pulumi.set(__self__, "filter_list_out", filter_list_out)
        pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        pulumi.set(__self__, "link_down_failover", link_down_failover)
        pulumi.set(__self__, "local_as", local_as)
        pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        pulumi.set(__self__, "override_capability", override_capability)
        pulumi.set(__self__, "passive", passive)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remove_private_as", remove_private_as)
        pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        pulumi.set(__self__, "restart_time", restart_time)
        pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        pulumi.set(__self__, "route_map_in", route_map_in)
        pulumi.set(__self__, "route_map_in6", route_map_in6)
        pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        pulumi.set(__self__, "route_map_out", route_map_out)
        pulumi.set(__self__, "route_map_out6", route_map_out6)
        pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        pulumi.set(__self__, "route_server_client", route_server_client)
        pulumi.set(__self__, "route_server_client6", route_server_client6)
        pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        pulumi.set(__self__, "send_community", send_community)
        pulumi.set(__self__, "send_community6", send_community6)
        pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        pulumi.set(__self__, "stale_route", stale_route)
        pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        pulumi.set(__self__, "update_source", update_source)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> str:
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def activate6(self) -> str:
        return pulumi.get(self, "activate6")

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> str:
        return pulumi.get(self, "activate_evpn")

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> str:
        return pulumi.get(self, "activate_vpnv4")

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> str:
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> str:
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> str:
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> int:
        return pulumi.get(self, "adv_additional_path")

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> int:
        return pulumi.get(self, "adv_additional_path6")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> int:
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> int:
        return pulumi.get(self, "advertisement_interval")

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> int:
        return pulumi.get(self, "allowas_in")

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> int:
        return pulumi.get(self, "allowas_in6")

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> str:
        return pulumi.get(self, "allowas_in_enable")

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> str:
        return pulumi.get(self, "allowas_in_enable6")

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> str:
        return pulumi.get(self, "allowas_in_enable_evpn")

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> str:
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> int:
        return pulumi.get(self, "allowas_in_evpn")

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> int:
        return pulumi.get(self, "allowas_in_vpnv4")

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> str:
        return pulumi.get(self, "as_override")

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> str:
        return pulumi.get(self, "as_override6")

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> str:
        return pulumi.get(self, "attribute_unchanged")

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> str:
        return pulumi.get(self, "attribute_unchanged6")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> str:
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> str:
        return pulumi.get(self, "capability_default_originate")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> str:
        return pulumi.get(self, "capability_default_originate6")

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> str:
        return pulumi.get(self, "capability_dynamic")

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> str:
        return pulumi.get(self, "capability_graceful_restart")

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> str:
        return pulumi.get(self, "capability_graceful_restart6")

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> str:
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> str:
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> str:
        return pulumi.get(self, "capability_orf")

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> str:
        return pulumi.get(self, "capability_orf6")

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> str:
        return pulumi.get(self, "capability_route_refresh")

    @property
    @pulumi.getter(name="conditionalAdvertise6s")
    def conditional_advertise6s(self) -> Sequence['outputs.GetRouterBgpNeighborConditionalAdvertise6Result']:
        return pulumi.get(self, "conditional_advertise6s")

    @property
    @pulumi.getter(name="conditionalAdvertises")
    def conditional_advertises(self) -> Sequence['outputs.GetRouterBgpNeighborConditionalAdvertiseResult']:
        return pulumi.get(self, "conditional_advertises")

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> int:
        return pulumi.get(self, "connect_timer")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> str:
        return pulumi.get(self, "default_originate_routemap")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> str:
        return pulumi.get(self, "default_originate_routemap6")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> str:
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> str:
        return pulumi.get(self, "distribute_list_in6")

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> str:
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> str:
        return pulumi.get(self, "distribute_list_out")

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> str:
        return pulumi.get(self, "distribute_list_out6")

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> str:
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> str:
        return pulumi.get(self, "dont_capability_negotiate")

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> str:
        return pulumi.get(self, "ebgp_enforce_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> int:
        return pulumi.get(self, "ebgp_multihop_ttl")

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> str:
        return pulumi.get(self, "filter_list_in")

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> str:
        return pulumi.get(self, "filter_list_in6")

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> str:
        return pulumi.get(self, "filter_list_out")

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> str:
        return pulumi.get(self, "filter_list_out6")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> int:
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> int:
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> str:
        return pulumi.get(self, "link_down_failover")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> int:
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> str:
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> str:
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> int:
        return pulumi.get(self, "maximum_prefix")

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> int:
        return pulumi.get(self, "maximum_prefix6")

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> int:
        return pulumi.get(self, "maximum_prefix_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> int:
        return pulumi.get(self, "maximum_prefix_threshold")

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> int:
        return pulumi.get(self, "maximum_prefix_threshold6")

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> int:
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> int:
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> int:
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> str:
        return pulumi.get(self, "maximum_prefix_warning_only")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> str:
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> str:
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> str:
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> str:
        return pulumi.get(self, "next_hop_self")

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> str:
        return pulumi.get(self, "next_hop_self6")

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> str:
        return pulumi.get(self, "next_hop_self_rr")

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> str:
        return pulumi.get(self, "next_hop_self_rr6")

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> str:
        return pulumi.get(self, "next_hop_self_vpnv4")

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> str:
        return pulumi.get(self, "override_capability")

    @property
    @pulumi.getter
    def passive(self) -> str:
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> str:
        return pulumi.get(self, "prefix_list_in")

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> str:
        return pulumi.get(self, "prefix_list_in6")

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> str:
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> str:
        return pulumi.get(self, "prefix_list_out")

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> str:
        return pulumi.get(self, "prefix_list_out6")

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> str:
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> int:
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> str:
        return pulumi.get(self, "remove_private_as")

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> str:
        return pulumi.get(self, "remove_private_as6")

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> str:
        return pulumi.get(self, "remove_private_as_evpn")

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> str:
        return pulumi.get(self, "remove_private_as_vpnv4")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> int:
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> int:
        return pulumi.get(self, "retain_stale_time")

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> str:
        return pulumi.get(self, "route_map_in")

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> str:
        return pulumi.get(self, "route_map_in6")

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> str:
        return pulumi.get(self, "route_map_in_evpn")

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> str:
        return pulumi.get(self, "route_map_in_vpnv4")

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> str:
        return pulumi.get(self, "route_map_out")

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> str:
        return pulumi.get(self, "route_map_out6")

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> str:
        return pulumi.get(self, "route_map_out6_preferable")

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> str:
        return pulumi.get(self, "route_map_out_evpn")

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> str:
        return pulumi.get(self, "route_map_out_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> str:
        return pulumi.get(self, "route_map_out_vpnv4")

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> str:
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> str:
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> str:
        return pulumi.get(self, "route_reflector_client6")

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> str:
        return pulumi.get(self, "route_reflector_client_evpn")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> str:
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> str:
        return pulumi.get(self, "route_server_client")

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> str:
        return pulumi.get(self, "route_server_client6")

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> str:
        return pulumi.get(self, "route_server_client_evpn")

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> str:
        return pulumi.get(self, "route_server_client_vpnv4")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> str:
        return pulumi.get(self, "send_community")

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> str:
        return pulumi.get(self, "send_community6")

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> str:
        return pulumi.get(self, "send_community_evpn")

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> str:
        return pulumi.get(self, "send_community_vpnv4")

    @property
    @pulumi.getter
    def shutdown(self) -> str:
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> str:
        return pulumi.get(self, "soft_reconfiguration")

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> str:
        return pulumi.get(self, "soft_reconfiguration6")

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> str:
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> str:
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> str:
        return pulumi.get(self, "stale_route")

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> str:
        return pulumi.get(self, "strict_capability_match")

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> str:
        return pulumi.get(self, "unsuppress_map")

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> str:
        return pulumi.get(self, "unsuppress_map6")

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> str:
        return pulumi.get(self, "update_source")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetRouterBgpNeighborConditionalAdvertise6Result(dict):
    def __init__(__self__, *,
                 advertise_routemap: str,
                 condition_routemap: str,
                 condition_type: str):
        pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        pulumi.set(__self__, "condition_routemap", condition_routemap)
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> str:
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> str:
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class GetRouterBgpNeighborConditionalAdvertiseResult(dict):
    def __init__(__self__, *,
                 advertise_routemap: str,
                 condition_routemap: str,
                 condition_type: str):
        pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        pulumi.set(__self__, "condition_routemap", condition_routemap)
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> str:
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> str:
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class GetRouterBgpNeighborGroupResult(dict):
    def __init__(__self__, *,
                 activate: str,
                 activate6: str,
                 activate_evpn: str,
                 activate_vpnv4: str,
                 additional_path: str,
                 additional_path6: str,
                 additional_path_vpnv4: str,
                 adv_additional_path: int,
                 adv_additional_path6: int,
                 adv_additional_path_vpnv4: int,
                 advertisement_interval: int,
                 allowas_in: int,
                 allowas_in6: int,
                 allowas_in_enable: str,
                 allowas_in_enable6: str,
                 allowas_in_enable_evpn: str,
                 allowas_in_enable_vpnv4: str,
                 allowas_in_evpn: int,
                 allowas_in_vpnv4: int,
                 as_override: str,
                 as_override6: str,
                 attribute_unchanged: str,
                 attribute_unchanged6: str,
                 attribute_unchanged_vpnv4: str,
                 bfd: str,
                 capability_default_originate: str,
                 capability_default_originate6: str,
                 capability_dynamic: str,
                 capability_graceful_restart: str,
                 capability_graceful_restart6: str,
                 capability_graceful_restart_evpn: str,
                 capability_graceful_restart_vpnv4: str,
                 capability_orf: str,
                 capability_orf6: str,
                 capability_route_refresh: str,
                 connect_timer: int,
                 default_originate_routemap: str,
                 default_originate_routemap6: str,
                 description: str,
                 distribute_list_in: str,
                 distribute_list_in6: str,
                 distribute_list_in_vpnv4: str,
                 distribute_list_out: str,
                 distribute_list_out6: str,
                 distribute_list_out_vpnv4: str,
                 dont_capability_negotiate: str,
                 ebgp_enforce_multihop: str,
                 ebgp_multihop_ttl: int,
                 filter_list_in: str,
                 filter_list_in6: str,
                 filter_list_out: str,
                 filter_list_out6: str,
                 holdtime_timer: int,
                 interface: str,
                 keep_alive_timer: int,
                 link_down_failover: str,
                 local_as: int,
                 local_as_no_prepend: str,
                 local_as_replace_as: str,
                 maximum_prefix: int,
                 maximum_prefix6: int,
                 maximum_prefix_evpn: int,
                 maximum_prefix_threshold: int,
                 maximum_prefix_threshold6: int,
                 maximum_prefix_threshold_evpn: int,
                 maximum_prefix_threshold_vpnv4: int,
                 maximum_prefix_vpnv4: int,
                 maximum_prefix_warning_only: str,
                 maximum_prefix_warning_only6: str,
                 maximum_prefix_warning_only_evpn: str,
                 maximum_prefix_warning_only_vpnv4: str,
                 name: str,
                 next_hop_self: str,
                 next_hop_self6: str,
                 next_hop_self_rr: str,
                 next_hop_self_rr6: str,
                 next_hop_self_vpnv4: str,
                 override_capability: str,
                 passive: str,
                 password: str,
                 prefix_list_in: str,
                 prefix_list_in6: str,
                 prefix_list_in_vpnv4: str,
                 prefix_list_out: str,
                 prefix_list_out6: str,
                 prefix_list_out_vpnv4: str,
                 remote_as: int,
                 remove_private_as: str,
                 remove_private_as6: str,
                 remove_private_as_evpn: str,
                 remove_private_as_vpnv4: str,
                 restart_time: int,
                 retain_stale_time: int,
                 route_map_in: str,
                 route_map_in6: str,
                 route_map_in_evpn: str,
                 route_map_in_vpnv4: str,
                 route_map_out: str,
                 route_map_out6: str,
                 route_map_out6_preferable: str,
                 route_map_out_evpn: str,
                 route_map_out_preferable: str,
                 route_map_out_vpnv4: str,
                 route_map_out_vpnv4_preferable: str,
                 route_reflector_client: str,
                 route_reflector_client6: str,
                 route_reflector_client_evpn: str,
                 route_reflector_client_vpnv4: str,
                 route_server_client: str,
                 route_server_client6: str,
                 route_server_client_evpn: str,
                 route_server_client_vpnv4: str,
                 send_community: str,
                 send_community6: str,
                 send_community_evpn: str,
                 send_community_vpnv4: str,
                 shutdown: str,
                 soft_reconfiguration: str,
                 soft_reconfiguration6: str,
                 soft_reconfiguration_evpn: str,
                 soft_reconfiguration_vpnv4: str,
                 stale_route: str,
                 strict_capability_match: str,
                 unsuppress_map: str,
                 unsuppress_map6: str,
                 update_source: str,
                 weight: int):
        pulumi.set(__self__, "activate", activate)
        pulumi.set(__self__, "activate6", activate6)
        pulumi.set(__self__, "activate_evpn", activate_evpn)
        pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        pulumi.set(__self__, "additional_path", additional_path)
        pulumi.set(__self__, "additional_path6", additional_path6)
        pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        pulumi.set(__self__, "allowas_in", allowas_in)
        pulumi.set(__self__, "allowas_in6", allowas_in6)
        pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        pulumi.set(__self__, "as_override", as_override)
        pulumi.set(__self__, "as_override6", as_override6)
        pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        pulumi.set(__self__, "bfd", bfd)
        pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        pulumi.set(__self__, "capability_orf", capability_orf)
        pulumi.set(__self__, "capability_orf6", capability_orf6)
        pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        pulumi.set(__self__, "connect_timer", connect_timer)
        pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        pulumi.set(__self__, "filter_list_in", filter_list_in)
        pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        pulumi.set(__self__, "filter_list_out", filter_list_out)
        pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        pulumi.set(__self__, "link_down_failover", link_down_failover)
        pulumi.set(__self__, "local_as", local_as)
        pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        pulumi.set(__self__, "override_capability", override_capability)
        pulumi.set(__self__, "passive", passive)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remove_private_as", remove_private_as)
        pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        pulumi.set(__self__, "restart_time", restart_time)
        pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        pulumi.set(__self__, "route_map_in", route_map_in)
        pulumi.set(__self__, "route_map_in6", route_map_in6)
        pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        pulumi.set(__self__, "route_map_out", route_map_out)
        pulumi.set(__self__, "route_map_out6", route_map_out6)
        pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        pulumi.set(__self__, "route_server_client", route_server_client)
        pulumi.set(__self__, "route_server_client6", route_server_client6)
        pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        pulumi.set(__self__, "send_community", send_community)
        pulumi.set(__self__, "send_community6", send_community6)
        pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        pulumi.set(__self__, "stale_route", stale_route)
        pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        pulumi.set(__self__, "update_source", update_source)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> str:
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def activate6(self) -> str:
        return pulumi.get(self, "activate6")

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> str:
        return pulumi.get(self, "activate_evpn")

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> str:
        return pulumi.get(self, "activate_vpnv4")

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> str:
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> str:
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> str:
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> int:
        return pulumi.get(self, "adv_additional_path")

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> int:
        return pulumi.get(self, "adv_additional_path6")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> int:
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> int:
        return pulumi.get(self, "advertisement_interval")

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> int:
        return pulumi.get(self, "allowas_in")

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> int:
        return pulumi.get(self, "allowas_in6")

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> str:
        return pulumi.get(self, "allowas_in_enable")

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> str:
        return pulumi.get(self, "allowas_in_enable6")

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> str:
        return pulumi.get(self, "allowas_in_enable_evpn")

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> str:
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> int:
        return pulumi.get(self, "allowas_in_evpn")

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> int:
        return pulumi.get(self, "allowas_in_vpnv4")

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> str:
        return pulumi.get(self, "as_override")

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> str:
        return pulumi.get(self, "as_override6")

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> str:
        return pulumi.get(self, "attribute_unchanged")

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> str:
        return pulumi.get(self, "attribute_unchanged6")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> str:
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> str:
        return pulumi.get(self, "capability_default_originate")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> str:
        return pulumi.get(self, "capability_default_originate6")

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> str:
        return pulumi.get(self, "capability_dynamic")

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> str:
        return pulumi.get(self, "capability_graceful_restart")

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> str:
        return pulumi.get(self, "capability_graceful_restart6")

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> str:
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> str:
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> str:
        return pulumi.get(self, "capability_orf")

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> str:
        return pulumi.get(self, "capability_orf6")

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> str:
        return pulumi.get(self, "capability_route_refresh")

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> int:
        return pulumi.get(self, "connect_timer")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> str:
        return pulumi.get(self, "default_originate_routemap")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> str:
        return pulumi.get(self, "default_originate_routemap6")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> str:
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> str:
        return pulumi.get(self, "distribute_list_in6")

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> str:
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> str:
        return pulumi.get(self, "distribute_list_out")

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> str:
        return pulumi.get(self, "distribute_list_out6")

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> str:
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> str:
        return pulumi.get(self, "dont_capability_negotiate")

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> str:
        return pulumi.get(self, "ebgp_enforce_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> int:
        return pulumi.get(self, "ebgp_multihop_ttl")

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> str:
        return pulumi.get(self, "filter_list_in")

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> str:
        return pulumi.get(self, "filter_list_in6")

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> str:
        return pulumi.get(self, "filter_list_out")

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> str:
        return pulumi.get(self, "filter_list_out6")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> int:
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> int:
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> str:
        return pulumi.get(self, "link_down_failover")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> int:
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> str:
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> str:
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> int:
        return pulumi.get(self, "maximum_prefix")

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> int:
        return pulumi.get(self, "maximum_prefix6")

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> int:
        return pulumi.get(self, "maximum_prefix_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> int:
        return pulumi.get(self, "maximum_prefix_threshold")

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> int:
        return pulumi.get(self, "maximum_prefix_threshold6")

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> int:
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> int:
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> int:
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> str:
        return pulumi.get(self, "maximum_prefix_warning_only")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> str:
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> str:
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> str:
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> str:
        return pulumi.get(self, "next_hop_self")

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> str:
        return pulumi.get(self, "next_hop_self6")

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> str:
        return pulumi.get(self, "next_hop_self_rr")

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> str:
        return pulumi.get(self, "next_hop_self_rr6")

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> str:
        return pulumi.get(self, "next_hop_self_vpnv4")

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> str:
        return pulumi.get(self, "override_capability")

    @property
    @pulumi.getter
    def passive(self) -> str:
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> str:
        return pulumi.get(self, "prefix_list_in")

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> str:
        return pulumi.get(self, "prefix_list_in6")

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> str:
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> str:
        return pulumi.get(self, "prefix_list_out")

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> str:
        return pulumi.get(self, "prefix_list_out6")

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> str:
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> int:
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> str:
        return pulumi.get(self, "remove_private_as")

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> str:
        return pulumi.get(self, "remove_private_as6")

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> str:
        return pulumi.get(self, "remove_private_as_evpn")

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> str:
        return pulumi.get(self, "remove_private_as_vpnv4")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> int:
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> int:
        return pulumi.get(self, "retain_stale_time")

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> str:
        return pulumi.get(self, "route_map_in")

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> str:
        return pulumi.get(self, "route_map_in6")

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> str:
        return pulumi.get(self, "route_map_in_evpn")

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> str:
        return pulumi.get(self, "route_map_in_vpnv4")

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> str:
        return pulumi.get(self, "route_map_out")

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> str:
        return pulumi.get(self, "route_map_out6")

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> str:
        return pulumi.get(self, "route_map_out6_preferable")

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> str:
        return pulumi.get(self, "route_map_out_evpn")

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> str:
        return pulumi.get(self, "route_map_out_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> str:
        return pulumi.get(self, "route_map_out_vpnv4")

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> str:
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> str:
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> str:
        return pulumi.get(self, "route_reflector_client6")

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> str:
        return pulumi.get(self, "route_reflector_client_evpn")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> str:
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> str:
        return pulumi.get(self, "route_server_client")

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> str:
        return pulumi.get(self, "route_server_client6")

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> str:
        return pulumi.get(self, "route_server_client_evpn")

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> str:
        return pulumi.get(self, "route_server_client_vpnv4")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> str:
        return pulumi.get(self, "send_community")

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> str:
        return pulumi.get(self, "send_community6")

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> str:
        return pulumi.get(self, "send_community_evpn")

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> str:
        return pulumi.get(self, "send_community_vpnv4")

    @property
    @pulumi.getter
    def shutdown(self) -> str:
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> str:
        return pulumi.get(self, "soft_reconfiguration")

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> str:
        return pulumi.get(self, "soft_reconfiguration6")

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> str:
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> str:
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> str:
        return pulumi.get(self, "stale_route")

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> str:
        return pulumi.get(self, "strict_capability_match")

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> str:
        return pulumi.get(self, "unsuppress_map")

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> str:
        return pulumi.get(self, "unsuppress_map6")

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> str:
        return pulumi.get(self, "update_source")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetRouterBgpNeighborRange6Result(dict):
    def __init__(__self__, *,
                 id: int,
                 max_neighbor_num: int,
                 neighbor_group: str,
                 prefix6: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        pulumi.set(__self__, "neighbor_group", neighbor_group)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> int:
        return pulumi.get(self, "max_neighbor_num")

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> str:
        return pulumi.get(self, "neighbor_group")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetRouterBgpNeighborRangeResult(dict):
    def __init__(__self__, *,
                 id: int,
                 max_neighbor_num: int,
                 neighbor_group: str,
                 prefix: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        pulumi.set(__self__, "neighbor_group", neighbor_group)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> int:
        return pulumi.get(self, "max_neighbor_num")

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> str:
        return pulumi.get(self, "neighbor_group")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRouterBgpNetwork6Result(dict):
    def __init__(__self__, *,
                 backdoor: str,
                 id: int,
                 network_import_check: str,
                 prefix6: str,
                 route_map: str):
        pulumi.set(__self__, "backdoor", backdoor)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "network_import_check", network_import_check)
        pulumi.set(__self__, "prefix6", prefix6)
        pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> str:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> str:
        return pulumi.get(self, "network_import_check")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class GetRouterBgpNetworkResult(dict):
    def __init__(__self__, *,
                 backdoor: str,
                 id: int,
                 network_import_check: str,
                 prefix: str,
                 route_map: str):
        pulumi.set(__self__, "backdoor", backdoor)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "network_import_check", network_import_check)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> str:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> str:
        return pulumi.get(self, "network_import_check")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class GetRouterBgpRedistribute6Result(dict):
    def __init__(__self__, *,
                 name: str,
                 route_map: str,
                 status: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "route_map", route_map)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterBgpRedistributeResult(dict):
    def __init__(__self__, *,
                 name: str,
                 route_map: str,
                 status: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "route_map", route_map)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterBgpVrf6Result(dict):
    def __init__(__self__, *,
                 leak_targets: Sequence['outputs.GetRouterBgpVrf6LeakTargetResult'],
                 vrf: str):
        pulumi.set(__self__, "leak_targets", leak_targets)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="leakTargets")
    def leak_targets(self) -> Sequence['outputs.GetRouterBgpVrf6LeakTargetResult']:
        return pulumi.get(self, "leak_targets")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetRouterBgpVrf6LeakTargetResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 route_map: str,
                 vrf: str):
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "route_map", route_map)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetRouterBgpVrfResult(dict):
    def __init__(__self__, *,
                 export_rts: Sequence['outputs.GetRouterBgpVrfExportRtResult'],
                 import_route_map: str,
                 import_rts: Sequence['outputs.GetRouterBgpVrfImportRtResult'],
                 leak_targets: Sequence['outputs.GetRouterBgpVrfLeakTargetResult'],
                 rd: str,
                 role: str,
                 vrf: str):
        pulumi.set(__self__, "export_rts", export_rts)
        pulumi.set(__self__, "import_route_map", import_route_map)
        pulumi.set(__self__, "import_rts", import_rts)
        pulumi.set(__self__, "leak_targets", leak_targets)
        pulumi.set(__self__, "rd", rd)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="exportRts")
    def export_rts(self) -> Sequence['outputs.GetRouterBgpVrfExportRtResult']:
        return pulumi.get(self, "export_rts")

    @property
    @pulumi.getter(name="importRouteMap")
    def import_route_map(self) -> str:
        return pulumi.get(self, "import_route_map")

    @property
    @pulumi.getter(name="importRts")
    def import_rts(self) -> Sequence['outputs.GetRouterBgpVrfImportRtResult']:
        return pulumi.get(self, "import_rts")

    @property
    @pulumi.getter(name="leakTargets")
    def leak_targets(self) -> Sequence['outputs.GetRouterBgpVrfLeakTargetResult']:
        return pulumi.get(self, "leak_targets")

    @property
    @pulumi.getter
    def rd(self) -> str:
        return pulumi.get(self, "rd")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetRouterBgpVrfExportRtResult(dict):
    def __init__(__self__, *,
                 route_target: str):
        pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> str:
        return pulumi.get(self, "route_target")


@pulumi.output_type
class GetRouterBgpVrfImportRtResult(dict):
    def __init__(__self__, *,
                 route_target: str):
        pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> str:
        return pulumi.get(self, "route_target")


@pulumi.output_type
class GetRouterBgpVrfLeak6Result(dict):
    def __init__(__self__, *,
                 targets: Sequence['outputs.GetRouterBgpVrfLeak6TargetResult'],
                 vrf: str):
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetRouterBgpVrfLeak6TargetResult']:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetRouterBgpVrfLeak6TargetResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 route_map: str,
                 vrf: str):
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "route_map", route_map)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetRouterBgpVrfLeakResult(dict):
    def __init__(__self__, *,
                 targets: Sequence['outputs.GetRouterBgpVrfLeakTargetResult'],
                 vrf: str):
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetRouterBgpVrfLeakTargetResult']:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetRouterBgpVrfLeakTargetResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 route_map: str,
                 vrf: str):
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "route_map", route_map)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetRouterCommunityListRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 id: int,
                 match: str,
                 regexp: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match", match)
        pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def match(self) -> str:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")


@pulumi.output_type
class GetRouterIsisIsisInterfaceResult(dict):
    def __init__(__self__, *,
                 auth_keychain_l1: str,
                 auth_keychain_l2: str,
                 auth_mode_l1: str,
                 auth_mode_l2: str,
                 auth_password_l1: str,
                 auth_password_l2: str,
                 auth_send_only_l1: str,
                 auth_send_only_l2: str,
                 circuit_type: str,
                 csnp_interval_l1: int,
                 csnp_interval_l2: int,
                 hello_interval_l1: int,
                 hello_interval_l2: int,
                 hello_multiplier_l1: int,
                 hello_multiplier_l2: int,
                 hello_padding: str,
                 lsp_interval: int,
                 lsp_retransmit_interval: int,
                 mesh_group: str,
                 mesh_group_id: int,
                 metric_l1: int,
                 metric_l2: int,
                 name: str,
                 network_type: str,
                 priority_l1: int,
                 priority_l2: int,
                 status: str,
                 status6: str,
                 wide_metric_l1: int,
                 wide_metric_l2: int):
        pulumi.set(__self__, "auth_keychain_l1", auth_keychain_l1)
        pulumi.set(__self__, "auth_keychain_l2", auth_keychain_l2)
        pulumi.set(__self__, "auth_mode_l1", auth_mode_l1)
        pulumi.set(__self__, "auth_mode_l2", auth_mode_l2)
        pulumi.set(__self__, "auth_password_l1", auth_password_l1)
        pulumi.set(__self__, "auth_password_l2", auth_password_l2)
        pulumi.set(__self__, "auth_send_only_l1", auth_send_only_l1)
        pulumi.set(__self__, "auth_send_only_l2", auth_send_only_l2)
        pulumi.set(__self__, "circuit_type", circuit_type)
        pulumi.set(__self__, "csnp_interval_l1", csnp_interval_l1)
        pulumi.set(__self__, "csnp_interval_l2", csnp_interval_l2)
        pulumi.set(__self__, "hello_interval_l1", hello_interval_l1)
        pulumi.set(__self__, "hello_interval_l2", hello_interval_l2)
        pulumi.set(__self__, "hello_multiplier_l1", hello_multiplier_l1)
        pulumi.set(__self__, "hello_multiplier_l2", hello_multiplier_l2)
        pulumi.set(__self__, "hello_padding", hello_padding)
        pulumi.set(__self__, "lsp_interval", lsp_interval)
        pulumi.set(__self__, "lsp_retransmit_interval", lsp_retransmit_interval)
        pulumi.set(__self__, "mesh_group", mesh_group)
        pulumi.set(__self__, "mesh_group_id", mesh_group_id)
        pulumi.set(__self__, "metric_l1", metric_l1)
        pulumi.set(__self__, "metric_l2", metric_l2)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "priority_l1", priority_l1)
        pulumi.set(__self__, "priority_l2", priority_l2)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status6", status6)
        pulumi.set(__self__, "wide_metric_l1", wide_metric_l1)
        pulumi.set(__self__, "wide_metric_l2", wide_metric_l2)

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> str:
        return pulumi.get(self, "auth_keychain_l1")

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> str:
        return pulumi.get(self, "auth_keychain_l2")

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> str:
        return pulumi.get(self, "auth_mode_l1")

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> str:
        return pulumi.get(self, "auth_mode_l2")

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> str:
        return pulumi.get(self, "auth_password_l1")

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> str:
        return pulumi.get(self, "auth_password_l2")

    @property
    @pulumi.getter(name="authSendOnlyL1")
    def auth_send_only_l1(self) -> str:
        return pulumi.get(self, "auth_send_only_l1")

    @property
    @pulumi.getter(name="authSendOnlyL2")
    def auth_send_only_l2(self) -> str:
        return pulumi.get(self, "auth_send_only_l2")

    @property
    @pulumi.getter(name="circuitType")
    def circuit_type(self) -> str:
        return pulumi.get(self, "circuit_type")

    @property
    @pulumi.getter(name="csnpIntervalL1")
    def csnp_interval_l1(self) -> int:
        return pulumi.get(self, "csnp_interval_l1")

    @property
    @pulumi.getter(name="csnpIntervalL2")
    def csnp_interval_l2(self) -> int:
        return pulumi.get(self, "csnp_interval_l2")

    @property
    @pulumi.getter(name="helloIntervalL1")
    def hello_interval_l1(self) -> int:
        return pulumi.get(self, "hello_interval_l1")

    @property
    @pulumi.getter(name="helloIntervalL2")
    def hello_interval_l2(self) -> int:
        return pulumi.get(self, "hello_interval_l2")

    @property
    @pulumi.getter(name="helloMultiplierL1")
    def hello_multiplier_l1(self) -> int:
        return pulumi.get(self, "hello_multiplier_l1")

    @property
    @pulumi.getter(name="helloMultiplierL2")
    def hello_multiplier_l2(self) -> int:
        return pulumi.get(self, "hello_multiplier_l2")

    @property
    @pulumi.getter(name="helloPadding")
    def hello_padding(self) -> str:
        return pulumi.get(self, "hello_padding")

    @property
    @pulumi.getter(name="lspInterval")
    def lsp_interval(self) -> int:
        return pulumi.get(self, "lsp_interval")

    @property
    @pulumi.getter(name="lspRetransmitInterval")
    def lsp_retransmit_interval(self) -> int:
        return pulumi.get(self, "lsp_retransmit_interval")

    @property
    @pulumi.getter(name="meshGroup")
    def mesh_group(self) -> str:
        return pulumi.get(self, "mesh_group")

    @property
    @pulumi.getter(name="meshGroupId")
    def mesh_group_id(self) -> int:
        return pulumi.get(self, "mesh_group_id")

    @property
    @pulumi.getter(name="metricL1")
    def metric_l1(self) -> int:
        return pulumi.get(self, "metric_l1")

    @property
    @pulumi.getter(name="metricL2")
    def metric_l2(self) -> int:
        return pulumi.get(self, "metric_l2")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="priorityL1")
    def priority_l1(self) -> int:
        return pulumi.get(self, "priority_l1")

    @property
    @pulumi.getter(name="priorityL2")
    def priority_l2(self) -> int:
        return pulumi.get(self, "priority_l2")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def status6(self) -> str:
        return pulumi.get(self, "status6")

    @property
    @pulumi.getter(name="wideMetricL1")
    def wide_metric_l1(self) -> int:
        return pulumi.get(self, "wide_metric_l1")

    @property
    @pulumi.getter(name="wideMetricL2")
    def wide_metric_l2(self) -> int:
        return pulumi.get(self, "wide_metric_l2")


@pulumi.output_type
class GetRouterIsisIsisNetResult(dict):
    def __init__(__self__, *,
                 id: int,
                 net: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "net", net)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def net(self) -> str:
        return pulumi.get(self, "net")


@pulumi.output_type
class GetRouterIsisRedistribute6Result(dict):
    def __init__(__self__, *,
                 level: str,
                 metric: int,
                 metric_type: str,
                 protocol: str,
                 routemap: str,
                 status: str):
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def metric(self) -> int:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterIsisRedistributeResult(dict):
    def __init__(__self__, *,
                 level: str,
                 metric: int,
                 metric_type: str,
                 protocol: str,
                 routemap: str,
                 status: str):
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def metric(self) -> int:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterIsisSummaryAddress6Result(dict):
    def __init__(__self__, *,
                 id: int,
                 level: str,
                 prefix6: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetRouterIsisSummaryAddressResult(dict):
    def __init__(__self__, *,
                 id: int,
                 level: str,
                 prefix: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRouterKeyChainKeyResult(dict):
    def __init__(__self__, *,
                 accept_lifetime: str,
                 algorithm: str,
                 id: int,
                 key_string: str,
                 send_lifetime: str):
        pulumi.set(__self__, "accept_lifetime", accept_lifetime)
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_string", key_string)
        pulumi.set(__self__, "send_lifetime", send_lifetime)

    @property
    @pulumi.getter(name="acceptLifetime")
    def accept_lifetime(self) -> str:
        return pulumi.get(self, "accept_lifetime")

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> str:
        return pulumi.get(self, "key_string")

    @property
    @pulumi.getter(name="sendLifetime")
    def send_lifetime(self) -> str:
        return pulumi.get(self, "send_lifetime")


@pulumi.output_type
class GetRouterMulticast6InterfaceResult(dict):
    def __init__(__self__, *,
                 hello_holdtime: int,
                 hello_interval: int,
                 name: str):
        pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> int:
        return pulumi.get(self, "hello_holdtime")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterMulticast6PimSmGlobalResult(dict):
    def __init__(__self__, *,
                 register_rate_limit: int,
                 rp_addresses: Sequence['outputs.GetRouterMulticast6PimSmGlobalRpAddressResult']):
        pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        pulumi.set(__self__, "rp_addresses", rp_addresses)

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> int:
        return pulumi.get(self, "register_rate_limit")

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Sequence['outputs.GetRouterMulticast6PimSmGlobalRpAddressResult']:
        return pulumi.get(self, "rp_addresses")


@pulumi.output_type
class GetRouterMulticast6PimSmGlobalRpAddressResult(dict):
    def __init__(__self__, *,
                 id: int,
                 ip6_address: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> str:
        return pulumi.get(self, "ip6_address")


@pulumi.output_type
class GetRouterMulticastFlowFlowResult(dict):
    def __init__(__self__, *,
                 group_addr: str,
                 id: int,
                 source_addr: str):
        pulumi.set(__self__, "group_addr", group_addr)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_addr", source_addr)

    @property
    @pulumi.getter(name="groupAddr")
    def group_addr(self) -> str:
        return pulumi.get(self, "group_addr")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sourceAddr")
    def source_addr(self) -> str:
        return pulumi.get(self, "source_addr")


@pulumi.output_type
class GetRouterMulticastInterfaceResult(dict):
    def __init__(__self__, *,
                 bfd: str,
                 cisco_exclude_genid: str,
                 dr_priority: int,
                 hello_holdtime: int,
                 hello_interval: int,
                 igmps: Sequence['outputs.GetRouterMulticastInterfaceIgmpResult'],
                 join_groups: Sequence['outputs.GetRouterMulticastInterfaceJoinGroupResult'],
                 multicast_flow: str,
                 name: str,
                 neighbour_filter: str,
                 passive: str,
                 pim_mode: str,
                 propagation_delay: int,
                 rp_candidate: str,
                 rp_candidate_group: str,
                 rp_candidate_interval: int,
                 rp_candidate_priority: int,
                 rpf_nbr_fail_back: str,
                 rpf_nbr_fail_back_filter: str,
                 state_refresh_interval: int,
                 static_group: str,
                 ttl_threshold: int):
        pulumi.set(__self__, "bfd", bfd)
        pulumi.set(__self__, "cisco_exclude_genid", cisco_exclude_genid)
        pulumi.set(__self__, "dr_priority", dr_priority)
        pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "igmps", igmps)
        pulumi.set(__self__, "join_groups", join_groups)
        pulumi.set(__self__, "multicast_flow", multicast_flow)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "neighbour_filter", neighbour_filter)
        pulumi.set(__self__, "passive", passive)
        pulumi.set(__self__, "pim_mode", pim_mode)
        pulumi.set(__self__, "propagation_delay", propagation_delay)
        pulumi.set(__self__, "rp_candidate", rp_candidate)
        pulumi.set(__self__, "rp_candidate_group", rp_candidate_group)
        pulumi.set(__self__, "rp_candidate_interval", rp_candidate_interval)
        pulumi.set(__self__, "rp_candidate_priority", rp_candidate_priority)
        pulumi.set(__self__, "rpf_nbr_fail_back", rpf_nbr_fail_back)
        pulumi.set(__self__, "rpf_nbr_fail_back_filter", rpf_nbr_fail_back_filter)
        pulumi.set(__self__, "state_refresh_interval", state_refresh_interval)
        pulumi.set(__self__, "static_group", static_group)
        pulumi.set(__self__, "ttl_threshold", ttl_threshold)

    @property
    @pulumi.getter
    def bfd(self) -> str:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="ciscoExcludeGenid")
    def cisco_exclude_genid(self) -> str:
        return pulumi.get(self, "cisco_exclude_genid")

    @property
    @pulumi.getter(name="drPriority")
    def dr_priority(self) -> int:
        return pulumi.get(self, "dr_priority")

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> int:
        return pulumi.get(self, "hello_holdtime")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def igmps(self) -> Sequence['outputs.GetRouterMulticastInterfaceIgmpResult']:
        return pulumi.get(self, "igmps")

    @property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Sequence['outputs.GetRouterMulticastInterfaceJoinGroupResult']:
        return pulumi.get(self, "join_groups")

    @property
    @pulumi.getter(name="multicastFlow")
    def multicast_flow(self) -> str:
        return pulumi.get(self, "multicast_flow")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="neighbourFilter")
    def neighbour_filter(self) -> str:
        return pulumi.get(self, "neighbour_filter")

    @property
    @pulumi.getter
    def passive(self) -> str:
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter(name="pimMode")
    def pim_mode(self) -> str:
        return pulumi.get(self, "pim_mode")

    @property
    @pulumi.getter(name="propagationDelay")
    def propagation_delay(self) -> int:
        return pulumi.get(self, "propagation_delay")

    @property
    @pulumi.getter(name="rpCandidate")
    def rp_candidate(self) -> str:
        return pulumi.get(self, "rp_candidate")

    @property
    @pulumi.getter(name="rpCandidateGroup")
    def rp_candidate_group(self) -> str:
        return pulumi.get(self, "rp_candidate_group")

    @property
    @pulumi.getter(name="rpCandidateInterval")
    def rp_candidate_interval(self) -> int:
        return pulumi.get(self, "rp_candidate_interval")

    @property
    @pulumi.getter(name="rpCandidatePriority")
    def rp_candidate_priority(self) -> int:
        return pulumi.get(self, "rp_candidate_priority")

    @property
    @pulumi.getter(name="rpfNbrFailBack")
    def rpf_nbr_fail_back(self) -> str:
        return pulumi.get(self, "rpf_nbr_fail_back")

    @property
    @pulumi.getter(name="rpfNbrFailBackFilter")
    def rpf_nbr_fail_back_filter(self) -> str:
        return pulumi.get(self, "rpf_nbr_fail_back_filter")

    @property
    @pulumi.getter(name="stateRefreshInterval")
    def state_refresh_interval(self) -> int:
        return pulumi.get(self, "state_refresh_interval")

    @property
    @pulumi.getter(name="staticGroup")
    def static_group(self) -> str:
        return pulumi.get(self, "static_group")

    @property
    @pulumi.getter(name="ttlThreshold")
    def ttl_threshold(self) -> int:
        return pulumi.get(self, "ttl_threshold")


@pulumi.output_type
class GetRouterMulticastInterfaceIgmpResult(dict):
    def __init__(__self__, *,
                 access_group: str,
                 immediate_leave_group: str,
                 last_member_query_count: int,
                 last_member_query_interval: int,
                 query_interval: int,
                 query_max_response_time: int,
                 query_timeout: int,
                 router_alert_check: str,
                 version: str):
        pulumi.set(__self__, "access_group", access_group)
        pulumi.set(__self__, "immediate_leave_group", immediate_leave_group)
        pulumi.set(__self__, "last_member_query_count", last_member_query_count)
        pulumi.set(__self__, "last_member_query_interval", last_member_query_interval)
        pulumi.set(__self__, "query_interval", query_interval)
        pulumi.set(__self__, "query_max_response_time", query_max_response_time)
        pulumi.set(__self__, "query_timeout", query_timeout)
        pulumi.set(__self__, "router_alert_check", router_alert_check)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessGroup")
    def access_group(self) -> str:
        return pulumi.get(self, "access_group")

    @property
    @pulumi.getter(name="immediateLeaveGroup")
    def immediate_leave_group(self) -> str:
        return pulumi.get(self, "immediate_leave_group")

    @property
    @pulumi.getter(name="lastMemberQueryCount")
    def last_member_query_count(self) -> int:
        return pulumi.get(self, "last_member_query_count")

    @property
    @pulumi.getter(name="lastMemberQueryInterval")
    def last_member_query_interval(self) -> int:
        return pulumi.get(self, "last_member_query_interval")

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> int:
        return pulumi.get(self, "query_interval")

    @property
    @pulumi.getter(name="queryMaxResponseTime")
    def query_max_response_time(self) -> int:
        return pulumi.get(self, "query_max_response_time")

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> int:
        return pulumi.get(self, "query_timeout")

    @property
    @pulumi.getter(name="routerAlertCheck")
    def router_alert_check(self) -> str:
        return pulumi.get(self, "router_alert_check")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetRouterMulticastInterfaceJoinGroupResult(dict):
    def __init__(__self__, *,
                 address: str):
        pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")


@pulumi.output_type
class GetRouterMulticastPimSmGlobalResult(dict):
    def __init__(__self__, *,
                 accept_register_list: str,
                 accept_source_list: str,
                 bsr_allow_quick_refresh: str,
                 bsr_candidate: str,
                 bsr_hash: int,
                 bsr_interface: str,
                 bsr_priority: int,
                 cisco_crp_prefix: str,
                 cisco_ignore_rp_set_priority: str,
                 cisco_register_checksum: str,
                 cisco_register_checksum_group: str,
                 join_prune_holdtime: int,
                 message_interval: int,
                 null_register_retries: int,
                 pim_use_sdwan: str,
                 register_rate_limit: int,
                 register_rp_reachability: str,
                 register_source: str,
                 register_source_interface: str,
                 register_source_ip: str,
                 register_supression: int,
                 rp_addresses: Sequence['outputs.GetRouterMulticastPimSmGlobalRpAddressResult'],
                 rp_register_keepalive: int,
                 spt_threshold: str,
                 spt_threshold_group: str,
                 ssm: str,
                 ssm_range: str):
        pulumi.set(__self__, "accept_register_list", accept_register_list)
        pulumi.set(__self__, "accept_source_list", accept_source_list)
        pulumi.set(__self__, "bsr_allow_quick_refresh", bsr_allow_quick_refresh)
        pulumi.set(__self__, "bsr_candidate", bsr_candidate)
        pulumi.set(__self__, "bsr_hash", bsr_hash)
        pulumi.set(__self__, "bsr_interface", bsr_interface)
        pulumi.set(__self__, "bsr_priority", bsr_priority)
        pulumi.set(__self__, "cisco_crp_prefix", cisco_crp_prefix)
        pulumi.set(__self__, "cisco_ignore_rp_set_priority", cisco_ignore_rp_set_priority)
        pulumi.set(__self__, "cisco_register_checksum", cisco_register_checksum)
        pulumi.set(__self__, "cisco_register_checksum_group", cisco_register_checksum_group)
        pulumi.set(__self__, "join_prune_holdtime", join_prune_holdtime)
        pulumi.set(__self__, "message_interval", message_interval)
        pulumi.set(__self__, "null_register_retries", null_register_retries)
        pulumi.set(__self__, "pim_use_sdwan", pim_use_sdwan)
        pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        pulumi.set(__self__, "register_rp_reachability", register_rp_reachability)
        pulumi.set(__self__, "register_source", register_source)
        pulumi.set(__self__, "register_source_interface", register_source_interface)
        pulumi.set(__self__, "register_source_ip", register_source_ip)
        pulumi.set(__self__, "register_supression", register_supression)
        pulumi.set(__self__, "rp_addresses", rp_addresses)
        pulumi.set(__self__, "rp_register_keepalive", rp_register_keepalive)
        pulumi.set(__self__, "spt_threshold", spt_threshold)
        pulumi.set(__self__, "spt_threshold_group", spt_threshold_group)
        pulumi.set(__self__, "ssm", ssm)
        pulumi.set(__self__, "ssm_range", ssm_range)

    @property
    @pulumi.getter(name="acceptRegisterList")
    def accept_register_list(self) -> str:
        return pulumi.get(self, "accept_register_list")

    @property
    @pulumi.getter(name="acceptSourceList")
    def accept_source_list(self) -> str:
        return pulumi.get(self, "accept_source_list")

    @property
    @pulumi.getter(name="bsrAllowQuickRefresh")
    def bsr_allow_quick_refresh(self) -> str:
        return pulumi.get(self, "bsr_allow_quick_refresh")

    @property
    @pulumi.getter(name="bsrCandidate")
    def bsr_candidate(self) -> str:
        return pulumi.get(self, "bsr_candidate")

    @property
    @pulumi.getter(name="bsrHash")
    def bsr_hash(self) -> int:
        return pulumi.get(self, "bsr_hash")

    @property
    @pulumi.getter(name="bsrInterface")
    def bsr_interface(self) -> str:
        return pulumi.get(self, "bsr_interface")

    @property
    @pulumi.getter(name="bsrPriority")
    def bsr_priority(self) -> int:
        return pulumi.get(self, "bsr_priority")

    @property
    @pulumi.getter(name="ciscoCrpPrefix")
    def cisco_crp_prefix(self) -> str:
        return pulumi.get(self, "cisco_crp_prefix")

    @property
    @pulumi.getter(name="ciscoIgnoreRpSetPriority")
    def cisco_ignore_rp_set_priority(self) -> str:
        return pulumi.get(self, "cisco_ignore_rp_set_priority")

    @property
    @pulumi.getter(name="ciscoRegisterChecksum")
    def cisco_register_checksum(self) -> str:
        return pulumi.get(self, "cisco_register_checksum")

    @property
    @pulumi.getter(name="ciscoRegisterChecksumGroup")
    def cisco_register_checksum_group(self) -> str:
        return pulumi.get(self, "cisco_register_checksum_group")

    @property
    @pulumi.getter(name="joinPruneHoldtime")
    def join_prune_holdtime(self) -> int:
        return pulumi.get(self, "join_prune_holdtime")

    @property
    @pulumi.getter(name="messageInterval")
    def message_interval(self) -> int:
        return pulumi.get(self, "message_interval")

    @property
    @pulumi.getter(name="nullRegisterRetries")
    def null_register_retries(self) -> int:
        return pulumi.get(self, "null_register_retries")

    @property
    @pulumi.getter(name="pimUseSdwan")
    def pim_use_sdwan(self) -> str:
        return pulumi.get(self, "pim_use_sdwan")

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> int:
        return pulumi.get(self, "register_rate_limit")

    @property
    @pulumi.getter(name="registerRpReachability")
    def register_rp_reachability(self) -> str:
        return pulumi.get(self, "register_rp_reachability")

    @property
    @pulumi.getter(name="registerSource")
    def register_source(self) -> str:
        return pulumi.get(self, "register_source")

    @property
    @pulumi.getter(name="registerSourceInterface")
    def register_source_interface(self) -> str:
        return pulumi.get(self, "register_source_interface")

    @property
    @pulumi.getter(name="registerSourceIp")
    def register_source_ip(self) -> str:
        return pulumi.get(self, "register_source_ip")

    @property
    @pulumi.getter(name="registerSupression")
    def register_supression(self) -> int:
        return pulumi.get(self, "register_supression")

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Sequence['outputs.GetRouterMulticastPimSmGlobalRpAddressResult']:
        return pulumi.get(self, "rp_addresses")

    @property
    @pulumi.getter(name="rpRegisterKeepalive")
    def rp_register_keepalive(self) -> int:
        return pulumi.get(self, "rp_register_keepalive")

    @property
    @pulumi.getter(name="sptThreshold")
    def spt_threshold(self) -> str:
        return pulumi.get(self, "spt_threshold")

    @property
    @pulumi.getter(name="sptThresholdGroup")
    def spt_threshold_group(self) -> str:
        return pulumi.get(self, "spt_threshold_group")

    @property
    @pulumi.getter
    def ssm(self) -> str:
        return pulumi.get(self, "ssm")

    @property
    @pulumi.getter(name="ssmRange")
    def ssm_range(self) -> str:
        return pulumi.get(self, "ssm_range")


@pulumi.output_type
class GetRouterMulticastPimSmGlobalRpAddressResult(dict):
    def __init__(__self__, *,
                 group: str,
                 id: int,
                 ip_address: str):
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetRouterOspf6AreaResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 default_cost: int,
                 id: str,
                 ipsec_auth_alg: str,
                 ipsec_enc_alg: str,
                 ipsec_keys: Sequence['outputs.GetRouterOspf6AreaIpsecKeyResult'],
                 key_rollover_interval: int,
                 nssa_default_information_originate: str,
                 nssa_default_information_originate_metric: int,
                 nssa_default_information_originate_metric_type: str,
                 nssa_redistribution: str,
                 nssa_translator_role: str,
                 ranges: Sequence['outputs.GetRouterOspf6AreaRangeResult'],
                 stub_type: str,
                 type: str,
                 virtual_links: Sequence['outputs.GetRouterOspf6AreaVirtualLinkResult']):
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "default_cost", default_cost)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        pulumi.set(__self__, "ranges", ranges)
        pulumi.set(__self__, "stub_type", stub_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> int:
        return pulumi.get(self, "default_cost")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> str:
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> str:
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Sequence['outputs.GetRouterOspf6AreaIpsecKeyResult']:
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> int:
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> str:
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> int:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> str:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> str:
        return pulumi.get(self, "nssa_redistribution")

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> str:
        return pulumi.get(self, "nssa_translator_role")

    @property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetRouterOspf6AreaRangeResult']:
        return pulumi.get(self, "ranges")

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> str:
        return pulumi.get(self, "stub_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Sequence['outputs.GetRouterOspf6AreaVirtualLinkResult']:
        return pulumi.get(self, "virtual_links")


@pulumi.output_type
class GetRouterOspf6AreaIpsecKeyResult(dict):
    def __init__(__self__, *,
                 auth_key: str,
                 enc_key: str,
                 spi: int):
        pulumi.set(__self__, "auth_key", auth_key)
        pulumi.set(__self__, "enc_key", enc_key)
        pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> str:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> str:
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> int:
        return pulumi.get(self, "spi")


@pulumi.output_type
class GetRouterOspf6AreaRangeResult(dict):
    def __init__(__self__, *,
                 advertise: str,
                 id: int,
                 prefix6: str):
        pulumi.set(__self__, "advertise", advertise)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def advertise(self) -> str:
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetRouterOspf6AreaVirtualLinkResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 dead_interval: int,
                 hello_interval: int,
                 ipsec_auth_alg: str,
                 ipsec_enc_alg: str,
                 ipsec_keys: Sequence['outputs.GetRouterOspf6AreaVirtualLinkIpsecKeyResult'],
                 key_rollover_interval: int,
                 name: str,
                 peer: str,
                 retransmit_interval: int,
                 transmit_delay: int):
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer", peer)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> int:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> str:
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> str:
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Sequence['outputs.GetRouterOspf6AreaVirtualLinkIpsecKeyResult']:
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> int:
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peer(self) -> str:
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> int:
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> int:
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class GetRouterOspf6AreaVirtualLinkIpsecKeyResult(dict):
    def __init__(__self__, *,
                 auth_key: str,
                 enc_key: str,
                 spi: int):
        pulumi.set(__self__, "auth_key", auth_key)
        pulumi.set(__self__, "enc_key", enc_key)
        pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> str:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> str:
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> int:
        return pulumi.get(self, "spi")


@pulumi.output_type
class GetRouterOspf6Ospf6InterfaceResult(dict):
    def __init__(__self__, *,
                 area_id: str,
                 authentication: str,
                 bfd: str,
                 cost: int,
                 dead_interval: int,
                 hello_interval: int,
                 interface: str,
                 ipsec_auth_alg: str,
                 ipsec_enc_alg: str,
                 ipsec_keys: Sequence['outputs.GetRouterOspf6Ospf6InterfaceIpsecKeyResult'],
                 key_rollover_interval: int,
                 mtu: int,
                 mtu_ignore: str,
                 name: str,
                 neighbors: Sequence['outputs.GetRouterOspf6Ospf6InterfaceNeighborResult'],
                 network_type: str,
                 priority: int,
                 retransmit_interval: int,
                 status: str,
                 transmit_delay: int):
        pulumi.set(__self__, "area_id", area_id)
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "bfd", bfd)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "neighbors", neighbors)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> str:
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter
    def authentication(self) -> str:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def cost(self) -> int:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> int:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> str:
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> str:
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Sequence['outputs.GetRouterOspf6Ospf6InterfaceIpsecKeyResult']:
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> int:
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> str:
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def neighbors(self) -> Sequence['outputs.GetRouterOspf6Ospf6InterfaceNeighborResult']:
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> int:
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> int:
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class GetRouterOspf6Ospf6InterfaceIpsecKeyResult(dict):
    def __init__(__self__, *,
                 auth_key: str,
                 enc_key: str,
                 spi: int):
        pulumi.set(__self__, "auth_key", auth_key)
        pulumi.set(__self__, "enc_key", enc_key)
        pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> str:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> str:
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> int:
        return pulumi.get(self, "spi")


@pulumi.output_type
class GetRouterOspf6Ospf6InterfaceNeighborResult(dict):
    def __init__(__self__, *,
                 cost: int,
                 ip6: str,
                 poll_interval: int,
                 priority: int):
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "ip6", ip6)
        pulumi.set(__self__, "poll_interval", poll_interval)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> int:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> int:
        return pulumi.get(self, "poll_interval")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetRouterOspf6PassiveInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterOspf6RedistributeResult(dict):
    def __init__(__self__, *,
                 metric: int,
                 metric_type: str,
                 name: str,
                 routemap: str,
                 status: str):
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> int:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterOspf6SummaryAddressResult(dict):
    def __init__(__self__, *,
                 advertise: str,
                 id: int,
                 prefix6: str,
                 tag: int):
        pulumi.set(__self__, "advertise", advertise)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> str:
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter
    def tag(self) -> int:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetRouterOspfAreaResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 comments: str,
                 default_cost: int,
                 filter_lists: Sequence['outputs.GetRouterOspfAreaFilterListResult'],
                 id: str,
                 nssa_default_information_originate: str,
                 nssa_default_information_originate_metric: int,
                 nssa_default_information_originate_metric_type: str,
                 nssa_redistribution: str,
                 nssa_translator_role: str,
                 ranges: Sequence['outputs.GetRouterOspfAreaRangeResult'],
                 shortcut: str,
                 stub_type: str,
                 type: str,
                 virtual_links: Sequence['outputs.GetRouterOspfAreaVirtualLinkResult']):
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "default_cost", default_cost)
        pulumi.set(__self__, "filter_lists", filter_lists)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        pulumi.set(__self__, "ranges", ranges)
        pulumi.set(__self__, "shortcut", shortcut)
        pulumi.set(__self__, "stub_type", stub_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> int:
        return pulumi.get(self, "default_cost")

    @property
    @pulumi.getter(name="filterLists")
    def filter_lists(self) -> Sequence['outputs.GetRouterOspfAreaFilterListResult']:
        return pulumi.get(self, "filter_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> str:
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> int:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> str:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> str:
        return pulumi.get(self, "nssa_redistribution")

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> str:
        return pulumi.get(self, "nssa_translator_role")

    @property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetRouterOspfAreaRangeResult']:
        return pulumi.get(self, "ranges")

    @property
    @pulumi.getter
    def shortcut(self) -> str:
        return pulumi.get(self, "shortcut")

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> str:
        return pulumi.get(self, "stub_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Sequence['outputs.GetRouterOspfAreaVirtualLinkResult']:
        return pulumi.get(self, "virtual_links")


@pulumi.output_type
class GetRouterOspfAreaFilterListResult(dict):
    def __init__(__self__, *,
                 direction: str,
                 id: int,
                 list: str):
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "list", list)

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def list(self) -> str:
        return pulumi.get(self, "list")


@pulumi.output_type
class GetRouterOspfAreaRangeResult(dict):
    def __init__(__self__, *,
                 advertise: str,
                 id: int,
                 prefix: str,
                 substitute: str,
                 substitute_status: str):
        pulumi.set(__self__, "advertise", advertise)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "substitute", substitute)
        pulumi.set(__self__, "substitute_status", substitute_status)

    @property
    @pulumi.getter
    def advertise(self) -> str:
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def substitute(self) -> str:
        return pulumi.get(self, "substitute")

    @property
    @pulumi.getter(name="substituteStatus")
    def substitute_status(self) -> str:
        return pulumi.get(self, "substitute_status")


@pulumi.output_type
class GetRouterOspfAreaVirtualLinkResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 authentication_key: str,
                 dead_interval: int,
                 hello_interval: int,
                 keychain: str,
                 md5_key: str,
                 md5_keychain: str,
                 md5_keys: Sequence['outputs.GetRouterOspfAreaVirtualLinkMd5KeyResult'],
                 name: str,
                 peer: str,
                 retransmit_interval: int,
                 transmit_delay: int):
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "keychain", keychain)
        pulumi.set(__self__, "md5_key", md5_key)
        pulumi.set(__self__, "md5_keychain", md5_keychain)
        pulumi.set(__self__, "md5_keys", md5_keys)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer", peer)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> str:
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> int:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def keychain(self) -> str:
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> str:
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> str:
        return pulumi.get(self, "md5_keychain")

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Sequence['outputs.GetRouterOspfAreaVirtualLinkMd5KeyResult']:
        return pulumi.get(self, "md5_keys")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peer(self) -> str:
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> int:
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> int:
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class GetRouterOspfAreaVirtualLinkMd5KeyResult(dict):
    def __init__(__self__, *,
                 id: int,
                 key_string: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> str:
        return pulumi.get(self, "key_string")


@pulumi.output_type
class GetRouterOspfDistributeListResult(dict):
    def __init__(__self__, *,
                 access_list: str,
                 id: int,
                 protocol: str):
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetRouterOspfNeighborResult(dict):
    def __init__(__self__, *,
                 cost: int,
                 id: int,
                 ip: str,
                 poll_interval: int,
                 priority: int):
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "poll_interval", poll_interval)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> int:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> int:
        return pulumi.get(self, "poll_interval")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetRouterOspfNetworkResult(dict):
    def __init__(__self__, *,
                 area: str,
                 comments: str,
                 id: int,
                 prefix: str):
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def area(self) -> str:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRouterOspfOspfInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 authentication_key: str,
                 bfd: str,
                 comments: str,
                 cost: int,
                 database_filter_out: str,
                 dead_interval: int,
                 hello_interval: int,
                 hello_multiplier: int,
                 interface: str,
                 ip: str,
                 keychain: str,
                 md5_key: str,
                 md5_keychain: str,
                 md5_keys: Sequence['outputs.GetRouterOspfOspfInterfaceMd5KeyResult'],
                 mtu: int,
                 mtu_ignore: str,
                 name: str,
                 network_type: str,
                 prefix_length: int,
                 priority: int,
                 resync_timeout: int,
                 retransmit_interval: int,
                 status: str,
                 transmit_delay: int):
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "bfd", bfd)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "database_filter_out", database_filter_out)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "keychain", keychain)
        pulumi.set(__self__, "md5_key", md5_key)
        pulumi.set(__self__, "md5_keychain", md5_keychain)
        pulumi.set(__self__, "md5_keys", md5_keys)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "prefix_length", prefix_length)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "resync_timeout", resync_timeout)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> str:
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def cost(self) -> int:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="databaseFilterOut")
    def database_filter_out(self) -> str:
        return pulumi.get(self, "database_filter_out")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> int:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> int:
        return pulumi.get(self, "hello_multiplier")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def keychain(self) -> str:
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> str:
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> str:
        return pulumi.get(self, "md5_keychain")

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Sequence['outputs.GetRouterOspfOspfInterfaceMd5KeyResult']:
        return pulumi.get(self, "md5_keys")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> str:
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="resyncTimeout")
    def resync_timeout(self) -> int:
        return pulumi.get(self, "resync_timeout")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> int:
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> int:
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class GetRouterOspfOspfInterfaceMd5KeyResult(dict):
    def __init__(__self__, *,
                 id: int,
                 key_string: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> str:
        return pulumi.get(self, "key_string")


@pulumi.output_type
class GetRouterOspfPassiveInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterOspfRedistributeResult(dict):
    def __init__(__self__, *,
                 metric: int,
                 metric_type: str,
                 name: str,
                 routemap: str,
                 status: str,
                 tag: int):
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def metric(self) -> int:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> int:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetRouterOspfSummaryAddressResult(dict):
    def __init__(__self__, *,
                 advertise: str,
                 id: int,
                 prefix: str,
                 tag: int):
        pulumi.set(__self__, "advertise", advertise)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> str:
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def tag(self) -> int:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetRouterPolicy6DstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterPolicy6InternetServiceCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterPolicy6InternetServiceIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetRouterPolicy6SrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterPolicyDstResult(dict):
    def __init__(__self__, *,
                 subnet: str):
        pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetRouterPolicyDstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterPolicyInputDeviceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterPolicyInternetServiceCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterPolicyInternetServiceIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetRouterPolicySrcResult(dict):
    def __init__(__self__, *,
                 subnet: str):
        pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetRouterPolicySrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterPrefixList6RuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 flags: int,
                 ge: int,
                 id: int,
                 le: int,
                 prefix6: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "ge", ge)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "le", le)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def flags(self) -> int:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def ge(self) -> int:
        return pulumi.get(self, "ge")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def le(self) -> int:
        return pulumi.get(self, "le")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetRouterPrefixListRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 flags: int,
                 ge: int,
                 id: int,
                 le: int,
                 prefix: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "ge", ge)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "le", le)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def flags(self) -> int:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def ge(self) -> int:
        return pulumi.get(self, "ge")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def le(self) -> int:
        return pulumi.get(self, "le")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRouterRipDistanceResult(dict):
    def __init__(__self__, *,
                 access_list: str,
                 distance: int,
                 id: int,
                 prefix: str):
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def distance(self) -> int:
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRouterRipDistributeListResult(dict):
    def __init__(__self__, *,
                 direction: str,
                 id: int,
                 interface: str,
                 listname: str,
                 status: str):
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "listname", listname)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def listname(self) -> str:
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterRipInterfaceResult(dict):
    def __init__(__self__, *,
                 auth_keychain: str,
                 auth_mode: str,
                 auth_string: str,
                 flags: int,
                 name: str,
                 receive_version: str,
                 send_version: str,
                 send_version2_broadcast: str,
                 split_horizon: str,
                 split_horizon_status: str):
        pulumi.set(__self__, "auth_keychain", auth_keychain)
        pulumi.set(__self__, "auth_mode", auth_mode)
        pulumi.set(__self__, "auth_string", auth_string)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "receive_version", receive_version)
        pulumi.set(__self__, "send_version", send_version)
        pulumi.set(__self__, "send_version2_broadcast", send_version2_broadcast)
        pulumi.set(__self__, "split_horizon", split_horizon)
        pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter(name="authKeychain")
    def auth_keychain(self) -> str:
        return pulumi.get(self, "auth_keychain")

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> str:
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="authString")
    def auth_string(self) -> str:
        return pulumi.get(self, "auth_string")

    @property
    @pulumi.getter
    def flags(self) -> int:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="receiveVersion")
    def receive_version(self) -> str:
        return pulumi.get(self, "receive_version")

    @property
    @pulumi.getter(name="sendVersion")
    def send_version(self) -> str:
        return pulumi.get(self, "send_version")

    @property
    @pulumi.getter(name="sendVersion2Broadcast")
    def send_version2_broadcast(self) -> str:
        return pulumi.get(self, "send_version2_broadcast")

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> str:
        return pulumi.get(self, "split_horizon")

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> str:
        return pulumi.get(self, "split_horizon_status")


@pulumi.output_type
class GetRouterRipNeighborResult(dict):
    def __init__(__self__, *,
                 id: int,
                 ip: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetRouterRipNetworkResult(dict):
    def __init__(__self__, *,
                 id: int,
                 prefix: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRouterRipOffsetListResult(dict):
    def __init__(__self__, *,
                 access_list: str,
                 direction: str,
                 id: int,
                 interface: str,
                 offset: int,
                 status: str):
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterRipPassiveInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterRipRedistributeResult(dict):
    def __init__(__self__, *,
                 metric: int,
                 name: str,
                 routemap: str,
                 status: str):
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> int:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterRipngAggregateAddressResult(dict):
    def __init__(__self__, *,
                 id: int,
                 prefix6: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetRouterRipngDistanceResult(dict):
    def __init__(__self__, *,
                 access_list6: str,
                 distance: int,
                 id: int,
                 prefix6: str):
        pulumi.set(__self__, "access_list6", access_list6)
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> str:
        return pulumi.get(self, "access_list6")

    @property
    @pulumi.getter
    def distance(self) -> int:
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetRouterRipngDistributeListResult(dict):
    def __init__(__self__, *,
                 direction: str,
                 id: int,
                 interface: str,
                 listname: str,
                 status: str):
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "listname", listname)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def listname(self) -> str:
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterRipngInterfaceResult(dict):
    def __init__(__self__, *,
                 flags: int,
                 name: str,
                 split_horizon: str,
                 split_horizon_status: str):
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "split_horizon", split_horizon)
        pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter
    def flags(self) -> int:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> str:
        return pulumi.get(self, "split_horizon")

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> str:
        return pulumi.get(self, "split_horizon_status")


@pulumi.output_type
class GetRouterRipngNeighborResult(dict):
    def __init__(__self__, *,
                 id: int,
                 interface: str,
                 ip6: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        return pulumi.get(self, "ip6")


@pulumi.output_type
class GetRouterRipngNetworkResult(dict):
    def __init__(__self__, *,
                 id: int,
                 prefix: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRouterRipngOffsetListResult(dict):
    def __init__(__self__, *,
                 access_list6: str,
                 direction: str,
                 id: int,
                 interface: str,
                 offset: int,
                 status: str):
        pulumi.set(__self__, "access_list6", access_list6)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> str:
        return pulumi.get(self, "access_list6")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterRipngPassiveInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterRipngRedistributeResult(dict):
    def __init__(__self__, *,
                 metric: int,
                 name: str,
                 routemap: str,
                 status: str):
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> int:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRouterRouteMapRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 id: int,
                 match_as_path: str,
                 match_community: str,
                 match_community_exact: str,
                 match_extcommunity: str,
                 match_extcommunity_exact: str,
                 match_flags: int,
                 match_interface: str,
                 match_ip6_address: str,
                 match_ip6_nexthop: str,
                 match_ip_address: str,
                 match_ip_nexthop: str,
                 match_metric: int,
                 match_origin: str,
                 match_route_type: str,
                 match_tag: int,
                 match_vrf: int,
                 set_aggregator_as: int,
                 set_aggregator_ip: str,
                 set_aspath_action: str,
                 set_aspaths: Sequence['outputs.GetRouterRouteMapRuleSetAspathResult'],
                 set_atomic_aggregate: str,
                 set_communities: Sequence['outputs.GetRouterRouteMapRuleSetCommunityResult'],
                 set_community_additive: str,
                 set_community_delete: str,
                 set_dampening_max_suppress: int,
                 set_dampening_reachability_half_life: int,
                 set_dampening_reuse: int,
                 set_dampening_suppress: int,
                 set_dampening_unreachability_half_life: int,
                 set_extcommunity_rts: Sequence['outputs.GetRouterRouteMapRuleSetExtcommunityRtResult'],
                 set_extcommunity_soos: Sequence['outputs.GetRouterRouteMapRuleSetExtcommunitySooResult'],
                 set_flags: int,
                 set_ip6_nexthop: str,
                 set_ip6_nexthop_local: str,
                 set_ip_nexthop: str,
                 set_ip_prefsrc: str,
                 set_local_preference: int,
                 set_metric: int,
                 set_metric_type: str,
                 set_origin: str,
                 set_originator_id: str,
                 set_priority: int,
                 set_route_tag: int,
                 set_tag: int,
                 set_weight: int):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match_as_path", match_as_path)
        pulumi.set(__self__, "match_community", match_community)
        pulumi.set(__self__, "match_community_exact", match_community_exact)
        pulumi.set(__self__, "match_extcommunity", match_extcommunity)
        pulumi.set(__self__, "match_extcommunity_exact", match_extcommunity_exact)
        pulumi.set(__self__, "match_flags", match_flags)
        pulumi.set(__self__, "match_interface", match_interface)
        pulumi.set(__self__, "match_ip6_address", match_ip6_address)
        pulumi.set(__self__, "match_ip6_nexthop", match_ip6_nexthop)
        pulumi.set(__self__, "match_ip_address", match_ip_address)
        pulumi.set(__self__, "match_ip_nexthop", match_ip_nexthop)
        pulumi.set(__self__, "match_metric", match_metric)
        pulumi.set(__self__, "match_origin", match_origin)
        pulumi.set(__self__, "match_route_type", match_route_type)
        pulumi.set(__self__, "match_tag", match_tag)
        pulumi.set(__self__, "match_vrf", match_vrf)
        pulumi.set(__self__, "set_aggregator_as", set_aggregator_as)
        pulumi.set(__self__, "set_aggregator_ip", set_aggregator_ip)
        pulumi.set(__self__, "set_aspath_action", set_aspath_action)
        pulumi.set(__self__, "set_aspaths", set_aspaths)
        pulumi.set(__self__, "set_atomic_aggregate", set_atomic_aggregate)
        pulumi.set(__self__, "set_communities", set_communities)
        pulumi.set(__self__, "set_community_additive", set_community_additive)
        pulumi.set(__self__, "set_community_delete", set_community_delete)
        pulumi.set(__self__, "set_dampening_max_suppress", set_dampening_max_suppress)
        pulumi.set(__self__, "set_dampening_reachability_half_life", set_dampening_reachability_half_life)
        pulumi.set(__self__, "set_dampening_reuse", set_dampening_reuse)
        pulumi.set(__self__, "set_dampening_suppress", set_dampening_suppress)
        pulumi.set(__self__, "set_dampening_unreachability_half_life", set_dampening_unreachability_half_life)
        pulumi.set(__self__, "set_extcommunity_rts", set_extcommunity_rts)
        pulumi.set(__self__, "set_extcommunity_soos", set_extcommunity_soos)
        pulumi.set(__self__, "set_flags", set_flags)
        pulumi.set(__self__, "set_ip6_nexthop", set_ip6_nexthop)
        pulumi.set(__self__, "set_ip6_nexthop_local", set_ip6_nexthop_local)
        pulumi.set(__self__, "set_ip_nexthop", set_ip_nexthop)
        pulumi.set(__self__, "set_ip_prefsrc", set_ip_prefsrc)
        pulumi.set(__self__, "set_local_preference", set_local_preference)
        pulumi.set(__self__, "set_metric", set_metric)
        pulumi.set(__self__, "set_metric_type", set_metric_type)
        pulumi.set(__self__, "set_origin", set_origin)
        pulumi.set(__self__, "set_originator_id", set_originator_id)
        pulumi.set(__self__, "set_priority", set_priority)
        pulumi.set(__self__, "set_route_tag", set_route_tag)
        pulumi.set(__self__, "set_tag", set_tag)
        pulumi.set(__self__, "set_weight", set_weight)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchAsPath")
    def match_as_path(self) -> str:
        return pulumi.get(self, "match_as_path")

    @property
    @pulumi.getter(name="matchCommunity")
    def match_community(self) -> str:
        return pulumi.get(self, "match_community")

    @property
    @pulumi.getter(name="matchCommunityExact")
    def match_community_exact(self) -> str:
        return pulumi.get(self, "match_community_exact")

    @property
    @pulumi.getter(name="matchExtcommunity")
    def match_extcommunity(self) -> str:
        return pulumi.get(self, "match_extcommunity")

    @property
    @pulumi.getter(name="matchExtcommunityExact")
    def match_extcommunity_exact(self) -> str:
        return pulumi.get(self, "match_extcommunity_exact")

    @property
    @pulumi.getter(name="matchFlags")
    def match_flags(self) -> int:
        return pulumi.get(self, "match_flags")

    @property
    @pulumi.getter(name="matchInterface")
    def match_interface(self) -> str:
        return pulumi.get(self, "match_interface")

    @property
    @pulumi.getter(name="matchIp6Address")
    def match_ip6_address(self) -> str:
        return pulumi.get(self, "match_ip6_address")

    @property
    @pulumi.getter(name="matchIp6Nexthop")
    def match_ip6_nexthop(self) -> str:
        return pulumi.get(self, "match_ip6_nexthop")

    @property
    @pulumi.getter(name="matchIpAddress")
    def match_ip_address(self) -> str:
        return pulumi.get(self, "match_ip_address")

    @property
    @pulumi.getter(name="matchIpNexthop")
    def match_ip_nexthop(self) -> str:
        return pulumi.get(self, "match_ip_nexthop")

    @property
    @pulumi.getter(name="matchMetric")
    def match_metric(self) -> int:
        return pulumi.get(self, "match_metric")

    @property
    @pulumi.getter(name="matchOrigin")
    def match_origin(self) -> str:
        return pulumi.get(self, "match_origin")

    @property
    @pulumi.getter(name="matchRouteType")
    def match_route_type(self) -> str:
        return pulumi.get(self, "match_route_type")

    @property
    @pulumi.getter(name="matchTag")
    def match_tag(self) -> int:
        return pulumi.get(self, "match_tag")

    @property
    @pulumi.getter(name="matchVrf")
    def match_vrf(self) -> int:
        return pulumi.get(self, "match_vrf")

    @property
    @pulumi.getter(name="setAggregatorAs")
    def set_aggregator_as(self) -> int:
        return pulumi.get(self, "set_aggregator_as")

    @property
    @pulumi.getter(name="setAggregatorIp")
    def set_aggregator_ip(self) -> str:
        return pulumi.get(self, "set_aggregator_ip")

    @property
    @pulumi.getter(name="setAspathAction")
    def set_aspath_action(self) -> str:
        return pulumi.get(self, "set_aspath_action")

    @property
    @pulumi.getter(name="setAspaths")
    def set_aspaths(self) -> Sequence['outputs.GetRouterRouteMapRuleSetAspathResult']:
        return pulumi.get(self, "set_aspaths")

    @property
    @pulumi.getter(name="setAtomicAggregate")
    def set_atomic_aggregate(self) -> str:
        return pulumi.get(self, "set_atomic_aggregate")

    @property
    @pulumi.getter(name="setCommunities")
    def set_communities(self) -> Sequence['outputs.GetRouterRouteMapRuleSetCommunityResult']:
        return pulumi.get(self, "set_communities")

    @property
    @pulumi.getter(name="setCommunityAdditive")
    def set_community_additive(self) -> str:
        return pulumi.get(self, "set_community_additive")

    @property
    @pulumi.getter(name="setCommunityDelete")
    def set_community_delete(self) -> str:
        return pulumi.get(self, "set_community_delete")

    @property
    @pulumi.getter(name="setDampeningMaxSuppress")
    def set_dampening_max_suppress(self) -> int:
        return pulumi.get(self, "set_dampening_max_suppress")

    @property
    @pulumi.getter(name="setDampeningReachabilityHalfLife")
    def set_dampening_reachability_half_life(self) -> int:
        return pulumi.get(self, "set_dampening_reachability_half_life")

    @property
    @pulumi.getter(name="setDampeningReuse")
    def set_dampening_reuse(self) -> int:
        return pulumi.get(self, "set_dampening_reuse")

    @property
    @pulumi.getter(name="setDampeningSuppress")
    def set_dampening_suppress(self) -> int:
        return pulumi.get(self, "set_dampening_suppress")

    @property
    @pulumi.getter(name="setDampeningUnreachabilityHalfLife")
    def set_dampening_unreachability_half_life(self) -> int:
        return pulumi.get(self, "set_dampening_unreachability_half_life")

    @property
    @pulumi.getter(name="setExtcommunityRts")
    def set_extcommunity_rts(self) -> Sequence['outputs.GetRouterRouteMapRuleSetExtcommunityRtResult']:
        return pulumi.get(self, "set_extcommunity_rts")

    @property
    @pulumi.getter(name="setExtcommunitySoos")
    def set_extcommunity_soos(self) -> Sequence['outputs.GetRouterRouteMapRuleSetExtcommunitySooResult']:
        return pulumi.get(self, "set_extcommunity_soos")

    @property
    @pulumi.getter(name="setFlags")
    def set_flags(self) -> int:
        return pulumi.get(self, "set_flags")

    @property
    @pulumi.getter(name="setIp6Nexthop")
    def set_ip6_nexthop(self) -> str:
        return pulumi.get(self, "set_ip6_nexthop")

    @property
    @pulumi.getter(name="setIp6NexthopLocal")
    def set_ip6_nexthop_local(self) -> str:
        return pulumi.get(self, "set_ip6_nexthop_local")

    @property
    @pulumi.getter(name="setIpNexthop")
    def set_ip_nexthop(self) -> str:
        return pulumi.get(self, "set_ip_nexthop")

    @property
    @pulumi.getter(name="setIpPrefsrc")
    def set_ip_prefsrc(self) -> str:
        return pulumi.get(self, "set_ip_prefsrc")

    @property
    @pulumi.getter(name="setLocalPreference")
    def set_local_preference(self) -> int:
        return pulumi.get(self, "set_local_preference")

    @property
    @pulumi.getter(name="setMetric")
    def set_metric(self) -> int:
        return pulumi.get(self, "set_metric")

    @property
    @pulumi.getter(name="setMetricType")
    def set_metric_type(self) -> str:
        return pulumi.get(self, "set_metric_type")

    @property
    @pulumi.getter(name="setOrigin")
    def set_origin(self) -> str:
        return pulumi.get(self, "set_origin")

    @property
    @pulumi.getter(name="setOriginatorId")
    def set_originator_id(self) -> str:
        return pulumi.get(self, "set_originator_id")

    @property
    @pulumi.getter(name="setPriority")
    def set_priority(self) -> int:
        return pulumi.get(self, "set_priority")

    @property
    @pulumi.getter(name="setRouteTag")
    def set_route_tag(self) -> int:
        return pulumi.get(self, "set_route_tag")

    @property
    @pulumi.getter(name="setTag")
    def set_tag(self) -> int:
        return pulumi.get(self, "set_tag")

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> int:
        return pulumi.get(self, "set_weight")


@pulumi.output_type
class GetRouterRouteMapRuleSetAspathResult(dict):
    def __init__(__self__, *,
                 as_: str):
        pulumi.set(__self__, "as_", as_)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> str:
        return pulumi.get(self, "as_")


@pulumi.output_type
class GetRouterRouteMapRuleSetCommunityResult(dict):
    def __init__(__self__, *,
                 community: str):
        pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> str:
        return pulumi.get(self, "community")


@pulumi.output_type
class GetRouterRouteMapRuleSetExtcommunityRtResult(dict):
    def __init__(__self__, *,
                 community: str):
        pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> str:
        return pulumi.get(self, "community")


@pulumi.output_type
class GetRouterRouteMapRuleSetExtcommunitySooResult(dict):
    def __init__(__self__, *,
                 community: str):
        pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> str:
        return pulumi.get(self, "community")


@pulumi.output_type
class GetRouterStatic6SdwanZoneResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterStaticSdwanZoneResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRouterbgpNeighborConditionalAdvertise6Result(dict):
    def __init__(__self__, *,
                 advertise_routemap: str,
                 condition_routemap: str,
                 condition_type: str):
        pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        pulumi.set(__self__, "condition_routemap", condition_routemap)
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> str:
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> str:
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class GetRouterbgpNeighborConditionalAdvertiseResult(dict):
    def __init__(__self__, *,
                 advertise_routemap: str,
                 condition_routemap: str,
                 condition_type: str):
        pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        pulumi.set(__self__, "condition_routemap", condition_routemap)
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> str:
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> str:
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class GetSystemAccprofileFwgrpPermissionResult(dict):
    def __init__(__self__, *,
                 address: str,
                 others: str,
                 policy: str,
                 schedule: str,
                 service: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "others", others)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def others(self) -> str:
        return pulumi.get(self, "others")

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetSystemAccprofileLoggrpPermissionResult(dict):
    def __init__(__self__, *,
                 config: str,
                 data_access: str,
                 report_access: str,
                 threat_weight: str):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "data_access", data_access)
        pulumi.set(__self__, "report_access", report_access)
        pulumi.set(__self__, "threat_weight", threat_weight)

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="dataAccess")
    def data_access(self) -> str:
        return pulumi.get(self, "data_access")

    @property
    @pulumi.getter(name="reportAccess")
    def report_access(self) -> str:
        return pulumi.get(self, "report_access")

    @property
    @pulumi.getter(name="threatWeight")
    def threat_weight(self) -> str:
        return pulumi.get(self, "threat_weight")


@pulumi.output_type
class GetSystemAccprofileNetgrpPermissionResult(dict):
    def __init__(__self__, *,
                 cfg: str,
                 packet_capture: str,
                 route_cfg: str):
        pulumi.set(__self__, "cfg", cfg)
        pulumi.set(__self__, "packet_capture", packet_capture)
        pulumi.set(__self__, "route_cfg", route_cfg)

    @property
    @pulumi.getter
    def cfg(self) -> str:
        return pulumi.get(self, "cfg")

    @property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> str:
        return pulumi.get(self, "packet_capture")

    @property
    @pulumi.getter(name="routeCfg")
    def route_cfg(self) -> str:
        return pulumi.get(self, "route_cfg")


@pulumi.output_type
class GetSystemAccprofileSysgrpPermissionResult(dict):
    def __init__(__self__, *,
                 admin: str,
                 cfg: str,
                 mnt: str,
                 upd: str):
        pulumi.set(__self__, "admin", admin)
        pulumi.set(__self__, "cfg", cfg)
        pulumi.set(__self__, "mnt", mnt)
        pulumi.set(__self__, "upd", upd)

    @property
    @pulumi.getter
    def admin(self) -> str:
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def cfg(self) -> str:
        return pulumi.get(self, "cfg")

    @property
    @pulumi.getter
    def mnt(self) -> str:
        return pulumi.get(self, "mnt")

    @property
    @pulumi.getter
    def upd(self) -> str:
        return pulumi.get(self, "upd")


@pulumi.output_type
class GetSystemAccprofileUtmgrpPermissionResult(dict):
    def __init__(__self__, *,
                 antivirus: str,
                 application_control: str,
                 data_leak_prevention: str,
                 data_loss_prevention: str,
                 dnsfilter: str,
                 emailfilter: str,
                 endpoint_control: str,
                 file_filter: str,
                 icap: str,
                 ips: str,
                 spamfilter: str,
                 videofilter: str,
                 voip: str,
                 waf: str,
                 webfilter: str):
        pulumi.set(__self__, "antivirus", antivirus)
        pulumi.set(__self__, "application_control", application_control)
        pulumi.set(__self__, "data_leak_prevention", data_leak_prevention)
        pulumi.set(__self__, "data_loss_prevention", data_loss_prevention)
        pulumi.set(__self__, "dnsfilter", dnsfilter)
        pulumi.set(__self__, "emailfilter", emailfilter)
        pulumi.set(__self__, "endpoint_control", endpoint_control)
        pulumi.set(__self__, "file_filter", file_filter)
        pulumi.set(__self__, "icap", icap)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "spamfilter", spamfilter)
        pulumi.set(__self__, "videofilter", videofilter)
        pulumi.set(__self__, "voip", voip)
        pulumi.set(__self__, "waf", waf)
        pulumi.set(__self__, "webfilter", webfilter)

    @property
    @pulumi.getter
    def antivirus(self) -> str:
        return pulumi.get(self, "antivirus")

    @property
    @pulumi.getter(name="applicationControl")
    def application_control(self) -> str:
        return pulumi.get(self, "application_control")

    @property
    @pulumi.getter(name="dataLeakPrevention")
    def data_leak_prevention(self) -> str:
        return pulumi.get(self, "data_leak_prevention")

    @property
    @pulumi.getter(name="dataLossPrevention")
    def data_loss_prevention(self) -> str:
        return pulumi.get(self, "data_loss_prevention")

    @property
    @pulumi.getter
    def dnsfilter(self) -> str:
        return pulumi.get(self, "dnsfilter")

    @property
    @pulumi.getter
    def emailfilter(self) -> str:
        return pulumi.get(self, "emailfilter")

    @property
    @pulumi.getter(name="endpointControl")
    def endpoint_control(self) -> str:
        return pulumi.get(self, "endpoint_control")

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> str:
        return pulumi.get(self, "file_filter")

    @property
    @pulumi.getter
    def icap(self) -> str:
        return pulumi.get(self, "icap")

    @property
    @pulumi.getter
    def ips(self) -> str:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def spamfilter(self) -> str:
        return pulumi.get(self, "spamfilter")

    @property
    @pulumi.getter
    def videofilter(self) -> str:
        return pulumi.get(self, "videofilter")

    @property
    @pulumi.getter
    def voip(self) -> str:
        return pulumi.get(self, "voip")

    @property
    @pulumi.getter
    def waf(self) -> str:
        return pulumi.get(self, "waf")

    @property
    @pulumi.getter
    def webfilter(self) -> str:
        return pulumi.get(self, "webfilter")


@pulumi.output_type
class GetSystemAdminGuestUsergroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemAdminGuiDashboardResult(dict):
    def __init__(__self__, *,
                 columns: int,
                 id: int,
                 layout_type: str,
                 name: str,
                 scope: str,
                 widgets: Sequence['outputs.GetSystemAdminGuiDashboardWidgetResult']):
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "layout_type", layout_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "widgets", widgets)

    @property
    @pulumi.getter
    def columns(self) -> int:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="layoutType")
    def layout_type(self) -> str:
        return pulumi.get(self, "layout_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def widgets(self) -> Sequence['outputs.GetSystemAdminGuiDashboardWidgetResult']:
        return pulumi.get(self, "widgets")


@pulumi.output_type
class GetSystemAdminGuiDashboardWidgetResult(dict):
    def __init__(__self__, *,
                 fabric_device: str,
                 filters: Sequence['outputs.GetSystemAdminGuiDashboardWidgetFilterResult'],
                 height: int,
                 id: int,
                 industry: str,
                 interface: str,
                 region: str,
                 report_by: str,
                 sort_by: str,
                 timeframe: str,
                 title: str,
                 type: str,
                 visualization: str,
                 width: int,
                 x_pos: int,
                 y_pos: int):
        pulumi.set(__self__, "fabric_device", fabric_device)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "industry", industry)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "report_by", report_by)
        pulumi.set(__self__, "sort_by", sort_by)
        pulumi.set(__self__, "timeframe", timeframe)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "visualization", visualization)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="fabricDevice")
    def fabric_device(self) -> str:
        return pulumi.get(self, "fabric_device")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetSystemAdminGuiDashboardWidgetFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def height(self) -> int:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def industry(self) -> str:
        return pulumi.get(self, "industry")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="reportBy")
    def report_by(self) -> str:
        return pulumi.get(self, "report_by")

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> str:
        return pulumi.get(self, "sort_by")

    @property
    @pulumi.getter
    def timeframe(self) -> str:
        return pulumi.get(self, "timeframe")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def visualization(self) -> str:
        return pulumi.get(self, "visualization")

    @property
    @pulumi.getter
    def width(self) -> int:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> int:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> int:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSystemAdminGuiDashboardWidgetFilterResult(dict):
    def __init__(__self__, *,
                 id: int,
                 key: str,
                 value: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSystemAdminGuiGlobalMenuFavoriteResult(dict):
    def __init__(__self__, *,
                 id: str):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSystemAdminGuiNewFeatureAcknowledgeResult(dict):
    def __init__(__self__, *,
                 id: str):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSystemAdminGuiVdomMenuFavoriteResult(dict):
    def __init__(__self__, *,
                 id: str):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSystemAdminLoginTimeResult(dict):
    def __init__(__self__, *,
                 last_failed_login: str,
                 last_login: str,
                 usr_name: str):
        pulumi.set(__self__, "last_failed_login", last_failed_login)
        pulumi.set(__self__, "last_login", last_login)
        pulumi.set(__self__, "usr_name", usr_name)

    @property
    @pulumi.getter(name="lastFailedLogin")
    def last_failed_login(self) -> str:
        return pulumi.get(self, "last_failed_login")

    @property
    @pulumi.getter(name="lastLogin")
    def last_login(self) -> str:
        return pulumi.get(self, "last_login")

    @property
    @pulumi.getter(name="usrName")
    def usr_name(self) -> str:
        return pulumi.get(self, "usr_name")


@pulumi.output_type
class GetSystemAdminVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemApiUserTrusthostResult(dict):
    def __init__(__self__, *,
                 id: int,
                 ipv4_trusthost: str,
                 ipv6_trusthost: str,
                 type: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        pulumi.set(__self__, "ipv6_trusthost", ipv6_trusthost)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> str:
        return pulumi.get(self, "ipv4_trusthost")

    @property
    @pulumi.getter(name="ipv6Trusthost")
    def ipv6_trusthost(self) -> str:
        return pulumi.get(self, "ipv6_trusthost")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSystemApiUserVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemAutomationActionEmailToResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemAutomationActionHeaderResult(dict):
    def __init__(__self__, *,
                 header: str):
        pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")


@pulumi.output_type
class GetSystemAutomationActionHttpHeaderResult(dict):
    def __init__(__self__, *,
                 id: int,
                 key: str,
                 value: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSystemAutomationActionSdnConnectorResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemAutomationDestinationDestinationResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemAutomationTriggerFieldResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 value: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSystemAutomationTriggerLogidBlockResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSystemAutomationTriggerVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemCentralManagementServerListResult(dict):
    def __init__(__self__, *,
                 addr_type: str,
                 fqdn: str,
                 id: int,
                 server_address: str,
                 server_address6: str,
                 server_type: str):
        pulumi.set(__self__, "addr_type", addr_type)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "server_address", server_address)
        pulumi.set(__self__, "server_address6", server_address6)
        pulumi.set(__self__, "server_type", server_type)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> str:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> str:
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="serverAddress6")
    def server_address6(self) -> str:
        return pulumi.get(self, "server_address6")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> str:
        return pulumi.get(self, "server_type")


@pulumi.output_type
class GetSystemClusterSyncDownIntfsBeforeSessSyncResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemClusterSyncSessionSyncFilterResult(dict):
    def __init__(__self__, *,
                 custom_services: Sequence['outputs.GetSystemClusterSyncSessionSyncFilterCustomServiceResult'],
                 dstaddr: str,
                 dstaddr6: str,
                 dstintf: str,
                 srcaddr: str,
                 srcaddr6: str,
                 srcintf: str):
        pulumi.set(__self__, "custom_services", custom_services)
        pulumi.set(__self__, "dstaddr", dstaddr)
        pulumi.set(__self__, "dstaddr6", dstaddr6)
        pulumi.set(__self__, "dstintf", dstintf)
        pulumi.set(__self__, "srcaddr", srcaddr)
        pulumi.set(__self__, "srcaddr6", srcaddr6)
        pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Sequence['outputs.GetSystemClusterSyncSessionSyncFilterCustomServiceResult']:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter
    def dstaddr(self) -> str:
        return pulumi.get(self, "dstaddr")

    @property
    @pulumi.getter
    def dstaddr6(self) -> str:
        return pulumi.get(self, "dstaddr6")

    @property
    @pulumi.getter
    def dstintf(self) -> str:
        return pulumi.get(self, "dstintf")

    @property
    @pulumi.getter
    def srcaddr(self) -> str:
        return pulumi.get(self, "srcaddr")

    @property
    @pulumi.getter
    def srcaddr6(self) -> str:
        return pulumi.get(self, "srcaddr6")

    @property
    @pulumi.getter
    def srcintf(self) -> str:
        return pulumi.get(self, "srcintf")


@pulumi.output_type
class GetSystemClusterSyncSessionSyncFilterCustomServiceResult(dict):
    def __init__(__self__, *,
                 dst_port_range: str,
                 id: int,
                 src_port_range: str):
        pulumi.set(__self__, "dst_port_range", dst_port_range)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> str:
        return pulumi.get(self, "dst_port_range")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> str:
        return pulumi.get(self, "src_port_range")


@pulumi.output_type
class GetSystemClusterSyncSyncvdResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemCsfFabricConnectorResult(dict):
    def __init__(__self__, *,
                 accprofile: str,
                 configuration_write_access: str,
                 serial: str,
                 vdoms: Sequence['outputs.GetSystemCsfFabricConnectorVdomResult']):
        pulumi.set(__self__, "accprofile", accprofile)
        pulumi.set(__self__, "configuration_write_access", configuration_write_access)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def accprofile(self) -> str:
        return pulumi.get(self, "accprofile")

    @property
    @pulumi.getter(name="configurationWriteAccess")
    def configuration_write_access(self) -> str:
        return pulumi.get(self, "configuration_write_access")

    @property
    @pulumi.getter
    def serial(self) -> str:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def vdoms(self) -> Sequence['outputs.GetSystemCsfFabricConnectorVdomResult']:
        return pulumi.get(self, "vdoms")


@pulumi.output_type
class GetSystemCsfFabricConnectorVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemCsfFabricDeviceResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 device_ip: str,
                 device_type: str,
                 https_port: int,
                 login: str,
                 name: str,
                 password: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "device_ip", device_ip)
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "https_port", https_port)
        pulumi.set(__self__, "login", login)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="deviceIp")
    def device_ip(self) -> str:
        return pulumi.get(self, "device_ip")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> int:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter
    def login(self) -> str:
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")


@pulumi.output_type
class GetSystemCsfTrustedListResult(dict):
    def __init__(__self__, *,
                 action: str,
                 authorization_type: str,
                 certificate: str,
                 downstream_authorization: str,
                 ha_members: str,
                 index: int,
                 name: str,
                 serial: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "authorization_type", authorization_type)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "downstream_authorization", downstream_authorization)
        pulumi.set(__self__, "ha_members", ha_members)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> str:
        return pulumi.get(self, "authorization_type")

    @property
    @pulumi.getter
    def certificate(self) -> str:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="downstreamAuthorization")
    def downstream_authorization(self) -> str:
        return pulumi.get(self, "downstream_authorization")

    @property
    @pulumi.getter(name="haMembers")
    def ha_members(self) -> str:
        return pulumi.get(self, "ha_members")

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def serial(self) -> str:
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetSystemDdnsDdnsServerAddrResult(dict):
    def __init__(__self__, *,
                 addr: str):
        pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> str:
        return pulumi.get(self, "addr")


@pulumi.output_type
class GetSystemDdnsMonitorInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: str):
        pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class GetSystemDhcpServerExcludeRangeResult(dict):
    def __init__(__self__, *,
                 end_ip: str,
                 id: int,
                 lease_time: int,
                 start_ip: str,
                 uci_match: str,
                 uci_strings: Sequence['outputs.GetSystemDhcpServerExcludeRangeUciStringResult'],
                 vci_match: str,
                 vci_strings: Sequence['outputs.GetSystemDhcpServerExcludeRangeVciStringResult']):
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lease_time", lease_time)
        pulumi.set(__self__, "start_ip", start_ip)
        pulumi.set(__self__, "uci_match", uci_match)
        pulumi.set(__self__, "uci_strings", uci_strings)
        pulumi.set(__self__, "vci_match", vci_match)
        pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> int:
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> str:
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Sequence['outputs.GetSystemDhcpServerExcludeRangeUciStringResult']:
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> str:
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Sequence['outputs.GetSystemDhcpServerExcludeRangeVciStringResult']:
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class GetSystemDhcpServerExcludeRangeUciStringResult(dict):
    def __init__(__self__, *,
                 uci_string: str):
        pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> str:
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class GetSystemDhcpServerExcludeRangeVciStringResult(dict):
    def __init__(__self__, *,
                 vci_string: str):
        pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> str:
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class GetSystemDhcpServerIpRangeResult(dict):
    def __init__(__self__, *,
                 end_ip: str,
                 id: int,
                 lease_time: int,
                 start_ip: str,
                 uci_match: str,
                 uci_strings: Sequence['outputs.GetSystemDhcpServerIpRangeUciStringResult'],
                 vci_match: str,
                 vci_strings: Sequence['outputs.GetSystemDhcpServerIpRangeVciStringResult']):
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lease_time", lease_time)
        pulumi.set(__self__, "start_ip", start_ip)
        pulumi.set(__self__, "uci_match", uci_match)
        pulumi.set(__self__, "uci_strings", uci_strings)
        pulumi.set(__self__, "vci_match", vci_match)
        pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> int:
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> str:
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Sequence['outputs.GetSystemDhcpServerIpRangeUciStringResult']:
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> str:
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Sequence['outputs.GetSystemDhcpServerIpRangeVciStringResult']:
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class GetSystemDhcpServerIpRangeUciStringResult(dict):
    def __init__(__self__, *,
                 uci_string: str):
        pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> str:
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class GetSystemDhcpServerIpRangeVciStringResult(dict):
    def __init__(__self__, *,
                 vci_string: str):
        pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> str:
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class GetSystemDhcpServerOptionResult(dict):
    def __init__(__self__, *,
                 code: int,
                 id: int,
                 ip: str,
                 type: str,
                 uci_match: str,
                 uci_strings: Sequence['outputs.GetSystemDhcpServerOptionUciStringResult'],
                 value: str,
                 vci_match: str,
                 vci_strings: Sequence['outputs.GetSystemDhcpServerOptionVciStringResult']):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uci_match", uci_match)
        pulumi.set(__self__, "uci_strings", uci_strings)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "vci_match", vci_match)
        pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter
    def code(self) -> int:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> str:
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Sequence['outputs.GetSystemDhcpServerOptionUciStringResult']:
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> str:
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Sequence['outputs.GetSystemDhcpServerOptionVciStringResult']:
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class GetSystemDhcpServerOptionUciStringResult(dict):
    def __init__(__self__, *,
                 uci_string: str):
        pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> str:
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class GetSystemDhcpServerOptionVciStringResult(dict):
    def __init__(__self__, *,
                 vci_string: str):
        pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> str:
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class GetSystemDhcpServerReservedAddressResult(dict):
    def __init__(__self__, *,
                 action: str,
                 circuit_id: str,
                 circuit_id_type: str,
                 description: str,
                 id: int,
                 ip: str,
                 mac: str,
                 remote_id: str,
                 remote_id_type: str,
                 type: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "circuit_id", circuit_id)
        pulumi.set(__self__, "circuit_id_type", circuit_id_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "remote_id", remote_id)
        pulumi.set(__self__, "remote_id_type", remote_id_type)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> str:
        return pulumi.get(self, "circuit_id")

    @property
    @pulumi.getter(name="circuitIdType")
    def circuit_id_type(self) -> str:
        return pulumi.get(self, "circuit_id_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> str:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> str:
        return pulumi.get(self, "remote_id")

    @property
    @pulumi.getter(name="remoteIdType")
    def remote_id_type(self) -> str:
        return pulumi.get(self, "remote_id_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSystemDhcpServerTftpServerResult(dict):
    def __init__(__self__, *,
                 tftp_server: str):
        pulumi.set(__self__, "tftp_server", tftp_server)

    @property
    @pulumi.getter(name="tftpServer")
    def tftp_server(self) -> str:
        return pulumi.get(self, "tftp_server")


@pulumi.output_type
class GetSystemDhcpServerVciStringResult(dict):
    def __init__(__self__, *,
                 vci_string: str):
        pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> str:
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class GetSystemDnsDatabaseDnsEntryResult(dict):
    def __init__(__self__, *,
                 canonical_name: str,
                 hostname: str,
                 id: int,
                 ip: str,
                 ipv6: str,
                 preference: int,
                 status: str,
                 ttl: int,
                 type: str):
        pulumi.set(__self__, "canonical_name", canonical_name)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="canonicalName")
    def canonical_name(self) -> str:
        return pulumi.get(self, "canonical_name")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ipv6(self) -> str:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def preference(self) -> int:
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSystemDnsDomainResult(dict):
    def __init__(__self__, *,
                 domain: str):
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")


@pulumi.output_type
class GetSystemDnsServerHostnameResult(dict):
    def __init__(__self__, *,
                 hostname: str):
        pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class GetSystemGlobalInternetServiceDownloadListResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSystemHaHaMgmtInterfaceResult(dict):
    def __init__(__self__, *,
                 dst: str,
                 gateway: str,
                 gateway6: str,
                 id: int,
                 interface: str):
        pulumi.set(__self__, "dst", dst)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "gateway6", gateway6)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def dst(self) -> str:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> str:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")


@pulumi.output_type
class GetSystemHaSecondaryVclusterResult(dict):
    def __init__(__self__, *,
                 monitor: str,
                 override: str,
                 override_wait_time: int,
                 pingserver_failover_threshold: int,
                 pingserver_monitor_interface: str,
                 pingserver_secondary_force_reset: str,
                 pingserver_slave_force_reset: str,
                 priority: int,
                 vcluster_id: int,
                 vdom: str):
        pulumi.set(__self__, "monitor", monitor)
        pulumi.set(__self__, "override", override)
        pulumi.set(__self__, "override_wait_time", override_wait_time)
        pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "vcluster_id", vcluster_id)
        pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def monitor(self) -> str:
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def override(self) -> str:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> int:
        return pulumi.get(self, "override_wait_time")

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> int:
        return pulumi.get(self, "pingserver_failover_threshold")

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> str:
        return pulumi.get(self, "pingserver_monitor_interface")

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> str:
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> str:
        return pulumi.get(self, "pingserver_slave_force_reset")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> int:
        return pulumi.get(self, "vcluster_id")

    @property
    @pulumi.getter
    def vdom(self) -> str:
        return pulumi.get(self, "vdom")


@pulumi.output_type
class GetSystemHaUnicastPeerResult(dict):
    def __init__(__self__, *,
                 id: int,
                 peer_ip: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "peer_ip", peer_ip)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> str:
        return pulumi.get(self, "peer_ip")


@pulumi.output_type
class GetSystemHaVclusterResult(dict):
    def __init__(__self__, *,
                 monitor: str,
                 override: str,
                 override_wait_time: int,
                 pingserver_failover_threshold: int,
                 pingserver_monitor_interface: str,
                 pingserver_secondary_force_reset: str,
                 pingserver_slave_force_reset: str,
                 priority: int,
                 vcluster_id: int,
                 vdoms: Sequence['outputs.GetSystemHaVclusterVdomResult']):
        pulumi.set(__self__, "monitor", monitor)
        pulumi.set(__self__, "override", override)
        pulumi.set(__self__, "override_wait_time", override_wait_time)
        pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "vcluster_id", vcluster_id)
        pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def monitor(self) -> str:
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def override(self) -> str:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> int:
        return pulumi.get(self, "override_wait_time")

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> int:
        return pulumi.get(self, "pingserver_failover_threshold")

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> str:
        return pulumi.get(self, "pingserver_monitor_interface")

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> str:
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> str:
        return pulumi.get(self, "pingserver_slave_force_reset")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> int:
        return pulumi.get(self, "vcluster_id")

    @property
    @pulumi.getter
    def vdoms(self) -> Sequence['outputs.GetSystemHaVclusterVdomResult']:
        return pulumi.get(self, "vdoms")


@pulumi.output_type
class GetSystemHaVclusterVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemInterfaceClientOptionResult(dict):
    def __init__(__self__, *,
                 code: int,
                 id: int,
                 ip: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> int:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSystemInterfaceDhcpSnoopingServerListResult(dict):
    def __init__(__self__, *,
                 name: str,
                 server_ip: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_ip", server_ip)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> str:
        return pulumi.get(self, "server_ip")


@pulumi.output_type
class GetSystemInterfaceFailAlertInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemInterfaceIpv6Result(dict):
    def __init__(__self__, *,
                 autoconf: str,
                 cli_conn6_status: int,
                 dhcp6_client_options: str,
                 dhcp6_iapd_lists: Sequence['outputs.GetSystemInterfaceIpv6Dhcp6IapdListResult'],
                 dhcp6_information_request: str,
                 dhcp6_prefix_delegation: str,
                 dhcp6_prefix_hint: str,
                 dhcp6_prefix_hint_plt: int,
                 dhcp6_prefix_hint_vlt: int,
                 dhcp6_relay_ip: str,
                 dhcp6_relay_service: str,
                 dhcp6_relay_source_interface: str,
                 dhcp6_relay_type: str,
                 icmp6_send_redirect: str,
                 interface_identifier: str,
                 ip6_address: str,
                 ip6_allowaccess: str,
                 ip6_default_life: int,
                 ip6_delegated_prefix_iaid: int,
                 ip6_delegated_prefix_lists: Sequence['outputs.GetSystemInterfaceIpv6Ip6DelegatedPrefixListResult'],
                 ip6_dns_server_override: str,
                 ip6_extra_addrs: Sequence['outputs.GetSystemInterfaceIpv6Ip6ExtraAddrResult'],
                 ip6_hop_limit: int,
                 ip6_link_mtu: int,
                 ip6_manage_flag: str,
                 ip6_max_interval: int,
                 ip6_min_interval: int,
                 ip6_mode: str,
                 ip6_other_flag: str,
                 ip6_prefix_lists: Sequence['outputs.GetSystemInterfaceIpv6Ip6PrefixListResult'],
                 ip6_prefix_mode: str,
                 ip6_reachable_time: int,
                 ip6_retrans_time: int,
                 ip6_send_adv: str,
                 ip6_subnet: str,
                 ip6_upstream_interface: str,
                 nd_cert: str,
                 nd_cga_modifier: str,
                 nd_mode: str,
                 nd_security_level: int,
                 nd_timestamp_delta: int,
                 nd_timestamp_fuzz: int,
                 ra_send_mtu: str,
                 unique_autoconf_addr: str,
                 vrip6_link_local: str,
                 vrrp6s: Sequence['outputs.GetSystemInterfaceIpv6Vrrp6Result'],
                 vrrp_virtual_mac6: str):
        pulumi.set(__self__, "autoconf", autoconf)
        pulumi.set(__self__, "cli_conn6_status", cli_conn6_status)
        pulumi.set(__self__, "dhcp6_client_options", dhcp6_client_options)
        pulumi.set(__self__, "dhcp6_iapd_lists", dhcp6_iapd_lists)
        pulumi.set(__self__, "dhcp6_information_request", dhcp6_information_request)
        pulumi.set(__self__, "dhcp6_prefix_delegation", dhcp6_prefix_delegation)
        pulumi.set(__self__, "dhcp6_prefix_hint", dhcp6_prefix_hint)
        pulumi.set(__self__, "dhcp6_prefix_hint_plt", dhcp6_prefix_hint_plt)
        pulumi.set(__self__, "dhcp6_prefix_hint_vlt", dhcp6_prefix_hint_vlt)
        pulumi.set(__self__, "dhcp6_relay_ip", dhcp6_relay_ip)
        pulumi.set(__self__, "dhcp6_relay_service", dhcp6_relay_service)
        pulumi.set(__self__, "dhcp6_relay_source_interface", dhcp6_relay_source_interface)
        pulumi.set(__self__, "dhcp6_relay_type", dhcp6_relay_type)
        pulumi.set(__self__, "icmp6_send_redirect", icmp6_send_redirect)
        pulumi.set(__self__, "interface_identifier", interface_identifier)
        pulumi.set(__self__, "ip6_address", ip6_address)
        pulumi.set(__self__, "ip6_allowaccess", ip6_allowaccess)
        pulumi.set(__self__, "ip6_default_life", ip6_default_life)
        pulumi.set(__self__, "ip6_delegated_prefix_iaid", ip6_delegated_prefix_iaid)
        pulumi.set(__self__, "ip6_delegated_prefix_lists", ip6_delegated_prefix_lists)
        pulumi.set(__self__, "ip6_dns_server_override", ip6_dns_server_override)
        pulumi.set(__self__, "ip6_extra_addrs", ip6_extra_addrs)
        pulumi.set(__self__, "ip6_hop_limit", ip6_hop_limit)
        pulumi.set(__self__, "ip6_link_mtu", ip6_link_mtu)
        pulumi.set(__self__, "ip6_manage_flag", ip6_manage_flag)
        pulumi.set(__self__, "ip6_max_interval", ip6_max_interval)
        pulumi.set(__self__, "ip6_min_interval", ip6_min_interval)
        pulumi.set(__self__, "ip6_mode", ip6_mode)
        pulumi.set(__self__, "ip6_other_flag", ip6_other_flag)
        pulumi.set(__self__, "ip6_prefix_lists", ip6_prefix_lists)
        pulumi.set(__self__, "ip6_prefix_mode", ip6_prefix_mode)
        pulumi.set(__self__, "ip6_reachable_time", ip6_reachable_time)
        pulumi.set(__self__, "ip6_retrans_time", ip6_retrans_time)
        pulumi.set(__self__, "ip6_send_adv", ip6_send_adv)
        pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        pulumi.set(__self__, "ip6_upstream_interface", ip6_upstream_interface)
        pulumi.set(__self__, "nd_cert", nd_cert)
        pulumi.set(__self__, "nd_cga_modifier", nd_cga_modifier)
        pulumi.set(__self__, "nd_mode", nd_mode)
        pulumi.set(__self__, "nd_security_level", nd_security_level)
        pulumi.set(__self__, "nd_timestamp_delta", nd_timestamp_delta)
        pulumi.set(__self__, "nd_timestamp_fuzz", nd_timestamp_fuzz)
        pulumi.set(__self__, "ra_send_mtu", ra_send_mtu)
        pulumi.set(__self__, "unique_autoconf_addr", unique_autoconf_addr)
        pulumi.set(__self__, "vrip6_link_local", vrip6_link_local)
        pulumi.set(__self__, "vrrp6s", vrrp6s)
        pulumi.set(__self__, "vrrp_virtual_mac6", vrrp_virtual_mac6)

    @property
    @pulumi.getter
    def autoconf(self) -> str:
        return pulumi.get(self, "autoconf")

    @property
    @pulumi.getter(name="cliConn6Status")
    def cli_conn6_status(self) -> int:
        return pulumi.get(self, "cli_conn6_status")

    @property
    @pulumi.getter(name="dhcp6ClientOptions")
    def dhcp6_client_options(self) -> str:
        return pulumi.get(self, "dhcp6_client_options")

    @property
    @pulumi.getter(name="dhcp6IapdLists")
    def dhcp6_iapd_lists(self) -> Sequence['outputs.GetSystemInterfaceIpv6Dhcp6IapdListResult']:
        return pulumi.get(self, "dhcp6_iapd_lists")

    @property
    @pulumi.getter(name="dhcp6InformationRequest")
    def dhcp6_information_request(self) -> str:
        return pulumi.get(self, "dhcp6_information_request")

    @property
    @pulumi.getter(name="dhcp6PrefixDelegation")
    def dhcp6_prefix_delegation(self) -> str:
        return pulumi.get(self, "dhcp6_prefix_delegation")

    @property
    @pulumi.getter(name="dhcp6PrefixHint")
    def dhcp6_prefix_hint(self) -> str:
        return pulumi.get(self, "dhcp6_prefix_hint")

    @property
    @pulumi.getter(name="dhcp6PrefixHintPlt")
    def dhcp6_prefix_hint_plt(self) -> int:
        return pulumi.get(self, "dhcp6_prefix_hint_plt")

    @property
    @pulumi.getter(name="dhcp6PrefixHintVlt")
    def dhcp6_prefix_hint_vlt(self) -> int:
        return pulumi.get(self, "dhcp6_prefix_hint_vlt")

    @property
    @pulumi.getter(name="dhcp6RelayIp")
    def dhcp6_relay_ip(self) -> str:
        return pulumi.get(self, "dhcp6_relay_ip")

    @property
    @pulumi.getter(name="dhcp6RelayService")
    def dhcp6_relay_service(self) -> str:
        return pulumi.get(self, "dhcp6_relay_service")

    @property
    @pulumi.getter(name="dhcp6RelaySourceInterface")
    def dhcp6_relay_source_interface(self) -> str:
        return pulumi.get(self, "dhcp6_relay_source_interface")

    @property
    @pulumi.getter(name="dhcp6RelayType")
    def dhcp6_relay_type(self) -> str:
        return pulumi.get(self, "dhcp6_relay_type")

    @property
    @pulumi.getter(name="icmp6SendRedirect")
    def icmp6_send_redirect(self) -> str:
        return pulumi.get(self, "icmp6_send_redirect")

    @property
    @pulumi.getter(name="interfaceIdentifier")
    def interface_identifier(self) -> str:
        return pulumi.get(self, "interface_identifier")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> str:
        return pulumi.get(self, "ip6_address")

    @property
    @pulumi.getter(name="ip6Allowaccess")
    def ip6_allowaccess(self) -> str:
        return pulumi.get(self, "ip6_allowaccess")

    @property
    @pulumi.getter(name="ip6DefaultLife")
    def ip6_default_life(self) -> int:
        return pulumi.get(self, "ip6_default_life")

    @property
    @pulumi.getter(name="ip6DelegatedPrefixIaid")
    def ip6_delegated_prefix_iaid(self) -> int:
        return pulumi.get(self, "ip6_delegated_prefix_iaid")

    @property
    @pulumi.getter(name="ip6DelegatedPrefixLists")
    def ip6_delegated_prefix_lists(self) -> Sequence['outputs.GetSystemInterfaceIpv6Ip6DelegatedPrefixListResult']:
        return pulumi.get(self, "ip6_delegated_prefix_lists")

    @property
    @pulumi.getter(name="ip6DnsServerOverride")
    def ip6_dns_server_override(self) -> str:
        return pulumi.get(self, "ip6_dns_server_override")

    @property
    @pulumi.getter(name="ip6ExtraAddrs")
    def ip6_extra_addrs(self) -> Sequence['outputs.GetSystemInterfaceIpv6Ip6ExtraAddrResult']:
        return pulumi.get(self, "ip6_extra_addrs")

    @property
    @pulumi.getter(name="ip6HopLimit")
    def ip6_hop_limit(self) -> int:
        return pulumi.get(self, "ip6_hop_limit")

    @property
    @pulumi.getter(name="ip6LinkMtu")
    def ip6_link_mtu(self) -> int:
        return pulumi.get(self, "ip6_link_mtu")

    @property
    @pulumi.getter(name="ip6ManageFlag")
    def ip6_manage_flag(self) -> str:
        return pulumi.get(self, "ip6_manage_flag")

    @property
    @pulumi.getter(name="ip6MaxInterval")
    def ip6_max_interval(self) -> int:
        return pulumi.get(self, "ip6_max_interval")

    @property
    @pulumi.getter(name="ip6MinInterval")
    def ip6_min_interval(self) -> int:
        return pulumi.get(self, "ip6_min_interval")

    @property
    @pulumi.getter(name="ip6Mode")
    def ip6_mode(self) -> str:
        return pulumi.get(self, "ip6_mode")

    @property
    @pulumi.getter(name="ip6OtherFlag")
    def ip6_other_flag(self) -> str:
        return pulumi.get(self, "ip6_other_flag")

    @property
    @pulumi.getter(name="ip6PrefixLists")
    def ip6_prefix_lists(self) -> Sequence['outputs.GetSystemInterfaceIpv6Ip6PrefixListResult']:
        return pulumi.get(self, "ip6_prefix_lists")

    @property
    @pulumi.getter(name="ip6PrefixMode")
    def ip6_prefix_mode(self) -> str:
        return pulumi.get(self, "ip6_prefix_mode")

    @property
    @pulumi.getter(name="ip6ReachableTime")
    def ip6_reachable_time(self) -> int:
        return pulumi.get(self, "ip6_reachable_time")

    @property
    @pulumi.getter(name="ip6RetransTime")
    def ip6_retrans_time(self) -> int:
        return pulumi.get(self, "ip6_retrans_time")

    @property
    @pulumi.getter(name="ip6SendAdv")
    def ip6_send_adv(self) -> str:
        return pulumi.get(self, "ip6_send_adv")

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> str:
        return pulumi.get(self, "ip6_subnet")

    @property
    @pulumi.getter(name="ip6UpstreamInterface")
    def ip6_upstream_interface(self) -> str:
        return pulumi.get(self, "ip6_upstream_interface")

    @property
    @pulumi.getter(name="ndCert")
    def nd_cert(self) -> str:
        return pulumi.get(self, "nd_cert")

    @property
    @pulumi.getter(name="ndCgaModifier")
    def nd_cga_modifier(self) -> str:
        return pulumi.get(self, "nd_cga_modifier")

    @property
    @pulumi.getter(name="ndMode")
    def nd_mode(self) -> str:
        return pulumi.get(self, "nd_mode")

    @property
    @pulumi.getter(name="ndSecurityLevel")
    def nd_security_level(self) -> int:
        return pulumi.get(self, "nd_security_level")

    @property
    @pulumi.getter(name="ndTimestampDelta")
    def nd_timestamp_delta(self) -> int:
        return pulumi.get(self, "nd_timestamp_delta")

    @property
    @pulumi.getter(name="ndTimestampFuzz")
    def nd_timestamp_fuzz(self) -> int:
        return pulumi.get(self, "nd_timestamp_fuzz")

    @property
    @pulumi.getter(name="raSendMtu")
    def ra_send_mtu(self) -> str:
        return pulumi.get(self, "ra_send_mtu")

    @property
    @pulumi.getter(name="uniqueAutoconfAddr")
    def unique_autoconf_addr(self) -> str:
        return pulumi.get(self, "unique_autoconf_addr")

    @property
    @pulumi.getter(name="vrip6LinkLocal")
    def vrip6_link_local(self) -> str:
        return pulumi.get(self, "vrip6_link_local")

    @property
    @pulumi.getter
    def vrrp6s(self) -> Sequence['outputs.GetSystemInterfaceIpv6Vrrp6Result']:
        return pulumi.get(self, "vrrp6s")

    @property
    @pulumi.getter(name="vrrpVirtualMac6")
    def vrrp_virtual_mac6(self) -> str:
        return pulumi.get(self, "vrrp_virtual_mac6")


@pulumi.output_type
class GetSystemInterfaceIpv6Dhcp6IapdListResult(dict):
    def __init__(__self__, *,
                 iaid: int,
                 prefix_hint: str,
                 prefix_hint_plt: int,
                 prefix_hint_vlt: int):
        pulumi.set(__self__, "iaid", iaid)
        pulumi.set(__self__, "prefix_hint", prefix_hint)
        pulumi.set(__self__, "prefix_hint_plt", prefix_hint_plt)
        pulumi.set(__self__, "prefix_hint_vlt", prefix_hint_vlt)

    @property
    @pulumi.getter
    def iaid(self) -> int:
        return pulumi.get(self, "iaid")

    @property
    @pulumi.getter(name="prefixHint")
    def prefix_hint(self) -> str:
        return pulumi.get(self, "prefix_hint")

    @property
    @pulumi.getter(name="prefixHintPlt")
    def prefix_hint_plt(self) -> int:
        return pulumi.get(self, "prefix_hint_plt")

    @property
    @pulumi.getter(name="prefixHintVlt")
    def prefix_hint_vlt(self) -> int:
        return pulumi.get(self, "prefix_hint_vlt")


@pulumi.output_type
class GetSystemInterfaceIpv6Ip6DelegatedPrefixListResult(dict):
    def __init__(__self__, *,
                 autonomous_flag: str,
                 delegated_prefix_iaid: int,
                 onlink_flag: str,
                 prefix_id: int,
                 rdnss: str,
                 rdnss_service: str,
                 subnet: str,
                 upstream_interface: str):
        pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        pulumi.set(__self__, "delegated_prefix_iaid", delegated_prefix_iaid)
        pulumi.set(__self__, "onlink_flag", onlink_flag)
        pulumi.set(__self__, "prefix_id", prefix_id)
        pulumi.set(__self__, "rdnss", rdnss)
        pulumi.set(__self__, "rdnss_service", rdnss_service)
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "upstream_interface", upstream_interface)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> str:
        return pulumi.get(self, "autonomous_flag")

    @property
    @pulumi.getter(name="delegatedPrefixIaid")
    def delegated_prefix_iaid(self) -> int:
        return pulumi.get(self, "delegated_prefix_iaid")

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> str:
        return pulumi.get(self, "onlink_flag")

    @property
    @pulumi.getter(name="prefixId")
    def prefix_id(self) -> int:
        return pulumi.get(self, "prefix_id")

    @property
    @pulumi.getter
    def rdnss(self) -> str:
        return pulumi.get(self, "rdnss")

    @property
    @pulumi.getter(name="rdnssService")
    def rdnss_service(self) -> str:
        return pulumi.get(self, "rdnss_service")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="upstreamInterface")
    def upstream_interface(self) -> str:
        return pulumi.get(self, "upstream_interface")


@pulumi.output_type
class GetSystemInterfaceIpv6Ip6ExtraAddrResult(dict):
    def __init__(__self__, *,
                 prefix: str):
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetSystemInterfaceIpv6Ip6PrefixListResult(dict):
    def __init__(__self__, *,
                 autonomous_flag: str,
                 dnssls: Sequence['outputs.GetSystemInterfaceIpv6Ip6PrefixListDnsslResult'],
                 onlink_flag: str,
                 preferred_life_time: int,
                 prefix: str,
                 rdnss: str,
                 valid_life_time: int):
        pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        pulumi.set(__self__, "dnssls", dnssls)
        pulumi.set(__self__, "onlink_flag", onlink_flag)
        pulumi.set(__self__, "preferred_life_time", preferred_life_time)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "rdnss", rdnss)
        pulumi.set(__self__, "valid_life_time", valid_life_time)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> str:
        return pulumi.get(self, "autonomous_flag")

    @property
    @pulumi.getter
    def dnssls(self) -> Sequence['outputs.GetSystemInterfaceIpv6Ip6PrefixListDnsslResult']:
        return pulumi.get(self, "dnssls")

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> str:
        return pulumi.get(self, "onlink_flag")

    @property
    @pulumi.getter(name="preferredLifeTime")
    def preferred_life_time(self) -> int:
        return pulumi.get(self, "preferred_life_time")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def rdnss(self) -> str:
        return pulumi.get(self, "rdnss")

    @property
    @pulumi.getter(name="validLifeTime")
    def valid_life_time(self) -> int:
        return pulumi.get(self, "valid_life_time")


@pulumi.output_type
class GetSystemInterfaceIpv6Ip6PrefixListDnsslResult(dict):
    def __init__(__self__, *,
                 domain: str):
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")


@pulumi.output_type
class GetSystemInterfaceIpv6Vrrp6Result(dict):
    def __init__(__self__, *,
                 accept_mode: str,
                 adv_interval: int,
                 preempt: str,
                 priority: int,
                 start_time: int,
                 status: str,
                 vrdst6: str,
                 vrgrp: int,
                 vrid: int,
                 vrip6: str):
        pulumi.set(__self__, "accept_mode", accept_mode)
        pulumi.set(__self__, "adv_interval", adv_interval)
        pulumi.set(__self__, "preempt", preempt)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vrdst6", vrdst6)
        pulumi.set(__self__, "vrgrp", vrgrp)
        pulumi.set(__self__, "vrid", vrid)
        pulumi.set(__self__, "vrip6", vrip6)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> str:
        return pulumi.get(self, "accept_mode")

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> int:
        return pulumi.get(self, "adv_interval")

    @property
    @pulumi.getter
    def preempt(self) -> str:
        return pulumi.get(self, "preempt")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vrdst6(self) -> str:
        return pulumi.get(self, "vrdst6")

    @property
    @pulumi.getter
    def vrgrp(self) -> int:
        return pulumi.get(self, "vrgrp")

    @property
    @pulumi.getter
    def vrid(self) -> int:
        return pulumi.get(self, "vrid")

    @property
    @pulumi.getter
    def vrip6(self) -> str:
        return pulumi.get(self, "vrip6")


@pulumi.output_type
class GetSystemInterfaceManagedDeviceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemInterfaceMemberResult(dict):
    def __init__(__self__, *,
                 interface_name: str):
        pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class GetSystemInterfaceSecondaryipResult(dict):
    def __init__(__self__, *,
                 allowaccess: str,
                 detectprotocol: str,
                 detectserver: str,
                 gwdetect: str,
                 ha_priority: int,
                 id: int,
                 ip: str,
                 ping_serv_status: int,
                 secip_relay_ip: str):
        pulumi.set(__self__, "allowaccess", allowaccess)
        pulumi.set(__self__, "detectprotocol", detectprotocol)
        pulumi.set(__self__, "detectserver", detectserver)
        pulumi.set(__self__, "gwdetect", gwdetect)
        pulumi.set(__self__, "ha_priority", ha_priority)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ping_serv_status", ping_serv_status)
        pulumi.set(__self__, "secip_relay_ip", secip_relay_ip)

    @property
    @pulumi.getter
    def allowaccess(self) -> str:
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter
    def detectprotocol(self) -> str:
        return pulumi.get(self, "detectprotocol")

    @property
    @pulumi.getter
    def detectserver(self) -> str:
        return pulumi.get(self, "detectserver")

    @property
    @pulumi.getter
    def gwdetect(self) -> str:
        return pulumi.get(self, "gwdetect")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> int:
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> int:
        return pulumi.get(self, "ping_serv_status")

    @property
    @pulumi.getter(name="secipRelayIp")
    def secip_relay_ip(self) -> str:
        return pulumi.get(self, "secip_relay_ip")


@pulumi.output_type
class GetSystemInterfaceSecurityGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemInterfaceTaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetSystemInterfaceTaggingTagResult']):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSystemInterfaceTaggingTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSystemInterfaceTaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemInterfaceVrrpResult(dict):
    def __init__(__self__, *,
                 accept_mode: str,
                 adv_interval: int,
                 ignore_default_route: str,
                 preempt: str,
                 priority: int,
                 proxy_arps: Sequence['outputs.GetSystemInterfaceVrrpProxyArpResult'],
                 start_time: int,
                 status: str,
                 version: str,
                 vrdst: str,
                 vrdst_priority: int,
                 vrgrp: int,
                 vrid: int,
                 vrip: str):
        pulumi.set(__self__, "accept_mode", accept_mode)
        pulumi.set(__self__, "adv_interval", adv_interval)
        pulumi.set(__self__, "ignore_default_route", ignore_default_route)
        pulumi.set(__self__, "preempt", preempt)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "proxy_arps", proxy_arps)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vrdst", vrdst)
        pulumi.set(__self__, "vrdst_priority", vrdst_priority)
        pulumi.set(__self__, "vrgrp", vrgrp)
        pulumi.set(__self__, "vrid", vrid)
        pulumi.set(__self__, "vrip", vrip)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> str:
        return pulumi.get(self, "accept_mode")

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> int:
        return pulumi.get(self, "adv_interval")

    @property
    @pulumi.getter(name="ignoreDefaultRoute")
    def ignore_default_route(self) -> str:
        return pulumi.get(self, "ignore_default_route")

    @property
    @pulumi.getter
    def preempt(self) -> str:
        return pulumi.get(self, "preempt")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="proxyArps")
    def proxy_arps(self) -> Sequence['outputs.GetSystemInterfaceVrrpProxyArpResult']:
        return pulumi.get(self, "proxy_arps")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def vrdst(self) -> str:
        return pulumi.get(self, "vrdst")

    @property
    @pulumi.getter(name="vrdstPriority")
    def vrdst_priority(self) -> int:
        return pulumi.get(self, "vrdst_priority")

    @property
    @pulumi.getter
    def vrgrp(self) -> int:
        return pulumi.get(self, "vrgrp")

    @property
    @pulumi.getter
    def vrid(self) -> int:
        return pulumi.get(self, "vrid")

    @property
    @pulumi.getter
    def vrip(self) -> str:
        return pulumi.get(self, "vrip")


@pulumi.output_type
class GetSystemInterfaceVrrpProxyArpResult(dict):
    def __init__(__self__, *,
                 id: int,
                 ip: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetSystemLinkMonitorRouteResult(dict):
    def __init__(__self__, *,
                 subnet: str):
        pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetSystemLinkMonitorServerResult(dict):
    def __init__(__self__, *,
                 address: str):
        pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")


@pulumi.output_type
class GetSystemLinkMonitorServerListResult(dict):
    def __init__(__self__, *,
                 dst: str,
                 id: int,
                 port: int,
                 protocol: str,
                 weight: int):
        pulumi.set(__self__, "dst", dst)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def dst(self) -> str:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetSystemLldpNetworkPolicyGuestResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetSystemLldpNetworkPolicyGuestVoiceSignalingResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetSystemLldpNetworkPolicySoftphoneResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetSystemLldpNetworkPolicyStreamingVideoResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetSystemLldpNetworkPolicyVideoConferencingResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetSystemLldpNetworkPolicyVideoSignalingResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetSystemLldpNetworkPolicyVoiceResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetSystemLldpNetworkPolicyVoiceSignalingResult(dict):
    def __init__(__self__, *,
                 dscp: int,
                 priority: int,
                 status: str,
                 tag: str,
                 vlan: int):
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetSystemMobileTunnelNetworkResult(dict):
    def __init__(__self__, *,
                 id: int,
                 interface: str,
                 prefix: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetSystemNat64SecondaryPrefixResult(dict):
    def __init__(__self__, *,
                 name: str,
                 nat64_prefix: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nat64_prefix", nat64_prefix)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nat64Prefix")
    def nat64_prefix(self) -> str:
        return pulumi.get(self, "nat64_prefix")


@pulumi.output_type
class GetSystemNdProxyMemberResult(dict):
    def __init__(__self__, *,
                 interface_name: str):
        pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class GetSystemNtpInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: str):
        pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class GetSystemNtpNtpserverResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 id: int,
                 interface: str,
                 interface_select_method: str,
                 key: str,
                 key_id: int,
                 ntpv3: str,
                 server: str):
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "ntpv3", ntpv3)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> int:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def ntpv3(self) -> str:
        return pulumi.get(self, "ntpv3")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")


@pulumi.output_type
class GetSystemObjectTaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemReplacemsgGroupAdminResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupAlertmailResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupAuthResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupAutomationResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupCustomMessageResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupDeviceDetectionPortalResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupEcResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupFortiguardWfResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupFtpResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupHttpResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupIcapResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupMailResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupNacQuarResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupNntpResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupSpamResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupSslvpnResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupTrafficQuotaResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupUtmResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemReplacemsgGroupWebproxyResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSystemSdnConnectorCompartmentListResult(dict):
    def __init__(__self__, *,
                 compartment_id: str):
        pulumi.set(__self__, "compartment_id", compartment_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")


@pulumi.output_type
class GetSystemSdnConnectorExternalAccountListResult(dict):
    def __init__(__self__, *,
                 external_id: str,
                 region_lists: Sequence['outputs.GetSystemSdnConnectorExternalAccountListRegionListResult'],
                 role_arn: str):
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "region_lists", region_lists)
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="regionLists")
    def region_lists(self) -> Sequence['outputs.GetSystemSdnConnectorExternalAccountListRegionListResult']:
        return pulumi.get(self, "region_lists")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class GetSystemSdnConnectorExternalAccountListRegionListResult(dict):
    def __init__(__self__, *,
                 region: str):
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSystemSdnConnectorExternalIpResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemSdnConnectorForwardingRuleResult(dict):
    def __init__(__self__, *,
                 rule_name: str,
                 target: str):
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetSystemSdnConnectorGcpProjectListResult(dict):
    def __init__(__self__, *,
                 gcp_zone_lists: Sequence['outputs.GetSystemSdnConnectorGcpProjectListGcpZoneListResult'],
                 id: str):
        pulumi.set(__self__, "gcp_zone_lists", gcp_zone_lists)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="gcpZoneLists")
    def gcp_zone_lists(self) -> Sequence['outputs.GetSystemSdnConnectorGcpProjectListGcpZoneListResult']:
        return pulumi.get(self, "gcp_zone_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSystemSdnConnectorGcpProjectListGcpZoneListResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemSdnConnectorNicResult(dict):
    def __init__(__self__, *,
                 ips: Sequence['outputs.GetSystemSdnConnectorNicIpResult'],
                 name: str):
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ips(self) -> Sequence['outputs.GetSystemSdnConnectorNicIpResult']:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemSdnConnectorNicIpResult(dict):
    def __init__(__self__, *,
                 name: str,
                 public_ip: str,
                 resource_group: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")


@pulumi.output_type
class GetSystemSdnConnectorOciRegionListResult(dict):
    def __init__(__self__, *,
                 region: str):
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSystemSdnConnectorRouteResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemSdnConnectorRouteTableResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resource_group: str,
                 routes: Sequence['outputs.GetSystemSdnConnectorRouteTableRouteResult'],
                 subscription_id: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "routes", routes)
        pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetSystemSdnConnectorRouteTableRouteResult']:
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class GetSystemSdnConnectorRouteTableRouteResult(dict):
    def __init__(__self__, *,
                 name: str,
                 next_hop: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_hop", next_hop)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> str:
        return pulumi.get(self, "next_hop")


@pulumi.output_type
class GetSystemSdnConnectorServerListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetSystemSessionTtlPortResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 id: int,
                 protocol: int,
                 start_port: int,
                 timeout: str):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "start_port", start_port)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetSystemSnmpCommunityHostResult(dict):
    def __init__(__self__, *,
                 ha_direct: str,
                 host_type: str,
                 id: int,
                 ip: str,
                 source_ip: str):
        pulumi.set(__self__, "ha_direct", ha_direct)
        pulumi.set(__self__, "host_type", host_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> str:
        return pulumi.get(self, "ha_direct")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> str:
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class GetSystemSnmpCommunityHosts6Result(dict):
    def __init__(__self__, *,
                 ha_direct: str,
                 host_type: str,
                 id: int,
                 ipv6: str,
                 source_ipv6: str):
        pulumi.set(__self__, "ha_direct", ha_direct)
        pulumi.set(__self__, "host_type", host_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "source_ipv6", source_ipv6)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> str:
        return pulumi.get(self, "ha_direct")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> str:
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv6(self) -> str:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> str:
        return pulumi.get(self, "source_ipv6")


@pulumi.output_type
class GetSystemSnmpCommunityVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemSnmpUserVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVdomExceptionVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkFailAlertInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkHealthCheckResult(dict):
    def __init__(__self__, *,
                 addr_mode: str,
                 diffservcode: str,
                 dns_request_domain: str,
                 failtime: int,
                 ha_priority: int,
                 http_agent: str,
                 http_get: str,
                 http_match: str,
                 interval: int,
                 members: Sequence['outputs.GetSystemVirtualWanLinkHealthCheckMemberResult'],
                 name: str,
                 packet_size: int,
                 password: str,
                 port: int,
                 probe_count: int,
                 probe_packets: str,
                 probe_timeout: int,
                 protocol: str,
                 recoverytime: int,
                 security_mode: str,
                 server: str,
                 sla_fail_log_period: int,
                 sla_pass_log_period: int,
                 slas: Sequence['outputs.GetSystemVirtualWanLinkHealthCheckSlaResult'],
                 system_dns: str,
                 threshold_alert_jitter: int,
                 threshold_alert_latency: int,
                 threshold_alert_packetloss: int,
                 threshold_warning_jitter: int,
                 threshold_warning_latency: int,
                 threshold_warning_packetloss: int,
                 update_cascade_interface: str,
                 update_static_route: str):
        pulumi.set(__self__, "addr_mode", addr_mode)
        pulumi.set(__self__, "diffservcode", diffservcode)
        pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        pulumi.set(__self__, "failtime", failtime)
        pulumi.set(__self__, "ha_priority", ha_priority)
        pulumi.set(__self__, "http_agent", http_agent)
        pulumi.set(__self__, "http_get", http_get)
        pulumi.set(__self__, "http_match", http_match)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "packet_size", packet_size)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "probe_count", probe_count)
        pulumi.set(__self__, "probe_packets", probe_packets)
        pulumi.set(__self__, "probe_timeout", probe_timeout)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "recoverytime", recoverytime)
        pulumi.set(__self__, "security_mode", security_mode)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        pulumi.set(__self__, "slas", slas)
        pulumi.set(__self__, "system_dns", system_dns)
        pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        pulumi.set(__self__, "update_static_route", update_static_route)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> str:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def diffservcode(self) -> str:
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> str:
        return pulumi.get(self, "dns_request_domain")

    @property
    @pulumi.getter
    def failtime(self) -> int:
        return pulumi.get(self, "failtime")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> int:
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> str:
        return pulumi.get(self, "http_agent")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> str:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> str:
        return pulumi.get(self, "http_match")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetSystemVirtualWanLinkHealthCheckMemberResult']:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> int:
        return pulumi.get(self, "packet_size")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> int:
        return pulumi.get(self, "probe_count")

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> str:
        return pulumi.get(self, "probe_packets")

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> int:
        return pulumi.get(self, "probe_timeout")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def recoverytime(self) -> int:
        return pulumi.get(self, "recoverytime")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> str:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> int:
        return pulumi.get(self, "sla_fail_log_period")

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> int:
        return pulumi.get(self, "sla_pass_log_period")

    @property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetSystemVirtualWanLinkHealthCheckSlaResult']:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> str:
        return pulumi.get(self, "system_dns")

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> int:
        return pulumi.get(self, "threshold_alert_jitter")

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> int:
        return pulumi.get(self, "threshold_alert_latency")

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> int:
        return pulumi.get(self, "threshold_alert_packetloss")

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> int:
        return pulumi.get(self, "threshold_warning_jitter")

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> int:
        return pulumi.get(self, "threshold_warning_latency")

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> int:
        return pulumi.get(self, "threshold_warning_packetloss")

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> str:
        return pulumi.get(self, "update_cascade_interface")

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> str:
        return pulumi.get(self, "update_static_route")


@pulumi.output_type
class GetSystemVirtualWanLinkHealthCheckMemberResult(dict):
    def __init__(__self__, *,
                 seq_num: int):
        pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> int:
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class GetSystemVirtualWanLinkHealthCheckSlaResult(dict):
    def __init__(__self__, *,
                 id: int,
                 jitter_threshold: int,
                 latency_threshold: int,
                 link_cost_factor: str,
                 packetloss_threshold: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        pulumi.set(__self__, "latency_threshold", latency_threshold)
        pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> int:
        return pulumi.get(self, "jitter_threshold")

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> int:
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> str:
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> int:
        return pulumi.get(self, "packetloss_threshold")


@pulumi.output_type
class GetSystemVirtualWanLinkMemberResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 cost: int,
                 gateway: str,
                 gateway6: str,
                 ingress_spillover_threshold: int,
                 interface: str,
                 priority: int,
                 seq_num: int,
                 source: str,
                 source6: str,
                 spillover_threshold: int,
                 status: str,
                 volume_ratio: int,
                 weight: int):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "gateway6", gateway6)
        pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "seq_num", seq_num)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source6", source6)
        pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "volume_ratio", volume_ratio)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def cost(self) -> int:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> str:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> int:
        return pulumi.get(self, "ingress_spillover_threshold")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> int:
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def source6(self) -> str:
        return pulumi.get(self, "source6")

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> int:
        return pulumi.get(self, "spillover_threshold")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> int:
        return pulumi.get(self, "volume_ratio")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetSystemVirtualWanLinkNeighborResult(dict):
    def __init__(__self__, *,
                 health_check: str,
                 ip: str,
                 member: int,
                 role: str,
                 sla_id: int):
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "member", member)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> str:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def member(self) -> int:
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> int:
        return pulumi.get(self, "sla_id")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceResult(dict):
    def __init__(__self__, *,
                 addr_mode: str,
                 bandwidth_weight: int,
                 default: str,
                 dscp_forward: str,
                 dscp_forward_tag: str,
                 dscp_reverse: str,
                 dscp_reverse_tag: str,
                 dst6s: Sequence['outputs.GetSystemVirtualWanLinkServiceDst6Result'],
                 dst_negate: str,
                 dsts: Sequence['outputs.GetSystemVirtualWanLinkServiceDstResult'],
                 end_port: int,
                 gateway: str,
                 groups: Sequence['outputs.GetSystemVirtualWanLinkServiceGroupResult'],
                 health_check: str,
                 hold_down_time: int,
                 id: int,
                 input_device_negate: str,
                 input_devices: Sequence['outputs.GetSystemVirtualWanLinkServiceInputDeviceResult'],
                 internet_service: str,
                 internet_service_app_ctrl_groups: Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceAppCtrlGroupResult'],
                 internet_service_app_ctrls: Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceAppCtrlResult'],
                 internet_service_ctrl_groups: Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceCtrlGroupResult'],
                 internet_service_ctrls: Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceCtrlResult'],
                 internet_service_custom_groups: Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceCustomGroupResult'],
                 internet_service_customs: Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceCustomResult'],
                 internet_service_groups: Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceGroupResult'],
                 internet_service_ids: Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceIdResult'],
                 internet_service_names: Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceNameResult'],
                 jitter_weight: int,
                 latency_weight: int,
                 link_cost_factor: str,
                 link_cost_threshold: int,
                 member: int,
                 mode: str,
                 name: str,
                 packet_loss_weight: int,
                 priority_members: Sequence['outputs.GetSystemVirtualWanLinkServicePriorityMemberResult'],
                 protocol: int,
                 quality_link: int,
                 role: str,
                 route_tag: int,
                 sla_compare_method: str,
                 slas: Sequence['outputs.GetSystemVirtualWanLinkServiceSlaResult'],
                 src6s: Sequence['outputs.GetSystemVirtualWanLinkServiceSrc6Result'],
                 src_negate: str,
                 srcs: Sequence['outputs.GetSystemVirtualWanLinkServiceSrcResult'],
                 standalone_action: str,
                 start_port: int,
                 status: str,
                 tos: str,
                 tos_mask: str,
                 users: Sequence['outputs.GetSystemVirtualWanLinkServiceUserResult']):
        pulumi.set(__self__, "addr_mode", addr_mode)
        pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "dscp_forward", dscp_forward)
        pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        pulumi.set(__self__, "dst6s", dst6s)
        pulumi.set(__self__, "dst_negate", dst_negate)
        pulumi.set(__self__, "dsts", dsts)
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "hold_down_time", hold_down_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "input_device_negate", input_device_negate)
        pulumi.set(__self__, "input_devices", input_devices)
        pulumi.set(__self__, "internet_service", internet_service)
        pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        pulumi.set(__self__, "internet_service_ctrl_groups", internet_service_ctrl_groups)
        pulumi.set(__self__, "internet_service_ctrls", internet_service_ctrls)
        pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        pulumi.set(__self__, "internet_service_names", internet_service_names)
        pulumi.set(__self__, "jitter_weight", jitter_weight)
        pulumi.set(__self__, "latency_weight", latency_weight)
        pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        pulumi.set(__self__, "member", member)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        pulumi.set(__self__, "priority_members", priority_members)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "quality_link", quality_link)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "route_tag", route_tag)
        pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        pulumi.set(__self__, "slas", slas)
        pulumi.set(__self__, "src6s", src6s)
        pulumi.set(__self__, "src_negate", src_negate)
        pulumi.set(__self__, "srcs", srcs)
        pulumi.set(__self__, "standalone_action", standalone_action)
        pulumi.set(__self__, "start_port", start_port)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tos", tos)
        pulumi.set(__self__, "tos_mask", tos_mask)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> str:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> int:
        return pulumi.get(self, "bandwidth_weight")

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> str:
        return pulumi.get(self, "dscp_forward")

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> str:
        return pulumi.get(self, "dscp_forward_tag")

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> str:
        return pulumi.get(self, "dscp_reverse")

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> str:
        return pulumi.get(self, "dscp_reverse_tag")

    @property
    @pulumi.getter
    def dst6s(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceDst6Result']:
        return pulumi.get(self, "dst6s")

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> str:
        return pulumi.get(self, "dst_negate")

    @property
    @pulumi.getter
    def dsts(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceDstResult']:
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceGroupResult']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> str:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> int:
        return pulumi.get(self, "hold_down_time")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> str:
        return pulumi.get(self, "input_device_negate")

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceInputDeviceResult']:
        return pulumi.get(self, "input_devices")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> str:
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceAppCtrlGroupResult']:
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceAppCtrlResult']:
        return pulumi.get(self, "internet_service_app_ctrls")

    @property
    @pulumi.getter(name="internetServiceCtrlGroups")
    def internet_service_ctrl_groups(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceCtrlGroupResult']:
        return pulumi.get(self, "internet_service_ctrl_groups")

    @property
    @pulumi.getter(name="internetServiceCtrls")
    def internet_service_ctrls(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceCtrlResult']:
        return pulumi.get(self, "internet_service_ctrls")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceCustomGroupResult']:
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceCustomResult']:
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceGroupResult']:
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceIdResult']:
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceInternetServiceNameResult']:
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> int:
        return pulumi.get(self, "jitter_weight")

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> int:
        return pulumi.get(self, "latency_weight")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> str:
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> int:
        return pulumi.get(self, "link_cost_threshold")

    @property
    @pulumi.getter
    def member(self) -> int:
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> int:
        return pulumi.get(self, "packet_loss_weight")

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Sequence['outputs.GetSystemVirtualWanLinkServicePriorityMemberResult']:
        return pulumi.get(self, "priority_members")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> int:
        return pulumi.get(self, "quality_link")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> int:
        return pulumi.get(self, "route_tag")

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> str:
        return pulumi.get(self, "sla_compare_method")

    @property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceSlaResult']:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter
    def src6s(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceSrc6Result']:
        return pulumi.get(self, "src6s")

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> str:
        return pulumi.get(self, "src_negate")

    @property
    @pulumi.getter
    def srcs(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceSrcResult']:
        return pulumi.get(self, "srcs")

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> str:
        return pulumi.get(self, "standalone_action")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tos(self) -> str:
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> str:
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetSystemVirtualWanLinkServiceUserResult']:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceDst6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceDstResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceInputDeviceResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceInternetServiceAppCtrlResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceInternetServiceAppCtrlGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceInternetServiceCtrlResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceInternetServiceCtrlGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceInternetServiceCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceInternetServiceCustomGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceInternetServiceGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceInternetServiceIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceInternetServiceNameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServicePriorityMemberResult(dict):
    def __init__(__self__, *,
                 seq_num: int):
        pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> int:
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceSlaResult(dict):
    def __init__(__self__, *,
                 health_check: str,
                 id: int):
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> str:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceSrc6Result(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceSrcResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkServiceUserResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVirtualWanLinkZoneResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemVxlanRemoteIp6Result(dict):
    def __init__(__self__, *,
                 ip6: str):
        pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def ip6(self) -> str:
        return pulumi.get(self, "ip6")


@pulumi.output_type
class GetSystemVxlanRemoteIpResult(dict):
    def __init__(__self__, *,
                 ip: str):
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetSystemZoneInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: str):
        pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class GetSystemZoneTaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetSystemZoneTaggingTagResult']):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSystemZoneTaggingTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSystemZoneTaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class IcapProfileIcapHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "base64Encoding":
            suggest = "base64_encoding"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IcapProfileIcapHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IcapProfileIcapHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IcapProfileIcapHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base64_encoding: Optional[str] = None,
                 content: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if base64_encoding is not None:
            pulumi.set(__self__, "base64_encoding", base64_encoding)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="base64Encoding")
    def base64_encoding(self) -> Optional[str]:
        return pulumi.get(self, "base64_encoding")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class IcapProfileRespmodForwardRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerGroups":
            suggest = "header_groups"
        elif key == "httpRespStatusCodes":
            suggest = "http_resp_status_codes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IcapProfileRespmodForwardRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IcapProfileRespmodForwardRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IcapProfileRespmodForwardRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 header_groups: Optional[Sequence['outputs.IcapProfileRespmodForwardRuleHeaderGroup']] = None,
                 host: Optional[str] = None,
                 http_resp_status_codes: Optional[Sequence['outputs.IcapProfileRespmodForwardRuleHttpRespStatusCode']] = None,
                 name: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if header_groups is not None:
            pulumi.set(__self__, "header_groups", header_groups)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_resp_status_codes is not None:
            pulumi.set(__self__, "http_resp_status_codes", http_resp_status_codes)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="headerGroups")
    def header_groups(self) -> Optional[Sequence['outputs.IcapProfileRespmodForwardRuleHeaderGroup']]:
        return pulumi.get(self, "header_groups")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="httpRespStatusCodes")
    def http_resp_status_codes(self) -> Optional[Sequence['outputs.IcapProfileRespmodForwardRuleHttpRespStatusCode']]:
        return pulumi.get(self, "http_resp_status_codes")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class IcapProfileRespmodForwardRuleHeaderGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitivity":
            suggest = "case_sensitivity"
        elif key == "headerName":
            suggest = "header_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IcapProfileRespmodForwardRuleHeaderGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IcapProfileRespmodForwardRuleHeaderGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IcapProfileRespmodForwardRuleHeaderGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 case_sensitivity: Optional[str] = None,
                 header: Optional[str] = None,
                 header_name: Optional[str] = None,
                 id: Optional[int] = None):
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[str]:
        return pulumi.get(self, "case_sensitivity")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class IcapProfileRespmodForwardRuleHttpRespStatusCode(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")


@pulumi.output_type
class IcapServerGroupServerList(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 weight: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class IpsDecoderParameter(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class IpsGlobalTlsActiveProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceSelectMethod":
            suggest = "interface_select_method"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIp6":
            suggest = "source_ip6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsGlobalTlsActiveProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsGlobalTlsActiveProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsGlobalTlsActiveProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 interface_select_method: Optional[str] = None,
                 source_ip: Optional[str] = None,
                 source_ip6: Optional[str] = None,
                 vdom: Optional[str] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[str]:
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[str]:
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter
    def vdom(self) -> Optional[str]:
        return pulumi.get(self, "vdom")


@pulumi.output_type
class IpsRuleMetadata(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 metaid: Optional[int] = None,
                 valueid: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metaid is not None:
            pulumi.set(__self__, "metaid", metaid)
        if valueid is not None:
            pulumi.set(__self__, "valueid", valueid)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metaid(self) -> Optional[int]:
        return pulumi.get(self, "metaid")

    @property
    @pulumi.getter
    def valueid(self) -> Optional[int]:
        return pulumi.get(self, "valueid")


@pulumi.output_type
class IpsSensorEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultAction":
            suggest = "default_action"
        elif key == "defaultStatus":
            suggest = "default_status"
        elif key == "exemptIps":
            suggest = "exempt_ips"
        elif key == "lastModified":
            suggest = "last_modified"
        elif key == "logAttackContext":
            suggest = "log_attack_context"
        elif key == "logPacket":
            suggest = "log_packet"
        elif key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"
        elif key == "rateCount":
            suggest = "rate_count"
        elif key == "rateDuration":
            suggest = "rate_duration"
        elif key == "rateMode":
            suggest = "rate_mode"
        elif key == "rateTrack":
            suggest = "rate_track"
        elif key == "vulnTypes":
            suggest = "vuln_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsSensorEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsSensorEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsSensorEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 application: Optional[str] = None,
                 cves: Optional[Sequence['outputs.IpsSensorEntryCfe']] = None,
                 default_action: Optional[str] = None,
                 default_status: Optional[str] = None,
                 exempt_ips: Optional[Sequence['outputs.IpsSensorEntryExemptIp']] = None,
                 id: Optional[int] = None,
                 last_modified: Optional[str] = None,
                 location: Optional[str] = None,
                 log: Optional[str] = None,
                 log_attack_context: Optional[str] = None,
                 log_packet: Optional[str] = None,
                 os: Optional[str] = None,
                 protocol: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[str] = None,
                 quarantine_log: Optional[str] = None,
                 rate_count: Optional[int] = None,
                 rate_duration: Optional[int] = None,
                 rate_mode: Optional[str] = None,
                 rate_track: Optional[str] = None,
                 rules: Optional[Sequence['outputs.IpsSensorEntryRule']] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None,
                 vuln_types: Optional[Sequence['outputs.IpsSensorEntryVulnType']] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if cves is not None:
            pulumi.set(__self__, "cves", cves)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if default_status is not None:
            pulumi.set(__self__, "default_status", default_status)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_attack_context is not None:
            pulumi.set(__self__, "log_attack_context", log_attack_context)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rate_count is not None:
            pulumi.set(__self__, "rate_count", rate_count)
        if rate_duration is not None:
            pulumi.set(__self__, "rate_duration", rate_duration)
        if rate_mode is not None:
            pulumi.set(__self__, "rate_mode", rate_mode)
        if rate_track is not None:
            pulumi.set(__self__, "rate_track", rate_track)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vuln_types is not None:
            pulumi.set(__self__, "vuln_types", vuln_types)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        return pulumi.get(self, "application")

    @property
    @pulumi.getter
    def cves(self) -> Optional[Sequence['outputs.IpsSensorEntryCfe']]:
        return pulumi.get(self, "cves")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[str]:
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="defaultStatus")
    def default_status(self) -> Optional[str]:
        return pulumi.get(self, "default_status")

    @property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[Sequence['outputs.IpsSensorEntryExemptIp']]:
        return pulumi.get(self, "exempt_ips")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[str]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logAttackContext")
    def log_attack_context(self) -> Optional[str]:
        return pulumi.get(self, "log_attack_context")

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[str]:
        return pulumi.get(self, "log_packet")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter(name="rateCount")
    def rate_count(self) -> Optional[int]:
        return pulumi.get(self, "rate_count")

    @property
    @pulumi.getter(name="rateDuration")
    def rate_duration(self) -> Optional[int]:
        return pulumi.get(self, "rate_duration")

    @property
    @pulumi.getter(name="rateMode")
    def rate_mode(self) -> Optional[str]:
        return pulumi.get(self, "rate_mode")

    @property
    @pulumi.getter(name="rateTrack")
    def rate_track(self) -> Optional[str]:
        return pulumi.get(self, "rate_track")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.IpsSensorEntryRule']]:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vulnTypes")
    def vuln_types(self) -> Optional[Sequence['outputs.IpsSensorEntryVulnType']]:
        return pulumi.get(self, "vuln_types")


@pulumi.output_type
class IpsSensorEntryCfe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cveEntry":
            suggest = "cve_entry"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsSensorEntryCfe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsSensorEntryCfe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsSensorEntryCfe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cve_entry: Optional[str] = None):
        if cve_entry is not None:
            pulumi.set(__self__, "cve_entry", cve_entry)

    @property
    @pulumi.getter(name="cveEntry")
    def cve_entry(self) -> Optional[str]:
        return pulumi.get(self, "cve_entry")


@pulumi.output_type
class IpsSensorEntryExemptIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstIp":
            suggest = "dst_ip"
        elif key == "srcIp":
            suggest = "src_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsSensorEntryExemptIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsSensorEntryExemptIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsSensorEntryExemptIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 src_ip: Optional[str] = None):
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[str]:
        return pulumi.get(self, "dst_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[str]:
        return pulumi.get(self, "src_ip")


@pulumi.output_type
class IpsSensorEntryRule(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class IpsSensorEntryVulnType(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class IpsSensorFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logPacket":
            suggest = "log_packet"
        elif key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsSensorFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsSensorFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsSensorFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 application: Optional[str] = None,
                 location: Optional[str] = None,
                 log: Optional[str] = None,
                 log_packet: Optional[str] = None,
                 name: Optional[str] = None,
                 os: Optional[str] = None,
                 protocol: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[int] = None,
                 quarantine_log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def application(self) -> Optional[str]:
        return pulumi.get(self, "application")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[str]:
        return pulumi.get(self, "log_packet")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[int]:
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class IpsSensorOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exemptIps":
            suggest = "exempt_ips"
        elif key == "logPacket":
            suggest = "log_packet"
        elif key == "quarantineExpiry":
            suggest = "quarantine_expiry"
        elif key == "quarantineLog":
            suggest = "quarantine_log"
        elif key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsSensorOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsSensorOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsSensorOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 exempt_ips: Optional[Sequence['outputs.IpsSensorOverrideExemptIp']] = None,
                 log: Optional[str] = None,
                 log_packet: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 quarantine_expiry: Optional[int] = None,
                 quarantine_log: Optional[str] = None,
                 rule_id: Optional[int] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[Sequence['outputs.IpsSensorOverrideExemptIp']]:
        return pulumi.get(self, "exempt_ips")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[str]:
        return pulumi.get(self, "log_packet")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[int]:
        return pulumi.get(self, "quarantine_expiry")

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[str]:
        return pulumi.get(self, "quarantine_log")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class IpsSensorOverrideExemptIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstIp":
            suggest = "dst_ip"
        elif key == "srcIp":
            suggest = "src_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsSensorOverrideExemptIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsSensorOverrideExemptIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsSensorOverrideExemptIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 src_ip: Optional[str] = None):
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[str]:
        return pulumi.get(self, "dst_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[str]:
        return pulumi.get(self, "src_ip")


@pulumi.output_type
class LogDiskFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogDiskFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogDiskFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogDiskFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogFortianalyzer2FilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogFortianalyzer2FilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogFortianalyzer2FilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogFortianalyzer2FilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogFortianalyzer2OverrideFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogFortianalyzer2OverrideFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogFortianalyzer2OverrideFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogFortianalyzer2OverrideFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogFortianalyzer2OverrideSettingSerial(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogFortianalyzer2SettingSerial(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogFortianalyzer3FilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogFortianalyzer3FilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogFortianalyzer3FilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogFortianalyzer3FilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogFortianalyzer3OverrideFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogFortianalyzer3OverrideFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogFortianalyzer3OverrideFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogFortianalyzer3OverrideFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogFortianalyzer3OverrideSettingSerial(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogFortianalyzer3SettingSerial(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogFortianalyzerCloudFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogFortianalyzerCloudFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogFortianalyzerCloudFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogFortianalyzerCloudFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogFortianalyzerCloudOverrideFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogFortianalyzerCloudOverrideFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogFortianalyzerCloudOverrideFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogFortianalyzerCloudOverrideFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogFortianalyzerCloudSettingSerial(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogFortianalyzerFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogFortianalyzerFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogFortianalyzerFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogFortianalyzerFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogFortianalyzerOverrideFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogFortianalyzerOverrideFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogFortianalyzerOverrideFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogFortianalyzerOverrideFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogFortianalyzerOverrideSettingSerial(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogFortianalyzerSettingSerial(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogFortiguardFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogFortiguardFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogFortiguardFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogFortiguardFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogFortiguardOverrideFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogFortiguardOverrideFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogFortiguardOverrideFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogFortiguardOverrideFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogMemoryFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogMemoryFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogMemoryFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogMemoryFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogNullDeviceFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogNullDeviceFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogNullDeviceFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogNullDeviceFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogSettingCustomLogField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSettingCustomLogField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSettingCustomLogField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSettingCustomLogField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: Optional[str] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[str]:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class LogSyslogd2FilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSyslogd2FilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSyslogd2FilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSyslogd2FilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogSyslogd2OverrideFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSyslogd2OverrideFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSyslogd2OverrideFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSyslogd2OverrideFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogSyslogd2OverrideSettingCustomFieldName(dict):
    def __init__(__self__, *,
                 custom: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[str]:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogSyslogd2SettingCustomFieldName(dict):
    def __init__(__self__, *,
                 custom: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[str]:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogSyslogd3FilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSyslogd3FilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSyslogd3FilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSyslogd3FilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogSyslogd3OverrideFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSyslogd3OverrideFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSyslogd3OverrideFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSyslogd3OverrideFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogSyslogd3OverrideSettingCustomFieldName(dict):
    def __init__(__self__, *,
                 custom: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[str]:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogSyslogd3SettingCustomFieldName(dict):
    def __init__(__self__, *,
                 custom: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[str]:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogSyslogd4FilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSyslogd4FilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSyslogd4FilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSyslogd4FilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogSyslogd4OverrideFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSyslogd4OverrideFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSyslogd4OverrideFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSyslogd4OverrideFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogSyslogd4OverrideSettingCustomFieldName(dict):
    def __init__(__self__, *,
                 custom: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[str]:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogSyslogd4SettingCustomFieldName(dict):
    def __init__(__self__, *,
                 custom: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[str]:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogSyslogdFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSyslogdFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSyslogdFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSyslogdFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogSyslogdOverrideFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSyslogdOverrideFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSyslogdOverrideFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSyslogdOverrideFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LogSyslogdOverrideSettingCustomFieldName(dict):
    def __init__(__self__, *,
                 custom: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[str]:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogSyslogdSettingCustomFieldName(dict):
    def __init__(__self__, *,
                 custom: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[str]:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class LogThreatWeightApplication(dict):
    def __init__(__self__, *,
                 category: Optional[int] = None,
                 id: Optional[int] = None,
                 level: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def category(self) -> Optional[int]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")


@pulumi.output_type
class LogThreatWeightGeolocation(dict):
    def __init__(__self__, *,
                 country: Optional[str] = None,
                 id: Optional[int] = None,
                 level: Optional[str] = None):
        if country is not None:
            pulumi.set(__self__, "country", country)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")


@pulumi.output_type
class LogThreatWeightIps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "criticalSeverity":
            suggest = "critical_severity"
        elif key == "highSeverity":
            suggest = "high_severity"
        elif key == "infoSeverity":
            suggest = "info_severity"
        elif key == "lowSeverity":
            suggest = "low_severity"
        elif key == "mediumSeverity":
            suggest = "medium_severity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogThreatWeightIps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogThreatWeightIps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogThreatWeightIps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 critical_severity: Optional[str] = None,
                 high_severity: Optional[str] = None,
                 info_severity: Optional[str] = None,
                 low_severity: Optional[str] = None,
                 medium_severity: Optional[str] = None):
        if critical_severity is not None:
            pulumi.set(__self__, "critical_severity", critical_severity)
        if high_severity is not None:
            pulumi.set(__self__, "high_severity", high_severity)
        if info_severity is not None:
            pulumi.set(__self__, "info_severity", info_severity)
        if low_severity is not None:
            pulumi.set(__self__, "low_severity", low_severity)
        if medium_severity is not None:
            pulumi.set(__self__, "medium_severity", medium_severity)

    @property
    @pulumi.getter(name="criticalSeverity")
    def critical_severity(self) -> Optional[str]:
        return pulumi.get(self, "critical_severity")

    @property
    @pulumi.getter(name="highSeverity")
    def high_severity(self) -> Optional[str]:
        return pulumi.get(self, "high_severity")

    @property
    @pulumi.getter(name="infoSeverity")
    def info_severity(self) -> Optional[str]:
        return pulumi.get(self, "info_severity")

    @property
    @pulumi.getter(name="lowSeverity")
    def low_severity(self) -> Optional[str]:
        return pulumi.get(self, "low_severity")

    @property
    @pulumi.getter(name="mediumSeverity")
    def medium_severity(self) -> Optional[str]:
        return pulumi.get(self, "medium_severity")


@pulumi.output_type
class LogThreatWeightLevel(dict):
    def __init__(__self__, *,
                 critical: Optional[int] = None,
                 high: Optional[int] = None,
                 low: Optional[int] = None,
                 medium: Optional[int] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if medium is not None:
            pulumi.set(__self__, "medium", medium)

    @property
    @pulumi.getter
    def critical(self) -> Optional[int]:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def high(self) -> Optional[int]:
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def low(self) -> Optional[int]:
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def medium(self) -> Optional[int]:
        return pulumi.get(self, "medium")


@pulumi.output_type
class LogThreatWeightMalware(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "botnetConnection":
            suggest = "botnet_connection"
        elif key == "commandBlocked":
            suggest = "command_blocked"
        elif key == "contentDisarm":
            suggest = "content_disarm"
        elif key == "emsThreatFeed":
            suggest = "ems_threat_feed"
        elif key == "fileBlocked":
            suggest = "file_blocked"
        elif key == "fsaHighRisk":
            suggest = "fsa_high_risk"
        elif key == "fsaMalicious":
            suggest = "fsa_malicious"
        elif key == "fsaMediumRisk":
            suggest = "fsa_medium_risk"
        elif key == "inlineBlock":
            suggest = "inline_block"
        elif key == "malwareList":
            suggest = "malware_list"
        elif key == "switchProto":
            suggest = "switch_proto"
        elif key == "virusFileTypeExecutable":
            suggest = "virus_file_type_executable"
        elif key == "virusInfected":
            suggest = "virus_infected"
        elif key == "virusOutbreakPrevention":
            suggest = "virus_outbreak_prevention"
        elif key == "virusScanError":
            suggest = "virus_scan_error"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogThreatWeightMalware. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogThreatWeightMalware.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogThreatWeightMalware.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 botnet_connection: Optional[str] = None,
                 command_blocked: Optional[str] = None,
                 content_disarm: Optional[str] = None,
                 ems_threat_feed: Optional[str] = None,
                 file_blocked: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 fsa_high_risk: Optional[str] = None,
                 fsa_malicious: Optional[str] = None,
                 fsa_medium_risk: Optional[str] = None,
                 inline_block: Optional[str] = None,
                 malware_list: Optional[str] = None,
                 mimefragmented: Optional[str] = None,
                 oversized: Optional[str] = None,
                 switch_proto: Optional[str] = None,
                 virus_file_type_executable: Optional[str] = None,
                 virus_infected: Optional[str] = None,
                 virus_outbreak_prevention: Optional[str] = None,
                 virus_scan_error: Optional[str] = None):
        if botnet_connection is not None:
            pulumi.set(__self__, "botnet_connection", botnet_connection)
        if command_blocked is not None:
            pulumi.set(__self__, "command_blocked", command_blocked)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if ems_threat_feed is not None:
            pulumi.set(__self__, "ems_threat_feed", ems_threat_feed)
        if file_blocked is not None:
            pulumi.set(__self__, "file_blocked", file_blocked)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if fsa_high_risk is not None:
            pulumi.set(__self__, "fsa_high_risk", fsa_high_risk)
        if fsa_malicious is not None:
            pulumi.set(__self__, "fsa_malicious", fsa_malicious)
        if fsa_medium_risk is not None:
            pulumi.set(__self__, "fsa_medium_risk", fsa_medium_risk)
        if inline_block is not None:
            pulumi.set(__self__, "inline_block", inline_block)
        if malware_list is not None:
            pulumi.set(__self__, "malware_list", malware_list)
        if mimefragmented is not None:
            pulumi.set(__self__, "mimefragmented", mimefragmented)
        if oversized is not None:
            pulumi.set(__self__, "oversized", oversized)
        if switch_proto is not None:
            pulumi.set(__self__, "switch_proto", switch_proto)
        if virus_file_type_executable is not None:
            pulumi.set(__self__, "virus_file_type_executable", virus_file_type_executable)
        if virus_infected is not None:
            pulumi.set(__self__, "virus_infected", virus_infected)
        if virus_outbreak_prevention is not None:
            pulumi.set(__self__, "virus_outbreak_prevention", virus_outbreak_prevention)
        if virus_scan_error is not None:
            pulumi.set(__self__, "virus_scan_error", virus_scan_error)

    @property
    @pulumi.getter(name="botnetConnection")
    def botnet_connection(self) -> Optional[str]:
        return pulumi.get(self, "botnet_connection")

    @property
    @pulumi.getter(name="commandBlocked")
    def command_blocked(self) -> Optional[str]:
        return pulumi.get(self, "command_blocked")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[str]:
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter(name="emsThreatFeed")
    def ems_threat_feed(self) -> Optional[str]:
        return pulumi.get(self, "ems_threat_feed")

    @property
    @pulumi.getter(name="fileBlocked")
    def file_blocked(self) -> Optional[str]:
        return pulumi.get(self, "file_blocked")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter(name="fsaHighRisk")
    def fsa_high_risk(self) -> Optional[str]:
        return pulumi.get(self, "fsa_high_risk")

    @property
    @pulumi.getter(name="fsaMalicious")
    def fsa_malicious(self) -> Optional[str]:
        return pulumi.get(self, "fsa_malicious")

    @property
    @pulumi.getter(name="fsaMediumRisk")
    def fsa_medium_risk(self) -> Optional[str]:
        return pulumi.get(self, "fsa_medium_risk")

    @property
    @pulumi.getter(name="inlineBlock")
    def inline_block(self) -> Optional[str]:
        return pulumi.get(self, "inline_block")

    @property
    @pulumi.getter(name="malwareList")
    def malware_list(self) -> Optional[str]:
        return pulumi.get(self, "malware_list")

    @property
    @pulumi.getter
    def mimefragmented(self) -> Optional[str]:
        return pulumi.get(self, "mimefragmented")

    @property
    @pulumi.getter
    def oversized(self) -> Optional[str]:
        return pulumi.get(self, "oversized")

    @property
    @pulumi.getter(name="switchProto")
    def switch_proto(self) -> Optional[str]:
        return pulumi.get(self, "switch_proto")

    @property
    @pulumi.getter(name="virusFileTypeExecutable")
    def virus_file_type_executable(self) -> Optional[str]:
        return pulumi.get(self, "virus_file_type_executable")

    @property
    @pulumi.getter(name="virusInfected")
    def virus_infected(self) -> Optional[str]:
        return pulumi.get(self, "virus_infected")

    @property
    @pulumi.getter(name="virusOutbreakPrevention")
    def virus_outbreak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "virus_outbreak_prevention")

    @property
    @pulumi.getter(name="virusScanError")
    def virus_scan_error(self) -> Optional[str]:
        return pulumi.get(self, "virus_scan_error")


@pulumi.output_type
class LogThreatWeightWeb(dict):
    def __init__(__self__, *,
                 category: Optional[int] = None,
                 id: Optional[int] = None,
                 level: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def category(self) -> Optional[int]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")


@pulumi.output_type
class LogWebtrendsFilterFreeStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogWebtrendsFilterFreeStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogWebtrendsFilterFreeStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogWebtrendsFilterFreeStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 filter: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 id: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class NsxtServiceChainServiceIndex(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reverseIndex":
            suggest = "reverse_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NsxtServiceChainServiceIndex. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NsxtServiceChainServiceIndex.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NsxtServiceChainServiceIndex.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 reverse_index: Optional[int] = None,
                 vd: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reverse_index is not None:
            pulumi.set(__self__, "reverse_index", reverse_index)
        if vd is not None:
            pulumi.set(__self__, "vd", vd)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reverseIndex")
    def reverse_index(self) -> Optional[int]:
        return pulumi.get(self, "reverse_index")

    @property
    @pulumi.getter
    def vd(self) -> Optional[str]:
        return pulumi.get(self, "vd")


@pulumi.output_type
class ReportChartCategorySeries(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontSize":
            suggest = "font_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportChartCategorySeries. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportChartCategorySeries.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportChartCategorySeries.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 databind: Optional[str] = None,
                 font_size: Optional[int] = None):
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)

    @property
    @pulumi.getter
    def databind(self) -> Optional[str]:
        return pulumi.get(self, "databind")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[int]:
        return pulumi.get(self, "font_size")


@pulumi.output_type
class ReportChartColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detailUnit":
            suggest = "detail_unit"
        elif key == "detailValue":
            suggest = "detail_value"
        elif key == "footerUnit":
            suggest = "footer_unit"
        elif key == "footerValue":
            suggest = "footer_value"
        elif key == "headerValue":
            suggest = "header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportChartColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportChartColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportChartColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detail_unit: Optional[str] = None,
                 detail_value: Optional[str] = None,
                 footer_unit: Optional[str] = None,
                 footer_value: Optional[str] = None,
                 header_value: Optional[str] = None,
                 id: Optional[int] = None,
                 mappings: Optional[Sequence['outputs.ReportChartColumnMapping']] = None):
        if detail_unit is not None:
            pulumi.set(__self__, "detail_unit", detail_unit)
        if detail_value is not None:
            pulumi.set(__self__, "detail_value", detail_value)
        if footer_unit is not None:
            pulumi.set(__self__, "footer_unit", footer_unit)
        if footer_value is not None:
            pulumi.set(__self__, "footer_value", footer_value)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)

    @property
    @pulumi.getter(name="detailUnit")
    def detail_unit(self) -> Optional[str]:
        return pulumi.get(self, "detail_unit")

    @property
    @pulumi.getter(name="detailValue")
    def detail_value(self) -> Optional[str]:
        return pulumi.get(self, "detail_value")

    @property
    @pulumi.getter(name="footerUnit")
    def footer_unit(self) -> Optional[str]:
        return pulumi.get(self, "footer_unit")

    @property
    @pulumi.getter(name="footerValue")
    def footer_value(self) -> Optional[str]:
        return pulumi.get(self, "footer_value")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mappings(self) -> Optional[Sequence['outputs.ReportChartColumnMapping']]:
        return pulumi.get(self, "mappings")


@pulumi.output_type
class ReportChartColumnMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportChartColumnMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportChartColumnMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportChartColumnMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 displayname: Optional[str] = None,
                 id: Optional[int] = None,
                 op: Optional[str] = None,
                 value1: Optional[str] = None,
                 value2: Optional[str] = None,
                 value_type: Optional[str] = None):
        if displayname is not None:
            pulumi.set(__self__, "displayname", displayname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if op is not None:
            pulumi.set(__self__, "op", op)
        if value1 is not None:
            pulumi.set(__self__, "value1", value1)
        if value2 is not None:
            pulumi.set(__self__, "value2", value2)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def displayname(self) -> Optional[str]:
        return pulumi.get(self, "displayname")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def value1(self) -> Optional[str]:
        return pulumi.get(self, "value1")

    @property
    @pulumi.getter
    def value2(self) -> Optional[str]:
        return pulumi.get(self, "value2")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class ReportChartDrillDownChart(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chartName":
            suggest = "chart_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportChartDrillDownChart. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportChartDrillDownChart.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportChartDrillDownChart.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart_name: Optional[str] = None,
                 id: Optional[int] = None,
                 status: Optional[str] = None):
        if chart_name is not None:
            pulumi.set(__self__, "chart_name", chart_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="chartName")
    def chart_name(self) -> Optional[str]:
        return pulumi.get(self, "chart_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class ReportChartValueSeries(dict):
    def __init__(__self__, *,
                 databind: Optional[str] = None):
        if databind is not None:
            pulumi.set(__self__, "databind", databind)

    @property
    @pulumi.getter
    def databind(self) -> Optional[str]:
        return pulumi.get(self, "databind")


@pulumi.output_type
class ReportChartXSeries(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "captionFontSize":
            suggest = "caption_font_size"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "isCategory":
            suggest = "is_category"
        elif key == "labelAngle":
            suggest = "label_angle"
        elif key == "scaleDirection":
            suggest = "scale_direction"
        elif key == "scaleFormat":
            suggest = "scale_format"
        elif key == "scaleStep":
            suggest = "scale_step"
        elif key == "scaleUnit":
            suggest = "scale_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportChartXSeries. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportChartXSeries.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportChartXSeries.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 caption: Optional[str] = None,
                 caption_font_size: Optional[int] = None,
                 databind: Optional[str] = None,
                 font_size: Optional[int] = None,
                 is_category: Optional[str] = None,
                 label_angle: Optional[str] = None,
                 scale_direction: Optional[str] = None,
                 scale_format: Optional[str] = None,
                 scale_step: Optional[int] = None,
                 scale_unit: Optional[str] = None,
                 unit: Optional[str] = None):
        if caption is not None:
            pulumi.set(__self__, "caption", caption)
        if caption_font_size is not None:
            pulumi.set(__self__, "caption_font_size", caption_font_size)
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if is_category is not None:
            pulumi.set(__self__, "is_category", is_category)
        if label_angle is not None:
            pulumi.set(__self__, "label_angle", label_angle)
        if scale_direction is not None:
            pulumi.set(__self__, "scale_direction", scale_direction)
        if scale_format is not None:
            pulumi.set(__self__, "scale_format", scale_format)
        if scale_step is not None:
            pulumi.set(__self__, "scale_step", scale_step)
        if scale_unit is not None:
            pulumi.set(__self__, "scale_unit", scale_unit)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def caption(self) -> Optional[str]:
        return pulumi.get(self, "caption")

    @property
    @pulumi.getter(name="captionFontSize")
    def caption_font_size(self) -> Optional[int]:
        return pulumi.get(self, "caption_font_size")

    @property
    @pulumi.getter
    def databind(self) -> Optional[str]:
        return pulumi.get(self, "databind")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[int]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="isCategory")
    def is_category(self) -> Optional[str]:
        return pulumi.get(self, "is_category")

    @property
    @pulumi.getter(name="labelAngle")
    def label_angle(self) -> Optional[str]:
        return pulumi.get(self, "label_angle")

    @property
    @pulumi.getter(name="scaleDirection")
    def scale_direction(self) -> Optional[str]:
        return pulumi.get(self, "scale_direction")

    @property
    @pulumi.getter(name="scaleFormat")
    def scale_format(self) -> Optional[str]:
        return pulumi.get(self, "scale_format")

    @property
    @pulumi.getter(name="scaleStep")
    def scale_step(self) -> Optional[int]:
        return pulumi.get(self, "scale_step")

    @property
    @pulumi.getter(name="scaleUnit")
    def scale_unit(self) -> Optional[str]:
        return pulumi.get(self, "scale_unit")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class ReportChartYSeries(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "captionFontSize":
            suggest = "caption_font_size"
        elif key == "extraDatabind":
            suggest = "extra_databind"
        elif key == "extraY":
            suggest = "extra_y"
        elif key == "extraYLegend":
            suggest = "extra_y_legend"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "labelAngle":
            suggest = "label_angle"
        elif key == "yLegend":
            suggest = "y_legend"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportChartYSeries. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportChartYSeries.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportChartYSeries.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 caption: Optional[str] = None,
                 caption_font_size: Optional[int] = None,
                 databind: Optional[str] = None,
                 extra_databind: Optional[str] = None,
                 extra_y: Optional[str] = None,
                 extra_y_legend: Optional[str] = None,
                 font_size: Optional[int] = None,
                 group: Optional[str] = None,
                 label_angle: Optional[str] = None,
                 unit: Optional[str] = None,
                 y_legend: Optional[str] = None):
        if caption is not None:
            pulumi.set(__self__, "caption", caption)
        if caption_font_size is not None:
            pulumi.set(__self__, "caption_font_size", caption_font_size)
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if extra_databind is not None:
            pulumi.set(__self__, "extra_databind", extra_databind)
        if extra_y is not None:
            pulumi.set(__self__, "extra_y", extra_y)
        if extra_y_legend is not None:
            pulumi.set(__self__, "extra_y_legend", extra_y_legend)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if label_angle is not None:
            pulumi.set(__self__, "label_angle", label_angle)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if y_legend is not None:
            pulumi.set(__self__, "y_legend", y_legend)

    @property
    @pulumi.getter
    def caption(self) -> Optional[str]:
        return pulumi.get(self, "caption")

    @property
    @pulumi.getter(name="captionFontSize")
    def caption_font_size(self) -> Optional[int]:
        return pulumi.get(self, "caption_font_size")

    @property
    @pulumi.getter
    def databind(self) -> Optional[str]:
        return pulumi.get(self, "databind")

    @property
    @pulumi.getter(name="extraDatabind")
    def extra_databind(self) -> Optional[str]:
        return pulumi.get(self, "extra_databind")

    @property
    @pulumi.getter(name="extraY")
    def extra_y(self) -> Optional[str]:
        return pulumi.get(self, "extra_y")

    @property
    @pulumi.getter(name="extraYLegend")
    def extra_y_legend(self) -> Optional[str]:
        return pulumi.get(self, "extra_y_legend")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[int]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="labelAngle")
    def label_angle(self) -> Optional[str]:
        return pulumi.get(self, "label_angle")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter(name="yLegend")
    def y_legend(self) -> Optional[str]:
        return pulumi.get(self, "y_legend")


@pulumi.output_type
class ReportDatasetField(dict):
    def __init__(__self__, *,
                 displayname: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if displayname is not None:
            pulumi.set(__self__, "displayname", displayname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def displayname(self) -> Optional[str]:
        return pulumi.get(self, "displayname")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ReportDatasetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportDatasetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportDatasetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportDatasetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 field: Optional[str] = None,
                 id: Optional[int] = None):
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ReportLayoutBodyItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chartOptions":
            suggest = "chart_options"
        elif key == "drillDownItems":
            suggest = "drill_down_items"
        elif key == "drillDownTypes":
            suggest = "drill_down_types"
        elif key == "imgSrc":
            suggest = "img_src"
        elif key == "listComponent":
            suggest = "list_component"
        elif key == "miscComponent":
            suggest = "misc_component"
        elif key == "tableCaptionStyle":
            suggest = "table_caption_style"
        elif key == "tableColumnWidths":
            suggest = "table_column_widths"
        elif key == "tableEvenRowStyle":
            suggest = "table_even_row_style"
        elif key == "tableHeadStyle":
            suggest = "table_head_style"
        elif key == "tableOddRowStyle":
            suggest = "table_odd_row_style"
        elif key == "textComponent":
            suggest = "text_component"
        elif key == "topN":
            suggest = "top_n"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportLayoutBodyItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportLayoutBodyItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportLayoutBodyItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 chart_options: Optional[str] = None,
                 column: Optional[int] = None,
                 content: Optional[str] = None,
                 description: Optional[str] = None,
                 drill_down_items: Optional[str] = None,
                 drill_down_types: Optional[str] = None,
                 hide: Optional[str] = None,
                 id: Optional[int] = None,
                 img_src: Optional[str] = None,
                 list_component: Optional[str] = None,
                 lists: Optional[Sequence['outputs.ReportLayoutBodyItemList']] = None,
                 misc_component: Optional[str] = None,
                 parameters: Optional[Sequence['outputs.ReportLayoutBodyItemParameter']] = None,
                 style: Optional[str] = None,
                 table_caption_style: Optional[str] = None,
                 table_column_widths: Optional[str] = None,
                 table_even_row_style: Optional[str] = None,
                 table_head_style: Optional[str] = None,
                 table_odd_row_style: Optional[str] = None,
                 text_component: Optional[str] = None,
                 title: Optional[str] = None,
                 top_n: Optional[int] = None,
                 type: Optional[str] = None):
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if chart_options is not None:
            pulumi.set(__self__, "chart_options", chart_options)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drill_down_items is not None:
            pulumi.set(__self__, "drill_down_items", drill_down_items)
        if drill_down_types is not None:
            pulumi.set(__self__, "drill_down_types", drill_down_types)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if list_component is not None:
            pulumi.set(__self__, "list_component", list_component)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if misc_component is not None:
            pulumi.set(__self__, "misc_component", misc_component)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if table_caption_style is not None:
            pulumi.set(__self__, "table_caption_style", table_caption_style)
        if table_column_widths is not None:
            pulumi.set(__self__, "table_column_widths", table_column_widths)
        if table_even_row_style is not None:
            pulumi.set(__self__, "table_even_row_style", table_even_row_style)
        if table_head_style is not None:
            pulumi.set(__self__, "table_head_style", table_head_style)
        if table_odd_row_style is not None:
            pulumi.set(__self__, "table_odd_row_style", table_odd_row_style)
        if text_component is not None:
            pulumi.set(__self__, "text_component", text_component)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if top_n is not None:
            pulumi.set(__self__, "top_n", top_n)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter(name="chartOptions")
    def chart_options(self) -> Optional[str]:
        return pulumi.get(self, "chart_options")

    @property
    @pulumi.getter
    def column(self) -> Optional[int]:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="drillDownItems")
    def drill_down_items(self) -> Optional[str]:
        return pulumi.get(self, "drill_down_items")

    @property
    @pulumi.getter(name="drillDownTypes")
    def drill_down_types(self) -> Optional[str]:
        return pulumi.get(self, "drill_down_types")

    @property
    @pulumi.getter
    def hide(self) -> Optional[str]:
        return pulumi.get(self, "hide")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[str]:
        return pulumi.get(self, "img_src")

    @property
    @pulumi.getter(name="listComponent")
    def list_component(self) -> Optional[str]:
        return pulumi.get(self, "list_component")

    @property
    @pulumi.getter
    def lists(self) -> Optional[Sequence['outputs.ReportLayoutBodyItemList']]:
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="miscComponent")
    def misc_component(self) -> Optional[str]:
        return pulumi.get(self, "misc_component")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ReportLayoutBodyItemParameter']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter(name="tableCaptionStyle")
    def table_caption_style(self) -> Optional[str]:
        return pulumi.get(self, "table_caption_style")

    @property
    @pulumi.getter(name="tableColumnWidths")
    def table_column_widths(self) -> Optional[str]:
        return pulumi.get(self, "table_column_widths")

    @property
    @pulumi.getter(name="tableEvenRowStyle")
    def table_even_row_style(self) -> Optional[str]:
        return pulumi.get(self, "table_even_row_style")

    @property
    @pulumi.getter(name="tableHeadStyle")
    def table_head_style(self) -> Optional[str]:
        return pulumi.get(self, "table_head_style")

    @property
    @pulumi.getter(name="tableOddRowStyle")
    def table_odd_row_style(self) -> Optional[str]:
        return pulumi.get(self, "table_odd_row_style")

    @property
    @pulumi.getter(name="textComponent")
    def text_component(self) -> Optional[str]:
        return pulumi.get(self, "text_component")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="topN")
    def top_n(self) -> Optional[int]:
        return pulumi.get(self, "top_n")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ReportLayoutBodyItemList(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 id: Optional[int] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ReportLayoutBodyItemParameter(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ReportLayoutPage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnBreakBefore":
            suggest = "column_break_before"
        elif key == "pageBreakBefore":
            suggest = "page_break_before"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportLayoutPage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportLayoutPage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportLayoutPage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_break_before: Optional[str] = None,
                 footer: Optional['outputs.ReportLayoutPageFooter'] = None,
                 header: Optional['outputs.ReportLayoutPageHeader'] = None,
                 options: Optional[str] = None,
                 page_break_before: Optional[str] = None,
                 paper: Optional[str] = None):
        if column_break_before is not None:
            pulumi.set(__self__, "column_break_before", column_break_before)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if page_break_before is not None:
            pulumi.set(__self__, "page_break_before", page_break_before)
        if paper is not None:
            pulumi.set(__self__, "paper", paper)

    @property
    @pulumi.getter(name="columnBreakBefore")
    def column_break_before(self) -> Optional[str]:
        return pulumi.get(self, "column_break_before")

    @property
    @pulumi.getter
    def footer(self) -> Optional['outputs.ReportLayoutPageFooter']:
        return pulumi.get(self, "footer")

    @property
    @pulumi.getter
    def header(self) -> Optional['outputs.ReportLayoutPageHeader']:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="pageBreakBefore")
    def page_break_before(self) -> Optional[str]:
        return pulumi.get(self, "page_break_before")

    @property
    @pulumi.getter
    def paper(self) -> Optional[str]:
        return pulumi.get(self, "paper")


@pulumi.output_type
class ReportLayoutPageFooter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "footerItems":
            suggest = "footer_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportLayoutPageFooter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportLayoutPageFooter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportLayoutPageFooter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 footer_items: Optional[Sequence['outputs.ReportLayoutPageFooterFooterItem']] = None,
                 style: Optional[str] = None):
        if footer_items is not None:
            pulumi.set(__self__, "footer_items", footer_items)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="footerItems")
    def footer_items(self) -> Optional[Sequence['outputs.ReportLayoutPageFooterFooterItem']]:
        return pulumi.get(self, "footer_items")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")


@pulumi.output_type
class ReportLayoutPageFooterFooterItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imgSrc":
            suggest = "img_src"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportLayoutPageFooterFooterItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportLayoutPageFooterFooterItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportLayoutPageFooterFooterItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 img_src: Optional[str] = None,
                 style: Optional[str] = None,
                 type: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[str]:
        return pulumi.get(self, "img_src")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ReportLayoutPageHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerItems":
            suggest = "header_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportLayoutPageHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportLayoutPageHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportLayoutPageHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_items: Optional[Sequence['outputs.ReportLayoutPageHeaderHeaderItem']] = None,
                 style: Optional[str] = None):
        if header_items is not None:
            pulumi.set(__self__, "header_items", header_items)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="headerItems")
    def header_items(self) -> Optional[Sequence['outputs.ReportLayoutPageHeaderHeaderItem']]:
        return pulumi.get(self, "header_items")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")


@pulumi.output_type
class ReportLayoutPageHeaderHeaderItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imgSrc":
            suggest = "img_src"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportLayoutPageHeaderHeaderItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportLayoutPageHeaderHeaderItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportLayoutPageHeaderHeaderItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 img_src: Optional[str] = None,
                 style: Optional[str] = None,
                 type: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[str]:
        return pulumi.get(self, "img_src")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class RouterAccessList6Rule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterAccessList6Rule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterAccessList6Rule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterAccessList6Rule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 exact_match: Optional[str] = None,
                 flags: Optional[int] = None,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class RouterAccessListRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterAccessListRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterAccessListRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterAccessListRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 exact_match: Optional[str] = None,
                 flags: Optional[int] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None,
                 wildcard: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[str]:
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class RouterAspathListRule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 regexp: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        return pulumi.get(self, "regexp")


@pulumi.output_type
class RouterBfd6MultihopTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMode":
            suggest = "auth_mode"
        elif key == "bfdDesiredMinTx":
            suggest = "bfd_desired_min_tx"
        elif key == "bfdDetectMult":
            suggest = "bfd_detect_mult"
        elif key == "bfdRequiredMinRx":
            suggest = "bfd_required_min_rx"
        elif key == "md5Key":
            suggest = "md5_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBfd6MultihopTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBfd6MultihopTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBfd6MultihopTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_mode: Optional[str] = None,
                 bfd_desired_min_tx: Optional[int] = None,
                 bfd_detect_mult: Optional[int] = None,
                 bfd_required_min_rx: Optional[int] = None,
                 dst: Optional[str] = None,
                 id: Optional[int] = None,
                 md5_key: Optional[str] = None,
                 src: Optional[str] = None):
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if bfd_desired_min_tx is not None:
            pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult is not None:
            pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_required_min_rx is not None:
            pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if src is not None:
            pulumi.set(__self__, "src", src)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[str]:
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> Optional[int]:
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> Optional[int]:
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> Optional[int]:
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter
    def dst(self) -> Optional[str]:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[str]:
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter
    def src(self) -> Optional[str]:
        return pulumi.get(self, "src")


@pulumi.output_type
class RouterBfd6Neighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ip6Address":
            suggest = "ip6_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBfd6Neighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBfd6Neighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBfd6Neighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 ip6_address: Optional[str] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[str]:
        return pulumi.get(self, "ip6_address")


@pulumi.output_type
class RouterBfdMultihopTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMode":
            suggest = "auth_mode"
        elif key == "bfdDesiredMinTx":
            suggest = "bfd_desired_min_tx"
        elif key == "bfdDetectMult":
            suggest = "bfd_detect_mult"
        elif key == "bfdRequiredMinRx":
            suggest = "bfd_required_min_rx"
        elif key == "md5Key":
            suggest = "md5_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBfdMultihopTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBfdMultihopTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBfdMultihopTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_mode: Optional[str] = None,
                 bfd_desired_min_tx: Optional[int] = None,
                 bfd_detect_mult: Optional[int] = None,
                 bfd_required_min_rx: Optional[int] = None,
                 dst: Optional[str] = None,
                 id: Optional[int] = None,
                 md5_key: Optional[str] = None,
                 src: Optional[str] = None):
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if bfd_desired_min_tx is not None:
            pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult is not None:
            pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_required_min_rx is not None:
            pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if src is not None:
            pulumi.set(__self__, "src", src)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[str]:
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> Optional[int]:
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> Optional[int]:
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> Optional[int]:
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter
    def dst(self) -> Optional[str]:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[str]:
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter
    def src(self) -> Optional[str]:
        return pulumi.get(self, "src")


@pulumi.output_type
class RouterBfdNeighbor(dict):
    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 ip: Optional[str] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class RouterBgpAdminDistance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "neighbourPrefix":
            suggest = "neighbour_prefix"
        elif key == "routeList":
            suggest = "route_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpAdminDistance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpAdminDistance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpAdminDistance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 distance: Optional[int] = None,
                 id: Optional[int] = None,
                 neighbour_prefix: Optional[str] = None,
                 route_list: Optional[str] = None):
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if neighbour_prefix is not None:
            pulumi.set(__self__, "neighbour_prefix", neighbour_prefix)
        if route_list is not None:
            pulumi.set(__self__, "route_list", route_list)

    @property
    @pulumi.getter
    def distance(self) -> Optional[int]:
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="neighbourPrefix")
    def neighbour_prefix(self) -> Optional[str]:
        return pulumi.get(self, "neighbour_prefix")

    @property
    @pulumi.getter(name="routeList")
    def route_list(self) -> Optional[str]:
        return pulumi.get(self, "route_list")


@pulumi.output_type
class RouterBgpAggregateAddress6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asSet":
            suggest = "as_set"
        elif key == "summaryOnly":
            suggest = "summary_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpAggregateAddress6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpAggregateAddress6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpAggregateAddress6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_set: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None,
                 summary_only: Optional[str] = None):
        if as_set is not None:
            pulumi.set(__self__, "as_set", as_set)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> Optional[str]:
        return pulumi.get(self, "as_set")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[str]:
        return pulumi.get(self, "summary_only")


@pulumi.output_type
class RouterBgpAggregateAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asSet":
            suggest = "as_set"
        elif key == "summaryOnly":
            suggest = "summary_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpAggregateAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpAggregateAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpAggregateAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_set: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None,
                 summary_only: Optional[str] = None):
        if as_set is not None:
            pulumi.set(__self__, "as_set", as_set)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> Optional[str]:
        return pulumi.get(self, "as_set")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[str]:
        return pulumi.get(self, "summary_only")


@pulumi.output_type
class RouterBgpConfederationPeer(dict):
    def __init__(__self__, *,
                 peer: Optional[str] = None):
        if peer is not None:
            pulumi.set(__self__, "peer", peer)

    @property
    @pulumi.getter
    def peer(self) -> Optional[str]:
        return pulumi.get(self, "peer")


@pulumi.output_type
class RouterBgpNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activateEvpn":
            suggest = "activate_evpn"
        elif key == "activateVpnv4":
            suggest = "activate_vpnv4"
        elif key == "additionalPath":
            suggest = "additional_path"
        elif key == "additionalPath6":
            suggest = "additional_path6"
        elif key == "additionalPathVpnv4":
            suggest = "additional_path_vpnv4"
        elif key == "advAdditionalPath":
            suggest = "adv_additional_path"
        elif key == "advAdditionalPath6":
            suggest = "adv_additional_path6"
        elif key == "advAdditionalPathVpnv4":
            suggest = "adv_additional_path_vpnv4"
        elif key == "advertisementInterval":
            suggest = "advertisement_interval"
        elif key == "allowasIn":
            suggest = "allowas_in"
        elif key == "allowasIn6":
            suggest = "allowas_in6"
        elif key == "allowasInEnable":
            suggest = "allowas_in_enable"
        elif key == "allowasInEnable6":
            suggest = "allowas_in_enable6"
        elif key == "allowasInEnableEvpn":
            suggest = "allowas_in_enable_evpn"
        elif key == "allowasInEnableVpnv4":
            suggest = "allowas_in_enable_vpnv4"
        elif key == "allowasInEvpn":
            suggest = "allowas_in_evpn"
        elif key == "allowasInVpnv4":
            suggest = "allowas_in_vpnv4"
        elif key == "asOverride":
            suggest = "as_override"
        elif key == "asOverride6":
            suggest = "as_override6"
        elif key == "attributeUnchanged":
            suggest = "attribute_unchanged"
        elif key == "attributeUnchanged6":
            suggest = "attribute_unchanged6"
        elif key == "attributeUnchangedVpnv4":
            suggest = "attribute_unchanged_vpnv4"
        elif key == "capabilityDefaultOriginate":
            suggest = "capability_default_originate"
        elif key == "capabilityDefaultOriginate6":
            suggest = "capability_default_originate6"
        elif key == "capabilityDynamic":
            suggest = "capability_dynamic"
        elif key == "capabilityGracefulRestart":
            suggest = "capability_graceful_restart"
        elif key == "capabilityGracefulRestart6":
            suggest = "capability_graceful_restart6"
        elif key == "capabilityGracefulRestartEvpn":
            suggest = "capability_graceful_restart_evpn"
        elif key == "capabilityGracefulRestartVpnv4":
            suggest = "capability_graceful_restart_vpnv4"
        elif key == "capabilityOrf":
            suggest = "capability_orf"
        elif key == "capabilityOrf6":
            suggest = "capability_orf6"
        elif key == "capabilityRouteRefresh":
            suggest = "capability_route_refresh"
        elif key == "conditionalAdvertise6s":
            suggest = "conditional_advertise6s"
        elif key == "conditionalAdvertises":
            suggest = "conditional_advertises"
        elif key == "connectTimer":
            suggest = "connect_timer"
        elif key == "defaultOriginateRoutemap":
            suggest = "default_originate_routemap"
        elif key == "defaultOriginateRoutemap6":
            suggest = "default_originate_routemap6"
        elif key == "distributeListIn":
            suggest = "distribute_list_in"
        elif key == "distributeListIn6":
            suggest = "distribute_list_in6"
        elif key == "distributeListInVpnv4":
            suggest = "distribute_list_in_vpnv4"
        elif key == "distributeListOut":
            suggest = "distribute_list_out"
        elif key == "distributeListOut6":
            suggest = "distribute_list_out6"
        elif key == "distributeListOutVpnv4":
            suggest = "distribute_list_out_vpnv4"
        elif key == "dontCapabilityNegotiate":
            suggest = "dont_capability_negotiate"
        elif key == "ebgpEnforceMultihop":
            suggest = "ebgp_enforce_multihop"
        elif key == "ebgpMultihopTtl":
            suggest = "ebgp_multihop_ttl"
        elif key == "filterListIn":
            suggest = "filter_list_in"
        elif key == "filterListIn6":
            suggest = "filter_list_in6"
        elif key == "filterListOut":
            suggest = "filter_list_out"
        elif key == "filterListOut6":
            suggest = "filter_list_out6"
        elif key == "holdtimeTimer":
            suggest = "holdtime_timer"
        elif key == "keepAliveTimer":
            suggest = "keep_alive_timer"
        elif key == "linkDownFailover":
            suggest = "link_down_failover"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "localAsNoPrepend":
            suggest = "local_as_no_prepend"
        elif key == "localAsReplaceAs":
            suggest = "local_as_replace_as"
        elif key == "maximumPrefix":
            suggest = "maximum_prefix"
        elif key == "maximumPrefix6":
            suggest = "maximum_prefix6"
        elif key == "maximumPrefixEvpn":
            suggest = "maximum_prefix_evpn"
        elif key == "maximumPrefixThreshold":
            suggest = "maximum_prefix_threshold"
        elif key == "maximumPrefixThreshold6":
            suggest = "maximum_prefix_threshold6"
        elif key == "maximumPrefixThresholdEvpn":
            suggest = "maximum_prefix_threshold_evpn"
        elif key == "maximumPrefixThresholdVpnv4":
            suggest = "maximum_prefix_threshold_vpnv4"
        elif key == "maximumPrefixVpnv4":
            suggest = "maximum_prefix_vpnv4"
        elif key == "maximumPrefixWarningOnly":
            suggest = "maximum_prefix_warning_only"
        elif key == "maximumPrefixWarningOnly6":
            suggest = "maximum_prefix_warning_only6"
        elif key == "maximumPrefixWarningOnlyEvpn":
            suggest = "maximum_prefix_warning_only_evpn"
        elif key == "maximumPrefixWarningOnlyVpnv4":
            suggest = "maximum_prefix_warning_only_vpnv4"
        elif key == "nextHopSelf":
            suggest = "next_hop_self"
        elif key == "nextHopSelf6":
            suggest = "next_hop_self6"
        elif key == "nextHopSelfRr":
            suggest = "next_hop_self_rr"
        elif key == "nextHopSelfRr6":
            suggest = "next_hop_self_rr6"
        elif key == "nextHopSelfVpnv4":
            suggest = "next_hop_self_vpnv4"
        elif key == "overrideCapability":
            suggest = "override_capability"
        elif key == "prefixListIn":
            suggest = "prefix_list_in"
        elif key == "prefixListIn6":
            suggest = "prefix_list_in6"
        elif key == "prefixListInVpnv4":
            suggest = "prefix_list_in_vpnv4"
        elif key == "prefixListOut":
            suggest = "prefix_list_out"
        elif key == "prefixListOut6":
            suggest = "prefix_list_out6"
        elif key == "prefixListOutVpnv4":
            suggest = "prefix_list_out_vpnv4"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "removePrivateAs":
            suggest = "remove_private_as"
        elif key == "removePrivateAs6":
            suggest = "remove_private_as6"
        elif key == "removePrivateAsEvpn":
            suggest = "remove_private_as_evpn"
        elif key == "removePrivateAsVpnv4":
            suggest = "remove_private_as_vpnv4"
        elif key == "restartTime":
            suggest = "restart_time"
        elif key == "retainStaleTime":
            suggest = "retain_stale_time"
        elif key == "routeMapIn":
            suggest = "route_map_in"
        elif key == "routeMapIn6":
            suggest = "route_map_in6"
        elif key == "routeMapInEvpn":
            suggest = "route_map_in_evpn"
        elif key == "routeMapInVpnv4":
            suggest = "route_map_in_vpnv4"
        elif key == "routeMapOut":
            suggest = "route_map_out"
        elif key == "routeMapOut6":
            suggest = "route_map_out6"
        elif key == "routeMapOut6Preferable":
            suggest = "route_map_out6_preferable"
        elif key == "routeMapOutEvpn":
            suggest = "route_map_out_evpn"
        elif key == "routeMapOutPreferable":
            suggest = "route_map_out_preferable"
        elif key == "routeMapOutVpnv4":
            suggest = "route_map_out_vpnv4"
        elif key == "routeMapOutVpnv4Preferable":
            suggest = "route_map_out_vpnv4_preferable"
        elif key == "routeReflectorClient":
            suggest = "route_reflector_client"
        elif key == "routeReflectorClient6":
            suggest = "route_reflector_client6"
        elif key == "routeReflectorClientEvpn":
            suggest = "route_reflector_client_evpn"
        elif key == "routeReflectorClientVpnv4":
            suggest = "route_reflector_client_vpnv4"
        elif key == "routeServerClient":
            suggest = "route_server_client"
        elif key == "routeServerClient6":
            suggest = "route_server_client6"
        elif key == "routeServerClientEvpn":
            suggest = "route_server_client_evpn"
        elif key == "routeServerClientVpnv4":
            suggest = "route_server_client_vpnv4"
        elif key == "sendCommunity":
            suggest = "send_community"
        elif key == "sendCommunity6":
            suggest = "send_community6"
        elif key == "sendCommunityEvpn":
            suggest = "send_community_evpn"
        elif key == "sendCommunityVpnv4":
            suggest = "send_community_vpnv4"
        elif key == "softReconfiguration":
            suggest = "soft_reconfiguration"
        elif key == "softReconfiguration6":
            suggest = "soft_reconfiguration6"
        elif key == "softReconfigurationEvpn":
            suggest = "soft_reconfiguration_evpn"
        elif key == "softReconfigurationVpnv4":
            suggest = "soft_reconfiguration_vpnv4"
        elif key == "staleRoute":
            suggest = "stale_route"
        elif key == "strictCapabilityMatch":
            suggest = "strict_capability_match"
        elif key == "unsuppressMap":
            suggest = "unsuppress_map"
        elif key == "unsuppressMap6":
            suggest = "unsuppress_map6"
        elif key == "updateSource":
            suggest = "update_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activate: Optional[str] = None,
                 activate6: Optional[str] = None,
                 activate_evpn: Optional[str] = None,
                 activate_vpnv4: Optional[str] = None,
                 additional_path: Optional[str] = None,
                 additional_path6: Optional[str] = None,
                 additional_path_vpnv4: Optional[str] = None,
                 adv_additional_path: Optional[int] = None,
                 adv_additional_path6: Optional[int] = None,
                 adv_additional_path_vpnv4: Optional[int] = None,
                 advertisement_interval: Optional[int] = None,
                 allowas_in: Optional[int] = None,
                 allowas_in6: Optional[int] = None,
                 allowas_in_enable: Optional[str] = None,
                 allowas_in_enable6: Optional[str] = None,
                 allowas_in_enable_evpn: Optional[str] = None,
                 allowas_in_enable_vpnv4: Optional[str] = None,
                 allowas_in_evpn: Optional[int] = None,
                 allowas_in_vpnv4: Optional[int] = None,
                 as_override: Optional[str] = None,
                 as_override6: Optional[str] = None,
                 attribute_unchanged: Optional[str] = None,
                 attribute_unchanged6: Optional[str] = None,
                 attribute_unchanged_vpnv4: Optional[str] = None,
                 bfd: Optional[str] = None,
                 capability_default_originate: Optional[str] = None,
                 capability_default_originate6: Optional[str] = None,
                 capability_dynamic: Optional[str] = None,
                 capability_graceful_restart: Optional[str] = None,
                 capability_graceful_restart6: Optional[str] = None,
                 capability_graceful_restart_evpn: Optional[str] = None,
                 capability_graceful_restart_vpnv4: Optional[str] = None,
                 capability_orf: Optional[str] = None,
                 capability_orf6: Optional[str] = None,
                 capability_route_refresh: Optional[str] = None,
                 conditional_advertise6s: Optional[Sequence['outputs.RouterBgpNeighborConditionalAdvertise6']] = None,
                 conditional_advertises: Optional[Sequence['outputs.RouterBgpNeighborConditionalAdvertise']] = None,
                 connect_timer: Optional[int] = None,
                 default_originate_routemap: Optional[str] = None,
                 default_originate_routemap6: Optional[str] = None,
                 description: Optional[str] = None,
                 distribute_list_in: Optional[str] = None,
                 distribute_list_in6: Optional[str] = None,
                 distribute_list_in_vpnv4: Optional[str] = None,
                 distribute_list_out: Optional[str] = None,
                 distribute_list_out6: Optional[str] = None,
                 distribute_list_out_vpnv4: Optional[str] = None,
                 dont_capability_negotiate: Optional[str] = None,
                 ebgp_enforce_multihop: Optional[str] = None,
                 ebgp_multihop_ttl: Optional[int] = None,
                 filter_list_in: Optional[str] = None,
                 filter_list_in6: Optional[str] = None,
                 filter_list_out: Optional[str] = None,
                 filter_list_out6: Optional[str] = None,
                 holdtime_timer: Optional[int] = None,
                 interface: Optional[str] = None,
                 ip: Optional[str] = None,
                 keep_alive_timer: Optional[int] = None,
                 link_down_failover: Optional[str] = None,
                 local_as: Optional[int] = None,
                 local_as_no_prepend: Optional[str] = None,
                 local_as_replace_as: Optional[str] = None,
                 maximum_prefix: Optional[int] = None,
                 maximum_prefix6: Optional[int] = None,
                 maximum_prefix_evpn: Optional[int] = None,
                 maximum_prefix_threshold: Optional[int] = None,
                 maximum_prefix_threshold6: Optional[int] = None,
                 maximum_prefix_threshold_evpn: Optional[int] = None,
                 maximum_prefix_threshold_vpnv4: Optional[int] = None,
                 maximum_prefix_vpnv4: Optional[int] = None,
                 maximum_prefix_warning_only: Optional[str] = None,
                 maximum_prefix_warning_only6: Optional[str] = None,
                 maximum_prefix_warning_only_evpn: Optional[str] = None,
                 maximum_prefix_warning_only_vpnv4: Optional[str] = None,
                 next_hop_self: Optional[str] = None,
                 next_hop_self6: Optional[str] = None,
                 next_hop_self_rr: Optional[str] = None,
                 next_hop_self_rr6: Optional[str] = None,
                 next_hop_self_vpnv4: Optional[str] = None,
                 override_capability: Optional[str] = None,
                 passive: Optional[str] = None,
                 password: Optional[str] = None,
                 prefix_list_in: Optional[str] = None,
                 prefix_list_in6: Optional[str] = None,
                 prefix_list_in_vpnv4: Optional[str] = None,
                 prefix_list_out: Optional[str] = None,
                 prefix_list_out6: Optional[str] = None,
                 prefix_list_out_vpnv4: Optional[str] = None,
                 remote_as: Optional[int] = None,
                 remove_private_as: Optional[str] = None,
                 remove_private_as6: Optional[str] = None,
                 remove_private_as_evpn: Optional[str] = None,
                 remove_private_as_vpnv4: Optional[str] = None,
                 restart_time: Optional[int] = None,
                 retain_stale_time: Optional[int] = None,
                 route_map_in: Optional[str] = None,
                 route_map_in6: Optional[str] = None,
                 route_map_in_evpn: Optional[str] = None,
                 route_map_in_vpnv4: Optional[str] = None,
                 route_map_out: Optional[str] = None,
                 route_map_out6: Optional[str] = None,
                 route_map_out6_preferable: Optional[str] = None,
                 route_map_out_evpn: Optional[str] = None,
                 route_map_out_preferable: Optional[str] = None,
                 route_map_out_vpnv4: Optional[str] = None,
                 route_map_out_vpnv4_preferable: Optional[str] = None,
                 route_reflector_client: Optional[str] = None,
                 route_reflector_client6: Optional[str] = None,
                 route_reflector_client_evpn: Optional[str] = None,
                 route_reflector_client_vpnv4: Optional[str] = None,
                 route_server_client: Optional[str] = None,
                 route_server_client6: Optional[str] = None,
                 route_server_client_evpn: Optional[str] = None,
                 route_server_client_vpnv4: Optional[str] = None,
                 send_community: Optional[str] = None,
                 send_community6: Optional[str] = None,
                 send_community_evpn: Optional[str] = None,
                 send_community_vpnv4: Optional[str] = None,
                 shutdown: Optional[str] = None,
                 soft_reconfiguration: Optional[str] = None,
                 soft_reconfiguration6: Optional[str] = None,
                 soft_reconfiguration_evpn: Optional[str] = None,
                 soft_reconfiguration_vpnv4: Optional[str] = None,
                 stale_route: Optional[str] = None,
                 strict_capability_match: Optional[str] = None,
                 unsuppress_map: Optional[str] = None,
                 unsuppress_map6: Optional[str] = None,
                 update_source: Optional[str] = None,
                 weight: Optional[int] = None):
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if activate6 is not None:
            pulumi.set(__self__, "activate6", activate6)
        if activate_evpn is not None:
            pulumi.set(__self__, "activate_evpn", activate_evpn)
        if activate_vpnv4 is not None:
            pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if adv_additional_path is not None:
            pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 is not None:
            pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if adv_additional_path_vpnv4 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        if advertisement_interval is not None:
            pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in is not None:
            pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 is not None:
            pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable is not None:
            pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 is not None:
            pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if allowas_in_enable_evpn is not None:
            pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        if allowas_in_enable_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        if allowas_in_evpn is not None:
            pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        if allowas_in_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override6 is not None:
            pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged is not None:
            pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 is not None:
            pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if attribute_unchanged_vpnv4 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate is not None:
            pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 is not None:
            pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic is not None:
            pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart is not None:
            pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 is not None:
            pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_graceful_restart_evpn is not None:
            pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        if capability_graceful_restart_vpnv4 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        if capability_orf is not None:
            pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 is not None:
            pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh is not None:
            pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if conditional_advertise6s is not None:
            pulumi.set(__self__, "conditional_advertise6s", conditional_advertise6s)
        if conditional_advertises is not None:
            pulumi.set(__self__, "conditional_advertises", conditional_advertises)
        if connect_timer is not None:
            pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap is not None:
            pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 is not None:
            pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 is not None:
            pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_in_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        if distribute_list_out is not None:
            pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 is not None:
            pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if distribute_list_out_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        if dont_capability_negotiate is not None:
            pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if ebgp_enforce_multihop is not None:
            pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl is not None:
            pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in is not None:
            pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 is not None:
            pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_out is not None:
            pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 is not None:
            pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover is not None:
            pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix is not None:
            pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 is not None:
            pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        if maximum_prefix_threshold is not None:
            pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_threshold_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        if maximum_prefix_threshold_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        if maximum_prefix_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        if maximum_prefix_warning_only is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if maximum_prefix_warning_only_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        if maximum_prefix_warning_only_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 is not None:
            pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr is not None:
            pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 is not None:
            pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if next_hop_self_vpnv4 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        if override_capability is not None:
            pulumi.set(__self__, "override_capability", override_capability)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix_list_in is not None:
            pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 is not None:
            pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_in_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        if prefix_list_out is not None:
            pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 is not None:
            pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if prefix_list_out_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as is not None:
            pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 is not None:
            pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if remove_private_as_evpn is not None:
            pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        if remove_private_as_vpnv4 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time is not None:
            pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in is not None:
            pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 is not None:
            pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_in_evpn is not None:
            pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        if route_map_in_vpnv4 is not None:
            pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        if route_map_out is not None:
            pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 is not None:
            pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable is not None:
            pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_evpn is not None:
            pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        if route_map_out_preferable is not None:
            pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_map_out_vpnv4 is not None:
            pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        if route_map_out_vpnv4_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        if route_reflector_client is not None:
            pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 is not None:
            pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_reflector_client_evpn is not None:
            pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        if route_reflector_client_vpnv4 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        if route_server_client is not None:
            pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 is not None:
            pulumi.set(__self__, "route_server_client6", route_server_client6)
        if route_server_client_evpn is not None:
            pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        if route_server_client_vpnv4 is not None:
            pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community6 is not None:
            pulumi.set(__self__, "send_community6", send_community6)
        if send_community_evpn is not None:
            pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        if send_community_vpnv4 is not None:
            pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration is not None:
            pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 is not None:
            pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if soft_reconfiguration_evpn is not None:
            pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        if soft_reconfiguration_vpnv4 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        if stale_route is not None:
            pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match is not None:
            pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map is not None:
            pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 is not None:
            pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source is not None:
            pulumi.set(__self__, "update_source", update_source)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> Optional[str]:
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def activate6(self) -> Optional[str]:
        return pulumi.get(self, "activate6")

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> Optional[str]:
        return pulumi.get(self, "activate_evpn")

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "activate_vpnv4")

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[str]:
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[str]:
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> Optional[int]:
        return pulumi.get(self, "adv_additional_path")

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> Optional[int]:
        return pulumi.get(self, "adv_additional_path6")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> Optional[int]:
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> Optional[int]:
        return pulumi.get(self, "advertisement_interval")

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> Optional[int]:
        return pulumi.get(self, "allowas_in")

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> Optional[int]:
        return pulumi.get(self, "allowas_in6")

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> Optional[str]:
        return pulumi.get(self, "allowas_in_enable")

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> Optional[str]:
        return pulumi.get(self, "allowas_in_enable6")

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> Optional[str]:
        return pulumi.get(self, "allowas_in_enable_evpn")

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> Optional[int]:
        return pulumi.get(self, "allowas_in_evpn")

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> Optional[int]:
        return pulumi.get(self, "allowas_in_vpnv4")

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[str]:
        return pulumi.get(self, "as_override")

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> Optional[str]:
        return pulumi.get(self, "as_override6")

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> Optional[str]:
        return pulumi.get(self, "attribute_unchanged")

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> Optional[str]:
        return pulumi.get(self, "attribute_unchanged6")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> Optional[str]:
        return pulumi.get(self, "capability_default_originate")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> Optional[str]:
        return pulumi.get(self, "capability_default_originate6")

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> Optional[str]:
        return pulumi.get(self, "capability_dynamic")

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> Optional[str]:
        return pulumi.get(self, "capability_graceful_restart")

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> Optional[str]:
        return pulumi.get(self, "capability_graceful_restart6")

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> Optional[str]:
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> Optional[str]:
        return pulumi.get(self, "capability_orf")

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> Optional[str]:
        return pulumi.get(self, "capability_orf6")

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> Optional[str]:
        return pulumi.get(self, "capability_route_refresh")

    @property
    @pulumi.getter(name="conditionalAdvertise6s")
    def conditional_advertise6s(self) -> Optional[Sequence['outputs.RouterBgpNeighborConditionalAdvertise6']]:
        return pulumi.get(self, "conditional_advertise6s")

    @property
    @pulumi.getter(name="conditionalAdvertises")
    def conditional_advertises(self) -> Optional[Sequence['outputs.RouterBgpNeighborConditionalAdvertise']]:
        return pulumi.get(self, "conditional_advertises")

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> Optional[int]:
        return pulumi.get(self, "connect_timer")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> Optional[str]:
        return pulumi.get(self, "default_originate_routemap")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> Optional[str]:
        return pulumi.get(self, "default_originate_routemap6")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_in6")

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_out")

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_out6")

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> Optional[str]:
        return pulumi.get(self, "dont_capability_negotiate")

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> Optional[str]:
        return pulumi.get(self, "ebgp_enforce_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> Optional[int]:
        return pulumi.get(self, "ebgp_multihop_ttl")

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> Optional[str]:
        return pulumi.get(self, "filter_list_in")

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> Optional[str]:
        return pulumi.get(self, "filter_list_in6")

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> Optional[str]:
        return pulumi.get(self, "filter_list_out")

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> Optional[str]:
        return pulumi.get(self, "filter_list_out6")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[int]:
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[int]:
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> Optional[str]:
        return pulumi.get(self, "link_down_failover")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[int]:
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[str]:
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[str]:
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix")

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix6")

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_threshold")

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_threshold6")

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> Optional[str]:
        return pulumi.get(self, "maximum_prefix_warning_only")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> Optional[str]:
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> Optional[str]:
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_self")

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_self6")

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_self_rr")

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_self_rr6")

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_self_vpnv4")

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> Optional[str]:
        return pulumi.get(self, "override_capability")

    @property
    @pulumi.getter
    def passive(self) -> Optional[str]:
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_in")

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_in6")

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_out")

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_out6")

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[int]:
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> Optional[str]:
        return pulumi.get(self, "remove_private_as")

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> Optional[str]:
        return pulumi.get(self, "remove_private_as6")

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> Optional[str]:
        return pulumi.get(self, "remove_private_as_evpn")

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "remove_private_as_vpnv4")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[int]:
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> Optional[int]:
        return pulumi.get(self, "retain_stale_time")

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> Optional[str]:
        return pulumi.get(self, "route_map_in")

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> Optional[str]:
        return pulumi.get(self, "route_map_in6")

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> Optional[str]:
        return pulumi.get(self, "route_map_in_evpn")

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "route_map_in_vpnv4")

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out")

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out6")

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out6_preferable")

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out_evpn")

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out_vpnv4")

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> Optional[str]:
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> Optional[str]:
        return pulumi.get(self, "route_reflector_client6")

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> Optional[str]:
        return pulumi.get(self, "route_reflector_client_evpn")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> Optional[str]:
        return pulumi.get(self, "route_server_client")

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> Optional[str]:
        return pulumi.get(self, "route_server_client6")

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> Optional[str]:
        return pulumi.get(self, "route_server_client_evpn")

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "route_server_client_vpnv4")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[str]:
        return pulumi.get(self, "send_community")

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> Optional[str]:
        return pulumi.get(self, "send_community6")

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> Optional[str]:
        return pulumi.get(self, "send_community_evpn")

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "send_community_vpnv4")

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[str]:
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> Optional[str]:
        return pulumi.get(self, "soft_reconfiguration")

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> Optional[str]:
        return pulumi.get(self, "soft_reconfiguration6")

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> Optional[str]:
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> Optional[str]:
        return pulumi.get(self, "stale_route")

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> Optional[str]:
        return pulumi.get(self, "strict_capability_match")

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> Optional[str]:
        return pulumi.get(self, "unsuppress_map")

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> Optional[str]:
        return pulumi.get(self, "unsuppress_map6")

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> Optional[str]:
        return pulumi.get(self, "update_source")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class RouterBgpNeighborConditionalAdvertise6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertiseRoutemap":
            suggest = "advertise_routemap"
        elif key == "conditionRoutemap":
            suggest = "condition_routemap"
        elif key == "conditionType":
            suggest = "condition_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpNeighborConditionalAdvertise6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpNeighborConditionalAdvertise6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpNeighborConditionalAdvertise6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise_routemap: Optional[str] = None,
                 condition_routemap: Optional[str] = None,
                 condition_type: Optional[str] = None):
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[str]:
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[str]:
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[str]:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class RouterBgpNeighborConditionalAdvertise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertiseRoutemap":
            suggest = "advertise_routemap"
        elif key == "conditionRoutemap":
            suggest = "condition_routemap"
        elif key == "conditionType":
            suggest = "condition_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpNeighborConditionalAdvertise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpNeighborConditionalAdvertise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpNeighborConditionalAdvertise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise_routemap: Optional[str] = None,
                 condition_routemap: Optional[str] = None,
                 condition_type: Optional[str] = None):
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[str]:
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[str]:
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[str]:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class RouterBgpNeighborGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activateEvpn":
            suggest = "activate_evpn"
        elif key == "activateVpnv4":
            suggest = "activate_vpnv4"
        elif key == "additionalPath":
            suggest = "additional_path"
        elif key == "additionalPath6":
            suggest = "additional_path6"
        elif key == "additionalPathVpnv4":
            suggest = "additional_path_vpnv4"
        elif key == "advAdditionalPath":
            suggest = "adv_additional_path"
        elif key == "advAdditionalPath6":
            suggest = "adv_additional_path6"
        elif key == "advAdditionalPathVpnv4":
            suggest = "adv_additional_path_vpnv4"
        elif key == "advertisementInterval":
            suggest = "advertisement_interval"
        elif key == "allowasIn":
            suggest = "allowas_in"
        elif key == "allowasIn6":
            suggest = "allowas_in6"
        elif key == "allowasInEnable":
            suggest = "allowas_in_enable"
        elif key == "allowasInEnable6":
            suggest = "allowas_in_enable6"
        elif key == "allowasInEnableEvpn":
            suggest = "allowas_in_enable_evpn"
        elif key == "allowasInEnableVpnv4":
            suggest = "allowas_in_enable_vpnv4"
        elif key == "allowasInEvpn":
            suggest = "allowas_in_evpn"
        elif key == "allowasInVpnv4":
            suggest = "allowas_in_vpnv4"
        elif key == "asOverride":
            suggest = "as_override"
        elif key == "asOverride6":
            suggest = "as_override6"
        elif key == "attributeUnchanged":
            suggest = "attribute_unchanged"
        elif key == "attributeUnchanged6":
            suggest = "attribute_unchanged6"
        elif key == "attributeUnchangedVpnv4":
            suggest = "attribute_unchanged_vpnv4"
        elif key == "capabilityDefaultOriginate":
            suggest = "capability_default_originate"
        elif key == "capabilityDefaultOriginate6":
            suggest = "capability_default_originate6"
        elif key == "capabilityDynamic":
            suggest = "capability_dynamic"
        elif key == "capabilityGracefulRestart":
            suggest = "capability_graceful_restart"
        elif key == "capabilityGracefulRestart6":
            suggest = "capability_graceful_restart6"
        elif key == "capabilityGracefulRestartEvpn":
            suggest = "capability_graceful_restart_evpn"
        elif key == "capabilityGracefulRestartVpnv4":
            suggest = "capability_graceful_restart_vpnv4"
        elif key == "capabilityOrf":
            suggest = "capability_orf"
        elif key == "capabilityOrf6":
            suggest = "capability_orf6"
        elif key == "capabilityRouteRefresh":
            suggest = "capability_route_refresh"
        elif key == "connectTimer":
            suggest = "connect_timer"
        elif key == "defaultOriginateRoutemap":
            suggest = "default_originate_routemap"
        elif key == "defaultOriginateRoutemap6":
            suggest = "default_originate_routemap6"
        elif key == "distributeListIn":
            suggest = "distribute_list_in"
        elif key == "distributeListIn6":
            suggest = "distribute_list_in6"
        elif key == "distributeListInVpnv4":
            suggest = "distribute_list_in_vpnv4"
        elif key == "distributeListOut":
            suggest = "distribute_list_out"
        elif key == "distributeListOut6":
            suggest = "distribute_list_out6"
        elif key == "distributeListOutVpnv4":
            suggest = "distribute_list_out_vpnv4"
        elif key == "dontCapabilityNegotiate":
            suggest = "dont_capability_negotiate"
        elif key == "ebgpEnforceMultihop":
            suggest = "ebgp_enforce_multihop"
        elif key == "ebgpMultihopTtl":
            suggest = "ebgp_multihop_ttl"
        elif key == "filterListIn":
            suggest = "filter_list_in"
        elif key == "filterListIn6":
            suggest = "filter_list_in6"
        elif key == "filterListOut":
            suggest = "filter_list_out"
        elif key == "filterListOut6":
            suggest = "filter_list_out6"
        elif key == "holdtimeTimer":
            suggest = "holdtime_timer"
        elif key == "keepAliveTimer":
            suggest = "keep_alive_timer"
        elif key == "linkDownFailover":
            suggest = "link_down_failover"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "localAsNoPrepend":
            suggest = "local_as_no_prepend"
        elif key == "localAsReplaceAs":
            suggest = "local_as_replace_as"
        elif key == "maximumPrefix":
            suggest = "maximum_prefix"
        elif key == "maximumPrefix6":
            suggest = "maximum_prefix6"
        elif key == "maximumPrefixEvpn":
            suggest = "maximum_prefix_evpn"
        elif key == "maximumPrefixThreshold":
            suggest = "maximum_prefix_threshold"
        elif key == "maximumPrefixThreshold6":
            suggest = "maximum_prefix_threshold6"
        elif key == "maximumPrefixThresholdEvpn":
            suggest = "maximum_prefix_threshold_evpn"
        elif key == "maximumPrefixThresholdVpnv4":
            suggest = "maximum_prefix_threshold_vpnv4"
        elif key == "maximumPrefixVpnv4":
            suggest = "maximum_prefix_vpnv4"
        elif key == "maximumPrefixWarningOnly":
            suggest = "maximum_prefix_warning_only"
        elif key == "maximumPrefixWarningOnly6":
            suggest = "maximum_prefix_warning_only6"
        elif key == "maximumPrefixWarningOnlyEvpn":
            suggest = "maximum_prefix_warning_only_evpn"
        elif key == "maximumPrefixWarningOnlyVpnv4":
            suggest = "maximum_prefix_warning_only_vpnv4"
        elif key == "nextHopSelf":
            suggest = "next_hop_self"
        elif key == "nextHopSelf6":
            suggest = "next_hop_self6"
        elif key == "nextHopSelfRr":
            suggest = "next_hop_self_rr"
        elif key == "nextHopSelfRr6":
            suggest = "next_hop_self_rr6"
        elif key == "nextHopSelfVpnv4":
            suggest = "next_hop_self_vpnv4"
        elif key == "overrideCapability":
            suggest = "override_capability"
        elif key == "prefixListIn":
            suggest = "prefix_list_in"
        elif key == "prefixListIn6":
            suggest = "prefix_list_in6"
        elif key == "prefixListInVpnv4":
            suggest = "prefix_list_in_vpnv4"
        elif key == "prefixListOut":
            suggest = "prefix_list_out"
        elif key == "prefixListOut6":
            suggest = "prefix_list_out6"
        elif key == "prefixListOutVpnv4":
            suggest = "prefix_list_out_vpnv4"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "removePrivateAs":
            suggest = "remove_private_as"
        elif key == "removePrivateAs6":
            suggest = "remove_private_as6"
        elif key == "removePrivateAsEvpn":
            suggest = "remove_private_as_evpn"
        elif key == "removePrivateAsVpnv4":
            suggest = "remove_private_as_vpnv4"
        elif key == "restartTime":
            suggest = "restart_time"
        elif key == "retainStaleTime":
            suggest = "retain_stale_time"
        elif key == "routeMapIn":
            suggest = "route_map_in"
        elif key == "routeMapIn6":
            suggest = "route_map_in6"
        elif key == "routeMapInEvpn":
            suggest = "route_map_in_evpn"
        elif key == "routeMapInVpnv4":
            suggest = "route_map_in_vpnv4"
        elif key == "routeMapOut":
            suggest = "route_map_out"
        elif key == "routeMapOut6":
            suggest = "route_map_out6"
        elif key == "routeMapOut6Preferable":
            suggest = "route_map_out6_preferable"
        elif key == "routeMapOutEvpn":
            suggest = "route_map_out_evpn"
        elif key == "routeMapOutPreferable":
            suggest = "route_map_out_preferable"
        elif key == "routeMapOutVpnv4":
            suggest = "route_map_out_vpnv4"
        elif key == "routeMapOutVpnv4Preferable":
            suggest = "route_map_out_vpnv4_preferable"
        elif key == "routeReflectorClient":
            suggest = "route_reflector_client"
        elif key == "routeReflectorClient6":
            suggest = "route_reflector_client6"
        elif key == "routeReflectorClientEvpn":
            suggest = "route_reflector_client_evpn"
        elif key == "routeReflectorClientVpnv4":
            suggest = "route_reflector_client_vpnv4"
        elif key == "routeServerClient":
            suggest = "route_server_client"
        elif key == "routeServerClient6":
            suggest = "route_server_client6"
        elif key == "routeServerClientEvpn":
            suggest = "route_server_client_evpn"
        elif key == "routeServerClientVpnv4":
            suggest = "route_server_client_vpnv4"
        elif key == "sendCommunity":
            suggest = "send_community"
        elif key == "sendCommunity6":
            suggest = "send_community6"
        elif key == "sendCommunityEvpn":
            suggest = "send_community_evpn"
        elif key == "sendCommunityVpnv4":
            suggest = "send_community_vpnv4"
        elif key == "softReconfiguration":
            suggest = "soft_reconfiguration"
        elif key == "softReconfiguration6":
            suggest = "soft_reconfiguration6"
        elif key == "softReconfigurationEvpn":
            suggest = "soft_reconfiguration_evpn"
        elif key == "softReconfigurationVpnv4":
            suggest = "soft_reconfiguration_vpnv4"
        elif key == "staleRoute":
            suggest = "stale_route"
        elif key == "strictCapabilityMatch":
            suggest = "strict_capability_match"
        elif key == "unsuppressMap":
            suggest = "unsuppress_map"
        elif key == "unsuppressMap6":
            suggest = "unsuppress_map6"
        elif key == "updateSource":
            suggest = "update_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpNeighborGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpNeighborGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpNeighborGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activate: Optional[str] = None,
                 activate6: Optional[str] = None,
                 activate_evpn: Optional[str] = None,
                 activate_vpnv4: Optional[str] = None,
                 additional_path: Optional[str] = None,
                 additional_path6: Optional[str] = None,
                 additional_path_vpnv4: Optional[str] = None,
                 adv_additional_path: Optional[int] = None,
                 adv_additional_path6: Optional[int] = None,
                 adv_additional_path_vpnv4: Optional[int] = None,
                 advertisement_interval: Optional[int] = None,
                 allowas_in: Optional[int] = None,
                 allowas_in6: Optional[int] = None,
                 allowas_in_enable: Optional[str] = None,
                 allowas_in_enable6: Optional[str] = None,
                 allowas_in_enable_evpn: Optional[str] = None,
                 allowas_in_enable_vpnv4: Optional[str] = None,
                 allowas_in_evpn: Optional[int] = None,
                 allowas_in_vpnv4: Optional[int] = None,
                 as_override: Optional[str] = None,
                 as_override6: Optional[str] = None,
                 attribute_unchanged: Optional[str] = None,
                 attribute_unchanged6: Optional[str] = None,
                 attribute_unchanged_vpnv4: Optional[str] = None,
                 bfd: Optional[str] = None,
                 capability_default_originate: Optional[str] = None,
                 capability_default_originate6: Optional[str] = None,
                 capability_dynamic: Optional[str] = None,
                 capability_graceful_restart: Optional[str] = None,
                 capability_graceful_restart6: Optional[str] = None,
                 capability_graceful_restart_evpn: Optional[str] = None,
                 capability_graceful_restart_vpnv4: Optional[str] = None,
                 capability_orf: Optional[str] = None,
                 capability_orf6: Optional[str] = None,
                 capability_route_refresh: Optional[str] = None,
                 connect_timer: Optional[int] = None,
                 default_originate_routemap: Optional[str] = None,
                 default_originate_routemap6: Optional[str] = None,
                 description: Optional[str] = None,
                 distribute_list_in: Optional[str] = None,
                 distribute_list_in6: Optional[str] = None,
                 distribute_list_in_vpnv4: Optional[str] = None,
                 distribute_list_out: Optional[str] = None,
                 distribute_list_out6: Optional[str] = None,
                 distribute_list_out_vpnv4: Optional[str] = None,
                 dont_capability_negotiate: Optional[str] = None,
                 ebgp_enforce_multihop: Optional[str] = None,
                 ebgp_multihop_ttl: Optional[int] = None,
                 filter_list_in: Optional[str] = None,
                 filter_list_in6: Optional[str] = None,
                 filter_list_out: Optional[str] = None,
                 filter_list_out6: Optional[str] = None,
                 holdtime_timer: Optional[int] = None,
                 interface: Optional[str] = None,
                 keep_alive_timer: Optional[int] = None,
                 link_down_failover: Optional[str] = None,
                 local_as: Optional[int] = None,
                 local_as_no_prepend: Optional[str] = None,
                 local_as_replace_as: Optional[str] = None,
                 maximum_prefix: Optional[int] = None,
                 maximum_prefix6: Optional[int] = None,
                 maximum_prefix_evpn: Optional[int] = None,
                 maximum_prefix_threshold: Optional[int] = None,
                 maximum_prefix_threshold6: Optional[int] = None,
                 maximum_prefix_threshold_evpn: Optional[int] = None,
                 maximum_prefix_threshold_vpnv4: Optional[int] = None,
                 maximum_prefix_vpnv4: Optional[int] = None,
                 maximum_prefix_warning_only: Optional[str] = None,
                 maximum_prefix_warning_only6: Optional[str] = None,
                 maximum_prefix_warning_only_evpn: Optional[str] = None,
                 maximum_prefix_warning_only_vpnv4: Optional[str] = None,
                 name: Optional[str] = None,
                 next_hop_self: Optional[str] = None,
                 next_hop_self6: Optional[str] = None,
                 next_hop_self_rr: Optional[str] = None,
                 next_hop_self_rr6: Optional[str] = None,
                 next_hop_self_vpnv4: Optional[str] = None,
                 override_capability: Optional[str] = None,
                 passive: Optional[str] = None,
                 password: Optional[str] = None,
                 prefix_list_in: Optional[str] = None,
                 prefix_list_in6: Optional[str] = None,
                 prefix_list_in_vpnv4: Optional[str] = None,
                 prefix_list_out: Optional[str] = None,
                 prefix_list_out6: Optional[str] = None,
                 prefix_list_out_vpnv4: Optional[str] = None,
                 remote_as: Optional[int] = None,
                 remove_private_as: Optional[str] = None,
                 remove_private_as6: Optional[str] = None,
                 remove_private_as_evpn: Optional[str] = None,
                 remove_private_as_vpnv4: Optional[str] = None,
                 restart_time: Optional[int] = None,
                 retain_stale_time: Optional[int] = None,
                 route_map_in: Optional[str] = None,
                 route_map_in6: Optional[str] = None,
                 route_map_in_evpn: Optional[str] = None,
                 route_map_in_vpnv4: Optional[str] = None,
                 route_map_out: Optional[str] = None,
                 route_map_out6: Optional[str] = None,
                 route_map_out6_preferable: Optional[str] = None,
                 route_map_out_evpn: Optional[str] = None,
                 route_map_out_preferable: Optional[str] = None,
                 route_map_out_vpnv4: Optional[str] = None,
                 route_map_out_vpnv4_preferable: Optional[str] = None,
                 route_reflector_client: Optional[str] = None,
                 route_reflector_client6: Optional[str] = None,
                 route_reflector_client_evpn: Optional[str] = None,
                 route_reflector_client_vpnv4: Optional[str] = None,
                 route_server_client: Optional[str] = None,
                 route_server_client6: Optional[str] = None,
                 route_server_client_evpn: Optional[str] = None,
                 route_server_client_vpnv4: Optional[str] = None,
                 send_community: Optional[str] = None,
                 send_community6: Optional[str] = None,
                 send_community_evpn: Optional[str] = None,
                 send_community_vpnv4: Optional[str] = None,
                 shutdown: Optional[str] = None,
                 soft_reconfiguration: Optional[str] = None,
                 soft_reconfiguration6: Optional[str] = None,
                 soft_reconfiguration_evpn: Optional[str] = None,
                 soft_reconfiguration_vpnv4: Optional[str] = None,
                 stale_route: Optional[str] = None,
                 strict_capability_match: Optional[str] = None,
                 unsuppress_map: Optional[str] = None,
                 unsuppress_map6: Optional[str] = None,
                 update_source: Optional[str] = None,
                 weight: Optional[int] = None):
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if activate6 is not None:
            pulumi.set(__self__, "activate6", activate6)
        if activate_evpn is not None:
            pulumi.set(__self__, "activate_evpn", activate_evpn)
        if activate_vpnv4 is not None:
            pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if adv_additional_path is not None:
            pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 is not None:
            pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if adv_additional_path_vpnv4 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        if advertisement_interval is not None:
            pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in is not None:
            pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 is not None:
            pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable is not None:
            pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 is not None:
            pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if allowas_in_enable_evpn is not None:
            pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        if allowas_in_enable_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        if allowas_in_evpn is not None:
            pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        if allowas_in_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override6 is not None:
            pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged is not None:
            pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 is not None:
            pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if attribute_unchanged_vpnv4 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate is not None:
            pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 is not None:
            pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic is not None:
            pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart is not None:
            pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 is not None:
            pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_graceful_restart_evpn is not None:
            pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        if capability_graceful_restart_vpnv4 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        if capability_orf is not None:
            pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 is not None:
            pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh is not None:
            pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if connect_timer is not None:
            pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap is not None:
            pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 is not None:
            pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 is not None:
            pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_in_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        if distribute_list_out is not None:
            pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 is not None:
            pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if distribute_list_out_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        if dont_capability_negotiate is not None:
            pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if ebgp_enforce_multihop is not None:
            pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl is not None:
            pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in is not None:
            pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 is not None:
            pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_out is not None:
            pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 is not None:
            pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover is not None:
            pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix is not None:
            pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 is not None:
            pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        if maximum_prefix_threshold is not None:
            pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_threshold_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        if maximum_prefix_threshold_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        if maximum_prefix_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        if maximum_prefix_warning_only is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if maximum_prefix_warning_only_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        if maximum_prefix_warning_only_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 is not None:
            pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr is not None:
            pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 is not None:
            pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if next_hop_self_vpnv4 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        if override_capability is not None:
            pulumi.set(__self__, "override_capability", override_capability)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix_list_in is not None:
            pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 is not None:
            pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_in_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        if prefix_list_out is not None:
            pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 is not None:
            pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if prefix_list_out_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as is not None:
            pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 is not None:
            pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if remove_private_as_evpn is not None:
            pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        if remove_private_as_vpnv4 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time is not None:
            pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in is not None:
            pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 is not None:
            pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_in_evpn is not None:
            pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        if route_map_in_vpnv4 is not None:
            pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        if route_map_out is not None:
            pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 is not None:
            pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable is not None:
            pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_evpn is not None:
            pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        if route_map_out_preferable is not None:
            pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_map_out_vpnv4 is not None:
            pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        if route_map_out_vpnv4_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        if route_reflector_client is not None:
            pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 is not None:
            pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_reflector_client_evpn is not None:
            pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        if route_reflector_client_vpnv4 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        if route_server_client is not None:
            pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 is not None:
            pulumi.set(__self__, "route_server_client6", route_server_client6)
        if route_server_client_evpn is not None:
            pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        if route_server_client_vpnv4 is not None:
            pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community6 is not None:
            pulumi.set(__self__, "send_community6", send_community6)
        if send_community_evpn is not None:
            pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        if send_community_vpnv4 is not None:
            pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration is not None:
            pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 is not None:
            pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if soft_reconfiguration_evpn is not None:
            pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        if soft_reconfiguration_vpnv4 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        if stale_route is not None:
            pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match is not None:
            pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map is not None:
            pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 is not None:
            pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source is not None:
            pulumi.set(__self__, "update_source", update_source)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> Optional[str]:
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def activate6(self) -> Optional[str]:
        return pulumi.get(self, "activate6")

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> Optional[str]:
        return pulumi.get(self, "activate_evpn")

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "activate_vpnv4")

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[str]:
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[str]:
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> Optional[int]:
        return pulumi.get(self, "adv_additional_path")

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> Optional[int]:
        return pulumi.get(self, "adv_additional_path6")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> Optional[int]:
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> Optional[int]:
        return pulumi.get(self, "advertisement_interval")

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> Optional[int]:
        return pulumi.get(self, "allowas_in")

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> Optional[int]:
        return pulumi.get(self, "allowas_in6")

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> Optional[str]:
        return pulumi.get(self, "allowas_in_enable")

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> Optional[str]:
        return pulumi.get(self, "allowas_in_enable6")

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> Optional[str]:
        return pulumi.get(self, "allowas_in_enable_evpn")

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> Optional[int]:
        return pulumi.get(self, "allowas_in_evpn")

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> Optional[int]:
        return pulumi.get(self, "allowas_in_vpnv4")

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[str]:
        return pulumi.get(self, "as_override")

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> Optional[str]:
        return pulumi.get(self, "as_override6")

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> Optional[str]:
        return pulumi.get(self, "attribute_unchanged")

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> Optional[str]:
        return pulumi.get(self, "attribute_unchanged6")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> Optional[str]:
        return pulumi.get(self, "capability_default_originate")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> Optional[str]:
        return pulumi.get(self, "capability_default_originate6")

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> Optional[str]:
        return pulumi.get(self, "capability_dynamic")

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> Optional[str]:
        return pulumi.get(self, "capability_graceful_restart")

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> Optional[str]:
        return pulumi.get(self, "capability_graceful_restart6")

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> Optional[str]:
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> Optional[str]:
        return pulumi.get(self, "capability_orf")

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> Optional[str]:
        return pulumi.get(self, "capability_orf6")

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> Optional[str]:
        return pulumi.get(self, "capability_route_refresh")

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> Optional[int]:
        return pulumi.get(self, "connect_timer")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> Optional[str]:
        return pulumi.get(self, "default_originate_routemap")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> Optional[str]:
        return pulumi.get(self, "default_originate_routemap6")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_in6")

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_out")

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_out6")

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> Optional[str]:
        return pulumi.get(self, "dont_capability_negotiate")

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> Optional[str]:
        return pulumi.get(self, "ebgp_enforce_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> Optional[int]:
        return pulumi.get(self, "ebgp_multihop_ttl")

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> Optional[str]:
        return pulumi.get(self, "filter_list_in")

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> Optional[str]:
        return pulumi.get(self, "filter_list_in6")

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> Optional[str]:
        return pulumi.get(self, "filter_list_out")

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> Optional[str]:
        return pulumi.get(self, "filter_list_out6")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[int]:
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[int]:
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> Optional[str]:
        return pulumi.get(self, "link_down_failover")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[int]:
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[str]:
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[str]:
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix")

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix6")

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_threshold")

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_threshold6")

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> Optional[int]:
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> Optional[str]:
        return pulumi.get(self, "maximum_prefix_warning_only")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> Optional[str]:
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> Optional[str]:
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_self")

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_self6")

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_self_rr")

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_self_rr6")

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_self_vpnv4")

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> Optional[str]:
        return pulumi.get(self, "override_capability")

    @property
    @pulumi.getter
    def passive(self) -> Optional[str]:
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_in")

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_in6")

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_out")

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_out6")

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[int]:
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> Optional[str]:
        return pulumi.get(self, "remove_private_as")

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> Optional[str]:
        return pulumi.get(self, "remove_private_as6")

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> Optional[str]:
        return pulumi.get(self, "remove_private_as_evpn")

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "remove_private_as_vpnv4")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[int]:
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> Optional[int]:
        return pulumi.get(self, "retain_stale_time")

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> Optional[str]:
        return pulumi.get(self, "route_map_in")

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> Optional[str]:
        return pulumi.get(self, "route_map_in6")

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> Optional[str]:
        return pulumi.get(self, "route_map_in_evpn")

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "route_map_in_vpnv4")

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out")

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out6")

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out6_preferable")

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out_evpn")

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out_vpnv4")

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> Optional[str]:
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> Optional[str]:
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> Optional[str]:
        return pulumi.get(self, "route_reflector_client6")

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> Optional[str]:
        return pulumi.get(self, "route_reflector_client_evpn")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> Optional[str]:
        return pulumi.get(self, "route_server_client")

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> Optional[str]:
        return pulumi.get(self, "route_server_client6")

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> Optional[str]:
        return pulumi.get(self, "route_server_client_evpn")

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "route_server_client_vpnv4")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[str]:
        return pulumi.get(self, "send_community")

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> Optional[str]:
        return pulumi.get(self, "send_community6")

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> Optional[str]:
        return pulumi.get(self, "send_community_evpn")

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "send_community_vpnv4")

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[str]:
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> Optional[str]:
        return pulumi.get(self, "soft_reconfiguration")

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> Optional[str]:
        return pulumi.get(self, "soft_reconfiguration6")

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> Optional[str]:
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> Optional[str]:
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> Optional[str]:
        return pulumi.get(self, "stale_route")

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> Optional[str]:
        return pulumi.get(self, "strict_capability_match")

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> Optional[str]:
        return pulumi.get(self, "unsuppress_map")

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> Optional[str]:
        return pulumi.get(self, "unsuppress_map6")

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> Optional[str]:
        return pulumi.get(self, "update_source")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class RouterBgpNeighborRange6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxNeighborNum":
            suggest = "max_neighbor_num"
        elif key == "neighborGroup":
            suggest = "neighbor_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpNeighborRange6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpNeighborRange6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpNeighborRange6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 max_neighbor_num: Optional[int] = None,
                 neighbor_group: Optional[str] = None,
                 prefix6: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_neighbor_num is not None:
            pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        if neighbor_group is not None:
            pulumi.set(__self__, "neighbor_group", neighbor_group)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> Optional[int]:
        return pulumi.get(self, "max_neighbor_num")

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> Optional[str]:
        return pulumi.get(self, "neighbor_group")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class RouterBgpNeighborRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxNeighborNum":
            suggest = "max_neighbor_num"
        elif key == "neighborGroup":
            suggest = "neighbor_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpNeighborRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpNeighborRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpNeighborRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 max_neighbor_num: Optional[int] = None,
                 neighbor_group: Optional[str] = None,
                 prefix: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_neighbor_num is not None:
            pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        if neighbor_group is not None:
            pulumi.set(__self__, "neighbor_group", neighbor_group)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> Optional[int]:
        return pulumi.get(self, "max_neighbor_num")

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> Optional[str]:
        return pulumi.get(self, "neighbor_group")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RouterBgpNetwork6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkImportCheck":
            suggest = "network_import_check"
        elif key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpNetwork6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpNetwork6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpNetwork6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backdoor: Optional[str] = None,
                 id: Optional[int] = None,
                 network_import_check: Optional[str] = None,
                 prefix6: Optional[str] = None,
                 route_map: Optional[str] = None):
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if network_import_check is not None:
            pulumi.set(__self__, "network_import_check", network_import_check)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[str]:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> Optional[str]:
        return pulumi.get(self, "network_import_check")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class RouterBgpNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkImportCheck":
            suggest = "network_import_check"
        elif key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backdoor: Optional[str] = None,
                 id: Optional[int] = None,
                 network_import_check: Optional[str] = None,
                 prefix: Optional[str] = None,
                 route_map: Optional[str] = None):
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if network_import_check is not None:
            pulumi.set(__self__, "network_import_check", network_import_check)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[str]:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> Optional[str]:
        return pulumi.get(self, "network_import_check")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class RouterBgpRedistribute6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpRedistribute6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpRedistribute6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpRedistribute6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 route_map: Optional[str] = None,
                 status: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterBgpRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 route_map: Optional[str] = None,
                 status: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterBgpVrf6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "leakTargets":
            suggest = "leak_targets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpVrf6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpVrf6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpVrf6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 leak_targets: Optional[Sequence['outputs.RouterBgpVrf6LeakTarget']] = None,
                 vrf: Optional[str] = None):
        if leak_targets is not None:
            pulumi.set(__self__, "leak_targets", leak_targets)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="leakTargets")
    def leak_targets(self) -> Optional[Sequence['outputs.RouterBgpVrf6LeakTarget']]:
        return pulumi.get(self, "leak_targets")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class RouterBgpVrf6LeakTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpVrf6LeakTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpVrf6LeakTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpVrf6LeakTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 route_map: Optional[str] = None,
                 vrf: Optional[str] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class RouterBgpVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exportRts":
            suggest = "export_rts"
        elif key == "importRouteMap":
            suggest = "import_route_map"
        elif key == "importRts":
            suggest = "import_rts"
        elif key == "leakTargets":
            suggest = "leak_targets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 export_rts: Optional[Sequence['outputs.RouterBgpVrfExportRt']] = None,
                 import_route_map: Optional[str] = None,
                 import_rts: Optional[Sequence['outputs.RouterBgpVrfImportRt']] = None,
                 leak_targets: Optional[Sequence['outputs.RouterBgpVrfLeakTarget']] = None,
                 rd: Optional[str] = None,
                 role: Optional[str] = None,
                 vrf: Optional[str] = None):
        if export_rts is not None:
            pulumi.set(__self__, "export_rts", export_rts)
        if import_route_map is not None:
            pulumi.set(__self__, "import_route_map", import_route_map)
        if import_rts is not None:
            pulumi.set(__self__, "import_rts", import_rts)
        if leak_targets is not None:
            pulumi.set(__self__, "leak_targets", leak_targets)
        if rd is not None:
            pulumi.set(__self__, "rd", rd)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="exportRts")
    def export_rts(self) -> Optional[Sequence['outputs.RouterBgpVrfExportRt']]:
        return pulumi.get(self, "export_rts")

    @property
    @pulumi.getter(name="importRouteMap")
    def import_route_map(self) -> Optional[str]:
        return pulumi.get(self, "import_route_map")

    @property
    @pulumi.getter(name="importRts")
    def import_rts(self) -> Optional[Sequence['outputs.RouterBgpVrfImportRt']]:
        return pulumi.get(self, "import_rts")

    @property
    @pulumi.getter(name="leakTargets")
    def leak_targets(self) -> Optional[Sequence['outputs.RouterBgpVrfLeakTarget']]:
        return pulumi.get(self, "leak_targets")

    @property
    @pulumi.getter
    def rd(self) -> Optional[str]:
        return pulumi.get(self, "rd")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class RouterBgpVrfExportRt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpVrfExportRt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpVrfExportRt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpVrfExportRt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[str] = None):
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[str]:
        return pulumi.get(self, "route_target")


@pulumi.output_type
class RouterBgpVrfImportRt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpVrfImportRt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpVrfImportRt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpVrfImportRt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[str] = None):
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[str]:
        return pulumi.get(self, "route_target")


@pulumi.output_type
class RouterBgpVrfLeak6(dict):
    def __init__(__self__, *,
                 targets: Optional[Sequence['outputs.RouterBgpVrfLeak6Target']] = None,
                 vrf: Optional[str] = None):
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.RouterBgpVrfLeak6Target']]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class RouterBgpVrfLeak6Target(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpVrfLeak6Target. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpVrfLeak6Target.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpVrfLeak6Target.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 route_map: Optional[str] = None,
                 vrf: Optional[str] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class RouterBgpVrfLeak(dict):
    def __init__(__self__, *,
                 targets: Optional[Sequence['outputs.RouterBgpVrfLeakTarget']] = None,
                 vrf: Optional[str] = None):
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.RouterBgpVrfLeakTarget']]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class RouterBgpVrfLeakTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterBgpVrfLeakTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterBgpVrfLeakTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterBgpVrfLeakTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 route_map: Optional[str] = None,
                 vrf: Optional[str] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class RouterCommunityListRule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 match: Optional[str] = None,
                 regexp: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        return pulumi.get(self, "regexp")


@pulumi.output_type
class RouterExtcommunityListRule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 match: Optional[str] = None,
                 regexp: Optional[str] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class RouterIsisIsisInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKeychainL1":
            suggest = "auth_keychain_l1"
        elif key == "authKeychainL2":
            suggest = "auth_keychain_l2"
        elif key == "authModeL1":
            suggest = "auth_mode_l1"
        elif key == "authModeL2":
            suggest = "auth_mode_l2"
        elif key == "authPasswordL1":
            suggest = "auth_password_l1"
        elif key == "authPasswordL2":
            suggest = "auth_password_l2"
        elif key == "authSendOnlyL1":
            suggest = "auth_send_only_l1"
        elif key == "authSendOnlyL2":
            suggest = "auth_send_only_l2"
        elif key == "circuitType":
            suggest = "circuit_type"
        elif key == "csnpIntervalL1":
            suggest = "csnp_interval_l1"
        elif key == "csnpIntervalL2":
            suggest = "csnp_interval_l2"
        elif key == "helloIntervalL1":
            suggest = "hello_interval_l1"
        elif key == "helloIntervalL2":
            suggest = "hello_interval_l2"
        elif key == "helloMultiplierL1":
            suggest = "hello_multiplier_l1"
        elif key == "helloMultiplierL2":
            suggest = "hello_multiplier_l2"
        elif key == "helloPadding":
            suggest = "hello_padding"
        elif key == "lspInterval":
            suggest = "lsp_interval"
        elif key == "lspRetransmitInterval":
            suggest = "lsp_retransmit_interval"
        elif key == "meshGroup":
            suggest = "mesh_group"
        elif key == "meshGroupId":
            suggest = "mesh_group_id"
        elif key == "metricL1":
            suggest = "metric_l1"
        elif key == "metricL2":
            suggest = "metric_l2"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "priorityL1":
            suggest = "priority_l1"
        elif key == "priorityL2":
            suggest = "priority_l2"
        elif key == "wideMetricL1":
            suggest = "wide_metric_l1"
        elif key == "wideMetricL2":
            suggest = "wide_metric_l2"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterIsisIsisInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterIsisIsisInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterIsisIsisInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_keychain_l1: Optional[str] = None,
                 auth_keychain_l2: Optional[str] = None,
                 auth_mode_l1: Optional[str] = None,
                 auth_mode_l2: Optional[str] = None,
                 auth_password_l1: Optional[str] = None,
                 auth_password_l2: Optional[str] = None,
                 auth_send_only_l1: Optional[str] = None,
                 auth_send_only_l2: Optional[str] = None,
                 circuit_type: Optional[str] = None,
                 csnp_interval_l1: Optional[int] = None,
                 csnp_interval_l2: Optional[int] = None,
                 hello_interval_l1: Optional[int] = None,
                 hello_interval_l2: Optional[int] = None,
                 hello_multiplier_l1: Optional[int] = None,
                 hello_multiplier_l2: Optional[int] = None,
                 hello_padding: Optional[str] = None,
                 lsp_interval: Optional[int] = None,
                 lsp_retransmit_interval: Optional[int] = None,
                 mesh_group: Optional[str] = None,
                 mesh_group_id: Optional[int] = None,
                 metric_l1: Optional[int] = None,
                 metric_l2: Optional[int] = None,
                 name: Optional[str] = None,
                 network_type: Optional[str] = None,
                 priority_l1: Optional[int] = None,
                 priority_l2: Optional[int] = None,
                 status: Optional[str] = None,
                 status6: Optional[str] = None,
                 wide_metric_l1: Optional[int] = None,
                 wide_metric_l2: Optional[int] = None):
        if auth_keychain_l1 is not None:
            pulumi.set(__self__, "auth_keychain_l1", auth_keychain_l1)
        if auth_keychain_l2 is not None:
            pulumi.set(__self__, "auth_keychain_l2", auth_keychain_l2)
        if auth_mode_l1 is not None:
            pulumi.set(__self__, "auth_mode_l1", auth_mode_l1)
        if auth_mode_l2 is not None:
            pulumi.set(__self__, "auth_mode_l2", auth_mode_l2)
        if auth_password_l1 is not None:
            pulumi.set(__self__, "auth_password_l1", auth_password_l1)
        if auth_password_l2 is not None:
            pulumi.set(__self__, "auth_password_l2", auth_password_l2)
        if auth_send_only_l1 is not None:
            pulumi.set(__self__, "auth_send_only_l1", auth_send_only_l1)
        if auth_send_only_l2 is not None:
            pulumi.set(__self__, "auth_send_only_l2", auth_send_only_l2)
        if circuit_type is not None:
            pulumi.set(__self__, "circuit_type", circuit_type)
        if csnp_interval_l1 is not None:
            pulumi.set(__self__, "csnp_interval_l1", csnp_interval_l1)
        if csnp_interval_l2 is not None:
            pulumi.set(__self__, "csnp_interval_l2", csnp_interval_l2)
        if hello_interval_l1 is not None:
            pulumi.set(__self__, "hello_interval_l1", hello_interval_l1)
        if hello_interval_l2 is not None:
            pulumi.set(__self__, "hello_interval_l2", hello_interval_l2)
        if hello_multiplier_l1 is not None:
            pulumi.set(__self__, "hello_multiplier_l1", hello_multiplier_l1)
        if hello_multiplier_l2 is not None:
            pulumi.set(__self__, "hello_multiplier_l2", hello_multiplier_l2)
        if hello_padding is not None:
            pulumi.set(__self__, "hello_padding", hello_padding)
        if lsp_interval is not None:
            pulumi.set(__self__, "lsp_interval", lsp_interval)
        if lsp_retransmit_interval is not None:
            pulumi.set(__self__, "lsp_retransmit_interval", lsp_retransmit_interval)
        if mesh_group is not None:
            pulumi.set(__self__, "mesh_group", mesh_group)
        if mesh_group_id is not None:
            pulumi.set(__self__, "mesh_group_id", mesh_group_id)
        if metric_l1 is not None:
            pulumi.set(__self__, "metric_l1", metric_l1)
        if metric_l2 is not None:
            pulumi.set(__self__, "metric_l2", metric_l2)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if priority_l1 is not None:
            pulumi.set(__self__, "priority_l1", priority_l1)
        if priority_l2 is not None:
            pulumi.set(__self__, "priority_l2", priority_l2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status6 is not None:
            pulumi.set(__self__, "status6", status6)
        if wide_metric_l1 is not None:
            pulumi.set(__self__, "wide_metric_l1", wide_metric_l1)
        if wide_metric_l2 is not None:
            pulumi.set(__self__, "wide_metric_l2", wide_metric_l2)

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> Optional[str]:
        return pulumi.get(self, "auth_keychain_l1")

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> Optional[str]:
        return pulumi.get(self, "auth_keychain_l2")

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> Optional[str]:
        return pulumi.get(self, "auth_mode_l1")

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> Optional[str]:
        return pulumi.get(self, "auth_mode_l2")

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> Optional[str]:
        return pulumi.get(self, "auth_password_l1")

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> Optional[str]:
        return pulumi.get(self, "auth_password_l2")

    @property
    @pulumi.getter(name="authSendOnlyL1")
    def auth_send_only_l1(self) -> Optional[str]:
        return pulumi.get(self, "auth_send_only_l1")

    @property
    @pulumi.getter(name="authSendOnlyL2")
    def auth_send_only_l2(self) -> Optional[str]:
        return pulumi.get(self, "auth_send_only_l2")

    @property
    @pulumi.getter(name="circuitType")
    def circuit_type(self) -> Optional[str]:
        return pulumi.get(self, "circuit_type")

    @property
    @pulumi.getter(name="csnpIntervalL1")
    def csnp_interval_l1(self) -> Optional[int]:
        return pulumi.get(self, "csnp_interval_l1")

    @property
    @pulumi.getter(name="csnpIntervalL2")
    def csnp_interval_l2(self) -> Optional[int]:
        return pulumi.get(self, "csnp_interval_l2")

    @property
    @pulumi.getter(name="helloIntervalL1")
    def hello_interval_l1(self) -> Optional[int]:
        return pulumi.get(self, "hello_interval_l1")

    @property
    @pulumi.getter(name="helloIntervalL2")
    def hello_interval_l2(self) -> Optional[int]:
        return pulumi.get(self, "hello_interval_l2")

    @property
    @pulumi.getter(name="helloMultiplierL1")
    def hello_multiplier_l1(self) -> Optional[int]:
        return pulumi.get(self, "hello_multiplier_l1")

    @property
    @pulumi.getter(name="helloMultiplierL2")
    def hello_multiplier_l2(self) -> Optional[int]:
        return pulumi.get(self, "hello_multiplier_l2")

    @property
    @pulumi.getter(name="helloPadding")
    def hello_padding(self) -> Optional[str]:
        return pulumi.get(self, "hello_padding")

    @property
    @pulumi.getter(name="lspInterval")
    def lsp_interval(self) -> Optional[int]:
        return pulumi.get(self, "lsp_interval")

    @property
    @pulumi.getter(name="lspRetransmitInterval")
    def lsp_retransmit_interval(self) -> Optional[int]:
        return pulumi.get(self, "lsp_retransmit_interval")

    @property
    @pulumi.getter(name="meshGroup")
    def mesh_group(self) -> Optional[str]:
        return pulumi.get(self, "mesh_group")

    @property
    @pulumi.getter(name="meshGroupId")
    def mesh_group_id(self) -> Optional[int]:
        return pulumi.get(self, "mesh_group_id")

    @property
    @pulumi.getter(name="metricL1")
    def metric_l1(self) -> Optional[int]:
        return pulumi.get(self, "metric_l1")

    @property
    @pulumi.getter(name="metricL2")
    def metric_l2(self) -> Optional[int]:
        return pulumi.get(self, "metric_l2")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="priorityL1")
    def priority_l1(self) -> Optional[int]:
        return pulumi.get(self, "priority_l1")

    @property
    @pulumi.getter(name="priorityL2")
    def priority_l2(self) -> Optional[int]:
        return pulumi.get(self, "priority_l2")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def status6(self) -> Optional[str]:
        return pulumi.get(self, "status6")

    @property
    @pulumi.getter(name="wideMetricL1")
    def wide_metric_l1(self) -> Optional[int]:
        return pulumi.get(self, "wide_metric_l1")

    @property
    @pulumi.getter(name="wideMetricL2")
    def wide_metric_l2(self) -> Optional[int]:
        return pulumi.get(self, "wide_metric_l2")


@pulumi.output_type
class RouterIsisIsisNet(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 net: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if net is not None:
            pulumi.set(__self__, "net", net)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def net(self) -> Optional[str]:
        return pulumi.get(self, "net")


@pulumi.output_type
class RouterIsisRedistribute6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterIsisRedistribute6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterIsisRedistribute6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterIsisRedistribute6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: Optional[str] = None,
                 metric: Optional[int] = None,
                 metric_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterIsisRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterIsisRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterIsisRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterIsisRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: Optional[str] = None,
                 metric: Optional[int] = None,
                 metric_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterIsisSummaryAddress6(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 level: Optional[str] = None,
                 prefix6: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class RouterIsisSummaryAddress(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 level: Optional[str] = None,
                 prefix: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RouterKeyChainKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptLifetime":
            suggest = "accept_lifetime"
        elif key == "keyString":
            suggest = "key_string"
        elif key == "sendLifetime":
            suggest = "send_lifetime"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterKeyChainKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterKeyChainKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterKeyChainKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_lifetime: Optional[str] = None,
                 algorithm: Optional[str] = None,
                 id: Optional[int] = None,
                 key_string: Optional[str] = None,
                 send_lifetime: Optional[str] = None):
        if accept_lifetime is not None:
            pulumi.set(__self__, "accept_lifetime", accept_lifetime)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if send_lifetime is not None:
            pulumi.set(__self__, "send_lifetime", send_lifetime)

    @property
    @pulumi.getter(name="acceptLifetime")
    def accept_lifetime(self) -> Optional[str]:
        return pulumi.get(self, "accept_lifetime")

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[str]:
        return pulumi.get(self, "key_string")

    @property
    @pulumi.getter(name="sendLifetime")
    def send_lifetime(self) -> Optional[str]:
        return pulumi.get(self, "send_lifetime")


@pulumi.output_type
class RouterMulticast6Interface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "helloHoldtime":
            suggest = "hello_holdtime"
        elif key == "helloInterval":
            suggest = "hello_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterMulticast6Interface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterMulticast6Interface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterMulticast6Interface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hello_holdtime: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 name: Optional[str] = None):
        if hello_holdtime is not None:
            pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> Optional[int]:
        return pulumi.get(self, "hello_holdtime")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterMulticast6PimSmGlobal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "registerRateLimit":
            suggest = "register_rate_limit"
        elif key == "rpAddresses":
            suggest = "rp_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterMulticast6PimSmGlobal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterMulticast6PimSmGlobal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterMulticast6PimSmGlobal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 register_rate_limit: Optional[int] = None,
                 rp_addresses: Optional[Sequence['outputs.RouterMulticast6PimSmGlobalRpAddress']] = None):
        if register_rate_limit is not None:
            pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        if rp_addresses is not None:
            pulumi.set(__self__, "rp_addresses", rp_addresses)

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> Optional[int]:
        return pulumi.get(self, "register_rate_limit")

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Optional[Sequence['outputs.RouterMulticast6PimSmGlobalRpAddress']]:
        return pulumi.get(self, "rp_addresses")


@pulumi.output_type
class RouterMulticast6PimSmGlobalRpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ip6Address":
            suggest = "ip6_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterMulticast6PimSmGlobalRpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterMulticast6PimSmGlobalRpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterMulticast6PimSmGlobalRpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip6_address: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[str]:
        return pulumi.get(self, "ip6_address")


@pulumi.output_type
class RouterMulticastFlowFlow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupAddr":
            suggest = "group_addr"
        elif key == "sourceAddr":
            suggest = "source_addr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterMulticastFlowFlow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterMulticastFlowFlow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterMulticastFlowFlow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_addr: Optional[str] = None,
                 id: Optional[int] = None,
                 source_addr: Optional[str] = None):
        if group_addr is not None:
            pulumi.set(__self__, "group_addr", group_addr)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source_addr is not None:
            pulumi.set(__self__, "source_addr", source_addr)

    @property
    @pulumi.getter(name="groupAddr")
    def group_addr(self) -> Optional[str]:
        return pulumi.get(self, "group_addr")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sourceAddr")
    def source_addr(self) -> Optional[str]:
        return pulumi.get(self, "source_addr")


@pulumi.output_type
class RouterMulticastInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ciscoExcludeGenid":
            suggest = "cisco_exclude_genid"
        elif key == "drPriority":
            suggest = "dr_priority"
        elif key == "helloHoldtime":
            suggest = "hello_holdtime"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "joinGroups":
            suggest = "join_groups"
        elif key == "multicastFlow":
            suggest = "multicast_flow"
        elif key == "neighbourFilter":
            suggest = "neighbour_filter"
        elif key == "pimMode":
            suggest = "pim_mode"
        elif key == "propagationDelay":
            suggest = "propagation_delay"
        elif key == "rpCandidate":
            suggest = "rp_candidate"
        elif key == "rpCandidateGroup":
            suggest = "rp_candidate_group"
        elif key == "rpCandidateInterval":
            suggest = "rp_candidate_interval"
        elif key == "rpCandidatePriority":
            suggest = "rp_candidate_priority"
        elif key == "rpfNbrFailBack":
            suggest = "rpf_nbr_fail_back"
        elif key == "rpfNbrFailBackFilter":
            suggest = "rpf_nbr_fail_back_filter"
        elif key == "stateRefreshInterval":
            suggest = "state_refresh_interval"
        elif key == "staticGroup":
            suggest = "static_group"
        elif key == "ttlThreshold":
            suggest = "ttl_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterMulticastInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterMulticastInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterMulticastInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bfd: Optional[str] = None,
                 cisco_exclude_genid: Optional[str] = None,
                 dr_priority: Optional[int] = None,
                 hello_holdtime: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 igmp: Optional['outputs.RouterMulticastInterfaceIgmp'] = None,
                 join_groups: Optional[Sequence['outputs.RouterMulticastInterfaceJoinGroup']] = None,
                 multicast_flow: Optional[str] = None,
                 name: Optional[str] = None,
                 neighbour_filter: Optional[str] = None,
                 passive: Optional[str] = None,
                 pim_mode: Optional[str] = None,
                 propagation_delay: Optional[int] = None,
                 rp_candidate: Optional[str] = None,
                 rp_candidate_group: Optional[str] = None,
                 rp_candidate_interval: Optional[int] = None,
                 rp_candidate_priority: Optional[int] = None,
                 rpf_nbr_fail_back: Optional[str] = None,
                 rpf_nbr_fail_back_filter: Optional[str] = None,
                 state_refresh_interval: Optional[int] = None,
                 static_group: Optional[str] = None,
                 ttl_threshold: Optional[int] = None):
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if cisco_exclude_genid is not None:
            pulumi.set(__self__, "cisco_exclude_genid", cisco_exclude_genid)
        if dr_priority is not None:
            pulumi.set(__self__, "dr_priority", dr_priority)
        if hello_holdtime is not None:
            pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if igmp is not None:
            pulumi.set(__self__, "igmp", igmp)
        if join_groups is not None:
            pulumi.set(__self__, "join_groups", join_groups)
        if multicast_flow is not None:
            pulumi.set(__self__, "multicast_flow", multicast_flow)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbour_filter is not None:
            pulumi.set(__self__, "neighbour_filter", neighbour_filter)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if pim_mode is not None:
            pulumi.set(__self__, "pim_mode", pim_mode)
        if propagation_delay is not None:
            pulumi.set(__self__, "propagation_delay", propagation_delay)
        if rp_candidate is not None:
            pulumi.set(__self__, "rp_candidate", rp_candidate)
        if rp_candidate_group is not None:
            pulumi.set(__self__, "rp_candidate_group", rp_candidate_group)
        if rp_candidate_interval is not None:
            pulumi.set(__self__, "rp_candidate_interval", rp_candidate_interval)
        if rp_candidate_priority is not None:
            pulumi.set(__self__, "rp_candidate_priority", rp_candidate_priority)
        if rpf_nbr_fail_back is not None:
            pulumi.set(__self__, "rpf_nbr_fail_back", rpf_nbr_fail_back)
        if rpf_nbr_fail_back_filter is not None:
            pulumi.set(__self__, "rpf_nbr_fail_back_filter", rpf_nbr_fail_back_filter)
        if state_refresh_interval is not None:
            pulumi.set(__self__, "state_refresh_interval", state_refresh_interval)
        if static_group is not None:
            pulumi.set(__self__, "static_group", static_group)
        if ttl_threshold is not None:
            pulumi.set(__self__, "ttl_threshold", ttl_threshold)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="ciscoExcludeGenid")
    def cisco_exclude_genid(self) -> Optional[str]:
        return pulumi.get(self, "cisco_exclude_genid")

    @property
    @pulumi.getter(name="drPriority")
    def dr_priority(self) -> Optional[int]:
        return pulumi.get(self, "dr_priority")

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> Optional[int]:
        return pulumi.get(self, "hello_holdtime")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def igmp(self) -> Optional['outputs.RouterMulticastInterfaceIgmp']:
        return pulumi.get(self, "igmp")

    @property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Optional[Sequence['outputs.RouterMulticastInterfaceJoinGroup']]:
        return pulumi.get(self, "join_groups")

    @property
    @pulumi.getter(name="multicastFlow")
    def multicast_flow(self) -> Optional[str]:
        return pulumi.get(self, "multicast_flow")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="neighbourFilter")
    def neighbour_filter(self) -> Optional[str]:
        return pulumi.get(self, "neighbour_filter")

    @property
    @pulumi.getter
    def passive(self) -> Optional[str]:
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter(name="pimMode")
    def pim_mode(self) -> Optional[str]:
        return pulumi.get(self, "pim_mode")

    @property
    @pulumi.getter(name="propagationDelay")
    def propagation_delay(self) -> Optional[int]:
        return pulumi.get(self, "propagation_delay")

    @property
    @pulumi.getter(name="rpCandidate")
    def rp_candidate(self) -> Optional[str]:
        return pulumi.get(self, "rp_candidate")

    @property
    @pulumi.getter(name="rpCandidateGroup")
    def rp_candidate_group(self) -> Optional[str]:
        return pulumi.get(self, "rp_candidate_group")

    @property
    @pulumi.getter(name="rpCandidateInterval")
    def rp_candidate_interval(self) -> Optional[int]:
        return pulumi.get(self, "rp_candidate_interval")

    @property
    @pulumi.getter(name="rpCandidatePriority")
    def rp_candidate_priority(self) -> Optional[int]:
        return pulumi.get(self, "rp_candidate_priority")

    @property
    @pulumi.getter(name="rpfNbrFailBack")
    def rpf_nbr_fail_back(self) -> Optional[str]:
        return pulumi.get(self, "rpf_nbr_fail_back")

    @property
    @pulumi.getter(name="rpfNbrFailBackFilter")
    def rpf_nbr_fail_back_filter(self) -> Optional[str]:
        return pulumi.get(self, "rpf_nbr_fail_back_filter")

    @property
    @pulumi.getter(name="stateRefreshInterval")
    def state_refresh_interval(self) -> Optional[int]:
        return pulumi.get(self, "state_refresh_interval")

    @property
    @pulumi.getter(name="staticGroup")
    def static_group(self) -> Optional[str]:
        return pulumi.get(self, "static_group")

    @property
    @pulumi.getter(name="ttlThreshold")
    def ttl_threshold(self) -> Optional[int]:
        return pulumi.get(self, "ttl_threshold")


@pulumi.output_type
class RouterMulticastInterfaceIgmp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessGroup":
            suggest = "access_group"
        elif key == "immediateLeaveGroup":
            suggest = "immediate_leave_group"
        elif key == "lastMemberQueryCount":
            suggest = "last_member_query_count"
        elif key == "lastMemberQueryInterval":
            suggest = "last_member_query_interval"
        elif key == "queryInterval":
            suggest = "query_interval"
        elif key == "queryMaxResponseTime":
            suggest = "query_max_response_time"
        elif key == "queryTimeout":
            suggest = "query_timeout"
        elif key == "routerAlertCheck":
            suggest = "router_alert_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterMulticastInterfaceIgmp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterMulticastInterfaceIgmp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterMulticastInterfaceIgmp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_group: Optional[str] = None,
                 immediate_leave_group: Optional[str] = None,
                 last_member_query_count: Optional[int] = None,
                 last_member_query_interval: Optional[int] = None,
                 query_interval: Optional[int] = None,
                 query_max_response_time: Optional[int] = None,
                 query_timeout: Optional[int] = None,
                 router_alert_check: Optional[str] = None,
                 version: Optional[str] = None):
        if access_group is not None:
            pulumi.set(__self__, "access_group", access_group)
        if immediate_leave_group is not None:
            pulumi.set(__self__, "immediate_leave_group", immediate_leave_group)
        if last_member_query_count is not None:
            pulumi.set(__self__, "last_member_query_count", last_member_query_count)
        if last_member_query_interval is not None:
            pulumi.set(__self__, "last_member_query_interval", last_member_query_interval)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if query_max_response_time is not None:
            pulumi.set(__self__, "query_max_response_time", query_max_response_time)
        if query_timeout is not None:
            pulumi.set(__self__, "query_timeout", query_timeout)
        if router_alert_check is not None:
            pulumi.set(__self__, "router_alert_check", router_alert_check)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessGroup")
    def access_group(self) -> Optional[str]:
        return pulumi.get(self, "access_group")

    @property
    @pulumi.getter(name="immediateLeaveGroup")
    def immediate_leave_group(self) -> Optional[str]:
        return pulumi.get(self, "immediate_leave_group")

    @property
    @pulumi.getter(name="lastMemberQueryCount")
    def last_member_query_count(self) -> Optional[int]:
        return pulumi.get(self, "last_member_query_count")

    @property
    @pulumi.getter(name="lastMemberQueryInterval")
    def last_member_query_interval(self) -> Optional[int]:
        return pulumi.get(self, "last_member_query_interval")

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[int]:
        return pulumi.get(self, "query_interval")

    @property
    @pulumi.getter(name="queryMaxResponseTime")
    def query_max_response_time(self) -> Optional[int]:
        return pulumi.get(self, "query_max_response_time")

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> Optional[int]:
        return pulumi.get(self, "query_timeout")

    @property
    @pulumi.getter(name="routerAlertCheck")
    def router_alert_check(self) -> Optional[str]:
        return pulumi.get(self, "router_alert_check")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class RouterMulticastInterfaceJoinGroup(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")


@pulumi.output_type
class RouterMulticastPimSmGlobal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptRegisterList":
            suggest = "accept_register_list"
        elif key == "acceptSourceList":
            suggest = "accept_source_list"
        elif key == "bsrAllowQuickRefresh":
            suggest = "bsr_allow_quick_refresh"
        elif key == "bsrCandidate":
            suggest = "bsr_candidate"
        elif key == "bsrHash":
            suggest = "bsr_hash"
        elif key == "bsrInterface":
            suggest = "bsr_interface"
        elif key == "bsrPriority":
            suggest = "bsr_priority"
        elif key == "ciscoCrpPrefix":
            suggest = "cisco_crp_prefix"
        elif key == "ciscoIgnoreRpSetPriority":
            suggest = "cisco_ignore_rp_set_priority"
        elif key == "ciscoRegisterChecksum":
            suggest = "cisco_register_checksum"
        elif key == "ciscoRegisterChecksumGroup":
            suggest = "cisco_register_checksum_group"
        elif key == "joinPruneHoldtime":
            suggest = "join_prune_holdtime"
        elif key == "messageInterval":
            suggest = "message_interval"
        elif key == "nullRegisterRetries":
            suggest = "null_register_retries"
        elif key == "pimUseSdwan":
            suggest = "pim_use_sdwan"
        elif key == "registerRateLimit":
            suggest = "register_rate_limit"
        elif key == "registerRpReachability":
            suggest = "register_rp_reachability"
        elif key == "registerSource":
            suggest = "register_source"
        elif key == "registerSourceInterface":
            suggest = "register_source_interface"
        elif key == "registerSourceIp":
            suggest = "register_source_ip"
        elif key == "registerSupression":
            suggest = "register_supression"
        elif key == "rpAddresses":
            suggest = "rp_addresses"
        elif key == "rpRegisterKeepalive":
            suggest = "rp_register_keepalive"
        elif key == "sptThreshold":
            suggest = "spt_threshold"
        elif key == "sptThresholdGroup":
            suggest = "spt_threshold_group"
        elif key == "ssmRange":
            suggest = "ssm_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterMulticastPimSmGlobal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterMulticastPimSmGlobal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterMulticastPimSmGlobal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_register_list: Optional[str] = None,
                 accept_source_list: Optional[str] = None,
                 bsr_allow_quick_refresh: Optional[str] = None,
                 bsr_candidate: Optional[str] = None,
                 bsr_hash: Optional[int] = None,
                 bsr_interface: Optional[str] = None,
                 bsr_priority: Optional[int] = None,
                 cisco_crp_prefix: Optional[str] = None,
                 cisco_ignore_rp_set_priority: Optional[str] = None,
                 cisco_register_checksum: Optional[str] = None,
                 cisco_register_checksum_group: Optional[str] = None,
                 join_prune_holdtime: Optional[int] = None,
                 message_interval: Optional[int] = None,
                 null_register_retries: Optional[int] = None,
                 pim_use_sdwan: Optional[str] = None,
                 register_rate_limit: Optional[int] = None,
                 register_rp_reachability: Optional[str] = None,
                 register_source: Optional[str] = None,
                 register_source_interface: Optional[str] = None,
                 register_source_ip: Optional[str] = None,
                 register_supression: Optional[int] = None,
                 rp_addresses: Optional[Sequence['outputs.RouterMulticastPimSmGlobalRpAddress']] = None,
                 rp_register_keepalive: Optional[int] = None,
                 spt_threshold: Optional[str] = None,
                 spt_threshold_group: Optional[str] = None,
                 ssm: Optional[str] = None,
                 ssm_range: Optional[str] = None):
        if accept_register_list is not None:
            pulumi.set(__self__, "accept_register_list", accept_register_list)
        if accept_source_list is not None:
            pulumi.set(__self__, "accept_source_list", accept_source_list)
        if bsr_allow_quick_refresh is not None:
            pulumi.set(__self__, "bsr_allow_quick_refresh", bsr_allow_quick_refresh)
        if bsr_candidate is not None:
            pulumi.set(__self__, "bsr_candidate", bsr_candidate)
        if bsr_hash is not None:
            pulumi.set(__self__, "bsr_hash", bsr_hash)
        if bsr_interface is not None:
            pulumi.set(__self__, "bsr_interface", bsr_interface)
        if bsr_priority is not None:
            pulumi.set(__self__, "bsr_priority", bsr_priority)
        if cisco_crp_prefix is not None:
            pulumi.set(__self__, "cisco_crp_prefix", cisco_crp_prefix)
        if cisco_ignore_rp_set_priority is not None:
            pulumi.set(__self__, "cisco_ignore_rp_set_priority", cisco_ignore_rp_set_priority)
        if cisco_register_checksum is not None:
            pulumi.set(__self__, "cisco_register_checksum", cisco_register_checksum)
        if cisco_register_checksum_group is not None:
            pulumi.set(__self__, "cisco_register_checksum_group", cisco_register_checksum_group)
        if join_prune_holdtime is not None:
            pulumi.set(__self__, "join_prune_holdtime", join_prune_holdtime)
        if message_interval is not None:
            pulumi.set(__self__, "message_interval", message_interval)
        if null_register_retries is not None:
            pulumi.set(__self__, "null_register_retries", null_register_retries)
        if pim_use_sdwan is not None:
            pulumi.set(__self__, "pim_use_sdwan", pim_use_sdwan)
        if register_rate_limit is not None:
            pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        if register_rp_reachability is not None:
            pulumi.set(__self__, "register_rp_reachability", register_rp_reachability)
        if register_source is not None:
            pulumi.set(__self__, "register_source", register_source)
        if register_source_interface is not None:
            pulumi.set(__self__, "register_source_interface", register_source_interface)
        if register_source_ip is not None:
            pulumi.set(__self__, "register_source_ip", register_source_ip)
        if register_supression is not None:
            pulumi.set(__self__, "register_supression", register_supression)
        if rp_addresses is not None:
            pulumi.set(__self__, "rp_addresses", rp_addresses)
        if rp_register_keepalive is not None:
            pulumi.set(__self__, "rp_register_keepalive", rp_register_keepalive)
        if spt_threshold is not None:
            pulumi.set(__self__, "spt_threshold", spt_threshold)
        if spt_threshold_group is not None:
            pulumi.set(__self__, "spt_threshold_group", spt_threshold_group)
        if ssm is not None:
            pulumi.set(__self__, "ssm", ssm)
        if ssm_range is not None:
            pulumi.set(__self__, "ssm_range", ssm_range)

    @property
    @pulumi.getter(name="acceptRegisterList")
    def accept_register_list(self) -> Optional[str]:
        return pulumi.get(self, "accept_register_list")

    @property
    @pulumi.getter(name="acceptSourceList")
    def accept_source_list(self) -> Optional[str]:
        return pulumi.get(self, "accept_source_list")

    @property
    @pulumi.getter(name="bsrAllowQuickRefresh")
    def bsr_allow_quick_refresh(self) -> Optional[str]:
        return pulumi.get(self, "bsr_allow_quick_refresh")

    @property
    @pulumi.getter(name="bsrCandidate")
    def bsr_candidate(self) -> Optional[str]:
        return pulumi.get(self, "bsr_candidate")

    @property
    @pulumi.getter(name="bsrHash")
    def bsr_hash(self) -> Optional[int]:
        return pulumi.get(self, "bsr_hash")

    @property
    @pulumi.getter(name="bsrInterface")
    def bsr_interface(self) -> Optional[str]:
        return pulumi.get(self, "bsr_interface")

    @property
    @pulumi.getter(name="bsrPriority")
    def bsr_priority(self) -> Optional[int]:
        return pulumi.get(self, "bsr_priority")

    @property
    @pulumi.getter(name="ciscoCrpPrefix")
    def cisco_crp_prefix(self) -> Optional[str]:
        return pulumi.get(self, "cisco_crp_prefix")

    @property
    @pulumi.getter(name="ciscoIgnoreRpSetPriority")
    def cisco_ignore_rp_set_priority(self) -> Optional[str]:
        return pulumi.get(self, "cisco_ignore_rp_set_priority")

    @property
    @pulumi.getter(name="ciscoRegisterChecksum")
    def cisco_register_checksum(self) -> Optional[str]:
        return pulumi.get(self, "cisco_register_checksum")

    @property
    @pulumi.getter(name="ciscoRegisterChecksumGroup")
    def cisco_register_checksum_group(self) -> Optional[str]:
        return pulumi.get(self, "cisco_register_checksum_group")

    @property
    @pulumi.getter(name="joinPruneHoldtime")
    def join_prune_holdtime(self) -> Optional[int]:
        return pulumi.get(self, "join_prune_holdtime")

    @property
    @pulumi.getter(name="messageInterval")
    def message_interval(self) -> Optional[int]:
        return pulumi.get(self, "message_interval")

    @property
    @pulumi.getter(name="nullRegisterRetries")
    def null_register_retries(self) -> Optional[int]:
        return pulumi.get(self, "null_register_retries")

    @property
    @pulumi.getter(name="pimUseSdwan")
    def pim_use_sdwan(self) -> Optional[str]:
        return pulumi.get(self, "pim_use_sdwan")

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> Optional[int]:
        return pulumi.get(self, "register_rate_limit")

    @property
    @pulumi.getter(name="registerRpReachability")
    def register_rp_reachability(self) -> Optional[str]:
        return pulumi.get(self, "register_rp_reachability")

    @property
    @pulumi.getter(name="registerSource")
    def register_source(self) -> Optional[str]:
        return pulumi.get(self, "register_source")

    @property
    @pulumi.getter(name="registerSourceInterface")
    def register_source_interface(self) -> Optional[str]:
        return pulumi.get(self, "register_source_interface")

    @property
    @pulumi.getter(name="registerSourceIp")
    def register_source_ip(self) -> Optional[str]:
        return pulumi.get(self, "register_source_ip")

    @property
    @pulumi.getter(name="registerSupression")
    def register_supression(self) -> Optional[int]:
        return pulumi.get(self, "register_supression")

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Optional[Sequence['outputs.RouterMulticastPimSmGlobalRpAddress']]:
        return pulumi.get(self, "rp_addresses")

    @property
    @pulumi.getter(name="rpRegisterKeepalive")
    def rp_register_keepalive(self) -> Optional[int]:
        return pulumi.get(self, "rp_register_keepalive")

    @property
    @pulumi.getter(name="sptThreshold")
    def spt_threshold(self) -> Optional[str]:
        return pulumi.get(self, "spt_threshold")

    @property
    @pulumi.getter(name="sptThresholdGroup")
    def spt_threshold_group(self) -> Optional[str]:
        return pulumi.get(self, "spt_threshold_group")

    @property
    @pulumi.getter
    def ssm(self) -> Optional[str]:
        return pulumi.get(self, "ssm")

    @property
    @pulumi.getter(name="ssmRange")
    def ssm_range(self) -> Optional[str]:
        return pulumi.get(self, "ssm_range")


@pulumi.output_type
class RouterMulticastPimSmGlobalRpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterMulticastPimSmGlobalRpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterMulticastPimSmGlobalRpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterMulticastPimSmGlobalRpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None):
        if group is not None:
            pulumi.set(__self__, "group", group)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class RouterOspf6Area(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultCost":
            suggest = "default_cost"
        elif key == "ipsecAuthAlg":
            suggest = "ipsec_auth_alg"
        elif key == "ipsecEncAlg":
            suggest = "ipsec_enc_alg"
        elif key == "ipsecKeys":
            suggest = "ipsec_keys"
        elif key == "keyRolloverInterval":
            suggest = "key_rollover_interval"
        elif key == "nssaDefaultInformationOriginate":
            suggest = "nssa_default_information_originate"
        elif key == "nssaDefaultInformationOriginateMetric":
            suggest = "nssa_default_information_originate_metric"
        elif key == "nssaDefaultInformationOriginateMetricType":
            suggest = "nssa_default_information_originate_metric_type"
        elif key == "nssaRedistribution":
            suggest = "nssa_redistribution"
        elif key == "nssaTranslatorRole":
            suggest = "nssa_translator_role"
        elif key == "stubType":
            suggest = "stub_type"
        elif key == "virtualLinks":
            suggest = "virtual_links"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspf6Area. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspf6Area.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspf6Area.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 default_cost: Optional[int] = None,
                 id: Optional[str] = None,
                 ipsec_auth_alg: Optional[str] = None,
                 ipsec_enc_alg: Optional[str] = None,
                 ipsec_keys: Optional[Sequence['outputs.RouterOspf6AreaIpsecKey']] = None,
                 key_rollover_interval: Optional[int] = None,
                 nssa_default_information_originate: Optional[str] = None,
                 nssa_default_information_originate_metric: Optional[int] = None,
                 nssa_default_information_originate_metric_type: Optional[str] = None,
                 nssa_redistribution: Optional[str] = None,
                 nssa_translator_role: Optional[str] = None,
                 ranges: Optional[Sequence['outputs.RouterOspf6AreaRange']] = None,
                 stub_type: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_links: Optional[Sequence['outputs.RouterOspf6AreaVirtualLink']] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if default_cost is not None:
            pulumi.set(__self__, "default_cost", default_cost)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_redistribution is not None:
            pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        if nssa_translator_role is not None:
            pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if stub_type is not None:
            pulumi.set(__self__, "stub_type", stub_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_links is not None:
            pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> Optional[int]:
        return pulumi.get(self, "default_cost")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[Sequence['outputs.RouterOspf6AreaIpsecKey']]:
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[int]:
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[str]:
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[int]:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[str]:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> Optional[str]:
        return pulumi.get(self, "nssa_redistribution")

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> Optional[str]:
        return pulumi.get(self, "nssa_translator_role")

    @property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.RouterOspf6AreaRange']]:
        return pulumi.get(self, "ranges")

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> Optional[str]:
        return pulumi.get(self, "stub_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Optional[Sequence['outputs.RouterOspf6AreaVirtualLink']]:
        return pulumi.get(self, "virtual_links")


@pulumi.output_type
class RouterOspf6AreaIpsecKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"
        elif key == "encKey":
            suggest = "enc_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspf6AreaIpsecKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspf6AreaIpsecKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspf6AreaIpsecKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_key: Optional[str] = None,
                 enc_key: Optional[str] = None,
                 spi: Optional[int] = None):
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[str]:
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> Optional[int]:
        return pulumi.get(self, "spi")


@pulumi.output_type
class RouterOspf6AreaRange(dict):
    def __init__(__self__, *,
                 advertise: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None):
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[str]:
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class RouterOspf6AreaVirtualLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deadInterval":
            suggest = "dead_interval"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "ipsecAuthAlg":
            suggest = "ipsec_auth_alg"
        elif key == "ipsecEncAlg":
            suggest = "ipsec_enc_alg"
        elif key == "ipsecKeys":
            suggest = "ipsec_keys"
        elif key == "keyRolloverInterval":
            suggest = "key_rollover_interval"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "transmitDelay":
            suggest = "transmit_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspf6AreaVirtualLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspf6AreaVirtualLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspf6AreaVirtualLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 dead_interval: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 ipsec_auth_alg: Optional[str] = None,
                 ipsec_enc_alg: Optional[str] = None,
                 ipsec_keys: Optional[Sequence['outputs.RouterOspf6AreaVirtualLinkIpsecKey']] = None,
                 key_rollover_interval: Optional[int] = None,
                 name: Optional[str] = None,
                 peer: Optional[str] = None,
                 retransmit_interval: Optional[int] = None,
                 transmit_delay: Optional[int] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[int]:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[Sequence['outputs.RouterOspf6AreaVirtualLinkIpsecKey']]:
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[int]:
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peer(self) -> Optional[str]:
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[int]:
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[int]:
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class RouterOspf6AreaVirtualLinkIpsecKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"
        elif key == "encKey":
            suggest = "enc_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspf6AreaVirtualLinkIpsecKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspf6AreaVirtualLinkIpsecKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspf6AreaVirtualLinkIpsecKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_key: Optional[str] = None,
                 enc_key: Optional[str] = None,
                 spi: Optional[int] = None):
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[str]:
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> Optional[int]:
        return pulumi.get(self, "spi")


@pulumi.output_type
class RouterOspf6Ospf6Interface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaId":
            suggest = "area_id"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "ipsecAuthAlg":
            suggest = "ipsec_auth_alg"
        elif key == "ipsecEncAlg":
            suggest = "ipsec_enc_alg"
        elif key == "ipsecKeys":
            suggest = "ipsec_keys"
        elif key == "keyRolloverInterval":
            suggest = "key_rollover_interval"
        elif key == "mtuIgnore":
            suggest = "mtu_ignore"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "transmitDelay":
            suggest = "transmit_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspf6Ospf6Interface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspf6Ospf6Interface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspf6Ospf6Interface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_id: Optional[str] = None,
                 authentication: Optional[str] = None,
                 bfd: Optional[str] = None,
                 cost: Optional[int] = None,
                 dead_interval: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 interface: Optional[str] = None,
                 ipsec_auth_alg: Optional[str] = None,
                 ipsec_enc_alg: Optional[str] = None,
                 ipsec_keys: Optional[Sequence['outputs.RouterOspf6Ospf6InterfaceIpsecKey']] = None,
                 key_rollover_interval: Optional[int] = None,
                 mtu: Optional[int] = None,
                 mtu_ignore: Optional[str] = None,
                 name: Optional[str] = None,
                 neighbors: Optional[Sequence['outputs.RouterOspf6Ospf6InterfaceNeighbor']] = None,
                 network_type: Optional[str] = None,
                 priority: Optional[int] = None,
                 retransmit_interval: Optional[int] = None,
                 status: Optional[str] = None,
                 transmit_delay: Optional[int] = None):
        if area_id is not None:
            pulumi.set(__self__, "area_id", area_id)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> Optional[str]:
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[int]:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[Sequence['outputs.RouterOspf6Ospf6InterfaceIpsecKey']]:
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[int]:
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[str]:
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[Sequence['outputs.RouterOspf6Ospf6InterfaceNeighbor']]:
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[int]:
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[int]:
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class RouterOspf6Ospf6InterfaceIpsecKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"
        elif key == "encKey":
            suggest = "enc_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspf6Ospf6InterfaceIpsecKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspf6Ospf6InterfaceIpsecKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspf6Ospf6InterfaceIpsecKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_key: Optional[str] = None,
                 enc_key: Optional[str] = None,
                 spi: Optional[int] = None):
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[str]:
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> Optional[int]:
        return pulumi.get(self, "spi")


@pulumi.output_type
class RouterOspf6Ospf6InterfaceNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pollInterval":
            suggest = "poll_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspf6Ospf6InterfaceNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspf6Ospf6InterfaceNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspf6Ospf6InterfaceNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[int] = None,
                 ip6: Optional[str] = None,
                 poll_interval: Optional[int] = None,
                 priority: Optional[int] = None):
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[int]:
        return pulumi.get(self, "poll_interval")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class RouterOspf6PassiveInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterOspf6Redistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspf6Redistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspf6Redistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspf6Redistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 metric_type: Optional[str] = None,
                 name: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterOspf6SummaryAddress(dict):
    def __init__(__self__, *,
                 advertise: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None,
                 tag: Optional[int] = None):
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[str]:
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class RouterOspfArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultCost":
            suggest = "default_cost"
        elif key == "filterLists":
            suggest = "filter_lists"
        elif key == "nssaDefaultInformationOriginate":
            suggest = "nssa_default_information_originate"
        elif key == "nssaDefaultInformationOriginateMetric":
            suggest = "nssa_default_information_originate_metric"
        elif key == "nssaDefaultInformationOriginateMetricType":
            suggest = "nssa_default_information_originate_metric_type"
        elif key == "nssaRedistribution":
            suggest = "nssa_redistribution"
        elif key == "nssaTranslatorRole":
            suggest = "nssa_translator_role"
        elif key == "stubType":
            suggest = "stub_type"
        elif key == "virtualLinks":
            suggest = "virtual_links"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspfArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspfArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspfArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 comments: Optional[str] = None,
                 default_cost: Optional[int] = None,
                 filter_lists: Optional[Sequence['outputs.RouterOspfAreaFilterList']] = None,
                 id: Optional[str] = None,
                 nssa_default_information_originate: Optional[str] = None,
                 nssa_default_information_originate_metric: Optional[int] = None,
                 nssa_default_information_originate_metric_type: Optional[str] = None,
                 nssa_redistribution: Optional[str] = None,
                 nssa_translator_role: Optional[str] = None,
                 ranges: Optional[Sequence['outputs.RouterOspfAreaRange']] = None,
                 shortcut: Optional[str] = None,
                 stub_type: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_links: Optional[Sequence['outputs.RouterOspfAreaVirtualLink']] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if default_cost is not None:
            pulumi.set(__self__, "default_cost", default_cost)
        if filter_lists is not None:
            pulumi.set(__self__, "filter_lists", filter_lists)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_redistribution is not None:
            pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        if nssa_translator_role is not None:
            pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if shortcut is not None:
            pulumi.set(__self__, "shortcut", shortcut)
        if stub_type is not None:
            pulumi.set(__self__, "stub_type", stub_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_links is not None:
            pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> Optional[int]:
        return pulumi.get(self, "default_cost")

    @property
    @pulumi.getter(name="filterLists")
    def filter_lists(self) -> Optional[Sequence['outputs.RouterOspfAreaFilterList']]:
        return pulumi.get(self, "filter_lists")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[str]:
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[int]:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[str]:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> Optional[str]:
        return pulumi.get(self, "nssa_redistribution")

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> Optional[str]:
        return pulumi.get(self, "nssa_translator_role")

    @property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.RouterOspfAreaRange']]:
        return pulumi.get(self, "ranges")

    @property
    @pulumi.getter
    def shortcut(self) -> Optional[str]:
        return pulumi.get(self, "shortcut")

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> Optional[str]:
        return pulumi.get(self, "stub_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Optional[Sequence['outputs.RouterOspfAreaVirtualLink']]:
        return pulumi.get(self, "virtual_links")


@pulumi.output_type
class RouterOspfAreaFilterList(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 id: Optional[int] = None,
                 list: Optional[str] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if list is not None:
            pulumi.set(__self__, "list", list)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def list(self) -> Optional[str]:
        return pulumi.get(self, "list")


@pulumi.output_type
class RouterOspfAreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "substituteStatus":
            suggest = "substitute_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspfAreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspfAreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspfAreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None,
                 substitute: Optional[str] = None,
                 substitute_status: Optional[str] = None):
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if substitute is not None:
            pulumi.set(__self__, "substitute", substitute)
        if substitute_status is not None:
            pulumi.set(__self__, "substitute_status", substitute_status)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[str]:
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def substitute(self) -> Optional[str]:
        return pulumi.get(self, "substitute")

    @property
    @pulumi.getter(name="substituteStatus")
    def substitute_status(self) -> Optional[str]:
        return pulumi.get(self, "substitute_status")


@pulumi.output_type
class RouterOspfAreaVirtualLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "md5Key":
            suggest = "md5_key"
        elif key == "md5Keychain":
            suggest = "md5_keychain"
        elif key == "md5Keys":
            suggest = "md5_keys"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "transmitDelay":
            suggest = "transmit_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspfAreaVirtualLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspfAreaVirtualLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspfAreaVirtualLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 authentication_key: Optional[str] = None,
                 dead_interval: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 keychain: Optional[str] = None,
                 md5_key: Optional[str] = None,
                 md5_keychain: Optional[str] = None,
                 md5_keys: Optional[Sequence['outputs.RouterOspfAreaVirtualLinkMd5Key']] = None,
                 name: Optional[str] = None,
                 peer: Optional[str] = None,
                 retransmit_interval: Optional[int] = None,
                 transmit_delay: Optional[int] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_keychain is not None:
            pulumi.set(__self__, "md5_keychain", md5_keychain)
        if md5_keys is not None:
            pulumi.set(__self__, "md5_keys", md5_keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[int]:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def keychain(self) -> Optional[str]:
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[str]:
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> Optional[str]:
        return pulumi.get(self, "md5_keychain")

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Optional[Sequence['outputs.RouterOspfAreaVirtualLinkMd5Key']]:
        return pulumi.get(self, "md5_keys")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peer(self) -> Optional[str]:
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[int]:
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[int]:
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class RouterOspfAreaVirtualLinkMd5Key(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyString":
            suggest = "key_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspfAreaVirtualLinkMd5Key. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspfAreaVirtualLinkMd5Key.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspfAreaVirtualLinkMd5Key.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 key_string: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[str]:
        return pulumi.get(self, "key_string")


@pulumi.output_type
class RouterOspfDistributeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspfDistributeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspfDistributeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspfDistributeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: Optional[str] = None,
                 id: Optional[int] = None,
                 protocol: Optional[str] = None):
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[str]:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class RouterOspfNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pollInterval":
            suggest = "poll_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspfNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspfNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspfNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 poll_interval: Optional[int] = None,
                 priority: Optional[int] = None):
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[int]:
        return pulumi.get(self, "poll_interval")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class RouterOspfNetwork(dict):
    def __init__(__self__, *,
                 area: Optional[str] = None,
                 comments: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None):
        if area is not None:
            pulumi.set(__self__, "area", area)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RouterOspfOspfInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "databaseFilterOut":
            suggest = "database_filter_out"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloMultiplier":
            suggest = "hello_multiplier"
        elif key == "md5Key":
            suggest = "md5_key"
        elif key == "md5Keychain":
            suggest = "md5_keychain"
        elif key == "md5Keys":
            suggest = "md5_keys"
        elif key == "mtuIgnore":
            suggest = "mtu_ignore"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "resyncTimeout":
            suggest = "resync_timeout"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "transmitDelay":
            suggest = "transmit_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspfOspfInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspfOspfInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspfOspfInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 authentication_key: Optional[str] = None,
                 bfd: Optional[str] = None,
                 comments: Optional[str] = None,
                 cost: Optional[int] = None,
                 database_filter_out: Optional[str] = None,
                 dead_interval: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 hello_multiplier: Optional[int] = None,
                 interface: Optional[str] = None,
                 ip: Optional[str] = None,
                 keychain: Optional[str] = None,
                 md5_key: Optional[str] = None,
                 md5_keychain: Optional[str] = None,
                 md5_keys: Optional[Sequence['outputs.RouterOspfOspfInterfaceMd5Key']] = None,
                 mtu: Optional[int] = None,
                 mtu_ignore: Optional[str] = None,
                 name: Optional[str] = None,
                 network_type: Optional[str] = None,
                 prefix_length: Optional[int] = None,
                 priority: Optional[int] = None,
                 resync_timeout: Optional[int] = None,
                 retransmit_interval: Optional[int] = None,
                 status: Optional[str] = None,
                 transmit_delay: Optional[int] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if database_filter_out is not None:
            pulumi.set(__self__, "database_filter_out", database_filter_out)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_multiplier is not None:
            pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_keychain is not None:
            pulumi.set(__self__, "md5_keychain", md5_keychain)
        if md5_keys is not None:
            pulumi.set(__self__, "md5_keys", md5_keys)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if resync_timeout is not None:
            pulumi.set(__self__, "resync_timeout", resync_timeout)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="databaseFilterOut")
    def database_filter_out(self) -> Optional[str]:
        return pulumi.get(self, "database_filter_out")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[int]:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> Optional[int]:
        return pulumi.get(self, "hello_multiplier")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def keychain(self) -> Optional[str]:
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[str]:
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> Optional[str]:
        return pulumi.get(self, "md5_keychain")

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Optional[Sequence['outputs.RouterOspfOspfInterfaceMd5Key']]:
        return pulumi.get(self, "md5_keys")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[str]:
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="resyncTimeout")
    def resync_timeout(self) -> Optional[int]:
        return pulumi.get(self, "resync_timeout")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[int]:
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[int]:
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class RouterOspfOspfInterfaceMd5Key(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyString":
            suggest = "key_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspfOspfInterfaceMd5Key. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspfOspfInterfaceMd5Key.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspfOspfInterfaceMd5Key.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 key_string: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[str]:
        return pulumi.get(self, "key_string")


@pulumi.output_type
class RouterOspfPassiveInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterOspfRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterOspfRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterOspfRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterOspfRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 metric_type: Optional[str] = None,
                 name: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None,
                 tag: Optional[int] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class RouterOspfSummaryAddress(dict):
    def __init__(__self__, *,
                 advertise: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None,
                 tag: Optional[int] = None):
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[str]:
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class RouterPolicy6Dstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterPolicy6InternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterPolicy6InternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class RouterPolicy6Srcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterPolicyDst(dict):
    def __init__(__self__, *,
                 subnet: Optional[str] = None):
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class RouterPolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterPolicyInputDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterPolicyInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterPolicyInternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class RouterPolicySrc(dict):
    def __init__(__self__, *,
                 subnet: Optional[str] = None):
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class RouterPolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterPrefixList6Rule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 flags: Optional[int] = None,
                 ge: Optional[int] = None,
                 id: Optional[int] = None,
                 le: Optional[int] = None,
                 prefix6: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if le is not None:
            pulumi.set(__self__, "le", le)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def ge(self) -> Optional[int]:
        return pulumi.get(self, "ge")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def le(self) -> Optional[int]:
        return pulumi.get(self, "le")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class RouterPrefixListRule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 flags: Optional[int] = None,
                 ge: Optional[int] = None,
                 id: Optional[int] = None,
                 le: Optional[int] = None,
                 prefix: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if le is not None:
            pulumi.set(__self__, "le", le)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def ge(self) -> Optional[int]:
        return pulumi.get(self, "ge")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def le(self) -> Optional[int]:
        return pulumi.get(self, "le")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RouterRipDistance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterRipDistance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterRipDistance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterRipDistance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: Optional[str] = None,
                 distance: Optional[int] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None):
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[str]:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def distance(self) -> Optional[int]:
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RouterRipDistributeList(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 listname: Optional[str] = None,
                 status: Optional[str] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if listname is not None:
            pulumi.set(__self__, "listname", listname)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def listname(self) -> Optional[str]:
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterRipInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKeychain":
            suggest = "auth_keychain"
        elif key == "authMode":
            suggest = "auth_mode"
        elif key == "authString":
            suggest = "auth_string"
        elif key == "receiveVersion":
            suggest = "receive_version"
        elif key == "sendVersion":
            suggest = "send_version"
        elif key == "sendVersion2Broadcast":
            suggest = "send_version2_broadcast"
        elif key == "splitHorizon":
            suggest = "split_horizon"
        elif key == "splitHorizonStatus":
            suggest = "split_horizon_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterRipInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterRipInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterRipInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_keychain: Optional[str] = None,
                 auth_mode: Optional[str] = None,
                 auth_string: Optional[str] = None,
                 flags: Optional[int] = None,
                 name: Optional[str] = None,
                 receive_version: Optional[str] = None,
                 send_version: Optional[str] = None,
                 send_version2_broadcast: Optional[str] = None,
                 split_horizon: Optional[str] = None,
                 split_horizon_status: Optional[str] = None):
        if auth_keychain is not None:
            pulumi.set(__self__, "auth_keychain", auth_keychain)
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if auth_string is not None:
            pulumi.set(__self__, "auth_string", auth_string)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if receive_version is not None:
            pulumi.set(__self__, "receive_version", receive_version)
        if send_version is not None:
            pulumi.set(__self__, "send_version", send_version)
        if send_version2_broadcast is not None:
            pulumi.set(__self__, "send_version2_broadcast", send_version2_broadcast)
        if split_horizon is not None:
            pulumi.set(__self__, "split_horizon", split_horizon)
        if split_horizon_status is not None:
            pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter(name="authKeychain")
    def auth_keychain(self) -> Optional[str]:
        return pulumi.get(self, "auth_keychain")

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[str]:
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="authString")
    def auth_string(self) -> Optional[str]:
        return pulumi.get(self, "auth_string")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="receiveVersion")
    def receive_version(self) -> Optional[str]:
        return pulumi.get(self, "receive_version")

    @property
    @pulumi.getter(name="sendVersion")
    def send_version(self) -> Optional[str]:
        return pulumi.get(self, "send_version")

    @property
    @pulumi.getter(name="sendVersion2Broadcast")
    def send_version2_broadcast(self) -> Optional[str]:
        return pulumi.get(self, "send_version2_broadcast")

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> Optional[str]:
        return pulumi.get(self, "split_horizon")

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> Optional[str]:
        return pulumi.get(self, "split_horizon_status")


@pulumi.output_type
class RouterRipNeighbor(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class RouterRipNetwork(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RouterRipOffsetList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterRipOffsetList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterRipOffsetList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterRipOffsetList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: Optional[str] = None,
                 direction: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 offset: Optional[int] = None,
                 status: Optional[str] = None):
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[str]:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterRipPassiveInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterRipRedistribute(dict):
    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 name: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterRipngAggregateAddress(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class RouterRipngDistance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList6":
            suggest = "access_list6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterRipngDistance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterRipngDistance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterRipngDistance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list6: Optional[str] = None,
                 distance: Optional[int] = None,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None):
        if access_list6 is not None:
            pulumi.set(__self__, "access_list6", access_list6)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> Optional[str]:
        return pulumi.get(self, "access_list6")

    @property
    @pulumi.getter
    def distance(self) -> Optional[int]:
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class RouterRipngDistributeList(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 listname: Optional[str] = None,
                 status: Optional[str] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if listname is not None:
            pulumi.set(__self__, "listname", listname)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def listname(self) -> Optional[str]:
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterRipngInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "splitHorizon":
            suggest = "split_horizon"
        elif key == "splitHorizonStatus":
            suggest = "split_horizon_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterRipngInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterRipngInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterRipngInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flags: Optional[int] = None,
                 name: Optional[str] = None,
                 split_horizon: Optional[str] = None,
                 split_horizon_status: Optional[str] = None):
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if split_horizon is not None:
            pulumi.set(__self__, "split_horizon", split_horizon)
        if split_horizon_status is not None:
            pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> Optional[str]:
        return pulumi.get(self, "split_horizon")

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> Optional[str]:
        return pulumi.get(self, "split_horizon_status")


@pulumi.output_type
class RouterRipngNeighbor(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 ip6: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        return pulumi.get(self, "ip6")


@pulumi.output_type
class RouterRipngNetwork(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RouterRipngOffsetList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList6":
            suggest = "access_list6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterRipngOffsetList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterRipngOffsetList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterRipngOffsetList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list6: Optional[str] = None,
                 direction: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 offset: Optional[int] = None,
                 status: Optional[str] = None):
        if access_list6 is not None:
            pulumi.set(__self__, "access_list6", access_list6)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> Optional[str]:
        return pulumi.get(self, "access_list6")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterRipngPassiveInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterRipngRedistribute(dict):
    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 name: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RouterRouteMapRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchAsPath":
            suggest = "match_as_path"
        elif key == "matchCommunity":
            suggest = "match_community"
        elif key == "matchCommunityExact":
            suggest = "match_community_exact"
        elif key == "matchExtcommunity":
            suggest = "match_extcommunity"
        elif key == "matchExtcommunityExact":
            suggest = "match_extcommunity_exact"
        elif key == "matchFlags":
            suggest = "match_flags"
        elif key == "matchInterface":
            suggest = "match_interface"
        elif key == "matchIp6Address":
            suggest = "match_ip6_address"
        elif key == "matchIp6Nexthop":
            suggest = "match_ip6_nexthop"
        elif key == "matchIpAddress":
            suggest = "match_ip_address"
        elif key == "matchIpNexthop":
            suggest = "match_ip_nexthop"
        elif key == "matchMetric":
            suggest = "match_metric"
        elif key == "matchOrigin":
            suggest = "match_origin"
        elif key == "matchRouteType":
            suggest = "match_route_type"
        elif key == "matchTag":
            suggest = "match_tag"
        elif key == "matchVrf":
            suggest = "match_vrf"
        elif key == "setAggregatorAs":
            suggest = "set_aggregator_as"
        elif key == "setAggregatorIp":
            suggest = "set_aggregator_ip"
        elif key == "setAspathAction":
            suggest = "set_aspath_action"
        elif key == "setAspaths":
            suggest = "set_aspaths"
        elif key == "setAtomicAggregate":
            suggest = "set_atomic_aggregate"
        elif key == "setCommunities":
            suggest = "set_communities"
        elif key == "setCommunityAdditive":
            suggest = "set_community_additive"
        elif key == "setCommunityDelete":
            suggest = "set_community_delete"
        elif key == "setDampeningMaxSuppress":
            suggest = "set_dampening_max_suppress"
        elif key == "setDampeningReachabilityHalfLife":
            suggest = "set_dampening_reachability_half_life"
        elif key == "setDampeningReuse":
            suggest = "set_dampening_reuse"
        elif key == "setDampeningSuppress":
            suggest = "set_dampening_suppress"
        elif key == "setDampeningUnreachabilityHalfLife":
            suggest = "set_dampening_unreachability_half_life"
        elif key == "setExtcommunityRts":
            suggest = "set_extcommunity_rts"
        elif key == "setExtcommunitySoos":
            suggest = "set_extcommunity_soos"
        elif key == "setFlags":
            suggest = "set_flags"
        elif key == "setIp6Nexthop":
            suggest = "set_ip6_nexthop"
        elif key == "setIp6NexthopLocal":
            suggest = "set_ip6_nexthop_local"
        elif key == "setIpNexthop":
            suggest = "set_ip_nexthop"
        elif key == "setIpPrefsrc":
            suggest = "set_ip_prefsrc"
        elif key == "setLocalPreference":
            suggest = "set_local_preference"
        elif key == "setMetric":
            suggest = "set_metric"
        elif key == "setMetricType":
            suggest = "set_metric_type"
        elif key == "setOrigin":
            suggest = "set_origin"
        elif key == "setOriginatorId":
            suggest = "set_originator_id"
        elif key == "setPriority":
            suggest = "set_priority"
        elif key == "setRouteTag":
            suggest = "set_route_tag"
        elif key == "setTag":
            suggest = "set_tag"
        elif key == "setWeight":
            suggest = "set_weight"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterRouteMapRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterRouteMapRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterRouteMapRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 match_as_path: Optional[str] = None,
                 match_community: Optional[str] = None,
                 match_community_exact: Optional[str] = None,
                 match_extcommunity: Optional[str] = None,
                 match_extcommunity_exact: Optional[str] = None,
                 match_flags: Optional[int] = None,
                 match_interface: Optional[str] = None,
                 match_ip6_address: Optional[str] = None,
                 match_ip6_nexthop: Optional[str] = None,
                 match_ip_address: Optional[str] = None,
                 match_ip_nexthop: Optional[str] = None,
                 match_metric: Optional[int] = None,
                 match_origin: Optional[str] = None,
                 match_route_type: Optional[str] = None,
                 match_tag: Optional[int] = None,
                 match_vrf: Optional[int] = None,
                 set_aggregator_as: Optional[int] = None,
                 set_aggregator_ip: Optional[str] = None,
                 set_aspath_action: Optional[str] = None,
                 set_aspaths: Optional[Sequence['outputs.RouterRouteMapRuleSetAspath']] = None,
                 set_atomic_aggregate: Optional[str] = None,
                 set_communities: Optional[Sequence['outputs.RouterRouteMapRuleSetCommunity']] = None,
                 set_community_additive: Optional[str] = None,
                 set_community_delete: Optional[str] = None,
                 set_dampening_max_suppress: Optional[int] = None,
                 set_dampening_reachability_half_life: Optional[int] = None,
                 set_dampening_reuse: Optional[int] = None,
                 set_dampening_suppress: Optional[int] = None,
                 set_dampening_unreachability_half_life: Optional[int] = None,
                 set_extcommunity_rts: Optional[Sequence['outputs.RouterRouteMapRuleSetExtcommunityRt']] = None,
                 set_extcommunity_soos: Optional[Sequence['outputs.RouterRouteMapRuleSetExtcommunitySoo']] = None,
                 set_flags: Optional[int] = None,
                 set_ip6_nexthop: Optional[str] = None,
                 set_ip6_nexthop_local: Optional[str] = None,
                 set_ip_nexthop: Optional[str] = None,
                 set_ip_prefsrc: Optional[str] = None,
                 set_local_preference: Optional[int] = None,
                 set_metric: Optional[int] = None,
                 set_metric_type: Optional[str] = None,
                 set_origin: Optional[str] = None,
                 set_originator_id: Optional[str] = None,
                 set_priority: Optional[int] = None,
                 set_route_tag: Optional[int] = None,
                 set_tag: Optional[int] = None,
                 set_weight: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_as_path is not None:
            pulumi.set(__self__, "match_as_path", match_as_path)
        if match_community is not None:
            pulumi.set(__self__, "match_community", match_community)
        if match_community_exact is not None:
            pulumi.set(__self__, "match_community_exact", match_community_exact)
        if match_extcommunity is not None:
            pulumi.set(__self__, "match_extcommunity", match_extcommunity)
        if match_extcommunity_exact is not None:
            pulumi.set(__self__, "match_extcommunity_exact", match_extcommunity_exact)
        if match_flags is not None:
            pulumi.set(__self__, "match_flags", match_flags)
        if match_interface is not None:
            pulumi.set(__self__, "match_interface", match_interface)
        if match_ip6_address is not None:
            pulumi.set(__self__, "match_ip6_address", match_ip6_address)
        if match_ip6_nexthop is not None:
            pulumi.set(__self__, "match_ip6_nexthop", match_ip6_nexthop)
        if match_ip_address is not None:
            pulumi.set(__self__, "match_ip_address", match_ip_address)
        if match_ip_nexthop is not None:
            pulumi.set(__self__, "match_ip_nexthop", match_ip_nexthop)
        if match_metric is not None:
            pulumi.set(__self__, "match_metric", match_metric)
        if match_origin is not None:
            pulumi.set(__self__, "match_origin", match_origin)
        if match_route_type is not None:
            pulumi.set(__self__, "match_route_type", match_route_type)
        if match_tag is not None:
            pulumi.set(__self__, "match_tag", match_tag)
        if match_vrf is not None:
            pulumi.set(__self__, "match_vrf", match_vrf)
        if set_aggregator_as is not None:
            pulumi.set(__self__, "set_aggregator_as", set_aggregator_as)
        if set_aggregator_ip is not None:
            pulumi.set(__self__, "set_aggregator_ip", set_aggregator_ip)
        if set_aspath_action is not None:
            pulumi.set(__self__, "set_aspath_action", set_aspath_action)
        if set_aspaths is not None:
            pulumi.set(__self__, "set_aspaths", set_aspaths)
        if set_atomic_aggregate is not None:
            pulumi.set(__self__, "set_atomic_aggregate", set_atomic_aggregate)
        if set_communities is not None:
            pulumi.set(__self__, "set_communities", set_communities)
        if set_community_additive is not None:
            pulumi.set(__self__, "set_community_additive", set_community_additive)
        if set_community_delete is not None:
            pulumi.set(__self__, "set_community_delete", set_community_delete)
        if set_dampening_max_suppress is not None:
            pulumi.set(__self__, "set_dampening_max_suppress", set_dampening_max_suppress)
        if set_dampening_reachability_half_life is not None:
            pulumi.set(__self__, "set_dampening_reachability_half_life", set_dampening_reachability_half_life)
        if set_dampening_reuse is not None:
            pulumi.set(__self__, "set_dampening_reuse", set_dampening_reuse)
        if set_dampening_suppress is not None:
            pulumi.set(__self__, "set_dampening_suppress", set_dampening_suppress)
        if set_dampening_unreachability_half_life is not None:
            pulumi.set(__self__, "set_dampening_unreachability_half_life", set_dampening_unreachability_half_life)
        if set_extcommunity_rts is not None:
            pulumi.set(__self__, "set_extcommunity_rts", set_extcommunity_rts)
        if set_extcommunity_soos is not None:
            pulumi.set(__self__, "set_extcommunity_soos", set_extcommunity_soos)
        if set_flags is not None:
            pulumi.set(__self__, "set_flags", set_flags)
        if set_ip6_nexthop is not None:
            pulumi.set(__self__, "set_ip6_nexthop", set_ip6_nexthop)
        if set_ip6_nexthop_local is not None:
            pulumi.set(__self__, "set_ip6_nexthop_local", set_ip6_nexthop_local)
        if set_ip_nexthop is not None:
            pulumi.set(__self__, "set_ip_nexthop", set_ip_nexthop)
        if set_ip_prefsrc is not None:
            pulumi.set(__self__, "set_ip_prefsrc", set_ip_prefsrc)
        if set_local_preference is not None:
            pulumi.set(__self__, "set_local_preference", set_local_preference)
        if set_metric is not None:
            pulumi.set(__self__, "set_metric", set_metric)
        if set_metric_type is not None:
            pulumi.set(__self__, "set_metric_type", set_metric_type)
        if set_origin is not None:
            pulumi.set(__self__, "set_origin", set_origin)
        if set_originator_id is not None:
            pulumi.set(__self__, "set_originator_id", set_originator_id)
        if set_priority is not None:
            pulumi.set(__self__, "set_priority", set_priority)
        if set_route_tag is not None:
            pulumi.set(__self__, "set_route_tag", set_route_tag)
        if set_tag is not None:
            pulumi.set(__self__, "set_tag", set_tag)
        if set_weight is not None:
            pulumi.set(__self__, "set_weight", set_weight)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchAsPath")
    def match_as_path(self) -> Optional[str]:
        return pulumi.get(self, "match_as_path")

    @property
    @pulumi.getter(name="matchCommunity")
    def match_community(self) -> Optional[str]:
        return pulumi.get(self, "match_community")

    @property
    @pulumi.getter(name="matchCommunityExact")
    def match_community_exact(self) -> Optional[str]:
        return pulumi.get(self, "match_community_exact")

    @property
    @pulumi.getter(name="matchExtcommunity")
    def match_extcommunity(self) -> Optional[str]:
        return pulumi.get(self, "match_extcommunity")

    @property
    @pulumi.getter(name="matchExtcommunityExact")
    def match_extcommunity_exact(self) -> Optional[str]:
        return pulumi.get(self, "match_extcommunity_exact")

    @property
    @pulumi.getter(name="matchFlags")
    def match_flags(self) -> Optional[int]:
        return pulumi.get(self, "match_flags")

    @property
    @pulumi.getter(name="matchInterface")
    def match_interface(self) -> Optional[str]:
        return pulumi.get(self, "match_interface")

    @property
    @pulumi.getter(name="matchIp6Address")
    def match_ip6_address(self) -> Optional[str]:
        return pulumi.get(self, "match_ip6_address")

    @property
    @pulumi.getter(name="matchIp6Nexthop")
    def match_ip6_nexthop(self) -> Optional[str]:
        return pulumi.get(self, "match_ip6_nexthop")

    @property
    @pulumi.getter(name="matchIpAddress")
    def match_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "match_ip_address")

    @property
    @pulumi.getter(name="matchIpNexthop")
    def match_ip_nexthop(self) -> Optional[str]:
        return pulumi.get(self, "match_ip_nexthop")

    @property
    @pulumi.getter(name="matchMetric")
    def match_metric(self) -> Optional[int]:
        return pulumi.get(self, "match_metric")

    @property
    @pulumi.getter(name="matchOrigin")
    def match_origin(self) -> Optional[str]:
        return pulumi.get(self, "match_origin")

    @property
    @pulumi.getter(name="matchRouteType")
    def match_route_type(self) -> Optional[str]:
        return pulumi.get(self, "match_route_type")

    @property
    @pulumi.getter(name="matchTag")
    def match_tag(self) -> Optional[int]:
        return pulumi.get(self, "match_tag")

    @property
    @pulumi.getter(name="matchVrf")
    def match_vrf(self) -> Optional[int]:
        return pulumi.get(self, "match_vrf")

    @property
    @pulumi.getter(name="setAggregatorAs")
    def set_aggregator_as(self) -> Optional[int]:
        return pulumi.get(self, "set_aggregator_as")

    @property
    @pulumi.getter(name="setAggregatorIp")
    def set_aggregator_ip(self) -> Optional[str]:
        return pulumi.get(self, "set_aggregator_ip")

    @property
    @pulumi.getter(name="setAspathAction")
    def set_aspath_action(self) -> Optional[str]:
        return pulumi.get(self, "set_aspath_action")

    @property
    @pulumi.getter(name="setAspaths")
    def set_aspaths(self) -> Optional[Sequence['outputs.RouterRouteMapRuleSetAspath']]:
        return pulumi.get(self, "set_aspaths")

    @property
    @pulumi.getter(name="setAtomicAggregate")
    def set_atomic_aggregate(self) -> Optional[str]:
        return pulumi.get(self, "set_atomic_aggregate")

    @property
    @pulumi.getter(name="setCommunities")
    def set_communities(self) -> Optional[Sequence['outputs.RouterRouteMapRuleSetCommunity']]:
        return pulumi.get(self, "set_communities")

    @property
    @pulumi.getter(name="setCommunityAdditive")
    def set_community_additive(self) -> Optional[str]:
        return pulumi.get(self, "set_community_additive")

    @property
    @pulumi.getter(name="setCommunityDelete")
    def set_community_delete(self) -> Optional[str]:
        return pulumi.get(self, "set_community_delete")

    @property
    @pulumi.getter(name="setDampeningMaxSuppress")
    def set_dampening_max_suppress(self) -> Optional[int]:
        return pulumi.get(self, "set_dampening_max_suppress")

    @property
    @pulumi.getter(name="setDampeningReachabilityHalfLife")
    def set_dampening_reachability_half_life(self) -> Optional[int]:
        return pulumi.get(self, "set_dampening_reachability_half_life")

    @property
    @pulumi.getter(name="setDampeningReuse")
    def set_dampening_reuse(self) -> Optional[int]:
        return pulumi.get(self, "set_dampening_reuse")

    @property
    @pulumi.getter(name="setDampeningSuppress")
    def set_dampening_suppress(self) -> Optional[int]:
        return pulumi.get(self, "set_dampening_suppress")

    @property
    @pulumi.getter(name="setDampeningUnreachabilityHalfLife")
    def set_dampening_unreachability_half_life(self) -> Optional[int]:
        return pulumi.get(self, "set_dampening_unreachability_half_life")

    @property
    @pulumi.getter(name="setExtcommunityRts")
    def set_extcommunity_rts(self) -> Optional[Sequence['outputs.RouterRouteMapRuleSetExtcommunityRt']]:
        return pulumi.get(self, "set_extcommunity_rts")

    @property
    @pulumi.getter(name="setExtcommunitySoos")
    def set_extcommunity_soos(self) -> Optional[Sequence['outputs.RouterRouteMapRuleSetExtcommunitySoo']]:
        return pulumi.get(self, "set_extcommunity_soos")

    @property
    @pulumi.getter(name="setFlags")
    def set_flags(self) -> Optional[int]:
        return pulumi.get(self, "set_flags")

    @property
    @pulumi.getter(name="setIp6Nexthop")
    def set_ip6_nexthop(self) -> Optional[str]:
        return pulumi.get(self, "set_ip6_nexthop")

    @property
    @pulumi.getter(name="setIp6NexthopLocal")
    def set_ip6_nexthop_local(self) -> Optional[str]:
        return pulumi.get(self, "set_ip6_nexthop_local")

    @property
    @pulumi.getter(name="setIpNexthop")
    def set_ip_nexthop(self) -> Optional[str]:
        return pulumi.get(self, "set_ip_nexthop")

    @property
    @pulumi.getter(name="setIpPrefsrc")
    def set_ip_prefsrc(self) -> Optional[str]:
        return pulumi.get(self, "set_ip_prefsrc")

    @property
    @pulumi.getter(name="setLocalPreference")
    def set_local_preference(self) -> Optional[int]:
        return pulumi.get(self, "set_local_preference")

    @property
    @pulumi.getter(name="setMetric")
    def set_metric(self) -> Optional[int]:
        return pulumi.get(self, "set_metric")

    @property
    @pulumi.getter(name="setMetricType")
    def set_metric_type(self) -> Optional[str]:
        return pulumi.get(self, "set_metric_type")

    @property
    @pulumi.getter(name="setOrigin")
    def set_origin(self) -> Optional[str]:
        return pulumi.get(self, "set_origin")

    @property
    @pulumi.getter(name="setOriginatorId")
    def set_originator_id(self) -> Optional[str]:
        return pulumi.get(self, "set_originator_id")

    @property
    @pulumi.getter(name="setPriority")
    def set_priority(self) -> Optional[int]:
        return pulumi.get(self, "set_priority")

    @property
    @pulumi.getter(name="setRouteTag")
    def set_route_tag(self) -> Optional[int]:
        return pulumi.get(self, "set_route_tag")

    @property
    @pulumi.getter(name="setTag")
    def set_tag(self) -> Optional[int]:
        return pulumi.get(self, "set_tag")

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> Optional[int]:
        return pulumi.get(self, "set_weight")


@pulumi.output_type
class RouterRouteMapRuleSetAspath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "as":
            suggest = "as_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterRouteMapRuleSetAspath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterRouteMapRuleSetAspath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterRouteMapRuleSetAspath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_: Optional[str] = None):
        if as_ is not None:
            pulumi.set(__self__, "as_", as_)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> Optional[str]:
        return pulumi.get(self, "as_")


@pulumi.output_type
class RouterRouteMapRuleSetCommunity(dict):
    def __init__(__self__, *,
                 community: Optional[str] = None):
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[str]:
        return pulumi.get(self, "community")


@pulumi.output_type
class RouterRouteMapRuleSetExtcommunityRt(dict):
    def __init__(__self__, *,
                 community: Optional[str] = None):
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[str]:
        return pulumi.get(self, "community")


@pulumi.output_type
class RouterRouteMapRuleSetExtcommunitySoo(dict):
    def __init__(__self__, *,
                 community: Optional[str] = None):
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[str]:
        return pulumi.get(self, "community")


@pulumi.output_type
class RouterStatic6SdwanZone(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterStaticSdwanZone(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RouterbgpNeighborConditionalAdvertise6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertiseRoutemap":
            suggest = "advertise_routemap"
        elif key == "conditionRoutemap":
            suggest = "condition_routemap"
        elif key == "conditionType":
            suggest = "condition_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterbgpNeighborConditionalAdvertise6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterbgpNeighborConditionalAdvertise6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterbgpNeighborConditionalAdvertise6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise_routemap: Optional[str] = None,
                 condition_routemap: Optional[str] = None,
                 condition_type: Optional[str] = None):
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[str]:
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[str]:
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[str]:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class RouterbgpNeighborConditionalAdvertise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertiseRoutemap":
            suggest = "advertise_routemap"
        elif key == "conditionRoutemap":
            suggest = "condition_routemap"
        elif key == "conditionType":
            suggest = "condition_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterbgpNeighborConditionalAdvertise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterbgpNeighborConditionalAdvertise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterbgpNeighborConditionalAdvertise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise_routemap: Optional[str] = None,
                 condition_routemap: Optional[str] = None,
                 condition_type: Optional[str] = None):
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[str]:
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[str]:
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[str]:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class Routerospf6Ospf6InterfaceIpsecKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"
        elif key == "encKey":
            suggest = "enc_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Routerospf6Ospf6InterfaceIpsecKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Routerospf6Ospf6InterfaceIpsecKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Routerospf6Ospf6InterfaceIpsecKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_key: Optional[str] = None,
                 enc_key: Optional[str] = None,
                 spi: Optional[int] = None):
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[str]:
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> Optional[int]:
        return pulumi.get(self, "spi")


@pulumi.output_type
class Routerospf6Ospf6InterfaceNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pollInterval":
            suggest = "poll_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Routerospf6Ospf6InterfaceNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Routerospf6Ospf6InterfaceNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Routerospf6Ospf6InterfaceNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[int] = None,
                 ip6: Optional[str] = None,
                 poll_interval: Optional[int] = None,
                 priority: Optional[int] = None):
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[int]:
        return pulumi.get(self, "poll_interval")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class RouterospfOspfInterfaceMd5Key(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyString":
            suggest = "key_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterospfOspfInterfaceMd5Key. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterospfOspfInterfaceMd5Key.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterospfOspfInterfaceMd5Key.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 key_string: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[str]:
        return pulumi.get(self, "key_string")


@pulumi.output_type
class SctpFilterProfilePpidFilter(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 comment: Optional[str] = None,
                 id: Optional[int] = None,
                 ppid: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ppid is not None:
            pulumi.set(__self__, "ppid", ppid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ppid(self) -> Optional[int]:
        return pulumi.get(self, "ppid")


@pulumi.output_type
class SpamfilterBwlEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "emailPattern":
            suggest = "email_pattern"
        elif key == "ip4Subnet":
            suggest = "ip4_subnet"
        elif key == "ip6Subnet":
            suggest = "ip6_subnet"
        elif key == "patternType":
            suggest = "pattern_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpamfilterBwlEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpamfilterBwlEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpamfilterBwlEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 addr_type: Optional[str] = None,
                 email_pattern: Optional[str] = None,
                 id: Optional[int] = None,
                 ip4_subnet: Optional[str] = None,
                 ip6_subnet: Optional[str] = None,
                 pattern_type: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[str]:
        return pulumi.get(self, "email_pattern")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip4_subnet")

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip6_subnet")

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[str]:
        return pulumi.get(self, "pattern_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SpamfilterBwordEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "patternType":
            suggest = "pattern_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpamfilterBwordEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpamfilterBwordEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpamfilterBwordEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 language: Optional[str] = None,
                 pattern: Optional[str] = None,
                 pattern_type: Optional[str] = None,
                 score: Optional[int] = None,
                 status: Optional[str] = None,
                 where: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if where is not None:
            pulumi.set(__self__, "where", where)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[str]:
        return pulumi.get(self, "pattern_type")

    @property
    @pulumi.getter
    def score(self) -> Optional[int]:
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def where(self) -> Optional[str]:
        return pulumi.get(self, "where")


@pulumi.output_type
class SpamfilterDnsblEntry(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 server: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class SpamfilterIptrustEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "ip4Subnet":
            suggest = "ip4_subnet"
        elif key == "ip6Subnet":
            suggest = "ip6_subnet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpamfilterIptrustEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpamfilterIptrustEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpamfilterIptrustEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_type: Optional[str] = None,
                 id: Optional[int] = None,
                 ip4_subnet: Optional[str] = None,
                 ip6_subnet: Optional[str] = None,
                 status: Optional[str] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip4_subnet")

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip6_subnet")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class SpamfilterMheaderEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "patternType":
            suggest = "pattern_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpamfilterMheaderEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpamfilterMheaderEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpamfilterMheaderEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 fieldbody: Optional[str] = None,
                 fieldname: Optional[str] = None,
                 id: Optional[int] = None,
                 pattern_type: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fieldbody is not None:
            pulumi.set(__self__, "fieldbody", fieldbody)
        if fieldname is not None:
            pulumi.set(__self__, "fieldname", fieldname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def fieldbody(self) -> Optional[str]:
        return pulumi.get(self, "fieldbody")

    @property
    @pulumi.getter
    def fieldname(self) -> Optional[str]:
        return pulumi.get(self, "fieldname")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[str]:
        return pulumi.get(self, "pattern_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class SpamfilterProfileGmail(dict):
    def __init__(__self__, *,
                 log: Optional[str] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")


@pulumi.output_type
class SpamfilterProfileImap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagMsg":
            suggest = "tag_msg"
        elif key == "tagType":
            suggest = "tag_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpamfilterProfileImap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpamfilterProfileImap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpamfilterProfileImap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 tag_msg: Optional[str] = None,
                 tag_type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[str]:
        return pulumi.get(self, "tag_msg")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[str]:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class SpamfilterProfileMapi(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")


@pulumi.output_type
class SpamfilterProfileMsnHotmail(dict):
    def __init__(__self__, *,
                 log: Optional[str] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")


@pulumi.output_type
class SpamfilterProfilePop3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagMsg":
            suggest = "tag_msg"
        elif key == "tagType":
            suggest = "tag_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpamfilterProfilePop3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpamfilterProfilePop3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpamfilterProfilePop3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 tag_msg: Optional[str] = None,
                 tag_type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[str]:
        return pulumi.get(self, "tag_msg")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[str]:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class SpamfilterProfileSmtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localOverride":
            suggest = "local_override"
        elif key == "tagMsg":
            suggest = "tag_msg"
        elif key == "tagType":
            suggest = "tag_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpamfilterProfileSmtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpamfilterProfileSmtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpamfilterProfileSmtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 hdrip: Optional[str] = None,
                 local_override: Optional[str] = None,
                 log: Optional[str] = None,
                 tag_msg: Optional[str] = None,
                 tag_type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if hdrip is not None:
            pulumi.set(__self__, "hdrip", hdrip)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def hdrip(self) -> Optional[str]:
        return pulumi.get(self, "hdrip")

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[str]:
        return pulumi.get(self, "local_override")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[str]:
        return pulumi.get(self, "tag_msg")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[str]:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class SpamfilterProfileYahooMail(dict):
    def __init__(__self__, *,
                 log: Optional[str] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")


@pulumi.output_type
class SshFilterProfileFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanArchiveContents":
            suggest = "scan_archive_contents"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshFilterProfileFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshFilterProfileFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshFilterProfileFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entries: Optional[Sequence['outputs.SshFilterProfileFileFilterEntry']] = None,
                 log: Optional[str] = None,
                 scan_archive_contents: Optional[str] = None,
                 status: Optional[str] = None):
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[Sequence['outputs.SshFilterProfileFileFilterEntry']]:
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[str]:
        return pulumi.get(self, "scan_archive_contents")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class SshFilterProfileFileFilterEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileTypes":
            suggest = "file_types"
        elif key == "passwordProtected":
            suggest = "password_protected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshFilterProfileFileFilterEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshFilterProfileFileFilterEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshFilterProfileFileFilterEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 comment: Optional[str] = None,
                 direction: Optional[str] = None,
                 file_types: Optional[Sequence['outputs.SshFilterProfileFileFilterEntryFileType']] = None,
                 filter: Optional[str] = None,
                 password_protected: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[Sequence['outputs.SshFilterProfileFileFilterEntryFileType']]:
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[str]:
        return pulumi.get(self, "password_protected")


@pulumi.output_type
class SshFilterProfileFileFilterEntryFileType(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SshFilterProfileShellCommand(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 alert: Optional[str] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None,
                 pattern: Optional[str] = None,
                 severity: Optional[str] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def alert(self) -> Optional[str]:
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SwitchControllerAclGroupIngress(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SwitchControllerAclIngressAction(dict):
    def __init__(__self__, *,
                 count: Optional[str] = None,
                 drop: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def drop(self) -> Optional[str]:
        return pulumi.get(self, "drop")


@pulumi.output_type
class SwitchControllerAclIngressClassifier(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstIpPrefix":
            suggest = "dst_ip_prefix"
        elif key == "dstMac":
            suggest = "dst_mac"
        elif key == "srcIpPrefix":
            suggest = "src_ip_prefix"
        elif key == "srcMac":
            suggest = "src_mac"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerAclIngressClassifier. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerAclIngressClassifier.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerAclIngressClassifier.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_ip_prefix: Optional[str] = None,
                 dst_mac: Optional[str] = None,
                 src_ip_prefix: Optional[str] = None,
                 src_mac: Optional[str] = None,
                 vlan: Optional[int] = None):
        if dst_ip_prefix is not None:
            pulumi.set(__self__, "dst_ip_prefix", dst_ip_prefix)
        if dst_mac is not None:
            pulumi.set(__self__, "dst_mac", dst_mac)
        if src_ip_prefix is not None:
            pulumi.set(__self__, "src_ip_prefix", src_ip_prefix)
        if src_mac is not None:
            pulumi.set(__self__, "src_mac", src_mac)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="dstIpPrefix")
    def dst_ip_prefix(self) -> Optional[str]:
        return pulumi.get(self, "dst_ip_prefix")

    @property
    @pulumi.getter(name="dstMac")
    def dst_mac(self) -> Optional[str]:
        return pulumi.get(self, "dst_mac")

    @property
    @pulumi.getter(name="srcIpPrefix")
    def src_ip_prefix(self) -> Optional[str]:
        return pulumi.get(self, "src_ip_prefix")

    @property
    @pulumi.getter(name="srcMac")
    def src_mac(self) -> Optional[str]:
        return pulumi.get(self, "src_mac")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SwitchControllerAutoConfigCustomSwitchBinding(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "switchId":
            suggest = "switch_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerAutoConfigCustomSwitchBinding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerAutoConfigCustomSwitchBinding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerAutoConfigCustomSwitchBinding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy: Optional[str] = None,
                 switch_id: Optional[str] = None):
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[str]:
        return pulumi.get(self, "switch_id")


@pulumi.output_type
class SwitchControllerDynamicPortPolicyPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bouncePortLink":
            suggest = "bounce_port_link"
        elif key == "hwVendor":
            suggest = "hw_vendor"
        elif key == "interfaceTags":
            suggest = "interface_tags"
        elif key == "lldpProfile":
            suggest = "lldp_profile"
        elif key == "qosPolicy":
            suggest = "qos_policy"
        elif key == "vlanPolicy":
            suggest = "vlan_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerDynamicPortPolicyPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerDynamicPortPolicyPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerDynamicPortPolicyPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bounce_port_link: Optional[str] = None,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 family: Optional[str] = None,
                 host: Optional[str] = None,
                 hw_vendor: Optional[str] = None,
                 interface_tags: Optional[Sequence['outputs.SwitchControllerDynamicPortPolicyPolicyInterfaceTag']] = None,
                 lldp_profile: Optional[str] = None,
                 mac: Optional[str] = None,
                 n8021x: Optional[str] = None,
                 name: Optional[str] = None,
                 qos_policy: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None,
                 vlan_policy: Optional[str] = None):
        if bounce_port_link is not None:
            pulumi.set(__self__, "bounce_port_link", bounce_port_link)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hw_vendor is not None:
            pulumi.set(__self__, "hw_vendor", hw_vendor)
        if interface_tags is not None:
            pulumi.set(__self__, "interface_tags", interface_tags)
        if lldp_profile is not None:
            pulumi.set(__self__, "lldp_profile", lldp_profile)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if n8021x is not None:
            pulumi.set(__self__, "n8021x", n8021x)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_policy is not None:
            pulumi.set(__self__, "vlan_policy", vlan_policy)

    @property
    @pulumi.getter(name="bouncePortLink")
    def bounce_port_link(self) -> Optional[str]:
        return pulumi.get(self, "bounce_port_link")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> Optional[str]:
        return pulumi.get(self, "hw_vendor")

    @property
    @pulumi.getter(name="interfaceTags")
    def interface_tags(self) -> Optional[Sequence['outputs.SwitchControllerDynamicPortPolicyPolicyInterfaceTag']]:
        return pulumi.get(self, "interface_tags")

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> Optional[str]:
        return pulumi.get(self, "lldp_profile")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def n8021x(self) -> Optional[str]:
        return pulumi.get(self, "n8021x")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[str]:
        return pulumi.get(self, "qos_policy")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanPolicy")
    def vlan_policy(self) -> Optional[str]:
        return pulumi.get(self, "vlan_policy")


@pulumi.output_type
class SwitchControllerDynamicPortPolicyPolicyInterfaceTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerDynamicPortPolicyPolicyInterfaceTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerDynamicPortPolicyPolicyInterfaceTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerDynamicPortPolicyPolicyInterfaceTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_name: Optional[str] = None):
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")


@pulumi.output_type
class SwitchControllerFlowTrackingAggregate(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class SwitchControllerFlowTrackingCollector(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 transport: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def transport(self) -> Optional[str]:
        return pulumi.get(self, "transport")


@pulumi.output_type
class SwitchControllerFortilinkSettingsNacPorts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bounceNacPort":
            suggest = "bounce_nac_port"
        elif key == "lanSegment":
            suggest = "lan_segment"
        elif key == "memberChange":
            suggest = "member_change"
        elif key == "nacLanInterface":
            suggest = "nac_lan_interface"
        elif key == "nacSegmentVlans":
            suggest = "nac_segment_vlans"
        elif key == "onboardingVlan":
            suggest = "onboarding_vlan"
        elif key == "parentKey":
            suggest = "parent_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerFortilinkSettingsNacPorts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerFortilinkSettingsNacPorts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerFortilinkSettingsNacPorts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bounce_nac_port: Optional[str] = None,
                 lan_segment: Optional[str] = None,
                 member_change: Optional[int] = None,
                 nac_lan_interface: Optional[str] = None,
                 nac_segment_vlans: Optional[Sequence['outputs.SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan']] = None,
                 onboarding_vlan: Optional[str] = None,
                 parent_key: Optional[str] = None):
        if bounce_nac_port is not None:
            pulumi.set(__self__, "bounce_nac_port", bounce_nac_port)
        if lan_segment is not None:
            pulumi.set(__self__, "lan_segment", lan_segment)
        if member_change is not None:
            pulumi.set(__self__, "member_change", member_change)
        if nac_lan_interface is not None:
            pulumi.set(__self__, "nac_lan_interface", nac_lan_interface)
        if nac_segment_vlans is not None:
            pulumi.set(__self__, "nac_segment_vlans", nac_segment_vlans)
        if onboarding_vlan is not None:
            pulumi.set(__self__, "onboarding_vlan", onboarding_vlan)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)

    @property
    @pulumi.getter(name="bounceNacPort")
    def bounce_nac_port(self) -> Optional[str]:
        return pulumi.get(self, "bounce_nac_port")

    @property
    @pulumi.getter(name="lanSegment")
    def lan_segment(self) -> Optional[str]:
        return pulumi.get(self, "lan_segment")

    @property
    @pulumi.getter(name="memberChange")
    def member_change(self) -> Optional[int]:
        return pulumi.get(self, "member_change")

    @property
    @pulumi.getter(name="nacLanInterface")
    def nac_lan_interface(self) -> Optional[str]:
        return pulumi.get(self, "nac_lan_interface")

    @property
    @pulumi.getter(name="nacSegmentVlans")
    def nac_segment_vlans(self) -> Optional[Sequence['outputs.SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan']]:
        return pulumi.get(self, "nac_segment_vlans")

    @property
    @pulumi.getter(name="onboardingVlan")
    def onboarding_vlan(self) -> Optional[str]:
        return pulumi.get(self, "onboarding_vlan")

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[str]:
        return pulumi.get(self, "parent_key")


@pulumi.output_type
class SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerFortilinkSettingsNacPortsNacSegmentVlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_name: Optional[str] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class SwitchControllerGlobalCustomCommand(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandEntry":
            suggest = "command_entry"
        elif key == "commandName":
            suggest = "command_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerGlobalCustomCommand. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerGlobalCustomCommand.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerGlobalCustomCommand.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_entry: Optional[str] = None,
                 command_name: Optional[str] = None):
        if command_entry is not None:
            pulumi.set(__self__, "command_entry", command_entry)
        if command_name is not None:
            pulumi.set(__self__, "command_name", command_name)

    @property
    @pulumi.getter(name="commandEntry")
    def command_entry(self) -> Optional[str]:
        return pulumi.get(self, "command_entry")

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> Optional[str]:
        return pulumi.get(self, "command_name")


@pulumi.output_type
class SwitchControllerGlobalDisableDiscovery(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchControllerLldpProfileCustomTlv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "informationString":
            suggest = "information_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerLldpProfileCustomTlv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerLldpProfileCustomTlv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerLldpProfileCustomTlv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 information_string: Optional[str] = None,
                 name: Optional[str] = None,
                 oui: Optional[str] = None,
                 subtype: Optional[int] = None):
        if information_string is not None:
            pulumi.set(__self__, "information_string", information_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oui is not None:
            pulumi.set(__self__, "oui", oui)
        if subtype is not None:
            pulumi.set(__self__, "subtype", subtype)

    @property
    @pulumi.getter(name="informationString")
    def information_string(self) -> Optional[str]:
        return pulumi.get(self, "information_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def oui(self) -> Optional[str]:
        return pulumi.get(self, "oui")

    @property
    @pulumi.getter
    def subtype(self) -> Optional[int]:
        return pulumi.get(self, "subtype")


@pulumi.output_type
class SwitchControllerLldpProfileMedLocationService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sysLocationId":
            suggest = "sys_location_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerLldpProfileMedLocationService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerLldpProfileMedLocationService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerLldpProfileMedLocationService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 status: Optional[str] = None,
                 sys_location_id: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sys_location_id is not None:
            pulumi.set(__self__, "sys_location_id", sys_location_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="sysLocationId")
    def sys_location_id(self) -> Optional[str]:
        return pulumi.get(self, "sys_location_id")


@pulumi.output_type
class SwitchControllerLldpProfileMedNetworkPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignVlan":
            suggest = "assign_vlan"
        elif key == "vlanIntf":
            suggest = "vlan_intf"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerLldpProfileMedNetworkPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerLldpProfileMedNetworkPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerLldpProfileMedNetworkPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_vlan: Optional[str] = None,
                 dscp: Optional[int] = None,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 vlan: Optional[int] = None,
                 vlan_intf: Optional[str] = None):
        if assign_vlan is not None:
            pulumi.set(__self__, "assign_vlan", assign_vlan)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_intf is not None:
            pulumi.set(__self__, "vlan_intf", vlan_intf)

    @property
    @pulumi.getter(name="assignVlan")
    def assign_vlan(self) -> Optional[str]:
        return pulumi.get(self, "assign_vlan")

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="vlanIntf")
    def vlan_intf(self) -> Optional[str]:
        return pulumi.get(self, "vlan_intf")


@pulumi.output_type
class SwitchControllerLocationAddressCivic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalCode":
            suggest = "additional_code"
        elif key == "branchRoad":
            suggest = "branch_road"
        elif key == "cityDivision":
            suggest = "city_division"
        elif key == "countrySubdivision":
            suggest = "country_subdivision"
        elif key == "numberSuffix":
            suggest = "number_suffix"
        elif key == "parentKey":
            suggest = "parent_key"
        elif key == "placeType":
            suggest = "place_type"
        elif key == "postOfficeBox":
            suggest = "post_office_box"
        elif key == "postalCommunity":
            suggest = "postal_community"
        elif key == "primaryRoad":
            suggest = "primary_road"
        elif key == "roadSection":
            suggest = "road_section"
        elif key == "streetNamePostMod":
            suggest = "street_name_post_mod"
        elif key == "streetNamePreMod":
            suggest = "street_name_pre_mod"
        elif key == "streetSuffix":
            suggest = "street_suffix"
        elif key == "subBranchRoad":
            suggest = "sub_branch_road"
        elif key == "trailingStrSuffix":
            suggest = "trailing_str_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerLocationAddressCivic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerLocationAddressCivic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerLocationAddressCivic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional: Optional[str] = None,
                 additional_code: Optional[str] = None,
                 block: Optional[str] = None,
                 branch_road: Optional[str] = None,
                 building: Optional[str] = None,
                 city: Optional[str] = None,
                 city_division: Optional[str] = None,
                 country: Optional[str] = None,
                 country_subdivision: Optional[str] = None,
                 county: Optional[str] = None,
                 direction: Optional[str] = None,
                 floor: Optional[str] = None,
                 landmark: Optional[str] = None,
                 language: Optional[str] = None,
                 name: Optional[str] = None,
                 number: Optional[str] = None,
                 number_suffix: Optional[str] = None,
                 parent_key: Optional[str] = None,
                 place_type: Optional[str] = None,
                 post_office_box: Optional[str] = None,
                 postal_community: Optional[str] = None,
                 primary_road: Optional[str] = None,
                 road_section: Optional[str] = None,
                 room: Optional[str] = None,
                 script: Optional[str] = None,
                 seat: Optional[str] = None,
                 street: Optional[str] = None,
                 street_name_post_mod: Optional[str] = None,
                 street_name_pre_mod: Optional[str] = None,
                 street_suffix: Optional[str] = None,
                 sub_branch_road: Optional[str] = None,
                 trailing_str_suffix: Optional[str] = None,
                 unit: Optional[str] = None,
                 zip: Optional[str] = None):
        if additional is not None:
            pulumi.set(__self__, "additional", additional)
        if additional_code is not None:
            pulumi.set(__self__, "additional_code", additional_code)
        if block is not None:
            pulumi.set(__self__, "block", block)
        if branch_road is not None:
            pulumi.set(__self__, "branch_road", branch_road)
        if building is not None:
            pulumi.set(__self__, "building", building)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if city_division is not None:
            pulumi.set(__self__, "city_division", city_division)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if country_subdivision is not None:
            pulumi.set(__self__, "country_subdivision", country_subdivision)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if floor is not None:
            pulumi.set(__self__, "floor", floor)
        if landmark is not None:
            pulumi.set(__self__, "landmark", landmark)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if number_suffix is not None:
            pulumi.set(__self__, "number_suffix", number_suffix)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)
        if place_type is not None:
            pulumi.set(__self__, "place_type", place_type)
        if post_office_box is not None:
            pulumi.set(__self__, "post_office_box", post_office_box)
        if postal_community is not None:
            pulumi.set(__self__, "postal_community", postal_community)
        if primary_road is not None:
            pulumi.set(__self__, "primary_road", primary_road)
        if road_section is not None:
            pulumi.set(__self__, "road_section", road_section)
        if room is not None:
            pulumi.set(__self__, "room", room)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if seat is not None:
            pulumi.set(__self__, "seat", seat)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if street_name_post_mod is not None:
            pulumi.set(__self__, "street_name_post_mod", street_name_post_mod)
        if street_name_pre_mod is not None:
            pulumi.set(__self__, "street_name_pre_mod", street_name_pre_mod)
        if street_suffix is not None:
            pulumi.set(__self__, "street_suffix", street_suffix)
        if sub_branch_road is not None:
            pulumi.set(__self__, "sub_branch_road", sub_branch_road)
        if trailing_str_suffix is not None:
            pulumi.set(__self__, "trailing_str_suffix", trailing_str_suffix)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if zip is not None:
            pulumi.set(__self__, "zip", zip)

    @property
    @pulumi.getter
    def additional(self) -> Optional[str]:
        return pulumi.get(self, "additional")

    @property
    @pulumi.getter(name="additionalCode")
    def additional_code(self) -> Optional[str]:
        return pulumi.get(self, "additional_code")

    @property
    @pulumi.getter
    def block(self) -> Optional[str]:
        return pulumi.get(self, "block")

    @property
    @pulumi.getter(name="branchRoad")
    def branch_road(self) -> Optional[str]:
        return pulumi.get(self, "branch_road")

    @property
    @pulumi.getter
    def building(self) -> Optional[str]:
        return pulumi.get(self, "building")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="cityDivision")
    def city_division(self) -> Optional[str]:
        return pulumi.get(self, "city_division")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="countrySubdivision")
    def country_subdivision(self) -> Optional[str]:
        return pulumi.get(self, "country_subdivision")

    @property
    @pulumi.getter
    def county(self) -> Optional[str]:
        return pulumi.get(self, "county")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def floor(self) -> Optional[str]:
        return pulumi.get(self, "floor")

    @property
    @pulumi.getter
    def landmark(self) -> Optional[str]:
        return pulumi.get(self, "landmark")

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def number(self) -> Optional[str]:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter(name="numberSuffix")
    def number_suffix(self) -> Optional[str]:
        return pulumi.get(self, "number_suffix")

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[str]:
        return pulumi.get(self, "parent_key")

    @property
    @pulumi.getter(name="placeType")
    def place_type(self) -> Optional[str]:
        return pulumi.get(self, "place_type")

    @property
    @pulumi.getter(name="postOfficeBox")
    def post_office_box(self) -> Optional[str]:
        return pulumi.get(self, "post_office_box")

    @property
    @pulumi.getter(name="postalCommunity")
    def postal_community(self) -> Optional[str]:
        return pulumi.get(self, "postal_community")

    @property
    @pulumi.getter(name="primaryRoad")
    def primary_road(self) -> Optional[str]:
        return pulumi.get(self, "primary_road")

    @property
    @pulumi.getter(name="roadSection")
    def road_section(self) -> Optional[str]:
        return pulumi.get(self, "road_section")

    @property
    @pulumi.getter
    def room(self) -> Optional[str]:
        return pulumi.get(self, "room")

    @property
    @pulumi.getter
    def script(self) -> Optional[str]:
        return pulumi.get(self, "script")

    @property
    @pulumi.getter
    def seat(self) -> Optional[str]:
        return pulumi.get(self, "seat")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter(name="streetNamePostMod")
    def street_name_post_mod(self) -> Optional[str]:
        return pulumi.get(self, "street_name_post_mod")

    @property
    @pulumi.getter(name="streetNamePreMod")
    def street_name_pre_mod(self) -> Optional[str]:
        return pulumi.get(self, "street_name_pre_mod")

    @property
    @pulumi.getter(name="streetSuffix")
    def street_suffix(self) -> Optional[str]:
        return pulumi.get(self, "street_suffix")

    @property
    @pulumi.getter(name="subBranchRoad")
    def sub_branch_road(self) -> Optional[str]:
        return pulumi.get(self, "sub_branch_road")

    @property
    @pulumi.getter(name="trailingStrSuffix")
    def trailing_str_suffix(self) -> Optional[str]:
        return pulumi.get(self, "trailing_str_suffix")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def zip(self) -> Optional[str]:
        return pulumi.get(self, "zip")


@pulumi.output_type
class SwitchControllerLocationCoordinates(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "altitudeUnit":
            suggest = "altitude_unit"
        elif key == "parentKey":
            suggest = "parent_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerLocationCoordinates. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerLocationCoordinates.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerLocationCoordinates.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 altitude: Optional[str] = None,
                 altitude_unit: Optional[str] = None,
                 datum: Optional[str] = None,
                 latitude: Optional[str] = None,
                 longitude: Optional[str] = None,
                 parent_key: Optional[str] = None):
        if altitude is not None:
            pulumi.set(__self__, "altitude", altitude)
        if altitude_unit is not None:
            pulumi.set(__self__, "altitude_unit", altitude_unit)
        if datum is not None:
            pulumi.set(__self__, "datum", datum)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)

    @property
    @pulumi.getter
    def altitude(self) -> Optional[str]:
        return pulumi.get(self, "altitude")

    @property
    @pulumi.getter(name="altitudeUnit")
    def altitude_unit(self) -> Optional[str]:
        return pulumi.get(self, "altitude_unit")

    @property
    @pulumi.getter
    def datum(self) -> Optional[str]:
        return pulumi.get(self, "datum")

    @property
    @pulumi.getter
    def latitude(self) -> Optional[str]:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> Optional[str]:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[str]:
        return pulumi.get(self, "parent_key")


@pulumi.output_type
class SwitchControllerLocationElinNumber(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elinNum":
            suggest = "elin_num"
        elif key == "parentKey":
            suggest = "parent_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerLocationElinNumber. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerLocationElinNumber.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerLocationElinNumber.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 elin_num: Optional[str] = None,
                 parent_key: Optional[str] = None):
        if elin_num is not None:
            pulumi.set(__self__, "elin_num", elin_num)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)

    @property
    @pulumi.getter(name="elinNum")
    def elin_num(self) -> Optional[str]:
        return pulumi.get(self, "elin_num")

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[str]:
        return pulumi.get(self, "parent_key")


@pulumi.output_type
class SwitchControllerManagedSwitchCustomCommand(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandEntry":
            suggest = "command_entry"
        elif key == "commandName":
            suggest = "command_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchCustomCommand. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchCustomCommand.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchCustomCommand.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_entry: Optional[str] = None,
                 command_name: Optional[str] = None):
        if command_entry is not None:
            pulumi.set(__self__, "command_entry", command_entry)
        if command_name is not None:
            pulumi.set(__self__, "command_name", command_name)

    @property
    @pulumi.getter(name="commandEntry")
    def command_entry(self) -> Optional[str]:
        return pulumi.get(self, "command_entry")

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> Optional[str]:
        return pulumi.get(self, "command_name")


@pulumi.output_type
class SwitchControllerManagedSwitchDhcpSnoopingStaticClient(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 mac: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[str] = None,
                 vlan: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[str]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SwitchControllerManagedSwitchIgmpSnooping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agingTime":
            suggest = "aging_time"
        elif key == "floodUnknownMulticast":
            suggest = "flood_unknown_multicast"
        elif key == "localOverride":
            suggest = "local_override"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchIgmpSnooping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchIgmpSnooping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchIgmpSnooping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aging_time: Optional[int] = None,
                 flood_unknown_multicast: Optional[str] = None,
                 local_override: Optional[str] = None,
                 vlans: Optional[Sequence['outputs.SwitchControllerManagedSwitchIgmpSnoopingVlan']] = None):
        if aging_time is not None:
            pulumi.set(__self__, "aging_time", aging_time)
        if flood_unknown_multicast is not None:
            pulumi.set(__self__, "flood_unknown_multicast", flood_unknown_multicast)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="agingTime")
    def aging_time(self) -> Optional[int]:
        return pulumi.get(self, "aging_time")

    @property
    @pulumi.getter(name="floodUnknownMulticast")
    def flood_unknown_multicast(self) -> Optional[str]:
        return pulumi.get(self, "flood_unknown_multicast")

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[str]:
        return pulumi.get(self, "local_override")

    @property
    @pulumi.getter
    def vlans(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchIgmpSnoopingVlan']]:
        return pulumi.get(self, "vlans")


@pulumi.output_type
class SwitchControllerManagedSwitchIgmpSnoopingVlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "querierAddr":
            suggest = "querier_addr"
        elif key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchIgmpSnoopingVlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchIgmpSnoopingVlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchIgmpSnoopingVlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 proxy: Optional[str] = None,
                 querier: Optional[str] = None,
                 querier_addr: Optional[str] = None,
                 version: Optional[int] = None,
                 vlan_name: Optional[str] = None):
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if querier is not None:
            pulumi.set(__self__, "querier", querier)
        if querier_addr is not None:
            pulumi.set(__self__, "querier_addr", querier_addr)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[str]:
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def querier(self) -> Optional[str]:
        return pulumi.get(self, "querier")

    @property
    @pulumi.getter(name="querierAddr")
    def querier_addr(self) -> Optional[str]:
        return pulumi.get(self, "querier_addr")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class SwitchControllerManagedSwitchIpSourceGuard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bindingEntries":
            suggest = "binding_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchIpSourceGuard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchIpSourceGuard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchIpSourceGuard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 binding_entries: Optional[Sequence['outputs.SwitchControllerManagedSwitchIpSourceGuardBindingEntry']] = None,
                 description: Optional[str] = None,
                 port: Optional[str] = None):
        if binding_entries is not None:
            pulumi.set(__self__, "binding_entries", binding_entries)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="bindingEntries")
    def binding_entries(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchIpSourceGuardBindingEntry']]:
        return pulumi.get(self, "binding_entries")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class SwitchControllerManagedSwitchIpSourceGuardBindingEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryName":
            suggest = "entry_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchIpSourceGuardBindingEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchIpSourceGuardBindingEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchIpSourceGuardBindingEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entry_name: Optional[str] = None,
                 ip: Optional[str] = None,
                 mac: Optional[str] = None):
        if entry_name is not None:
            pulumi.set(__self__, "entry_name", entry_name)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> Optional[str]:
        return pulumi.get(self, "entry_name")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")


@pulumi.output_type
class SwitchControllerManagedSwitchMirror(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "srcEgresses":
            suggest = "src_egresses"
        elif key == "srcIngresses":
            suggest = "src_ingresses"
        elif key == "switchingPacket":
            suggest = "switching_packet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchMirror. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchMirror.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchMirror.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst: Optional[str] = None,
                 name: Optional[str] = None,
                 src_egresses: Optional[Sequence['outputs.SwitchControllerManagedSwitchMirrorSrcEgress']] = None,
                 src_ingresses: Optional[Sequence['outputs.SwitchControllerManagedSwitchMirrorSrcIngress']] = None,
                 status: Optional[str] = None,
                 switching_packet: Optional[str] = None):
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if src_egresses is not None:
            pulumi.set(__self__, "src_egresses", src_egresses)
        if src_ingresses is not None:
            pulumi.set(__self__, "src_ingresses", src_ingresses)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if switching_packet is not None:
            pulumi.set(__self__, "switching_packet", switching_packet)

    @property
    @pulumi.getter
    def dst(self) -> Optional[str]:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="srcEgresses")
    def src_egresses(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchMirrorSrcEgress']]:
        return pulumi.get(self, "src_egresses")

    @property
    @pulumi.getter(name="srcIngresses")
    def src_ingresses(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchMirrorSrcIngress']]:
        return pulumi.get(self, "src_ingresses")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="switchingPacket")
    def switching_packet(self) -> Optional[str]:
        return pulumi.get(self, "switching_packet")


@pulumi.output_type
class SwitchControllerManagedSwitchMirrorSrcEgress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchControllerManagedSwitchMirrorSrcIngress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchControllerManagedSwitchN8021xSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkDownAuth":
            suggest = "link_down_auth"
        elif key == "localOverride":
            suggest = "local_override"
        elif key == "mabReauth":
            suggest = "mab_reauth"
        elif key == "maxReauthAttempt":
            suggest = "max_reauth_attempt"
        elif key == "reauthPeriod":
            suggest = "reauth_period"
        elif key == "txPeriod":
            suggest = "tx_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchN8021xSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchN8021xSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchN8021xSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_down_auth: Optional[str] = None,
                 local_override: Optional[str] = None,
                 mab_reauth: Optional[str] = None,
                 max_reauth_attempt: Optional[int] = None,
                 reauth_period: Optional[int] = None,
                 tx_period: Optional[int] = None):
        if link_down_auth is not None:
            pulumi.set(__self__, "link_down_auth", link_down_auth)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if mab_reauth is not None:
            pulumi.set(__self__, "mab_reauth", mab_reauth)
        if max_reauth_attempt is not None:
            pulumi.set(__self__, "max_reauth_attempt", max_reauth_attempt)
        if reauth_period is not None:
            pulumi.set(__self__, "reauth_period", reauth_period)
        if tx_period is not None:
            pulumi.set(__self__, "tx_period", tx_period)

    @property
    @pulumi.getter(name="linkDownAuth")
    def link_down_auth(self) -> Optional[str]:
        return pulumi.get(self, "link_down_auth")

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[str]:
        return pulumi.get(self, "local_override")

    @property
    @pulumi.getter(name="mabReauth")
    def mab_reauth(self) -> Optional[str]:
        return pulumi.get(self, "mab_reauth")

    @property
    @pulumi.getter(name="maxReauthAttempt")
    def max_reauth_attempt(self) -> Optional[int]:
        return pulumi.get(self, "max_reauth_attempt")

    @property
    @pulumi.getter(name="reauthPeriod")
    def reauth_period(self) -> Optional[int]:
        return pulumi.get(self, "reauth_period")

    @property
    @pulumi.getter(name="txPeriod")
    def tx_period(self) -> Optional[int]:
        return pulumi.get(self, "tx_period")


@pulumi.output_type
class SwitchControllerManagedSwitchPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessMode":
            suggest = "access_mode"
        elif key == "aclGroups":
            suggest = "acl_groups"
        elif key == "aggregatorMode":
            suggest = "aggregator_mode"
        elif key == "allowedVlans":
            suggest = "allowed_vlans"
        elif key == "allowedVlansAll":
            suggest = "allowed_vlans_all"
        elif key == "arpInspectionTrust":
            suggest = "arp_inspection_trust"
        elif key == "dhcpSnoopOption82Overrides":
            suggest = "dhcp_snoop_option82_overrides"
        elif key == "dhcpSnoopOption82Trust":
            suggest = "dhcp_snoop_option82_trust"
        elif key == "dhcpSnooping":
            suggest = "dhcp_snooping"
        elif key == "discardMode":
            suggest = "discard_mode"
        elif key == "edgePort":
            suggest = "edge_port"
        elif key == "exportTags":
            suggest = "export_tags"
        elif key == "exportTo":
            suggest = "export_to"
        elif key == "exportToPool":
            suggest = "export_to_pool"
        elif key == "exportToPoolFlag":
            suggest = "export_to_pool_flag"
        elif key == "fecCapable":
            suggest = "fec_capable"
        elif key == "fecState":
            suggest = "fec_state"
        elif key == "fgtPeerDeviceName":
            suggest = "fgt_peer_device_name"
        elif key == "fgtPeerPortName":
            suggest = "fgt_peer_port_name"
        elif key == "fiberPort":
            suggest = "fiber_port"
        elif key == "flapDuration":
            suggest = "flap_duration"
        elif key == "flapRate":
            suggest = "flap_rate"
        elif key == "flapTimeout":
            suggest = "flap_timeout"
        elif key == "flowControl":
            suggest = "flow_control"
        elif key == "fortilinkPort":
            suggest = "fortilink_port"
        elif key == "fortiswitchAcls":
            suggest = "fortiswitch_acls"
        elif key == "igmpSnooping":
            suggest = "igmp_snooping"
        elif key == "igmpSnoopingFloodReports":
            suggest = "igmp_snooping_flood_reports"
        elif key == "igmpsFloodReports":
            suggest = "igmps_flood_reports"
        elif key == "igmpsFloodTraffic":
            suggest = "igmps_flood_traffic"
        elif key == "interfaceTags":
            suggest = "interface_tags"
        elif key == "ipSourceGuard":
            suggest = "ip_source_guard"
        elif key == "islLocalTrunkName":
            suggest = "isl_local_trunk_name"
        elif key == "islPeerDeviceName":
            suggest = "isl_peer_device_name"
        elif key == "islPeerDeviceSn":
            suggest = "isl_peer_device_sn"
        elif key == "islPeerPortName":
            suggest = "isl_peer_port_name"
        elif key == "lacpSpeed":
            suggest = "lacp_speed"
        elif key == "learningLimit":
            suggest = "learning_limit"
        elif key == "linkStatus":
            suggest = "link_status"
        elif key == "lldpProfile":
            suggest = "lldp_profile"
        elif key == "lldpStatus":
            suggest = "lldp_status"
        elif key == "loopGuard":
            suggest = "loop_guard"
        elif key == "loopGuardTimeout":
            suggest = "loop_guard_timeout"
        elif key == "macAddr":
            suggest = "mac_addr"
        elif key == "matchedDppIntfTags":
            suggest = "matched_dpp_intf_tags"
        elif key == "matchedDppPolicy":
            suggest = "matched_dpp_policy"
        elif key == "maxBundle":
            suggest = "max_bundle"
        elif key == "mcastSnoopingFloodTraffic":
            suggest = "mcast_snooping_flood_traffic"
        elif key == "mclagIclPort":
            suggest = "mclag_icl_port"
        elif key == "mediaType":
            suggest = "media_type"
        elif key == "memberWithdrawalBehavior":
            suggest = "member_withdrawal_behavior"
        elif key == "minBundle":
            suggest = "min_bundle"
        elif key == "p2pPort":
            suggest = "p2p_port"
        elif key == "packetSampleRate":
            suggest = "packet_sample_rate"
        elif key == "packetSampler":
            suggest = "packet_sampler"
        elif key == "pauseMeter":
            suggest = "pause_meter"
        elif key == "pauseMeterResume":
            suggest = "pause_meter_resume"
        elif key == "poeCapable":
            suggest = "poe_capable"
        elif key == "poeMaxPower":
            suggest = "poe_max_power"
        elif key == "poeModeBtCabable":
            suggest = "poe_mode_bt_cabable"
        elif key == "poePortMode":
            suggest = "poe_port_mode"
        elif key == "poePortPower":
            suggest = "poe_port_power"
        elif key == "poePortPriority":
            suggest = "poe_port_priority"
        elif key == "poePreStandardDetection":
            suggest = "poe_pre_standard_detection"
        elif key == "poeStandard":
            suggest = "poe_standard"
        elif key == "poeStatus":
            suggest = "poe_status"
        elif key == "portName":
            suggest = "port_name"
        elif key == "portNumber":
            suggest = "port_number"
        elif key == "portOwner":
            suggest = "port_owner"
        elif key == "portPolicy":
            suggest = "port_policy"
        elif key == "portPrefixType":
            suggest = "port_prefix_type"
        elif key == "portSecurityPolicy":
            suggest = "port_security_policy"
        elif key == "portSelectionCriteria":
            suggest = "port_selection_criteria"
        elif key == "ptpPolicy":
            suggest = "ptp_policy"
        elif key == "qosPolicy":
            suggest = "qos_policy"
        elif key == "rpvstPort":
            suggest = "rpvst_port"
        elif key == "sampleDirection":
            suggest = "sample_direction"
        elif key == "sflowCounterInterval":
            suggest = "sflow_counter_interval"
        elif key == "sflowSampleRate":
            suggest = "sflow_sample_rate"
        elif key == "sflowSampler":
            suggest = "sflow_sampler"
        elif key == "speedMask":
            suggest = "speed_mask"
        elif key == "stackingPort":
            suggest = "stacking_port"
        elif key == "stickyMac":
            suggest = "sticky_mac"
        elif key == "stormControlPolicy":
            suggest = "storm_control_policy"
        elif key == "stpBpduGuard":
            suggest = "stp_bpdu_guard"
        elif key == "stpBpduGuardTimeout":
            suggest = "stp_bpdu_guard_timeout"
        elif key == "stpRootGuard":
            suggest = "stp_root_guard"
        elif key == "stpState":
            suggest = "stp_state"
        elif key == "switchId":
            suggest = "switch_id"
        elif key == "untaggedVlans":
            suggest = "untagged_vlans"
        elif key == "virtualPort":
            suggest = "virtual_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_mode: Optional[str] = None,
                 acl_groups: Optional[Sequence['outputs.SwitchControllerManagedSwitchPortAclGroup']] = None,
                 aggregator_mode: Optional[str] = None,
                 allowed_vlans: Optional[Sequence['outputs.SwitchControllerManagedSwitchPortAllowedVlan']] = None,
                 allowed_vlans_all: Optional[str] = None,
                 arp_inspection_trust: Optional[str] = None,
                 bundle: Optional[str] = None,
                 description: Optional[str] = None,
                 dhcp_snoop_option82_overrides: Optional[Sequence['outputs.SwitchControllerManagedSwitchPortDhcpSnoopOption82Override']] = None,
                 dhcp_snoop_option82_trust: Optional[str] = None,
                 dhcp_snooping: Optional[str] = None,
                 discard_mode: Optional[str] = None,
                 edge_port: Optional[str] = None,
                 export_tags: Optional[Sequence['outputs.SwitchControllerManagedSwitchPortExportTag']] = None,
                 export_to: Optional[str] = None,
                 export_to_pool: Optional[str] = None,
                 export_to_pool_flag: Optional[int] = None,
                 fec_capable: Optional[int] = None,
                 fec_state: Optional[str] = None,
                 fgt_peer_device_name: Optional[str] = None,
                 fgt_peer_port_name: Optional[str] = None,
                 fiber_port: Optional[int] = None,
                 flags: Optional[int] = None,
                 flap_duration: Optional[int] = None,
                 flap_rate: Optional[int] = None,
                 flap_timeout: Optional[int] = None,
                 flapguard: Optional[str] = None,
                 flow_control: Optional[str] = None,
                 fortilink_port: Optional[int] = None,
                 fortiswitch_acls: Optional[Sequence['outputs.SwitchControllerManagedSwitchPortFortiswitchAcl']] = None,
                 igmp_snooping: Optional[str] = None,
                 igmp_snooping_flood_reports: Optional[str] = None,
                 igmps_flood_reports: Optional[str] = None,
                 igmps_flood_traffic: Optional[str] = None,
                 interface_tags: Optional[Sequence['outputs.SwitchControllerManagedSwitchPortInterfaceTag']] = None,
                 ip_source_guard: Optional[str] = None,
                 isl_local_trunk_name: Optional[str] = None,
                 isl_peer_device_name: Optional[str] = None,
                 isl_peer_device_sn: Optional[str] = None,
                 isl_peer_port_name: Optional[str] = None,
                 lacp_speed: Optional[str] = None,
                 learning_limit: Optional[int] = None,
                 link_status: Optional[str] = None,
                 lldp_profile: Optional[str] = None,
                 lldp_status: Optional[str] = None,
                 loop_guard: Optional[str] = None,
                 loop_guard_timeout: Optional[int] = None,
                 mac_addr: Optional[str] = None,
                 matched_dpp_intf_tags: Optional[str] = None,
                 matched_dpp_policy: Optional[str] = None,
                 max_bundle: Optional[int] = None,
                 mcast_snooping_flood_traffic: Optional[str] = None,
                 mclag: Optional[str] = None,
                 mclag_icl_port: Optional[int] = None,
                 media_type: Optional[str] = None,
                 member_withdrawal_behavior: Optional[str] = None,
                 members: Optional[Sequence['outputs.SwitchControllerManagedSwitchPortMember']] = None,
                 min_bundle: Optional[int] = None,
                 mode: Optional[str] = None,
                 p2p_port: Optional[int] = None,
                 packet_sample_rate: Optional[int] = None,
                 packet_sampler: Optional[str] = None,
                 pause_meter: Optional[int] = None,
                 pause_meter_resume: Optional[str] = None,
                 poe_capable: Optional[int] = None,
                 poe_max_power: Optional[str] = None,
                 poe_mode_bt_cabable: Optional[int] = None,
                 poe_port_mode: Optional[str] = None,
                 poe_port_power: Optional[str] = None,
                 poe_port_priority: Optional[str] = None,
                 poe_pre_standard_detection: Optional[str] = None,
                 poe_standard: Optional[str] = None,
                 poe_status: Optional[str] = None,
                 port_name: Optional[str] = None,
                 port_number: Optional[int] = None,
                 port_owner: Optional[str] = None,
                 port_policy: Optional[str] = None,
                 port_prefix_type: Optional[int] = None,
                 port_security_policy: Optional[str] = None,
                 port_selection_criteria: Optional[str] = None,
                 ptp_policy: Optional[str] = None,
                 qos_policy: Optional[str] = None,
                 rpvst_port: Optional[str] = None,
                 sample_direction: Optional[str] = None,
                 sflow_counter_interval: Optional[int] = None,
                 sflow_sample_rate: Optional[int] = None,
                 sflow_sampler: Optional[str] = None,
                 speed: Optional[str] = None,
                 speed_mask: Optional[int] = None,
                 stacking_port: Optional[int] = None,
                 status: Optional[str] = None,
                 sticky_mac: Optional[str] = None,
                 storm_control_policy: Optional[str] = None,
                 stp_bpdu_guard: Optional[str] = None,
                 stp_bpdu_guard_timeout: Optional[int] = None,
                 stp_root_guard: Optional[str] = None,
                 stp_state: Optional[str] = None,
                 switch_id: Optional[str] = None,
                 type: Optional[str] = None,
                 untagged_vlans: Optional[Sequence['outputs.SwitchControllerManagedSwitchPortUntaggedVlan']] = None,
                 virtual_port: Optional[int] = None,
                 vlan: Optional[str] = None):
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if acl_groups is not None:
            pulumi.set(__self__, "acl_groups", acl_groups)
        if aggregator_mode is not None:
            pulumi.set(__self__, "aggregator_mode", aggregator_mode)
        if allowed_vlans is not None:
            pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if allowed_vlans_all is not None:
            pulumi.set(__self__, "allowed_vlans_all", allowed_vlans_all)
        if arp_inspection_trust is not None:
            pulumi.set(__self__, "arp_inspection_trust", arp_inspection_trust)
        if bundle is not None:
            pulumi.set(__self__, "bundle", bundle)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_snoop_option82_overrides is not None:
            pulumi.set(__self__, "dhcp_snoop_option82_overrides", dhcp_snoop_option82_overrides)
        if dhcp_snoop_option82_trust is not None:
            pulumi.set(__self__, "dhcp_snoop_option82_trust", dhcp_snoop_option82_trust)
        if dhcp_snooping is not None:
            pulumi.set(__self__, "dhcp_snooping", dhcp_snooping)
        if discard_mode is not None:
            pulumi.set(__self__, "discard_mode", discard_mode)
        if edge_port is not None:
            pulumi.set(__self__, "edge_port", edge_port)
        if export_tags is not None:
            pulumi.set(__self__, "export_tags", export_tags)
        if export_to is not None:
            pulumi.set(__self__, "export_to", export_to)
        if export_to_pool is not None:
            pulumi.set(__self__, "export_to_pool", export_to_pool)
        if export_to_pool_flag is not None:
            pulumi.set(__self__, "export_to_pool_flag", export_to_pool_flag)
        if fec_capable is not None:
            pulumi.set(__self__, "fec_capable", fec_capable)
        if fec_state is not None:
            pulumi.set(__self__, "fec_state", fec_state)
        if fgt_peer_device_name is not None:
            pulumi.set(__self__, "fgt_peer_device_name", fgt_peer_device_name)
        if fgt_peer_port_name is not None:
            pulumi.set(__self__, "fgt_peer_port_name", fgt_peer_port_name)
        if fiber_port is not None:
            pulumi.set(__self__, "fiber_port", fiber_port)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if flap_duration is not None:
            pulumi.set(__self__, "flap_duration", flap_duration)
        if flap_rate is not None:
            pulumi.set(__self__, "flap_rate", flap_rate)
        if flap_timeout is not None:
            pulumi.set(__self__, "flap_timeout", flap_timeout)
        if flapguard is not None:
            pulumi.set(__self__, "flapguard", flapguard)
        if flow_control is not None:
            pulumi.set(__self__, "flow_control", flow_control)
        if fortilink_port is not None:
            pulumi.set(__self__, "fortilink_port", fortilink_port)
        if fortiswitch_acls is not None:
            pulumi.set(__self__, "fortiswitch_acls", fortiswitch_acls)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if igmp_snooping_flood_reports is not None:
            pulumi.set(__self__, "igmp_snooping_flood_reports", igmp_snooping_flood_reports)
        if igmps_flood_reports is not None:
            pulumi.set(__self__, "igmps_flood_reports", igmps_flood_reports)
        if igmps_flood_traffic is not None:
            pulumi.set(__self__, "igmps_flood_traffic", igmps_flood_traffic)
        if interface_tags is not None:
            pulumi.set(__self__, "interface_tags", interface_tags)
        if ip_source_guard is not None:
            pulumi.set(__self__, "ip_source_guard", ip_source_guard)
        if isl_local_trunk_name is not None:
            pulumi.set(__self__, "isl_local_trunk_name", isl_local_trunk_name)
        if isl_peer_device_name is not None:
            pulumi.set(__self__, "isl_peer_device_name", isl_peer_device_name)
        if isl_peer_device_sn is not None:
            pulumi.set(__self__, "isl_peer_device_sn", isl_peer_device_sn)
        if isl_peer_port_name is not None:
            pulumi.set(__self__, "isl_peer_port_name", isl_peer_port_name)
        if lacp_speed is not None:
            pulumi.set(__self__, "lacp_speed", lacp_speed)
        if learning_limit is not None:
            pulumi.set(__self__, "learning_limit", learning_limit)
        if link_status is not None:
            pulumi.set(__self__, "link_status", link_status)
        if lldp_profile is not None:
            pulumi.set(__self__, "lldp_profile", lldp_profile)
        if lldp_status is not None:
            pulumi.set(__self__, "lldp_status", lldp_status)
        if loop_guard is not None:
            pulumi.set(__self__, "loop_guard", loop_guard)
        if loop_guard_timeout is not None:
            pulumi.set(__self__, "loop_guard_timeout", loop_guard_timeout)
        if mac_addr is not None:
            pulumi.set(__self__, "mac_addr", mac_addr)
        if matched_dpp_intf_tags is not None:
            pulumi.set(__self__, "matched_dpp_intf_tags", matched_dpp_intf_tags)
        if matched_dpp_policy is not None:
            pulumi.set(__self__, "matched_dpp_policy", matched_dpp_policy)
        if max_bundle is not None:
            pulumi.set(__self__, "max_bundle", max_bundle)
        if mcast_snooping_flood_traffic is not None:
            pulumi.set(__self__, "mcast_snooping_flood_traffic", mcast_snooping_flood_traffic)
        if mclag is not None:
            pulumi.set(__self__, "mclag", mclag)
        if mclag_icl_port is not None:
            pulumi.set(__self__, "mclag_icl_port", mclag_icl_port)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if member_withdrawal_behavior is not None:
            pulumi.set(__self__, "member_withdrawal_behavior", member_withdrawal_behavior)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if min_bundle is not None:
            pulumi.set(__self__, "min_bundle", min_bundle)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if p2p_port is not None:
            pulumi.set(__self__, "p2p_port", p2p_port)
        if packet_sample_rate is not None:
            pulumi.set(__self__, "packet_sample_rate", packet_sample_rate)
        if packet_sampler is not None:
            pulumi.set(__self__, "packet_sampler", packet_sampler)
        if pause_meter is not None:
            pulumi.set(__self__, "pause_meter", pause_meter)
        if pause_meter_resume is not None:
            pulumi.set(__self__, "pause_meter_resume", pause_meter_resume)
        if poe_capable is not None:
            pulumi.set(__self__, "poe_capable", poe_capable)
        if poe_max_power is not None:
            pulumi.set(__self__, "poe_max_power", poe_max_power)
        if poe_mode_bt_cabable is not None:
            pulumi.set(__self__, "poe_mode_bt_cabable", poe_mode_bt_cabable)
        if poe_port_mode is not None:
            pulumi.set(__self__, "poe_port_mode", poe_port_mode)
        if poe_port_power is not None:
            pulumi.set(__self__, "poe_port_power", poe_port_power)
        if poe_port_priority is not None:
            pulumi.set(__self__, "poe_port_priority", poe_port_priority)
        if poe_pre_standard_detection is not None:
            pulumi.set(__self__, "poe_pre_standard_detection", poe_pre_standard_detection)
        if poe_standard is not None:
            pulumi.set(__self__, "poe_standard", poe_standard)
        if poe_status is not None:
            pulumi.set(__self__, "poe_status", poe_status)
        if port_name is not None:
            pulumi.set(__self__, "port_name", port_name)
        if port_number is not None:
            pulumi.set(__self__, "port_number", port_number)
        if port_owner is not None:
            pulumi.set(__self__, "port_owner", port_owner)
        if port_policy is not None:
            pulumi.set(__self__, "port_policy", port_policy)
        if port_prefix_type is not None:
            pulumi.set(__self__, "port_prefix_type", port_prefix_type)
        if port_security_policy is not None:
            pulumi.set(__self__, "port_security_policy", port_security_policy)
        if port_selection_criteria is not None:
            pulumi.set(__self__, "port_selection_criteria", port_selection_criteria)
        if ptp_policy is not None:
            pulumi.set(__self__, "ptp_policy", ptp_policy)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if rpvst_port is not None:
            pulumi.set(__self__, "rpvst_port", rpvst_port)
        if sample_direction is not None:
            pulumi.set(__self__, "sample_direction", sample_direction)
        if sflow_counter_interval is not None:
            pulumi.set(__self__, "sflow_counter_interval", sflow_counter_interval)
        if sflow_sample_rate is not None:
            pulumi.set(__self__, "sflow_sample_rate", sflow_sample_rate)
        if sflow_sampler is not None:
            pulumi.set(__self__, "sflow_sampler", sflow_sampler)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_mask is not None:
            pulumi.set(__self__, "speed_mask", speed_mask)
        if stacking_port is not None:
            pulumi.set(__self__, "stacking_port", stacking_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sticky_mac is not None:
            pulumi.set(__self__, "sticky_mac", sticky_mac)
        if storm_control_policy is not None:
            pulumi.set(__self__, "storm_control_policy", storm_control_policy)
        if stp_bpdu_guard is not None:
            pulumi.set(__self__, "stp_bpdu_guard", stp_bpdu_guard)
        if stp_bpdu_guard_timeout is not None:
            pulumi.set(__self__, "stp_bpdu_guard_timeout", stp_bpdu_guard_timeout)
        if stp_root_guard is not None:
            pulumi.set(__self__, "stp_root_guard", stp_root_guard)
        if stp_state is not None:
            pulumi.set(__self__, "stp_state", stp_state)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if untagged_vlans is not None:
            pulumi.set(__self__, "untagged_vlans", untagged_vlans)
        if virtual_port is not None:
            pulumi.set(__self__, "virtual_port", virtual_port)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[str]:
        return pulumi.get(self, "access_mode")

    @property
    @pulumi.getter(name="aclGroups")
    def acl_groups(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchPortAclGroup']]:
        return pulumi.get(self, "acl_groups")

    @property
    @pulumi.getter(name="aggregatorMode")
    def aggregator_mode(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_mode")

    @property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchPortAllowedVlan']]:
        return pulumi.get(self, "allowed_vlans")

    @property
    @pulumi.getter(name="allowedVlansAll")
    def allowed_vlans_all(self) -> Optional[str]:
        return pulumi.get(self, "allowed_vlans_all")

    @property
    @pulumi.getter(name="arpInspectionTrust")
    def arp_inspection_trust(self) -> Optional[str]:
        return pulumi.get(self, "arp_inspection_trust")

    @property
    @pulumi.getter
    def bundle(self) -> Optional[str]:
        return pulumi.get(self, "bundle")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpSnoopOption82Overrides")
    def dhcp_snoop_option82_overrides(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchPortDhcpSnoopOption82Override']]:
        return pulumi.get(self, "dhcp_snoop_option82_overrides")

    @property
    @pulumi.getter(name="dhcpSnoopOption82Trust")
    def dhcp_snoop_option82_trust(self) -> Optional[str]:
        return pulumi.get(self, "dhcp_snoop_option82_trust")

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> Optional[str]:
        return pulumi.get(self, "dhcp_snooping")

    @property
    @pulumi.getter(name="discardMode")
    def discard_mode(self) -> Optional[str]:
        return pulumi.get(self, "discard_mode")

    @property
    @pulumi.getter(name="edgePort")
    def edge_port(self) -> Optional[str]:
        return pulumi.get(self, "edge_port")

    @property
    @pulumi.getter(name="exportTags")
    def export_tags(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchPortExportTag']]:
        return pulumi.get(self, "export_tags")

    @property
    @pulumi.getter(name="exportTo")
    def export_to(self) -> Optional[str]:
        return pulumi.get(self, "export_to")

    @property
    @pulumi.getter(name="exportToPool")
    def export_to_pool(self) -> Optional[str]:
        return pulumi.get(self, "export_to_pool")

    @property
    @pulumi.getter(name="exportToPoolFlag")
    def export_to_pool_flag(self) -> Optional[int]:
        return pulumi.get(self, "export_to_pool_flag")

    @property
    @pulumi.getter(name="fecCapable")
    def fec_capable(self) -> Optional[int]:
        return pulumi.get(self, "fec_capable")

    @property
    @pulumi.getter(name="fecState")
    def fec_state(self) -> Optional[str]:
        return pulumi.get(self, "fec_state")

    @property
    @pulumi.getter(name="fgtPeerDeviceName")
    def fgt_peer_device_name(self) -> Optional[str]:
        return pulumi.get(self, "fgt_peer_device_name")

    @property
    @pulumi.getter(name="fgtPeerPortName")
    def fgt_peer_port_name(self) -> Optional[str]:
        return pulumi.get(self, "fgt_peer_port_name")

    @property
    @pulumi.getter(name="fiberPort")
    def fiber_port(self) -> Optional[int]:
        return pulumi.get(self, "fiber_port")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter(name="flapDuration")
    def flap_duration(self) -> Optional[int]:
        return pulumi.get(self, "flap_duration")

    @property
    @pulumi.getter(name="flapRate")
    def flap_rate(self) -> Optional[int]:
        return pulumi.get(self, "flap_rate")

    @property
    @pulumi.getter(name="flapTimeout")
    def flap_timeout(self) -> Optional[int]:
        return pulumi.get(self, "flap_timeout")

    @property
    @pulumi.getter
    def flapguard(self) -> Optional[str]:
        return pulumi.get(self, "flapguard")

    @property
    @pulumi.getter(name="flowControl")
    def flow_control(self) -> Optional[str]:
        return pulumi.get(self, "flow_control")

    @property
    @pulumi.getter(name="fortilinkPort")
    def fortilink_port(self) -> Optional[int]:
        return pulumi.get(self, "fortilink_port")

    @property
    @pulumi.getter(name="fortiswitchAcls")
    def fortiswitch_acls(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchPortFortiswitchAcl']]:
        return pulumi.get(self, "fortiswitch_acls")

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[str]:
        return pulumi.get(self, "igmp_snooping")

    @property
    @pulumi.getter(name="igmpSnoopingFloodReports")
    def igmp_snooping_flood_reports(self) -> Optional[str]:
        return pulumi.get(self, "igmp_snooping_flood_reports")

    @property
    @pulumi.getter(name="igmpsFloodReports")
    def igmps_flood_reports(self) -> Optional[str]:
        return pulumi.get(self, "igmps_flood_reports")

    @property
    @pulumi.getter(name="igmpsFloodTraffic")
    def igmps_flood_traffic(self) -> Optional[str]:
        return pulumi.get(self, "igmps_flood_traffic")

    @property
    @pulumi.getter(name="interfaceTags")
    def interface_tags(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchPortInterfaceTag']]:
        return pulumi.get(self, "interface_tags")

    @property
    @pulumi.getter(name="ipSourceGuard")
    def ip_source_guard(self) -> Optional[str]:
        return pulumi.get(self, "ip_source_guard")

    @property
    @pulumi.getter(name="islLocalTrunkName")
    def isl_local_trunk_name(self) -> Optional[str]:
        return pulumi.get(self, "isl_local_trunk_name")

    @property
    @pulumi.getter(name="islPeerDeviceName")
    def isl_peer_device_name(self) -> Optional[str]:
        return pulumi.get(self, "isl_peer_device_name")

    @property
    @pulumi.getter(name="islPeerDeviceSn")
    def isl_peer_device_sn(self) -> Optional[str]:
        return pulumi.get(self, "isl_peer_device_sn")

    @property
    @pulumi.getter(name="islPeerPortName")
    def isl_peer_port_name(self) -> Optional[str]:
        return pulumi.get(self, "isl_peer_port_name")

    @property
    @pulumi.getter(name="lacpSpeed")
    def lacp_speed(self) -> Optional[str]:
        return pulumi.get(self, "lacp_speed")

    @property
    @pulumi.getter(name="learningLimit")
    def learning_limit(self) -> Optional[int]:
        return pulumi.get(self, "learning_limit")

    @property
    @pulumi.getter(name="linkStatus")
    def link_status(self) -> Optional[str]:
        return pulumi.get(self, "link_status")

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> Optional[str]:
        return pulumi.get(self, "lldp_profile")

    @property
    @pulumi.getter(name="lldpStatus")
    def lldp_status(self) -> Optional[str]:
        return pulumi.get(self, "lldp_status")

    @property
    @pulumi.getter(name="loopGuard")
    def loop_guard(self) -> Optional[str]:
        return pulumi.get(self, "loop_guard")

    @property
    @pulumi.getter(name="loopGuardTimeout")
    def loop_guard_timeout(self) -> Optional[int]:
        return pulumi.get(self, "loop_guard_timeout")

    @property
    @pulumi.getter(name="macAddr")
    def mac_addr(self) -> Optional[str]:
        return pulumi.get(self, "mac_addr")

    @property
    @pulumi.getter(name="matchedDppIntfTags")
    def matched_dpp_intf_tags(self) -> Optional[str]:
        return pulumi.get(self, "matched_dpp_intf_tags")

    @property
    @pulumi.getter(name="matchedDppPolicy")
    def matched_dpp_policy(self) -> Optional[str]:
        return pulumi.get(self, "matched_dpp_policy")

    @property
    @pulumi.getter(name="maxBundle")
    def max_bundle(self) -> Optional[int]:
        return pulumi.get(self, "max_bundle")

    @property
    @pulumi.getter(name="mcastSnoopingFloodTraffic")
    def mcast_snooping_flood_traffic(self) -> Optional[str]:
        return pulumi.get(self, "mcast_snooping_flood_traffic")

    @property
    @pulumi.getter
    def mclag(self) -> Optional[str]:
        return pulumi.get(self, "mclag")

    @property
    @pulumi.getter(name="mclagIclPort")
    def mclag_icl_port(self) -> Optional[int]:
        return pulumi.get(self, "mclag_icl_port")

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[str]:
        return pulumi.get(self, "media_type")

    @property
    @pulumi.getter(name="memberWithdrawalBehavior")
    def member_withdrawal_behavior(self) -> Optional[str]:
        return pulumi.get(self, "member_withdrawal_behavior")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchPortMember']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="minBundle")
    def min_bundle(self) -> Optional[int]:
        return pulumi.get(self, "min_bundle")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="p2pPort")
    def p2p_port(self) -> Optional[int]:
        return pulumi.get(self, "p2p_port")

    @property
    @pulumi.getter(name="packetSampleRate")
    def packet_sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "packet_sample_rate")

    @property
    @pulumi.getter(name="packetSampler")
    def packet_sampler(self) -> Optional[str]:
        return pulumi.get(self, "packet_sampler")

    @property
    @pulumi.getter(name="pauseMeter")
    def pause_meter(self) -> Optional[int]:
        return pulumi.get(self, "pause_meter")

    @property
    @pulumi.getter(name="pauseMeterResume")
    def pause_meter_resume(self) -> Optional[str]:
        return pulumi.get(self, "pause_meter_resume")

    @property
    @pulumi.getter(name="poeCapable")
    def poe_capable(self) -> Optional[int]:
        return pulumi.get(self, "poe_capable")

    @property
    @pulumi.getter(name="poeMaxPower")
    def poe_max_power(self) -> Optional[str]:
        return pulumi.get(self, "poe_max_power")

    @property
    @pulumi.getter(name="poeModeBtCabable")
    def poe_mode_bt_cabable(self) -> Optional[int]:
        return pulumi.get(self, "poe_mode_bt_cabable")

    @property
    @pulumi.getter(name="poePortMode")
    def poe_port_mode(self) -> Optional[str]:
        return pulumi.get(self, "poe_port_mode")

    @property
    @pulumi.getter(name="poePortPower")
    def poe_port_power(self) -> Optional[str]:
        return pulumi.get(self, "poe_port_power")

    @property
    @pulumi.getter(name="poePortPriority")
    def poe_port_priority(self) -> Optional[str]:
        return pulumi.get(self, "poe_port_priority")

    @property
    @pulumi.getter(name="poePreStandardDetection")
    def poe_pre_standard_detection(self) -> Optional[str]:
        return pulumi.get(self, "poe_pre_standard_detection")

    @property
    @pulumi.getter(name="poeStandard")
    def poe_standard(self) -> Optional[str]:
        return pulumi.get(self, "poe_standard")

    @property
    @pulumi.getter(name="poeStatus")
    def poe_status(self) -> Optional[str]:
        return pulumi.get(self, "poe_status")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[str]:
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> Optional[int]:
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter(name="portOwner")
    def port_owner(self) -> Optional[str]:
        return pulumi.get(self, "port_owner")

    @property
    @pulumi.getter(name="portPolicy")
    def port_policy(self) -> Optional[str]:
        return pulumi.get(self, "port_policy")

    @property
    @pulumi.getter(name="portPrefixType")
    def port_prefix_type(self) -> Optional[int]:
        return pulumi.get(self, "port_prefix_type")

    @property
    @pulumi.getter(name="portSecurityPolicy")
    def port_security_policy(self) -> Optional[str]:
        return pulumi.get(self, "port_security_policy")

    @property
    @pulumi.getter(name="portSelectionCriteria")
    def port_selection_criteria(self) -> Optional[str]:
        return pulumi.get(self, "port_selection_criteria")

    @property
    @pulumi.getter(name="ptpPolicy")
    def ptp_policy(self) -> Optional[str]:
        return pulumi.get(self, "ptp_policy")

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[str]:
        return pulumi.get(self, "qos_policy")

    @property
    @pulumi.getter(name="rpvstPort")
    def rpvst_port(self) -> Optional[str]:
        return pulumi.get(self, "rpvst_port")

    @property
    @pulumi.getter(name="sampleDirection")
    def sample_direction(self) -> Optional[str]:
        return pulumi.get(self, "sample_direction")

    @property
    @pulumi.getter(name="sflowCounterInterval")
    def sflow_counter_interval(self) -> Optional[int]:
        return pulumi.get(self, "sflow_counter_interval")

    @property
    @pulumi.getter(name="sflowSampleRate")
    def sflow_sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "sflow_sample_rate")

    @property
    @pulumi.getter(name="sflowSampler")
    def sflow_sampler(self) -> Optional[str]:
        return pulumi.get(self, "sflow_sampler")

    @property
    @pulumi.getter
    def speed(self) -> Optional[str]:
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="speedMask")
    def speed_mask(self) -> Optional[int]:
        return pulumi.get(self, "speed_mask")

    @property
    @pulumi.getter(name="stackingPort")
    def stacking_port(self) -> Optional[int]:
        return pulumi.get(self, "stacking_port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stickyMac")
    def sticky_mac(self) -> Optional[str]:
        return pulumi.get(self, "sticky_mac")

    @property
    @pulumi.getter(name="stormControlPolicy")
    def storm_control_policy(self) -> Optional[str]:
        return pulumi.get(self, "storm_control_policy")

    @property
    @pulumi.getter(name="stpBpduGuard")
    def stp_bpdu_guard(self) -> Optional[str]:
        return pulumi.get(self, "stp_bpdu_guard")

    @property
    @pulumi.getter(name="stpBpduGuardTimeout")
    def stp_bpdu_guard_timeout(self) -> Optional[int]:
        return pulumi.get(self, "stp_bpdu_guard_timeout")

    @property
    @pulumi.getter(name="stpRootGuard")
    def stp_root_guard(self) -> Optional[str]:
        return pulumi.get(self, "stp_root_guard")

    @property
    @pulumi.getter(name="stpState")
    def stp_state(self) -> Optional[str]:
        return pulumi.get(self, "stp_state")

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[str]:
        return pulumi.get(self, "switch_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="untaggedVlans")
    def untagged_vlans(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchPortUntaggedVlan']]:
        return pulumi.get(self, "untagged_vlans")

    @property
    @pulumi.getter(name="virtualPort")
    def virtual_port(self) -> Optional[int]:
        return pulumi.get(self, "virtual_port")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[str]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SwitchControllerManagedSwitchPortAclGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchControllerManagedSwitchPortAllowedVlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchPortAllowedVlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchPortAllowedVlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchPortAllowedVlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_name: Optional[str] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class SwitchControllerManagedSwitchPortDhcpSnoopOption82Override(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "circuitId":
            suggest = "circuit_id"
        elif key == "remoteId":
            suggest = "remote_id"
        elif key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchPortDhcpSnoopOption82Override. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchPortDhcpSnoopOption82Override.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchPortDhcpSnoopOption82Override.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 circuit_id: Optional[str] = None,
                 remote_id: Optional[str] = None,
                 vlan_name: Optional[str] = None):
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if remote_id is not None:
            pulumi.set(__self__, "remote_id", remote_id)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[str]:
        return pulumi.get(self, "circuit_id")

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> Optional[str]:
        return pulumi.get(self, "remote_id")

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class SwitchControllerManagedSwitchPortExportTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchPortExportTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchPortExportTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchPortExportTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_name: Optional[str] = None):
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")


@pulumi.output_type
class SwitchControllerManagedSwitchPortFortiswitchAcl(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SwitchControllerManagedSwitchPortInterfaceTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagName":
            suggest = "tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchPortInterfaceTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchPortInterfaceTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchPortInterfaceTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_name: Optional[str] = None):
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")


@pulumi.output_type
class SwitchControllerManagedSwitchPortMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memberName":
            suggest = "member_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchPortMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchPortMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchPortMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 member_name: Optional[str] = None):
        if member_name is not None:
            pulumi.set(__self__, "member_name", member_name)

    @property
    @pulumi.getter(name="memberName")
    def member_name(self) -> Optional[str]:
        return pulumi.get(self, "member_name")


@pulumi.output_type
class SwitchControllerManagedSwitchPortUntaggedVlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchPortUntaggedVlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchPortUntaggedVlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchPortUntaggedVlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_name: Optional[str] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class SwitchControllerManagedSwitchRemoteLog(dict):
    def __init__(__self__, *,
                 csv: Optional[str] = None,
                 facility: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 server: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def csv(self) -> Optional[str]:
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class SwitchControllerManagedSwitchSnmpCommunity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryV1Port":
            suggest = "query_v1_port"
        elif key == "queryV1Status":
            suggest = "query_v1_status"
        elif key == "queryV2cPort":
            suggest = "query_v2c_port"
        elif key == "queryV2cStatus":
            suggest = "query_v2c_status"
        elif key == "trapV1Lport":
            suggest = "trap_v1_lport"
        elif key == "trapV1Rport":
            suggest = "trap_v1_rport"
        elif key == "trapV1Status":
            suggest = "trap_v1_status"
        elif key == "trapV2cLport":
            suggest = "trap_v2c_lport"
        elif key == "trapV2cRport":
            suggest = "trap_v2c_rport"
        elif key == "trapV2cStatus":
            suggest = "trap_v2c_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchSnmpCommunity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchSnmpCommunity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchSnmpCommunity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 events: Optional[str] = None,
                 hosts: Optional[Sequence['outputs.SwitchControllerManagedSwitchSnmpCommunityHost']] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 query_v1_port: Optional[int] = None,
                 query_v1_status: Optional[str] = None,
                 query_v2c_port: Optional[int] = None,
                 query_v2c_status: Optional[str] = None,
                 status: Optional[str] = None,
                 trap_v1_lport: Optional[int] = None,
                 trap_v1_rport: Optional[int] = None,
                 trap_v1_status: Optional[str] = None,
                 trap_v2c_lport: Optional[int] = None,
                 trap_v2c_rport: Optional[int] = None,
                 trap_v2c_status: Optional[str] = None):
        if events is not None:
            pulumi.set(__self__, "events", events)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_port is not None:
            pulumi.set(__self__, "query_v1_port", query_v1_port)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_port is not None:
            pulumi.set(__self__, "query_v2c_port", query_v2c_port)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_lport is not None:
            pulumi.set(__self__, "trap_v1_lport", trap_v1_lport)
        if trap_v1_rport is not None:
            pulumi.set(__self__, "trap_v1_rport", trap_v1_rport)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_lport is not None:
            pulumi.set(__self__, "trap_v2c_lport", trap_v2c_lport)
        if trap_v2c_rport is not None:
            pulumi.set(__self__, "trap_v2c_rport", trap_v2c_rport)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)

    @property
    @pulumi.getter
    def events(self) -> Optional[str]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.SwitchControllerManagedSwitchSnmpCommunityHost']]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="queryV1Port")
    def query_v1_port(self) -> Optional[int]:
        return pulumi.get(self, "query_v1_port")

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[str]:
        return pulumi.get(self, "query_v1_status")

    @property
    @pulumi.getter(name="queryV2cPort")
    def query_v2c_port(self) -> Optional[int]:
        return pulumi.get(self, "query_v2c_port")

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[str]:
        return pulumi.get(self, "query_v2c_status")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trapV1Lport")
    def trap_v1_lport(self) -> Optional[int]:
        return pulumi.get(self, "trap_v1_lport")

    @property
    @pulumi.getter(name="trapV1Rport")
    def trap_v1_rport(self) -> Optional[int]:
        return pulumi.get(self, "trap_v1_rport")

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[str]:
        return pulumi.get(self, "trap_v1_status")

    @property
    @pulumi.getter(name="trapV2cLport")
    def trap_v2c_lport(self) -> Optional[int]:
        return pulumi.get(self, "trap_v2c_lport")

    @property
    @pulumi.getter(name="trapV2cRport")
    def trap_v2c_rport(self) -> Optional[int]:
        return pulumi.get(self, "trap_v2c_rport")

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[str]:
        return pulumi.get(self, "trap_v2c_status")


@pulumi.output_type
class SwitchControllerManagedSwitchSnmpCommunityHost(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class SwitchControllerManagedSwitchSnmpSysinfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactInfo":
            suggest = "contact_info"
        elif key == "engineId":
            suggest = "engine_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchSnmpSysinfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchSnmpSysinfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchSnmpSysinfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_info: Optional[str] = None,
                 description: Optional[str] = None,
                 engine_id: Optional[str] = None,
                 location: Optional[str] = None,
                 status: Optional[str] = None):
        if contact_info is not None:
            pulumi.set(__self__, "contact_info", contact_info)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="contactInfo")
    def contact_info(self) -> Optional[str]:
        return pulumi.get(self, "contact_info")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[str]:
        return pulumi.get(self, "engine_id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class SwitchControllerManagedSwitchSnmpTrapThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trapHighCpuThreshold":
            suggest = "trap_high_cpu_threshold"
        elif key == "trapLogFullThreshold":
            suggest = "trap_log_full_threshold"
        elif key == "trapLowMemoryThreshold":
            suggest = "trap_low_memory_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchSnmpTrapThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchSnmpTrapThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchSnmpTrapThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trap_high_cpu_threshold: Optional[int] = None,
                 trap_log_full_threshold: Optional[int] = None,
                 trap_low_memory_threshold: Optional[int] = None):
        if trap_high_cpu_threshold is not None:
            pulumi.set(__self__, "trap_high_cpu_threshold", trap_high_cpu_threshold)
        if trap_log_full_threshold is not None:
            pulumi.set(__self__, "trap_log_full_threshold", trap_log_full_threshold)
        if trap_low_memory_threshold is not None:
            pulumi.set(__self__, "trap_low_memory_threshold", trap_low_memory_threshold)

    @property
    @pulumi.getter(name="trapHighCpuThreshold")
    def trap_high_cpu_threshold(self) -> Optional[int]:
        return pulumi.get(self, "trap_high_cpu_threshold")

    @property
    @pulumi.getter(name="trapLogFullThreshold")
    def trap_log_full_threshold(self) -> Optional[int]:
        return pulumi.get(self, "trap_log_full_threshold")

    @property
    @pulumi.getter(name="trapLowMemoryThreshold")
    def trap_low_memory_threshold(self) -> Optional[int]:
        return pulumi.get(self, "trap_low_memory_threshold")


@pulumi.output_type
class SwitchControllerManagedSwitchSnmpUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authProto":
            suggest = "auth_proto"
        elif key == "authPwd":
            suggest = "auth_pwd"
        elif key == "privProto":
            suggest = "priv_proto"
        elif key == "privPwd":
            suggest = "priv_pwd"
        elif key == "queryPort":
            suggest = "query_port"
        elif key == "securityLevel":
            suggest = "security_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchSnmpUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchSnmpUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchSnmpUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_proto: Optional[str] = None,
                 auth_pwd: Optional[str] = None,
                 name: Optional[str] = None,
                 priv_proto: Optional[str] = None,
                 priv_pwd: Optional[str] = None,
                 queries: Optional[str] = None,
                 query_port: Optional[int] = None,
                 security_level: Optional[str] = None):
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query_port is not None:
            pulumi.set(__self__, "query_port", query_port)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[str]:
        return pulumi.get(self, "auth_proto")

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[str]:
        return pulumi.get(self, "auth_pwd")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[str]:
        return pulumi.get(self, "priv_proto")

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[str]:
        return pulumi.get(self, "priv_pwd")

    @property
    @pulumi.getter
    def queries(self) -> Optional[str]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> Optional[int]:
        return pulumi.get(self, "query_port")

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[str]:
        return pulumi.get(self, "security_level")


@pulumi.output_type
class SwitchControllerManagedSwitchStaticMac(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 mac: Optional[str] = None,
                 type: Optional[str] = None,
                 vlan: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[str]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SwitchControllerManagedSwitchStormControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localOverride":
            suggest = "local_override"
        elif key == "unknownMulticast":
            suggest = "unknown_multicast"
        elif key == "unknownUnicast":
            suggest = "unknown_unicast"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchStormControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchStormControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchStormControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 broadcast: Optional[str] = None,
                 local_override: Optional[str] = None,
                 rate: Optional[int] = None,
                 unknown_multicast: Optional[str] = None,
                 unknown_unicast: Optional[str] = None):
        if broadcast is not None:
            pulumi.set(__self__, "broadcast", broadcast)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if unknown_multicast is not None:
            pulumi.set(__self__, "unknown_multicast", unknown_multicast)
        if unknown_unicast is not None:
            pulumi.set(__self__, "unknown_unicast", unknown_unicast)

    @property
    @pulumi.getter
    def broadcast(self) -> Optional[str]:
        return pulumi.get(self, "broadcast")

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[str]:
        return pulumi.get(self, "local_override")

    @property
    @pulumi.getter
    def rate(self) -> Optional[int]:
        return pulumi.get(self, "rate")

    @property
    @pulumi.getter(name="unknownMulticast")
    def unknown_multicast(self) -> Optional[str]:
        return pulumi.get(self, "unknown_multicast")

    @property
    @pulumi.getter(name="unknownUnicast")
    def unknown_unicast(self) -> Optional[str]:
        return pulumi.get(self, "unknown_unicast")


@pulumi.output_type
class SwitchControllerManagedSwitchStpInstance(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 priority: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class SwitchControllerManagedSwitchStpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forwardTime":
            suggest = "forward_time"
        elif key == "helloTime":
            suggest = "hello_time"
        elif key == "localOverride":
            suggest = "local_override"
        elif key == "maxAge":
            suggest = "max_age"
        elif key == "maxHops":
            suggest = "max_hops"
        elif key == "pendingTimer":
            suggest = "pending_timer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchStpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchStpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchStpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forward_time: Optional[int] = None,
                 hello_time: Optional[int] = None,
                 local_override: Optional[str] = None,
                 max_age: Optional[int] = None,
                 max_hops: Optional[int] = None,
                 name: Optional[str] = None,
                 pending_timer: Optional[int] = None,
                 revision: Optional[int] = None,
                 status: Optional[str] = None):
        if forward_time is not None:
            pulumi.set(__self__, "forward_time", forward_time)
        if hello_time is not None:
            pulumi.set(__self__, "hello_time", hello_time)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if max_hops is not None:
            pulumi.set(__self__, "max_hops", max_hops)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pending_timer is not None:
            pulumi.set(__self__, "pending_timer", pending_timer)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="forwardTime")
    def forward_time(self) -> Optional[int]:
        return pulumi.get(self, "forward_time")

    @property
    @pulumi.getter(name="helloTime")
    def hello_time(self) -> Optional[int]:
        return pulumi.get(self, "hello_time")

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[str]:
        return pulumi.get(self, "local_override")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="maxHops")
    def max_hops(self) -> Optional[int]:
        return pulumi.get(self, "max_hops")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pendingTimer")
    def pending_timer(self) -> Optional[int]:
        return pulumi.get(self, "pending_timer")

    @property
    @pulumi.getter
    def revision(self) -> Optional[int]:
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class SwitchControllerManagedSwitchSwitchLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localOverride":
            suggest = "local_override"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerManagedSwitchSwitchLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerManagedSwitchSwitchLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerManagedSwitchSwitchLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_override: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[str]:
        return pulumi.get(self, "local_override")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class SwitchControllerManagedSwitchSwitchStpSettings(dict):
    def __init__(__self__, *,
                 status: Optional[str] = None):
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class SwitchControllerQosIpDscpMapMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosQueue":
            suggest = "cos_queue"
        elif key == "ipPrecedence":
            suggest = "ip_precedence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerQosIpDscpMapMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerQosIpDscpMapMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerQosIpDscpMapMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cos_queue: Optional[int] = None,
                 diffserv: Optional[str] = None,
                 ip_precedence: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if cos_queue is not None:
            pulumi.set(__self__, "cos_queue", cos_queue)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if ip_precedence is not None:
            pulumi.set(__self__, "ip_precedence", ip_precedence)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cosQueue")
    def cos_queue(self) -> Optional[int]:
        return pulumi.get(self, "cos_queue")

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[str]:
        return pulumi.get(self, "diffserv")

    @property
    @pulumi.getter(name="ipPrecedence")
    def ip_precedence(self) -> Optional[str]:
        return pulumi.get(self, "ip_precedence")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SwitchControllerQosQueuePolicyCosQueue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dropPolicy":
            suggest = "drop_policy"
        elif key == "maxRate":
            suggest = "max_rate"
        elif key == "maxRatePercent":
            suggest = "max_rate_percent"
        elif key == "minRate":
            suggest = "min_rate"
        elif key == "minRatePercent":
            suggest = "min_rate_percent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerQosQueuePolicyCosQueue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerQosQueuePolicyCosQueue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerQosQueuePolicyCosQueue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 drop_policy: Optional[str] = None,
                 ecn: Optional[str] = None,
                 max_rate: Optional[int] = None,
                 max_rate_percent: Optional[int] = None,
                 min_rate: Optional[int] = None,
                 min_rate_percent: Optional[int] = None,
                 name: Optional[str] = None,
                 weight: Optional[int] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drop_policy is not None:
            pulumi.set(__self__, "drop_policy", drop_policy)
        if ecn is not None:
            pulumi.set(__self__, "ecn", ecn)
        if max_rate is not None:
            pulumi.set(__self__, "max_rate", max_rate)
        if max_rate_percent is not None:
            pulumi.set(__self__, "max_rate_percent", max_rate_percent)
        if min_rate is not None:
            pulumi.set(__self__, "min_rate", min_rate)
        if min_rate_percent is not None:
            pulumi.set(__self__, "min_rate_percent", min_rate_percent)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dropPolicy")
    def drop_policy(self) -> Optional[str]:
        return pulumi.get(self, "drop_policy")

    @property
    @pulumi.getter
    def ecn(self) -> Optional[str]:
        return pulumi.get(self, "ecn")

    @property
    @pulumi.getter(name="maxRate")
    def max_rate(self) -> Optional[int]:
        return pulumi.get(self, "max_rate")

    @property
    @pulumi.getter(name="maxRatePercent")
    def max_rate_percent(self) -> Optional[int]:
        return pulumi.get(self, "max_rate_percent")

    @property
    @pulumi.getter(name="minRate")
    def min_rate(self) -> Optional[int]:
        return pulumi.get(self, "min_rate")

    @property
    @pulumi.getter(name="minRatePercent")
    def min_rate_percent(self) -> Optional[int]:
        return pulumi.get(self, "min_rate_percent")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class SwitchControllerQuarantineTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryId":
            suggest = "entry_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerQuarantineTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerQuarantineTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerQuarantineTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 entry_id: Optional[int] = None,
                 mac: Optional[str] = None,
                 tags: Optional[Sequence['outputs.SwitchControllerQuarantineTargetTag']] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entry_id is not None:
            pulumi.set(__self__, "entry_id", entry_id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> Optional[int]:
        return pulumi.get(self, "entry_id")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.SwitchControllerQuarantineTargetTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class SwitchControllerQuarantineTargetTag(dict):
    def __init__(__self__, *,
                 tags: Optional[str] = None):
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> Optional[str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class SwitchControllerSecurityPolicy8021XUserGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchControllerSnmpCommunityHost(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class SwitchControllerStpInstanceVlanRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerStpInstanceVlanRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerStpInstanceVlanRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerStpInstanceVlanRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_name: Optional[str] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class SwitchControllerSwitchGroupMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "switchId":
            suggest = "switch_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerSwitchGroupMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerSwitchGroupMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerSwitchGroupMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 switch_id: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[str]:
        return pulumi.get(self, "switch_id")


@pulumi.output_type
class SwitchControllerTrafficSnifferTargetIp(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 ip: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class SwitchControllerTrafficSnifferTargetMac(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 mac: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")


@pulumi.output_type
class SwitchControllerTrafficSnifferTargetPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inPorts":
            suggest = "in_ports"
        elif key == "outPorts":
            suggest = "out_ports"
        elif key == "switchId":
            suggest = "switch_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerTrafficSnifferTargetPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerTrafficSnifferTargetPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerTrafficSnifferTargetPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 in_ports: Optional[Sequence['outputs.SwitchControllerTrafficSnifferTargetPortInPort']] = None,
                 out_ports: Optional[Sequence['outputs.SwitchControllerTrafficSnifferTargetPortOutPort']] = None,
                 switch_id: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if in_ports is not None:
            pulumi.set(__self__, "in_ports", in_ports)
        if out_ports is not None:
            pulumi.set(__self__, "out_ports", out_ports)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="inPorts")
    def in_ports(self) -> Optional[Sequence['outputs.SwitchControllerTrafficSnifferTargetPortInPort']]:
        return pulumi.get(self, "in_ports")

    @property
    @pulumi.getter(name="outPorts")
    def out_ports(self) -> Optional[Sequence['outputs.SwitchControllerTrafficSnifferTargetPortOutPort']]:
        return pulumi.get(self, "out_ports")

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[str]:
        return pulumi.get(self, "switch_id")


@pulumi.output_type
class SwitchControllerTrafficSnifferTargetPortInPort(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchControllerTrafficSnifferTargetPortOutPort(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchControllerVlanPolicyAllowedVlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerVlanPolicyAllowedVlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerVlanPolicyAllowedVlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerVlanPolicyAllowedVlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_name: Optional[str] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class SwitchControllerVlanPolicyUntaggedVlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanName":
            suggest = "vlan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerVlanPolicyUntaggedVlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerVlanPolicyUntaggedVlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerVlanPolicyUntaggedVlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_name: Optional[str] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[str]:
        return pulumi.get(self, "vlan_name")


@pulumi.output_type
class SwitchControllerVlanPortalMessageOverrides(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authDisclaimerPage":
            suggest = "auth_disclaimer_page"
        elif key == "authLoginFailedPage":
            suggest = "auth_login_failed_page"
        elif key == "authLoginPage":
            suggest = "auth_login_page"
        elif key == "authRejectPage":
            suggest = "auth_reject_page"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchControllerVlanPortalMessageOverrides. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchControllerVlanPortalMessageOverrides.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchControllerVlanPortalMessageOverrides.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_disclaimer_page: Optional[str] = None,
                 auth_login_failed_page: Optional[str] = None,
                 auth_login_page: Optional[str] = None,
                 auth_reject_page: Optional[str] = None):
        if auth_disclaimer_page is not None:
            pulumi.set(__self__, "auth_disclaimer_page", auth_disclaimer_page)
        if auth_login_failed_page is not None:
            pulumi.set(__self__, "auth_login_failed_page", auth_login_failed_page)
        if auth_login_page is not None:
            pulumi.set(__self__, "auth_login_page", auth_login_page)
        if auth_reject_page is not None:
            pulumi.set(__self__, "auth_reject_page", auth_reject_page)

    @property
    @pulumi.getter(name="authDisclaimerPage")
    def auth_disclaimer_page(self) -> Optional[str]:
        return pulumi.get(self, "auth_disclaimer_page")

    @property
    @pulumi.getter(name="authLoginFailedPage")
    def auth_login_failed_page(self) -> Optional[str]:
        return pulumi.get(self, "auth_login_failed_page")

    @property
    @pulumi.getter(name="authLoginPage")
    def auth_login_page(self) -> Optional[str]:
        return pulumi.get(self, "auth_login_page")

    @property
    @pulumi.getter(name="authRejectPage")
    def auth_reject_page(self) -> Optional[str]:
        return pulumi.get(self, "auth_reject_page")


@pulumi.output_type
class SwitchControllerVlanSelectedUsergroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemAPIUserSettingTrusthost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Trusthost":
            suggest = "ipv4_trusthost"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAPIUserSettingTrusthost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAPIUserSettingTrusthost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAPIUserSettingTrusthost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_trusthost: str,
                 type: str):
        pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> str:
        return pulumi.get(self, "ipv4_trusthost")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class SystemAccprofileFwgrpPermission(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 others: Optional[str] = None,
                 policy: Optional[str] = None,
                 schedule: Optional[str] = None,
                 service: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if others is not None:
            pulumi.set(__self__, "others", others)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def others(self) -> Optional[str]:
        return pulumi.get(self, "others")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class SystemAccprofileLoggrpPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataAccess":
            suggest = "data_access"
        elif key == "reportAccess":
            suggest = "report_access"
        elif key == "threatWeight":
            suggest = "threat_weight"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAccprofileLoggrpPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAccprofileLoggrpPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAccprofileLoggrpPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional[str] = None,
                 data_access: Optional[str] = None,
                 report_access: Optional[str] = None,
                 threat_weight: Optional[str] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if data_access is not None:
            pulumi.set(__self__, "data_access", data_access)
        if report_access is not None:
            pulumi.set(__self__, "report_access", report_access)
        if threat_weight is not None:
            pulumi.set(__self__, "threat_weight", threat_weight)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="dataAccess")
    def data_access(self) -> Optional[str]:
        return pulumi.get(self, "data_access")

    @property
    @pulumi.getter(name="reportAccess")
    def report_access(self) -> Optional[str]:
        return pulumi.get(self, "report_access")

    @property
    @pulumi.getter(name="threatWeight")
    def threat_weight(self) -> Optional[str]:
        return pulumi.get(self, "threat_weight")


@pulumi.output_type
class SystemAccprofileNetgrpPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packetCapture":
            suggest = "packet_capture"
        elif key == "routeCfg":
            suggest = "route_cfg"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAccprofileNetgrpPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAccprofileNetgrpPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAccprofileNetgrpPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cfg: Optional[str] = None,
                 packet_capture: Optional[str] = None,
                 route_cfg: Optional[str] = None):
        if cfg is not None:
            pulumi.set(__self__, "cfg", cfg)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)
        if route_cfg is not None:
            pulumi.set(__self__, "route_cfg", route_cfg)

    @property
    @pulumi.getter
    def cfg(self) -> Optional[str]:
        return pulumi.get(self, "cfg")

    @property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[str]:
        return pulumi.get(self, "packet_capture")

    @property
    @pulumi.getter(name="routeCfg")
    def route_cfg(self) -> Optional[str]:
        return pulumi.get(self, "route_cfg")


@pulumi.output_type
class SystemAccprofileSysgrpPermission(dict):
    def __init__(__self__, *,
                 admin: Optional[str] = None,
                 cfg: Optional[str] = None,
                 mnt: Optional[str] = None,
                 upd: Optional[str] = None):
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if cfg is not None:
            pulumi.set(__self__, "cfg", cfg)
        if mnt is not None:
            pulumi.set(__self__, "mnt", mnt)
        if upd is not None:
            pulumi.set(__self__, "upd", upd)

    @property
    @pulumi.getter
    def admin(self) -> Optional[str]:
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def cfg(self) -> Optional[str]:
        return pulumi.get(self, "cfg")

    @property
    @pulumi.getter
    def mnt(self) -> Optional[str]:
        return pulumi.get(self, "mnt")

    @property
    @pulumi.getter
    def upd(self) -> Optional[str]:
        return pulumi.get(self, "upd")


@pulumi.output_type
class SystemAccprofileUtmgrpPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationControl":
            suggest = "application_control"
        elif key == "dataLeakPrevention":
            suggest = "data_leak_prevention"
        elif key == "dataLossPrevention":
            suggest = "data_loss_prevention"
        elif key == "endpointControl":
            suggest = "endpoint_control"
        elif key == "fileFilter":
            suggest = "file_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAccprofileUtmgrpPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAccprofileUtmgrpPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAccprofileUtmgrpPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 antivirus: Optional[str] = None,
                 application_control: Optional[str] = None,
                 data_leak_prevention: Optional[str] = None,
                 data_loss_prevention: Optional[str] = None,
                 dnsfilter: Optional[str] = None,
                 emailfilter: Optional[str] = None,
                 endpoint_control: Optional[str] = None,
                 file_filter: Optional[str] = None,
                 icap: Optional[str] = None,
                 ips: Optional[str] = None,
                 spamfilter: Optional[str] = None,
                 videofilter: Optional[str] = None,
                 voip: Optional[str] = None,
                 waf: Optional[str] = None,
                 webfilter: Optional[str] = None):
        if antivirus is not None:
            pulumi.set(__self__, "antivirus", antivirus)
        if application_control is not None:
            pulumi.set(__self__, "application_control", application_control)
        if data_leak_prevention is not None:
            pulumi.set(__self__, "data_leak_prevention", data_leak_prevention)
        if data_loss_prevention is not None:
            pulumi.set(__self__, "data_loss_prevention", data_loss_prevention)
        if dnsfilter is not None:
            pulumi.set(__self__, "dnsfilter", dnsfilter)
        if emailfilter is not None:
            pulumi.set(__self__, "emailfilter", emailfilter)
        if endpoint_control is not None:
            pulumi.set(__self__, "endpoint_control", endpoint_control)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if icap is not None:
            pulumi.set(__self__, "icap", icap)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if spamfilter is not None:
            pulumi.set(__self__, "spamfilter", spamfilter)
        if videofilter is not None:
            pulumi.set(__self__, "videofilter", videofilter)
        if voip is not None:
            pulumi.set(__self__, "voip", voip)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if webfilter is not None:
            pulumi.set(__self__, "webfilter", webfilter)

    @property
    @pulumi.getter
    def antivirus(self) -> Optional[str]:
        return pulumi.get(self, "antivirus")

    @property
    @pulumi.getter(name="applicationControl")
    def application_control(self) -> Optional[str]:
        return pulumi.get(self, "application_control")

    @property
    @pulumi.getter(name="dataLeakPrevention")
    def data_leak_prevention(self) -> Optional[str]:
        return pulumi.get(self, "data_leak_prevention")

    @property
    @pulumi.getter(name="dataLossPrevention")
    def data_loss_prevention(self) -> Optional[str]:
        return pulumi.get(self, "data_loss_prevention")

    @property
    @pulumi.getter
    def dnsfilter(self) -> Optional[str]:
        return pulumi.get(self, "dnsfilter")

    @property
    @pulumi.getter
    def emailfilter(self) -> Optional[str]:
        return pulumi.get(self, "emailfilter")

    @property
    @pulumi.getter(name="endpointControl")
    def endpoint_control(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_control")

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[str]:
        return pulumi.get(self, "file_filter")

    @property
    @pulumi.getter
    def icap(self) -> Optional[str]:
        return pulumi.get(self, "icap")

    @property
    @pulumi.getter
    def ips(self) -> Optional[str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def spamfilter(self) -> Optional[str]:
        return pulumi.get(self, "spamfilter")

    @property
    @pulumi.getter
    def videofilter(self) -> Optional[str]:
        return pulumi.get(self, "videofilter")

    @property
    @pulumi.getter
    def voip(self) -> Optional[str]:
        return pulumi.get(self, "voip")

    @property
    @pulumi.getter
    def waf(self) -> Optional[str]:
        return pulumi.get(self, "waf")

    @property
    @pulumi.getter
    def webfilter(self) -> Optional[str]:
        return pulumi.get(self, "webfilter")


@pulumi.output_type
class SystemAcmeAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caUrl":
            suggest = "ca_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAcmeAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAcmeAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAcmeAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_url: Optional[str] = None,
                 email: Optional[str] = None,
                 id: Optional[str] = None,
                 privatekey: Optional[str] = None,
                 status: Optional[str] = None,
                 url: Optional[str] = None):
        if ca_url is not None:
            pulumi.set(__self__, "ca_url", ca_url)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if privatekey is not None:
            pulumi.set(__self__, "privatekey", privatekey)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="caUrl")
    def ca_url(self) -> Optional[str]:
        return pulumi.get(self, "ca_url")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def privatekey(self) -> Optional[str]:
        return pulumi.get(self, "privatekey")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class SystemAcmeInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAcmeInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAcmeInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAcmeInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SystemAdminGuestUsergroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemAdminGuiDashboard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "layoutType":
            suggest = "layout_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAdminGuiDashboard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAdminGuiDashboard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAdminGuiDashboard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Optional[int] = None,
                 id: Optional[int] = None,
                 layout_type: Optional[str] = None,
                 name: Optional[str] = None,
                 scope: Optional[str] = None,
                 widgets: Optional[Sequence['outputs.SystemAdminGuiDashboardWidget']] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if layout_type is not None:
            pulumi.set(__self__, "layout_type", layout_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if widgets is not None:
            pulumi.set(__self__, "widgets", widgets)

    @property
    @pulumi.getter
    def columns(self) -> Optional[int]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="layoutType")
    def layout_type(self) -> Optional[str]:
        return pulumi.get(self, "layout_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def widgets(self) -> Optional[Sequence['outputs.SystemAdminGuiDashboardWidget']]:
        return pulumi.get(self, "widgets")


@pulumi.output_type
class SystemAdminGuiDashboardWidget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fabricDevice":
            suggest = "fabric_device"
        elif key == "reportBy":
            suggest = "report_by"
        elif key == "sortBy":
            suggest = "sort_by"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAdminGuiDashboardWidget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAdminGuiDashboardWidget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAdminGuiDashboardWidget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fabric_device: Optional[str] = None,
                 filters: Optional[Sequence['outputs.SystemAdminGuiDashboardWidgetFilter']] = None,
                 height: Optional[int] = None,
                 id: Optional[int] = None,
                 industry: Optional[str] = None,
                 interface: Optional[str] = None,
                 region: Optional[str] = None,
                 report_by: Optional[str] = None,
                 sort_by: Optional[str] = None,
                 timeframe: Optional[str] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None,
                 visualization: Optional[str] = None,
                 width: Optional[int] = None,
                 x_pos: Optional[int] = None,
                 y_pos: Optional[int] = None):
        if fabric_device is not None:
            pulumi.set(__self__, "fabric_device", fabric_device)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if industry is not None:
            pulumi.set(__self__, "industry", industry)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if report_by is not None:
            pulumi.set(__self__, "report_by", report_by)
        if sort_by is not None:
            pulumi.set(__self__, "sort_by", sort_by)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if visualization is not None:
            pulumi.set(__self__, "visualization", visualization)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="fabricDevice")
    def fabric_device(self) -> Optional[str]:
        return pulumi.get(self, "fabric_device")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.SystemAdminGuiDashboardWidgetFilter']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def industry(self) -> Optional[str]:
        return pulumi.get(self, "industry")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="reportBy")
    def report_by(self) -> Optional[str]:
        return pulumi.get(self, "report_by")

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[str]:
        return pulumi.get(self, "sort_by")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        return pulumi.get(self, "timeframe")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def visualization(self) -> Optional[str]:
        return pulumi.get(self, "visualization")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[int]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[int]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class SystemAdminGuiDashboardWidgetFilter(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SystemAdminGuiGlobalMenuFavorite(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemAdminGuiNewFeatureAcknowledge(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemAdminGuiVdomMenuFavorite(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemAdminLoginTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastFailedLogin":
            suggest = "last_failed_login"
        elif key == "lastLogin":
            suggest = "last_login"
        elif key == "usrName":
            suggest = "usr_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAdminLoginTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAdminLoginTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAdminLoginTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_failed_login: Optional[str] = None,
                 last_login: Optional[str] = None,
                 usr_name: Optional[str] = None):
        if last_failed_login is not None:
            pulumi.set(__self__, "last_failed_login", last_failed_login)
        if last_login is not None:
            pulumi.set(__self__, "last_login", last_login)
        if usr_name is not None:
            pulumi.set(__self__, "usr_name", usr_name)

    @property
    @pulumi.getter(name="lastFailedLogin")
    def last_failed_login(self) -> Optional[str]:
        return pulumi.get(self, "last_failed_login")

    @property
    @pulumi.getter(name="lastLogin")
    def last_login(self) -> Optional[str]:
        return pulumi.get(self, "last_login")

    @property
    @pulumi.getter(name="usrName")
    def usr_name(self) -> Optional[str]:
        return pulumi.get(self, "usr_name")


@pulumi.output_type
class SystemAdminVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemAlarmGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminAuthFailureThreshold":
            suggest = "admin_auth_failure_threshold"
        elif key == "adminAuthLockoutThreshold":
            suggest = "admin_auth_lockout_threshold"
        elif key == "decryptionFailureThreshold":
            suggest = "decryption_failure_threshold"
        elif key == "encryptionFailureThreshold":
            suggest = "encryption_failure_threshold"
        elif key == "fwPolicyId":
            suggest = "fw_policy_id"
        elif key == "fwPolicyIdThreshold":
            suggest = "fw_policy_id_threshold"
        elif key == "fwPolicyViolations":
            suggest = "fw_policy_violations"
        elif key == "logFullWarningThreshold":
            suggest = "log_full_warning_threshold"
        elif key == "replayAttemptThreshold":
            suggest = "replay_attempt_threshold"
        elif key == "selfTestFailureThreshold":
            suggest = "self_test_failure_threshold"
        elif key == "userAuthFailureThreshold":
            suggest = "user_auth_failure_threshold"
        elif key == "userAuthLockoutThreshold":
            suggest = "user_auth_lockout_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAlarmGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAlarmGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAlarmGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_auth_failure_threshold: Optional[int] = None,
                 admin_auth_lockout_threshold: Optional[int] = None,
                 decryption_failure_threshold: Optional[int] = None,
                 encryption_failure_threshold: Optional[int] = None,
                 fw_policy_id: Optional[int] = None,
                 fw_policy_id_threshold: Optional[int] = None,
                 fw_policy_violations: Optional[Sequence['outputs.SystemAlarmGroupFwPolicyViolation']] = None,
                 id: Optional[int] = None,
                 log_full_warning_threshold: Optional[int] = None,
                 period: Optional[int] = None,
                 replay_attempt_threshold: Optional[int] = None,
                 self_test_failure_threshold: Optional[int] = None,
                 user_auth_failure_threshold: Optional[int] = None,
                 user_auth_lockout_threshold: Optional[int] = None):
        if admin_auth_failure_threshold is not None:
            pulumi.set(__self__, "admin_auth_failure_threshold", admin_auth_failure_threshold)
        if admin_auth_lockout_threshold is not None:
            pulumi.set(__self__, "admin_auth_lockout_threshold", admin_auth_lockout_threshold)
        if decryption_failure_threshold is not None:
            pulumi.set(__self__, "decryption_failure_threshold", decryption_failure_threshold)
        if encryption_failure_threshold is not None:
            pulumi.set(__self__, "encryption_failure_threshold", encryption_failure_threshold)
        if fw_policy_id is not None:
            pulumi.set(__self__, "fw_policy_id", fw_policy_id)
        if fw_policy_id_threshold is not None:
            pulumi.set(__self__, "fw_policy_id_threshold", fw_policy_id_threshold)
        if fw_policy_violations is not None:
            pulumi.set(__self__, "fw_policy_violations", fw_policy_violations)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log_full_warning_threshold is not None:
            pulumi.set(__self__, "log_full_warning_threshold", log_full_warning_threshold)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if replay_attempt_threshold is not None:
            pulumi.set(__self__, "replay_attempt_threshold", replay_attempt_threshold)
        if self_test_failure_threshold is not None:
            pulumi.set(__self__, "self_test_failure_threshold", self_test_failure_threshold)
        if user_auth_failure_threshold is not None:
            pulumi.set(__self__, "user_auth_failure_threshold", user_auth_failure_threshold)
        if user_auth_lockout_threshold is not None:
            pulumi.set(__self__, "user_auth_lockout_threshold", user_auth_lockout_threshold)

    @property
    @pulumi.getter(name="adminAuthFailureThreshold")
    def admin_auth_failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "admin_auth_failure_threshold")

    @property
    @pulumi.getter(name="adminAuthLockoutThreshold")
    def admin_auth_lockout_threshold(self) -> Optional[int]:
        return pulumi.get(self, "admin_auth_lockout_threshold")

    @property
    @pulumi.getter(name="decryptionFailureThreshold")
    def decryption_failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "decryption_failure_threshold")

    @property
    @pulumi.getter(name="encryptionFailureThreshold")
    def encryption_failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "encryption_failure_threshold")

    @property
    @pulumi.getter(name="fwPolicyId")
    def fw_policy_id(self) -> Optional[int]:
        return pulumi.get(self, "fw_policy_id")

    @property
    @pulumi.getter(name="fwPolicyIdThreshold")
    def fw_policy_id_threshold(self) -> Optional[int]:
        return pulumi.get(self, "fw_policy_id_threshold")

    @property
    @pulumi.getter(name="fwPolicyViolations")
    def fw_policy_violations(self) -> Optional[Sequence['outputs.SystemAlarmGroupFwPolicyViolation']]:
        return pulumi.get(self, "fw_policy_violations")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logFullWarningThreshold")
    def log_full_warning_threshold(self) -> Optional[int]:
        return pulumi.get(self, "log_full_warning_threshold")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="replayAttemptThreshold")
    def replay_attempt_threshold(self) -> Optional[int]:
        return pulumi.get(self, "replay_attempt_threshold")

    @property
    @pulumi.getter(name="selfTestFailureThreshold")
    def self_test_failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "self_test_failure_threshold")

    @property
    @pulumi.getter(name="userAuthFailureThreshold")
    def user_auth_failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "user_auth_failure_threshold")

    @property
    @pulumi.getter(name="userAuthLockoutThreshold")
    def user_auth_lockout_threshold(self) -> Optional[int]:
        return pulumi.get(self, "user_auth_lockout_threshold")


@pulumi.output_type
class SystemAlarmGroupFwPolicyViolation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstIp":
            suggest = "dst_ip"
        elif key == "dstPort":
            suggest = "dst_port"
        elif key == "srcIp":
            suggest = "src_ip"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAlarmGroupFwPolicyViolation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAlarmGroupFwPolicyViolation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAlarmGroupFwPolicyViolation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_ip: Optional[str] = None,
                 dst_port: Optional[int] = None,
                 id: Optional[int] = None,
                 src_ip: Optional[str] = None,
                 src_port: Optional[int] = None,
                 threshold: Optional[int] = None):
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[str]:
        return pulumi.get(self, "dst_ip")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[int]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[str]:
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[int]:
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class SystemApiUserTrusthost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Trusthost":
            suggest = "ipv4_trusthost"
        elif key == "ipv6Trusthost":
            suggest = "ipv6_trusthost"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemApiUserTrusthost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemApiUserTrusthost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemApiUserTrusthost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ipv4_trusthost: Optional[str] = None,
                 ipv6_trusthost: Optional[str] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv4_trusthost is not None:
            pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        if ipv6_trusthost is not None:
            pulumi.set(__self__, "ipv6_trusthost", ipv6_trusthost)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_trusthost")

    @property
    @pulumi.getter(name="ipv6Trusthost")
    def ipv6_trusthost(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_trusthost")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SystemApiUserVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemAutomationActionEmailTo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemAutomationActionHeader(dict):
    def __init__(__self__, *,
                 header: Optional[str] = None):
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")


@pulumi.output_type
class SystemAutomationActionHttpHeader(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SystemAutomationActionSdnConnector(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemAutomationDestinationDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemAutomationStitchAction(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 delay: Optional[int] = None,
                 id: Optional[int] = None,
                 required: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def delay(self) -> Optional[int]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def required(self) -> Optional[str]:
        return pulumi.get(self, "required")


@pulumi.output_type
class SystemAutomationStitchDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemAutomationTriggerField(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SystemAutomationTriggerLogidBlock(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemAutomationTriggerVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemCentralManagementServerList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "serverAddress":
            suggest = "server_address"
        elif key == "serverAddress6":
            suggest = "server_address6"
        elif key == "serverType":
            suggest = "server_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemCentralManagementServerList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemCentralManagementServerList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemCentralManagementServerList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_type: Optional[str] = None,
                 fqdn: Optional[str] = None,
                 id: Optional[int] = None,
                 server_address: Optional[str] = None,
                 server_address6: Optional[str] = None,
                 server_type: Optional[str] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_address is not None:
            pulumi.set(__self__, "server_address", server_address)
        if server_address6 is not None:
            pulumi.set(__self__, "server_address6", server_address6)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> Optional[str]:
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="serverAddress6")
    def server_address6(self) -> Optional[str]:
        return pulumi.get(self, "server_address6")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[str]:
        return pulumi.get(self, "server_type")


@pulumi.output_type
class SystemClusterSyncDownIntfsBeforeSessSync(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemClusterSyncSessionSyncFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customServices":
            suggest = "custom_services"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemClusterSyncSessionSyncFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemClusterSyncSessionSyncFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemClusterSyncSessionSyncFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_services: Optional[Sequence['outputs.SystemClusterSyncSessionSyncFilterCustomService']] = None,
                 dstaddr: Optional[str] = None,
                 dstaddr6: Optional[str] = None,
                 dstintf: Optional[str] = None,
                 srcaddr: Optional[str] = None,
                 srcaddr6: Optional[str] = None,
                 srcintf: Optional[str] = None):
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstaddr6 is not None:
            pulumi.set(__self__, "dstaddr6", dstaddr6)
        if dstintf is not None:
            pulumi.set(__self__, "dstintf", dstintf)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcaddr6 is not None:
            pulumi.set(__self__, "srcaddr6", srcaddr6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.SystemClusterSyncSessionSyncFilterCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[str]:
        return pulumi.get(self, "dstaddr")

    @property
    @pulumi.getter
    def dstaddr6(self) -> Optional[str]:
        return pulumi.get(self, "dstaddr6")

    @property
    @pulumi.getter
    def dstintf(self) -> Optional[str]:
        return pulumi.get(self, "dstintf")

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[str]:
        return pulumi.get(self, "srcaddr")

    @property
    @pulumi.getter
    def srcaddr6(self) -> Optional[str]:
        return pulumi.get(self, "srcaddr6")

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[str]:
        return pulumi.get(self, "srcintf")


@pulumi.output_type
class SystemClusterSyncSessionSyncFilterCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstPortRange":
            suggest = "dst_port_range"
        elif key == "srcPortRange":
            suggest = "src_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemClusterSyncSessionSyncFilterCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemClusterSyncSessionSyncFilterCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemClusterSyncSessionSyncFilterCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_port_range: Optional[str] = None,
                 id: Optional[int] = None,
                 src_port_range: Optional[str] = None):
        if dst_port_range is not None:
            pulumi.set(__self__, "dst_port_range", dst_port_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_port_range is not None:
            pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> Optional[str]:
        return pulumi.get(self, "dst_port_range")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> Optional[str]:
        return pulumi.get(self, "src_port_range")


@pulumi.output_type
class SystemClusterSyncSyncvd(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemCsfFabricConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationWriteAccess":
            suggest = "configuration_write_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemCsfFabricConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemCsfFabricConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemCsfFabricConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accprofile: Optional[str] = None,
                 configuration_write_access: Optional[str] = None,
                 serial: Optional[str] = None,
                 vdoms: Optional[Sequence['outputs.SystemCsfFabricConnectorVdom']] = None):
        if accprofile is not None:
            pulumi.set(__self__, "accprofile", accprofile)
        if configuration_write_access is not None:
            pulumi.set(__self__, "configuration_write_access", configuration_write_access)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def accprofile(self) -> Optional[str]:
        return pulumi.get(self, "accprofile")

    @property
    @pulumi.getter(name="configurationWriteAccess")
    def configuration_write_access(self) -> Optional[str]:
        return pulumi.get(self, "configuration_write_access")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[Sequence['outputs.SystemCsfFabricConnectorVdom']]:
        return pulumi.get(self, "vdoms")


@pulumi.output_type
class SystemCsfFabricConnectorVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemCsfFabricDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "deviceIp":
            suggest = "device_ip"
        elif key == "deviceType":
            suggest = "device_type"
        elif key == "httpsPort":
            suggest = "https_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemCsfFabricDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemCsfFabricDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemCsfFabricDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 device_ip: Optional[str] = None,
                 device_type: Optional[str] = None,
                 https_port: Optional[int] = None,
                 login: Optional[str] = None,
                 name: Optional[str] = None,
                 password: Optional[str] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if device_ip is not None:
            pulumi.set(__self__, "device_ip", device_ip)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="deviceIp")
    def device_ip(self) -> Optional[str]:
        return pulumi.get(self, "device_ip")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[str]:
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter
    def login(self) -> Optional[str]:
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")


@pulumi.output_type
class SystemCsfTrustedList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationType":
            suggest = "authorization_type"
        elif key == "downstreamAuthorization":
            suggest = "downstream_authorization"
        elif key == "haMembers":
            suggest = "ha_members"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemCsfTrustedList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemCsfTrustedList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemCsfTrustedList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 authorization_type: Optional[str] = None,
                 certificate: Optional[str] = None,
                 downstream_authorization: Optional[str] = None,
                 ha_members: Optional[str] = None,
                 index: Optional[int] = None,
                 name: Optional[str] = None,
                 serial: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if authorization_type is not None:
            pulumi.set(__self__, "authorization_type", authorization_type)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if downstream_authorization is not None:
            pulumi.set(__self__, "downstream_authorization", downstream_authorization)
        if ha_members is not None:
            pulumi.set(__self__, "ha_members", ha_members)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> Optional[str]:
        return pulumi.get(self, "authorization_type")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="downstreamAuthorization")
    def downstream_authorization(self) -> Optional[str]:
        return pulumi.get(self, "downstream_authorization")

    @property
    @pulumi.getter(name="haMembers")
    def ha_members(self) -> Optional[str]:
        return pulumi.get(self, "ha_members")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        return pulumi.get(self, "serial")


@pulumi.output_type
class SystemDdnsDdnsServerAddr(dict):
    def __init__(__self__, *,
                 addr: Optional[str] = None):
        if addr is not None:
            pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> Optional[str]:
        return pulumi.get(self, "addr")


@pulumi.output_type
class SystemDdnsMonitorInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDdnsMonitorInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDdnsMonitorInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDdnsMonitorInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SystemDhcp6ServerIpRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcp6ServerIpRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcp6ServerIpRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcp6ServerIpRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class SystemDhcp6ServerPrefixRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPrefix":
            suggest = "end_prefix"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "startPrefix":
            suggest = "start_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcp6ServerPrefixRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcp6ServerPrefixRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcp6ServerPrefixRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_prefix: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix_length: Optional[int] = None,
                 start_prefix: Optional[str] = None):
        if end_prefix is not None:
            pulumi.set(__self__, "end_prefix", end_prefix)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if start_prefix is not None:
            pulumi.set(__self__, "start_prefix", start_prefix)

    @property
    @pulumi.getter(name="endPrefix")
    def end_prefix(self) -> Optional[str]:
        return pulumi.get(self, "end_prefix")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="startPrefix")
    def start_prefix(self) -> Optional[str]:
        return pulumi.get(self, "start_prefix")


@pulumi.output_type
class SystemDhcpServerExcludeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "leaseTime":
            suggest = "lease_time"
        elif key == "startIp":
            suggest = "start_ip"
        elif key == "uciMatch":
            suggest = "uci_match"
        elif key == "uciStrings":
            suggest = "uci_strings"
        elif key == "vciMatch":
            suggest = "vci_match"
        elif key == "vciStrings":
            suggest = "vci_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerExcludeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerExcludeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerExcludeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 lease_time: Optional[int] = None,
                 start_ip: Optional[str] = None,
                 uci_match: Optional[str] = None,
                 uci_strings: Optional[Sequence['outputs.SystemDhcpServerExcludeRangeUciString']] = None,
                 vci_match: Optional[str] = None,
                 vci_strings: Optional[Sequence['outputs.SystemDhcpServerExcludeRangeVciString']] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if uci_match is not None:
            pulumi.set(__self__, "uci_match", uci_match)
        if uci_strings is not None:
            pulumi.set(__self__, "uci_strings", uci_strings)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[int]:
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> Optional[str]:
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Optional[Sequence['outputs.SystemDhcpServerExcludeRangeUciString']]:
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[str]:
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[Sequence['outputs.SystemDhcpServerExcludeRangeVciString']]:
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class SystemDhcpServerExcludeRangeUciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uciString":
            suggest = "uci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerExcludeRangeUciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerExcludeRangeUciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerExcludeRangeUciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uci_string: Optional[str] = None):
        if uci_string is not None:
            pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> Optional[str]:
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class SystemDhcpServerExcludeRangeVciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vciString":
            suggest = "vci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerExcludeRangeVciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerExcludeRangeVciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerExcludeRangeVciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vci_string: Optional[str] = None):
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[str]:
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class SystemDhcpServerIpRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "leaseTime":
            suggest = "lease_time"
        elif key == "startIp":
            suggest = "start_ip"
        elif key == "uciMatch":
            suggest = "uci_match"
        elif key == "uciStrings":
            suggest = "uci_strings"
        elif key == "vciMatch":
            suggest = "vci_match"
        elif key == "vciStrings":
            suggest = "vci_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerIpRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerIpRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerIpRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 lease_time: Optional[int] = None,
                 start_ip: Optional[str] = None,
                 uci_match: Optional[str] = None,
                 uci_strings: Optional[Sequence['outputs.SystemDhcpServerIpRangeUciString']] = None,
                 vci_match: Optional[str] = None,
                 vci_strings: Optional[Sequence['outputs.SystemDhcpServerIpRangeVciString']] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if uci_match is not None:
            pulumi.set(__self__, "uci_match", uci_match)
        if uci_strings is not None:
            pulumi.set(__self__, "uci_strings", uci_strings)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[int]:
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> Optional[str]:
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Optional[Sequence['outputs.SystemDhcpServerIpRangeUciString']]:
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[str]:
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[Sequence['outputs.SystemDhcpServerIpRangeVciString']]:
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class SystemDhcpServerIpRangeUciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uciString":
            suggest = "uci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerIpRangeUciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerIpRangeUciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerIpRangeUciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uci_string: Optional[str] = None):
        if uci_string is not None:
            pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> Optional[str]:
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class SystemDhcpServerIpRangeVciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vciString":
            suggest = "vci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerIpRangeVciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerIpRangeVciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerIpRangeVciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vci_string: Optional[str] = None):
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[str]:
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class SystemDhcpServerOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uciMatch":
            suggest = "uci_match"
        elif key == "uciStrings":
            suggest = "uci_strings"
        elif key == "vciMatch":
            suggest = "vci_match"
        elif key == "vciStrings":
            suggest = "vci_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 type: Optional[str] = None,
                 uci_match: Optional[str] = None,
                 uci_strings: Optional[Sequence['outputs.SystemDhcpServerOptionUciString']] = None,
                 value: Optional[str] = None,
                 vci_match: Optional[str] = None,
                 vci_strings: Optional[Sequence['outputs.SystemDhcpServerOptionVciString']] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uci_match is not None:
            pulumi.set(__self__, "uci_match", uci_match)
        if uci_strings is not None:
            pulumi.set(__self__, "uci_strings", uci_strings)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> Optional[str]:
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Optional[Sequence['outputs.SystemDhcpServerOptionUciString']]:
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[str]:
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[Sequence['outputs.SystemDhcpServerOptionVciString']]:
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class SystemDhcpServerOptionUciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uciString":
            suggest = "uci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerOptionUciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerOptionUciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerOptionUciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uci_string: Optional[str] = None):
        if uci_string is not None:
            pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> Optional[str]:
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class SystemDhcpServerOptionVciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vciString":
            suggest = "vci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerOptionVciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerOptionVciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerOptionVciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vci_string: Optional[str] = None):
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[str]:
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class SystemDhcpServerReservedAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "circuitId":
            suggest = "circuit_id"
        elif key == "circuitIdType":
            suggest = "circuit_id_type"
        elif key == "remoteId":
            suggest = "remote_id"
        elif key == "remoteIdType":
            suggest = "remote_id_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerReservedAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerReservedAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerReservedAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 circuit_id: Optional[str] = None,
                 circuit_id_type: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 mac: Optional[str] = None,
                 remote_id: Optional[str] = None,
                 remote_id_type: Optional[str] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if circuit_id_type is not None:
            pulumi.set(__self__, "circuit_id_type", circuit_id_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if remote_id is not None:
            pulumi.set(__self__, "remote_id", remote_id)
        if remote_id_type is not None:
            pulumi.set(__self__, "remote_id_type", remote_id_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[str]:
        return pulumi.get(self, "circuit_id")

    @property
    @pulumi.getter(name="circuitIdType")
    def circuit_id_type(self) -> Optional[str]:
        return pulumi.get(self, "circuit_id_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> Optional[str]:
        return pulumi.get(self, "remote_id")

    @property
    @pulumi.getter(name="remoteIdType")
    def remote_id_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_id_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SystemDhcpServerTftpServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tftpServer":
            suggest = "tftp_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerTftpServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerTftpServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerTftpServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tftp_server: Optional[str] = None):
        if tftp_server is not None:
            pulumi.set(__self__, "tftp_server", tftp_server)

    @property
    @pulumi.getter(name="tftpServer")
    def tftp_server(self) -> Optional[str]:
        return pulumi.get(self, "tftp_server")


@pulumi.output_type
class SystemDhcpServerVciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vciString":
            suggest = "vci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDhcpServerVciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDhcpServerVciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDhcpServerVciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vci_string: Optional[str] = None):
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[str]:
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class SystemDnsDatabaseDnsEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canonicalName":
            suggest = "canonical_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDnsDatabaseDnsEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDnsDatabaseDnsEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDnsDatabaseDnsEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canonical_name: Optional[str] = None,
                 hostname: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 ipv6: Optional[str] = None,
                 preference: Optional[int] = None,
                 status: Optional[str] = None,
                 ttl: Optional[int] = None,
                 type: Optional[str] = None):
        if canonical_name is not None:
            pulumi.set(__self__, "canonical_name", canonical_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="canonicalName")
    def canonical_name(self) -> Optional[str]:
        return pulumi.get(self, "canonical_name")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[str]:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SystemDnsDomain(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")


@pulumi.output_type
class SystemDnsServerHostname(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class SystemEvpnExportRt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemEvpnExportRt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemEvpnExportRt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemEvpnExportRt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[str] = None):
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[str]:
        return pulumi.get(self, "route_target")


@pulumi.output_type
class SystemEvpnImportRt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemEvpnImportRt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemEvpnImportRt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemEvpnImportRt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[str] = None):
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[str]:
        return pulumi.get(self, "route_target")


@pulumi.output_type
class SystemFabricVpnAdvertisedSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgpNetwork":
            suggest = "bgp_network"
        elif key == "firewallAddress":
            suggest = "firewall_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemFabricVpnAdvertisedSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemFabricVpnAdvertisedSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemFabricVpnAdvertisedSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access: Optional[str] = None,
                 bgp_network: Optional[int] = None,
                 firewall_address: Optional[str] = None,
                 id: Optional[int] = None,
                 policies: Optional[int] = None,
                 prefix: Optional[str] = None):
        if access is not None:
            pulumi.set(__self__, "access", access)
        if bgp_network is not None:
            pulumi.set(__self__, "bgp_network", bgp_network)
        if firewall_address is not None:
            pulumi.set(__self__, "firewall_address", firewall_address)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="bgpNetwork")
    def bgp_network(self) -> Optional[int]:
        return pulumi.get(self, "bgp_network")

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> Optional[str]:
        return pulumi.get(self, "firewall_address")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def policies(self) -> Optional[int]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class SystemFabricVpnOverlay(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgpNeighbor":
            suggest = "bgp_neighbor"
        elif key == "bgpNeighborGroup":
            suggest = "bgp_neighbor_group"
        elif key == "bgpNeighborRange":
            suggest = "bgp_neighbor_range"
        elif key == "bgpNetwork":
            suggest = "bgp_network"
        elif key == "ipsecPhase1":
            suggest = "ipsec_phase1"
        elif key == "overlayPolicy":
            suggest = "overlay_policy"
        elif key == "overlayTunnelBlock":
            suggest = "overlay_tunnel_block"
        elif key == "remoteGw":
            suggest = "remote_gw"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "sdwanMember":
            suggest = "sdwan_member"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemFabricVpnOverlay. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemFabricVpnOverlay.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemFabricVpnOverlay.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bgp_neighbor: Optional[str] = None,
                 bgp_neighbor_group: Optional[str] = None,
                 bgp_neighbor_range: Optional[int] = None,
                 bgp_network: Optional[int] = None,
                 interface: Optional[str] = None,
                 ipsec_phase1: Optional[str] = None,
                 name: Optional[str] = None,
                 overlay_policy: Optional[int] = None,
                 overlay_tunnel_block: Optional[str] = None,
                 remote_gw: Optional[str] = None,
                 route_policy: Optional[int] = None,
                 sdwan_member: Optional[int] = None):
        if bgp_neighbor is not None:
            pulumi.set(__self__, "bgp_neighbor", bgp_neighbor)
        if bgp_neighbor_group is not None:
            pulumi.set(__self__, "bgp_neighbor_group", bgp_neighbor_group)
        if bgp_neighbor_range is not None:
            pulumi.set(__self__, "bgp_neighbor_range", bgp_neighbor_range)
        if bgp_network is not None:
            pulumi.set(__self__, "bgp_network", bgp_network)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipsec_phase1 is not None:
            pulumi.set(__self__, "ipsec_phase1", ipsec_phase1)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlay_policy is not None:
            pulumi.set(__self__, "overlay_policy", overlay_policy)
        if overlay_tunnel_block is not None:
            pulumi.set(__self__, "overlay_tunnel_block", overlay_tunnel_block)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if sdwan_member is not None:
            pulumi.set(__self__, "sdwan_member", sdwan_member)

    @property
    @pulumi.getter(name="bgpNeighbor")
    def bgp_neighbor(self) -> Optional[str]:
        return pulumi.get(self, "bgp_neighbor")

    @property
    @pulumi.getter(name="bgpNeighborGroup")
    def bgp_neighbor_group(self) -> Optional[str]:
        return pulumi.get(self, "bgp_neighbor_group")

    @property
    @pulumi.getter(name="bgpNeighborRange")
    def bgp_neighbor_range(self) -> Optional[int]:
        return pulumi.get(self, "bgp_neighbor_range")

    @property
    @pulumi.getter(name="bgpNetwork")
    def bgp_network(self) -> Optional[int]:
        return pulumi.get(self, "bgp_network")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipsecPhase1")
    def ipsec_phase1(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_phase1")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overlayPolicy")
    def overlay_policy(self) -> Optional[int]:
        return pulumi.get(self, "overlay_policy")

    @property
    @pulumi.getter(name="overlayTunnelBlock")
    def overlay_tunnel_block(self) -> Optional[str]:
        return pulumi.get(self, "overlay_tunnel_block")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[str]:
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[int]:
        return pulumi.get(self, "route_policy")

    @property
    @pulumi.getter(name="sdwanMember")
    def sdwan_member(self) -> Optional[int]:
        return pulumi.get(self, "sdwan_member")


@pulumi.output_type
class SystemFederatedUpgradeNodeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinatingFortigate":
            suggest = "coordinating_fortigate"
        elif key == "deviceType":
            suggest = "device_type"
        elif key == "maximumMinutes":
            suggest = "maximum_minutes"
        elif key == "setupTime":
            suggest = "setup_time"
        elif key == "upgradePath":
            suggest = "upgrade_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemFederatedUpgradeNodeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemFederatedUpgradeNodeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemFederatedUpgradeNodeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coordinating_fortigate: Optional[str] = None,
                 device_type: Optional[str] = None,
                 maximum_minutes: Optional[int] = None,
                 serial: Optional[str] = None,
                 setup_time: Optional[str] = None,
                 time: Optional[str] = None,
                 timing: Optional[str] = None,
                 upgrade_path: Optional[str] = None):
        if coordinating_fortigate is not None:
            pulumi.set(__self__, "coordinating_fortigate", coordinating_fortigate)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if maximum_minutes is not None:
            pulumi.set(__self__, "maximum_minutes", maximum_minutes)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if setup_time is not None:
            pulumi.set(__self__, "setup_time", setup_time)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timing is not None:
            pulumi.set(__self__, "timing", timing)
        if upgrade_path is not None:
            pulumi.set(__self__, "upgrade_path", upgrade_path)

    @property
    @pulumi.getter(name="coordinatingFortigate")
    def coordinating_fortigate(self) -> Optional[str]:
        return pulumi.get(self, "coordinating_fortigate")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[str]:
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="maximumMinutes")
    def maximum_minutes(self) -> Optional[int]:
        return pulumi.get(self, "maximum_minutes")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> Optional[str]:
        return pulumi.get(self, "setup_time")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def timing(self) -> Optional[str]:
        return pulumi.get(self, "timing")

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_path")


@pulumi.output_type
class SystemGeoipOverrideIp6Range(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemGeoipOverrideIp6Range. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemGeoipOverrideIp6Range.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemGeoipOverrideIp6Range.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class SystemGeoipOverrideIpRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemGeoipOverrideIpRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemGeoipOverrideIpRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemGeoipOverrideIpRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class SystemGlobalInternetServiceDownloadList(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemHaHaMgmtInterface(dict):
    def __init__(__self__, *,
                 dst: Optional[str] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None):
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def dst(self) -> Optional[str]:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")


@pulumi.output_type
class SystemHaSecondaryVcluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overrideWaitTime":
            suggest = "override_wait_time"
        elif key == "pingserverFailoverThreshold":
            suggest = "pingserver_failover_threshold"
        elif key == "pingserverMonitorInterface":
            suggest = "pingserver_monitor_interface"
        elif key == "pingserverSecondaryForceReset":
            suggest = "pingserver_secondary_force_reset"
        elif key == "pingserverSlaveForceReset":
            suggest = "pingserver_slave_force_reset"
        elif key == "vclusterId":
            suggest = "vcluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemHaSecondaryVcluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemHaSecondaryVcluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemHaSecondaryVcluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitor: Optional[str] = None,
                 override: Optional[str] = None,
                 override_wait_time: Optional[int] = None,
                 pingserver_failover_threshold: Optional[int] = None,
                 pingserver_monitor_interface: Optional[str] = None,
                 pingserver_secondary_force_reset: Optional[str] = None,
                 pingserver_slave_force_reset: Optional[str] = None,
                 priority: Optional[int] = None,
                 vcluster_id: Optional[int] = None,
                 vdom: Optional[str] = None):
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[str]:
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def override(self) -> Optional[str]:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[int]:
        return pulumi.get(self, "override_wait_time")

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[int]:
        return pulumi.get(self, "pingserver_failover_threshold")

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[str]:
        return pulumi.get(self, "pingserver_monitor_interface")

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[str]:
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[str]:
        return pulumi.get(self, "pingserver_slave_force_reset")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[int]:
        return pulumi.get(self, "vcluster_id")

    @property
    @pulumi.getter
    def vdom(self) -> Optional[str]:
        return pulumi.get(self, "vdom")


@pulumi.output_type
class SystemHaUnicastPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "peerIp":
            suggest = "peer_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemHaUnicastPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemHaUnicastPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemHaUnicastPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 peer_ip: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[str]:
        return pulumi.get(self, "peer_ip")


@pulumi.output_type
class SystemHaVcluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overrideWaitTime":
            suggest = "override_wait_time"
        elif key == "pingserverFailoverThreshold":
            suggest = "pingserver_failover_threshold"
        elif key == "pingserverMonitorInterface":
            suggest = "pingserver_monitor_interface"
        elif key == "pingserverSecondaryForceReset":
            suggest = "pingserver_secondary_force_reset"
        elif key == "pingserverSlaveForceReset":
            suggest = "pingserver_slave_force_reset"
        elif key == "vclusterId":
            suggest = "vcluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemHaVcluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemHaVcluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemHaVcluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitor: Optional[str] = None,
                 override: Optional[str] = None,
                 override_wait_time: Optional[int] = None,
                 pingserver_failover_threshold: Optional[int] = None,
                 pingserver_monitor_interface: Optional[str] = None,
                 pingserver_secondary_force_reset: Optional[str] = None,
                 pingserver_slave_force_reset: Optional[str] = None,
                 priority: Optional[int] = None,
                 vcluster_id: Optional[int] = None,
                 vdoms: Optional[Sequence['outputs.SystemHaVclusterVdom']] = None):
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[str]:
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def override(self) -> Optional[str]:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[int]:
        return pulumi.get(self, "override_wait_time")

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[int]:
        return pulumi.get(self, "pingserver_failover_threshold")

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[str]:
        return pulumi.get(self, "pingserver_monitor_interface")

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[str]:
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[str]:
        return pulumi.get(self, "pingserver_slave_force_reset")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[int]:
        return pulumi.get(self, "vcluster_id")

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[Sequence['outputs.SystemHaVclusterVdom']]:
        return pulumi.get(self, "vdoms")


@pulumi.output_type
class SystemHaVclusterVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemIkeDhGroup14(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup14. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup14.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup14.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup15(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup15. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup15.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup15.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup16(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup16. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup16.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup16.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup17(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup17. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup17.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup17.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup18(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup18. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup18.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup18.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup19(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup19. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup19.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup19.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup21(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup21. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup21.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup21.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup27(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup27. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup27.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup27.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup28(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup28. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup28.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup28.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup29(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup29. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup29.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup29.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup30(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup30. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup30.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup30.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup31(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup31. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup31.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup31.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup32(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup32. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup32.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup32.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemIkeDhGroup5(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIkeDhGroup5. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIkeDhGroup5.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIkeDhGroup5.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SystemInterfaceClientOption(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SystemInterfaceDhcpSnoopingServerList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverIp":
            suggest = "server_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemInterfaceDhcpSnoopingServerList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemInterfaceDhcpSnoopingServerList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemInterfaceDhcpSnoopingServerList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 server_ip: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_ip is not None:
            pulumi.set(__self__, "server_ip", server_ip)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> Optional[str]:
        return pulumi.get(self, "server_ip")


@pulumi.output_type
class SystemInterfaceFailAlertInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemInterfaceIpv6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cliConn6Status":
            suggest = "cli_conn6_status"
        elif key == "dhcp6ClientOptions":
            suggest = "dhcp6_client_options"
        elif key == "dhcp6IapdLists":
            suggest = "dhcp6_iapd_lists"
        elif key == "dhcp6InformationRequest":
            suggest = "dhcp6_information_request"
        elif key == "dhcp6PrefixDelegation":
            suggest = "dhcp6_prefix_delegation"
        elif key == "dhcp6PrefixHint":
            suggest = "dhcp6_prefix_hint"
        elif key == "dhcp6PrefixHintPlt":
            suggest = "dhcp6_prefix_hint_plt"
        elif key == "dhcp6PrefixHintVlt":
            suggest = "dhcp6_prefix_hint_vlt"
        elif key == "dhcp6RelayIp":
            suggest = "dhcp6_relay_ip"
        elif key == "dhcp6RelayService":
            suggest = "dhcp6_relay_service"
        elif key == "dhcp6RelaySourceInterface":
            suggest = "dhcp6_relay_source_interface"
        elif key == "dhcp6RelayType":
            suggest = "dhcp6_relay_type"
        elif key == "icmp6SendRedirect":
            suggest = "icmp6_send_redirect"
        elif key == "interfaceIdentifier":
            suggest = "interface_identifier"
        elif key == "ip6Address":
            suggest = "ip6_address"
        elif key == "ip6Allowaccess":
            suggest = "ip6_allowaccess"
        elif key == "ip6DefaultLife":
            suggest = "ip6_default_life"
        elif key == "ip6DelegatedPrefixIaid":
            suggest = "ip6_delegated_prefix_iaid"
        elif key == "ip6DelegatedPrefixLists":
            suggest = "ip6_delegated_prefix_lists"
        elif key == "ip6DnsServerOverride":
            suggest = "ip6_dns_server_override"
        elif key == "ip6ExtraAddrs":
            suggest = "ip6_extra_addrs"
        elif key == "ip6HopLimit":
            suggest = "ip6_hop_limit"
        elif key == "ip6LinkMtu":
            suggest = "ip6_link_mtu"
        elif key == "ip6ManageFlag":
            suggest = "ip6_manage_flag"
        elif key == "ip6MaxInterval":
            suggest = "ip6_max_interval"
        elif key == "ip6MinInterval":
            suggest = "ip6_min_interval"
        elif key == "ip6Mode":
            suggest = "ip6_mode"
        elif key == "ip6OtherFlag":
            suggest = "ip6_other_flag"
        elif key == "ip6PrefixLists":
            suggest = "ip6_prefix_lists"
        elif key == "ip6PrefixMode":
            suggest = "ip6_prefix_mode"
        elif key == "ip6ReachableTime":
            suggest = "ip6_reachable_time"
        elif key == "ip6RetransTime":
            suggest = "ip6_retrans_time"
        elif key == "ip6SendAdv":
            suggest = "ip6_send_adv"
        elif key == "ip6Subnet":
            suggest = "ip6_subnet"
        elif key == "ip6UpstreamInterface":
            suggest = "ip6_upstream_interface"
        elif key == "ndCert":
            suggest = "nd_cert"
        elif key == "ndCgaModifier":
            suggest = "nd_cga_modifier"
        elif key == "ndMode":
            suggest = "nd_mode"
        elif key == "ndSecurityLevel":
            suggest = "nd_security_level"
        elif key == "ndTimestampDelta":
            suggest = "nd_timestamp_delta"
        elif key == "ndTimestampFuzz":
            suggest = "nd_timestamp_fuzz"
        elif key == "raSendMtu":
            suggest = "ra_send_mtu"
        elif key == "uniqueAutoconfAddr":
            suggest = "unique_autoconf_addr"
        elif key == "vrip6LinkLocal":
            suggest = "vrip6_link_local"
        elif key == "vrrpVirtualMac6":
            suggest = "vrrp_virtual_mac6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemInterfaceIpv6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemInterfaceIpv6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemInterfaceIpv6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autoconf: Optional[str] = None,
                 cli_conn6_status: Optional[int] = None,
                 dhcp6_client_options: Optional[str] = None,
                 dhcp6_iapd_lists: Optional[Sequence['outputs.SystemInterfaceIpv6Dhcp6IapdList']] = None,
                 dhcp6_information_request: Optional[str] = None,
                 dhcp6_prefix_delegation: Optional[str] = None,
                 dhcp6_prefix_hint: Optional[str] = None,
                 dhcp6_prefix_hint_plt: Optional[int] = None,
                 dhcp6_prefix_hint_vlt: Optional[int] = None,
                 dhcp6_relay_ip: Optional[str] = None,
                 dhcp6_relay_service: Optional[str] = None,
                 dhcp6_relay_source_interface: Optional[str] = None,
                 dhcp6_relay_type: Optional[str] = None,
                 icmp6_send_redirect: Optional[str] = None,
                 interface_identifier: Optional[str] = None,
                 ip6_address: Optional[str] = None,
                 ip6_allowaccess: Optional[str] = None,
                 ip6_default_life: Optional[int] = None,
                 ip6_delegated_prefix_iaid: Optional[int] = None,
                 ip6_delegated_prefix_lists: Optional[Sequence['outputs.SystemInterfaceIpv6Ip6DelegatedPrefixList']] = None,
                 ip6_dns_server_override: Optional[str] = None,
                 ip6_extra_addrs: Optional[Sequence['outputs.SystemInterfaceIpv6Ip6ExtraAddr']] = None,
                 ip6_hop_limit: Optional[int] = None,
                 ip6_link_mtu: Optional[int] = None,
                 ip6_manage_flag: Optional[str] = None,
                 ip6_max_interval: Optional[int] = None,
                 ip6_min_interval: Optional[int] = None,
                 ip6_mode: Optional[str] = None,
                 ip6_other_flag: Optional[str] = None,
                 ip6_prefix_lists: Optional[Sequence['outputs.SystemInterfaceIpv6Ip6PrefixList']] = None,
                 ip6_prefix_mode: Optional[str] = None,
                 ip6_reachable_time: Optional[int] = None,
                 ip6_retrans_time: Optional[int] = None,
                 ip6_send_adv: Optional[str] = None,
                 ip6_subnet: Optional[str] = None,
                 ip6_upstream_interface: Optional[str] = None,
                 nd_cert: Optional[str] = None,
                 nd_cga_modifier: Optional[str] = None,
                 nd_mode: Optional[str] = None,
                 nd_security_level: Optional[int] = None,
                 nd_timestamp_delta: Optional[int] = None,
                 nd_timestamp_fuzz: Optional[int] = None,
                 ra_send_mtu: Optional[str] = None,
                 unique_autoconf_addr: Optional[str] = None,
                 vrip6_link_local: Optional[str] = None,
                 vrrp6s: Optional[Sequence['outputs.SystemInterfaceIpv6Vrrp6']] = None,
                 vrrp_virtual_mac6: Optional[str] = None):
        if autoconf is not None:
            pulumi.set(__self__, "autoconf", autoconf)
        if cli_conn6_status is not None:
            pulumi.set(__self__, "cli_conn6_status", cli_conn6_status)
        if dhcp6_client_options is not None:
            pulumi.set(__self__, "dhcp6_client_options", dhcp6_client_options)
        if dhcp6_iapd_lists is not None:
            pulumi.set(__self__, "dhcp6_iapd_lists", dhcp6_iapd_lists)
        if dhcp6_information_request is not None:
            pulumi.set(__self__, "dhcp6_information_request", dhcp6_information_request)
        if dhcp6_prefix_delegation is not None:
            pulumi.set(__self__, "dhcp6_prefix_delegation", dhcp6_prefix_delegation)
        if dhcp6_prefix_hint is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint", dhcp6_prefix_hint)
        if dhcp6_prefix_hint_plt is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint_plt", dhcp6_prefix_hint_plt)
        if dhcp6_prefix_hint_vlt is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint_vlt", dhcp6_prefix_hint_vlt)
        if dhcp6_relay_ip is not None:
            pulumi.set(__self__, "dhcp6_relay_ip", dhcp6_relay_ip)
        if dhcp6_relay_service is not None:
            pulumi.set(__self__, "dhcp6_relay_service", dhcp6_relay_service)
        if dhcp6_relay_source_interface is not None:
            pulumi.set(__self__, "dhcp6_relay_source_interface", dhcp6_relay_source_interface)
        if dhcp6_relay_type is not None:
            pulumi.set(__self__, "dhcp6_relay_type", dhcp6_relay_type)
        if icmp6_send_redirect is not None:
            pulumi.set(__self__, "icmp6_send_redirect", icmp6_send_redirect)
        if interface_identifier is not None:
            pulumi.set(__self__, "interface_identifier", interface_identifier)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)
        if ip6_allowaccess is not None:
            pulumi.set(__self__, "ip6_allowaccess", ip6_allowaccess)
        if ip6_default_life is not None:
            pulumi.set(__self__, "ip6_default_life", ip6_default_life)
        if ip6_delegated_prefix_iaid is not None:
            pulumi.set(__self__, "ip6_delegated_prefix_iaid", ip6_delegated_prefix_iaid)
        if ip6_delegated_prefix_lists is not None:
            pulumi.set(__self__, "ip6_delegated_prefix_lists", ip6_delegated_prefix_lists)
        if ip6_dns_server_override is not None:
            pulumi.set(__self__, "ip6_dns_server_override", ip6_dns_server_override)
        if ip6_extra_addrs is not None:
            pulumi.set(__self__, "ip6_extra_addrs", ip6_extra_addrs)
        if ip6_hop_limit is not None:
            pulumi.set(__self__, "ip6_hop_limit", ip6_hop_limit)
        if ip6_link_mtu is not None:
            pulumi.set(__self__, "ip6_link_mtu", ip6_link_mtu)
        if ip6_manage_flag is not None:
            pulumi.set(__self__, "ip6_manage_flag", ip6_manage_flag)
        if ip6_max_interval is not None:
            pulumi.set(__self__, "ip6_max_interval", ip6_max_interval)
        if ip6_min_interval is not None:
            pulumi.set(__self__, "ip6_min_interval", ip6_min_interval)
        if ip6_mode is not None:
            pulumi.set(__self__, "ip6_mode", ip6_mode)
        if ip6_other_flag is not None:
            pulumi.set(__self__, "ip6_other_flag", ip6_other_flag)
        if ip6_prefix_lists is not None:
            pulumi.set(__self__, "ip6_prefix_lists", ip6_prefix_lists)
        if ip6_prefix_mode is not None:
            pulumi.set(__self__, "ip6_prefix_mode", ip6_prefix_mode)
        if ip6_reachable_time is not None:
            pulumi.set(__self__, "ip6_reachable_time", ip6_reachable_time)
        if ip6_retrans_time is not None:
            pulumi.set(__self__, "ip6_retrans_time", ip6_retrans_time)
        if ip6_send_adv is not None:
            pulumi.set(__self__, "ip6_send_adv", ip6_send_adv)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if ip6_upstream_interface is not None:
            pulumi.set(__self__, "ip6_upstream_interface", ip6_upstream_interface)
        if nd_cert is not None:
            pulumi.set(__self__, "nd_cert", nd_cert)
        if nd_cga_modifier is not None:
            pulumi.set(__self__, "nd_cga_modifier", nd_cga_modifier)
        if nd_mode is not None:
            pulumi.set(__self__, "nd_mode", nd_mode)
        if nd_security_level is not None:
            pulumi.set(__self__, "nd_security_level", nd_security_level)
        if nd_timestamp_delta is not None:
            pulumi.set(__self__, "nd_timestamp_delta", nd_timestamp_delta)
        if nd_timestamp_fuzz is not None:
            pulumi.set(__self__, "nd_timestamp_fuzz", nd_timestamp_fuzz)
        if ra_send_mtu is not None:
            pulumi.set(__self__, "ra_send_mtu", ra_send_mtu)
        if unique_autoconf_addr is not None:
            pulumi.set(__self__, "unique_autoconf_addr", unique_autoconf_addr)
        if vrip6_link_local is not None:
            pulumi.set(__self__, "vrip6_link_local", vrip6_link_local)
        if vrrp6s is not None:
            pulumi.set(__self__, "vrrp6s", vrrp6s)
        if vrrp_virtual_mac6 is not None:
            pulumi.set(__self__, "vrrp_virtual_mac6", vrrp_virtual_mac6)

    @property
    @pulumi.getter
    def autoconf(self) -> Optional[str]:
        return pulumi.get(self, "autoconf")

    @property
    @pulumi.getter(name="cliConn6Status")
    def cli_conn6_status(self) -> Optional[int]:
        return pulumi.get(self, "cli_conn6_status")

    @property
    @pulumi.getter(name="dhcp6ClientOptions")
    def dhcp6_client_options(self) -> Optional[str]:
        return pulumi.get(self, "dhcp6_client_options")

    @property
    @pulumi.getter(name="dhcp6IapdLists")
    def dhcp6_iapd_lists(self) -> Optional[Sequence['outputs.SystemInterfaceIpv6Dhcp6IapdList']]:
        return pulumi.get(self, "dhcp6_iapd_lists")

    @property
    @pulumi.getter(name="dhcp6InformationRequest")
    def dhcp6_information_request(self) -> Optional[str]:
        return pulumi.get(self, "dhcp6_information_request")

    @property
    @pulumi.getter(name="dhcp6PrefixDelegation")
    def dhcp6_prefix_delegation(self) -> Optional[str]:
        return pulumi.get(self, "dhcp6_prefix_delegation")

    @property
    @pulumi.getter(name="dhcp6PrefixHint")
    def dhcp6_prefix_hint(self) -> Optional[str]:
        return pulumi.get(self, "dhcp6_prefix_hint")

    @property
    @pulumi.getter(name="dhcp6PrefixHintPlt")
    def dhcp6_prefix_hint_plt(self) -> Optional[int]:
        return pulumi.get(self, "dhcp6_prefix_hint_plt")

    @property
    @pulumi.getter(name="dhcp6PrefixHintVlt")
    def dhcp6_prefix_hint_vlt(self) -> Optional[int]:
        return pulumi.get(self, "dhcp6_prefix_hint_vlt")

    @property
    @pulumi.getter(name="dhcp6RelayIp")
    def dhcp6_relay_ip(self) -> Optional[str]:
        return pulumi.get(self, "dhcp6_relay_ip")

    @property
    @pulumi.getter(name="dhcp6RelayService")
    def dhcp6_relay_service(self) -> Optional[str]:
        return pulumi.get(self, "dhcp6_relay_service")

    @property
    @pulumi.getter(name="dhcp6RelaySourceInterface")
    def dhcp6_relay_source_interface(self) -> Optional[str]:
        return pulumi.get(self, "dhcp6_relay_source_interface")

    @property
    @pulumi.getter(name="dhcp6RelayType")
    def dhcp6_relay_type(self) -> Optional[str]:
        return pulumi.get(self, "dhcp6_relay_type")

    @property
    @pulumi.getter(name="icmp6SendRedirect")
    def icmp6_send_redirect(self) -> Optional[str]:
        return pulumi.get(self, "icmp6_send_redirect")

    @property
    @pulumi.getter(name="interfaceIdentifier")
    def interface_identifier(self) -> Optional[str]:
        return pulumi.get(self, "interface_identifier")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[str]:
        return pulumi.get(self, "ip6_address")

    @property
    @pulumi.getter(name="ip6Allowaccess")
    def ip6_allowaccess(self) -> Optional[str]:
        return pulumi.get(self, "ip6_allowaccess")

    @property
    @pulumi.getter(name="ip6DefaultLife")
    def ip6_default_life(self) -> Optional[int]:
        return pulumi.get(self, "ip6_default_life")

    @property
    @pulumi.getter(name="ip6DelegatedPrefixIaid")
    def ip6_delegated_prefix_iaid(self) -> Optional[int]:
        return pulumi.get(self, "ip6_delegated_prefix_iaid")

    @property
    @pulumi.getter(name="ip6DelegatedPrefixLists")
    def ip6_delegated_prefix_lists(self) -> Optional[Sequence['outputs.SystemInterfaceIpv6Ip6DelegatedPrefixList']]:
        return pulumi.get(self, "ip6_delegated_prefix_lists")

    @property
    @pulumi.getter(name="ip6DnsServerOverride")
    def ip6_dns_server_override(self) -> Optional[str]:
        return pulumi.get(self, "ip6_dns_server_override")

    @property
    @pulumi.getter(name="ip6ExtraAddrs")
    def ip6_extra_addrs(self) -> Optional[Sequence['outputs.SystemInterfaceIpv6Ip6ExtraAddr']]:
        return pulumi.get(self, "ip6_extra_addrs")

    @property
    @pulumi.getter(name="ip6HopLimit")
    def ip6_hop_limit(self) -> Optional[int]:
        return pulumi.get(self, "ip6_hop_limit")

    @property
    @pulumi.getter(name="ip6LinkMtu")
    def ip6_link_mtu(self) -> Optional[int]:
        return pulumi.get(self, "ip6_link_mtu")

    @property
    @pulumi.getter(name="ip6ManageFlag")
    def ip6_manage_flag(self) -> Optional[str]:
        return pulumi.get(self, "ip6_manage_flag")

    @property
    @pulumi.getter(name="ip6MaxInterval")
    def ip6_max_interval(self) -> Optional[int]:
        return pulumi.get(self, "ip6_max_interval")

    @property
    @pulumi.getter(name="ip6MinInterval")
    def ip6_min_interval(self) -> Optional[int]:
        return pulumi.get(self, "ip6_min_interval")

    @property
    @pulumi.getter(name="ip6Mode")
    def ip6_mode(self) -> Optional[str]:
        return pulumi.get(self, "ip6_mode")

    @property
    @pulumi.getter(name="ip6OtherFlag")
    def ip6_other_flag(self) -> Optional[str]:
        return pulumi.get(self, "ip6_other_flag")

    @property
    @pulumi.getter(name="ip6PrefixLists")
    def ip6_prefix_lists(self) -> Optional[Sequence['outputs.SystemInterfaceIpv6Ip6PrefixList']]:
        return pulumi.get(self, "ip6_prefix_lists")

    @property
    @pulumi.getter(name="ip6PrefixMode")
    def ip6_prefix_mode(self) -> Optional[str]:
        return pulumi.get(self, "ip6_prefix_mode")

    @property
    @pulumi.getter(name="ip6ReachableTime")
    def ip6_reachable_time(self) -> Optional[int]:
        return pulumi.get(self, "ip6_reachable_time")

    @property
    @pulumi.getter(name="ip6RetransTime")
    def ip6_retrans_time(self) -> Optional[int]:
        return pulumi.get(self, "ip6_retrans_time")

    @property
    @pulumi.getter(name="ip6SendAdv")
    def ip6_send_adv(self) -> Optional[str]:
        return pulumi.get(self, "ip6_send_adv")

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ip6_subnet")

    @property
    @pulumi.getter(name="ip6UpstreamInterface")
    def ip6_upstream_interface(self) -> Optional[str]:
        return pulumi.get(self, "ip6_upstream_interface")

    @property
    @pulumi.getter(name="ndCert")
    def nd_cert(self) -> Optional[str]:
        return pulumi.get(self, "nd_cert")

    @property
    @pulumi.getter(name="ndCgaModifier")
    def nd_cga_modifier(self) -> Optional[str]:
        return pulumi.get(self, "nd_cga_modifier")

    @property
    @pulumi.getter(name="ndMode")
    def nd_mode(self) -> Optional[str]:
        return pulumi.get(self, "nd_mode")

    @property
    @pulumi.getter(name="ndSecurityLevel")
    def nd_security_level(self) -> Optional[int]:
        return pulumi.get(self, "nd_security_level")

    @property
    @pulumi.getter(name="ndTimestampDelta")
    def nd_timestamp_delta(self) -> Optional[int]:
        return pulumi.get(self, "nd_timestamp_delta")

    @property
    @pulumi.getter(name="ndTimestampFuzz")
    def nd_timestamp_fuzz(self) -> Optional[int]:
        return pulumi.get(self, "nd_timestamp_fuzz")

    @property
    @pulumi.getter(name="raSendMtu")
    def ra_send_mtu(self) -> Optional[str]:
        return pulumi.get(self, "ra_send_mtu")

    @property
    @pulumi.getter(name="uniqueAutoconfAddr")
    def unique_autoconf_addr(self) -> Optional[str]:
        return pulumi.get(self, "unique_autoconf_addr")

    @property
    @pulumi.getter(name="vrip6LinkLocal")
    def vrip6_link_local(self) -> Optional[str]:
        return pulumi.get(self, "vrip6_link_local")

    @property
    @pulumi.getter
    def vrrp6s(self) -> Optional[Sequence['outputs.SystemInterfaceIpv6Vrrp6']]:
        return pulumi.get(self, "vrrp6s")

    @property
    @pulumi.getter(name="vrrpVirtualMac6")
    def vrrp_virtual_mac6(self) -> Optional[str]:
        return pulumi.get(self, "vrrp_virtual_mac6")


@pulumi.output_type
class SystemInterfaceIpv6Dhcp6IapdList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixHint":
            suggest = "prefix_hint"
        elif key == "prefixHintPlt":
            suggest = "prefix_hint_plt"
        elif key == "prefixHintVlt":
            suggest = "prefix_hint_vlt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemInterfaceIpv6Dhcp6IapdList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemInterfaceIpv6Dhcp6IapdList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemInterfaceIpv6Dhcp6IapdList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iaid: Optional[int] = None,
                 prefix_hint: Optional[str] = None,
                 prefix_hint_plt: Optional[int] = None,
                 prefix_hint_vlt: Optional[int] = None):
        if iaid is not None:
            pulumi.set(__self__, "iaid", iaid)
        if prefix_hint is not None:
            pulumi.set(__self__, "prefix_hint", prefix_hint)
        if prefix_hint_plt is not None:
            pulumi.set(__self__, "prefix_hint_plt", prefix_hint_plt)
        if prefix_hint_vlt is not None:
            pulumi.set(__self__, "prefix_hint_vlt", prefix_hint_vlt)

    @property
    @pulumi.getter
    def iaid(self) -> Optional[int]:
        return pulumi.get(self, "iaid")

    @property
    @pulumi.getter(name="prefixHint")
    def prefix_hint(self) -> Optional[str]:
        return pulumi.get(self, "prefix_hint")

    @property
    @pulumi.getter(name="prefixHintPlt")
    def prefix_hint_plt(self) -> Optional[int]:
        return pulumi.get(self, "prefix_hint_plt")

    @property
    @pulumi.getter(name="prefixHintVlt")
    def prefix_hint_vlt(self) -> Optional[int]:
        return pulumi.get(self, "prefix_hint_vlt")


@pulumi.output_type
class SystemInterfaceIpv6Ip6DelegatedPrefixList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autonomousFlag":
            suggest = "autonomous_flag"
        elif key == "delegatedPrefixIaid":
            suggest = "delegated_prefix_iaid"
        elif key == "onlinkFlag":
            suggest = "onlink_flag"
        elif key == "prefixId":
            suggest = "prefix_id"
        elif key == "rdnssService":
            suggest = "rdnss_service"
        elif key == "upstreamInterface":
            suggest = "upstream_interface"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemInterfaceIpv6Ip6DelegatedPrefixList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemInterfaceIpv6Ip6DelegatedPrefixList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemInterfaceIpv6Ip6DelegatedPrefixList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autonomous_flag: Optional[str] = None,
                 delegated_prefix_iaid: Optional[int] = None,
                 onlink_flag: Optional[str] = None,
                 prefix_id: Optional[int] = None,
                 rdnss: Optional[str] = None,
                 rdnss_service: Optional[str] = None,
                 subnet: Optional[str] = None,
                 upstream_interface: Optional[str] = None):
        if autonomous_flag is not None:
            pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        if delegated_prefix_iaid is not None:
            pulumi.set(__self__, "delegated_prefix_iaid", delegated_prefix_iaid)
        if onlink_flag is not None:
            pulumi.set(__self__, "onlink_flag", onlink_flag)
        if prefix_id is not None:
            pulumi.set(__self__, "prefix_id", prefix_id)
        if rdnss is not None:
            pulumi.set(__self__, "rdnss", rdnss)
        if rdnss_service is not None:
            pulumi.set(__self__, "rdnss_service", rdnss_service)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if upstream_interface is not None:
            pulumi.set(__self__, "upstream_interface", upstream_interface)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> Optional[str]:
        return pulumi.get(self, "autonomous_flag")

    @property
    @pulumi.getter(name="delegatedPrefixIaid")
    def delegated_prefix_iaid(self) -> Optional[int]:
        return pulumi.get(self, "delegated_prefix_iaid")

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> Optional[str]:
        return pulumi.get(self, "onlink_flag")

    @property
    @pulumi.getter(name="prefixId")
    def prefix_id(self) -> Optional[int]:
        return pulumi.get(self, "prefix_id")

    @property
    @pulumi.getter
    def rdnss(self) -> Optional[str]:
        return pulumi.get(self, "rdnss")

    @property
    @pulumi.getter(name="rdnssService")
    def rdnss_service(self) -> Optional[str]:
        return pulumi.get(self, "rdnss_service")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="upstreamInterface")
    def upstream_interface(self) -> Optional[str]:
        return pulumi.get(self, "upstream_interface")


@pulumi.output_type
class SystemInterfaceIpv6Ip6ExtraAddr(dict):
    def __init__(__self__, *,
                 prefix: Optional[str] = None):
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class SystemInterfaceIpv6Ip6PrefixList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autonomousFlag":
            suggest = "autonomous_flag"
        elif key == "onlinkFlag":
            suggest = "onlink_flag"
        elif key == "preferredLifeTime":
            suggest = "preferred_life_time"
        elif key == "validLifeTime":
            suggest = "valid_life_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemInterfaceIpv6Ip6PrefixList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemInterfaceIpv6Ip6PrefixList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemInterfaceIpv6Ip6PrefixList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autonomous_flag: Optional[str] = None,
                 dnssls: Optional[Sequence['outputs.SystemInterfaceIpv6Ip6PrefixListDnssl']] = None,
                 onlink_flag: Optional[str] = None,
                 preferred_life_time: Optional[int] = None,
                 prefix: Optional[str] = None,
                 rdnss: Optional[str] = None,
                 valid_life_time: Optional[int] = None):
        if autonomous_flag is not None:
            pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        if dnssls is not None:
            pulumi.set(__self__, "dnssls", dnssls)
        if onlink_flag is not None:
            pulumi.set(__self__, "onlink_flag", onlink_flag)
        if preferred_life_time is not None:
            pulumi.set(__self__, "preferred_life_time", preferred_life_time)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if rdnss is not None:
            pulumi.set(__self__, "rdnss", rdnss)
        if valid_life_time is not None:
            pulumi.set(__self__, "valid_life_time", valid_life_time)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> Optional[str]:
        return pulumi.get(self, "autonomous_flag")

    @property
    @pulumi.getter
    def dnssls(self) -> Optional[Sequence['outputs.SystemInterfaceIpv6Ip6PrefixListDnssl']]:
        return pulumi.get(self, "dnssls")

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> Optional[str]:
        return pulumi.get(self, "onlink_flag")

    @property
    @pulumi.getter(name="preferredLifeTime")
    def preferred_life_time(self) -> Optional[int]:
        return pulumi.get(self, "preferred_life_time")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def rdnss(self) -> Optional[str]:
        return pulumi.get(self, "rdnss")

    @property
    @pulumi.getter(name="validLifeTime")
    def valid_life_time(self) -> Optional[int]:
        return pulumi.get(self, "valid_life_time")


@pulumi.output_type
class SystemInterfaceIpv6Ip6PrefixListDnssl(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")


@pulumi.output_type
class SystemInterfaceIpv6Vrrp6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptMode":
            suggest = "accept_mode"
        elif key == "advInterval":
            suggest = "adv_interval"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemInterfaceIpv6Vrrp6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemInterfaceIpv6Vrrp6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemInterfaceIpv6Vrrp6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_mode: Optional[str] = None,
                 adv_interval: Optional[int] = None,
                 preempt: Optional[str] = None,
                 priority: Optional[int] = None,
                 start_time: Optional[int] = None,
                 status: Optional[str] = None,
                 vrdst6: Optional[str] = None,
                 vrgrp: Optional[int] = None,
                 vrid: Optional[int] = None,
                 vrip6: Optional[str] = None):
        if accept_mode is not None:
            pulumi.set(__self__, "accept_mode", accept_mode)
        if adv_interval is not None:
            pulumi.set(__self__, "adv_interval", adv_interval)
        if preempt is not None:
            pulumi.set(__self__, "preempt", preempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vrdst6 is not None:
            pulumi.set(__self__, "vrdst6", vrdst6)
        if vrgrp is not None:
            pulumi.set(__self__, "vrgrp", vrgrp)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)
        if vrip6 is not None:
            pulumi.set(__self__, "vrip6", vrip6)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> Optional[str]:
        return pulumi.get(self, "accept_mode")

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> Optional[int]:
        return pulumi.get(self, "adv_interval")

    @property
    @pulumi.getter
    def preempt(self) -> Optional[str]:
        return pulumi.get(self, "preempt")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vrdst6(self) -> Optional[str]:
        return pulumi.get(self, "vrdst6")

    @property
    @pulumi.getter
    def vrgrp(self) -> Optional[int]:
        return pulumi.get(self, "vrgrp")

    @property
    @pulumi.getter
    def vrid(self) -> Optional[int]:
        return pulumi.get(self, "vrid")

    @property
    @pulumi.getter
    def vrip6(self) -> Optional[str]:
        return pulumi.get(self, "vrip6")


@pulumi.output_type
class SystemInterfaceManagedDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemInterfaceMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemInterfaceMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemInterfaceMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemInterfaceMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SystemInterfaceSecondaryip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "haPriority":
            suggest = "ha_priority"
        elif key == "pingServStatus":
            suggest = "ping_serv_status"
        elif key == "secipRelayIp":
            suggest = "secip_relay_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemInterfaceSecondaryip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemInterfaceSecondaryip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemInterfaceSecondaryip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowaccess: Optional[str] = None,
                 detectprotocol: Optional[str] = None,
                 detectserver: Optional[str] = None,
                 gwdetect: Optional[str] = None,
                 ha_priority: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 ping_serv_status: Optional[int] = None,
                 secip_relay_ip: Optional[str] = None):
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if detectprotocol is not None:
            pulumi.set(__self__, "detectprotocol", detectprotocol)
        if detectserver is not None:
            pulumi.set(__self__, "detectserver", detectserver)
        if gwdetect is not None:
            pulumi.set(__self__, "gwdetect", gwdetect)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ping_serv_status is not None:
            pulumi.set(__self__, "ping_serv_status", ping_serv_status)
        if secip_relay_ip is not None:
            pulumi.set(__self__, "secip_relay_ip", secip_relay_ip)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[str]:
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter
    def detectprotocol(self) -> Optional[str]:
        return pulumi.get(self, "detectprotocol")

    @property
    @pulumi.getter
    def detectserver(self) -> Optional[str]:
        return pulumi.get(self, "detectserver")

    @property
    @pulumi.getter
    def gwdetect(self) -> Optional[str]:
        return pulumi.get(self, "gwdetect")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[int]:
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> Optional[int]:
        return pulumi.get(self, "ping_serv_status")

    @property
    @pulumi.getter(name="secipRelayIp")
    def secip_relay_ip(self) -> Optional[str]:
        return pulumi.get(self, "secip_relay_ip")


@pulumi.output_type
class SystemInterfaceSecurityGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemInterfaceTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.SystemInterfaceTaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.SystemInterfaceTaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class SystemInterfaceTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemInterfaceVrrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptMode":
            suggest = "accept_mode"
        elif key == "advInterval":
            suggest = "adv_interval"
        elif key == "ignoreDefaultRoute":
            suggest = "ignore_default_route"
        elif key == "proxyArps":
            suggest = "proxy_arps"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "vrdstPriority":
            suggest = "vrdst_priority"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemInterfaceVrrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemInterfaceVrrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemInterfaceVrrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_mode: Optional[str] = None,
                 adv_interval: Optional[int] = None,
                 ignore_default_route: Optional[str] = None,
                 preempt: Optional[str] = None,
                 priority: Optional[int] = None,
                 proxy_arps: Optional[Sequence['outputs.SystemInterfaceVrrpProxyArp']] = None,
                 start_time: Optional[int] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None,
                 vrdst: Optional[str] = None,
                 vrdst_priority: Optional[int] = None,
                 vrgrp: Optional[int] = None,
                 vrid: Optional[int] = None,
                 vrip: Optional[str] = None):
        if accept_mode is not None:
            pulumi.set(__self__, "accept_mode", accept_mode)
        if adv_interval is not None:
            pulumi.set(__self__, "adv_interval", adv_interval)
        if ignore_default_route is not None:
            pulumi.set(__self__, "ignore_default_route", ignore_default_route)
        if preempt is not None:
            pulumi.set(__self__, "preempt", preempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if proxy_arps is not None:
            pulumi.set(__self__, "proxy_arps", proxy_arps)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vrdst is not None:
            pulumi.set(__self__, "vrdst", vrdst)
        if vrdst_priority is not None:
            pulumi.set(__self__, "vrdst_priority", vrdst_priority)
        if vrgrp is not None:
            pulumi.set(__self__, "vrgrp", vrgrp)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)
        if vrip is not None:
            pulumi.set(__self__, "vrip", vrip)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> Optional[str]:
        return pulumi.get(self, "accept_mode")

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> Optional[int]:
        return pulumi.get(self, "adv_interval")

    @property
    @pulumi.getter(name="ignoreDefaultRoute")
    def ignore_default_route(self) -> Optional[str]:
        return pulumi.get(self, "ignore_default_route")

    @property
    @pulumi.getter
    def preempt(self) -> Optional[str]:
        return pulumi.get(self, "preempt")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="proxyArps")
    def proxy_arps(self) -> Optional[Sequence['outputs.SystemInterfaceVrrpProxyArp']]:
        return pulumi.get(self, "proxy_arps")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def vrdst(self) -> Optional[str]:
        return pulumi.get(self, "vrdst")

    @property
    @pulumi.getter(name="vrdstPriority")
    def vrdst_priority(self) -> Optional[int]:
        return pulumi.get(self, "vrdst_priority")

    @property
    @pulumi.getter
    def vrgrp(self) -> Optional[int]:
        return pulumi.get(self, "vrgrp")

    @property
    @pulumi.getter
    def vrid(self) -> Optional[int]:
        return pulumi.get(self, "vrid")

    @property
    @pulumi.getter
    def vrip(self) -> Optional[str]:
        return pulumi.get(self, "vrip")


@pulumi.output_type
class SystemInterfaceVrrpProxyArp(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class SystemIpamPool(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 subnet: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class SystemIpamRule(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 devices: Optional[Sequence['outputs.SystemIpamRuleDevice']] = None,
                 dhcp: Optional[str] = None,
                 interfaces: Optional[Sequence['outputs.SystemIpamRuleInterface']] = None,
                 name: Optional[str] = None,
                 pools: Optional[Sequence['outputs.SystemIpamRulePool']] = None,
                 role: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pools is not None:
            pulumi.set(__self__, "pools", pools)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.SystemIpamRuleDevice']]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[str]:
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.SystemIpamRuleInterface']]:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pools(self) -> Optional[Sequence['outputs.SystemIpamRulePool']]:
        return pulumi.get(self, "pools")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")


@pulumi.output_type
class SystemIpamRuleDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemIpamRuleInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemIpamRulePool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemIpsecAggregateMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelName":
            suggest = "tunnel_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIpsecAggregateMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIpsecAggregateMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIpsecAggregateMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_name: Optional[str] = None):
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_name")


@pulumi.output_type
class SystemLinkMonitorRoute(dict):
    def __init__(__self__, *,
                 subnet: Optional[str] = None):
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class SystemLinkMonitorServer(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")


@pulumi.output_type
class SystemLinkMonitorServerList(dict):
    def __init__(__self__, *,
                 dst: Optional[str] = None,
                 id: Optional[int] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 weight: Optional[int] = None):
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def dst(self) -> Optional[str]:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class SystemLldpNetworkPolicyGuest(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SystemLldpNetworkPolicyGuestVoiceSignaling(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SystemLldpNetworkPolicySoftphone(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SystemLldpNetworkPolicyStreamingVideo(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SystemLldpNetworkPolicyVideoConferencing(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SystemLldpNetworkPolicyVideoSignaling(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SystemLldpNetworkPolicyVoice(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SystemLldpNetworkPolicyVoiceSignaling(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 priority: Optional[int] = None,
                 status: Optional[str] = None,
                 tag: Optional[str] = None,
                 vlan: Optional[int] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class SystemMobileTunnelNetwork(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 prefix: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class SystemNat64SecondaryPrefix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nat64Prefix":
            suggest = "nat64_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemNat64SecondaryPrefix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemNat64SecondaryPrefix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemNat64SecondaryPrefix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 nat64_prefix: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat64_prefix is not None:
            pulumi.set(__self__, "nat64_prefix", nat64_prefix)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nat64Prefix")
    def nat64_prefix(self) -> Optional[str]:
        return pulumi.get(self, "nat64_prefix")


@pulumi.output_type
class SystemNdProxyMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemNdProxyMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemNdProxyMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemNdProxyMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SystemNpuPriorityProtocol(dict):
    def __init__(__self__, *,
                 bfd: Optional[str] = None,
                 bgp: Optional[str] = None,
                 slbc: Optional[str] = None):
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if bgp is not None:
            pulumi.set(__self__, "bgp", bgp)
        if slbc is not None:
            pulumi.set(__self__, "slbc", slbc)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def bgp(self) -> Optional[str]:
        return pulumi.get(self, "bgp")

    @property
    @pulumi.getter
    def slbc(self) -> Optional[str]:
        return pulumi.get(self, "slbc")


@pulumi.output_type
class SystemNtpInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemNtpInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemNtpInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemNtpInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SystemNtpNtpserver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceSelectMethod":
            suggest = "interface_select_method"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemNtpNtpserver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemNtpNtpserver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemNtpNtpserver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 interface_select_method: Optional[str] = None,
                 key: Optional[str] = None,
                 key_id: Optional[int] = None,
                 ntpv3: Optional[str] = None,
                 server: Optional[str] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if ntpv3 is not None:
            pulumi.set(__self__, "ntpv3", ntpv3)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[str]:
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[int]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def ntpv3(self) -> Optional[str]:
        return pulumi.get(self, "ntpv3")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")


@pulumi.output_type
class SystemObjectTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemPcpServerPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowOpcode":
            suggest = "allow_opcode"
        elif key == "announcementCount":
            suggest = "announcement_count"
        elif key == "arpReply":
            suggest = "arp_reply"
        elif key == "clientMappingLimit":
            suggest = "client_mapping_limit"
        elif key == "clientSubnets":
            suggest = "client_subnets"
        elif key == "extIntf":
            suggest = "ext_intf"
        elif key == "intlIntfs":
            suggest = "intl_intfs"
        elif key == "mappingFilterLimit":
            suggest = "mapping_filter_limit"
        elif key == "maximalLifetime":
            suggest = "maximal_lifetime"
        elif key == "minimalLifetime":
            suggest = "minimal_lifetime"
        elif key == "multicastAnnouncement":
            suggest = "multicast_announcement"
        elif key == "recycleDelay":
            suggest = "recycle_delay"
        elif key == "thirdParty":
            suggest = "third_party"
        elif key == "thirdPartySubnets":
            suggest = "third_party_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemPcpServerPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemPcpServerPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemPcpServerPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_opcode: Optional[str] = None,
                 announcement_count: Optional[int] = None,
                 arp_reply: Optional[str] = None,
                 client_mapping_limit: Optional[int] = None,
                 client_subnets: Optional[Sequence['outputs.SystemPcpServerPoolClientSubnet']] = None,
                 description: Optional[str] = None,
                 ext_intf: Optional[str] = None,
                 extip: Optional[str] = None,
                 extport: Optional[str] = None,
                 id: Optional[int] = None,
                 intl_intfs: Optional[Sequence['outputs.SystemPcpServerPoolIntlIntf']] = None,
                 mapping_filter_limit: Optional[int] = None,
                 maximal_lifetime: Optional[int] = None,
                 minimal_lifetime: Optional[int] = None,
                 multicast_announcement: Optional[str] = None,
                 name: Optional[str] = None,
                 recycle_delay: Optional[int] = None,
                 third_party: Optional[str] = None,
                 third_party_subnets: Optional[Sequence['outputs.SystemPcpServerPoolThirdPartySubnet']] = None):
        if allow_opcode is not None:
            pulumi.set(__self__, "allow_opcode", allow_opcode)
        if announcement_count is not None:
            pulumi.set(__self__, "announcement_count", announcement_count)
        if arp_reply is not None:
            pulumi.set(__self__, "arp_reply", arp_reply)
        if client_mapping_limit is not None:
            pulumi.set(__self__, "client_mapping_limit", client_mapping_limit)
        if client_subnets is not None:
            pulumi.set(__self__, "client_subnets", client_subnets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ext_intf is not None:
            pulumi.set(__self__, "ext_intf", ext_intf)
        if extip is not None:
            pulumi.set(__self__, "extip", extip)
        if extport is not None:
            pulumi.set(__self__, "extport", extport)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if intl_intfs is not None:
            pulumi.set(__self__, "intl_intfs", intl_intfs)
        if mapping_filter_limit is not None:
            pulumi.set(__self__, "mapping_filter_limit", mapping_filter_limit)
        if maximal_lifetime is not None:
            pulumi.set(__self__, "maximal_lifetime", maximal_lifetime)
        if minimal_lifetime is not None:
            pulumi.set(__self__, "minimal_lifetime", minimal_lifetime)
        if multicast_announcement is not None:
            pulumi.set(__self__, "multicast_announcement", multicast_announcement)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recycle_delay is not None:
            pulumi.set(__self__, "recycle_delay", recycle_delay)
        if third_party is not None:
            pulumi.set(__self__, "third_party", third_party)
        if third_party_subnets is not None:
            pulumi.set(__self__, "third_party_subnets", third_party_subnets)

    @property
    @pulumi.getter(name="allowOpcode")
    def allow_opcode(self) -> Optional[str]:
        return pulumi.get(self, "allow_opcode")

    @property
    @pulumi.getter(name="announcementCount")
    def announcement_count(self) -> Optional[int]:
        return pulumi.get(self, "announcement_count")

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> Optional[str]:
        return pulumi.get(self, "arp_reply")

    @property
    @pulumi.getter(name="clientMappingLimit")
    def client_mapping_limit(self) -> Optional[int]:
        return pulumi.get(self, "client_mapping_limit")

    @property
    @pulumi.getter(name="clientSubnets")
    def client_subnets(self) -> Optional[Sequence['outputs.SystemPcpServerPoolClientSubnet']]:
        return pulumi.get(self, "client_subnets")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="extIntf")
    def ext_intf(self) -> Optional[str]:
        return pulumi.get(self, "ext_intf")

    @property
    @pulumi.getter
    def extip(self) -> Optional[str]:
        return pulumi.get(self, "extip")

    @property
    @pulumi.getter
    def extport(self) -> Optional[str]:
        return pulumi.get(self, "extport")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intlIntfs")
    def intl_intfs(self) -> Optional[Sequence['outputs.SystemPcpServerPoolIntlIntf']]:
        return pulumi.get(self, "intl_intfs")

    @property
    @pulumi.getter(name="mappingFilterLimit")
    def mapping_filter_limit(self) -> Optional[int]:
        return pulumi.get(self, "mapping_filter_limit")

    @property
    @pulumi.getter(name="maximalLifetime")
    def maximal_lifetime(self) -> Optional[int]:
        return pulumi.get(self, "maximal_lifetime")

    @property
    @pulumi.getter(name="minimalLifetime")
    def minimal_lifetime(self) -> Optional[int]:
        return pulumi.get(self, "minimal_lifetime")

    @property
    @pulumi.getter(name="multicastAnnouncement")
    def multicast_announcement(self) -> Optional[str]:
        return pulumi.get(self, "multicast_announcement")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recycleDelay")
    def recycle_delay(self) -> Optional[int]:
        return pulumi.get(self, "recycle_delay")

    @property
    @pulumi.getter(name="thirdParty")
    def third_party(self) -> Optional[str]:
        return pulumi.get(self, "third_party")

    @property
    @pulumi.getter(name="thirdPartySubnets")
    def third_party_subnets(self) -> Optional[Sequence['outputs.SystemPcpServerPoolThirdPartySubnet']]:
        return pulumi.get(self, "third_party_subnets")


@pulumi.output_type
class SystemPcpServerPoolClientSubnet(dict):
    def __init__(__self__, *,
                 subnet: Optional[str] = None):
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class SystemPcpServerPoolIntlIntf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemPcpServerPoolIntlIntf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemPcpServerPoolIntlIntf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemPcpServerPoolIntlIntf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SystemPcpServerPoolThirdPartySubnet(dict):
    def __init__(__self__, *,
                 subnet: Optional[str] = None):
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class SystemPtpServerInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "delayMechanism":
            suggest = "delay_mechanism"
        elif key == "serverInterfaceName":
            suggest = "server_interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemPtpServerInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemPtpServerInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemPtpServerInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delay_mechanism: Optional[str] = None,
                 id: Optional[int] = None,
                 server_interface_name: Optional[str] = None):
        if delay_mechanism is not None:
            pulumi.set(__self__, "delay_mechanism", delay_mechanism)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_interface_name is not None:
            pulumi.set(__self__, "server_interface_name", server_interface_name)

    @property
    @pulumi.getter(name="delayMechanism")
    def delay_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "delay_mechanism")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverInterfaceName")
    def server_interface_name(self) -> Optional[str]:
        return pulumi.get(self, "server_interface_name")


@pulumi.output_type
class SystemReplacemsgGroupAdmin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupAdmin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupAdmin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupAdmin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupAlertmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupAlertmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupAlertmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupAlertmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupAutomation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupAutomation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupAutomation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupAutomation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupCustomMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupCustomMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupCustomMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupCustomMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupDeviceDetectionPortal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupDeviceDetectionPortal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupDeviceDetectionPortal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupDeviceDetectionPortal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupEc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupEc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupEc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupEc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupFortiguardWf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupFortiguardWf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupFortiguardWf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupFortiguardWf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupFtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupFtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupFtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupFtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupHttp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupHttp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupHttp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupHttp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupIcap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupIcap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupIcap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupIcap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupMail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupMail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupMail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupMail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupNacQuar(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupNacQuar. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupNacQuar.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupNacQuar.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupNntp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupNntp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupNntp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupNntp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupSpam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupSpam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupSpam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupSpam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupSslvpn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupSslvpn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupSslvpn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupSslvpn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupTrafficQuota(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupTrafficQuota. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupTrafficQuota.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupTrafficQuota.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupUtm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupUtm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupUtm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupUtm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemReplacemsgGroupWebproxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemReplacemsgGroupWebproxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemReplacemsgGroupWebproxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemReplacemsgGroupWebproxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SystemSamlServiceProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assertionAttributes":
            suggest = "assertion_attributes"
        elif key == "idpEntityId":
            suggest = "idp_entity_id"
        elif key == "idpSingleLogoutUrl":
            suggest = "idp_single_logout_url"
        elif key == "idpSingleSignOnUrl":
            suggest = "idp_single_sign_on_url"
        elif key == "spBindingProtocol":
            suggest = "sp_binding_protocol"
        elif key == "spCert":
            suggest = "sp_cert"
        elif key == "spEntityId":
            suggest = "sp_entity_id"
        elif key == "spPortalUrl":
            suggest = "sp_portal_url"
        elif key == "spSingleLogoutUrl":
            suggest = "sp_single_logout_url"
        elif key == "spSingleSignOnUrl":
            suggest = "sp_single_sign_on_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSamlServiceProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSamlServiceProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSamlServiceProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assertion_attributes: Optional[Sequence['outputs.SystemSamlServiceProviderAssertionAttribute']] = None,
                 idp_entity_id: Optional[str] = None,
                 idp_single_logout_url: Optional[str] = None,
                 idp_single_sign_on_url: Optional[str] = None,
                 name: Optional[str] = None,
                 prefix: Optional[str] = None,
                 sp_binding_protocol: Optional[str] = None,
                 sp_cert: Optional[str] = None,
                 sp_entity_id: Optional[str] = None,
                 sp_portal_url: Optional[str] = None,
                 sp_single_logout_url: Optional[str] = None,
                 sp_single_sign_on_url: Optional[str] = None):
        if assertion_attributes is not None:
            pulumi.set(__self__, "assertion_attributes", assertion_attributes)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url is not None:
            pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if sp_binding_protocol is not None:
            pulumi.set(__self__, "sp_binding_protocol", sp_binding_protocol)
        if sp_cert is not None:
            pulumi.set(__self__, "sp_cert", sp_cert)
        if sp_entity_id is not None:
            pulumi.set(__self__, "sp_entity_id", sp_entity_id)
        if sp_portal_url is not None:
            pulumi.set(__self__, "sp_portal_url", sp_portal_url)
        if sp_single_logout_url is not None:
            pulumi.set(__self__, "sp_single_logout_url", sp_single_logout_url)
        if sp_single_sign_on_url is not None:
            pulumi.set(__self__, "sp_single_sign_on_url", sp_single_sign_on_url)

    @property
    @pulumi.getter(name="assertionAttributes")
    def assertion_attributes(self) -> Optional[Sequence['outputs.SystemSamlServiceProviderAssertionAttribute']]:
        return pulumi.get(self, "assertion_attributes")

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[str]:
        return pulumi.get(self, "idp_entity_id")

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[str]:
        return pulumi.get(self, "idp_single_logout_url")

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> Optional[str]:
        return pulumi.get(self, "idp_single_sign_on_url")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="spBindingProtocol")
    def sp_binding_protocol(self) -> Optional[str]:
        return pulumi.get(self, "sp_binding_protocol")

    @property
    @pulumi.getter(name="spCert")
    def sp_cert(self) -> Optional[str]:
        return pulumi.get(self, "sp_cert")

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> Optional[str]:
        return pulumi.get(self, "sp_entity_id")

    @property
    @pulumi.getter(name="spPortalUrl")
    def sp_portal_url(self) -> Optional[str]:
        return pulumi.get(self, "sp_portal_url")

    @property
    @pulumi.getter(name="spSingleLogoutUrl")
    def sp_single_logout_url(self) -> Optional[str]:
        return pulumi.get(self, "sp_single_logout_url")

    @property
    @pulumi.getter(name="spSingleSignOnUrl")
    def sp_single_sign_on_url(self) -> Optional[str]:
        return pulumi.get(self, "sp_single_sign_on_url")


@pulumi.output_type
class SystemSamlServiceProviderAssertionAttribute(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SystemSdnConnectorCompartmentList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdnConnectorCompartmentList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdnConnectorCompartmentList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdnConnectorCompartmentList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")


@pulumi.output_type
class SystemSdnConnectorExternalAccountList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"
        elif key == "regionLists":
            suggest = "region_lists"
        elif key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdnConnectorExternalAccountList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdnConnectorExternalAccountList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdnConnectorExternalAccountList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: Optional[str] = None,
                 region_lists: Optional[Sequence['outputs.SystemSdnConnectorExternalAccountListRegionList']] = None,
                 role_arn: Optional[str] = None):
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if region_lists is not None:
            pulumi.set(__self__, "region_lists", region_lists)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="regionLists")
    def region_lists(self) -> Optional[Sequence['outputs.SystemSdnConnectorExternalAccountListRegionList']]:
        return pulumi.get(self, "region_lists")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class SystemSdnConnectorExternalAccountListRegionList(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class SystemSdnConnectorExternalIp(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdnConnectorForwardingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdnConnectorForwardingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdnConnectorForwardingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdnConnectorForwardingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_name: Optional[str] = None,
                 target: Optional[str] = None):
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class SystemSdnConnectorGcpProjectList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcpZoneLists":
            suggest = "gcp_zone_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdnConnectorGcpProjectList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdnConnectorGcpProjectList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdnConnectorGcpProjectList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gcp_zone_lists: Optional[Sequence['outputs.SystemSdnConnectorGcpProjectListGcpZoneList']] = None,
                 id: Optional[str] = None):
        if gcp_zone_lists is not None:
            pulumi.set(__self__, "gcp_zone_lists", gcp_zone_lists)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="gcpZoneLists")
    def gcp_zone_lists(self) -> Optional[Sequence['outputs.SystemSdnConnectorGcpProjectListGcpZoneList']]:
        return pulumi.get(self, "gcp_zone_lists")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemSdnConnectorGcpProjectListGcpZoneList(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdnConnectorNic(dict):
    def __init__(__self__, *,
                 ips: Optional[Sequence['outputs.SystemSdnConnectorNicIp']] = None,
                 name: Optional[str] = None):
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ips(self) -> Optional[Sequence['outputs.SystemSdnConnectorNicIp']]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdnConnectorNicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicIp":
            suggest = "public_ip"
        elif key == "resourceGroup":
            suggest = "resource_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdnConnectorNicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdnConnectorNicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdnConnectorNicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 public_ip: Optional[str] = None,
                 resource_group: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")


@pulumi.output_type
class SystemSdnConnectorOciRegionList(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class SystemSdnConnectorRoute(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdnConnectorRouteTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceGroup":
            suggest = "resource_group"
        elif key == "subscriptionId":
            suggest = "subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdnConnectorRouteTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdnConnectorRouteTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdnConnectorRouteTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 routes: Optional[Sequence['outputs.SystemSdnConnectorRouteTableRoute']] = None,
                 subscription_id: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.SystemSdnConnectorRouteTableRoute']]:
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class SystemSdnConnectorRouteTableRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextHop":
            suggest = "next_hop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdnConnectorRouteTableRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdnConnectorRouteTableRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdnConnectorRouteTableRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 next_hop: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[str]:
        return pulumi.get(self, "next_hop")


@pulumi.output_type
class SystemSdnConnectorServerList(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class SystemSdwanDuplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packetDeDuplication":
            suggest = "packet_de_duplication"
        elif key == "packetDuplication":
            suggest = "packet_duplication"
        elif key == "serviceIds":
            suggest = "service_ids"
        elif key == "slaMatchService":
            suggest = "sla_match_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanDuplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanDuplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanDuplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dstaddr6s: Optional[Sequence['outputs.SystemSdwanDuplicationDstaddr6']] = None,
                 dstaddrs: Optional[Sequence['outputs.SystemSdwanDuplicationDstaddr']] = None,
                 dstintfs: Optional[Sequence['outputs.SystemSdwanDuplicationDstintf']] = None,
                 id: Optional[int] = None,
                 packet_de_duplication: Optional[str] = None,
                 packet_duplication: Optional[str] = None,
                 service_ids: Optional[Sequence['outputs.SystemSdwanDuplicationServiceId']] = None,
                 services: Optional[Sequence['outputs.SystemSdwanDuplicationService']] = None,
                 sla_match_service: Optional[str] = None,
                 srcaddr6s: Optional[Sequence['outputs.SystemSdwanDuplicationSrcaddr6']] = None,
                 srcaddrs: Optional[Sequence['outputs.SystemSdwanDuplicationSrcaddr']] = None,
                 srcintfs: Optional[Sequence['outputs.SystemSdwanDuplicationSrcintf']] = None):
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if packet_de_duplication is not None:
            pulumi.set(__self__, "packet_de_duplication", packet_de_duplication)
        if packet_duplication is not None:
            pulumi.set(__self__, "packet_duplication", packet_duplication)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if sla_match_service is not None:
            pulumi.set(__self__, "sla_match_service", sla_match_service)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[Sequence['outputs.SystemSdwanDuplicationDstaddr6']]:
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[Sequence['outputs.SystemSdwanDuplicationDstaddr']]:
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[Sequence['outputs.SystemSdwanDuplicationDstintf']]:
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="packetDeDuplication")
    def packet_de_duplication(self) -> Optional[str]:
        return pulumi.get(self, "packet_de_duplication")

    @property
    @pulumi.getter(name="packetDuplication")
    def packet_duplication(self) -> Optional[str]:
        return pulumi.get(self, "packet_duplication")

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[Sequence['outputs.SystemSdwanDuplicationServiceId']]:
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence['outputs.SystemSdwanDuplicationService']]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="slaMatchService")
    def sla_match_service(self) -> Optional[str]:
        return pulumi.get(self, "sla_match_service")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[Sequence['outputs.SystemSdwanDuplicationSrcaddr6']]:
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[Sequence['outputs.SystemSdwanDuplicationSrcaddr']]:
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[Sequence['outputs.SystemSdwanDuplicationSrcintf']]:
        return pulumi.get(self, "srcintfs")


@pulumi.output_type
class SystemSdwanDuplicationDstaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanDuplicationDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanDuplicationDstintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanDuplicationService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanDuplicationServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemSdwanDuplicationSrcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanDuplicationSrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanDuplicationSrcintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanFailAlertInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "classId":
            suggest = "class_id"
        elif key == "detectMode":
            suggest = "detect_mode"
        elif key == "dnsMatchIp":
            suggest = "dns_match_ip"
        elif key == "dnsRequestDomain":
            suggest = "dns_request_domain"
        elif key == "embedMeasuredHealth":
            suggest = "embed_measured_health"
        elif key == "ftpFile":
            suggest = "ftp_file"
        elif key == "ftpMode":
            suggest = "ftp_mode"
        elif key == "haPriority":
            suggest = "ha_priority"
        elif key == "httpAgent":
            suggest = "http_agent"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "httpMatch":
            suggest = "http_match"
        elif key == "mosCodec":
            suggest = "mos_codec"
        elif key == "packetSize":
            suggest = "packet_size"
        elif key == "probeCount":
            suggest = "probe_count"
        elif key == "probePackets":
            suggest = "probe_packets"
        elif key == "probeTimeout":
            suggest = "probe_timeout"
        elif key == "qualityMeasuredMethod":
            suggest = "quality_measured_method"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "slaFailLogPeriod":
            suggest = "sla_fail_log_period"
        elif key == "slaIdRedistribute":
            suggest = "sla_id_redistribute"
        elif key == "slaPassLogPeriod":
            suggest = "sla_pass_log_period"
        elif key == "systemDns":
            suggest = "system_dns"
        elif key == "thresholdAlertJitter":
            suggest = "threshold_alert_jitter"
        elif key == "thresholdAlertLatency":
            suggest = "threshold_alert_latency"
        elif key == "thresholdAlertPacketloss":
            suggest = "threshold_alert_packetloss"
        elif key == "thresholdWarningJitter":
            suggest = "threshold_warning_jitter"
        elif key == "thresholdWarningLatency":
            suggest = "threshold_warning_latency"
        elif key == "thresholdWarningPacketloss":
            suggest = "threshold_warning_packetloss"
        elif key == "updateCascadeInterface":
            suggest = "update_cascade_interface"
        elif key == "updateStaticRoute":
            suggest = "update_static_route"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 class_id: Optional[int] = None,
                 detect_mode: Optional[str] = None,
                 diffservcode: Optional[str] = None,
                 dns_match_ip: Optional[str] = None,
                 dns_request_domain: Optional[str] = None,
                 embed_measured_health: Optional[str] = None,
                 failtime: Optional[int] = None,
                 ftp_file: Optional[str] = None,
                 ftp_mode: Optional[str] = None,
                 ha_priority: Optional[int] = None,
                 http_agent: Optional[str] = None,
                 http_get: Optional[str] = None,
                 http_match: Optional[str] = None,
                 interval: Optional[int] = None,
                 members: Optional[Sequence['outputs.SystemSdwanHealthCheckMember']] = None,
                 mos_codec: Optional[str] = None,
                 name: Optional[str] = None,
                 packet_size: Optional[int] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 probe_count: Optional[int] = None,
                 probe_packets: Optional[str] = None,
                 probe_timeout: Optional[int] = None,
                 protocol: Optional[str] = None,
                 quality_measured_method: Optional[str] = None,
                 recoverytime: Optional[int] = None,
                 security_mode: Optional[str] = None,
                 server: Optional[str] = None,
                 sla_fail_log_period: Optional[int] = None,
                 sla_id_redistribute: Optional[int] = None,
                 sla_pass_log_period: Optional[int] = None,
                 slas: Optional[Sequence['outputs.SystemSdwanHealthCheckSla']] = None,
                 source: Optional[str] = None,
                 source6: Optional[str] = None,
                 system_dns: Optional[str] = None,
                 threshold_alert_jitter: Optional[int] = None,
                 threshold_alert_latency: Optional[int] = None,
                 threshold_alert_packetloss: Optional[int] = None,
                 threshold_warning_jitter: Optional[int] = None,
                 threshold_warning_latency: Optional[int] = None,
                 threshold_warning_packetloss: Optional[int] = None,
                 update_cascade_interface: Optional[str] = None,
                 update_static_route: Optional[str] = None,
                 user: Optional[str] = None,
                 vrf: Optional[int] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if detect_mode is not None:
            pulumi.set(__self__, "detect_mode", detect_mode)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dns_match_ip is not None:
            pulumi.set(__self__, "dns_match_ip", dns_match_ip)
        if dns_request_domain is not None:
            pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        if embed_measured_health is not None:
            pulumi.set(__self__, "embed_measured_health", embed_measured_health)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if ftp_file is not None:
            pulumi.set(__self__, "ftp_file", ftp_file)
        if ftp_mode is not None:
            pulumi.set(__self__, "ftp_mode", ftp_mode)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if mos_codec is not None:
            pulumi.set(__self__, "mos_codec", mos_codec)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_packets is not None:
            pulumi.set(__self__, "probe_packets", probe_packets)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_measured_method is not None:
            pulumi.set(__self__, "quality_measured_method", quality_measured_method)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if sla_fail_log_period is not None:
            pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        if sla_id_redistribute is not None:
            pulumi.set(__self__, "sla_id_redistribute", sla_id_redistribute)
        if sla_pass_log_period is not None:
            pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if system_dns is not None:
            pulumi.set(__self__, "system_dns", system_dns)
        if threshold_alert_jitter is not None:
            pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        if threshold_alert_latency is not None:
            pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        if threshold_alert_packetloss is not None:
            pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        if threshold_warning_jitter is not None:
            pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        if threshold_warning_latency is not None:
            pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        if threshold_warning_packetloss is not None:
            pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[int]:
        return pulumi.get(self, "class_id")

    @property
    @pulumi.getter(name="detectMode")
    def detect_mode(self) -> Optional[str]:
        return pulumi.get(self, "detect_mode")

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[str]:
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dnsMatchIp")
    def dns_match_ip(self) -> Optional[str]:
        return pulumi.get(self, "dns_match_ip")

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> Optional[str]:
        return pulumi.get(self, "dns_request_domain")

    @property
    @pulumi.getter(name="embedMeasuredHealth")
    def embed_measured_health(self) -> Optional[str]:
        return pulumi.get(self, "embed_measured_health")

    @property
    @pulumi.getter
    def failtime(self) -> Optional[int]:
        return pulumi.get(self, "failtime")

    @property
    @pulumi.getter(name="ftpFile")
    def ftp_file(self) -> Optional[str]:
        return pulumi.get(self, "ftp_file")

    @property
    @pulumi.getter(name="ftpMode")
    def ftp_mode(self) -> Optional[str]:
        return pulumi.get(self, "ftp_mode")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[int]:
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[str]:
        return pulumi.get(self, "http_agent")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[str]:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[str]:
        return pulumi.get(self, "http_match")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.SystemSdwanHealthCheckMember']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="mosCodec")
    def mos_codec(self) -> Optional[str]:
        return pulumi.get(self, "mos_codec")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[int]:
        return pulumi.get(self, "packet_size")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[int]:
        return pulumi.get(self, "probe_count")

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> Optional[str]:
        return pulumi.get(self, "probe_packets")

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[int]:
        return pulumi.get(self, "probe_timeout")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="qualityMeasuredMethod")
    def quality_measured_method(self) -> Optional[str]:
        return pulumi.get(self, "quality_measured_method")

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[int]:
        return pulumi.get(self, "recoverytime")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> Optional[int]:
        return pulumi.get(self, "sla_fail_log_period")

    @property
    @pulumi.getter(name="slaIdRedistribute")
    def sla_id_redistribute(self) -> Optional[int]:
        return pulumi.get(self, "sla_id_redistribute")

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> Optional[int]:
        return pulumi.get(self, "sla_pass_log_period")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.SystemSdwanHealthCheckSla']]:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def source6(self) -> Optional[str]:
        return pulumi.get(self, "source6")

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> Optional[str]:
        return pulumi.get(self, "system_dns")

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> Optional[int]:
        return pulumi.get(self, "threshold_alert_jitter")

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> Optional[int]:
        return pulumi.get(self, "threshold_alert_latency")

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> Optional[int]:
        return pulumi.get(self, "threshold_alert_packetloss")

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> Optional[int]:
        return pulumi.get(self, "threshold_warning_jitter")

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> Optional[int]:
        return pulumi.get(self, "threshold_warning_latency")

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> Optional[int]:
        return pulumi.get(self, "threshold_warning_packetloss")

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[str]:
        return pulumi.get(self, "update_cascade_interface")

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[str]:
        return pulumi.get(self, "update_static_route")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[int]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class SystemSdwanHealthCheckMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanHealthCheckMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanHealthCheckMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanHealthCheckMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq_num: Optional[int] = None):
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class SystemSdwanHealthCheckSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jitterThreshold":
            suggest = "jitter_threshold"
        elif key == "latencyThreshold":
            suggest = "latency_threshold"
        elif key == "linkCostFactor":
            suggest = "link_cost_factor"
        elif key == "mosThreshold":
            suggest = "mos_threshold"
        elif key == "packetlossThreshold":
            suggest = "packetloss_threshold"
        elif key == "priorityInSla":
            suggest = "priority_in_sla"
        elif key == "priorityOutSla":
            suggest = "priority_out_sla"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanHealthCheckSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanHealthCheckSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanHealthCheckSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 jitter_threshold: Optional[int] = None,
                 latency_threshold: Optional[int] = None,
                 link_cost_factor: Optional[str] = None,
                 mos_threshold: Optional[str] = None,
                 packetloss_threshold: Optional[int] = None,
                 priority_in_sla: Optional[int] = None,
                 priority_out_sla: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if mos_threshold is not None:
            pulumi.set(__self__, "mos_threshold", mos_threshold)
        if packetloss_threshold is not None:
            pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)
        if priority_in_sla is not None:
            pulumi.set(__self__, "priority_in_sla", priority_in_sla)
        if priority_out_sla is not None:
            pulumi.set(__self__, "priority_out_sla", priority_out_sla)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[int]:
        return pulumi.get(self, "jitter_threshold")

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[int]:
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[str]:
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="mosThreshold")
    def mos_threshold(self) -> Optional[str]:
        return pulumi.get(self, "mos_threshold")

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> Optional[int]:
        return pulumi.get(self, "packetloss_threshold")

    @property
    @pulumi.getter(name="priorityInSla")
    def priority_in_sla(self) -> Optional[int]:
        return pulumi.get(self, "priority_in_sla")

    @property
    @pulumi.getter(name="priorityOutSla")
    def priority_out_sla(self) -> Optional[int]:
        return pulumi.get(self, "priority_out_sla")


@pulumi.output_type
class SystemSdwanMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressSpilloverThreshold":
            suggest = "ingress_spillover_threshold"
        elif key == "preferredSource":
            suggest = "preferred_source"
        elif key == "seqNum":
            suggest = "seq_num"
        elif key == "spilloverThreshold":
            suggest = "spillover_threshold"
        elif key == "volumeRatio":
            suggest = "volume_ratio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 cost: Optional[int] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 ingress_spillover_threshold: Optional[int] = None,
                 interface: Optional[str] = None,
                 preferred_source: Optional[str] = None,
                 priority: Optional[int] = None,
                 priority6: Optional[int] = None,
                 seq_num: Optional[int] = None,
                 source: Optional[str] = None,
                 source6: Optional[str] = None,
                 spillover_threshold: Optional[int] = None,
                 status: Optional[str] = None,
                 volume_ratio: Optional[int] = None,
                 weight: Optional[int] = None,
                 zone: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if preferred_source is not None:
            pulumi.set(__self__, "preferred_source", preferred_source)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority6 is not None:
            pulumi.set(__self__, "priority6", priority6)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if volume_ratio is not None:
            pulumi.set(__self__, "volume_ratio", volume_ratio)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[int]:
        return pulumi.get(self, "ingress_spillover_threshold")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="preferredSource")
    def preferred_source(self) -> Optional[str]:
        return pulumi.get(self, "preferred_source")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def priority6(self) -> Optional[int]:
        return pulumi.get(self, "priority6")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def source6(self) -> Optional[str]:
        return pulumi.get(self, "source6")

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[int]:
        return pulumi.get(self, "spillover_threshold")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> Optional[int]:
        return pulumi.get(self, "volume_ratio")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class SystemSdwanNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"
        elif key == "memberBlocks":
            suggest = "member_blocks"
        elif key == "minimumSlaMeetMembers":
            suggest = "minimum_sla_meet_members"
        elif key == "slaId":
            suggest = "sla_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health_check: Optional[str] = None,
                 ip: Optional[str] = None,
                 member: Optional[int] = None,
                 member_blocks: Optional[Sequence['outputs.SystemSdwanNeighborMemberBlock']] = None,
                 minimum_sla_meet_members: Optional[int] = None,
                 mode: Optional[str] = None,
                 role: Optional[str] = None,
                 sla_id: Optional[int] = None):
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if member_blocks is not None:
            pulumi.set(__self__, "member_blocks", member_blocks)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def member(self) -> Optional[int]:
        return pulumi.get(self, "member")

    @property
    @pulumi.getter(name="memberBlocks")
    def member_blocks(self) -> Optional[Sequence['outputs.SystemSdwanNeighborMemberBlock']]:
        return pulumi.get(self, "member_blocks")

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[int]:
        return pulumi.get(self, "minimum_sla_meet_members")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[int]:
        return pulumi.get(self, "sla_id")


@pulumi.output_type
class SystemSdwanNeighborMemberBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanNeighborMemberBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanNeighborMemberBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanNeighborMemberBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq_num: Optional[int] = None):
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class SystemSdwanService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "agentExclusive":
            suggest = "agent_exclusive"
        elif key == "bandwidthWeight":
            suggest = "bandwidth_weight"
        elif key == "dscpForward":
            suggest = "dscp_forward"
        elif key == "dscpForwardTag":
            suggest = "dscp_forward_tag"
        elif key == "dscpReverse":
            suggest = "dscp_reverse"
        elif key == "dscpReverseTag":
            suggest = "dscp_reverse_tag"
        elif key == "dstNegate":
            suggest = "dst_negate"
        elif key == "endPort":
            suggest = "end_port"
        elif key == "hashMode":
            suggest = "hash_mode"
        elif key == "healthChecks":
            suggest = "health_checks"
        elif key == "holdDownTime":
            suggest = "hold_down_time"
        elif key == "inputDeviceNegate":
            suggest = "input_device_negate"
        elif key == "inputDevices":
            suggest = "input_devices"
        elif key == "inputZones":
            suggest = "input_zones"
        elif key == "internetService":
            suggest = "internet_service"
        elif key == "internetServiceAppCtrlCategories":
            suggest = "internet_service_app_ctrl_categories"
        elif key == "internetServiceAppCtrlGroups":
            suggest = "internet_service_app_ctrl_groups"
        elif key == "internetServiceAppCtrls":
            suggest = "internet_service_app_ctrls"
        elif key == "internetServiceCustomGroups":
            suggest = "internet_service_custom_groups"
        elif key == "internetServiceCustoms":
            suggest = "internet_service_customs"
        elif key == "internetServiceGroups":
            suggest = "internet_service_groups"
        elif key == "internetServiceNames":
            suggest = "internet_service_names"
        elif key == "jitterWeight":
            suggest = "jitter_weight"
        elif key == "latencyWeight":
            suggest = "latency_weight"
        elif key == "linkCostFactor":
            suggest = "link_cost_factor"
        elif key == "linkCostThreshold":
            suggest = "link_cost_threshold"
        elif key == "minimumSlaMeetMembers":
            suggest = "minimum_sla_meet_members"
        elif key == "packetLossWeight":
            suggest = "packet_loss_weight"
        elif key == "passiveMeasurement":
            suggest = "passive_measurement"
        elif key == "priorityMembers":
            suggest = "priority_members"
        elif key == "priorityZones":
            suggest = "priority_zones"
        elif key == "qualityLink":
            suggest = "quality_link"
        elif key == "routeTag":
            suggest = "route_tag"
        elif key == "shortcutStickiness":
            suggest = "shortcut_stickiness"
        elif key == "slaCompareMethod":
            suggest = "sla_compare_method"
        elif key == "srcNegate":
            suggest = "src_negate"
        elif key == "standaloneAction":
            suggest = "standalone_action"
        elif key == "startPort":
            suggest = "start_port"
        elif key == "tieBreak":
            suggest = "tie_break"
        elif key == "tosMask":
            suggest = "tos_mask"
        elif key == "useShortcutSla":
            suggest = "use_shortcut_sla"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 agent_exclusive: Optional[str] = None,
                 bandwidth_weight: Optional[int] = None,
                 default: Optional[str] = None,
                 dscp_forward: Optional[str] = None,
                 dscp_forward_tag: Optional[str] = None,
                 dscp_reverse: Optional[str] = None,
                 dscp_reverse_tag: Optional[str] = None,
                 dst6s: Optional[Sequence['outputs.SystemSdwanServiceDst6']] = None,
                 dst_negate: Optional[str] = None,
                 dsts: Optional[Sequence['outputs.SystemSdwanServiceDst']] = None,
                 end_port: Optional[int] = None,
                 gateway: Optional[str] = None,
                 groups: Optional[Sequence['outputs.SystemSdwanServiceGroup']] = None,
                 hash_mode: Optional[str] = None,
                 health_checks: Optional[Sequence['outputs.SystemSdwanServiceHealthCheck']] = None,
                 hold_down_time: Optional[int] = None,
                 id: Optional[int] = None,
                 input_device_negate: Optional[str] = None,
                 input_devices: Optional[Sequence['outputs.SystemSdwanServiceInputDevice']] = None,
                 input_zones: Optional[Sequence['outputs.SystemSdwanServiceInputZone']] = None,
                 internet_service: Optional[str] = None,
                 internet_service_app_ctrl_categories: Optional[Sequence['outputs.SystemSdwanServiceInternetServiceAppCtrlCategory']] = None,
                 internet_service_app_ctrl_groups: Optional[Sequence['outputs.SystemSdwanServiceInternetServiceAppCtrlGroup']] = None,
                 internet_service_app_ctrls: Optional[Sequence['outputs.SystemSdwanServiceInternetServiceAppCtrl']] = None,
                 internet_service_custom_groups: Optional[Sequence['outputs.SystemSdwanServiceInternetServiceCustomGroup']] = None,
                 internet_service_customs: Optional[Sequence['outputs.SystemSdwanServiceInternetServiceCustom']] = None,
                 internet_service_groups: Optional[Sequence['outputs.SystemSdwanServiceInternetServiceGroup']] = None,
                 internet_service_names: Optional[Sequence['outputs.SystemSdwanServiceInternetServiceName']] = None,
                 jitter_weight: Optional[int] = None,
                 latency_weight: Optional[int] = None,
                 link_cost_factor: Optional[str] = None,
                 link_cost_threshold: Optional[int] = None,
                 minimum_sla_meet_members: Optional[int] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 packet_loss_weight: Optional[int] = None,
                 passive_measurement: Optional[str] = None,
                 priority_members: Optional[Sequence['outputs.SystemSdwanServicePriorityMember']] = None,
                 priority_zones: Optional[Sequence['outputs.SystemSdwanServicePriorityZone']] = None,
                 protocol: Optional[int] = None,
                 quality_link: Optional[int] = None,
                 role: Optional[str] = None,
                 route_tag: Optional[int] = None,
                 shortcut: Optional[str] = None,
                 shortcut_stickiness: Optional[str] = None,
                 sla_compare_method: Optional[str] = None,
                 slas: Optional[Sequence['outputs.SystemSdwanServiceSla']] = None,
                 src6s: Optional[Sequence['outputs.SystemSdwanServiceSrc6']] = None,
                 src_negate: Optional[str] = None,
                 srcs: Optional[Sequence['outputs.SystemSdwanServiceSrc']] = None,
                 standalone_action: Optional[str] = None,
                 start_port: Optional[int] = None,
                 status: Optional[str] = None,
                 tie_break: Optional[str] = None,
                 tos: Optional[str] = None,
                 tos_mask: Optional[str] = None,
                 use_shortcut_sla: Optional[str] = None,
                 users: Optional[Sequence['outputs.SystemSdwanServiceUser']] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if agent_exclusive is not None:
            pulumi.set(__self__, "agent_exclusive", agent_exclusive)
        if bandwidth_weight is not None:
            pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dscp_forward is not None:
            pulumi.set(__self__, "dscp_forward", dscp_forward)
        if dscp_forward_tag is not None:
            pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        if dscp_reverse is not None:
            pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        if dscp_reverse_tag is not None:
            pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if hash_mode is not None:
            pulumi.set(__self__, "hash_mode", hash_mode)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if input_zones is not None:
            pulumi.set(__self__, "input_zones", input_zones)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_app_ctrl_categories is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_categories", internet_service_app_ctrl_categories)
        if internet_service_app_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        if internet_service_app_ctrls is not None:
            pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if jitter_weight is not None:
            pulumi.set(__self__, "jitter_weight", jitter_weight)
        if latency_weight is not None:
            pulumi.set(__self__, "latency_weight", latency_weight)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if link_cost_threshold is not None:
            pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_loss_weight is not None:
            pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        if passive_measurement is not None:
            pulumi.set(__self__, "passive_measurement", passive_measurement)
        if priority_members is not None:
            pulumi.set(__self__, "priority_members", priority_members)
        if priority_zones is not None:
            pulumi.set(__self__, "priority_zones", priority_zones)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_link is not None:
            pulumi.set(__self__, "quality_link", quality_link)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if shortcut is not None:
            pulumi.set(__self__, "shortcut", shortcut)
        if shortcut_stickiness is not None:
            pulumi.set(__self__, "shortcut_stickiness", shortcut_stickiness)
        if sla_compare_method is not None:
            pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if src6s is not None:
            pulumi.set(__self__, "src6s", src6s)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if standalone_action is not None:
            pulumi.set(__self__, "standalone_action", standalone_action)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tie_break is not None:
            pulumi.set(__self__, "tie_break", tie_break)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if use_shortcut_sla is not None:
            pulumi.set(__self__, "use_shortcut_sla", use_shortcut_sla)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter(name="agentExclusive")
    def agent_exclusive(self) -> Optional[str]:
        return pulumi.get(self, "agent_exclusive")

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_weight")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> Optional[str]:
        return pulumi.get(self, "dscp_forward")

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> Optional[str]:
        return pulumi.get(self, "dscp_forward_tag")

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> Optional[str]:
        return pulumi.get(self, "dscp_reverse")

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> Optional[str]:
        return pulumi.get(self, "dscp_reverse_tag")

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[Sequence['outputs.SystemSdwanServiceDst6']]:
        return pulumi.get(self, "dst6s")

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[str]:
        return pulumi.get(self, "dst_negate")

    @property
    @pulumi.getter
    def dsts(self) -> Optional[Sequence['outputs.SystemSdwanServiceDst']]:
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.SystemSdwanServiceGroup']]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="hashMode")
    def hash_mode(self) -> Optional[str]:
        return pulumi.get(self, "hash_mode")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[Sequence['outputs.SystemSdwanServiceHealthCheck']]:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[int]:
        return pulumi.get(self, "hold_down_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[str]:
        return pulumi.get(self, "input_device_negate")

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[Sequence['outputs.SystemSdwanServiceInputDevice']]:
        return pulumi.get(self, "input_devices")

    @property
    @pulumi.getter(name="inputZones")
    def input_zones(self) -> Optional[Sequence['outputs.SystemSdwanServiceInputZone']]:
        return pulumi.get(self, "input_zones")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[str]:
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceAppCtrlCategories")
    def internet_service_app_ctrl_categories(self) -> Optional[Sequence['outputs.SystemSdwanServiceInternetServiceAppCtrlCategory']]:
        return pulumi.get(self, "internet_service_app_ctrl_categories")

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Optional[Sequence['outputs.SystemSdwanServiceInternetServiceAppCtrlGroup']]:
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Optional[Sequence['outputs.SystemSdwanServiceInternetServiceAppCtrl']]:
        return pulumi.get(self, "internet_service_app_ctrls")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[Sequence['outputs.SystemSdwanServiceInternetServiceCustomGroup']]:
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[Sequence['outputs.SystemSdwanServiceInternetServiceCustom']]:
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[Sequence['outputs.SystemSdwanServiceInternetServiceGroup']]:
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[Sequence['outputs.SystemSdwanServiceInternetServiceName']]:
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> Optional[int]:
        return pulumi.get(self, "jitter_weight")

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> Optional[int]:
        return pulumi.get(self, "latency_weight")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[str]:
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> Optional[int]:
        return pulumi.get(self, "link_cost_threshold")

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[int]:
        return pulumi.get(self, "minimum_sla_meet_members")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> Optional[int]:
        return pulumi.get(self, "packet_loss_weight")

    @property
    @pulumi.getter(name="passiveMeasurement")
    def passive_measurement(self) -> Optional[str]:
        return pulumi.get(self, "passive_measurement")

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Optional[Sequence['outputs.SystemSdwanServicePriorityMember']]:
        return pulumi.get(self, "priority_members")

    @property
    @pulumi.getter(name="priorityZones")
    def priority_zones(self) -> Optional[Sequence['outputs.SystemSdwanServicePriorityZone']]:
        return pulumi.get(self, "priority_zones")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> Optional[int]:
        return pulumi.get(self, "quality_link")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[int]:
        return pulumi.get(self, "route_tag")

    @property
    @pulumi.getter
    def shortcut(self) -> Optional[str]:
        return pulumi.get(self, "shortcut")

    @property
    @pulumi.getter(name="shortcutStickiness")
    def shortcut_stickiness(self) -> Optional[str]:
        return pulumi.get(self, "shortcut_stickiness")

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> Optional[str]:
        return pulumi.get(self, "sla_compare_method")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.SystemSdwanServiceSla']]:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter
    def src6s(self) -> Optional[Sequence['outputs.SystemSdwanServiceSrc6']]:
        return pulumi.get(self, "src6s")

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[str]:
        return pulumi.get(self, "src_negate")

    @property
    @pulumi.getter
    def srcs(self) -> Optional[Sequence['outputs.SystemSdwanServiceSrc']]:
        return pulumi.get(self, "srcs")

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> Optional[str]:
        return pulumi.get(self, "standalone_action")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tieBreak")
    def tie_break(self) -> Optional[str]:
        return pulumi.get(self, "tie_break")

    @property
    @pulumi.getter
    def tos(self) -> Optional[str]:
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[str]:
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter(name="useShortcutSla")
    def use_shortcut_sla(self) -> Optional[str]:
        return pulumi.get(self, "use_shortcut_sla")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.SystemSdwanServiceUser']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class SystemSdwanServiceDst6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceDst(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceHealthCheck(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceInputDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceInputZone(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceInternetServiceAppCtrl(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemSdwanServiceInternetServiceAppCtrlCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemSdwanServiceInternetServiceAppCtrlGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceInternetServiceCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceInternetServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceInternetServiceName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServicePriorityMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanServicePriorityMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanServicePriorityMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanServicePriorityMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq_num: Optional[int] = None):
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class SystemSdwanServicePriorityZone(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanServiceSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanServiceSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanServiceSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health_check: Optional[str] = None,
                 id: Optional[int] = None):
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemSdwanServiceSrc6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceSrc(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanServiceUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSdwanZone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceSlaTieBreak":
            suggest = "service_sla_tie_break"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSdwanZone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSdwanZone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSdwanZone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 service_sla_tie_break: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_sla_tie_break is not None:
            pulumi.set(__self__, "service_sla_tie_break", service_sla_tie_break)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceSlaTieBreak")
    def service_sla_tie_break(self) -> Optional[str]:
        return pulumi.get(self, "service_sla_tie_break")


@pulumi.output_type
class SystemSessionTtlPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSessionTtlPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSessionTtlPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSessionTtlPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 id: Optional[int] = None,
                 protocol: Optional[int] = None,
                 start_port: Optional[int] = None,
                 timeout: Optional[str] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class SystemSettingsGuiDefaultPolicyColumn(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSnmpCommunityHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "haDirect":
            suggest = "ha_direct"
        elif key == "hostType":
            suggest = "host_type"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSnmpCommunityHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSnmpCommunityHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSnmpCommunityHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ha_direct: Optional[str] = None,
                 host_type: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 source_ip: Optional[str] = None):
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[str]:
        return pulumi.get(self, "ha_direct")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[str]:
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class SystemSnmpCommunityHosts6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "haDirect":
            suggest = "ha_direct"
        elif key == "hostType":
            suggest = "host_type"
        elif key == "sourceIpv6":
            suggest = "source_ipv6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSnmpCommunityHosts6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSnmpCommunityHosts6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSnmpCommunityHosts6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ha_direct: Optional[str] = None,
                 host_type: Optional[str] = None,
                 id: Optional[int] = None,
                 ipv6: Optional[str] = None,
                 source_ipv6: Optional[str] = None):
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if source_ipv6 is not None:
            pulumi.set(__self__, "source_ipv6", source_ipv6)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[str]:
        return pulumi.get(self, "ha_direct")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[str]:
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[str]:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> Optional[str]:
        return pulumi.get(self, "source_ipv6")


@pulumi.output_type
class SystemSnmpCommunityVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSnmpUserVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSpeedTestScheduleSchedule(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSpeedTestServerHost(dict):
    def __init__(__self__, *,
                 distance: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 latitude: Optional[str] = None,
                 longitude: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 user: Optional[str] = None):
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def distance(self) -> Optional[int]:
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def latitude(self) -> Optional[str]:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> Optional[str]:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")


@pulumi.output_type
class SystemSsoAdminVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSsoForticloudAdminVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSsoFortigateCloudAdminVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemStandaloneClusterClusterPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downIntfsBeforeSessSyncs":
            suggest = "down_intfs_before_sess_syncs"
        elif key == "hbInterval":
            suggest = "hb_interval"
        elif key == "hbLostThreshold":
            suggest = "hb_lost_threshold"
        elif key == "ipsecTunnelSync":
            suggest = "ipsec_tunnel_sync"
        elif key == "secondaryAddIpsecRoutes":
            suggest = "secondary_add_ipsec_routes"
        elif key == "sessionSyncFilter":
            suggest = "session_sync_filter"
        elif key == "syncId":
            suggest = "sync_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemStandaloneClusterClusterPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemStandaloneClusterClusterPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemStandaloneClusterClusterPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 down_intfs_before_sess_syncs: Optional[Sequence['outputs.SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSync']] = None,
                 hb_interval: Optional[int] = None,
                 hb_lost_threshold: Optional[int] = None,
                 ipsec_tunnel_sync: Optional[str] = None,
                 peerip: Optional[str] = None,
                 peervd: Optional[str] = None,
                 secondary_add_ipsec_routes: Optional[str] = None,
                 session_sync_filter: Optional['outputs.SystemStandaloneClusterClusterPeerSessionSyncFilter'] = None,
                 sync_id: Optional[int] = None,
                 syncvds: Optional[Sequence['outputs.SystemStandaloneClusterClusterPeerSyncvd']] = None):
        if down_intfs_before_sess_syncs is not None:
            pulumi.set(__self__, "down_intfs_before_sess_syncs", down_intfs_before_sess_syncs)
        if hb_interval is not None:
            pulumi.set(__self__, "hb_interval", hb_interval)
        if hb_lost_threshold is not None:
            pulumi.set(__self__, "hb_lost_threshold", hb_lost_threshold)
        if ipsec_tunnel_sync is not None:
            pulumi.set(__self__, "ipsec_tunnel_sync", ipsec_tunnel_sync)
        if peerip is not None:
            pulumi.set(__self__, "peerip", peerip)
        if peervd is not None:
            pulumi.set(__self__, "peervd", peervd)
        if secondary_add_ipsec_routes is not None:
            pulumi.set(__self__, "secondary_add_ipsec_routes", secondary_add_ipsec_routes)
        if session_sync_filter is not None:
            pulumi.set(__self__, "session_sync_filter", session_sync_filter)
        if sync_id is not None:
            pulumi.set(__self__, "sync_id", sync_id)
        if syncvds is not None:
            pulumi.set(__self__, "syncvds", syncvds)

    @property
    @pulumi.getter(name="downIntfsBeforeSessSyncs")
    def down_intfs_before_sess_syncs(self) -> Optional[Sequence['outputs.SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSync']]:
        return pulumi.get(self, "down_intfs_before_sess_syncs")

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> Optional[int]:
        return pulumi.get(self, "hb_interval")

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> Optional[int]:
        return pulumi.get(self, "hb_lost_threshold")

    @property
    @pulumi.getter(name="ipsecTunnelSync")
    def ipsec_tunnel_sync(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_tunnel_sync")

    @property
    @pulumi.getter
    def peerip(self) -> Optional[str]:
        return pulumi.get(self, "peerip")

    @property
    @pulumi.getter
    def peervd(self) -> Optional[str]:
        return pulumi.get(self, "peervd")

    @property
    @pulumi.getter(name="secondaryAddIpsecRoutes")
    def secondary_add_ipsec_routes(self) -> Optional[str]:
        return pulumi.get(self, "secondary_add_ipsec_routes")

    @property
    @pulumi.getter(name="sessionSyncFilter")
    def session_sync_filter(self) -> Optional['outputs.SystemStandaloneClusterClusterPeerSessionSyncFilter']:
        return pulumi.get(self, "session_sync_filter")

    @property
    @pulumi.getter(name="syncId")
    def sync_id(self) -> Optional[int]:
        return pulumi.get(self, "sync_id")

    @property
    @pulumi.getter
    def syncvds(self) -> Optional[Sequence['outputs.SystemStandaloneClusterClusterPeerSyncvd']]:
        return pulumi.get(self, "syncvds")


@pulumi.output_type
class SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSync(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemStandaloneClusterClusterPeerSessionSyncFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customServices":
            suggest = "custom_services"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemStandaloneClusterClusterPeerSessionSyncFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemStandaloneClusterClusterPeerSessionSyncFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemStandaloneClusterClusterPeerSessionSyncFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_services: Optional[Sequence['outputs.SystemStandaloneClusterClusterPeerSessionSyncFilterCustomService']] = None,
                 dstaddr: Optional[str] = None,
                 dstaddr6: Optional[str] = None,
                 dstintf: Optional[str] = None,
                 srcaddr: Optional[str] = None,
                 srcaddr6: Optional[str] = None,
                 srcintf: Optional[str] = None):
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstaddr6 is not None:
            pulumi.set(__self__, "dstaddr6", dstaddr6)
        if dstintf is not None:
            pulumi.set(__self__, "dstintf", dstintf)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcaddr6 is not None:
            pulumi.set(__self__, "srcaddr6", srcaddr6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.SystemStandaloneClusterClusterPeerSessionSyncFilterCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[str]:
        return pulumi.get(self, "dstaddr")

    @property
    @pulumi.getter
    def dstaddr6(self) -> Optional[str]:
        return pulumi.get(self, "dstaddr6")

    @property
    @pulumi.getter
    def dstintf(self) -> Optional[str]:
        return pulumi.get(self, "dstintf")

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[str]:
        return pulumi.get(self, "srcaddr")

    @property
    @pulumi.getter
    def srcaddr6(self) -> Optional[str]:
        return pulumi.get(self, "srcaddr6")

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[str]:
        return pulumi.get(self, "srcintf")


@pulumi.output_type
class SystemStandaloneClusterClusterPeerSessionSyncFilterCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstPortRange":
            suggest = "dst_port_range"
        elif key == "srcPortRange":
            suggest = "src_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemStandaloneClusterClusterPeerSessionSyncFilterCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemStandaloneClusterClusterPeerSessionSyncFilterCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemStandaloneClusterClusterPeerSessionSyncFilterCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_port_range: Optional[str] = None,
                 id: Optional[int] = None,
                 src_port_range: Optional[str] = None):
        if dst_port_range is not None:
            pulumi.set(__self__, "dst_port_range", dst_port_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_port_range is not None:
            pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> Optional[str]:
        return pulumi.get(self, "dst_port_range")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> Optional[str]:
        return pulumi.get(self, "src_port_range")


@pulumi.output_type
class SystemStandaloneClusterClusterPeerSyncvd(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemSwitchInterfaceMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSwitchInterfaceMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSwitchInterfaceMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSwitchInterfaceMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SystemSwitchInterfaceSpanSourcePort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSwitchInterfaceSpanSourcePort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSwitchInterfaceSpanSourcePort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSwitchInterfaceSpanSourcePort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SystemVdomDnsServerHostname(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class SystemVdomExceptionVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualSwitchPort(dict):
    def __init__(__self__, *,
                 alias: Optional[str] = None,
                 name: Optional[str] = None):
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkFailAlertInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "dnsRequestDomain":
            suggest = "dns_request_domain"
        elif key == "haPriority":
            suggest = "ha_priority"
        elif key == "httpAgent":
            suggest = "http_agent"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "httpMatch":
            suggest = "http_match"
        elif key == "packetSize":
            suggest = "packet_size"
        elif key == "probeCount":
            suggest = "probe_count"
        elif key == "probePackets":
            suggest = "probe_packets"
        elif key == "probeTimeout":
            suggest = "probe_timeout"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "slaFailLogPeriod":
            suggest = "sla_fail_log_period"
        elif key == "slaPassLogPeriod":
            suggest = "sla_pass_log_period"
        elif key == "systemDns":
            suggest = "system_dns"
        elif key == "thresholdAlertJitter":
            suggest = "threshold_alert_jitter"
        elif key == "thresholdAlertLatency":
            suggest = "threshold_alert_latency"
        elif key == "thresholdAlertPacketloss":
            suggest = "threshold_alert_packetloss"
        elif key == "thresholdWarningJitter":
            suggest = "threshold_warning_jitter"
        elif key == "thresholdWarningLatency":
            suggest = "threshold_warning_latency"
        elif key == "thresholdWarningPacketloss":
            suggest = "threshold_warning_packetloss"
        elif key == "updateCascadeInterface":
            suggest = "update_cascade_interface"
        elif key == "updateStaticRoute":
            suggest = "update_static_route"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemVirtualWanLinkHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemVirtualWanLinkHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemVirtualWanLinkHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 diffservcode: Optional[str] = None,
                 dns_request_domain: Optional[str] = None,
                 failtime: Optional[int] = None,
                 ha_priority: Optional[int] = None,
                 http_agent: Optional[str] = None,
                 http_get: Optional[str] = None,
                 http_match: Optional[str] = None,
                 interval: Optional[int] = None,
                 members: Optional[Sequence['outputs.SystemVirtualWanLinkHealthCheckMember']] = None,
                 name: Optional[str] = None,
                 packet_size: Optional[int] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 probe_count: Optional[int] = None,
                 probe_packets: Optional[str] = None,
                 probe_timeout: Optional[int] = None,
                 protocol: Optional[str] = None,
                 recoverytime: Optional[int] = None,
                 security_mode: Optional[str] = None,
                 server: Optional[str] = None,
                 sla_fail_log_period: Optional[int] = None,
                 sla_pass_log_period: Optional[int] = None,
                 slas: Optional[Sequence['outputs.SystemVirtualWanLinkHealthCheckSla']] = None,
                 system_dns: Optional[str] = None,
                 threshold_alert_jitter: Optional[int] = None,
                 threshold_alert_latency: Optional[int] = None,
                 threshold_alert_packetloss: Optional[int] = None,
                 threshold_warning_jitter: Optional[int] = None,
                 threshold_warning_latency: Optional[int] = None,
                 threshold_warning_packetloss: Optional[int] = None,
                 update_cascade_interface: Optional[str] = None,
                 update_static_route: Optional[str] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dns_request_domain is not None:
            pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_packets is not None:
            pulumi.set(__self__, "probe_packets", probe_packets)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if sla_fail_log_period is not None:
            pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        if sla_pass_log_period is not None:
            pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if system_dns is not None:
            pulumi.set(__self__, "system_dns", system_dns)
        if threshold_alert_jitter is not None:
            pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        if threshold_alert_latency is not None:
            pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        if threshold_alert_packetloss is not None:
            pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        if threshold_warning_jitter is not None:
            pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        if threshold_warning_latency is not None:
            pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        if threshold_warning_packetloss is not None:
            pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[str]:
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> Optional[str]:
        return pulumi.get(self, "dns_request_domain")

    @property
    @pulumi.getter
    def failtime(self) -> Optional[int]:
        return pulumi.get(self, "failtime")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[int]:
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[str]:
        return pulumi.get(self, "http_agent")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[str]:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[str]:
        return pulumi.get(self, "http_match")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkHealthCheckMember']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[int]:
        return pulumi.get(self, "packet_size")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[int]:
        return pulumi.get(self, "probe_count")

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> Optional[str]:
        return pulumi.get(self, "probe_packets")

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[int]:
        return pulumi.get(self, "probe_timeout")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[int]:
        return pulumi.get(self, "recoverytime")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> Optional[int]:
        return pulumi.get(self, "sla_fail_log_period")

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> Optional[int]:
        return pulumi.get(self, "sla_pass_log_period")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkHealthCheckSla']]:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> Optional[str]:
        return pulumi.get(self, "system_dns")

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> Optional[int]:
        return pulumi.get(self, "threshold_alert_jitter")

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> Optional[int]:
        return pulumi.get(self, "threshold_alert_latency")

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> Optional[int]:
        return pulumi.get(self, "threshold_alert_packetloss")

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> Optional[int]:
        return pulumi.get(self, "threshold_warning_jitter")

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> Optional[int]:
        return pulumi.get(self, "threshold_warning_latency")

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> Optional[int]:
        return pulumi.get(self, "threshold_warning_packetloss")

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[str]:
        return pulumi.get(self, "update_cascade_interface")

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[str]:
        return pulumi.get(self, "update_static_route")


@pulumi.output_type
class SystemVirtualWanLinkHealthCheckMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemVirtualWanLinkHealthCheckMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemVirtualWanLinkHealthCheckMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemVirtualWanLinkHealthCheckMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq_num: Optional[int] = None):
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class SystemVirtualWanLinkHealthCheckSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jitterThreshold":
            suggest = "jitter_threshold"
        elif key == "latencyThreshold":
            suggest = "latency_threshold"
        elif key == "linkCostFactor":
            suggest = "link_cost_factor"
        elif key == "packetlossThreshold":
            suggest = "packetloss_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemVirtualWanLinkHealthCheckSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemVirtualWanLinkHealthCheckSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemVirtualWanLinkHealthCheckSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 jitter_threshold: Optional[int] = None,
                 latency_threshold: Optional[int] = None,
                 link_cost_factor: Optional[str] = None,
                 packetloss_threshold: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if packetloss_threshold is not None:
            pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[int]:
        return pulumi.get(self, "jitter_threshold")

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[int]:
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[str]:
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> Optional[int]:
        return pulumi.get(self, "packetloss_threshold")


@pulumi.output_type
class SystemVirtualWanLinkMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressSpilloverThreshold":
            suggest = "ingress_spillover_threshold"
        elif key == "seqNum":
            suggest = "seq_num"
        elif key == "spilloverThreshold":
            suggest = "spillover_threshold"
        elif key == "volumeRatio":
            suggest = "volume_ratio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemVirtualWanLinkMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemVirtualWanLinkMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemVirtualWanLinkMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 cost: Optional[int] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 ingress_spillover_threshold: Optional[int] = None,
                 interface: Optional[str] = None,
                 priority: Optional[int] = None,
                 seq_num: Optional[int] = None,
                 source: Optional[str] = None,
                 source6: Optional[str] = None,
                 spillover_threshold: Optional[int] = None,
                 status: Optional[str] = None,
                 volume_ratio: Optional[int] = None,
                 weight: Optional[int] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if volume_ratio is not None:
            pulumi.set(__self__, "volume_ratio", volume_ratio)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[int]:
        return pulumi.get(self, "ingress_spillover_threshold")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def source6(self) -> Optional[str]:
        return pulumi.get(self, "source6")

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[int]:
        return pulumi.get(self, "spillover_threshold")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> Optional[int]:
        return pulumi.get(self, "volume_ratio")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class SystemVirtualWanLinkNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"
        elif key == "slaId":
            suggest = "sla_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemVirtualWanLinkNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemVirtualWanLinkNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemVirtualWanLinkNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health_check: Optional[str] = None,
                 ip: Optional[str] = None,
                 member: Optional[int] = None,
                 role: Optional[str] = None,
                 sla_id: Optional[int] = None):
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def member(self) -> Optional[int]:
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[int]:
        return pulumi.get(self, "sla_id")


@pulumi.output_type
class SystemVirtualWanLinkService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "bandwidthWeight":
            suggest = "bandwidth_weight"
        elif key == "dscpForward":
            suggest = "dscp_forward"
        elif key == "dscpForwardTag":
            suggest = "dscp_forward_tag"
        elif key == "dscpReverse":
            suggest = "dscp_reverse"
        elif key == "dscpReverseTag":
            suggest = "dscp_reverse_tag"
        elif key == "dstNegate":
            suggest = "dst_negate"
        elif key == "endPort":
            suggest = "end_port"
        elif key == "healthCheck":
            suggest = "health_check"
        elif key == "holdDownTime":
            suggest = "hold_down_time"
        elif key == "inputDeviceNegate":
            suggest = "input_device_negate"
        elif key == "inputDevices":
            suggest = "input_devices"
        elif key == "internetService":
            suggest = "internet_service"
        elif key == "internetServiceAppCtrlGroups":
            suggest = "internet_service_app_ctrl_groups"
        elif key == "internetServiceAppCtrls":
            suggest = "internet_service_app_ctrls"
        elif key == "internetServiceCtrlGroups":
            suggest = "internet_service_ctrl_groups"
        elif key == "internetServiceCtrls":
            suggest = "internet_service_ctrls"
        elif key == "internetServiceCustomGroups":
            suggest = "internet_service_custom_groups"
        elif key == "internetServiceCustoms":
            suggest = "internet_service_customs"
        elif key == "internetServiceGroups":
            suggest = "internet_service_groups"
        elif key == "internetServiceIds":
            suggest = "internet_service_ids"
        elif key == "internetServiceNames":
            suggest = "internet_service_names"
        elif key == "jitterWeight":
            suggest = "jitter_weight"
        elif key == "latencyWeight":
            suggest = "latency_weight"
        elif key == "linkCostFactor":
            suggest = "link_cost_factor"
        elif key == "linkCostThreshold":
            suggest = "link_cost_threshold"
        elif key == "packetLossWeight":
            suggest = "packet_loss_weight"
        elif key == "priorityMembers":
            suggest = "priority_members"
        elif key == "qualityLink":
            suggest = "quality_link"
        elif key == "routeTag":
            suggest = "route_tag"
        elif key == "slaCompareMethod":
            suggest = "sla_compare_method"
        elif key == "srcNegate":
            suggest = "src_negate"
        elif key == "standaloneAction":
            suggest = "standalone_action"
        elif key == "startPort":
            suggest = "start_port"
        elif key == "tosMask":
            suggest = "tos_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemVirtualWanLinkService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemVirtualWanLinkService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemVirtualWanLinkService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 bandwidth_weight: Optional[int] = None,
                 default: Optional[str] = None,
                 dscp_forward: Optional[str] = None,
                 dscp_forward_tag: Optional[str] = None,
                 dscp_reverse: Optional[str] = None,
                 dscp_reverse_tag: Optional[str] = None,
                 dst6s: Optional[Sequence['outputs.SystemVirtualWanLinkServiceDst6']] = None,
                 dst_negate: Optional[str] = None,
                 dsts: Optional[Sequence['outputs.SystemVirtualWanLinkServiceDst']] = None,
                 end_port: Optional[int] = None,
                 gateway: Optional[str] = None,
                 groups: Optional[Sequence['outputs.SystemVirtualWanLinkServiceGroup']] = None,
                 health_check: Optional[str] = None,
                 hold_down_time: Optional[int] = None,
                 id: Optional[int] = None,
                 input_device_negate: Optional[str] = None,
                 input_devices: Optional[Sequence['outputs.SystemVirtualWanLinkServiceInputDevice']] = None,
                 internet_service: Optional[str] = None,
                 internet_service_app_ctrl_groups: Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceAppCtrlGroup']] = None,
                 internet_service_app_ctrls: Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceAppCtrl']] = None,
                 internet_service_ctrl_groups: Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceCtrlGroup']] = None,
                 internet_service_ctrls: Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceCtrl']] = None,
                 internet_service_custom_groups: Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceCustomGroup']] = None,
                 internet_service_customs: Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceCustom']] = None,
                 internet_service_groups: Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceGroup']] = None,
                 internet_service_ids: Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceId']] = None,
                 internet_service_names: Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceName']] = None,
                 jitter_weight: Optional[int] = None,
                 latency_weight: Optional[int] = None,
                 link_cost_factor: Optional[str] = None,
                 link_cost_threshold: Optional[int] = None,
                 member: Optional[int] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 packet_loss_weight: Optional[int] = None,
                 priority_members: Optional[Sequence['outputs.SystemVirtualWanLinkServicePriorityMember']] = None,
                 protocol: Optional[int] = None,
                 quality_link: Optional[int] = None,
                 role: Optional[str] = None,
                 route_tag: Optional[int] = None,
                 sla_compare_method: Optional[str] = None,
                 slas: Optional[Sequence['outputs.SystemVirtualWanLinkServiceSla']] = None,
                 src6s: Optional[Sequence['outputs.SystemVirtualWanLinkServiceSrc6']] = None,
                 src_negate: Optional[str] = None,
                 srcs: Optional[Sequence['outputs.SystemVirtualWanLinkServiceSrc']] = None,
                 standalone_action: Optional[str] = None,
                 start_port: Optional[int] = None,
                 status: Optional[str] = None,
                 tos: Optional[str] = None,
                 tos_mask: Optional[str] = None,
                 users: Optional[Sequence['outputs.SystemVirtualWanLinkServiceUser']] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if bandwidth_weight is not None:
            pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dscp_forward is not None:
            pulumi.set(__self__, "dscp_forward", dscp_forward)
        if dscp_forward_tag is not None:
            pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        if dscp_reverse is not None:
            pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        if dscp_reverse_tag is not None:
            pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_app_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        if internet_service_app_ctrls is not None:
            pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        if internet_service_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_ctrl_groups", internet_service_ctrl_groups)
        if internet_service_ctrls is not None:
            pulumi.set(__self__, "internet_service_ctrls", internet_service_ctrls)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if jitter_weight is not None:
            pulumi.set(__self__, "jitter_weight", jitter_weight)
        if latency_weight is not None:
            pulumi.set(__self__, "latency_weight", latency_weight)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if link_cost_threshold is not None:
            pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_loss_weight is not None:
            pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        if priority_members is not None:
            pulumi.set(__self__, "priority_members", priority_members)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_link is not None:
            pulumi.set(__self__, "quality_link", quality_link)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if sla_compare_method is not None:
            pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if src6s is not None:
            pulumi.set(__self__, "src6s", src6s)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if standalone_action is not None:
            pulumi.set(__self__, "standalone_action", standalone_action)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_weight")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> Optional[str]:
        return pulumi.get(self, "dscp_forward")

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> Optional[str]:
        return pulumi.get(self, "dscp_forward_tag")

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> Optional[str]:
        return pulumi.get(self, "dscp_reverse")

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> Optional[str]:
        return pulumi.get(self, "dscp_reverse_tag")

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceDst6']]:
        return pulumi.get(self, "dst6s")

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[str]:
        return pulumi.get(self, "dst_negate")

    @property
    @pulumi.getter
    def dsts(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceDst']]:
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceGroup']]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[int]:
        return pulumi.get(self, "hold_down_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[str]:
        return pulumi.get(self, "input_device_negate")

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceInputDevice']]:
        return pulumi.get(self, "input_devices")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[str]:
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceAppCtrlGroup']]:
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceAppCtrl']]:
        return pulumi.get(self, "internet_service_app_ctrls")

    @property
    @pulumi.getter(name="internetServiceCtrlGroups")
    def internet_service_ctrl_groups(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceCtrlGroup']]:
        return pulumi.get(self, "internet_service_ctrl_groups")

    @property
    @pulumi.getter(name="internetServiceCtrls")
    def internet_service_ctrls(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceCtrl']]:
        return pulumi.get(self, "internet_service_ctrls")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceCustomGroup']]:
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceCustom']]:
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceGroup']]:
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceId']]:
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceInternetServiceName']]:
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> Optional[int]:
        return pulumi.get(self, "jitter_weight")

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> Optional[int]:
        return pulumi.get(self, "latency_weight")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[str]:
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> Optional[int]:
        return pulumi.get(self, "link_cost_threshold")

    @property
    @pulumi.getter
    def member(self) -> Optional[int]:
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> Optional[int]:
        return pulumi.get(self, "packet_loss_weight")

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServicePriorityMember']]:
        return pulumi.get(self, "priority_members")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> Optional[int]:
        return pulumi.get(self, "quality_link")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[int]:
        return pulumi.get(self, "route_tag")

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> Optional[str]:
        return pulumi.get(self, "sla_compare_method")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceSla']]:
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter
    def src6s(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceSrc6']]:
        return pulumi.get(self, "src6s")

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[str]:
        return pulumi.get(self, "src_negate")

    @property
    @pulumi.getter
    def srcs(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceSrc']]:
        return pulumi.get(self, "srcs")

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> Optional[str]:
        return pulumi.get(self, "standalone_action")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tos(self) -> Optional[str]:
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[str]:
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.SystemVirtualWanLinkServiceUser']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class SystemVirtualWanLinkServiceDst6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceDst(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceInputDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceInternetServiceAppCtrl(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemVirtualWanLinkServiceInternetServiceAppCtrlGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceInternetServiceCtrl(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemVirtualWanLinkServiceInternetServiceCtrlGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceInternetServiceCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceInternetServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceInternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemVirtualWanLinkServiceInternetServiceName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServicePriorityMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemVirtualWanLinkServicePriorityMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemVirtualWanLinkServicePriorityMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemVirtualWanLinkServicePriorityMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq_num: Optional[int] = None):
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class SystemVirtualWanLinkServiceSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemVirtualWanLinkServiceSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemVirtualWanLinkServiceSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemVirtualWanLinkServiceSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health_check: Optional[str] = None,
                 id: Optional[int] = None):
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class SystemVirtualWanLinkServiceSrc6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceSrc(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkServiceUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWanLinkZone(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemVirtualWirePairMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemVirtualWirePairMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemVirtualWirePairMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemVirtualWirePairMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SystemVxlanRemoteIp6(dict):
    def __init__(__self__, *,
                 ip6: Optional[str] = None):
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        return pulumi.get(self, "ip6")


@pulumi.output_type
class SystemVxlanRemoteIp(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class SystemZoneInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemZoneInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemZoneInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemZoneInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SystemZoneTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.SystemZoneTaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.SystemZoneTaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class SystemZoneTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserDeviceAccessListDeviceList(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 device: Optional[str] = None,
                 id: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class UserDeviceGroupMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserDeviceGroupTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.UserDeviceGroupTaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.UserDeviceGroupTaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class UserDeviceGroupTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserDeviceTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.UserDeviceTaggingTag']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.UserDeviceTaggingTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class UserDeviceTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserDomainControllerExtraServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "sourceIpAddress":
            suggest = "source_ip_address"
        elif key == "sourcePort":
            suggest = "source_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserDomainControllerExtraServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserDomainControllerExtraServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserDomainControllerExtraServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 port: Optional[int] = None,
                 source_ip_address: Optional[str] = None,
                 source_port: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if source_ip_address is not None:
            pulumi.set(__self__, "source_ip_address", source_ip_address)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "source_ip_address")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[int]:
        return pulumi.get(self, "source_port")


@pulumi.output_type
class UserExchangeKdcIp(dict):
    def __init__(__self__, *,
                 ipv4: Optional[str] = None):
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[str]:
        return pulumi.get(self, "ipv4")


@pulumi.output_type
class UserFssoPollingAdgrp(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserGroupGuest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mobilePhone":
            suggest = "mobile_phone"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserGroupGuest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserGroupGuest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserGroupGuest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 company: Optional[str] = None,
                 email: Optional[str] = None,
                 expiration: Optional[str] = None,
                 id: Optional[int] = None,
                 mobile_phone: Optional[str] = None,
                 name: Optional[str] = None,
                 password: Optional[str] = None,
                 sponsor: Optional[str] = None,
                 user_id: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mobile_phone is not None:
            pulumi.set(__self__, "mobile_phone", mobile_phone)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if sponsor is not None:
            pulumi.set(__self__, "sponsor", sponsor)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def company(self) -> Optional[str]:
        return pulumi.get(self, "company")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def expiration(self) -> Optional[str]:
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mobilePhone")
    def mobile_phone(self) -> Optional[str]:
        return pulumi.get(self, "mobile_phone")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def sponsor(self) -> Optional[str]:
        return pulumi.get(self, "sponsor")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class UserGroupMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "serverName":
            suggest = "server_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserGroupMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserGroupMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserGroupMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[str] = None,
                 id: Optional[int] = None,
                 server_name: Optional[str] = None):
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        return pulumi.get(self, "server_name")


@pulumi.output_type
class UserGroupMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserNacPolicySeverity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "severityNum":
            suggest = "severity_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserNacPolicySeverity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserNacPolicySeverity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserNacPolicySeverity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 severity_num: Optional[int] = None):
        if severity_num is not None:
            pulumi.set(__self__, "severity_num", severity_num)

    @property
    @pulumi.getter(name="severityNum")
    def severity_num(self) -> Optional[int]:
        return pulumi.get(self, "severity_num")


@pulumi.output_type
class UserNacPolicySwitchGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserNacPolicySwitchScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "switchId":
            suggest = "switch_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserNacPolicySwitchScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserNacPolicySwitchScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserNacPolicySwitchScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch_id: Optional[str] = None):
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[str]:
        return pulumi.get(self, "switch_id")


@pulumi.output_type
class UserPeergrpMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserQuarantineTarget(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 entry: Optional[str] = None,
                 macs: Optional[Sequence['outputs.UserQuarantineTargetMac']] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entry is not None:
            pulumi.set(__self__, "entry", entry)
        if macs is not None:
            pulumi.set(__self__, "macs", macs)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def entry(self) -> Optional[str]:
        return pulumi.get(self, "entry")

    @property
    @pulumi.getter
    def macs(self) -> Optional[Sequence['outputs.UserQuarantineTargetMac']]:
        return pulumi.get(self, "macs")


@pulumi.output_type
class UserQuarantineTargetMac(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryId":
            suggest = "entry_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserQuarantineTargetMac. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserQuarantineTargetMac.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserQuarantineTargetMac.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 drop: Optional[str] = None,
                 entry_id: Optional[int] = None,
                 mac: Optional[str] = None,
                 parent: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if entry_id is not None:
            pulumi.set(__self__, "entry_id", entry_id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def drop(self) -> Optional[str]:
        return pulumi.get(self, "drop")

    @property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> Optional[int]:
        return pulumi.get(self, "entry_id")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")


@pulumi.output_type
class UserRadiusAccountingServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceSelectMethod":
            suggest = "interface_select_method"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserRadiusAccountingServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserRadiusAccountingServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserRadiusAccountingServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 interface_select_method: Optional[str] = None,
                 port: Optional[int] = None,
                 secret: Optional[str] = None,
                 server: Optional[str] = None,
                 source_ip: Optional[str] = None,
                 status: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[str]:
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class UserRadiusClass(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserSecurityExemptListRule(dict):
    def __init__(__self__, *,
                 devices: Optional[Sequence['outputs.UserSecurityExemptListRuleDevice']] = None,
                 dstaddrs: Optional[Sequence['outputs.UserSecurityExemptListRuleDstaddr']] = None,
                 id: Optional[int] = None,
                 services: Optional[Sequence['outputs.UserSecurityExemptListRuleService']] = None,
                 srcaddrs: Optional[Sequence['outputs.UserSecurityExemptListRuleSrcaddr']] = None):
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.UserSecurityExemptListRuleDevice']]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[Sequence['outputs.UserSecurityExemptListRuleDstaddr']]:
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence['outputs.UserSecurityExemptListRuleService']]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[Sequence['outputs.UserSecurityExemptListRuleSrcaddr']]:
        return pulumi.get(self, "srcaddrs")


@pulumi.output_type
class UserSecurityExemptListRuleDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserSecurityExemptListRuleDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserSecurityExemptListRuleService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserSecurityExemptListRuleSrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserSettingAuthPort(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 port: Optional[int] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VideofilterProfileFortiguardCategory(dict):
    def __init__(__self__, *,
                 filters: Optional[Sequence['outputs.VideofilterProfileFortiguardCategoryFilter']] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.VideofilterProfileFortiguardCategoryFilter']]:
        return pulumi.get(self, "filters")


@pulumi.output_type
class VideofilterProfileFortiguardCategoryFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryId":
            suggest = "category_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VideofilterProfileFortiguardCategoryFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VideofilterProfileFortiguardCategoryFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VideofilterProfileFortiguardCategoryFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 category_id: Optional[int] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[int]:
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")


@pulumi.output_type
class VideofilterYoutubeChannelFilterEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelId":
            suggest = "channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VideofilterYoutubeChannelFilterEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VideofilterYoutubeChannelFilterEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VideofilterYoutubeChannelFilterEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 channel_id: Optional[str] = None,
                 comment: Optional[str] = None,
                 id: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[str]:
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class VoipProfileMsrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logViolations":
            suggest = "log_violations"
        elif key == "maxMsgSize":
            suggest = "max_msg_size"
        elif key == "maxMsgSizeAction":
            suggest = "max_msg_size_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VoipProfileMsrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VoipProfileMsrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VoipProfileMsrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_violations: Optional[str] = None,
                 max_msg_size: Optional[int] = None,
                 max_msg_size_action: Optional[str] = None,
                 status: Optional[str] = None):
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if max_msg_size is not None:
            pulumi.set(__self__, "max_msg_size", max_msg_size)
        if max_msg_size_action is not None:
            pulumi.set(__self__, "max_msg_size_action", max_msg_size_action)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[str]:
        return pulumi.get(self, "log_violations")

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> Optional[int]:
        return pulumi.get(self, "max_msg_size")

    @property
    @pulumi.getter(name="maxMsgSizeAction")
    def max_msg_size_action(self) -> Optional[str]:
        return pulumi.get(self, "max_msg_size_action")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class VoipProfileSccp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockMcast":
            suggest = "block_mcast"
        elif key == "logCallSummary":
            suggest = "log_call_summary"
        elif key == "logViolations":
            suggest = "log_violations"
        elif key == "maxCalls":
            suggest = "max_calls"
        elif key == "verifyHeader":
            suggest = "verify_header"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VoipProfileSccp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VoipProfileSccp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VoipProfileSccp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_mcast: Optional[str] = None,
                 log_call_summary: Optional[str] = None,
                 log_violations: Optional[str] = None,
                 max_calls: Optional[int] = None,
                 status: Optional[str] = None,
                 verify_header: Optional[str] = None):
        if block_mcast is not None:
            pulumi.set(__self__, "block_mcast", block_mcast)
        if log_call_summary is not None:
            pulumi.set(__self__, "log_call_summary", log_call_summary)
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if max_calls is not None:
            pulumi.set(__self__, "max_calls", max_calls)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if verify_header is not None:
            pulumi.set(__self__, "verify_header", verify_header)

    @property
    @pulumi.getter(name="blockMcast")
    def block_mcast(self) -> Optional[str]:
        return pulumi.get(self, "block_mcast")

    @property
    @pulumi.getter(name="logCallSummary")
    def log_call_summary(self) -> Optional[str]:
        return pulumi.get(self, "log_call_summary")

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[str]:
        return pulumi.get(self, "log_violations")

    @property
    @pulumi.getter(name="maxCalls")
    def max_calls(self) -> Optional[int]:
        return pulumi.get(self, "max_calls")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="verifyHeader")
    def verify_header(self) -> Optional[str]:
        return pulumi.get(self, "verify_header")


@pulumi.output_type
class VoipProfileSip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ackRate":
            suggest = "ack_rate"
        elif key == "ackRateTrack":
            suggest = "ack_rate_track"
        elif key == "blockAck":
            suggest = "block_ack"
        elif key == "blockBye":
            suggest = "block_bye"
        elif key == "blockCancel":
            suggest = "block_cancel"
        elif key == "blockGeoRedOptions":
            suggest = "block_geo_red_options"
        elif key == "blockInfo":
            suggest = "block_info"
        elif key == "blockInvite":
            suggest = "block_invite"
        elif key == "blockLongLines":
            suggest = "block_long_lines"
        elif key == "blockMessage":
            suggest = "block_message"
        elif key == "blockNotify":
            suggest = "block_notify"
        elif key == "blockOptions":
            suggest = "block_options"
        elif key == "blockPrack":
            suggest = "block_prack"
        elif key == "blockPublish":
            suggest = "block_publish"
        elif key == "blockRefer":
            suggest = "block_refer"
        elif key == "blockRegister":
            suggest = "block_register"
        elif key == "blockSubscribe":
            suggest = "block_subscribe"
        elif key == "blockUnknown":
            suggest = "block_unknown"
        elif key == "blockUpdate":
            suggest = "block_update"
        elif key == "byeRate":
            suggest = "bye_rate"
        elif key == "byeRateTrack":
            suggest = "bye_rate_track"
        elif key == "callIdRegex":
            suggest = "call_id_regex"
        elif key == "callKeepalive":
            suggest = "call_keepalive"
        elif key == "cancelRate":
            suggest = "cancel_rate"
        elif key == "cancelRateTrack":
            suggest = "cancel_rate_track"
        elif key == "contactFixup":
            suggest = "contact_fixup"
        elif key == "contentTypeRegex":
            suggest = "content_type_regex"
        elif key == "hntRestrictSourceIp":
            suggest = "hnt_restrict_source_ip"
        elif key == "hostedNatTraversal":
            suggest = "hosted_nat_traversal"
        elif key == "infoRate":
            suggest = "info_rate"
        elif key == "infoRateTrack":
            suggest = "info_rate_track"
        elif key == "inviteRate":
            suggest = "invite_rate"
        elif key == "inviteRateTrack":
            suggest = "invite_rate_track"
        elif key == "ipsRtp":
            suggest = "ips_rtp"
        elif key == "logCallSummary":
            suggest = "log_call_summary"
        elif key == "logViolations":
            suggest = "log_violations"
        elif key == "malformedHeaderAllow":
            suggest = "malformed_header_allow"
        elif key == "malformedHeaderCallId":
            suggest = "malformed_header_call_id"
        elif key == "malformedHeaderContact":
            suggest = "malformed_header_contact"
        elif key == "malformedHeaderContentLength":
            suggest = "malformed_header_content_length"
        elif key == "malformedHeaderContentType":
            suggest = "malformed_header_content_type"
        elif key == "malformedHeaderCseq":
            suggest = "malformed_header_cseq"
        elif key == "malformedHeaderExpires":
            suggest = "malformed_header_expires"
        elif key == "malformedHeaderFrom":
            suggest = "malformed_header_from"
        elif key == "malformedHeaderMaxForwards":
            suggest = "malformed_header_max_forwards"
        elif key == "malformedHeaderNoProxyRequire":
            suggest = "malformed_header_no_proxy_require"
        elif key == "malformedHeaderNoRequire":
            suggest = "malformed_header_no_require"
        elif key == "malformedHeaderPAssertedIdentity":
            suggest = "malformed_header_passerted_identity"
        elif key == "malformedHeaderRack":
            suggest = "malformed_header_rack"
        elif key == "malformedHeaderRecordRoute":
            suggest = "malformed_header_record_route"
        elif key == "malformedHeaderRoute":
            suggest = "malformed_header_route"
        elif key == "malformedHeaderRseq":
            suggest = "malformed_header_rseq"
        elif key == "malformedHeaderSdpA":
            suggest = "malformed_header_sdp_a"
        elif key == "malformedHeaderSdpB":
            suggest = "malformed_header_sdp_b"
        elif key == "malformedHeaderSdpC":
            suggest = "malformed_header_sdp_c"
        elif key == "malformedHeaderSdpI":
            suggest = "malformed_header_sdp_i"
        elif key == "malformedHeaderSdpK":
            suggest = "malformed_header_sdp_k"
        elif key == "malformedHeaderSdpM":
            suggest = "malformed_header_sdp_m"
        elif key == "malformedHeaderSdpO":
            suggest = "malformed_header_sdp_o"
        elif key == "malformedHeaderSdpR":
            suggest = "malformed_header_sdp_r"
        elif key == "malformedHeaderSdpS":
            suggest = "malformed_header_sdp_s"
        elif key == "malformedHeaderSdpT":
            suggest = "malformed_header_sdp_t"
        elif key == "malformedHeaderSdpV":
            suggest = "malformed_header_sdp_v"
        elif key == "malformedHeaderSdpZ":
            suggest = "malformed_header_sdp_z"
        elif key == "malformedHeaderTo":
            suggest = "malformed_header_to"
        elif key == "malformedHeaderVia":
            suggest = "malformed_header_via"
        elif key == "malformedRequestLine":
            suggest = "malformed_request_line"
        elif key == "maxBodyLength":
            suggest = "max_body_length"
        elif key == "maxDialogs":
            suggest = "max_dialogs"
        elif key == "maxIdleDialogs":
            suggest = "max_idle_dialogs"
        elif key == "maxLineLength":
            suggest = "max_line_length"
        elif key == "messageRate":
            suggest = "message_rate"
        elif key == "messageRateTrack":
            suggest = "message_rate_track"
        elif key == "natPortRange":
            suggest = "nat_port_range"
        elif key == "natTrace":
            suggest = "nat_trace"
        elif key == "noSdpFixup":
            suggest = "no_sdp_fixup"
        elif key == "notifyRate":
            suggest = "notify_rate"
        elif key == "notifyRateTrack":
            suggest = "notify_rate_track"
        elif key == "openContactPinhole":
            suggest = "open_contact_pinhole"
        elif key == "openRecordRoutePinhole":
            suggest = "open_record_route_pinhole"
        elif key == "openRegisterPinhole":
            suggest = "open_register_pinhole"
        elif key == "openViaPinhole":
            suggest = "open_via_pinhole"
        elif key == "optionsRate":
            suggest = "options_rate"
        elif key == "optionsRateTrack":
            suggest = "options_rate_track"
        elif key == "prackRate":
            suggest = "prack_rate"
        elif key == "prackRateTrack":
            suggest = "prack_rate_track"
        elif key == "preserveOverride":
            suggest = "preserve_override"
        elif key == "provisionalInviteExpiryTime":
            suggest = "provisional_invite_expiry_time"
        elif key == "publishRate":
            suggest = "publish_rate"
        elif key == "publishRateTrack":
            suggest = "publish_rate_track"
        elif key == "referRate":
            suggest = "refer_rate"
        elif key == "referRateTrack":
            suggest = "refer_rate_track"
        elif key == "registerContactTrace":
            suggest = "register_contact_trace"
        elif key == "registerRate":
            suggest = "register_rate"
        elif key == "registerRateTrack":
            suggest = "register_rate_track"
        elif key == "rfc2543Branch":
            suggest = "rfc2543_branch"
        elif key == "sslAlgorithm":
            suggest = "ssl_algorithm"
        elif key == "sslAuthClient":
            suggest = "ssl_auth_client"
        elif key == "sslAuthServer":
            suggest = "ssl_auth_server"
        elif key == "sslClientCertificate":
            suggest = "ssl_client_certificate"
        elif key == "sslClientRenegotiation":
            suggest = "ssl_client_renegotiation"
        elif key == "sslMaxVersion":
            suggest = "ssl_max_version"
        elif key == "sslMinVersion":
            suggest = "ssl_min_version"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "sslPfs":
            suggest = "ssl_pfs"
        elif key == "sslSendEmptyFrags":
            suggest = "ssl_send_empty_frags"
        elif key == "sslServerCertificate":
            suggest = "ssl_server_certificate"
        elif key == "strictRegister":
            suggest = "strict_register"
        elif key == "subscribeRate":
            suggest = "subscribe_rate"
        elif key == "subscribeRateTrack":
            suggest = "subscribe_rate_track"
        elif key == "unknownHeader":
            suggest = "unknown_header"
        elif key == "updateRate":
            suggest = "update_rate"
        elif key == "updateRateTrack":
            suggest = "update_rate_track"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VoipProfileSip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VoipProfileSip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VoipProfileSip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ack_rate: Optional[int] = None,
                 ack_rate_track: Optional[str] = None,
                 block_ack: Optional[str] = None,
                 block_bye: Optional[str] = None,
                 block_cancel: Optional[str] = None,
                 block_geo_red_options: Optional[str] = None,
                 block_info: Optional[str] = None,
                 block_invite: Optional[str] = None,
                 block_long_lines: Optional[str] = None,
                 block_message: Optional[str] = None,
                 block_notify: Optional[str] = None,
                 block_options: Optional[str] = None,
                 block_prack: Optional[str] = None,
                 block_publish: Optional[str] = None,
                 block_refer: Optional[str] = None,
                 block_register: Optional[str] = None,
                 block_subscribe: Optional[str] = None,
                 block_unknown: Optional[str] = None,
                 block_update: Optional[str] = None,
                 bye_rate: Optional[int] = None,
                 bye_rate_track: Optional[str] = None,
                 call_id_regex: Optional[str] = None,
                 call_keepalive: Optional[int] = None,
                 cancel_rate: Optional[int] = None,
                 cancel_rate_track: Optional[str] = None,
                 contact_fixup: Optional[str] = None,
                 content_type_regex: Optional[str] = None,
                 hnt_restrict_source_ip: Optional[str] = None,
                 hosted_nat_traversal: Optional[str] = None,
                 info_rate: Optional[int] = None,
                 info_rate_track: Optional[str] = None,
                 invite_rate: Optional[int] = None,
                 invite_rate_track: Optional[str] = None,
                 ips_rtp: Optional[str] = None,
                 log_call_summary: Optional[str] = None,
                 log_violations: Optional[str] = None,
                 malformed_header_allow: Optional[str] = None,
                 malformed_header_call_id: Optional[str] = None,
                 malformed_header_contact: Optional[str] = None,
                 malformed_header_content_length: Optional[str] = None,
                 malformed_header_content_type: Optional[str] = None,
                 malformed_header_cseq: Optional[str] = None,
                 malformed_header_expires: Optional[str] = None,
                 malformed_header_from: Optional[str] = None,
                 malformed_header_max_forwards: Optional[str] = None,
                 malformed_header_no_proxy_require: Optional[str] = None,
                 malformed_header_no_require: Optional[str] = None,
                 malformed_header_passerted_identity: Optional[str] = None,
                 malformed_header_rack: Optional[str] = None,
                 malformed_header_record_route: Optional[str] = None,
                 malformed_header_route: Optional[str] = None,
                 malformed_header_rseq: Optional[str] = None,
                 malformed_header_sdp_a: Optional[str] = None,
                 malformed_header_sdp_b: Optional[str] = None,
                 malformed_header_sdp_c: Optional[str] = None,
                 malformed_header_sdp_i: Optional[str] = None,
                 malformed_header_sdp_k: Optional[str] = None,
                 malformed_header_sdp_m: Optional[str] = None,
                 malformed_header_sdp_o: Optional[str] = None,
                 malformed_header_sdp_r: Optional[str] = None,
                 malformed_header_sdp_s: Optional[str] = None,
                 malformed_header_sdp_t: Optional[str] = None,
                 malformed_header_sdp_v: Optional[str] = None,
                 malformed_header_sdp_z: Optional[str] = None,
                 malformed_header_to: Optional[str] = None,
                 malformed_header_via: Optional[str] = None,
                 malformed_request_line: Optional[str] = None,
                 max_body_length: Optional[int] = None,
                 max_dialogs: Optional[int] = None,
                 max_idle_dialogs: Optional[int] = None,
                 max_line_length: Optional[int] = None,
                 message_rate: Optional[int] = None,
                 message_rate_track: Optional[str] = None,
                 nat_port_range: Optional[str] = None,
                 nat_trace: Optional[str] = None,
                 no_sdp_fixup: Optional[str] = None,
                 notify_rate: Optional[int] = None,
                 notify_rate_track: Optional[str] = None,
                 open_contact_pinhole: Optional[str] = None,
                 open_record_route_pinhole: Optional[str] = None,
                 open_register_pinhole: Optional[str] = None,
                 open_via_pinhole: Optional[str] = None,
                 options_rate: Optional[int] = None,
                 options_rate_track: Optional[str] = None,
                 prack_rate: Optional[int] = None,
                 prack_rate_track: Optional[str] = None,
                 preserve_override: Optional[str] = None,
                 provisional_invite_expiry_time: Optional[int] = None,
                 publish_rate: Optional[int] = None,
                 publish_rate_track: Optional[str] = None,
                 refer_rate: Optional[int] = None,
                 refer_rate_track: Optional[str] = None,
                 register_contact_trace: Optional[str] = None,
                 register_rate: Optional[int] = None,
                 register_rate_track: Optional[str] = None,
                 rfc2543_branch: Optional[str] = None,
                 rtp: Optional[str] = None,
                 ssl_algorithm: Optional[str] = None,
                 ssl_auth_client: Optional[str] = None,
                 ssl_auth_server: Optional[str] = None,
                 ssl_client_certificate: Optional[str] = None,
                 ssl_client_renegotiation: Optional[str] = None,
                 ssl_max_version: Optional[str] = None,
                 ssl_min_version: Optional[str] = None,
                 ssl_mode: Optional[str] = None,
                 ssl_pfs: Optional[str] = None,
                 ssl_send_empty_frags: Optional[str] = None,
                 ssl_server_certificate: Optional[str] = None,
                 status: Optional[str] = None,
                 strict_register: Optional[str] = None,
                 subscribe_rate: Optional[int] = None,
                 subscribe_rate_track: Optional[str] = None,
                 unknown_header: Optional[str] = None,
                 update_rate: Optional[int] = None,
                 update_rate_track: Optional[str] = None):
        if ack_rate is not None:
            pulumi.set(__self__, "ack_rate", ack_rate)
        if ack_rate_track is not None:
            pulumi.set(__self__, "ack_rate_track", ack_rate_track)
        if block_ack is not None:
            pulumi.set(__self__, "block_ack", block_ack)
        if block_bye is not None:
            pulumi.set(__self__, "block_bye", block_bye)
        if block_cancel is not None:
            pulumi.set(__self__, "block_cancel", block_cancel)
        if block_geo_red_options is not None:
            pulumi.set(__self__, "block_geo_red_options", block_geo_red_options)
        if block_info is not None:
            pulumi.set(__self__, "block_info", block_info)
        if block_invite is not None:
            pulumi.set(__self__, "block_invite", block_invite)
        if block_long_lines is not None:
            pulumi.set(__self__, "block_long_lines", block_long_lines)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if block_notify is not None:
            pulumi.set(__self__, "block_notify", block_notify)
        if block_options is not None:
            pulumi.set(__self__, "block_options", block_options)
        if block_prack is not None:
            pulumi.set(__self__, "block_prack", block_prack)
        if block_publish is not None:
            pulumi.set(__self__, "block_publish", block_publish)
        if block_refer is not None:
            pulumi.set(__self__, "block_refer", block_refer)
        if block_register is not None:
            pulumi.set(__self__, "block_register", block_register)
        if block_subscribe is not None:
            pulumi.set(__self__, "block_subscribe", block_subscribe)
        if block_unknown is not None:
            pulumi.set(__self__, "block_unknown", block_unknown)
        if block_update is not None:
            pulumi.set(__self__, "block_update", block_update)
        if bye_rate is not None:
            pulumi.set(__self__, "bye_rate", bye_rate)
        if bye_rate_track is not None:
            pulumi.set(__self__, "bye_rate_track", bye_rate_track)
        if call_id_regex is not None:
            pulumi.set(__self__, "call_id_regex", call_id_regex)
        if call_keepalive is not None:
            pulumi.set(__self__, "call_keepalive", call_keepalive)
        if cancel_rate is not None:
            pulumi.set(__self__, "cancel_rate", cancel_rate)
        if cancel_rate_track is not None:
            pulumi.set(__self__, "cancel_rate_track", cancel_rate_track)
        if contact_fixup is not None:
            pulumi.set(__self__, "contact_fixup", contact_fixup)
        if content_type_regex is not None:
            pulumi.set(__self__, "content_type_regex", content_type_regex)
        if hnt_restrict_source_ip is not None:
            pulumi.set(__self__, "hnt_restrict_source_ip", hnt_restrict_source_ip)
        if hosted_nat_traversal is not None:
            pulumi.set(__self__, "hosted_nat_traversal", hosted_nat_traversal)
        if info_rate is not None:
            pulumi.set(__self__, "info_rate", info_rate)
        if info_rate_track is not None:
            pulumi.set(__self__, "info_rate_track", info_rate_track)
        if invite_rate is not None:
            pulumi.set(__self__, "invite_rate", invite_rate)
        if invite_rate_track is not None:
            pulumi.set(__self__, "invite_rate_track", invite_rate_track)
        if ips_rtp is not None:
            pulumi.set(__self__, "ips_rtp", ips_rtp)
        if log_call_summary is not None:
            pulumi.set(__self__, "log_call_summary", log_call_summary)
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if malformed_header_allow is not None:
            pulumi.set(__self__, "malformed_header_allow", malformed_header_allow)
        if malformed_header_call_id is not None:
            pulumi.set(__self__, "malformed_header_call_id", malformed_header_call_id)
        if malformed_header_contact is not None:
            pulumi.set(__self__, "malformed_header_contact", malformed_header_contact)
        if malformed_header_content_length is not None:
            pulumi.set(__self__, "malformed_header_content_length", malformed_header_content_length)
        if malformed_header_content_type is not None:
            pulumi.set(__self__, "malformed_header_content_type", malformed_header_content_type)
        if malformed_header_cseq is not None:
            pulumi.set(__self__, "malformed_header_cseq", malformed_header_cseq)
        if malformed_header_expires is not None:
            pulumi.set(__self__, "malformed_header_expires", malformed_header_expires)
        if malformed_header_from is not None:
            pulumi.set(__self__, "malformed_header_from", malformed_header_from)
        if malformed_header_max_forwards is not None:
            pulumi.set(__self__, "malformed_header_max_forwards", malformed_header_max_forwards)
        if malformed_header_no_proxy_require is not None:
            pulumi.set(__self__, "malformed_header_no_proxy_require", malformed_header_no_proxy_require)
        if malformed_header_no_require is not None:
            pulumi.set(__self__, "malformed_header_no_require", malformed_header_no_require)
        if malformed_header_passerted_identity is not None:
            pulumi.set(__self__, "malformed_header_passerted_identity", malformed_header_passerted_identity)
        if malformed_header_rack is not None:
            pulumi.set(__self__, "malformed_header_rack", malformed_header_rack)
        if malformed_header_record_route is not None:
            pulumi.set(__self__, "malformed_header_record_route", malformed_header_record_route)
        if malformed_header_route is not None:
            pulumi.set(__self__, "malformed_header_route", malformed_header_route)
        if malformed_header_rseq is not None:
            pulumi.set(__self__, "malformed_header_rseq", malformed_header_rseq)
        if malformed_header_sdp_a is not None:
            pulumi.set(__self__, "malformed_header_sdp_a", malformed_header_sdp_a)
        if malformed_header_sdp_b is not None:
            pulumi.set(__self__, "malformed_header_sdp_b", malformed_header_sdp_b)
        if malformed_header_sdp_c is not None:
            pulumi.set(__self__, "malformed_header_sdp_c", malformed_header_sdp_c)
        if malformed_header_sdp_i is not None:
            pulumi.set(__self__, "malformed_header_sdp_i", malformed_header_sdp_i)
        if malformed_header_sdp_k is not None:
            pulumi.set(__self__, "malformed_header_sdp_k", malformed_header_sdp_k)
        if malformed_header_sdp_m is not None:
            pulumi.set(__self__, "malformed_header_sdp_m", malformed_header_sdp_m)
        if malformed_header_sdp_o is not None:
            pulumi.set(__self__, "malformed_header_sdp_o", malformed_header_sdp_o)
        if malformed_header_sdp_r is not None:
            pulumi.set(__self__, "malformed_header_sdp_r", malformed_header_sdp_r)
        if malformed_header_sdp_s is not None:
            pulumi.set(__self__, "malformed_header_sdp_s", malformed_header_sdp_s)
        if malformed_header_sdp_t is not None:
            pulumi.set(__self__, "malformed_header_sdp_t", malformed_header_sdp_t)
        if malformed_header_sdp_v is not None:
            pulumi.set(__self__, "malformed_header_sdp_v", malformed_header_sdp_v)
        if malformed_header_sdp_z is not None:
            pulumi.set(__self__, "malformed_header_sdp_z", malformed_header_sdp_z)
        if malformed_header_to is not None:
            pulumi.set(__self__, "malformed_header_to", malformed_header_to)
        if malformed_header_via is not None:
            pulumi.set(__self__, "malformed_header_via", malformed_header_via)
        if malformed_request_line is not None:
            pulumi.set(__self__, "malformed_request_line", malformed_request_line)
        if max_body_length is not None:
            pulumi.set(__self__, "max_body_length", max_body_length)
        if max_dialogs is not None:
            pulumi.set(__self__, "max_dialogs", max_dialogs)
        if max_idle_dialogs is not None:
            pulumi.set(__self__, "max_idle_dialogs", max_idle_dialogs)
        if max_line_length is not None:
            pulumi.set(__self__, "max_line_length", max_line_length)
        if message_rate is not None:
            pulumi.set(__self__, "message_rate", message_rate)
        if message_rate_track is not None:
            pulumi.set(__self__, "message_rate_track", message_rate_track)
        if nat_port_range is not None:
            pulumi.set(__self__, "nat_port_range", nat_port_range)
        if nat_trace is not None:
            pulumi.set(__self__, "nat_trace", nat_trace)
        if no_sdp_fixup is not None:
            pulumi.set(__self__, "no_sdp_fixup", no_sdp_fixup)
        if notify_rate is not None:
            pulumi.set(__self__, "notify_rate", notify_rate)
        if notify_rate_track is not None:
            pulumi.set(__self__, "notify_rate_track", notify_rate_track)
        if open_contact_pinhole is not None:
            pulumi.set(__self__, "open_contact_pinhole", open_contact_pinhole)
        if open_record_route_pinhole is not None:
            pulumi.set(__self__, "open_record_route_pinhole", open_record_route_pinhole)
        if open_register_pinhole is not None:
            pulumi.set(__self__, "open_register_pinhole", open_register_pinhole)
        if open_via_pinhole is not None:
            pulumi.set(__self__, "open_via_pinhole", open_via_pinhole)
        if options_rate is not None:
            pulumi.set(__self__, "options_rate", options_rate)
        if options_rate_track is not None:
            pulumi.set(__self__, "options_rate_track", options_rate_track)
        if prack_rate is not None:
            pulumi.set(__self__, "prack_rate", prack_rate)
        if prack_rate_track is not None:
            pulumi.set(__self__, "prack_rate_track", prack_rate_track)
        if preserve_override is not None:
            pulumi.set(__self__, "preserve_override", preserve_override)
        if provisional_invite_expiry_time is not None:
            pulumi.set(__self__, "provisional_invite_expiry_time", provisional_invite_expiry_time)
        if publish_rate is not None:
            pulumi.set(__self__, "publish_rate", publish_rate)
        if publish_rate_track is not None:
            pulumi.set(__self__, "publish_rate_track", publish_rate_track)
        if refer_rate is not None:
            pulumi.set(__self__, "refer_rate", refer_rate)
        if refer_rate_track is not None:
            pulumi.set(__self__, "refer_rate_track", refer_rate_track)
        if register_contact_trace is not None:
            pulumi.set(__self__, "register_contact_trace", register_contact_trace)
        if register_rate is not None:
            pulumi.set(__self__, "register_rate", register_rate)
        if register_rate_track is not None:
            pulumi.set(__self__, "register_rate_track", register_rate_track)
        if rfc2543_branch is not None:
            pulumi.set(__self__, "rfc2543_branch", rfc2543_branch)
        if rtp is not None:
            pulumi.set(__self__, "rtp", rtp)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_auth_client is not None:
            pulumi.set(__self__, "ssl_auth_client", ssl_auth_client)
        if ssl_auth_server is not None:
            pulumi.set(__self__, "ssl_auth_server", ssl_auth_server)
        if ssl_client_certificate is not None:
            pulumi.set(__self__, "ssl_client_certificate", ssl_client_certificate)
        if ssl_client_renegotiation is not None:
            pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if ssl_pfs is not None:
            pulumi.set(__self__, "ssl_pfs", ssl_pfs)
        if ssl_send_empty_frags is not None:
            pulumi.set(__self__, "ssl_send_empty_frags", ssl_send_empty_frags)
        if ssl_server_certificate is not None:
            pulumi.set(__self__, "ssl_server_certificate", ssl_server_certificate)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strict_register is not None:
            pulumi.set(__self__, "strict_register", strict_register)
        if subscribe_rate is not None:
            pulumi.set(__self__, "subscribe_rate", subscribe_rate)
        if subscribe_rate_track is not None:
            pulumi.set(__self__, "subscribe_rate_track", subscribe_rate_track)
        if unknown_header is not None:
            pulumi.set(__self__, "unknown_header", unknown_header)
        if update_rate is not None:
            pulumi.set(__self__, "update_rate", update_rate)
        if update_rate_track is not None:
            pulumi.set(__self__, "update_rate_track", update_rate_track)

    @property
    @pulumi.getter(name="ackRate")
    def ack_rate(self) -> Optional[int]:
        return pulumi.get(self, "ack_rate")

    @property
    @pulumi.getter(name="ackRateTrack")
    def ack_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "ack_rate_track")

    @property
    @pulumi.getter(name="blockAck")
    def block_ack(self) -> Optional[str]:
        return pulumi.get(self, "block_ack")

    @property
    @pulumi.getter(name="blockBye")
    def block_bye(self) -> Optional[str]:
        return pulumi.get(self, "block_bye")

    @property
    @pulumi.getter(name="blockCancel")
    def block_cancel(self) -> Optional[str]:
        return pulumi.get(self, "block_cancel")

    @property
    @pulumi.getter(name="blockGeoRedOptions")
    def block_geo_red_options(self) -> Optional[str]:
        return pulumi.get(self, "block_geo_red_options")

    @property
    @pulumi.getter(name="blockInfo")
    def block_info(self) -> Optional[str]:
        return pulumi.get(self, "block_info")

    @property
    @pulumi.getter(name="blockInvite")
    def block_invite(self) -> Optional[str]:
        return pulumi.get(self, "block_invite")

    @property
    @pulumi.getter(name="blockLongLines")
    def block_long_lines(self) -> Optional[str]:
        return pulumi.get(self, "block_long_lines")

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[str]:
        return pulumi.get(self, "block_message")

    @property
    @pulumi.getter(name="blockNotify")
    def block_notify(self) -> Optional[str]:
        return pulumi.get(self, "block_notify")

    @property
    @pulumi.getter(name="blockOptions")
    def block_options(self) -> Optional[str]:
        return pulumi.get(self, "block_options")

    @property
    @pulumi.getter(name="blockPrack")
    def block_prack(self) -> Optional[str]:
        return pulumi.get(self, "block_prack")

    @property
    @pulumi.getter(name="blockPublish")
    def block_publish(self) -> Optional[str]:
        return pulumi.get(self, "block_publish")

    @property
    @pulumi.getter(name="blockRefer")
    def block_refer(self) -> Optional[str]:
        return pulumi.get(self, "block_refer")

    @property
    @pulumi.getter(name="blockRegister")
    def block_register(self) -> Optional[str]:
        return pulumi.get(self, "block_register")

    @property
    @pulumi.getter(name="blockSubscribe")
    def block_subscribe(self) -> Optional[str]:
        return pulumi.get(self, "block_subscribe")

    @property
    @pulumi.getter(name="blockUnknown")
    def block_unknown(self) -> Optional[str]:
        return pulumi.get(self, "block_unknown")

    @property
    @pulumi.getter(name="blockUpdate")
    def block_update(self) -> Optional[str]:
        return pulumi.get(self, "block_update")

    @property
    @pulumi.getter(name="byeRate")
    def bye_rate(self) -> Optional[int]:
        return pulumi.get(self, "bye_rate")

    @property
    @pulumi.getter(name="byeRateTrack")
    def bye_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "bye_rate_track")

    @property
    @pulumi.getter(name="callIdRegex")
    def call_id_regex(self) -> Optional[str]:
        return pulumi.get(self, "call_id_regex")

    @property
    @pulumi.getter(name="callKeepalive")
    def call_keepalive(self) -> Optional[int]:
        return pulumi.get(self, "call_keepalive")

    @property
    @pulumi.getter(name="cancelRate")
    def cancel_rate(self) -> Optional[int]:
        return pulumi.get(self, "cancel_rate")

    @property
    @pulumi.getter(name="cancelRateTrack")
    def cancel_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "cancel_rate_track")

    @property
    @pulumi.getter(name="contactFixup")
    def contact_fixup(self) -> Optional[str]:
        return pulumi.get(self, "contact_fixup")

    @property
    @pulumi.getter(name="contentTypeRegex")
    def content_type_regex(self) -> Optional[str]:
        return pulumi.get(self, "content_type_regex")

    @property
    @pulumi.getter(name="hntRestrictSourceIp")
    def hnt_restrict_source_ip(self) -> Optional[str]:
        return pulumi.get(self, "hnt_restrict_source_ip")

    @property
    @pulumi.getter(name="hostedNatTraversal")
    def hosted_nat_traversal(self) -> Optional[str]:
        return pulumi.get(self, "hosted_nat_traversal")

    @property
    @pulumi.getter(name="infoRate")
    def info_rate(self) -> Optional[int]:
        return pulumi.get(self, "info_rate")

    @property
    @pulumi.getter(name="infoRateTrack")
    def info_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "info_rate_track")

    @property
    @pulumi.getter(name="inviteRate")
    def invite_rate(self) -> Optional[int]:
        return pulumi.get(self, "invite_rate")

    @property
    @pulumi.getter(name="inviteRateTrack")
    def invite_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "invite_rate_track")

    @property
    @pulumi.getter(name="ipsRtp")
    def ips_rtp(self) -> Optional[str]:
        return pulumi.get(self, "ips_rtp")

    @property
    @pulumi.getter(name="logCallSummary")
    def log_call_summary(self) -> Optional[str]:
        return pulumi.get(self, "log_call_summary")

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[str]:
        return pulumi.get(self, "log_violations")

    @property
    @pulumi.getter(name="malformedHeaderAllow")
    def malformed_header_allow(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_allow")

    @property
    @pulumi.getter(name="malformedHeaderCallId")
    def malformed_header_call_id(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_call_id")

    @property
    @pulumi.getter(name="malformedHeaderContact")
    def malformed_header_contact(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_contact")

    @property
    @pulumi.getter(name="malformedHeaderContentLength")
    def malformed_header_content_length(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_content_length")

    @property
    @pulumi.getter(name="malformedHeaderContentType")
    def malformed_header_content_type(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_content_type")

    @property
    @pulumi.getter(name="malformedHeaderCseq")
    def malformed_header_cseq(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_cseq")

    @property
    @pulumi.getter(name="malformedHeaderExpires")
    def malformed_header_expires(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_expires")

    @property
    @pulumi.getter(name="malformedHeaderFrom")
    def malformed_header_from(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_from")

    @property
    @pulumi.getter(name="malformedHeaderMaxForwards")
    def malformed_header_max_forwards(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_max_forwards")

    @property
    @pulumi.getter(name="malformedHeaderNoProxyRequire")
    def malformed_header_no_proxy_require(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_no_proxy_require")

    @property
    @pulumi.getter(name="malformedHeaderNoRequire")
    def malformed_header_no_require(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_no_require")

    @property
    @pulumi.getter(name="malformedHeaderPAssertedIdentity")
    def malformed_header_passerted_identity(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_passerted_identity")

    @property
    @pulumi.getter(name="malformedHeaderRack")
    def malformed_header_rack(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_rack")

    @property
    @pulumi.getter(name="malformedHeaderRecordRoute")
    def malformed_header_record_route(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_record_route")

    @property
    @pulumi.getter(name="malformedHeaderRoute")
    def malformed_header_route(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_route")

    @property
    @pulumi.getter(name="malformedHeaderRseq")
    def malformed_header_rseq(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_rseq")

    @property
    @pulumi.getter(name="malformedHeaderSdpA")
    def malformed_header_sdp_a(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_a")

    @property
    @pulumi.getter(name="malformedHeaderSdpB")
    def malformed_header_sdp_b(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_b")

    @property
    @pulumi.getter(name="malformedHeaderSdpC")
    def malformed_header_sdp_c(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_c")

    @property
    @pulumi.getter(name="malformedHeaderSdpI")
    def malformed_header_sdp_i(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_i")

    @property
    @pulumi.getter(name="malformedHeaderSdpK")
    def malformed_header_sdp_k(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_k")

    @property
    @pulumi.getter(name="malformedHeaderSdpM")
    def malformed_header_sdp_m(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_m")

    @property
    @pulumi.getter(name="malformedHeaderSdpO")
    def malformed_header_sdp_o(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_o")

    @property
    @pulumi.getter(name="malformedHeaderSdpR")
    def malformed_header_sdp_r(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_r")

    @property
    @pulumi.getter(name="malformedHeaderSdpS")
    def malformed_header_sdp_s(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_s")

    @property
    @pulumi.getter(name="malformedHeaderSdpT")
    def malformed_header_sdp_t(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_t")

    @property
    @pulumi.getter(name="malformedHeaderSdpV")
    def malformed_header_sdp_v(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_v")

    @property
    @pulumi.getter(name="malformedHeaderSdpZ")
    def malformed_header_sdp_z(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_sdp_z")

    @property
    @pulumi.getter(name="malformedHeaderTo")
    def malformed_header_to(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_to")

    @property
    @pulumi.getter(name="malformedHeaderVia")
    def malformed_header_via(self) -> Optional[str]:
        return pulumi.get(self, "malformed_header_via")

    @property
    @pulumi.getter(name="malformedRequestLine")
    def malformed_request_line(self) -> Optional[str]:
        return pulumi.get(self, "malformed_request_line")

    @property
    @pulumi.getter(name="maxBodyLength")
    def max_body_length(self) -> Optional[int]:
        return pulumi.get(self, "max_body_length")

    @property
    @pulumi.getter(name="maxDialogs")
    def max_dialogs(self) -> Optional[int]:
        return pulumi.get(self, "max_dialogs")

    @property
    @pulumi.getter(name="maxIdleDialogs")
    def max_idle_dialogs(self) -> Optional[int]:
        return pulumi.get(self, "max_idle_dialogs")

    @property
    @pulumi.getter(name="maxLineLength")
    def max_line_length(self) -> Optional[int]:
        return pulumi.get(self, "max_line_length")

    @property
    @pulumi.getter(name="messageRate")
    def message_rate(self) -> Optional[int]:
        return pulumi.get(self, "message_rate")

    @property
    @pulumi.getter(name="messageRateTrack")
    def message_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "message_rate_track")

    @property
    @pulumi.getter(name="natPortRange")
    def nat_port_range(self) -> Optional[str]:
        return pulumi.get(self, "nat_port_range")

    @property
    @pulumi.getter(name="natTrace")
    def nat_trace(self) -> Optional[str]:
        return pulumi.get(self, "nat_trace")

    @property
    @pulumi.getter(name="noSdpFixup")
    def no_sdp_fixup(self) -> Optional[str]:
        return pulumi.get(self, "no_sdp_fixup")

    @property
    @pulumi.getter(name="notifyRate")
    def notify_rate(self) -> Optional[int]:
        return pulumi.get(self, "notify_rate")

    @property
    @pulumi.getter(name="notifyRateTrack")
    def notify_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "notify_rate_track")

    @property
    @pulumi.getter(name="openContactPinhole")
    def open_contact_pinhole(self) -> Optional[str]:
        return pulumi.get(self, "open_contact_pinhole")

    @property
    @pulumi.getter(name="openRecordRoutePinhole")
    def open_record_route_pinhole(self) -> Optional[str]:
        return pulumi.get(self, "open_record_route_pinhole")

    @property
    @pulumi.getter(name="openRegisterPinhole")
    def open_register_pinhole(self) -> Optional[str]:
        return pulumi.get(self, "open_register_pinhole")

    @property
    @pulumi.getter(name="openViaPinhole")
    def open_via_pinhole(self) -> Optional[str]:
        return pulumi.get(self, "open_via_pinhole")

    @property
    @pulumi.getter(name="optionsRate")
    def options_rate(self) -> Optional[int]:
        return pulumi.get(self, "options_rate")

    @property
    @pulumi.getter(name="optionsRateTrack")
    def options_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "options_rate_track")

    @property
    @pulumi.getter(name="prackRate")
    def prack_rate(self) -> Optional[int]:
        return pulumi.get(self, "prack_rate")

    @property
    @pulumi.getter(name="prackRateTrack")
    def prack_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "prack_rate_track")

    @property
    @pulumi.getter(name="preserveOverride")
    def preserve_override(self) -> Optional[str]:
        return pulumi.get(self, "preserve_override")

    @property
    @pulumi.getter(name="provisionalInviteExpiryTime")
    def provisional_invite_expiry_time(self) -> Optional[int]:
        return pulumi.get(self, "provisional_invite_expiry_time")

    @property
    @pulumi.getter(name="publishRate")
    def publish_rate(self) -> Optional[int]:
        return pulumi.get(self, "publish_rate")

    @property
    @pulumi.getter(name="publishRateTrack")
    def publish_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "publish_rate_track")

    @property
    @pulumi.getter(name="referRate")
    def refer_rate(self) -> Optional[int]:
        return pulumi.get(self, "refer_rate")

    @property
    @pulumi.getter(name="referRateTrack")
    def refer_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "refer_rate_track")

    @property
    @pulumi.getter(name="registerContactTrace")
    def register_contact_trace(self) -> Optional[str]:
        return pulumi.get(self, "register_contact_trace")

    @property
    @pulumi.getter(name="registerRate")
    def register_rate(self) -> Optional[int]:
        return pulumi.get(self, "register_rate")

    @property
    @pulumi.getter(name="registerRateTrack")
    def register_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "register_rate_track")

    @property
    @pulumi.getter(name="rfc2543Branch")
    def rfc2543_branch(self) -> Optional[str]:
        return pulumi.get(self, "rfc2543_branch")

    @property
    @pulumi.getter
    def rtp(self) -> Optional[str]:
        return pulumi.get(self, "rtp")

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "ssl_algorithm")

    @property
    @pulumi.getter(name="sslAuthClient")
    def ssl_auth_client(self) -> Optional[str]:
        return pulumi.get(self, "ssl_auth_client")

    @property
    @pulumi.getter(name="sslAuthServer")
    def ssl_auth_server(self) -> Optional[str]:
        return pulumi.get(self, "ssl_auth_server")

    @property
    @pulumi.getter(name="sslClientCertificate")
    def ssl_client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_certificate")

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_renegotiation")

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[str]:
        return pulumi.get(self, "ssl_max_version")

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[str]:
        return pulumi.get(self, "ssl_min_version")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[str]:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="sslPfs")
    def ssl_pfs(self) -> Optional[str]:
        return pulumi.get(self, "ssl_pfs")

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> Optional[str]:
        return pulumi.get(self, "ssl_send_empty_frags")

    @property
    @pulumi.getter(name="sslServerCertificate")
    def ssl_server_certificate(self) -> Optional[str]:
        return pulumi.get(self, "ssl_server_certificate")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="strictRegister")
    def strict_register(self) -> Optional[str]:
        return pulumi.get(self, "strict_register")

    @property
    @pulumi.getter(name="subscribeRate")
    def subscribe_rate(self) -> Optional[int]:
        return pulumi.get(self, "subscribe_rate")

    @property
    @pulumi.getter(name="subscribeRateTrack")
    def subscribe_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "subscribe_rate_track")

    @property
    @pulumi.getter(name="unknownHeader")
    def unknown_header(self) -> Optional[str]:
        return pulumi.get(self, "unknown_header")

    @property
    @pulumi.getter(name="updateRate")
    def update_rate(self) -> Optional[int]:
        return pulumi.get(self, "update_rate")

    @property
    @pulumi.getter(name="updateRateTrack")
    def update_rate_track(self) -> Optional[str]:
        return pulumi.get(self, "update_rate_track")


@pulumi.output_type
class VpnCertificateSettingCrlVerification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chainCrlAbsence":
            suggest = "chain_crl_absence"
        elif key == "leafCrlAbsence":
            suggest = "leaf_crl_absence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnCertificateSettingCrlVerification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnCertificateSettingCrlVerification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnCertificateSettingCrlVerification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chain_crl_absence: Optional[str] = None,
                 expiry: Optional[str] = None,
                 leaf_crl_absence: Optional[str] = None):
        if chain_crl_absence is not None:
            pulumi.set(__self__, "chain_crl_absence", chain_crl_absence)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if leaf_crl_absence is not None:
            pulumi.set(__self__, "leaf_crl_absence", leaf_crl_absence)

    @property
    @pulumi.getter(name="chainCrlAbsence")
    def chain_crl_absence(self) -> Optional[str]:
        return pulumi.get(self, "chain_crl_absence")

    @property
    @pulumi.getter
    def expiry(self) -> Optional[str]:
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter(name="leafCrlAbsence")
    def leaf_crl_absence(self) -> Optional[str]:
        return pulumi.get(self, "leaf_crl_absence")


@pulumi.output_type
class VpnIpsecConcentratorMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnIpsecFecMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthBiThreshold":
            suggest = "bandwidth_bi_threshold"
        elif key == "bandwidthDownThreshold":
            suggest = "bandwidth_down_threshold"
        elif key == "bandwidthUpThreshold":
            suggest = "bandwidth_up_threshold"
        elif key == "latencyThreshold":
            suggest = "latency_threshold"
        elif key == "packetLossThreshold":
            suggest = "packet_loss_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnIpsecFecMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnIpsecFecMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnIpsecFecMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_bi_threshold: Optional[int] = None,
                 bandwidth_down_threshold: Optional[int] = None,
                 bandwidth_up_threshold: Optional[int] = None,
                 base: Optional[int] = None,
                 latency_threshold: Optional[int] = None,
                 packet_loss_threshold: Optional[int] = None,
                 redundant: Optional[int] = None,
                 seqno: Optional[int] = None):
        if bandwidth_bi_threshold is not None:
            pulumi.set(__self__, "bandwidth_bi_threshold", bandwidth_bi_threshold)
        if bandwidth_down_threshold is not None:
            pulumi.set(__self__, "bandwidth_down_threshold", bandwidth_down_threshold)
        if bandwidth_up_threshold is not None:
            pulumi.set(__self__, "bandwidth_up_threshold", bandwidth_up_threshold)
        if base is not None:
            pulumi.set(__self__, "base", base)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if packet_loss_threshold is not None:
            pulumi.set(__self__, "packet_loss_threshold", packet_loss_threshold)
        if redundant is not None:
            pulumi.set(__self__, "redundant", redundant)
        if seqno is not None:
            pulumi.set(__self__, "seqno", seqno)

    @property
    @pulumi.getter(name="bandwidthBiThreshold")
    def bandwidth_bi_threshold(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_bi_threshold")

    @property
    @pulumi.getter(name="bandwidthDownThreshold")
    def bandwidth_down_threshold(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_down_threshold")

    @property
    @pulumi.getter(name="bandwidthUpThreshold")
    def bandwidth_up_threshold(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_up_threshold")

    @property
    @pulumi.getter
    def base(self) -> Optional[int]:
        return pulumi.get(self, "base")

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[int]:
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter(name="packetLossThreshold")
    def packet_loss_threshold(self) -> Optional[int]:
        return pulumi.get(self, "packet_loss_threshold")

    @property
    @pulumi.getter
    def redundant(self) -> Optional[int]:
        return pulumi.get(self, "redundant")

    @property
    @pulumi.getter
    def seqno(self) -> Optional[int]:
        return pulumi.get(self, "seqno")


@pulumi.output_type
class VpnIpsecPhase1BackupGateway(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")


@pulumi.output_type
class VpnIpsecPhase1Certificate(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnIpsecPhase1InterfaceBackupGateway(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")


@pulumi.output_type
class VpnIpsecPhase1InterfaceCertificate(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnIpsecPhase1InterfaceIpv4ExcludeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnIpsecPhase1InterfaceIpv4ExcludeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnIpsecPhase1InterfaceIpv4ExcludeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnIpsecPhase1InterfaceIpv4ExcludeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class VpnIpsecPhase1InterfaceIpv6ExcludeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnIpsecPhase1InterfaceIpv6ExcludeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnIpsecPhase1InterfaceIpv6ExcludeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnIpsecPhase1InterfaceIpv6ExcludeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class VpnIpsecPhase1Ipv4ExcludeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnIpsecPhase1Ipv4ExcludeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnIpsecPhase1Ipv4ExcludeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnIpsecPhase1Ipv4ExcludeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class VpnIpsecPhase1Ipv6ExcludeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnIpsecPhase1Ipv6ExcludeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnIpsecPhase1Ipv6ExcludeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnIpsecPhase1Ipv6ExcludeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class VpnKmipServerServerList(dict):
    def __init__(__self__, *,
                 cert: Optional[str] = None,
                 id: Optional[int] = None,
                 port: Optional[int] = None,
                 server: Optional[str] = None,
                 status: Optional[str] = None):
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def cert(self) -> Optional[str]:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class VpnOcvpnForticlientAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authGroups":
            suggest = "auth_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnOcvpnForticlientAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnOcvpnForticlientAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnOcvpnForticlientAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_groups: Optional[Sequence['outputs.VpnOcvpnForticlientAccessAuthGroup']] = None,
                 psksecret: Optional[str] = None,
                 status: Optional[str] = None):
        if auth_groups is not None:
            pulumi.set(__self__, "auth_groups", auth_groups)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authGroups")
    def auth_groups(self) -> Optional[Sequence['outputs.VpnOcvpnForticlientAccessAuthGroup']]:
        return pulumi.get(self, "auth_groups")

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[str]:
        return pulumi.get(self, "psksecret")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class VpnOcvpnForticlientAccessAuthGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authGroup":
            suggest = "auth_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnOcvpnForticlientAccessAuthGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnOcvpnForticlientAccessAuthGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnOcvpnForticlientAccessAuthGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_group: Optional[str] = None,
                 name: Optional[str] = None,
                 overlays: Optional[Sequence['outputs.VpnOcvpnForticlientAccessAuthGroupOverlay']] = None):
        if auth_group is not None:
            pulumi.set(__self__, "auth_group", auth_group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)

    @property
    @pulumi.getter(name="authGroup")
    def auth_group(self) -> Optional[str]:
        return pulumi.get(self, "auth_group")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def overlays(self) -> Optional[Sequence['outputs.VpnOcvpnForticlientAccessAuthGroupOverlay']]:
        return pulumi.get(self, "overlays")


@pulumi.output_type
class VpnOcvpnForticlientAccessAuthGroupOverlay(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overlayName":
            suggest = "overlay_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnOcvpnForticlientAccessAuthGroupOverlay. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnOcvpnForticlientAccessAuthGroupOverlay.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnOcvpnForticlientAccessAuthGroupOverlay.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 overlay_name: Optional[str] = None):
        if overlay_name is not None:
            pulumi.set(__self__, "overlay_name", overlay_name)

    @property
    @pulumi.getter(name="overlayName")
    def overlay_name(self) -> Optional[str]:
        return pulumi.get(self, "overlay_name")


@pulumi.output_type
class VpnOcvpnOverlay(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignIp":
            suggest = "assign_ip"
        elif key == "interOverlay":
            suggest = "inter_overlay"
        elif key == "ipv4EndIp":
            suggest = "ipv4_end_ip"
        elif key == "ipv4StartIp":
            suggest = "ipv4_start_ip"
        elif key == "overlayName":
            suggest = "overlay_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnOcvpnOverlay. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnOcvpnOverlay.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnOcvpnOverlay.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 inter_overlay: Optional[str] = None,
                 ipv4_end_ip: Optional[str] = None,
                 ipv4_start_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 overlay_name: Optional[str] = None,
                 subnets: Optional[Sequence['outputs.VpnOcvpnOverlaySubnet']] = None):
        if assign_ip is not None:
            pulumi.set(__self__, "assign_ip", assign_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inter_overlay is not None:
            pulumi.set(__self__, "inter_overlay", inter_overlay)
        if ipv4_end_ip is not None:
            pulumi.set(__self__, "ipv4_end_ip", ipv4_end_ip)
        if ipv4_start_ip is not None:
            pulumi.set(__self__, "ipv4_start_ip", ipv4_start_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlay_name is not None:
            pulumi.set(__self__, "overlay_name", overlay_name)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="assignIp")
    def assign_ip(self) -> Optional[str]:
        return pulumi.get(self, "assign_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interOverlay")
    def inter_overlay(self) -> Optional[str]:
        return pulumi.get(self, "inter_overlay")

    @property
    @pulumi.getter(name="ipv4EndIp")
    def ipv4_end_ip(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_end_ip")

    @property
    @pulumi.getter(name="ipv4StartIp")
    def ipv4_start_ip(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_start_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overlayName")
    def overlay_name(self) -> Optional[str]:
        return pulumi.get(self, "overlay_name")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence['outputs.VpnOcvpnOverlaySubnet']]:
        return pulumi.get(self, "subnets")


@pulumi.output_type
class VpnOcvpnOverlaySubnet(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 subnet: Optional[str] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VpnOcvpnWanInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslSettingsAuthenticationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCert":
            suggest = "client_cert"
        elif key == "sourceAddress6Negate":
            suggest = "source_address6_negate"
        elif key == "sourceAddress6s":
            suggest = "source_address6s"
        elif key == "sourceAddressNegate":
            suggest = "source_address_negate"
        elif key == "sourceAddresses":
            suggest = "source_addresses"
        elif key == "sourceInterfaces":
            suggest = "source_interfaces"
        elif key == "userPeer":
            suggest = "user_peer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnSslSettingsAuthenticationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnSslSettingsAuthenticationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnSslSettingsAuthenticationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth: Optional[str] = None,
                 cipher: Optional[str] = None,
                 client_cert: Optional[str] = None,
                 groups: Optional[Sequence['outputs.VpnSslSettingsAuthenticationRuleGroup']] = None,
                 id: Optional[int] = None,
                 portal: Optional[str] = None,
                 realm: Optional[str] = None,
                 source_address6_negate: Optional[str] = None,
                 source_address6s: Optional[Sequence['outputs.VpnSslSettingsAuthenticationRuleSourceAddress6']] = None,
                 source_address_negate: Optional[str] = None,
                 source_addresses: Optional[Sequence['outputs.VpnSslSettingsAuthenticationRuleSourceAddress']] = None,
                 source_interfaces: Optional[Sequence['outputs.VpnSslSettingsAuthenticationRuleSourceInterface']] = None,
                 user_peer: Optional[str] = None,
                 users: Optional[Sequence['outputs.VpnSslSettingsAuthenticationRuleUser']] = None):
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if portal is not None:
            pulumi.set(__self__, "portal", portal)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if source_address6_negate is not None:
            pulumi.set(__self__, "source_address6_negate", source_address6_negate)
        if source_address6s is not None:
            pulumi.set(__self__, "source_address6s", source_address6s)
        if source_address_negate is not None:
            pulumi.set(__self__, "source_address_negate", source_address_negate)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if source_interfaces is not None:
            pulumi.set(__self__, "source_interfaces", source_interfaces)
        if user_peer is not None:
            pulumi.set(__self__, "user_peer", user_peer)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def auth(self) -> Optional[str]:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[str]:
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.VpnSslSettingsAuthenticationRuleGroup']]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def portal(self) -> Optional[str]:
        return pulumi.get(self, "portal")

    @property
    @pulumi.getter
    def realm(self) -> Optional[str]:
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="sourceAddress6Negate")
    def source_address6_negate(self) -> Optional[str]:
        return pulumi.get(self, "source_address6_negate")

    @property
    @pulumi.getter(name="sourceAddress6s")
    def source_address6s(self) -> Optional[Sequence['outputs.VpnSslSettingsAuthenticationRuleSourceAddress6']]:
        return pulumi.get(self, "source_address6s")

    @property
    @pulumi.getter(name="sourceAddressNegate")
    def source_address_negate(self) -> Optional[str]:
        return pulumi.get(self, "source_address_negate")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[Sequence['outputs.VpnSslSettingsAuthenticationRuleSourceAddress']]:
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter(name="sourceInterfaces")
    def source_interfaces(self) -> Optional[Sequence['outputs.VpnSslSettingsAuthenticationRuleSourceInterface']]:
        return pulumi.get(self, "source_interfaces")

    @property
    @pulumi.getter(name="userPeer")
    def user_peer(self) -> Optional[str]:
        return pulumi.get(self, "user_peer")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.VpnSslSettingsAuthenticationRuleUser']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class VpnSslSettingsAuthenticationRuleGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslSettingsAuthenticationRuleSourceAddress6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslSettingsAuthenticationRuleSourceAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslSettingsAuthenticationRuleSourceInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslSettingsAuthenticationRuleUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslSettingsSourceAddress6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslSettingsSourceInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslSettingsTunnelIpPool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslSettingsTunnelIpv6Pool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslWebHostCheckSoftwareCheckItemList(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 md5s: Optional[Sequence['outputs.VpnSslWebHostCheckSoftwareCheckItemListMd5']] = None,
                 target: Optional[str] = None,
                 type: Optional[str] = None,
                 version: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5s is not None:
            pulumi.set(__self__, "md5s", md5s)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def md5s(self) -> Optional[Sequence['outputs.VpnSslWebHostCheckSoftwareCheckItemListMd5']]:
        return pulumi.get(self, "md5s")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class VpnSslWebHostCheckSoftwareCheckItemListMd5(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class VpnSslWebPortalBookmarkGroup(dict):
    def __init__(__self__, *,
                 bookmarks: Optional[Sequence['outputs.VpnSslWebPortalBookmarkGroupBookmark']] = None,
                 name: Optional[str] = None):
        if bookmarks is not None:
            pulumi.set(__self__, "bookmarks", bookmarks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bookmarks(self) -> Optional[Sequence['outputs.VpnSslWebPortalBookmarkGroupBookmark']]:
        return pulumi.get(self, "bookmarks")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslWebPortalBookmarkGroupBookmark(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalParams":
            suggest = "additional_params"
        elif key == "colorDepth":
            suggest = "color_depth"
        elif key == "formDatas":
            suggest = "form_datas"
        elif key == "keyboardLayout":
            suggest = "keyboard_layout"
        elif key == "listeningPort":
            suggest = "listening_port"
        elif key == "loadBalancingInfo":
            suggest = "load_balancing_info"
        elif key == "logonPassword":
            suggest = "logon_password"
        elif key == "logonUser":
            suggest = "logon_user"
        elif key == "preconnectionBlob":
            suggest = "preconnection_blob"
        elif key == "preconnectionId":
            suggest = "preconnection_id"
        elif key == "remotePort":
            suggest = "remote_port"
        elif key == "restrictedAdmin":
            suggest = "restricted_admin"
        elif key == "sendPreconnectionId":
            suggest = "send_preconnection_id"
        elif key == "serverLayout":
            suggest = "server_layout"
        elif key == "showStatusWindow":
            suggest = "show_status_window"
        elif key == "ssoCredential":
            suggest = "sso_credential"
        elif key == "ssoCredentialSentOnce":
            suggest = "sso_credential_sent_once"
        elif key == "ssoPassword":
            suggest = "sso_password"
        elif key == "ssoUsername":
            suggest = "sso_username"
        elif key == "vncKeyboardLayout":
            suggest = "vnc_keyboard_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnSslWebPortalBookmarkGroupBookmark. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnSslWebPortalBookmarkGroupBookmark.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnSslWebPortalBookmarkGroupBookmark.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_params: Optional[str] = None,
                 apptype: Optional[str] = None,
                 color_depth: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 folder: Optional[str] = None,
                 form_datas: Optional[Sequence['outputs.VpnSslWebPortalBookmarkGroupBookmarkFormData']] = None,
                 height: Optional[int] = None,
                 host: Optional[str] = None,
                 keyboard_layout: Optional[str] = None,
                 listening_port: Optional[int] = None,
                 load_balancing_info: Optional[str] = None,
                 logon_password: Optional[str] = None,
                 logon_user: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 preconnection_blob: Optional[str] = None,
                 preconnection_id: Optional[int] = None,
                 remote_port: Optional[int] = None,
                 restricted_admin: Optional[str] = None,
                 security: Optional[str] = None,
                 send_preconnection_id: Optional[str] = None,
                 server_layout: Optional[str] = None,
                 show_status_window: Optional[str] = None,
                 sso: Optional[str] = None,
                 sso_credential: Optional[str] = None,
                 sso_credential_sent_once: Optional[str] = None,
                 sso_password: Optional[str] = None,
                 sso_username: Optional[str] = None,
                 url: Optional[str] = None,
                 vnc_keyboard_layout: Optional[str] = None,
                 width: Optional[int] = None):
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[str]:
        return pulumi.get(self, "additional_params")

    @property
    @pulumi.getter
    def apptype(self) -> Optional[str]:
        return pulumi.get(self, "apptype")

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[str]:
        return pulumi.get(self, "color_depth")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def folder(self) -> Optional[str]:
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[Sequence['outputs.VpnSslWebPortalBookmarkGroupBookmarkFormData']]:
        return pulumi.get(self, "form_datas")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[str]:
        return pulumi.get(self, "keyboard_layout")

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[int]:
        return pulumi.get(self, "listening_port")

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[str]:
        return pulumi.get(self, "load_balancing_info")

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[str]:
        return pulumi.get(self, "logon_password")

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[str]:
        return pulumi.get(self, "logon_user")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[str]:
        return pulumi.get(self, "preconnection_blob")

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[int]:
        return pulumi.get(self, "preconnection_id")

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[int]:
        return pulumi.get(self, "remote_port")

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[str]:
        return pulumi.get(self, "restricted_admin")

    @property
    @pulumi.getter
    def security(self) -> Optional[str]:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[str]:
        return pulumi.get(self, "send_preconnection_id")

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[str]:
        return pulumi.get(self, "server_layout")

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[str]:
        return pulumi.get(self, "show_status_window")

    @property
    @pulumi.getter
    def sso(self) -> Optional[str]:
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[str]:
        return pulumi.get(self, "sso_credential")

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[str]:
        return pulumi.get(self, "sso_credential_sent_once")

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[str]:
        return pulumi.get(self, "sso_password")

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[str]:
        return pulumi.get(self, "sso_username")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[str]:
        return pulumi.get(self, "vnc_keyboard_layout")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class VpnSslWebPortalBookmarkGroupBookmarkFormData(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VpnSslWebPortalHostCheckPolicy(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslWebPortalIpPool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslWebPortalIpv6Pool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslWebPortalIpv6SplitTunnelingRoutingAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslWebPortalLandingPage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formDatas":
            suggest = "form_datas"
        elif key == "logoutUrl":
            suggest = "logout_url"
        elif key == "ssoCredential":
            suggest = "sso_credential"
        elif key == "ssoPassword":
            suggest = "sso_password"
        elif key == "ssoUsername":
            suggest = "sso_username"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnSslWebPortalLandingPage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnSslWebPortalLandingPage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnSslWebPortalLandingPage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 form_datas: Optional[Sequence['outputs.VpnSslWebPortalLandingPageFormData']] = None,
                 logout_url: Optional[str] = None,
                 sso: Optional[str] = None,
                 sso_credential: Optional[str] = None,
                 sso_password: Optional[str] = None,
                 sso_username: Optional[str] = None,
                 url: Optional[str] = None):
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if logout_url is not None:
            pulumi.set(__self__, "logout_url", logout_url)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[Sequence['outputs.VpnSslWebPortalLandingPageFormData']]:
        return pulumi.get(self, "form_datas")

    @property
    @pulumi.getter(name="logoutUrl")
    def logout_url(self) -> Optional[str]:
        return pulumi.get(self, "logout_url")

    @property
    @pulumi.getter
    def sso(self) -> Optional[str]:
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[str]:
        return pulumi.get(self, "sso_credential")

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[str]:
        return pulumi.get(self, "sso_password")

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[str]:
        return pulumi.get(self, "sso_username")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VpnSslWebPortalLandingPageFormData(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VpnSslWebPortalMacAddrCheckRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "macAddrLists":
            suggest = "mac_addr_lists"
        elif key == "macAddrMask":
            suggest = "mac_addr_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnSslWebPortalMacAddrCheckRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnSslWebPortalMacAddrCheckRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnSslWebPortalMacAddrCheckRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mac_addr_lists: Optional[Sequence['outputs.VpnSslWebPortalMacAddrCheckRuleMacAddrList']] = None,
                 mac_addr_mask: Optional[int] = None,
                 name: Optional[str] = None):
        if mac_addr_lists is not None:
            pulumi.set(__self__, "mac_addr_lists", mac_addr_lists)
        if mac_addr_mask is not None:
            pulumi.set(__self__, "mac_addr_mask", mac_addr_mask)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="macAddrLists")
    def mac_addr_lists(self) -> Optional[Sequence['outputs.VpnSslWebPortalMacAddrCheckRuleMacAddrList']]:
        return pulumi.get(self, "mac_addr_lists")

    @property
    @pulumi.getter(name="macAddrMask")
    def mac_addr_mask(self) -> Optional[int]:
        return pulumi.get(self, "mac_addr_mask")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslWebPortalMacAddrCheckRuleMacAddrList(dict):
    def __init__(__self__, *,
                 addr: Optional[str] = None):
        if addr is not None:
            pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> Optional[str]:
        return pulumi.get(self, "addr")


@pulumi.output_type
class VpnSslWebPortalOsCheckList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "latestPatchLevel":
            suggest = "latest_patch_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnSslWebPortalOsCheckList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnSslWebPortalOsCheckList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnSslWebPortalOsCheckList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 latest_patch_level: Optional[str] = None,
                 name: Optional[str] = None,
                 tolerance: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if latest_patch_level is not None:
            pulumi.set(__self__, "latest_patch_level", latest_patch_level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="latestPatchLevel")
    def latest_patch_level(self) -> Optional[str]:
        return pulumi.get(self, "latest_patch_level")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[int]:
        return pulumi.get(self, "tolerance")


@pulumi.output_type
class VpnSslWebPortalSplitDn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServer1":
            suggest = "dns_server1"
        elif key == "dnsServer2":
            suggest = "dns_server2"
        elif key == "ipv6DnsServer1":
            suggest = "ipv6_dns_server1"
        elif key == "ipv6DnsServer2":
            suggest = "ipv6_dns_server2"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnSslWebPortalSplitDn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnSslWebPortalSplitDn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnSslWebPortalSplitDn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_server1: Optional[str] = None,
                 dns_server2: Optional[str] = None,
                 domains: Optional[str] = None,
                 id: Optional[int] = None,
                 ipv6_dns_server1: Optional[str] = None,
                 ipv6_dns_server2: Optional[str] = None):
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[str]:
        return pulumi.get(self, "dns_server1")

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[str]:
        return pulumi.get(self, "dns_server2")

    @property
    @pulumi.getter
    def domains(self) -> Optional[str]:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_dns_server1")

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_dns_server2")


@pulumi.output_type
class VpnSslWebPortalSplitTunnelingRoutingAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class VpnSslWebUserBookmarkBookmark(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalParams":
            suggest = "additional_params"
        elif key == "colorDepth":
            suggest = "color_depth"
        elif key == "formDatas":
            suggest = "form_datas"
        elif key == "keyboardLayout":
            suggest = "keyboard_layout"
        elif key == "listeningPort":
            suggest = "listening_port"
        elif key == "loadBalancingInfo":
            suggest = "load_balancing_info"
        elif key == "logonPassword":
            suggest = "logon_password"
        elif key == "logonUser":
            suggest = "logon_user"
        elif key == "preconnectionBlob":
            suggest = "preconnection_blob"
        elif key == "preconnectionId":
            suggest = "preconnection_id"
        elif key == "remotePort":
            suggest = "remote_port"
        elif key == "restrictedAdmin":
            suggest = "restricted_admin"
        elif key == "sendPreconnectionId":
            suggest = "send_preconnection_id"
        elif key == "serverLayout":
            suggest = "server_layout"
        elif key == "showStatusWindow":
            suggest = "show_status_window"
        elif key == "ssoCredential":
            suggest = "sso_credential"
        elif key == "ssoCredentialSentOnce":
            suggest = "sso_credential_sent_once"
        elif key == "ssoPassword":
            suggest = "sso_password"
        elif key == "ssoUsername":
            suggest = "sso_username"
        elif key == "vncKeyboardLayout":
            suggest = "vnc_keyboard_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnSslWebUserBookmarkBookmark. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnSslWebUserBookmarkBookmark.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnSslWebUserBookmarkBookmark.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_params: Optional[str] = None,
                 apptype: Optional[str] = None,
                 color_depth: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 folder: Optional[str] = None,
                 form_datas: Optional[Sequence['outputs.VpnSslWebUserBookmarkBookmarkFormData']] = None,
                 height: Optional[int] = None,
                 host: Optional[str] = None,
                 keyboard_layout: Optional[str] = None,
                 listening_port: Optional[int] = None,
                 load_balancing_info: Optional[str] = None,
                 logon_password: Optional[str] = None,
                 logon_user: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 preconnection_blob: Optional[str] = None,
                 preconnection_id: Optional[int] = None,
                 remote_port: Optional[int] = None,
                 restricted_admin: Optional[str] = None,
                 security: Optional[str] = None,
                 send_preconnection_id: Optional[str] = None,
                 server_layout: Optional[str] = None,
                 show_status_window: Optional[str] = None,
                 sso: Optional[str] = None,
                 sso_credential: Optional[str] = None,
                 sso_credential_sent_once: Optional[str] = None,
                 sso_password: Optional[str] = None,
                 sso_username: Optional[str] = None,
                 url: Optional[str] = None,
                 vnc_keyboard_layout: Optional[str] = None,
                 width: Optional[int] = None):
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[str]:
        return pulumi.get(self, "additional_params")

    @property
    @pulumi.getter
    def apptype(self) -> Optional[str]:
        return pulumi.get(self, "apptype")

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[str]:
        return pulumi.get(self, "color_depth")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def folder(self) -> Optional[str]:
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[Sequence['outputs.VpnSslWebUserBookmarkBookmarkFormData']]:
        return pulumi.get(self, "form_datas")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[str]:
        return pulumi.get(self, "keyboard_layout")

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[int]:
        return pulumi.get(self, "listening_port")

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[str]:
        return pulumi.get(self, "load_balancing_info")

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[str]:
        return pulumi.get(self, "logon_password")

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[str]:
        return pulumi.get(self, "logon_user")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[str]:
        return pulumi.get(self, "preconnection_blob")

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[int]:
        return pulumi.get(self, "preconnection_id")

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[int]:
        return pulumi.get(self, "remote_port")

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[str]:
        return pulumi.get(self, "restricted_admin")

    @property
    @pulumi.getter
    def security(self) -> Optional[str]:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[str]:
        return pulumi.get(self, "send_preconnection_id")

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[str]:
        return pulumi.get(self, "server_layout")

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[str]:
        return pulumi.get(self, "show_status_window")

    @property
    @pulumi.getter
    def sso(self) -> Optional[str]:
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[str]:
        return pulumi.get(self, "sso_credential")

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[str]:
        return pulumi.get(self, "sso_credential_sent_once")

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[str]:
        return pulumi.get(self, "sso_password")

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[str]:
        return pulumi.get(self, "sso_username")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[str]:
        return pulumi.get(self, "vnc_keyboard_layout")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class VpnSslWebUserBookmarkBookmarkFormData(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VpnSslWebUserGroupBookmarkBookmark(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalParams":
            suggest = "additional_params"
        elif key == "colorDepth":
            suggest = "color_depth"
        elif key == "formDatas":
            suggest = "form_datas"
        elif key == "keyboardLayout":
            suggest = "keyboard_layout"
        elif key == "listeningPort":
            suggest = "listening_port"
        elif key == "loadBalancingInfo":
            suggest = "load_balancing_info"
        elif key == "logonPassword":
            suggest = "logon_password"
        elif key == "logonUser":
            suggest = "logon_user"
        elif key == "preconnectionBlob":
            suggest = "preconnection_blob"
        elif key == "preconnectionId":
            suggest = "preconnection_id"
        elif key == "remotePort":
            suggest = "remote_port"
        elif key == "restrictedAdmin":
            suggest = "restricted_admin"
        elif key == "sendPreconnectionId":
            suggest = "send_preconnection_id"
        elif key == "serverLayout":
            suggest = "server_layout"
        elif key == "showStatusWindow":
            suggest = "show_status_window"
        elif key == "ssoCredential":
            suggest = "sso_credential"
        elif key == "ssoCredentialSentOnce":
            suggest = "sso_credential_sent_once"
        elif key == "ssoPassword":
            suggest = "sso_password"
        elif key == "ssoUsername":
            suggest = "sso_username"
        elif key == "vncKeyboardLayout":
            suggest = "vnc_keyboard_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnSslWebUserGroupBookmarkBookmark. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnSslWebUserGroupBookmarkBookmark.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnSslWebUserGroupBookmarkBookmark.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_params: Optional[str] = None,
                 apptype: Optional[str] = None,
                 color_depth: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 folder: Optional[str] = None,
                 form_datas: Optional[Sequence['outputs.VpnSslWebUserGroupBookmarkBookmarkFormData']] = None,
                 height: Optional[int] = None,
                 host: Optional[str] = None,
                 keyboard_layout: Optional[str] = None,
                 listening_port: Optional[int] = None,
                 load_balancing_info: Optional[str] = None,
                 logon_password: Optional[str] = None,
                 logon_user: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 preconnection_blob: Optional[str] = None,
                 preconnection_id: Optional[int] = None,
                 remote_port: Optional[int] = None,
                 restricted_admin: Optional[str] = None,
                 security: Optional[str] = None,
                 send_preconnection_id: Optional[str] = None,
                 server_layout: Optional[str] = None,
                 show_status_window: Optional[str] = None,
                 sso: Optional[str] = None,
                 sso_credential: Optional[str] = None,
                 sso_credential_sent_once: Optional[str] = None,
                 sso_password: Optional[str] = None,
                 sso_username: Optional[str] = None,
                 url: Optional[str] = None,
                 vnc_keyboard_layout: Optional[str] = None,
                 width: Optional[int] = None):
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[str]:
        return pulumi.get(self, "additional_params")

    @property
    @pulumi.getter
    def apptype(self) -> Optional[str]:
        return pulumi.get(self, "apptype")

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[str]:
        return pulumi.get(self, "color_depth")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def folder(self) -> Optional[str]:
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[Sequence['outputs.VpnSslWebUserGroupBookmarkBookmarkFormData']]:
        return pulumi.get(self, "form_datas")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[str]:
        return pulumi.get(self, "keyboard_layout")

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[int]:
        return pulumi.get(self, "listening_port")

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[str]:
        return pulumi.get(self, "load_balancing_info")

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[str]:
        return pulumi.get(self, "logon_password")

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[str]:
        return pulumi.get(self, "logon_user")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[str]:
        return pulumi.get(self, "preconnection_blob")

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[int]:
        return pulumi.get(self, "preconnection_id")

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[int]:
        return pulumi.get(self, "remote_port")

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[str]:
        return pulumi.get(self, "restricted_admin")

    @property
    @pulumi.getter
    def security(self) -> Optional[str]:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[str]:
        return pulumi.get(self, "send_preconnection_id")

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[str]:
        return pulumi.get(self, "server_layout")

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[str]:
        return pulumi.get(self, "show_status_window")

    @property
    @pulumi.getter
    def sso(self) -> Optional[str]:
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[str]:
        return pulumi.get(self, "sso_credential")

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[str]:
        return pulumi.get(self, "sso_credential_sent_once")

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[str]:
        return pulumi.get(self, "sso_password")

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[str]:
        return pulumi.get(self, "sso_username")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[str]:
        return pulumi.get(self, "vnc_keyboard_layout")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class VpnSslWebUserGroupBookmarkBookmarkFormData(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WafProfileAddressList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockedAddresses":
            suggest = "blocked_addresses"
        elif key == "blockedLog":
            suggest = "blocked_log"
        elif key == "trustedAddresses":
            suggest = "trusted_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileAddressList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileAddressList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileAddressList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blocked_addresses: Optional[Sequence['outputs.WafProfileAddressListBlockedAddress']] = None,
                 blocked_log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None,
                 trusted_addresses: Optional[Sequence['outputs.WafProfileAddressListTrustedAddress']] = None):
        if blocked_addresses is not None:
            pulumi.set(__self__, "blocked_addresses", blocked_addresses)
        if blocked_log is not None:
            pulumi.set(__self__, "blocked_log", blocked_log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trusted_addresses is not None:
            pulumi.set(__self__, "trusted_addresses", trusted_addresses)

    @property
    @pulumi.getter(name="blockedAddresses")
    def blocked_addresses(self) -> Optional[Sequence['outputs.WafProfileAddressListBlockedAddress']]:
        return pulumi.get(self, "blocked_addresses")

    @property
    @pulumi.getter(name="blockedLog")
    def blocked_log(self) -> Optional[str]:
        return pulumi.get(self, "blocked_log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trustedAddresses")
    def trusted_addresses(self) -> Optional[Sequence['outputs.WafProfileAddressListTrustedAddress']]:
        return pulumi.get(self, "trusted_addresses")


@pulumi.output_type
class WafProfileAddressListBlockedAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WafProfileAddressListTrustedAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WafProfileConstraint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentLength":
            suggest = "content_length"
        elif key == "headerLength":
            suggest = "header_length"
        elif key == "lineLength":
            suggest = "line_length"
        elif key == "maxCookie":
            suggest = "max_cookie"
        elif key == "maxHeaderLine":
            suggest = "max_header_line"
        elif key == "maxRangeSegment":
            suggest = "max_range_segment"
        elif key == "maxUrlParam":
            suggest = "max_url_param"
        elif key == "paramLength":
            suggest = "param_length"
        elif key == "urlParamLength":
            suggest = "url_param_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileConstraint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileConstraint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileConstraint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_length: Optional['outputs.WafProfileConstraintContentLength'] = None,
                 exceptions: Optional[Sequence['outputs.WafProfileConstraintException']] = None,
                 header_length: Optional['outputs.WafProfileConstraintHeaderLength'] = None,
                 hostname: Optional['outputs.WafProfileConstraintHostname'] = None,
                 line_length: Optional['outputs.WafProfileConstraintLineLength'] = None,
                 malformed: Optional['outputs.WafProfileConstraintMalformed'] = None,
                 max_cookie: Optional['outputs.WafProfileConstraintMaxCookie'] = None,
                 max_header_line: Optional['outputs.WafProfileConstraintMaxHeaderLine'] = None,
                 max_range_segment: Optional['outputs.WafProfileConstraintMaxRangeSegment'] = None,
                 max_url_param: Optional['outputs.WafProfileConstraintMaxUrlParam'] = None,
                 method: Optional['outputs.WafProfileConstraintMethod'] = None,
                 param_length: Optional['outputs.WafProfileConstraintParamLength'] = None,
                 url_param_length: Optional['outputs.WafProfileConstraintUrlParamLength'] = None,
                 version: Optional['outputs.WafProfileConstraintVersion'] = None):
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if exceptions is not None:
            pulumi.set(__self__, "exceptions", exceptions)
        if header_length is not None:
            pulumi.set(__self__, "header_length", header_length)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if malformed is not None:
            pulumi.set(__self__, "malformed", malformed)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if param_length is not None:
            pulumi.set(__self__, "param_length", param_length)
        if url_param_length is not None:
            pulumi.set(__self__, "url_param_length", url_param_length)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional['outputs.WafProfileConstraintContentLength']:
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter
    def exceptions(self) -> Optional[Sequence['outputs.WafProfileConstraintException']]:
        return pulumi.get(self, "exceptions")

    @property
    @pulumi.getter(name="headerLength")
    def header_length(self) -> Optional['outputs.WafProfileConstraintHeaderLength']:
        return pulumi.get(self, "header_length")

    @property
    @pulumi.getter
    def hostname(self) -> Optional['outputs.WafProfileConstraintHostname']:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional['outputs.WafProfileConstraintLineLength']:
        return pulumi.get(self, "line_length")

    @property
    @pulumi.getter
    def malformed(self) -> Optional['outputs.WafProfileConstraintMalformed']:
        return pulumi.get(self, "malformed")

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional['outputs.WafProfileConstraintMaxCookie']:
        return pulumi.get(self, "max_cookie")

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional['outputs.WafProfileConstraintMaxHeaderLine']:
        return pulumi.get(self, "max_header_line")

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional['outputs.WafProfileConstraintMaxRangeSegment']:
        return pulumi.get(self, "max_range_segment")

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional['outputs.WafProfileConstraintMaxUrlParam']:
        return pulumi.get(self, "max_url_param")

    @property
    @pulumi.getter
    def method(self) -> Optional['outputs.WafProfileConstraintMethod']:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="paramLength")
    def param_length(self) -> Optional['outputs.WafProfileConstraintParamLength']:
        return pulumi.get(self, "param_length")

    @property
    @pulumi.getter(name="urlParamLength")
    def url_param_length(self) -> Optional['outputs.WafProfileConstraintUrlParamLength']:
        return pulumi.get(self, "url_param_length")

    @property
    @pulumi.getter
    def version(self) -> Optional['outputs.WafProfileConstraintVersion']:
        return pulumi.get(self, "version")


@pulumi.output_type
class WafProfileConstraintContentLength(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 length: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintException(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentLength":
            suggest = "content_length"
        elif key == "headerLength":
            suggest = "header_length"
        elif key == "lineLength":
            suggest = "line_length"
        elif key == "maxCookie":
            suggest = "max_cookie"
        elif key == "maxHeaderLine":
            suggest = "max_header_line"
        elif key == "maxRangeSegment":
            suggest = "max_range_segment"
        elif key == "maxUrlParam":
            suggest = "max_url_param"
        elif key == "paramLength":
            suggest = "param_length"
        elif key == "urlParamLength":
            suggest = "url_param_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileConstraintException. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileConstraintException.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileConstraintException.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 content_length: Optional[str] = None,
                 header_length: Optional[str] = None,
                 hostname: Optional[str] = None,
                 id: Optional[int] = None,
                 line_length: Optional[str] = None,
                 malformed: Optional[str] = None,
                 max_cookie: Optional[str] = None,
                 max_header_line: Optional[str] = None,
                 max_range_segment: Optional[str] = None,
                 max_url_param: Optional[str] = None,
                 method: Optional[str] = None,
                 param_length: Optional[str] = None,
                 pattern: Optional[str] = None,
                 regex: Optional[str] = None,
                 url_param_length: Optional[str] = None,
                 version: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if header_length is not None:
            pulumi.set(__self__, "header_length", header_length)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if malformed is not None:
            pulumi.set(__self__, "malformed", malformed)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if param_length is not None:
            pulumi.set(__self__, "param_length", param_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if url_param_length is not None:
            pulumi.set(__self__, "url_param_length", url_param_length)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[str]:
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter(name="headerLength")
    def header_length(self) -> Optional[str]:
        return pulumi.get(self, "header_length")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional[str]:
        return pulumi.get(self, "line_length")

    @property
    @pulumi.getter
    def malformed(self) -> Optional[str]:
        return pulumi.get(self, "malformed")

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[str]:
        return pulumi.get(self, "max_cookie")

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[str]:
        return pulumi.get(self, "max_header_line")

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[str]:
        return pulumi.get(self, "max_range_segment")

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[str]:
        return pulumi.get(self, "max_url_param")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="paramLength")
    def param_length(self) -> Optional[str]:
        return pulumi.get(self, "param_length")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="urlParamLength")
    def url_param_length(self) -> Optional[str]:
        return pulumi.get(self, "url_param_length")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class WafProfileConstraintHeaderLength(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 length: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintHostname(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintLineLength(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 length: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintMalformed(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintMaxCookie(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCookie":
            suggest = "max_cookie"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileConstraintMaxCookie. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileConstraintMaxCookie.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileConstraintMaxCookie.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 max_cookie: Optional[int] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[int]:
        return pulumi.get(self, "max_cookie")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintMaxHeaderLine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxHeaderLine":
            suggest = "max_header_line"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileConstraintMaxHeaderLine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileConstraintMaxHeaderLine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileConstraintMaxHeaderLine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 max_header_line: Optional[int] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[int]:
        return pulumi.get(self, "max_header_line")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintMaxRangeSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRangeSegment":
            suggest = "max_range_segment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileConstraintMaxRangeSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileConstraintMaxRangeSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileConstraintMaxRangeSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 max_range_segment: Optional[int] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[int]:
        return pulumi.get(self, "max_range_segment")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintMaxUrlParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxUrlParam":
            suggest = "max_url_param"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileConstraintMaxUrlParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileConstraintMaxUrlParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileConstraintMaxUrlParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 max_url_param: Optional[int] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[int]:
        return pulumi.get(self, "max_url_param")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintMethod(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintParamLength(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 length: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintUrlParamLength(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 length: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileConstraintVersion(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultAllowedMethods":
            suggest = "default_allowed_methods"
        elif key == "methodPolicies":
            suggest = "method_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_allowed_methods: Optional[str] = None,
                 log: Optional[str] = None,
                 method_policies: Optional[Sequence['outputs.WafProfileMethodMethodPolicy']] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if default_allowed_methods is not None:
            pulumi.set(__self__, "default_allowed_methods", default_allowed_methods)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if method_policies is not None:
            pulumi.set(__self__, "method_policies", method_policies)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="defaultAllowedMethods")
    def default_allowed_methods(self) -> Optional[str]:
        return pulumi.get(self, "default_allowed_methods")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="methodPolicies")
    def method_policies(self) -> Optional[Sequence['outputs.WafProfileMethodMethodPolicy']]:
        return pulumi.get(self, "method_policies")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileMethodMethodPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedMethods":
            suggest = "allowed_methods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileMethodMethodPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileMethodMethodPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileMethodMethodPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 allowed_methods: Optional[str] = None,
                 id: Optional[int] = None,
                 pattern: Optional[str] = None,
                 regex: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[str]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class WafProfileSignature(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creditCardDetectionThreshold":
            suggest = "credit_card_detection_threshold"
        elif key == "customSignatures":
            suggest = "custom_signatures"
        elif key == "disabledSignatures":
            suggest = "disabled_signatures"
        elif key == "disabledSubClasses":
            suggest = "disabled_sub_classes"
        elif key == "mainClasses":
            suggest = "main_classes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileSignature. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileSignature.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileSignature.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credit_card_detection_threshold: Optional[int] = None,
                 custom_signatures: Optional[Sequence['outputs.WafProfileSignatureCustomSignature']] = None,
                 disabled_signatures: Optional[Sequence['outputs.WafProfileSignatureDisabledSignature']] = None,
                 disabled_sub_classes: Optional[Sequence['outputs.WafProfileSignatureDisabledSubClass']] = None,
                 main_classes: Optional[Sequence['outputs.WafProfileSignatureMainClass']] = None):
        if credit_card_detection_threshold is not None:
            pulumi.set(__self__, "credit_card_detection_threshold", credit_card_detection_threshold)
        if custom_signatures is not None:
            pulumi.set(__self__, "custom_signatures", custom_signatures)
        if disabled_signatures is not None:
            pulumi.set(__self__, "disabled_signatures", disabled_signatures)
        if disabled_sub_classes is not None:
            pulumi.set(__self__, "disabled_sub_classes", disabled_sub_classes)
        if main_classes is not None:
            pulumi.set(__self__, "main_classes", main_classes)

    @property
    @pulumi.getter(name="creditCardDetectionThreshold")
    def credit_card_detection_threshold(self) -> Optional[int]:
        return pulumi.get(self, "credit_card_detection_threshold")

    @property
    @pulumi.getter(name="customSignatures")
    def custom_signatures(self) -> Optional[Sequence['outputs.WafProfileSignatureCustomSignature']]:
        return pulumi.get(self, "custom_signatures")

    @property
    @pulumi.getter(name="disabledSignatures")
    def disabled_signatures(self) -> Optional[Sequence['outputs.WafProfileSignatureDisabledSignature']]:
        return pulumi.get(self, "disabled_signatures")

    @property
    @pulumi.getter(name="disabledSubClasses")
    def disabled_sub_classes(self) -> Optional[Sequence['outputs.WafProfileSignatureDisabledSubClass']]:
        return pulumi.get(self, "disabled_sub_classes")

    @property
    @pulumi.getter(name="mainClasses")
    def main_classes(self) -> Optional[Sequence['outputs.WafProfileSignatureMainClass']]:
        return pulumi.get(self, "main_classes")


@pulumi.output_type
class WafProfileSignatureCustomSignature(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitivity":
            suggest = "case_sensitivity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileSignatureCustomSignature. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileSignatureCustomSignature.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileSignatureCustomSignature.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 case_sensitivity: Optional[str] = None,
                 direction: Optional[str] = None,
                 log: Optional[str] = None,
                 name: Optional[str] = None,
                 pattern: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None,
                 target: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[str]:
        return pulumi.get(self, "case_sensitivity")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class WafProfileSignatureDisabledSignature(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class WafProfileSignatureDisabledSubClass(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class WafProfileSignatureMainClass(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WafProfileUrlAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPatterns":
            suggest = "access_patterns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafProfileUrlAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafProfileUrlAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafProfileUrlAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_patterns: Optional[Sequence['outputs.WafProfileUrlAccessAccessPattern']] = None,
                 action: Optional[str] = None,
                 address: Optional[str] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None,
                 severity: Optional[str] = None):
        if access_patterns is not None:
            pulumi.set(__self__, "access_patterns", access_patterns)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="accessPatterns")
    def access_patterns(self) -> Optional[Sequence['outputs.WafProfileUrlAccessAccessPattern']]:
        return pulumi.get(self, "access_patterns")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class WafProfileUrlAccessAccessPattern(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 negate: Optional[str] = None,
                 pattern: Optional[str] = None,
                 regex: Optional[str] = None,
                 srcaddr: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def negate(self) -> Optional[str]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[str]:
        return pulumi.get(self, "srcaddr")


@pulumi.output_type
class WanoptCacheServiceDstPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "deviceId":
            suggest = "device_id"
        elif key == "encodeType":
            suggest = "encode_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanoptCacheServiceDstPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanoptCacheServiceDstPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanoptCacheServiceDstPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: Optional[int] = None,
                 device_id: Optional[str] = None,
                 encode_type: Optional[int] = None,
                 ip: Optional[str] = None,
                 priority: Optional[int] = None):
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if encode_type is not None:
            pulumi.set(__self__, "encode_type", encode_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[int]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[str]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="encodeType")
    def encode_type(self) -> Optional[int]:
        return pulumi.get(self, "encode_type")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class WanoptCacheServiceSrcPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "deviceId":
            suggest = "device_id"
        elif key == "encodeType":
            suggest = "encode_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanoptCacheServiceSrcPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanoptCacheServiceSrcPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanoptCacheServiceSrcPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: Optional[int] = None,
                 device_id: Optional[str] = None,
                 encode_type: Optional[int] = None,
                 ip: Optional[str] = None,
                 priority: Optional[int] = None):
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if encode_type is not None:
            pulumi.set(__self__, "encode_type", encode_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[int]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[str]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="encodeType")
    def encode_type(self) -> Optional[int]:
        return pulumi.get(self, "encode_type")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class WanoptContentDeliveryNetworkRuleHostDomainNameSuffix(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WanoptContentDeliveryNetworkRuleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentId":
            suggest = "content_id"
        elif key == "matchEntries":
            suggest = "match_entries"
        elif key == "matchMode":
            suggest = "match_mode"
        elif key == "skipEntries":
            suggest = "skip_entries"
        elif key == "skipRuleMode":
            suggest = "skip_rule_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanoptContentDeliveryNetworkRuleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanoptContentDeliveryNetworkRuleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanoptContentDeliveryNetworkRuleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_id: Optional['outputs.WanoptContentDeliveryNetworkRuleRuleContentId'] = None,
                 match_entries: Optional[Sequence['outputs.WanoptContentDeliveryNetworkRuleRuleMatchEntry']] = None,
                 match_mode: Optional[str] = None,
                 name: Optional[str] = None,
                 skip_entries: Optional[Sequence['outputs.WanoptContentDeliveryNetworkRuleRuleSkipEntry']] = None,
                 skip_rule_mode: Optional[str] = None):
        if content_id is not None:
            pulumi.set(__self__, "content_id", content_id)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if match_mode is not None:
            pulumi.set(__self__, "match_mode", match_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if skip_entries is not None:
            pulumi.set(__self__, "skip_entries", skip_entries)
        if skip_rule_mode is not None:
            pulumi.set(__self__, "skip_rule_mode", skip_rule_mode)

    @property
    @pulumi.getter(name="contentId")
    def content_id(self) -> Optional['outputs.WanoptContentDeliveryNetworkRuleRuleContentId']:
        return pulumi.get(self, "content_id")

    @property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.WanoptContentDeliveryNetworkRuleRuleMatchEntry']]:
        return pulumi.get(self, "match_entries")

    @property
    @pulumi.getter(name="matchMode")
    def match_mode(self) -> Optional[str]:
        return pulumi.get(self, "match_mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="skipEntries")
    def skip_entries(self) -> Optional[Sequence['outputs.WanoptContentDeliveryNetworkRuleRuleSkipEntry']]:
        return pulumi.get(self, "skip_entries")

    @property
    @pulumi.getter(name="skipRuleMode")
    def skip_rule_mode(self) -> Optional[str]:
        return pulumi.get(self, "skip_rule_mode")


@pulumi.output_type
class WanoptContentDeliveryNetworkRuleRuleContentId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endDirection":
            suggest = "end_direction"
        elif key == "endSkip":
            suggest = "end_skip"
        elif key == "endStr":
            suggest = "end_str"
        elif key == "rangeStr":
            suggest = "range_str"
        elif key == "startDirection":
            suggest = "start_direction"
        elif key == "startSkip":
            suggest = "start_skip"
        elif key == "startStr":
            suggest = "start_str"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanoptContentDeliveryNetworkRuleRuleContentId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanoptContentDeliveryNetworkRuleRuleContentId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanoptContentDeliveryNetworkRuleRuleContentId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_direction: Optional[str] = None,
                 end_skip: Optional[int] = None,
                 end_str: Optional[str] = None,
                 range_str: Optional[str] = None,
                 start_direction: Optional[str] = None,
                 start_skip: Optional[int] = None,
                 start_str: Optional[str] = None,
                 target: Optional[str] = None):
        if end_direction is not None:
            pulumi.set(__self__, "end_direction", end_direction)
        if end_skip is not None:
            pulumi.set(__self__, "end_skip", end_skip)
        if end_str is not None:
            pulumi.set(__self__, "end_str", end_str)
        if range_str is not None:
            pulumi.set(__self__, "range_str", range_str)
        if start_direction is not None:
            pulumi.set(__self__, "start_direction", start_direction)
        if start_skip is not None:
            pulumi.set(__self__, "start_skip", start_skip)
        if start_str is not None:
            pulumi.set(__self__, "start_str", start_str)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="endDirection")
    def end_direction(self) -> Optional[str]:
        return pulumi.get(self, "end_direction")

    @property
    @pulumi.getter(name="endSkip")
    def end_skip(self) -> Optional[int]:
        return pulumi.get(self, "end_skip")

    @property
    @pulumi.getter(name="endStr")
    def end_str(self) -> Optional[str]:
        return pulumi.get(self, "end_str")

    @property
    @pulumi.getter(name="rangeStr")
    def range_str(self) -> Optional[str]:
        return pulumi.get(self, "range_str")

    @property
    @pulumi.getter(name="startDirection")
    def start_direction(self) -> Optional[str]:
        return pulumi.get(self, "start_direction")

    @property
    @pulumi.getter(name="startSkip")
    def start_skip(self) -> Optional[int]:
        return pulumi.get(self, "start_skip")

    @property
    @pulumi.getter(name="startStr")
    def start_str(self) -> Optional[str]:
        return pulumi.get(self, "start_str")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class WanoptContentDeliveryNetworkRuleRuleMatchEntry(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 patterns: Optional[Sequence['outputs.WanoptContentDeliveryNetworkRuleRuleMatchEntryPattern']] = None,
                 target: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def patterns(self) -> Optional[Sequence['outputs.WanoptContentDeliveryNetworkRuleRuleMatchEntryPattern']]:
        return pulumi.get(self, "patterns")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class WanoptContentDeliveryNetworkRuleRuleMatchEntryPattern(dict):
    def __init__(__self__, *,
                 string: Optional[str] = None):
        if string is not None:
            pulumi.set(__self__, "string", string)

    @property
    @pulumi.getter
    def string(self) -> Optional[str]:
        return pulumi.get(self, "string")


@pulumi.output_type
class WanoptContentDeliveryNetworkRuleRuleSkipEntry(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 patterns: Optional[Sequence['outputs.WanoptContentDeliveryNetworkRuleRuleSkipEntryPattern']] = None,
                 target: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def patterns(self) -> Optional[Sequence['outputs.WanoptContentDeliveryNetworkRuleRuleSkipEntryPattern']]:
        return pulumi.get(self, "patterns")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class WanoptContentDeliveryNetworkRuleRuleSkipEntryPattern(dict):
    def __init__(__self__, *,
                 string: Optional[str] = None):
        if string is not None:
            pulumi.set(__self__, "string", string)

    @property
    @pulumi.getter
    def string(self) -> Optional[str]:
        return pulumi.get(self, "string")


@pulumi.output_type
class WanoptProfileCifs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "byteCaching":
            suggest = "byte_caching"
        elif key == "logTraffic":
            suggest = "log_traffic"
        elif key == "preferChunking":
            suggest = "prefer_chunking"
        elif key == "protocolOpt":
            suggest = "protocol_opt"
        elif key == "secureTunnel":
            suggest = "secure_tunnel"
        elif key == "tunnelSharing":
            suggest = "tunnel_sharing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanoptProfileCifs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanoptProfileCifs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanoptProfileCifs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 byte_caching: Optional[str] = None,
                 log_traffic: Optional[str] = None,
                 port: Optional[int] = None,
                 prefer_chunking: Optional[str] = None,
                 protocol_opt: Optional[str] = None,
                 secure_tunnel: Optional[str] = None,
                 status: Optional[str] = None,
                 tunnel_sharing: Optional[str] = None):
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prefer_chunking is not None:
            pulumi.set(__self__, "prefer_chunking", prefer_chunking)
        if protocol_opt is not None:
            pulumi.set(__self__, "protocol_opt", protocol_opt)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[str]:
        return pulumi.get(self, "byte_caching")

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[str]:
        return pulumi.get(self, "log_traffic")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preferChunking")
    def prefer_chunking(self) -> Optional[str]:
        return pulumi.get(self, "prefer_chunking")

    @property
    @pulumi.getter(name="protocolOpt")
    def protocol_opt(self) -> Optional[str]:
        return pulumi.get(self, "protocol_opt")

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[str]:
        return pulumi.get(self, "secure_tunnel")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_sharing")


@pulumi.output_type
class WanoptProfileFtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "byteCaching":
            suggest = "byte_caching"
        elif key == "logTraffic":
            suggest = "log_traffic"
        elif key == "preferChunking":
            suggest = "prefer_chunking"
        elif key == "protocolOpt":
            suggest = "protocol_opt"
        elif key == "secureTunnel":
            suggest = "secure_tunnel"
        elif key == "tunnelSharing":
            suggest = "tunnel_sharing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanoptProfileFtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanoptProfileFtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanoptProfileFtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 byte_caching: Optional[str] = None,
                 log_traffic: Optional[str] = None,
                 port: Optional[int] = None,
                 prefer_chunking: Optional[str] = None,
                 protocol_opt: Optional[str] = None,
                 secure_tunnel: Optional[str] = None,
                 ssl: Optional[str] = None,
                 status: Optional[str] = None,
                 tunnel_sharing: Optional[str] = None):
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prefer_chunking is not None:
            pulumi.set(__self__, "prefer_chunking", prefer_chunking)
        if protocol_opt is not None:
            pulumi.set(__self__, "protocol_opt", protocol_opt)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[str]:
        return pulumi.get(self, "byte_caching")

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[str]:
        return pulumi.get(self, "log_traffic")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preferChunking")
    def prefer_chunking(self) -> Optional[str]:
        return pulumi.get(self, "prefer_chunking")

    @property
    @pulumi.getter(name="protocolOpt")
    def protocol_opt(self) -> Optional[str]:
        return pulumi.get(self, "protocol_opt")

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[str]:
        return pulumi.get(self, "secure_tunnel")

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_sharing")


@pulumi.output_type
class WanoptProfileHttp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "byteCaching":
            suggest = "byte_caching"
        elif key == "logTraffic":
            suggest = "log_traffic"
        elif key == "preferChunking":
            suggest = "prefer_chunking"
        elif key == "protocolOpt":
            suggest = "protocol_opt"
        elif key == "secureTunnel":
            suggest = "secure_tunnel"
        elif key == "sslPort":
            suggest = "ssl_port"
        elif key == "tunnelNonHttp":
            suggest = "tunnel_non_http"
        elif key == "tunnelSharing":
            suggest = "tunnel_sharing"
        elif key == "unknownHttpVersion":
            suggest = "unknown_http_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanoptProfileHttp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanoptProfileHttp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanoptProfileHttp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 byte_caching: Optional[str] = None,
                 log_traffic: Optional[str] = None,
                 port: Optional[int] = None,
                 prefer_chunking: Optional[str] = None,
                 protocol_opt: Optional[str] = None,
                 secure_tunnel: Optional[str] = None,
                 ssl: Optional[str] = None,
                 ssl_port: Optional[int] = None,
                 status: Optional[str] = None,
                 tunnel_non_http: Optional[str] = None,
                 tunnel_sharing: Optional[str] = None,
                 unknown_http_version: Optional[str] = None):
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prefer_chunking is not None:
            pulumi.set(__self__, "prefer_chunking", prefer_chunking)
        if protocol_opt is not None:
            pulumi.set(__self__, "protocol_opt", protocol_opt)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_port is not None:
            pulumi.set(__self__, "ssl_port", ssl_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_non_http is not None:
            pulumi.set(__self__, "tunnel_non_http", tunnel_non_http)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[str]:
        return pulumi.get(self, "byte_caching")

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[str]:
        return pulumi.get(self, "log_traffic")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preferChunking")
    def prefer_chunking(self) -> Optional[str]:
        return pulumi.get(self, "prefer_chunking")

    @property
    @pulumi.getter(name="protocolOpt")
    def protocol_opt(self) -> Optional[str]:
        return pulumi.get(self, "protocol_opt")

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[str]:
        return pulumi.get(self, "secure_tunnel")

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter(name="sslPort")
    def ssl_port(self) -> Optional[int]:
        return pulumi.get(self, "ssl_port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_non_http")

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_sharing")

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[str]:
        return pulumi.get(self, "unknown_http_version")


@pulumi.output_type
class WanoptProfileMapi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "byteCaching":
            suggest = "byte_caching"
        elif key == "logTraffic":
            suggest = "log_traffic"
        elif key == "secureTunnel":
            suggest = "secure_tunnel"
        elif key == "tunnelSharing":
            suggest = "tunnel_sharing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanoptProfileMapi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanoptProfileMapi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanoptProfileMapi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 byte_caching: Optional[str] = None,
                 log_traffic: Optional[str] = None,
                 port: Optional[int] = None,
                 secure_tunnel: Optional[str] = None,
                 status: Optional[str] = None,
                 tunnel_sharing: Optional[str] = None):
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[str]:
        return pulumi.get(self, "byte_caching")

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[str]:
        return pulumi.get(self, "log_traffic")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[str]:
        return pulumi.get(self, "secure_tunnel")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_sharing")


@pulumi.output_type
class WanoptProfileTcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "byteCaching":
            suggest = "byte_caching"
        elif key == "byteCachingOpt":
            suggest = "byte_caching_opt"
        elif key == "logTraffic":
            suggest = "log_traffic"
        elif key == "secureTunnel":
            suggest = "secure_tunnel"
        elif key == "sslPort":
            suggest = "ssl_port"
        elif key == "tunnelSharing":
            suggest = "tunnel_sharing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanoptProfileTcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanoptProfileTcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanoptProfileTcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 byte_caching: Optional[str] = None,
                 byte_caching_opt: Optional[str] = None,
                 log_traffic: Optional[str] = None,
                 port: Optional[str] = None,
                 secure_tunnel: Optional[str] = None,
                 ssl: Optional[str] = None,
                 ssl_port: Optional[int] = None,
                 status: Optional[str] = None,
                 tunnel_sharing: Optional[str] = None):
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if byte_caching_opt is not None:
            pulumi.set(__self__, "byte_caching_opt", byte_caching_opt)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_port is not None:
            pulumi.set(__self__, "ssl_port", ssl_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[str]:
        return pulumi.get(self, "byte_caching")

    @property
    @pulumi.getter(name="byteCachingOpt")
    def byte_caching_opt(self) -> Optional[str]:
        return pulumi.get(self, "byte_caching_opt")

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[str]:
        return pulumi.get(self, "log_traffic")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[str]:
        return pulumi.get(self, "secure_tunnel")

    @property
    @pulumi.getter
    def ssl(self) -> Optional[str]:
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter(name="sslPort")
    def ssl_port(self) -> Optional[int]:
        return pulumi.get(self, "ssl_port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_sharing")


@pulumi.output_type
class WebProxyExplicitPacPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pacFileData":
            suggest = "pac_file_data"
        elif key == "pacFileName":
            suggest = "pac_file_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebProxyExplicitPacPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebProxyExplicitPacPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebProxyExplicitPacPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: Optional[str] = None,
                 dstaddrs: Optional[Sequence['outputs.WebProxyExplicitPacPolicyDstaddr']] = None,
                 pac_file_data: Optional[str] = None,
                 pac_file_name: Optional[str] = None,
                 policyid: Optional[int] = None,
                 srcaddr6s: Optional[Sequence['outputs.WebProxyExplicitPacPolicySrcaddr6']] = None,
                 srcaddrs: Optional[Sequence['outputs.WebProxyExplicitPacPolicySrcaddr']] = None,
                 status: Optional[str] = None):
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if pac_file_data is not None:
            pulumi.set(__self__, "pac_file_data", pac_file_data)
        if pac_file_name is not None:
            pulumi.set(__self__, "pac_file_name", pac_file_name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[Sequence['outputs.WebProxyExplicitPacPolicyDstaddr']]:
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter(name="pacFileData")
    def pac_file_data(self) -> Optional[str]:
        return pulumi.get(self, "pac_file_data")

    @property
    @pulumi.getter(name="pacFileName")
    def pac_file_name(self) -> Optional[str]:
        return pulumi.get(self, "pac_file_name")

    @property
    @pulumi.getter
    def policyid(self) -> Optional[int]:
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[Sequence['outputs.WebProxyExplicitPacPolicySrcaddr6']]:
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[Sequence['outputs.WebProxyExplicitPacPolicySrcaddr']]:
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WebProxyExplicitPacPolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebProxyExplicitPacPolicySrcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebProxyExplicitPacPolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebProxyExplicitSecureWebProxyCert(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebProxyForwardServerGroupServerList(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 weight: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class WebProxyGlobalLearnClientIpSrcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebProxyGlobalLearnClientIpSrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebProxyProfileHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOption":
            suggest = "add_option"
        elif key == "base64Encoding":
            suggest = "base64_encoding"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebProxyProfileHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebProxyProfileHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebProxyProfileHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 add_option: Optional[str] = None,
                 base64_encoding: Optional[str] = None,
                 content: Optional[str] = None,
                 dstaddr6s: Optional[Sequence['outputs.WebProxyProfileHeaderDstaddr6']] = None,
                 dstaddrs: Optional[Sequence['outputs.WebProxyProfileHeaderDstaddr']] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if add_option is not None:
            pulumi.set(__self__, "add_option", add_option)
        if base64_encoding is not None:
            pulumi.set(__self__, "base64_encoding", base64_encoding)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addOption")
    def add_option(self) -> Optional[str]:
        return pulumi.get(self, "add_option")

    @property
    @pulumi.getter(name="base64Encoding")
    def base64_encoding(self) -> Optional[str]:
        return pulumi.get(self, "base64_encoding")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[Sequence['outputs.WebProxyProfileHeaderDstaddr6']]:
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[Sequence['outputs.WebProxyProfileHeaderDstaddr']]:
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WebProxyProfileHeaderDstaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebProxyProfileHeaderDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebfilterContentEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "patternType":
            suggest = "pattern_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterContentEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterContentEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterContentEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 lang: Optional[str] = None,
                 name: Optional[str] = None,
                 pattern_type: Optional[str] = None,
                 score: Optional[int] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[str]:
        return pulumi.get(self, "pattern_type")

    @property
    @pulumi.getter
    def score(self) -> Optional[int]:
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WebfilterContentHeaderEntry(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 category: Optional[str] = None,
                 pattern: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")


@pulumi.output_type
class WebfilterProfileAntiphish(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkBasicAuth":
            suggest = "check_basic_auth"
        elif key == "checkUri":
            suggest = "check_uri"
        elif key == "checkUsernameOnly":
            suggest = "check_username_only"
        elif key == "customPatterns":
            suggest = "custom_patterns"
        elif key == "defaultAction":
            suggest = "default_action"
        elif key == "domainController":
            suggest = "domain_controller"
        elif key == "inspectionEntries":
            suggest = "inspection_entries"
        elif key == "maxBodyLen":
            suggest = "max_body_len"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterProfileAntiphish. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterProfileAntiphish.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterProfileAntiphish.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 check_basic_auth: Optional[str] = None,
                 check_uri: Optional[str] = None,
                 check_username_only: Optional[str] = None,
                 custom_patterns: Optional[Sequence['outputs.WebfilterProfileAntiphishCustomPattern']] = None,
                 default_action: Optional[str] = None,
                 domain_controller: Optional[str] = None,
                 inspection_entries: Optional[Sequence['outputs.WebfilterProfileAntiphishInspectionEntry']] = None,
                 ldap: Optional[str] = None,
                 max_body_len: Optional[int] = None,
                 status: Optional[str] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if check_basic_auth is not None:
            pulumi.set(__self__, "check_basic_auth", check_basic_auth)
        if check_uri is not None:
            pulumi.set(__self__, "check_uri", check_uri)
        if check_username_only is not None:
            pulumi.set(__self__, "check_username_only", check_username_only)
        if custom_patterns is not None:
            pulumi.set(__self__, "custom_patterns", custom_patterns)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if inspection_entries is not None:
            pulumi.set(__self__, "inspection_entries", inspection_entries)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if max_body_len is not None:
            pulumi.set(__self__, "max_body_len", max_body_len)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="checkBasicAuth")
    def check_basic_auth(self) -> Optional[str]:
        return pulumi.get(self, "check_basic_auth")

    @property
    @pulumi.getter(name="checkUri")
    def check_uri(self) -> Optional[str]:
        return pulumi.get(self, "check_uri")

    @property
    @pulumi.getter(name="checkUsernameOnly")
    def check_username_only(self) -> Optional[str]:
        return pulumi.get(self, "check_username_only")

    @property
    @pulumi.getter(name="customPatterns")
    def custom_patterns(self) -> Optional[Sequence['outputs.WebfilterProfileAntiphishCustomPattern']]:
        return pulumi.get(self, "custom_patterns")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[str]:
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional[str]:
        return pulumi.get(self, "domain_controller")

    @property
    @pulumi.getter(name="inspectionEntries")
    def inspection_entries(self) -> Optional[Sequence['outputs.WebfilterProfileAntiphishInspectionEntry']]:
        return pulumi.get(self, "inspection_entries")

    @property
    @pulumi.getter
    def ldap(self) -> Optional[str]:
        return pulumi.get(self, "ldap")

    @property
    @pulumi.getter(name="maxBodyLen")
    def max_body_len(self) -> Optional[int]:
        return pulumi.get(self, "max_body_len")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WebfilterProfileAntiphishCustomPattern(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 pattern: Optional[str] = None,
                 type: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class WebfilterProfileAntiphishInspectionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fortiguardCategory":
            suggest = "fortiguard_category"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterProfileAntiphishInspectionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterProfileAntiphishInspectionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterProfileAntiphishInspectionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 fortiguard_category: Optional[str] = None,
                 name: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fortiguard_category is not None:
            pulumi.set(__self__, "fortiguard_category", fortiguard_category)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> Optional[str]:
        return pulumi.get(self, "fortiguard_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebfilterProfileFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanArchiveContents":
            suggest = "scan_archive_contents"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterProfileFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterProfileFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterProfileFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entries: Optional[Sequence['outputs.WebfilterProfileFileFilterEntry']] = None,
                 log: Optional[str] = None,
                 scan_archive_contents: Optional[str] = None,
                 status: Optional[str] = None):
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[Sequence['outputs.WebfilterProfileFileFilterEntry']]:
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[str]:
        return pulumi.get(self, "scan_archive_contents")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WebfilterProfileFileFilterEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileTypes":
            suggest = "file_types"
        elif key == "passwordProtected":
            suggest = "password_protected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterProfileFileFilterEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterProfileFileFilterEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterProfileFileFilterEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 comment: Optional[str] = None,
                 direction: Optional[str] = None,
                 file_types: Optional[Sequence['outputs.WebfilterProfileFileFilterEntryFileType']] = None,
                 filter: Optional[str] = None,
                 password_protected: Optional[str] = None,
                 protocol: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[Sequence['outputs.WebfilterProfileFileFilterEntryFileType']]:
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[str]:
        return pulumi.get(self, "password_protected")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WebfilterProfileFileFilterEntryFileType(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebfilterProfileFtgdWf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exemptQuota":
            suggest = "exempt_quota"
        elif key == "maxQuotaTimeout":
            suggest = "max_quota_timeout"
        elif key == "rateCrlUrls":
            suggest = "rate_crl_urls"
        elif key == "rateCssUrls":
            suggest = "rate_css_urls"
        elif key == "rateImageUrls":
            suggest = "rate_image_urls"
        elif key == "rateJavascriptUrls":
            suggest = "rate_javascript_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterProfileFtgdWf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterProfileFtgdWf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterProfileFtgdWf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exempt_quota: Optional[str] = None,
                 filters: Optional[Sequence['outputs.WebfilterProfileFtgdWfFilter']] = None,
                 max_quota_timeout: Optional[int] = None,
                 options: Optional[str] = None,
                 ovrd: Optional[str] = None,
                 quotas: Optional[Sequence['outputs.WebfilterProfileFtgdWfQuota']] = None,
                 rate_crl_urls: Optional[str] = None,
                 rate_css_urls: Optional[str] = None,
                 rate_image_urls: Optional[str] = None,
                 rate_javascript_urls: Optional[str] = None):
        if exempt_quota is not None:
            pulumi.set(__self__, "exempt_quota", exempt_quota)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if max_quota_timeout is not None:
            pulumi.set(__self__, "max_quota_timeout", max_quota_timeout)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if ovrd is not None:
            pulumi.set(__self__, "ovrd", ovrd)
        if quotas is not None:
            pulumi.set(__self__, "quotas", quotas)
        if rate_crl_urls is not None:
            pulumi.set(__self__, "rate_crl_urls", rate_crl_urls)
        if rate_css_urls is not None:
            pulumi.set(__self__, "rate_css_urls", rate_css_urls)
        if rate_image_urls is not None:
            pulumi.set(__self__, "rate_image_urls", rate_image_urls)
        if rate_javascript_urls is not None:
            pulumi.set(__self__, "rate_javascript_urls", rate_javascript_urls)

    @property
    @pulumi.getter(name="exemptQuota")
    def exempt_quota(self) -> Optional[str]:
        return pulumi.get(self, "exempt_quota")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.WebfilterProfileFtgdWfFilter']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="maxQuotaTimeout")
    def max_quota_timeout(self) -> Optional[int]:
        return pulumi.get(self, "max_quota_timeout")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def ovrd(self) -> Optional[str]:
        return pulumi.get(self, "ovrd")

    @property
    @pulumi.getter
    def quotas(self) -> Optional[Sequence['outputs.WebfilterProfileFtgdWfQuota']]:
        return pulumi.get(self, "quotas")

    @property
    @pulumi.getter(name="rateCrlUrls")
    def rate_crl_urls(self) -> Optional[str]:
        return pulumi.get(self, "rate_crl_urls")

    @property
    @pulumi.getter(name="rateCssUrls")
    def rate_css_urls(self) -> Optional[str]:
        return pulumi.get(self, "rate_css_urls")

    @property
    @pulumi.getter(name="rateImageUrls")
    def rate_image_urls(self) -> Optional[str]:
        return pulumi.get(self, "rate_image_urls")

    @property
    @pulumi.getter(name="rateJavascriptUrls")
    def rate_javascript_urls(self) -> Optional[str]:
        return pulumi.get(self, "rate_javascript_urls")


@pulumi.output_type
class WebfilterProfileFtgdWfFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authUsrGrps":
            suggest = "auth_usr_grps"
        elif key == "overrideReplacemsg":
            suggest = "override_replacemsg"
        elif key == "warnDuration":
            suggest = "warn_duration"
        elif key == "warningDurationType":
            suggest = "warning_duration_type"
        elif key == "warningPrompt":
            suggest = "warning_prompt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterProfileFtgdWfFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterProfileFtgdWfFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterProfileFtgdWfFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 auth_usr_grps: Optional[Sequence['outputs.WebfilterProfileFtgdWfFilterAuthUsrGrp']] = None,
                 category: Optional[int] = None,
                 id: Optional[int] = None,
                 log: Optional[str] = None,
                 override_replacemsg: Optional[str] = None,
                 warn_duration: Optional[str] = None,
                 warning_duration_type: Optional[str] = None,
                 warning_prompt: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auth_usr_grps is not None:
            pulumi.set(__self__, "auth_usr_grps", auth_usr_grps)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if override_replacemsg is not None:
            pulumi.set(__self__, "override_replacemsg", override_replacemsg)
        if warn_duration is not None:
            pulumi.set(__self__, "warn_duration", warn_duration)
        if warning_duration_type is not None:
            pulumi.set(__self__, "warning_duration_type", warning_duration_type)
        if warning_prompt is not None:
            pulumi.set(__self__, "warning_prompt", warning_prompt)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="authUsrGrps")
    def auth_usr_grps(self) -> Optional[Sequence['outputs.WebfilterProfileFtgdWfFilterAuthUsrGrp']]:
        return pulumi.get(self, "auth_usr_grps")

    @property
    @pulumi.getter
    def category(self) -> Optional[int]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="overrideReplacemsg")
    def override_replacemsg(self) -> Optional[str]:
        return pulumi.get(self, "override_replacemsg")

    @property
    @pulumi.getter(name="warnDuration")
    def warn_duration(self) -> Optional[str]:
        return pulumi.get(self, "warn_duration")

    @property
    @pulumi.getter(name="warningDurationType")
    def warning_duration_type(self) -> Optional[str]:
        return pulumi.get(self, "warning_duration_type")

    @property
    @pulumi.getter(name="warningPrompt")
    def warning_prompt(self) -> Optional[str]:
        return pulumi.get(self, "warning_prompt")


@pulumi.output_type
class WebfilterProfileFtgdWfFilterAuthUsrGrp(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebfilterProfileFtgdWfQuota(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overrideReplacemsg":
            suggest = "override_replacemsg"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterProfileFtgdWfQuota. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterProfileFtgdWfQuota.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterProfileFtgdWfQuota.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[str] = None,
                 duration: Optional[str] = None,
                 id: Optional[int] = None,
                 override_replacemsg: Optional[str] = None,
                 type: Optional[str] = None,
                 unit: Optional[str] = None,
                 value: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if override_replacemsg is not None:
            pulumi.set(__self__, "override_replacemsg", override_replacemsg)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="overrideReplacemsg")
    def override_replacemsg(self) -> Optional[str]:
        return pulumi.get(self, "override_replacemsg")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WebfilterProfileOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ovrdCookie":
            suggest = "ovrd_cookie"
        elif key == "ovrdDur":
            suggest = "ovrd_dur"
        elif key == "ovrdDurMode":
            suggest = "ovrd_dur_mode"
        elif key == "ovrdScope":
            suggest = "ovrd_scope"
        elif key == "ovrdUserGroups":
            suggest = "ovrd_user_groups"
        elif key == "profileAttribute":
            suggest = "profile_attribute"
        elif key == "profileType":
            suggest = "profile_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterProfileOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterProfileOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterProfileOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ovrd_cookie: Optional[str] = None,
                 ovrd_dur: Optional[str] = None,
                 ovrd_dur_mode: Optional[str] = None,
                 ovrd_scope: Optional[str] = None,
                 ovrd_user_groups: Optional[Sequence['outputs.WebfilterProfileOverrideOvrdUserGroup']] = None,
                 profile_attribute: Optional[str] = None,
                 profile_type: Optional[str] = None,
                 profiles: Optional[Sequence['outputs.WebfilterProfileOverrideProfile']] = None):
        if ovrd_cookie is not None:
            pulumi.set(__self__, "ovrd_cookie", ovrd_cookie)
        if ovrd_dur is not None:
            pulumi.set(__self__, "ovrd_dur", ovrd_dur)
        if ovrd_dur_mode is not None:
            pulumi.set(__self__, "ovrd_dur_mode", ovrd_dur_mode)
        if ovrd_scope is not None:
            pulumi.set(__self__, "ovrd_scope", ovrd_scope)
        if ovrd_user_groups is not None:
            pulumi.set(__self__, "ovrd_user_groups", ovrd_user_groups)
        if profile_attribute is not None:
            pulumi.set(__self__, "profile_attribute", profile_attribute)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="ovrdCookie")
    def ovrd_cookie(self) -> Optional[str]:
        return pulumi.get(self, "ovrd_cookie")

    @property
    @pulumi.getter(name="ovrdDur")
    def ovrd_dur(self) -> Optional[str]:
        return pulumi.get(self, "ovrd_dur")

    @property
    @pulumi.getter(name="ovrdDurMode")
    def ovrd_dur_mode(self) -> Optional[str]:
        return pulumi.get(self, "ovrd_dur_mode")

    @property
    @pulumi.getter(name="ovrdScope")
    def ovrd_scope(self) -> Optional[str]:
        return pulumi.get(self, "ovrd_scope")

    @property
    @pulumi.getter(name="ovrdUserGroups")
    def ovrd_user_groups(self) -> Optional[Sequence['outputs.WebfilterProfileOverrideOvrdUserGroup']]:
        return pulumi.get(self, "ovrd_user_groups")

    @property
    @pulumi.getter(name="profileAttribute")
    def profile_attribute(self) -> Optional[str]:
        return pulumi.get(self, "profile_attribute")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[str]:
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence['outputs.WebfilterProfileOverrideProfile']]:
        return pulumi.get(self, "profiles")


@pulumi.output_type
class WebfilterProfileOverrideOvrdUserGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebfilterProfileOverrideProfile(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebfilterProfileWeb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bwordTable":
            suggest = "bword_table"
        elif key == "bwordThreshold":
            suggest = "bword_threshold"
        elif key == "contentHeaderList":
            suggest = "content_header_list"
        elif key == "keywordMatches":
            suggest = "keyword_matches"
        elif key == "logSearch":
            suggest = "log_search"
        elif key == "safeSearch":
            suggest = "safe_search"
        elif key == "urlfilterTable":
            suggest = "urlfilter_table"
        elif key == "vimeoRestrict":
            suggest = "vimeo_restrict"
        elif key == "youtubeRestrict":
            suggest = "youtube_restrict"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterProfileWeb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterProfileWeb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterProfileWeb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowlist: Optional[str] = None,
                 blacklist: Optional[str] = None,
                 blocklist: Optional[str] = None,
                 bword_table: Optional[int] = None,
                 bword_threshold: Optional[int] = None,
                 content_header_list: Optional[int] = None,
                 keyword_matches: Optional[Sequence['outputs.WebfilterProfileWebKeywordMatch']] = None,
                 log_search: Optional[str] = None,
                 safe_search: Optional[str] = None,
                 urlfilter_table: Optional[int] = None,
                 vimeo_restrict: Optional[str] = None,
                 whitelist: Optional[str] = None,
                 youtube_restrict: Optional[str] = None):
        if allowlist is not None:
            pulumi.set(__self__, "allowlist", allowlist)
        if blacklist is not None:
            pulumi.set(__self__, "blacklist", blacklist)
        if blocklist is not None:
            pulumi.set(__self__, "blocklist", blocklist)
        if bword_table is not None:
            pulumi.set(__self__, "bword_table", bword_table)
        if bword_threshold is not None:
            pulumi.set(__self__, "bword_threshold", bword_threshold)
        if content_header_list is not None:
            pulumi.set(__self__, "content_header_list", content_header_list)
        if keyword_matches is not None:
            pulumi.set(__self__, "keyword_matches", keyword_matches)
        if log_search is not None:
            pulumi.set(__self__, "log_search", log_search)
        if safe_search is not None:
            pulumi.set(__self__, "safe_search", safe_search)
        if urlfilter_table is not None:
            pulumi.set(__self__, "urlfilter_table", urlfilter_table)
        if vimeo_restrict is not None:
            pulumi.set(__self__, "vimeo_restrict", vimeo_restrict)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)
        if youtube_restrict is not None:
            pulumi.set(__self__, "youtube_restrict", youtube_restrict)

    @property
    @pulumi.getter
    def allowlist(self) -> Optional[str]:
        return pulumi.get(self, "allowlist")

    @property
    @pulumi.getter
    def blacklist(self) -> Optional[str]:
        return pulumi.get(self, "blacklist")

    @property
    @pulumi.getter
    def blocklist(self) -> Optional[str]:
        return pulumi.get(self, "blocklist")

    @property
    @pulumi.getter(name="bwordTable")
    def bword_table(self) -> Optional[int]:
        return pulumi.get(self, "bword_table")

    @property
    @pulumi.getter(name="bwordThreshold")
    def bword_threshold(self) -> Optional[int]:
        return pulumi.get(self, "bword_threshold")

    @property
    @pulumi.getter(name="contentHeaderList")
    def content_header_list(self) -> Optional[int]:
        return pulumi.get(self, "content_header_list")

    @property
    @pulumi.getter(name="keywordMatches")
    def keyword_matches(self) -> Optional[Sequence['outputs.WebfilterProfileWebKeywordMatch']]:
        return pulumi.get(self, "keyword_matches")

    @property
    @pulumi.getter(name="logSearch")
    def log_search(self) -> Optional[str]:
        return pulumi.get(self, "log_search")

    @property
    @pulumi.getter(name="safeSearch")
    def safe_search(self) -> Optional[str]:
        return pulumi.get(self, "safe_search")

    @property
    @pulumi.getter(name="urlfilterTable")
    def urlfilter_table(self) -> Optional[int]:
        return pulumi.get(self, "urlfilter_table")

    @property
    @pulumi.getter(name="vimeoRestrict")
    def vimeo_restrict(self) -> Optional[str]:
        return pulumi.get(self, "vimeo_restrict")

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[str]:
        return pulumi.get(self, "whitelist")

    @property
    @pulumi.getter(name="youtubeRestrict")
    def youtube_restrict(self) -> Optional[str]:
        return pulumi.get(self, "youtube_restrict")


@pulumi.output_type
class WebfilterProfileWebKeywordMatch(dict):
    def __init__(__self__, *,
                 pattern: Optional[str] = None):
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")


@pulumi.output_type
class WebfilterProfileWispServer(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WebfilterProfileYoutubeChannelFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelId":
            suggest = "channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterProfileYoutubeChannelFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterProfileYoutubeChannelFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterProfileYoutubeChannelFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_id: Optional[str] = None,
                 comment: Optional[str] = None,
                 id: Optional[int] = None):
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[str]:
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class WebfilterUrlfilterEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "antiphishAction":
            suggest = "antiphish_action"
        elif key == "dnsAddressFamily":
            suggest = "dns_address_family"
        elif key == "referrerHost":
            suggest = "referrer_host"
        elif key == "webProxyProfile":
            suggest = "web_proxy_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebfilterUrlfilterEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebfilterUrlfilterEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebfilterUrlfilterEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 antiphish_action: Optional[str] = None,
                 dns_address_family: Optional[str] = None,
                 exempt: Optional[str] = None,
                 id: Optional[int] = None,
                 referrer_host: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None,
                 web_proxy_profile: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if antiphish_action is not None:
            pulumi.set(__self__, "antiphish_action", antiphish_action)
        if dns_address_family is not None:
            pulumi.set(__self__, "dns_address_family", dns_address_family)
        if exempt is not None:
            pulumi.set(__self__, "exempt", exempt)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if referrer_host is not None:
            pulumi.set(__self__, "referrer_host", referrer_host)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if web_proxy_profile is not None:
            pulumi.set(__self__, "web_proxy_profile", web_proxy_profile)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="antiphishAction")
    def antiphish_action(self) -> Optional[str]:
        return pulumi.get(self, "antiphish_action")

    @property
    @pulumi.getter(name="dnsAddressFamily")
    def dns_address_family(self) -> Optional[str]:
        return pulumi.get(self, "dns_address_family")

    @property
    @pulumi.getter
    def exempt(self) -> Optional[str]:
        return pulumi.get(self, "exempt")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="referrerHost")
    def referrer_host(self) -> Optional[str]:
        return pulumi.get(self, "referrer_host")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="webProxyProfile")
    def web_proxy_profile(self) -> Optional[str]:
        return pulumi.get(self, "web_proxy_profile")


@pulumi.output_type
class WirelessControllerAccessControlListLayer3Ipv4Rule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerAccessControlListLayer3Ipv4Rule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerAccessControlListLayer3Ipv4Rule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerAccessControlListLayer3Ipv4Rule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 comment: Optional[str] = None,
                 dstaddr: Optional[str] = None,
                 dstport: Optional[int] = None,
                 protocol: Optional[int] = None,
                 rule_id: Optional[int] = None,
                 srcaddr: Optional[str] = None,
                 srcport: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstport is not None:
            pulumi.set(__self__, "dstport", dstport)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcport is not None:
            pulumi.set(__self__, "srcport", srcport)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[str]:
        return pulumi.get(self, "dstaddr")

    @property
    @pulumi.getter
    def dstport(self) -> Optional[int]:
        return pulumi.get(self, "dstport")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[str]:
        return pulumi.get(self, "srcaddr")

    @property
    @pulumi.getter
    def srcport(self) -> Optional[int]:
        return pulumi.get(self, "srcport")


@pulumi.output_type
class WirelessControllerAccessControlListLayer3Ipv6Rule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerAccessControlListLayer3Ipv6Rule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerAccessControlListLayer3Ipv6Rule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerAccessControlListLayer3Ipv6Rule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 comment: Optional[str] = None,
                 dstaddr: Optional[str] = None,
                 dstport: Optional[int] = None,
                 protocol: Optional[int] = None,
                 rule_id: Optional[int] = None,
                 srcaddr: Optional[str] = None,
                 srcport: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstport is not None:
            pulumi.set(__self__, "dstport", dstport)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcport is not None:
            pulumi.set(__self__, "srcport", srcport)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[str]:
        return pulumi.get(self, "dstaddr")

    @property
    @pulumi.getter
    def dstport(self) -> Optional[int]:
        return pulumi.get(self, "dstport")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[str]:
        return pulumi.get(self, "srcaddr")

    @property
    @pulumi.getter
    def srcport(self) -> Optional[int]:
        return pulumi.get(self, "srcport")


@pulumi.output_type
class WirelessControllerAddrgrpAddress(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class WirelessControllerApcfgProfileCommandList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwdValue":
            suggest = "passwd_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerApcfgProfileCommandList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerApcfgProfileCommandList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerApcfgProfileCommandList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 passwd_value: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passwd_value is not None:
            pulumi.set(__self__, "passwd_value", passwd_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwdValue")
    def passwd_value(self) -> Optional[str]:
        return pulumi.get(self, "passwd_value")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WirelessControllerArrpProfileDarrpOptimizeSchedule(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerBonjourProfilePolicyList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromVlan":
            suggest = "from_vlan"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "toVlan":
            suggest = "to_vlan"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerBonjourProfilePolicyList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerBonjourProfilePolicyList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerBonjourProfilePolicyList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 from_vlan: Optional[str] = None,
                 policy_id: Optional[int] = None,
                 services: Optional[str] = None,
                 to_vlan: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_vlan is not None:
            pulumi.set(__self__, "from_vlan", from_vlan)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if to_vlan is not None:
            pulumi.set(__self__, "to_vlan", to_vlan)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fromVlan")
    def from_vlan(self) -> Optional[str]:
        return pulumi.get(self, "from_vlan")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[int]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def services(self) -> Optional[str]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="toVlan")
    def to_vlan(self) -> Optional[str]:
        return pulumi.get(self, "to_vlan")


@pulumi.output_type
class WirelessControllerHotspot20Anqp3GppCellularMccMncList(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 mcc: Optional[str] = None,
                 mnc: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mcc is not None:
            pulumi.set(__self__, "mcc", mcc)
        if mnc is not None:
            pulumi.set(__self__, "mnc", mnc)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mcc(self) -> Optional[str]:
        return pulumi.get(self, "mcc")

    @property
    @pulumi.getter
    def mnc(self) -> Optional[str]:
        return pulumi.get(self, "mnc")


@pulumi.output_type
class WirelessControllerHotspot20AnqpNaiRealmNaiList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eapMethods":
            suggest = "eap_methods"
        elif key == "naiRealm":
            suggest = "nai_realm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerHotspot20AnqpNaiRealmNaiList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerHotspot20AnqpNaiRealmNaiList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerHotspot20AnqpNaiRealmNaiList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 eap_methods: Optional[Sequence['outputs.WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod']] = None,
                 encoding: Optional[str] = None,
                 nai_realm: Optional[str] = None,
                 name: Optional[str] = None):
        if eap_methods is not None:
            pulumi.set(__self__, "eap_methods", eap_methods)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if nai_realm is not None:
            pulumi.set(__self__, "nai_realm", nai_realm)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="eapMethods")
    def eap_methods(self) -> Optional[Sequence['outputs.WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod']]:
        return pulumi.get(self, "eap_methods")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> Optional[str]:
        return pulumi.get(self, "nai_realm")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authParams":
            suggest = "auth_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_params: Optional[Sequence['outputs.WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam']] = None,
                 index: Optional[int] = None,
                 method: Optional[str] = None):
        if auth_params is not None:
            pulumi.set(__self__, "auth_params", auth_params)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if method is not None:
            pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="authParams")
    def auth_params(self) -> Optional[Sequence['outputs.WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam']]:
        return pulumi.get(self, "auth_params")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")


@pulumi.output_type
class WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 index: Optional[int] = None,
                 val: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if val is not None:
            pulumi.set(__self__, "val", val)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def val(self) -> Optional[str]:
        return pulumi.get(self, "val")


@pulumi.output_type
class WirelessControllerHotspot20AnqpRoamingConsortiumOiList(dict):
    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 index: Optional[int] = None,
                 oi: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if oi is not None:
            pulumi.set(__self__, "oi", oi)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def oi(self) -> Optional[str]:
        return pulumi.get(self, "oi")


@pulumi.output_type
class WirelessControllerHotspot20AnqpVenueNameValueList(dict):
    def __init__(__self__, *,
                 index: Optional[int] = None,
                 lang: Optional[str] = None,
                 value: Optional[str] = None):
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WirelessControllerHotspot20AnqpVenueUrlValueList(dict):
    def __init__(__self__, *,
                 index: Optional[int] = None,
                 number: Optional[int] = None,
                 value: Optional[str] = None):
        if index is not None:
            pulumi.set(__self__, "index", index)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def number(self) -> Optional[int]:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WirelessControllerHotspot20H2QpAdviceOfChargeAocList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "naiRealm":
            suggest = "nai_realm"
        elif key == "naiRealmEncoding":
            suggest = "nai_realm_encoding"
        elif key == "planInfos":
            suggest = "plan_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerHotspot20H2QpAdviceOfChargeAocList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerHotspot20H2QpAdviceOfChargeAocList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerHotspot20H2QpAdviceOfChargeAocList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nai_realm: Optional[str] = None,
                 nai_realm_encoding: Optional[str] = None,
                 name: Optional[str] = None,
                 plan_infos: Optional[Sequence['outputs.WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo']] = None,
                 type: Optional[str] = None):
        if nai_realm is not None:
            pulumi.set(__self__, "nai_realm", nai_realm)
        if nai_realm_encoding is not None:
            pulumi.set(__self__, "nai_realm_encoding", nai_realm_encoding)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plan_infos is not None:
            pulumi.set(__self__, "plan_infos", plan_infos)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> Optional[str]:
        return pulumi.get(self, "nai_realm")

    @property
    @pulumi.getter(name="naiRealmEncoding")
    def nai_realm_encoding(self) -> Optional[str]:
        return pulumi.get(self, "nai_realm_encoding")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="planInfos")
    def plan_infos(self) -> Optional[Sequence['outputs.WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo']]:
        return pulumi.get(self, "plan_infos")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "infoFile":
            suggest = "info_file"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 currency: Optional[str] = None,
                 info_file: Optional[str] = None,
                 lang: Optional[str] = None,
                 name: Optional[str] = None):
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if info_file is not None:
            pulumi.set(__self__, "info_file", info_file)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def currency(self) -> Optional[str]:
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="infoFile")
    def info_file(self) -> Optional[str]:
        return pulumi.get(self, "info_file")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerHotspot20H2QpOperatorNameValueList(dict):
    def __init__(__self__, *,
                 index: Optional[int] = None,
                 lang: Optional[str] = None,
                 value: Optional[str] = None):
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WirelessControllerHotspot20H2QpOsuProviderFriendlyName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "friendlyName":
            suggest = "friendly_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerHotspot20H2QpOsuProviderFriendlyName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerHotspot20H2QpOsuProviderFriendlyName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerHotspot20H2QpOsuProviderFriendlyName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 friendly_name: Optional[str] = None,
                 index: Optional[int] = None,
                 lang: Optional[str] = None):
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[str]:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        return pulumi.get(self, "lang")


@pulumi.output_type
class WirelessControllerHotspot20H2QpOsuProviderNaiNaiList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "osuNai":
            suggest = "osu_nai"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerHotspot20H2QpOsuProviderNaiNaiList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerHotspot20H2QpOsuProviderNaiNaiList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerHotspot20H2QpOsuProviderNaiNaiList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 osu_nai: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if osu_nai is not None:
            pulumi.set(__self__, "osu_nai", osu_nai)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osuNai")
    def osu_nai(self) -> Optional[str]:
        return pulumi.get(self, "osu_nai")


@pulumi.output_type
class WirelessControllerHotspot20H2QpOsuProviderServiceDescription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceDescription":
            suggest = "service_description"
        elif key == "serviceId":
            suggest = "service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerHotspot20H2QpOsuProviderServiceDescription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerHotspot20H2QpOsuProviderServiceDescription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerHotspot20H2QpOsuProviderServiceDescription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lang: Optional[str] = None,
                 service_description: Optional[str] = None,
                 service_id: Optional[int] = None):
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if service_description is not None:
            pulumi.set(__self__, "service_description", service_description)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter(name="serviceDescription")
    def service_description(self) -> Optional[str]:
        return pulumi.get(self, "service_description")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[int]:
        return pulumi.get(self, "service_id")


@pulumi.output_type
class WirelessControllerHotspot20HsProfileOsuProvider(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerHotspot20IconIconList(dict):
    def __init__(__self__, *,
                 file: Optional[str] = None,
                 height: Optional[int] = None,
                 lang: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 width: Optional[int] = None):
        if file is not None:
            pulumi.set(__self__, "file", file)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def file(self) -> Optional[str]:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def lang(self) -> Optional[str]:
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WirelessControllerHotspot20QosMapDscpExcept(dict):
    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 index: Optional[int] = None,
                 up: Optional[int] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if up is not None:
            pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def up(self) -> Optional[int]:
        return pulumi.get(self, "up")


@pulumi.output_type
class WirelessControllerHotspot20QosMapDscpRange(dict):
    def __init__(__self__, *,
                 high: Optional[int] = None,
                 index: Optional[int] = None,
                 low: Optional[int] = None,
                 up: Optional[int] = None):
        if high is not None:
            pulumi.set(__self__, "high", high)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if up is not None:
            pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def high(self) -> Optional[int]:
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def low(self) -> Optional[int]:
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def up(self) -> Optional[int]:
        return pulumi.get(self, "up")


@pulumi.output_type
class WirelessControllerInterControllerInterControllerPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "peerIp":
            suggest = "peer_ip"
        elif key == "peerPort":
            suggest = "peer_port"
        elif key == "peerPriority":
            suggest = "peer_priority"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerInterControllerInterControllerPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerInterControllerInterControllerPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerInterControllerInterControllerPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 peer_ip: Optional[str] = None,
                 peer_port: Optional[int] = None,
                 peer_priority: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)
        if peer_port is not None:
            pulumi.set(__self__, "peer_port", peer_port)
        if peer_priority is not None:
            pulumi.set(__self__, "peer_priority", peer_priority)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[str]:
        return pulumi.get(self, "peer_ip")

    @property
    @pulumi.getter(name="peerPort")
    def peer_port(self) -> Optional[int]:
        return pulumi.get(self, "peer_port")

    @property
    @pulumi.getter(name="peerPriority")
    def peer_priority(self) -> Optional[str]:
        return pulumi.get(self, "peer_priority")


@pulumi.output_type
class WirelessControllerMpskProfileMpskGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mpskKeys":
            suggest = "mpsk_keys"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vlanType":
            suggest = "vlan_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerMpskProfileMpskGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerMpskProfileMpskGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerMpskProfileMpskGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mpsk_keys: Optional[Sequence['outputs.WirelessControllerMpskProfileMpskGroupMpskKey']] = None,
                 name: Optional[str] = None,
                 vlan_id: Optional[int] = None,
                 vlan_type: Optional[str] = None):
        if mpsk_keys is not None:
            pulumi.set(__self__, "mpsk_keys", mpsk_keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_type is not None:
            pulumi.set(__self__, "vlan_type", vlan_type)

    @property
    @pulumi.getter(name="mpskKeys")
    def mpsk_keys(self) -> Optional[Sequence['outputs.WirelessControllerMpskProfileMpskGroupMpskKey']]:
        return pulumi.get(self, "mpsk_keys")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vlanType")
    def vlan_type(self) -> Optional[str]:
        return pulumi.get(self, "vlan_type")


@pulumi.output_type
class WirelessControllerMpskProfileMpskGroupMpskKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "concurrentClientLimitType":
            suggest = "concurrent_client_limit_type"
        elif key == "concurrentClients":
            suggest = "concurrent_clients"
        elif key == "mpskSchedules":
            suggest = "mpsk_schedules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerMpskProfileMpskGroupMpskKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerMpskProfileMpskGroupMpskKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerMpskProfileMpskGroupMpskKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 concurrent_client_limit_type: Optional[str] = None,
                 concurrent_clients: Optional[int] = None,
                 mac: Optional[str] = None,
                 mpsk_schedules: Optional[Sequence['outputs.WirelessControllerMpskProfileMpskGroupMpskKeyMpskSchedule']] = None,
                 name: Optional[str] = None,
                 passphrase: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if concurrent_client_limit_type is not None:
            pulumi.set(__self__, "concurrent_client_limit_type", concurrent_client_limit_type)
        if concurrent_clients is not None:
            pulumi.set(__self__, "concurrent_clients", concurrent_clients)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mpsk_schedules is not None:
            pulumi.set(__self__, "mpsk_schedules", mpsk_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="concurrentClientLimitType")
    def concurrent_client_limit_type(self) -> Optional[str]:
        return pulumi.get(self, "concurrent_client_limit_type")

    @property
    @pulumi.getter(name="concurrentClients")
    def concurrent_clients(self) -> Optional[int]:
        return pulumi.get(self, "concurrent_clients")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="mpskSchedules")
    def mpsk_schedules(self) -> Optional[Sequence['outputs.WirelessControllerMpskProfileMpskGroupMpskKeyMpskSchedule']]:
        return pulumi.get(self, "mpsk_schedules")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        return pulumi.get(self, "passphrase")


@pulumi.output_type
class WirelessControllerMpskProfileMpskGroupMpskKeyMpskSchedule(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerQosProfileDscpWmmBe(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class WirelessControllerQosProfileDscpWmmBk(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class WirelessControllerQosProfileDscpWmmVi(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class WirelessControllerQosProfileDscpWmmVo(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class WirelessControllerSettingDarrpOptimizeSchedule(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerSettingOffendingSsid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ssidPattern":
            suggest = "ssid_pattern"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerSettingOffendingSsid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerSettingOffendingSsid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerSettingOffendingSsid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 ssid_pattern: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ssid_pattern is not None:
            pulumi.set(__self__, "ssid_pattern", ssid_pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ssidPattern")
    def ssid_pattern(self) -> Optional[str]:
        return pulumi.get(self, "ssid_pattern")


@pulumi.output_type
class WirelessControllerSnmpCommunity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryV1Status":
            suggest = "query_v1_status"
        elif key == "queryV2cStatus":
            suggest = "query_v2c_status"
        elif key == "trapV1Status":
            suggest = "trap_v1_status"
        elif key == "trapV2cStatus":
            suggest = "trap_v2c_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerSnmpCommunity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerSnmpCommunity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerSnmpCommunity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence['outputs.WirelessControllerSnmpCommunityHost']] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 query_v1_status: Optional[str] = None,
                 query_v2c_status: Optional[str] = None,
                 status: Optional[str] = None,
                 trap_v1_status: Optional[str] = None,
                 trap_v2c_status: Optional[str] = None):
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.WirelessControllerSnmpCommunityHost']]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[str]:
        return pulumi.get(self, "query_v1_status")

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[str]:
        return pulumi.get(self, "query_v2c_status")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[str]:
        return pulumi.get(self, "trap_v1_status")

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[str]:
        return pulumi.get(self, "trap_v2c_status")


@pulumi.output_type
class WirelessControllerSnmpCommunityHost(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class WirelessControllerSnmpUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authProto":
            suggest = "auth_proto"
        elif key == "authPwd":
            suggest = "auth_pwd"
        elif key == "notifyHosts":
            suggest = "notify_hosts"
        elif key == "privProto":
            suggest = "priv_proto"
        elif key == "privPwd":
            suggest = "priv_pwd"
        elif key == "securityLevel":
            suggest = "security_level"
        elif key == "trapStatus":
            suggest = "trap_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerSnmpUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerSnmpUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerSnmpUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_proto: Optional[str] = None,
                 auth_pwd: Optional[str] = None,
                 name: Optional[str] = None,
                 notify_hosts: Optional[str] = None,
                 priv_proto: Optional[str] = None,
                 priv_pwd: Optional[str] = None,
                 queries: Optional[str] = None,
                 security_level: Optional[str] = None,
                 status: Optional[str] = None,
                 trap_status: Optional[str] = None):
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_hosts is not None:
            pulumi.set(__self__, "notify_hosts", notify_hosts)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_status is not None:
            pulumi.set(__self__, "trap_status", trap_status)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[str]:
        return pulumi.get(self, "auth_proto")

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[str]:
        return pulumi.get(self, "auth_pwd")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyHosts")
    def notify_hosts(self) -> Optional[str]:
        return pulumi.get(self, "notify_hosts")

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[str]:
        return pulumi.get(self, "priv_proto")

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[str]:
        return pulumi.get(self, "priv_pwd")

    @property
    @pulumi.getter
    def queries(self) -> Optional[str]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[str]:
        return pulumi.get(self, "security_level")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trapStatus")
    def trap_status(self) -> Optional[str]:
        return pulumi.get(self, "trap_status")


@pulumi.output_type
class WirelessControllerTimersDarrpTime(dict):
    def __init__(__self__, *,
                 time: Optional[str] = None):
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")


@pulumi.output_type
class WirelessControllerVapGroupVap(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerVapMacFilterList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "macFilterPolicy":
            suggest = "mac_filter_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerVapMacFilterList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerVapMacFilterList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerVapMacFilterList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 mac: Optional[str] = None,
                 mac_filter_policy: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mac_filter_policy is not None:
            pulumi.set(__self__, "mac_filter_policy", mac_filter_policy)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="macFilterPolicy")
    def mac_filter_policy(self) -> Optional[str]:
        return pulumi.get(self, "mac_filter_policy")


@pulumi.output_type
class WirelessControllerVapMpskKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "concurrentClients":
            suggest = "concurrent_clients"
        elif key == "keyName":
            suggest = "key_name"
        elif key == "mpskSchedules":
            suggest = "mpsk_schedules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerVapMpskKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerVapMpskKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerVapMpskKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 concurrent_clients: Optional[str] = None,
                 key_name: Optional[str] = None,
                 mpsk_schedules: Optional[Sequence['outputs.WirelessControllerVapMpskKeyMpskSchedule']] = None,
                 passphrase: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if concurrent_clients is not None:
            pulumi.set(__self__, "concurrent_clients", concurrent_clients)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if mpsk_schedules is not None:
            pulumi.set(__self__, "mpsk_schedules", mpsk_schedules)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="concurrentClients")
    def concurrent_clients(self) -> Optional[str]:
        return pulumi.get(self, "concurrent_clients")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[str]:
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="mpskSchedules")
    def mpsk_schedules(self) -> Optional[Sequence['outputs.WirelessControllerVapMpskKeyMpskSchedule']]:
        return pulumi.get(self, "mpsk_schedules")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        return pulumi.get(self, "passphrase")


@pulumi.output_type
class WirelessControllerVapMpskKeyMpskSchedule(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerVapPortalMessageOverrides(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authDisclaimerPage":
            suggest = "auth_disclaimer_page"
        elif key == "authLoginFailedPage":
            suggest = "auth_login_failed_page"
        elif key == "authLoginPage":
            suggest = "auth_login_page"
        elif key == "authRejectPage":
            suggest = "auth_reject_page"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerVapPortalMessageOverrides. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerVapPortalMessageOverrides.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerVapPortalMessageOverrides.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_disclaimer_page: Optional[str] = None,
                 auth_login_failed_page: Optional[str] = None,
                 auth_login_page: Optional[str] = None,
                 auth_reject_page: Optional[str] = None):
        if auth_disclaimer_page is not None:
            pulumi.set(__self__, "auth_disclaimer_page", auth_disclaimer_page)
        if auth_login_failed_page is not None:
            pulumi.set(__self__, "auth_login_failed_page", auth_login_failed_page)
        if auth_login_page is not None:
            pulumi.set(__self__, "auth_login_page", auth_login_page)
        if auth_reject_page is not None:
            pulumi.set(__self__, "auth_reject_page", auth_reject_page)

    @property
    @pulumi.getter(name="authDisclaimerPage")
    def auth_disclaimer_page(self) -> Optional[str]:
        return pulumi.get(self, "auth_disclaimer_page")

    @property
    @pulumi.getter(name="authLoginFailedPage")
    def auth_login_failed_page(self) -> Optional[str]:
        return pulumi.get(self, "auth_login_failed_page")

    @property
    @pulumi.getter(name="authLoginPage")
    def auth_login_page(self) -> Optional[str]:
        return pulumi.get(self, "auth_login_page")

    @property
    @pulumi.getter(name="authRejectPage")
    def auth_reject_page(self) -> Optional[str]:
        return pulumi.get(self, "auth_reject_page")


@pulumi.output_type
class WirelessControllerVapRadiusMacAuthUsergroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerVapSelectedUsergroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerVapUsergroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerVapVlanName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerVapVlanName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerVapVlanName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerVapVlanName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 vlan_id: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class WirelessControllerVapVlanPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wtpGroup":
            suggest = "wtp_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerVapVlanPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerVapVlanPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerVapVlanPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 wtp_group: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if wtp_group is not None:
            pulumi.set(__self__, "wtp_group", wtp_group)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="wtpGroup")
    def wtp_group(self) -> Optional[str]:
        return pulumi.get(self, "wtp_group")


@pulumi.output_type
class WirelessControllerWidsProfileApBgscanDisableSchedule(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerWtpGroupWtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wtpId":
            suggest = "wtp_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpGroupWtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpGroupWtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpGroupWtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 wtp_id: Optional[str] = None):
        if wtp_id is not None:
            pulumi.set(__self__, "wtp_id", wtp_id)

    @property
    @pulumi.getter(name="wtpId")
    def wtp_id(self) -> Optional[str]:
        return pulumi.get(self, "wtp_id")


@pulumi.output_type
class WirelessControllerWtpLan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "port1Mode":
            suggest = "port1_mode"
        elif key == "port1Ssid":
            suggest = "port1_ssid"
        elif key == "port2Mode":
            suggest = "port2_mode"
        elif key == "port2Ssid":
            suggest = "port2_ssid"
        elif key == "port3Mode":
            suggest = "port3_mode"
        elif key == "port3Ssid":
            suggest = "port3_ssid"
        elif key == "port4Mode":
            suggest = "port4_mode"
        elif key == "port4Ssid":
            suggest = "port4_ssid"
        elif key == "port5Mode":
            suggest = "port5_mode"
        elif key == "port5Ssid":
            suggest = "port5_ssid"
        elif key == "port6Mode":
            suggest = "port6_mode"
        elif key == "port6Ssid":
            suggest = "port6_ssid"
        elif key == "port7Mode":
            suggest = "port7_mode"
        elif key == "port7Ssid":
            suggest = "port7_ssid"
        elif key == "port8Mode":
            suggest = "port8_mode"
        elif key == "port8Ssid":
            suggest = "port8_ssid"
        elif key == "portEslMode":
            suggest = "port_esl_mode"
        elif key == "portEslSsid":
            suggest = "port_esl_ssid"
        elif key == "portMode":
            suggest = "port_mode"
        elif key == "portSsid":
            suggest = "port_ssid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpLan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpLan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpLan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port1_mode: Optional[str] = None,
                 port1_ssid: Optional[str] = None,
                 port2_mode: Optional[str] = None,
                 port2_ssid: Optional[str] = None,
                 port3_mode: Optional[str] = None,
                 port3_ssid: Optional[str] = None,
                 port4_mode: Optional[str] = None,
                 port4_ssid: Optional[str] = None,
                 port5_mode: Optional[str] = None,
                 port5_ssid: Optional[str] = None,
                 port6_mode: Optional[str] = None,
                 port6_ssid: Optional[str] = None,
                 port7_mode: Optional[str] = None,
                 port7_ssid: Optional[str] = None,
                 port8_mode: Optional[str] = None,
                 port8_ssid: Optional[str] = None,
                 port_esl_mode: Optional[str] = None,
                 port_esl_ssid: Optional[str] = None,
                 port_mode: Optional[str] = None,
                 port_ssid: Optional[str] = None):
        if port1_mode is not None:
            pulumi.set(__self__, "port1_mode", port1_mode)
        if port1_ssid is not None:
            pulumi.set(__self__, "port1_ssid", port1_ssid)
        if port2_mode is not None:
            pulumi.set(__self__, "port2_mode", port2_mode)
        if port2_ssid is not None:
            pulumi.set(__self__, "port2_ssid", port2_ssid)
        if port3_mode is not None:
            pulumi.set(__self__, "port3_mode", port3_mode)
        if port3_ssid is not None:
            pulumi.set(__self__, "port3_ssid", port3_ssid)
        if port4_mode is not None:
            pulumi.set(__self__, "port4_mode", port4_mode)
        if port4_ssid is not None:
            pulumi.set(__self__, "port4_ssid", port4_ssid)
        if port5_mode is not None:
            pulumi.set(__self__, "port5_mode", port5_mode)
        if port5_ssid is not None:
            pulumi.set(__self__, "port5_ssid", port5_ssid)
        if port6_mode is not None:
            pulumi.set(__self__, "port6_mode", port6_mode)
        if port6_ssid is not None:
            pulumi.set(__self__, "port6_ssid", port6_ssid)
        if port7_mode is not None:
            pulumi.set(__self__, "port7_mode", port7_mode)
        if port7_ssid is not None:
            pulumi.set(__self__, "port7_ssid", port7_ssid)
        if port8_mode is not None:
            pulumi.set(__self__, "port8_mode", port8_mode)
        if port8_ssid is not None:
            pulumi.set(__self__, "port8_ssid", port8_ssid)
        if port_esl_mode is not None:
            pulumi.set(__self__, "port_esl_mode", port_esl_mode)
        if port_esl_ssid is not None:
            pulumi.set(__self__, "port_esl_ssid", port_esl_ssid)
        if port_mode is not None:
            pulumi.set(__self__, "port_mode", port_mode)
        if port_ssid is not None:
            pulumi.set(__self__, "port_ssid", port_ssid)

    @property
    @pulumi.getter(name="port1Mode")
    def port1_mode(self) -> Optional[str]:
        return pulumi.get(self, "port1_mode")

    @property
    @pulumi.getter(name="port1Ssid")
    def port1_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port1_ssid")

    @property
    @pulumi.getter(name="port2Mode")
    def port2_mode(self) -> Optional[str]:
        return pulumi.get(self, "port2_mode")

    @property
    @pulumi.getter(name="port2Ssid")
    def port2_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port2_ssid")

    @property
    @pulumi.getter(name="port3Mode")
    def port3_mode(self) -> Optional[str]:
        return pulumi.get(self, "port3_mode")

    @property
    @pulumi.getter(name="port3Ssid")
    def port3_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port3_ssid")

    @property
    @pulumi.getter(name="port4Mode")
    def port4_mode(self) -> Optional[str]:
        return pulumi.get(self, "port4_mode")

    @property
    @pulumi.getter(name="port4Ssid")
    def port4_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port4_ssid")

    @property
    @pulumi.getter(name="port5Mode")
    def port5_mode(self) -> Optional[str]:
        return pulumi.get(self, "port5_mode")

    @property
    @pulumi.getter(name="port5Ssid")
    def port5_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port5_ssid")

    @property
    @pulumi.getter(name="port6Mode")
    def port6_mode(self) -> Optional[str]:
        return pulumi.get(self, "port6_mode")

    @property
    @pulumi.getter(name="port6Ssid")
    def port6_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port6_ssid")

    @property
    @pulumi.getter(name="port7Mode")
    def port7_mode(self) -> Optional[str]:
        return pulumi.get(self, "port7_mode")

    @property
    @pulumi.getter(name="port7Ssid")
    def port7_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port7_ssid")

    @property
    @pulumi.getter(name="port8Mode")
    def port8_mode(self) -> Optional[str]:
        return pulumi.get(self, "port8_mode")

    @property
    @pulumi.getter(name="port8Ssid")
    def port8_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port8_ssid")

    @property
    @pulumi.getter(name="portEslMode")
    def port_esl_mode(self) -> Optional[str]:
        return pulumi.get(self, "port_esl_mode")

    @property
    @pulumi.getter(name="portEslSsid")
    def port_esl_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port_esl_ssid")

    @property
    @pulumi.getter(name="portMode")
    def port_mode(self) -> Optional[str]:
        return pulumi.get(self, "port_mode")

    @property
    @pulumi.getter(name="portSsid")
    def port_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port_ssid")


@pulumi.output_type
class WirelessControllerWtpProfileDenyMacList(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 mac: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        return pulumi.get(self, "mac")


@pulumi.output_type
class WirelessControllerWtpProfileEslSesDongle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apcAddrType":
            suggest = "apc_addr_type"
        elif key == "apcFqdn":
            suggest = "apc_fqdn"
        elif key == "apcIp":
            suggest = "apc_ip"
        elif key == "apcPort":
            suggest = "apc_port"
        elif key == "coexLevel":
            suggest = "coex_level"
        elif key == "complianceLevel":
            suggest = "compliance_level"
        elif key == "eslChannel":
            suggest = "esl_channel"
        elif key == "outputPower":
            suggest = "output_power"
        elif key == "scdEnable":
            suggest = "scd_enable"
        elif key == "tlsCertVerification":
            suggest = "tls_cert_verification"
        elif key == "tlsFqdnVerification":
            suggest = "tls_fqdn_verification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpProfileEslSesDongle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpProfileEslSesDongle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpProfileEslSesDongle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apc_addr_type: Optional[str] = None,
                 apc_fqdn: Optional[str] = None,
                 apc_ip: Optional[str] = None,
                 apc_port: Optional[int] = None,
                 coex_level: Optional[str] = None,
                 compliance_level: Optional[str] = None,
                 esl_channel: Optional[str] = None,
                 output_power: Optional[str] = None,
                 scd_enable: Optional[str] = None,
                 tls_cert_verification: Optional[str] = None,
                 tls_fqdn_verification: Optional[str] = None):
        if apc_addr_type is not None:
            pulumi.set(__self__, "apc_addr_type", apc_addr_type)
        if apc_fqdn is not None:
            pulumi.set(__self__, "apc_fqdn", apc_fqdn)
        if apc_ip is not None:
            pulumi.set(__self__, "apc_ip", apc_ip)
        if apc_port is not None:
            pulumi.set(__self__, "apc_port", apc_port)
        if coex_level is not None:
            pulumi.set(__self__, "coex_level", coex_level)
        if compliance_level is not None:
            pulumi.set(__self__, "compliance_level", compliance_level)
        if esl_channel is not None:
            pulumi.set(__self__, "esl_channel", esl_channel)
        if output_power is not None:
            pulumi.set(__self__, "output_power", output_power)
        if scd_enable is not None:
            pulumi.set(__self__, "scd_enable", scd_enable)
        if tls_cert_verification is not None:
            pulumi.set(__self__, "tls_cert_verification", tls_cert_verification)
        if tls_fqdn_verification is not None:
            pulumi.set(__self__, "tls_fqdn_verification", tls_fqdn_verification)

    @property
    @pulumi.getter(name="apcAddrType")
    def apc_addr_type(self) -> Optional[str]:
        return pulumi.get(self, "apc_addr_type")

    @property
    @pulumi.getter(name="apcFqdn")
    def apc_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "apc_fqdn")

    @property
    @pulumi.getter(name="apcIp")
    def apc_ip(self) -> Optional[str]:
        return pulumi.get(self, "apc_ip")

    @property
    @pulumi.getter(name="apcPort")
    def apc_port(self) -> Optional[int]:
        return pulumi.get(self, "apc_port")

    @property
    @pulumi.getter(name="coexLevel")
    def coex_level(self) -> Optional[str]:
        return pulumi.get(self, "coex_level")

    @property
    @pulumi.getter(name="complianceLevel")
    def compliance_level(self) -> Optional[str]:
        return pulumi.get(self, "compliance_level")

    @property
    @pulumi.getter(name="eslChannel")
    def esl_channel(self) -> Optional[str]:
        return pulumi.get(self, "esl_channel")

    @property
    @pulumi.getter(name="outputPower")
    def output_power(self) -> Optional[str]:
        return pulumi.get(self, "output_power")

    @property
    @pulumi.getter(name="scdEnable")
    def scd_enable(self) -> Optional[str]:
        return pulumi.get(self, "scd_enable")

    @property
    @pulumi.getter(name="tlsCertVerification")
    def tls_cert_verification(self) -> Optional[str]:
        return pulumi.get(self, "tls_cert_verification")

    @property
    @pulumi.getter(name="tlsFqdnVerification")
    def tls_fqdn_verification(self) -> Optional[str]:
        return pulumi.get(self, "tls_fqdn_verification")


@pulumi.output_type
class WirelessControllerWtpProfileLan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "port1Mode":
            suggest = "port1_mode"
        elif key == "port1Ssid":
            suggest = "port1_ssid"
        elif key == "port2Mode":
            suggest = "port2_mode"
        elif key == "port2Ssid":
            suggest = "port2_ssid"
        elif key == "port3Mode":
            suggest = "port3_mode"
        elif key == "port3Ssid":
            suggest = "port3_ssid"
        elif key == "port4Mode":
            suggest = "port4_mode"
        elif key == "port4Ssid":
            suggest = "port4_ssid"
        elif key == "port5Mode":
            suggest = "port5_mode"
        elif key == "port5Ssid":
            suggest = "port5_ssid"
        elif key == "port6Mode":
            suggest = "port6_mode"
        elif key == "port6Ssid":
            suggest = "port6_ssid"
        elif key == "port7Mode":
            suggest = "port7_mode"
        elif key == "port7Ssid":
            suggest = "port7_ssid"
        elif key == "port8Mode":
            suggest = "port8_mode"
        elif key == "port8Ssid":
            suggest = "port8_ssid"
        elif key == "portEslMode":
            suggest = "port_esl_mode"
        elif key == "portEslSsid":
            suggest = "port_esl_ssid"
        elif key == "portMode":
            suggest = "port_mode"
        elif key == "portSsid":
            suggest = "port_ssid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpProfileLan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpProfileLan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpProfileLan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port1_mode: Optional[str] = None,
                 port1_ssid: Optional[str] = None,
                 port2_mode: Optional[str] = None,
                 port2_ssid: Optional[str] = None,
                 port3_mode: Optional[str] = None,
                 port3_ssid: Optional[str] = None,
                 port4_mode: Optional[str] = None,
                 port4_ssid: Optional[str] = None,
                 port5_mode: Optional[str] = None,
                 port5_ssid: Optional[str] = None,
                 port6_mode: Optional[str] = None,
                 port6_ssid: Optional[str] = None,
                 port7_mode: Optional[str] = None,
                 port7_ssid: Optional[str] = None,
                 port8_mode: Optional[str] = None,
                 port8_ssid: Optional[str] = None,
                 port_esl_mode: Optional[str] = None,
                 port_esl_ssid: Optional[str] = None,
                 port_mode: Optional[str] = None,
                 port_ssid: Optional[str] = None):
        if port1_mode is not None:
            pulumi.set(__self__, "port1_mode", port1_mode)
        if port1_ssid is not None:
            pulumi.set(__self__, "port1_ssid", port1_ssid)
        if port2_mode is not None:
            pulumi.set(__self__, "port2_mode", port2_mode)
        if port2_ssid is not None:
            pulumi.set(__self__, "port2_ssid", port2_ssid)
        if port3_mode is not None:
            pulumi.set(__self__, "port3_mode", port3_mode)
        if port3_ssid is not None:
            pulumi.set(__self__, "port3_ssid", port3_ssid)
        if port4_mode is not None:
            pulumi.set(__self__, "port4_mode", port4_mode)
        if port4_ssid is not None:
            pulumi.set(__self__, "port4_ssid", port4_ssid)
        if port5_mode is not None:
            pulumi.set(__self__, "port5_mode", port5_mode)
        if port5_ssid is not None:
            pulumi.set(__self__, "port5_ssid", port5_ssid)
        if port6_mode is not None:
            pulumi.set(__self__, "port6_mode", port6_mode)
        if port6_ssid is not None:
            pulumi.set(__self__, "port6_ssid", port6_ssid)
        if port7_mode is not None:
            pulumi.set(__self__, "port7_mode", port7_mode)
        if port7_ssid is not None:
            pulumi.set(__self__, "port7_ssid", port7_ssid)
        if port8_mode is not None:
            pulumi.set(__self__, "port8_mode", port8_mode)
        if port8_ssid is not None:
            pulumi.set(__self__, "port8_ssid", port8_ssid)
        if port_esl_mode is not None:
            pulumi.set(__self__, "port_esl_mode", port_esl_mode)
        if port_esl_ssid is not None:
            pulumi.set(__self__, "port_esl_ssid", port_esl_ssid)
        if port_mode is not None:
            pulumi.set(__self__, "port_mode", port_mode)
        if port_ssid is not None:
            pulumi.set(__self__, "port_ssid", port_ssid)

    @property
    @pulumi.getter(name="port1Mode")
    def port1_mode(self) -> Optional[str]:
        return pulumi.get(self, "port1_mode")

    @property
    @pulumi.getter(name="port1Ssid")
    def port1_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port1_ssid")

    @property
    @pulumi.getter(name="port2Mode")
    def port2_mode(self) -> Optional[str]:
        return pulumi.get(self, "port2_mode")

    @property
    @pulumi.getter(name="port2Ssid")
    def port2_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port2_ssid")

    @property
    @pulumi.getter(name="port3Mode")
    def port3_mode(self) -> Optional[str]:
        return pulumi.get(self, "port3_mode")

    @property
    @pulumi.getter(name="port3Ssid")
    def port3_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port3_ssid")

    @property
    @pulumi.getter(name="port4Mode")
    def port4_mode(self) -> Optional[str]:
        return pulumi.get(self, "port4_mode")

    @property
    @pulumi.getter(name="port4Ssid")
    def port4_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port4_ssid")

    @property
    @pulumi.getter(name="port5Mode")
    def port5_mode(self) -> Optional[str]:
        return pulumi.get(self, "port5_mode")

    @property
    @pulumi.getter(name="port5Ssid")
    def port5_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port5_ssid")

    @property
    @pulumi.getter(name="port6Mode")
    def port6_mode(self) -> Optional[str]:
        return pulumi.get(self, "port6_mode")

    @property
    @pulumi.getter(name="port6Ssid")
    def port6_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port6_ssid")

    @property
    @pulumi.getter(name="port7Mode")
    def port7_mode(self) -> Optional[str]:
        return pulumi.get(self, "port7_mode")

    @property
    @pulumi.getter(name="port7Ssid")
    def port7_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port7_ssid")

    @property
    @pulumi.getter(name="port8Mode")
    def port8_mode(self) -> Optional[str]:
        return pulumi.get(self, "port8_mode")

    @property
    @pulumi.getter(name="port8Ssid")
    def port8_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port8_ssid")

    @property
    @pulumi.getter(name="portEslMode")
    def port_esl_mode(self) -> Optional[str]:
        return pulumi.get(self, "port_esl_mode")

    @property
    @pulumi.getter(name="portEslSsid")
    def port_esl_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port_esl_ssid")

    @property
    @pulumi.getter(name="portMode")
    def port_mode(self) -> Optional[str]:
        return pulumi.get(self, "port_mode")

    @property
    @pulumi.getter(name="portSsid")
    def port_ssid(self) -> Optional[str]:
        return pulumi.get(self, "port_ssid")


@pulumi.output_type
class WirelessControllerWtpProfileLbs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aeroscoutApMac":
            suggest = "aeroscout_ap_mac"
        elif key == "aeroscoutMmuReport":
            suggest = "aeroscout_mmu_report"
        elif key == "aeroscoutMu":
            suggest = "aeroscout_mu"
        elif key == "aeroscoutMuFactor":
            suggest = "aeroscout_mu_factor"
        elif key == "aeroscoutMuTimeout":
            suggest = "aeroscout_mu_timeout"
        elif key == "aeroscoutServerIp":
            suggest = "aeroscout_server_ip"
        elif key == "aeroscoutServerPort":
            suggest = "aeroscout_server_port"
        elif key == "ekahauBlinkMode":
            suggest = "ekahau_blink_mode"
        elif key == "ekahauTag":
            suggest = "ekahau_tag"
        elif key == "ercServerIp":
            suggest = "erc_server_ip"
        elif key == "ercServerPort":
            suggest = "erc_server_port"
        elif key == "fortipresenceBle":
            suggest = "fortipresence_ble"
        elif key == "fortipresenceFrequency":
            suggest = "fortipresence_frequency"
        elif key == "fortipresencePort":
            suggest = "fortipresence_port"
        elif key == "fortipresenceProject":
            suggest = "fortipresence_project"
        elif key == "fortipresenceRogue":
            suggest = "fortipresence_rogue"
        elif key == "fortipresenceSecret":
            suggest = "fortipresence_secret"
        elif key == "fortipresenceServer":
            suggest = "fortipresence_server"
        elif key == "fortipresenceServerAddrType":
            suggest = "fortipresence_server_addr_type"
        elif key == "fortipresenceServerFqdn":
            suggest = "fortipresence_server_fqdn"
        elif key == "fortipresenceUnassoc":
            suggest = "fortipresence_unassoc"
        elif key == "stationLocate":
            suggest = "station_locate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpProfileLbs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpProfileLbs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpProfileLbs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aeroscout: Optional[str] = None,
                 aeroscout_ap_mac: Optional[str] = None,
                 aeroscout_mmu_report: Optional[str] = None,
                 aeroscout_mu: Optional[str] = None,
                 aeroscout_mu_factor: Optional[int] = None,
                 aeroscout_mu_timeout: Optional[int] = None,
                 aeroscout_server_ip: Optional[str] = None,
                 aeroscout_server_port: Optional[int] = None,
                 ekahau_blink_mode: Optional[str] = None,
                 ekahau_tag: Optional[str] = None,
                 erc_server_ip: Optional[str] = None,
                 erc_server_port: Optional[int] = None,
                 fortipresence: Optional[str] = None,
                 fortipresence_ble: Optional[str] = None,
                 fortipresence_frequency: Optional[int] = None,
                 fortipresence_port: Optional[int] = None,
                 fortipresence_project: Optional[str] = None,
                 fortipresence_rogue: Optional[str] = None,
                 fortipresence_secret: Optional[str] = None,
                 fortipresence_server: Optional[str] = None,
                 fortipresence_server_addr_type: Optional[str] = None,
                 fortipresence_server_fqdn: Optional[str] = None,
                 fortipresence_unassoc: Optional[str] = None,
                 station_locate: Optional[str] = None):
        if aeroscout is not None:
            pulumi.set(__self__, "aeroscout", aeroscout)
        if aeroscout_ap_mac is not None:
            pulumi.set(__self__, "aeroscout_ap_mac", aeroscout_ap_mac)
        if aeroscout_mmu_report is not None:
            pulumi.set(__self__, "aeroscout_mmu_report", aeroscout_mmu_report)
        if aeroscout_mu is not None:
            pulumi.set(__self__, "aeroscout_mu", aeroscout_mu)
        if aeroscout_mu_factor is not None:
            pulumi.set(__self__, "aeroscout_mu_factor", aeroscout_mu_factor)
        if aeroscout_mu_timeout is not None:
            pulumi.set(__self__, "aeroscout_mu_timeout", aeroscout_mu_timeout)
        if aeroscout_server_ip is not None:
            pulumi.set(__self__, "aeroscout_server_ip", aeroscout_server_ip)
        if aeroscout_server_port is not None:
            pulumi.set(__self__, "aeroscout_server_port", aeroscout_server_port)
        if ekahau_blink_mode is not None:
            pulumi.set(__self__, "ekahau_blink_mode", ekahau_blink_mode)
        if ekahau_tag is not None:
            pulumi.set(__self__, "ekahau_tag", ekahau_tag)
        if erc_server_ip is not None:
            pulumi.set(__self__, "erc_server_ip", erc_server_ip)
        if erc_server_port is not None:
            pulumi.set(__self__, "erc_server_port", erc_server_port)
        if fortipresence is not None:
            pulumi.set(__self__, "fortipresence", fortipresence)
        if fortipresence_ble is not None:
            pulumi.set(__self__, "fortipresence_ble", fortipresence_ble)
        if fortipresence_frequency is not None:
            pulumi.set(__self__, "fortipresence_frequency", fortipresence_frequency)
        if fortipresence_port is not None:
            pulumi.set(__self__, "fortipresence_port", fortipresence_port)
        if fortipresence_project is not None:
            pulumi.set(__self__, "fortipresence_project", fortipresence_project)
        if fortipresence_rogue is not None:
            pulumi.set(__self__, "fortipresence_rogue", fortipresence_rogue)
        if fortipresence_secret is not None:
            pulumi.set(__self__, "fortipresence_secret", fortipresence_secret)
        if fortipresence_server is not None:
            pulumi.set(__self__, "fortipresence_server", fortipresence_server)
        if fortipresence_server_addr_type is not None:
            pulumi.set(__self__, "fortipresence_server_addr_type", fortipresence_server_addr_type)
        if fortipresence_server_fqdn is not None:
            pulumi.set(__self__, "fortipresence_server_fqdn", fortipresence_server_fqdn)
        if fortipresence_unassoc is not None:
            pulumi.set(__self__, "fortipresence_unassoc", fortipresence_unassoc)
        if station_locate is not None:
            pulumi.set(__self__, "station_locate", station_locate)

    @property
    @pulumi.getter
    def aeroscout(self) -> Optional[str]:
        return pulumi.get(self, "aeroscout")

    @property
    @pulumi.getter(name="aeroscoutApMac")
    def aeroscout_ap_mac(self) -> Optional[str]:
        return pulumi.get(self, "aeroscout_ap_mac")

    @property
    @pulumi.getter(name="aeroscoutMmuReport")
    def aeroscout_mmu_report(self) -> Optional[str]:
        return pulumi.get(self, "aeroscout_mmu_report")

    @property
    @pulumi.getter(name="aeroscoutMu")
    def aeroscout_mu(self) -> Optional[str]:
        return pulumi.get(self, "aeroscout_mu")

    @property
    @pulumi.getter(name="aeroscoutMuFactor")
    def aeroscout_mu_factor(self) -> Optional[int]:
        return pulumi.get(self, "aeroscout_mu_factor")

    @property
    @pulumi.getter(name="aeroscoutMuTimeout")
    def aeroscout_mu_timeout(self) -> Optional[int]:
        return pulumi.get(self, "aeroscout_mu_timeout")

    @property
    @pulumi.getter(name="aeroscoutServerIp")
    def aeroscout_server_ip(self) -> Optional[str]:
        return pulumi.get(self, "aeroscout_server_ip")

    @property
    @pulumi.getter(name="aeroscoutServerPort")
    def aeroscout_server_port(self) -> Optional[int]:
        return pulumi.get(self, "aeroscout_server_port")

    @property
    @pulumi.getter(name="ekahauBlinkMode")
    def ekahau_blink_mode(self) -> Optional[str]:
        return pulumi.get(self, "ekahau_blink_mode")

    @property
    @pulumi.getter(name="ekahauTag")
    def ekahau_tag(self) -> Optional[str]:
        return pulumi.get(self, "ekahau_tag")

    @property
    @pulumi.getter(name="ercServerIp")
    def erc_server_ip(self) -> Optional[str]:
        return pulumi.get(self, "erc_server_ip")

    @property
    @pulumi.getter(name="ercServerPort")
    def erc_server_port(self) -> Optional[int]:
        return pulumi.get(self, "erc_server_port")

    @property
    @pulumi.getter
    def fortipresence(self) -> Optional[str]:
        return pulumi.get(self, "fortipresence")

    @property
    @pulumi.getter(name="fortipresenceBle")
    def fortipresence_ble(self) -> Optional[str]:
        return pulumi.get(self, "fortipresence_ble")

    @property
    @pulumi.getter(name="fortipresenceFrequency")
    def fortipresence_frequency(self) -> Optional[int]:
        return pulumi.get(self, "fortipresence_frequency")

    @property
    @pulumi.getter(name="fortipresencePort")
    def fortipresence_port(self) -> Optional[int]:
        return pulumi.get(self, "fortipresence_port")

    @property
    @pulumi.getter(name="fortipresenceProject")
    def fortipresence_project(self) -> Optional[str]:
        return pulumi.get(self, "fortipresence_project")

    @property
    @pulumi.getter(name="fortipresenceRogue")
    def fortipresence_rogue(self) -> Optional[str]:
        return pulumi.get(self, "fortipresence_rogue")

    @property
    @pulumi.getter(name="fortipresenceSecret")
    def fortipresence_secret(self) -> Optional[str]:
        return pulumi.get(self, "fortipresence_secret")

    @property
    @pulumi.getter(name="fortipresenceServer")
    def fortipresence_server(self) -> Optional[str]:
        return pulumi.get(self, "fortipresence_server")

    @property
    @pulumi.getter(name="fortipresenceServerAddrType")
    def fortipresence_server_addr_type(self) -> Optional[str]:
        return pulumi.get(self, "fortipresence_server_addr_type")

    @property
    @pulumi.getter(name="fortipresenceServerFqdn")
    def fortipresence_server_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "fortipresence_server_fqdn")

    @property
    @pulumi.getter(name="fortipresenceUnassoc")
    def fortipresence_unassoc(self) -> Optional[str]:
        return pulumi.get(self, "fortipresence_unassoc")

    @property
    @pulumi.getter(name="stationLocate")
    def station_locate(self) -> Optional[str]:
        return pulumi.get(self, "station_locate")


@pulumi.output_type
class WirelessControllerWtpProfileLedSchedule(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerWtpProfilePlatform(dict):
    def __init__(__self__, *,
                 ddscan: Optional[str] = None,
                 mode: Optional[str] = None,
                 type: Optional[str] = None):
        if ddscan is not None:
            pulumi.set(__self__, "ddscan", ddscan)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ddscan(self) -> Optional[str]:
        return pulumi.get(self, "ddscan")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class WirelessControllerWtpProfileRadio1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "airtimeFairness":
            suggest = "airtime_fairness"
        elif key == "apHandoff":
            suggest = "ap_handoff"
        elif key == "apSnifferAddr":
            suggest = "ap_sniffer_addr"
        elif key == "apSnifferBufsize":
            suggest = "ap_sniffer_bufsize"
        elif key == "apSnifferChan":
            suggest = "ap_sniffer_chan"
        elif key == "apSnifferCtl":
            suggest = "ap_sniffer_ctl"
        elif key == "apSnifferData":
            suggest = "ap_sniffer_data"
        elif key == "apSnifferMgmtBeacon":
            suggest = "ap_sniffer_mgmt_beacon"
        elif key == "apSnifferMgmtOther":
            suggest = "ap_sniffer_mgmt_other"
        elif key == "apSnifferMgmtProbe":
            suggest = "ap_sniffer_mgmt_probe"
        elif key == "arrpProfile":
            suggest = "arrp_profile"
        elif key == "autoPowerHigh":
            suggest = "auto_power_high"
        elif key == "autoPowerLevel":
            suggest = "auto_power_level"
        elif key == "autoPowerLow":
            suggest = "auto_power_low"
        elif key == "autoPowerTarget":
            suggest = "auto_power_target"
        elif key == "band5gType":
            suggest = "band5g_type"
        elif key == "bandwidthAdmissionControl":
            suggest = "bandwidth_admission_control"
        elif key == "bandwidthCapacity":
            suggest = "bandwidth_capacity"
        elif key == "beaconInterval":
            suggest = "beacon_interval"
        elif key == "bssColor":
            suggest = "bss_color"
        elif key == "bssColorMode":
            suggest = "bss_color_mode"
        elif key == "callAdmissionControl":
            suggest = "call_admission_control"
        elif key == "callCapacity":
            suggest = "call_capacity"
        elif key == "channelBonding":
            suggest = "channel_bonding"
        elif key == "channelUtilization":
            suggest = "channel_utilization"
        elif key == "drmaSensitivity":
            suggest = "drma_sensitivity"
        elif key == "fragThreshold":
            suggest = "frag_threshold"
        elif key == "frequencyHandoff":
            suggest = "frequency_handoff"
        elif key == "iperfProtocol":
            suggest = "iperf_protocol"
        elif key == "iperfServerPort":
            suggest = "iperf_server_port"
        elif key == "maxClients":
            suggest = "max_clients"
        elif key == "maxDistance":
            suggest = "max_distance"
        elif key == "optionalAntenna":
            suggest = "optional_antenna"
        elif key == "powerLevel":
            suggest = "power_level"
        elif key == "powerMode":
            suggest = "power_mode"
        elif key == "powerValue":
            suggest = "power_value"
        elif key == "powersaveOptimize":
            suggest = "powersave_optimize"
        elif key == "protectionMode":
            suggest = "protection_mode"
        elif key == "radioId":
            suggest = "radio_id"
        elif key == "rtsThreshold":
            suggest = "rts_threshold"
        elif key == "samBssid":
            suggest = "sam_bssid"
        elif key == "samCaptivePortal":
            suggest = "sam_captive_portal"
        elif key == "samCwpFailureString":
            suggest = "sam_cwp_failure_string"
        elif key == "samCwpMatchString":
            suggest = "sam_cwp_match_string"
        elif key == "samCwpPassword":
            suggest = "sam_cwp_password"
        elif key == "samCwpSuccessString":
            suggest = "sam_cwp_success_string"
        elif key == "samCwpTestUrl":
            suggest = "sam_cwp_test_url"
        elif key == "samCwpUsername":
            suggest = "sam_cwp_username"
        elif key == "samPassword":
            suggest = "sam_password"
        elif key == "samReportIntv":
            suggest = "sam_report_intv"
        elif key == "samSecurityType":
            suggest = "sam_security_type"
        elif key == "samServerFqdn":
            suggest = "sam_server_fqdn"
        elif key == "samServerIp":
            suggest = "sam_server_ip"
        elif key == "samServerType":
            suggest = "sam_server_type"
        elif key == "samSsid":
            suggest = "sam_ssid"
        elif key == "samTest":
            suggest = "sam_test"
        elif key == "samUsername":
            suggest = "sam_username"
        elif key == "shortGuardInterval":
            suggest = "short_guard_interval"
        elif key == "spectrumAnalysis":
            suggest = "spectrum_analysis"
        elif key == "transmitOptimize":
            suggest = "transmit_optimize"
        elif key == "vapAll":
            suggest = "vap_all"
        elif key == "widsProfile":
            suggest = "wids_profile"
        elif key == "zeroWaitDfs":
            suggest = "zero_wait_dfs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpProfileRadio1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpProfileRadio1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpProfileRadio1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 airtime_fairness: Optional[str] = None,
                 amsdu: Optional[str] = None,
                 ap_handoff: Optional[str] = None,
                 ap_sniffer_addr: Optional[str] = None,
                 ap_sniffer_bufsize: Optional[int] = None,
                 ap_sniffer_chan: Optional[int] = None,
                 ap_sniffer_ctl: Optional[str] = None,
                 ap_sniffer_data: Optional[str] = None,
                 ap_sniffer_mgmt_beacon: Optional[str] = None,
                 ap_sniffer_mgmt_other: Optional[str] = None,
                 ap_sniffer_mgmt_probe: Optional[str] = None,
                 arrp_profile: Optional[str] = None,
                 auto_power_high: Optional[int] = None,
                 auto_power_level: Optional[str] = None,
                 auto_power_low: Optional[int] = None,
                 auto_power_target: Optional[str] = None,
                 band: Optional[str] = None,
                 band5g_type: Optional[str] = None,
                 bandwidth_admission_control: Optional[str] = None,
                 bandwidth_capacity: Optional[int] = None,
                 beacon_interval: Optional[int] = None,
                 bss_color: Optional[int] = None,
                 bss_color_mode: Optional[str] = None,
                 call_admission_control: Optional[str] = None,
                 call_capacity: Optional[int] = None,
                 channel_bonding: Optional[str] = None,
                 channel_utilization: Optional[str] = None,
                 channels: Optional[Sequence['outputs.WirelessControllerWtpProfileRadio1Channel']] = None,
                 coexistence: Optional[str] = None,
                 darrp: Optional[str] = None,
                 drma: Optional[str] = None,
                 drma_sensitivity: Optional[str] = None,
                 dtim: Optional[int] = None,
                 frag_threshold: Optional[int] = None,
                 frequency_handoff: Optional[str] = None,
                 iperf_protocol: Optional[str] = None,
                 iperf_server_port: Optional[int] = None,
                 max_clients: Optional[int] = None,
                 max_distance: Optional[int] = None,
                 mode: Optional[str] = None,
                 n80211d: Optional[str] = None,
                 optional_antenna: Optional[str] = None,
                 power_level: Optional[int] = None,
                 power_mode: Optional[str] = None,
                 power_value: Optional[int] = None,
                 powersave_optimize: Optional[str] = None,
                 protection_mode: Optional[str] = None,
                 radio_id: Optional[int] = None,
                 rts_threshold: Optional[int] = None,
                 sam_bssid: Optional[str] = None,
                 sam_captive_portal: Optional[str] = None,
                 sam_cwp_failure_string: Optional[str] = None,
                 sam_cwp_match_string: Optional[str] = None,
                 sam_cwp_password: Optional[str] = None,
                 sam_cwp_success_string: Optional[str] = None,
                 sam_cwp_test_url: Optional[str] = None,
                 sam_cwp_username: Optional[str] = None,
                 sam_password: Optional[str] = None,
                 sam_report_intv: Optional[int] = None,
                 sam_security_type: Optional[str] = None,
                 sam_server_fqdn: Optional[str] = None,
                 sam_server_ip: Optional[str] = None,
                 sam_server_type: Optional[str] = None,
                 sam_ssid: Optional[str] = None,
                 sam_test: Optional[str] = None,
                 sam_username: Optional[str] = None,
                 short_guard_interval: Optional[str] = None,
                 spectrum_analysis: Optional[str] = None,
                 transmit_optimize: Optional[str] = None,
                 vap_all: Optional[str] = None,
                 vaps: Optional[Sequence['outputs.WirelessControllerWtpProfileRadio1Vap']] = None,
                 wids_profile: Optional[str] = None,
                 zero_wait_dfs: Optional[str] = None):
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[str]:
        return pulumi.get(self, "airtime_fairness")

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[str]:
        return pulumi.get(self, "amsdu")

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[str]:
        return pulumi.get(self, "ap_handoff")

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_addr")

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[int]:
        return pulumi.get(self, "ap_sniffer_bufsize")

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[int]:
        return pulumi.get(self, "ap_sniffer_chan")

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_ctl")

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_data")

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[str]:
        return pulumi.get(self, "arrp_profile")

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_high")

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_level")

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_low")

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_target")

    @property
    @pulumi.getter
    def band(self) -> Optional[str]:
        return pulumi.get(self, "band")

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[str]:
        return pulumi.get(self, "band5g_type")

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[str]:
        return pulumi.get(self, "bandwidth_admission_control")

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_capacity")

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[int]:
        return pulumi.get(self, "beacon_interval")

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[int]:
        return pulumi.get(self, "bss_color")

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[str]:
        return pulumi.get(self, "bss_color_mode")

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[str]:
        return pulumi.get(self, "call_admission_control")

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[int]:
        return pulumi.get(self, "call_capacity")

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[str]:
        return pulumi.get(self, "channel_bonding")

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[str]:
        return pulumi.get(self, "channel_utilization")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence['outputs.WirelessControllerWtpProfileRadio1Channel']]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[str]:
        return pulumi.get(self, "coexistence")

    @property
    @pulumi.getter
    def darrp(self) -> Optional[str]:
        return pulumi.get(self, "darrp")

    @property
    @pulumi.getter
    def drma(self) -> Optional[str]:
        return pulumi.get(self, "drma")

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[str]:
        return pulumi.get(self, "drma_sensitivity")

    @property
    @pulumi.getter
    def dtim(self) -> Optional[int]:
        return pulumi.get(self, "dtim")

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[int]:
        return pulumi.get(self, "frag_threshold")

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[str]:
        return pulumi.get(self, "frequency_handoff")

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[str]:
        return pulumi.get(self, "iperf_protocol")

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[int]:
        return pulumi.get(self, "iperf_server_port")

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[int]:
        return pulumi.get(self, "max_clients")

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[int]:
        return pulumi.get(self, "max_distance")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[str]:
        return pulumi.get(self, "n80211d")

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[str]:
        return pulumi.get(self, "optional_antenna")

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[int]:
        return pulumi.get(self, "power_level")

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[str]:
        return pulumi.get(self, "power_mode")

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[int]:
        return pulumi.get(self, "power_value")

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[str]:
        return pulumi.get(self, "powersave_optimize")

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "protection_mode")

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[int]:
        return pulumi.get(self, "radio_id")

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[int]:
        return pulumi.get(self, "rts_threshold")

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[str]:
        return pulumi.get(self, "sam_bssid")

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[str]:
        return pulumi.get(self, "sam_captive_portal")

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_failure_string")

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_match_string")

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_password")

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_success_string")

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_test_url")

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_username")

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[str]:
        return pulumi.get(self, "sam_password")

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[int]:
        return pulumi.get(self, "sam_report_intv")

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[str]:
        return pulumi.get(self, "sam_security_type")

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_fqdn")

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_ip")

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_type")

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[str]:
        return pulumi.get(self, "sam_ssid")

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[str]:
        return pulumi.get(self, "sam_test")

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[str]:
        return pulumi.get(self, "sam_username")

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[str]:
        return pulumi.get(self, "short_guard_interval")

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[str]:
        return pulumi.get(self, "spectrum_analysis")

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[str]:
        return pulumi.get(self, "transmit_optimize")

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[str]:
        return pulumi.get(self, "vap_all")

    @property
    @pulumi.getter
    def vaps(self) -> Optional[Sequence['outputs.WirelessControllerWtpProfileRadio1Vap']]:
        return pulumi.get(self, "vaps")

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[str]:
        return pulumi.get(self, "wids_profile")

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[str]:
        return pulumi.get(self, "zero_wait_dfs")


@pulumi.output_type
class WirelessControllerWtpProfileRadio1Channel(dict):
    def __init__(__self__, *,
                 chan: Optional[str] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[str]:
        return pulumi.get(self, "chan")


@pulumi.output_type
class WirelessControllerWtpProfileRadio1Vap(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerWtpProfileRadio2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "airtimeFairness":
            suggest = "airtime_fairness"
        elif key == "apHandoff":
            suggest = "ap_handoff"
        elif key == "apSnifferAddr":
            suggest = "ap_sniffer_addr"
        elif key == "apSnifferBufsize":
            suggest = "ap_sniffer_bufsize"
        elif key == "apSnifferChan":
            suggest = "ap_sniffer_chan"
        elif key == "apSnifferCtl":
            suggest = "ap_sniffer_ctl"
        elif key == "apSnifferData":
            suggest = "ap_sniffer_data"
        elif key == "apSnifferMgmtBeacon":
            suggest = "ap_sniffer_mgmt_beacon"
        elif key == "apSnifferMgmtOther":
            suggest = "ap_sniffer_mgmt_other"
        elif key == "apSnifferMgmtProbe":
            suggest = "ap_sniffer_mgmt_probe"
        elif key == "arrpProfile":
            suggest = "arrp_profile"
        elif key == "autoPowerHigh":
            suggest = "auto_power_high"
        elif key == "autoPowerLevel":
            suggest = "auto_power_level"
        elif key == "autoPowerLow":
            suggest = "auto_power_low"
        elif key == "autoPowerTarget":
            suggest = "auto_power_target"
        elif key == "band5gType":
            suggest = "band5g_type"
        elif key == "bandwidthAdmissionControl":
            suggest = "bandwidth_admission_control"
        elif key == "bandwidthCapacity":
            suggest = "bandwidth_capacity"
        elif key == "beaconInterval":
            suggest = "beacon_interval"
        elif key == "bssColor":
            suggest = "bss_color"
        elif key == "bssColorMode":
            suggest = "bss_color_mode"
        elif key == "callAdmissionControl":
            suggest = "call_admission_control"
        elif key == "callCapacity":
            suggest = "call_capacity"
        elif key == "channelBonding":
            suggest = "channel_bonding"
        elif key == "channelUtilization":
            suggest = "channel_utilization"
        elif key == "drmaSensitivity":
            suggest = "drma_sensitivity"
        elif key == "fragThreshold":
            suggest = "frag_threshold"
        elif key == "frequencyHandoff":
            suggest = "frequency_handoff"
        elif key == "iperfProtocol":
            suggest = "iperf_protocol"
        elif key == "iperfServerPort":
            suggest = "iperf_server_port"
        elif key == "maxClients":
            suggest = "max_clients"
        elif key == "maxDistance":
            suggest = "max_distance"
        elif key == "optionalAntenna":
            suggest = "optional_antenna"
        elif key == "powerLevel":
            suggest = "power_level"
        elif key == "powerMode":
            suggest = "power_mode"
        elif key == "powerValue":
            suggest = "power_value"
        elif key == "powersaveOptimize":
            suggest = "powersave_optimize"
        elif key == "protectionMode":
            suggest = "protection_mode"
        elif key == "radioId":
            suggest = "radio_id"
        elif key == "rtsThreshold":
            suggest = "rts_threshold"
        elif key == "samBssid":
            suggest = "sam_bssid"
        elif key == "samCaptivePortal":
            suggest = "sam_captive_portal"
        elif key == "samCwpFailureString":
            suggest = "sam_cwp_failure_string"
        elif key == "samCwpMatchString":
            suggest = "sam_cwp_match_string"
        elif key == "samCwpPassword":
            suggest = "sam_cwp_password"
        elif key == "samCwpSuccessString":
            suggest = "sam_cwp_success_string"
        elif key == "samCwpTestUrl":
            suggest = "sam_cwp_test_url"
        elif key == "samCwpUsername":
            suggest = "sam_cwp_username"
        elif key == "samPassword":
            suggest = "sam_password"
        elif key == "samReportIntv":
            suggest = "sam_report_intv"
        elif key == "samSecurityType":
            suggest = "sam_security_type"
        elif key == "samServerFqdn":
            suggest = "sam_server_fqdn"
        elif key == "samServerIp":
            suggest = "sam_server_ip"
        elif key == "samServerType":
            suggest = "sam_server_type"
        elif key == "samSsid":
            suggest = "sam_ssid"
        elif key == "samTest":
            suggest = "sam_test"
        elif key == "samUsername":
            suggest = "sam_username"
        elif key == "shortGuardInterval":
            suggest = "short_guard_interval"
        elif key == "spectrumAnalysis":
            suggest = "spectrum_analysis"
        elif key == "transmitOptimize":
            suggest = "transmit_optimize"
        elif key == "vapAll":
            suggest = "vap_all"
        elif key == "widsProfile":
            suggest = "wids_profile"
        elif key == "zeroWaitDfs":
            suggest = "zero_wait_dfs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpProfileRadio2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpProfileRadio2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpProfileRadio2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 airtime_fairness: Optional[str] = None,
                 amsdu: Optional[str] = None,
                 ap_handoff: Optional[str] = None,
                 ap_sniffer_addr: Optional[str] = None,
                 ap_sniffer_bufsize: Optional[int] = None,
                 ap_sniffer_chan: Optional[int] = None,
                 ap_sniffer_ctl: Optional[str] = None,
                 ap_sniffer_data: Optional[str] = None,
                 ap_sniffer_mgmt_beacon: Optional[str] = None,
                 ap_sniffer_mgmt_other: Optional[str] = None,
                 ap_sniffer_mgmt_probe: Optional[str] = None,
                 arrp_profile: Optional[str] = None,
                 auto_power_high: Optional[int] = None,
                 auto_power_level: Optional[str] = None,
                 auto_power_low: Optional[int] = None,
                 auto_power_target: Optional[str] = None,
                 band: Optional[str] = None,
                 band5g_type: Optional[str] = None,
                 bandwidth_admission_control: Optional[str] = None,
                 bandwidth_capacity: Optional[int] = None,
                 beacon_interval: Optional[int] = None,
                 bss_color: Optional[int] = None,
                 bss_color_mode: Optional[str] = None,
                 call_admission_control: Optional[str] = None,
                 call_capacity: Optional[int] = None,
                 channel_bonding: Optional[str] = None,
                 channel_utilization: Optional[str] = None,
                 channels: Optional[Sequence['outputs.WirelessControllerWtpProfileRadio2Channel']] = None,
                 coexistence: Optional[str] = None,
                 darrp: Optional[str] = None,
                 drma: Optional[str] = None,
                 drma_sensitivity: Optional[str] = None,
                 dtim: Optional[int] = None,
                 frag_threshold: Optional[int] = None,
                 frequency_handoff: Optional[str] = None,
                 iperf_protocol: Optional[str] = None,
                 iperf_server_port: Optional[int] = None,
                 max_clients: Optional[int] = None,
                 max_distance: Optional[int] = None,
                 mode: Optional[str] = None,
                 n80211d: Optional[str] = None,
                 optional_antenna: Optional[str] = None,
                 power_level: Optional[int] = None,
                 power_mode: Optional[str] = None,
                 power_value: Optional[int] = None,
                 powersave_optimize: Optional[str] = None,
                 protection_mode: Optional[str] = None,
                 radio_id: Optional[int] = None,
                 rts_threshold: Optional[int] = None,
                 sam_bssid: Optional[str] = None,
                 sam_captive_portal: Optional[str] = None,
                 sam_cwp_failure_string: Optional[str] = None,
                 sam_cwp_match_string: Optional[str] = None,
                 sam_cwp_password: Optional[str] = None,
                 sam_cwp_success_string: Optional[str] = None,
                 sam_cwp_test_url: Optional[str] = None,
                 sam_cwp_username: Optional[str] = None,
                 sam_password: Optional[str] = None,
                 sam_report_intv: Optional[int] = None,
                 sam_security_type: Optional[str] = None,
                 sam_server_fqdn: Optional[str] = None,
                 sam_server_ip: Optional[str] = None,
                 sam_server_type: Optional[str] = None,
                 sam_ssid: Optional[str] = None,
                 sam_test: Optional[str] = None,
                 sam_username: Optional[str] = None,
                 short_guard_interval: Optional[str] = None,
                 spectrum_analysis: Optional[str] = None,
                 transmit_optimize: Optional[str] = None,
                 vap_all: Optional[str] = None,
                 vaps: Optional[Sequence['outputs.WirelessControllerWtpProfileRadio2Vap']] = None,
                 wids_profile: Optional[str] = None,
                 zero_wait_dfs: Optional[str] = None):
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[str]:
        return pulumi.get(self, "airtime_fairness")

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[str]:
        return pulumi.get(self, "amsdu")

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[str]:
        return pulumi.get(self, "ap_handoff")

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_addr")

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[int]:
        return pulumi.get(self, "ap_sniffer_bufsize")

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[int]:
        return pulumi.get(self, "ap_sniffer_chan")

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_ctl")

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_data")

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[str]:
        return pulumi.get(self, "arrp_profile")

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_high")

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_level")

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_low")

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_target")

    @property
    @pulumi.getter
    def band(self) -> Optional[str]:
        return pulumi.get(self, "band")

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[str]:
        return pulumi.get(self, "band5g_type")

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[str]:
        return pulumi.get(self, "bandwidth_admission_control")

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_capacity")

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[int]:
        return pulumi.get(self, "beacon_interval")

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[int]:
        return pulumi.get(self, "bss_color")

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[str]:
        return pulumi.get(self, "bss_color_mode")

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[str]:
        return pulumi.get(self, "call_admission_control")

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[int]:
        return pulumi.get(self, "call_capacity")

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[str]:
        return pulumi.get(self, "channel_bonding")

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[str]:
        return pulumi.get(self, "channel_utilization")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence['outputs.WirelessControllerWtpProfileRadio2Channel']]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[str]:
        return pulumi.get(self, "coexistence")

    @property
    @pulumi.getter
    def darrp(self) -> Optional[str]:
        return pulumi.get(self, "darrp")

    @property
    @pulumi.getter
    def drma(self) -> Optional[str]:
        return pulumi.get(self, "drma")

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[str]:
        return pulumi.get(self, "drma_sensitivity")

    @property
    @pulumi.getter
    def dtim(self) -> Optional[int]:
        return pulumi.get(self, "dtim")

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[int]:
        return pulumi.get(self, "frag_threshold")

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[str]:
        return pulumi.get(self, "frequency_handoff")

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[str]:
        return pulumi.get(self, "iperf_protocol")

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[int]:
        return pulumi.get(self, "iperf_server_port")

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[int]:
        return pulumi.get(self, "max_clients")

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[int]:
        return pulumi.get(self, "max_distance")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[str]:
        return pulumi.get(self, "n80211d")

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[str]:
        return pulumi.get(self, "optional_antenna")

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[int]:
        return pulumi.get(self, "power_level")

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[str]:
        return pulumi.get(self, "power_mode")

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[int]:
        return pulumi.get(self, "power_value")

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[str]:
        return pulumi.get(self, "powersave_optimize")

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "protection_mode")

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[int]:
        return pulumi.get(self, "radio_id")

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[int]:
        return pulumi.get(self, "rts_threshold")

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[str]:
        return pulumi.get(self, "sam_bssid")

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[str]:
        return pulumi.get(self, "sam_captive_portal")

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_failure_string")

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_match_string")

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_password")

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_success_string")

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_test_url")

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_username")

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[str]:
        return pulumi.get(self, "sam_password")

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[int]:
        return pulumi.get(self, "sam_report_intv")

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[str]:
        return pulumi.get(self, "sam_security_type")

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_fqdn")

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_ip")

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_type")

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[str]:
        return pulumi.get(self, "sam_ssid")

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[str]:
        return pulumi.get(self, "sam_test")

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[str]:
        return pulumi.get(self, "sam_username")

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[str]:
        return pulumi.get(self, "short_guard_interval")

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[str]:
        return pulumi.get(self, "spectrum_analysis")

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[str]:
        return pulumi.get(self, "transmit_optimize")

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[str]:
        return pulumi.get(self, "vap_all")

    @property
    @pulumi.getter
    def vaps(self) -> Optional[Sequence['outputs.WirelessControllerWtpProfileRadio2Vap']]:
        return pulumi.get(self, "vaps")

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[str]:
        return pulumi.get(self, "wids_profile")

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[str]:
        return pulumi.get(self, "zero_wait_dfs")


@pulumi.output_type
class WirelessControllerWtpProfileRadio2Channel(dict):
    def __init__(__self__, *,
                 chan: Optional[str] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[str]:
        return pulumi.get(self, "chan")


@pulumi.output_type
class WirelessControllerWtpProfileRadio2Vap(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerWtpProfileRadio3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "airtimeFairness":
            suggest = "airtime_fairness"
        elif key == "apHandoff":
            suggest = "ap_handoff"
        elif key == "apSnifferAddr":
            suggest = "ap_sniffer_addr"
        elif key == "apSnifferBufsize":
            suggest = "ap_sniffer_bufsize"
        elif key == "apSnifferChan":
            suggest = "ap_sniffer_chan"
        elif key == "apSnifferCtl":
            suggest = "ap_sniffer_ctl"
        elif key == "apSnifferData":
            suggest = "ap_sniffer_data"
        elif key == "apSnifferMgmtBeacon":
            suggest = "ap_sniffer_mgmt_beacon"
        elif key == "apSnifferMgmtOther":
            suggest = "ap_sniffer_mgmt_other"
        elif key == "apSnifferMgmtProbe":
            suggest = "ap_sniffer_mgmt_probe"
        elif key == "arrpProfile":
            suggest = "arrp_profile"
        elif key == "autoPowerHigh":
            suggest = "auto_power_high"
        elif key == "autoPowerLevel":
            suggest = "auto_power_level"
        elif key == "autoPowerLow":
            suggest = "auto_power_low"
        elif key == "autoPowerTarget":
            suggest = "auto_power_target"
        elif key == "band5gType":
            suggest = "band5g_type"
        elif key == "bandwidthAdmissionControl":
            suggest = "bandwidth_admission_control"
        elif key == "bandwidthCapacity":
            suggest = "bandwidth_capacity"
        elif key == "beaconInterval":
            suggest = "beacon_interval"
        elif key == "bssColor":
            suggest = "bss_color"
        elif key == "bssColorMode":
            suggest = "bss_color_mode"
        elif key == "callAdmissionControl":
            suggest = "call_admission_control"
        elif key == "callCapacity":
            suggest = "call_capacity"
        elif key == "channelBonding":
            suggest = "channel_bonding"
        elif key == "channelUtilization":
            suggest = "channel_utilization"
        elif key == "drmaSensitivity":
            suggest = "drma_sensitivity"
        elif key == "fragThreshold":
            suggest = "frag_threshold"
        elif key == "frequencyHandoff":
            suggest = "frequency_handoff"
        elif key == "iperfProtocol":
            suggest = "iperf_protocol"
        elif key == "iperfServerPort":
            suggest = "iperf_server_port"
        elif key == "maxClients":
            suggest = "max_clients"
        elif key == "maxDistance":
            suggest = "max_distance"
        elif key == "optionalAntenna":
            suggest = "optional_antenna"
        elif key == "powerLevel":
            suggest = "power_level"
        elif key == "powerMode":
            suggest = "power_mode"
        elif key == "powerValue":
            suggest = "power_value"
        elif key == "powersaveOptimize":
            suggest = "powersave_optimize"
        elif key == "protectionMode":
            suggest = "protection_mode"
        elif key == "rtsThreshold":
            suggest = "rts_threshold"
        elif key == "samBssid":
            suggest = "sam_bssid"
        elif key == "samCaptivePortal":
            suggest = "sam_captive_portal"
        elif key == "samCwpFailureString":
            suggest = "sam_cwp_failure_string"
        elif key == "samCwpMatchString":
            suggest = "sam_cwp_match_string"
        elif key == "samCwpPassword":
            suggest = "sam_cwp_password"
        elif key == "samCwpSuccessString":
            suggest = "sam_cwp_success_string"
        elif key == "samCwpTestUrl":
            suggest = "sam_cwp_test_url"
        elif key == "samCwpUsername":
            suggest = "sam_cwp_username"
        elif key == "samPassword":
            suggest = "sam_password"
        elif key == "samReportIntv":
            suggest = "sam_report_intv"
        elif key == "samSecurityType":
            suggest = "sam_security_type"
        elif key == "samServerFqdn":
            suggest = "sam_server_fqdn"
        elif key == "samServerIp":
            suggest = "sam_server_ip"
        elif key == "samServerType":
            suggest = "sam_server_type"
        elif key == "samSsid":
            suggest = "sam_ssid"
        elif key == "samTest":
            suggest = "sam_test"
        elif key == "samUsername":
            suggest = "sam_username"
        elif key == "shortGuardInterval":
            suggest = "short_guard_interval"
        elif key == "spectrumAnalysis":
            suggest = "spectrum_analysis"
        elif key == "transmitOptimize":
            suggest = "transmit_optimize"
        elif key == "vapAll":
            suggest = "vap_all"
        elif key == "widsProfile":
            suggest = "wids_profile"
        elif key == "zeroWaitDfs":
            suggest = "zero_wait_dfs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpProfileRadio3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpProfileRadio3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpProfileRadio3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 airtime_fairness: Optional[str] = None,
                 amsdu: Optional[str] = None,
                 ap_handoff: Optional[str] = None,
                 ap_sniffer_addr: Optional[str] = None,
                 ap_sniffer_bufsize: Optional[int] = None,
                 ap_sniffer_chan: Optional[int] = None,
                 ap_sniffer_ctl: Optional[str] = None,
                 ap_sniffer_data: Optional[str] = None,
                 ap_sniffer_mgmt_beacon: Optional[str] = None,
                 ap_sniffer_mgmt_other: Optional[str] = None,
                 ap_sniffer_mgmt_probe: Optional[str] = None,
                 arrp_profile: Optional[str] = None,
                 auto_power_high: Optional[int] = None,
                 auto_power_level: Optional[str] = None,
                 auto_power_low: Optional[int] = None,
                 auto_power_target: Optional[str] = None,
                 band: Optional[str] = None,
                 band5g_type: Optional[str] = None,
                 bandwidth_admission_control: Optional[str] = None,
                 bandwidth_capacity: Optional[int] = None,
                 beacon_interval: Optional[int] = None,
                 bss_color: Optional[int] = None,
                 bss_color_mode: Optional[str] = None,
                 call_admission_control: Optional[str] = None,
                 call_capacity: Optional[int] = None,
                 channel_bonding: Optional[str] = None,
                 channel_utilization: Optional[str] = None,
                 channels: Optional[Sequence['outputs.WirelessControllerWtpProfileRadio3Channel']] = None,
                 coexistence: Optional[str] = None,
                 darrp: Optional[str] = None,
                 drma: Optional[str] = None,
                 drma_sensitivity: Optional[str] = None,
                 dtim: Optional[int] = None,
                 frag_threshold: Optional[int] = None,
                 frequency_handoff: Optional[str] = None,
                 iperf_protocol: Optional[str] = None,
                 iperf_server_port: Optional[int] = None,
                 max_clients: Optional[int] = None,
                 max_distance: Optional[int] = None,
                 mode: Optional[str] = None,
                 n80211d: Optional[str] = None,
                 optional_antenna: Optional[str] = None,
                 power_level: Optional[int] = None,
                 power_mode: Optional[str] = None,
                 power_value: Optional[int] = None,
                 powersave_optimize: Optional[str] = None,
                 protection_mode: Optional[str] = None,
                 rts_threshold: Optional[int] = None,
                 sam_bssid: Optional[str] = None,
                 sam_captive_portal: Optional[str] = None,
                 sam_cwp_failure_string: Optional[str] = None,
                 sam_cwp_match_string: Optional[str] = None,
                 sam_cwp_password: Optional[str] = None,
                 sam_cwp_success_string: Optional[str] = None,
                 sam_cwp_test_url: Optional[str] = None,
                 sam_cwp_username: Optional[str] = None,
                 sam_password: Optional[str] = None,
                 sam_report_intv: Optional[int] = None,
                 sam_security_type: Optional[str] = None,
                 sam_server_fqdn: Optional[str] = None,
                 sam_server_ip: Optional[str] = None,
                 sam_server_type: Optional[str] = None,
                 sam_ssid: Optional[str] = None,
                 sam_test: Optional[str] = None,
                 sam_username: Optional[str] = None,
                 short_guard_interval: Optional[str] = None,
                 spectrum_analysis: Optional[str] = None,
                 transmit_optimize: Optional[str] = None,
                 vap_all: Optional[str] = None,
                 vaps: Optional[Sequence['outputs.WirelessControllerWtpProfileRadio3Vap']] = None,
                 wids_profile: Optional[str] = None,
                 zero_wait_dfs: Optional[str] = None):
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[str]:
        return pulumi.get(self, "airtime_fairness")

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[str]:
        return pulumi.get(self, "amsdu")

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[str]:
        return pulumi.get(self, "ap_handoff")

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_addr")

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[int]:
        return pulumi.get(self, "ap_sniffer_bufsize")

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[int]:
        return pulumi.get(self, "ap_sniffer_chan")

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_ctl")

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_data")

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[str]:
        return pulumi.get(self, "arrp_profile")

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_high")

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_level")

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_low")

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_target")

    @property
    @pulumi.getter
    def band(self) -> Optional[str]:
        return pulumi.get(self, "band")

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[str]:
        return pulumi.get(self, "band5g_type")

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[str]:
        return pulumi.get(self, "bandwidth_admission_control")

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_capacity")

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[int]:
        return pulumi.get(self, "beacon_interval")

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[int]:
        return pulumi.get(self, "bss_color")

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[str]:
        return pulumi.get(self, "bss_color_mode")

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[str]:
        return pulumi.get(self, "call_admission_control")

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[int]:
        return pulumi.get(self, "call_capacity")

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[str]:
        return pulumi.get(self, "channel_bonding")

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[str]:
        return pulumi.get(self, "channel_utilization")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence['outputs.WirelessControllerWtpProfileRadio3Channel']]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[str]:
        return pulumi.get(self, "coexistence")

    @property
    @pulumi.getter
    def darrp(self) -> Optional[str]:
        return pulumi.get(self, "darrp")

    @property
    @pulumi.getter
    def drma(self) -> Optional[str]:
        return pulumi.get(self, "drma")

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[str]:
        return pulumi.get(self, "drma_sensitivity")

    @property
    @pulumi.getter
    def dtim(self) -> Optional[int]:
        return pulumi.get(self, "dtim")

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[int]:
        return pulumi.get(self, "frag_threshold")

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[str]:
        return pulumi.get(self, "frequency_handoff")

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[str]:
        return pulumi.get(self, "iperf_protocol")

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[int]:
        return pulumi.get(self, "iperf_server_port")

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[int]:
        return pulumi.get(self, "max_clients")

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[int]:
        return pulumi.get(self, "max_distance")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[str]:
        return pulumi.get(self, "n80211d")

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[str]:
        return pulumi.get(self, "optional_antenna")

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[int]:
        return pulumi.get(self, "power_level")

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[str]:
        return pulumi.get(self, "power_mode")

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[int]:
        return pulumi.get(self, "power_value")

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[str]:
        return pulumi.get(self, "powersave_optimize")

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "protection_mode")

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[int]:
        return pulumi.get(self, "rts_threshold")

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[str]:
        return pulumi.get(self, "sam_bssid")

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[str]:
        return pulumi.get(self, "sam_captive_portal")

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_failure_string")

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_match_string")

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_password")

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_success_string")

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_test_url")

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_username")

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[str]:
        return pulumi.get(self, "sam_password")

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[int]:
        return pulumi.get(self, "sam_report_intv")

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[str]:
        return pulumi.get(self, "sam_security_type")

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_fqdn")

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_ip")

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_type")

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[str]:
        return pulumi.get(self, "sam_ssid")

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[str]:
        return pulumi.get(self, "sam_test")

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[str]:
        return pulumi.get(self, "sam_username")

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[str]:
        return pulumi.get(self, "short_guard_interval")

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[str]:
        return pulumi.get(self, "spectrum_analysis")

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[str]:
        return pulumi.get(self, "transmit_optimize")

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[str]:
        return pulumi.get(self, "vap_all")

    @property
    @pulumi.getter
    def vaps(self) -> Optional[Sequence['outputs.WirelessControllerWtpProfileRadio3Vap']]:
        return pulumi.get(self, "vaps")

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[str]:
        return pulumi.get(self, "wids_profile")

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[str]:
        return pulumi.get(self, "zero_wait_dfs")


@pulumi.output_type
class WirelessControllerWtpProfileRadio3Channel(dict):
    def __init__(__self__, *,
                 chan: Optional[str] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[str]:
        return pulumi.get(self, "chan")


@pulumi.output_type
class WirelessControllerWtpProfileRadio3Vap(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerWtpProfileRadio4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "airtimeFairness":
            suggest = "airtime_fairness"
        elif key == "apHandoff":
            suggest = "ap_handoff"
        elif key == "apSnifferAddr":
            suggest = "ap_sniffer_addr"
        elif key == "apSnifferBufsize":
            suggest = "ap_sniffer_bufsize"
        elif key == "apSnifferChan":
            suggest = "ap_sniffer_chan"
        elif key == "apSnifferCtl":
            suggest = "ap_sniffer_ctl"
        elif key == "apSnifferData":
            suggest = "ap_sniffer_data"
        elif key == "apSnifferMgmtBeacon":
            suggest = "ap_sniffer_mgmt_beacon"
        elif key == "apSnifferMgmtOther":
            suggest = "ap_sniffer_mgmt_other"
        elif key == "apSnifferMgmtProbe":
            suggest = "ap_sniffer_mgmt_probe"
        elif key == "arrpProfile":
            suggest = "arrp_profile"
        elif key == "autoPowerHigh":
            suggest = "auto_power_high"
        elif key == "autoPowerLevel":
            suggest = "auto_power_level"
        elif key == "autoPowerLow":
            suggest = "auto_power_low"
        elif key == "autoPowerTarget":
            suggest = "auto_power_target"
        elif key == "band5gType":
            suggest = "band5g_type"
        elif key == "bandwidthAdmissionControl":
            suggest = "bandwidth_admission_control"
        elif key == "bandwidthCapacity":
            suggest = "bandwidth_capacity"
        elif key == "beaconInterval":
            suggest = "beacon_interval"
        elif key == "bssColor":
            suggest = "bss_color"
        elif key == "bssColorMode":
            suggest = "bss_color_mode"
        elif key == "callAdmissionControl":
            suggest = "call_admission_control"
        elif key == "callCapacity":
            suggest = "call_capacity"
        elif key == "channelBonding":
            suggest = "channel_bonding"
        elif key == "channelUtilization":
            suggest = "channel_utilization"
        elif key == "drmaSensitivity":
            suggest = "drma_sensitivity"
        elif key == "fragThreshold":
            suggest = "frag_threshold"
        elif key == "frequencyHandoff":
            suggest = "frequency_handoff"
        elif key == "iperfProtocol":
            suggest = "iperf_protocol"
        elif key == "iperfServerPort":
            suggest = "iperf_server_port"
        elif key == "maxClients":
            suggest = "max_clients"
        elif key == "maxDistance":
            suggest = "max_distance"
        elif key == "optionalAntenna":
            suggest = "optional_antenna"
        elif key == "powerLevel":
            suggest = "power_level"
        elif key == "powerMode":
            suggest = "power_mode"
        elif key == "powerValue":
            suggest = "power_value"
        elif key == "powersaveOptimize":
            suggest = "powersave_optimize"
        elif key == "protectionMode":
            suggest = "protection_mode"
        elif key == "rtsThreshold":
            suggest = "rts_threshold"
        elif key == "samBssid":
            suggest = "sam_bssid"
        elif key == "samCaptivePortal":
            suggest = "sam_captive_portal"
        elif key == "samCwpFailureString":
            suggest = "sam_cwp_failure_string"
        elif key == "samCwpMatchString":
            suggest = "sam_cwp_match_string"
        elif key == "samCwpPassword":
            suggest = "sam_cwp_password"
        elif key == "samCwpSuccessString":
            suggest = "sam_cwp_success_string"
        elif key == "samCwpTestUrl":
            suggest = "sam_cwp_test_url"
        elif key == "samCwpUsername":
            suggest = "sam_cwp_username"
        elif key == "samPassword":
            suggest = "sam_password"
        elif key == "samReportIntv":
            suggest = "sam_report_intv"
        elif key == "samSecurityType":
            suggest = "sam_security_type"
        elif key == "samServerFqdn":
            suggest = "sam_server_fqdn"
        elif key == "samServerIp":
            suggest = "sam_server_ip"
        elif key == "samServerType":
            suggest = "sam_server_type"
        elif key == "samSsid":
            suggest = "sam_ssid"
        elif key == "samTest":
            suggest = "sam_test"
        elif key == "samUsername":
            suggest = "sam_username"
        elif key == "shortGuardInterval":
            suggest = "short_guard_interval"
        elif key == "spectrumAnalysis":
            suggest = "spectrum_analysis"
        elif key == "transmitOptimize":
            suggest = "transmit_optimize"
        elif key == "vapAll":
            suggest = "vap_all"
        elif key == "widsProfile":
            suggest = "wids_profile"
        elif key == "zeroWaitDfs":
            suggest = "zero_wait_dfs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpProfileRadio4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpProfileRadio4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpProfileRadio4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 airtime_fairness: Optional[str] = None,
                 amsdu: Optional[str] = None,
                 ap_handoff: Optional[str] = None,
                 ap_sniffer_addr: Optional[str] = None,
                 ap_sniffer_bufsize: Optional[int] = None,
                 ap_sniffer_chan: Optional[int] = None,
                 ap_sniffer_ctl: Optional[str] = None,
                 ap_sniffer_data: Optional[str] = None,
                 ap_sniffer_mgmt_beacon: Optional[str] = None,
                 ap_sniffer_mgmt_other: Optional[str] = None,
                 ap_sniffer_mgmt_probe: Optional[str] = None,
                 arrp_profile: Optional[str] = None,
                 auto_power_high: Optional[int] = None,
                 auto_power_level: Optional[str] = None,
                 auto_power_low: Optional[int] = None,
                 auto_power_target: Optional[str] = None,
                 band: Optional[str] = None,
                 band5g_type: Optional[str] = None,
                 bandwidth_admission_control: Optional[str] = None,
                 bandwidth_capacity: Optional[int] = None,
                 beacon_interval: Optional[int] = None,
                 bss_color: Optional[int] = None,
                 bss_color_mode: Optional[str] = None,
                 call_admission_control: Optional[str] = None,
                 call_capacity: Optional[int] = None,
                 channel_bonding: Optional[str] = None,
                 channel_utilization: Optional[str] = None,
                 channels: Optional[Sequence['outputs.WirelessControllerWtpProfileRadio4Channel']] = None,
                 coexistence: Optional[str] = None,
                 darrp: Optional[str] = None,
                 drma: Optional[str] = None,
                 drma_sensitivity: Optional[str] = None,
                 dtim: Optional[int] = None,
                 frag_threshold: Optional[int] = None,
                 frequency_handoff: Optional[str] = None,
                 iperf_protocol: Optional[str] = None,
                 iperf_server_port: Optional[int] = None,
                 max_clients: Optional[int] = None,
                 max_distance: Optional[int] = None,
                 mode: Optional[str] = None,
                 n80211d: Optional[str] = None,
                 optional_antenna: Optional[str] = None,
                 power_level: Optional[int] = None,
                 power_mode: Optional[str] = None,
                 power_value: Optional[int] = None,
                 powersave_optimize: Optional[str] = None,
                 protection_mode: Optional[str] = None,
                 rts_threshold: Optional[int] = None,
                 sam_bssid: Optional[str] = None,
                 sam_captive_portal: Optional[str] = None,
                 sam_cwp_failure_string: Optional[str] = None,
                 sam_cwp_match_string: Optional[str] = None,
                 sam_cwp_password: Optional[str] = None,
                 sam_cwp_success_string: Optional[str] = None,
                 sam_cwp_test_url: Optional[str] = None,
                 sam_cwp_username: Optional[str] = None,
                 sam_password: Optional[str] = None,
                 sam_report_intv: Optional[int] = None,
                 sam_security_type: Optional[str] = None,
                 sam_server_fqdn: Optional[str] = None,
                 sam_server_ip: Optional[str] = None,
                 sam_server_type: Optional[str] = None,
                 sam_ssid: Optional[str] = None,
                 sam_test: Optional[str] = None,
                 sam_username: Optional[str] = None,
                 short_guard_interval: Optional[str] = None,
                 spectrum_analysis: Optional[str] = None,
                 transmit_optimize: Optional[str] = None,
                 vap_all: Optional[str] = None,
                 vaps: Optional[Sequence['outputs.WirelessControllerWtpProfileRadio4Vap']] = None,
                 wids_profile: Optional[str] = None,
                 zero_wait_dfs: Optional[str] = None):
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[str]:
        return pulumi.get(self, "airtime_fairness")

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[str]:
        return pulumi.get(self, "amsdu")

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[str]:
        return pulumi.get(self, "ap_handoff")

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_addr")

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[int]:
        return pulumi.get(self, "ap_sniffer_bufsize")

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[int]:
        return pulumi.get(self, "ap_sniffer_chan")

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_ctl")

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_data")

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[str]:
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[str]:
        return pulumi.get(self, "arrp_profile")

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_high")

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_level")

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_low")

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_target")

    @property
    @pulumi.getter
    def band(self) -> Optional[str]:
        return pulumi.get(self, "band")

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[str]:
        return pulumi.get(self, "band5g_type")

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[str]:
        return pulumi.get(self, "bandwidth_admission_control")

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_capacity")

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[int]:
        return pulumi.get(self, "beacon_interval")

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[int]:
        return pulumi.get(self, "bss_color")

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[str]:
        return pulumi.get(self, "bss_color_mode")

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[str]:
        return pulumi.get(self, "call_admission_control")

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[int]:
        return pulumi.get(self, "call_capacity")

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[str]:
        return pulumi.get(self, "channel_bonding")

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[str]:
        return pulumi.get(self, "channel_utilization")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence['outputs.WirelessControllerWtpProfileRadio4Channel']]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[str]:
        return pulumi.get(self, "coexistence")

    @property
    @pulumi.getter
    def darrp(self) -> Optional[str]:
        return pulumi.get(self, "darrp")

    @property
    @pulumi.getter
    def drma(self) -> Optional[str]:
        return pulumi.get(self, "drma")

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[str]:
        return pulumi.get(self, "drma_sensitivity")

    @property
    @pulumi.getter
    def dtim(self) -> Optional[int]:
        return pulumi.get(self, "dtim")

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[int]:
        return pulumi.get(self, "frag_threshold")

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[str]:
        return pulumi.get(self, "frequency_handoff")

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[str]:
        return pulumi.get(self, "iperf_protocol")

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[int]:
        return pulumi.get(self, "iperf_server_port")

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[int]:
        return pulumi.get(self, "max_clients")

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[int]:
        return pulumi.get(self, "max_distance")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[str]:
        return pulumi.get(self, "n80211d")

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[str]:
        return pulumi.get(self, "optional_antenna")

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[int]:
        return pulumi.get(self, "power_level")

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[str]:
        return pulumi.get(self, "power_mode")

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[int]:
        return pulumi.get(self, "power_value")

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[str]:
        return pulumi.get(self, "powersave_optimize")

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "protection_mode")

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[int]:
        return pulumi.get(self, "rts_threshold")

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[str]:
        return pulumi.get(self, "sam_bssid")

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[str]:
        return pulumi.get(self, "sam_captive_portal")

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_failure_string")

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_match_string")

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_password")

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_success_string")

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_test_url")

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[str]:
        return pulumi.get(self, "sam_cwp_username")

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[str]:
        return pulumi.get(self, "sam_password")

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[int]:
        return pulumi.get(self, "sam_report_intv")

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[str]:
        return pulumi.get(self, "sam_security_type")

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_fqdn")

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_ip")

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[str]:
        return pulumi.get(self, "sam_server_type")

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[str]:
        return pulumi.get(self, "sam_ssid")

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[str]:
        return pulumi.get(self, "sam_test")

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[str]:
        return pulumi.get(self, "sam_username")

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[str]:
        return pulumi.get(self, "short_guard_interval")

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[str]:
        return pulumi.get(self, "spectrum_analysis")

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[str]:
        return pulumi.get(self, "transmit_optimize")

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[str]:
        return pulumi.get(self, "vap_all")

    @property
    @pulumi.getter
    def vaps(self) -> Optional[Sequence['outputs.WirelessControllerWtpProfileRadio4Vap']]:
        return pulumi.get(self, "vaps")

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[str]:
        return pulumi.get(self, "wids_profile")

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[str]:
        return pulumi.get(self, "zero_wait_dfs")


@pulumi.output_type
class WirelessControllerWtpProfileRadio4Channel(dict):
    def __init__(__self__, *,
                 chan: Optional[str] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[str]:
        return pulumi.get(self, "chan")


@pulumi.output_type
class WirelessControllerWtpProfileRadio4Vap(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerWtpProfileSplitTunnelingAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destIp":
            suggest = "dest_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpProfileSplitTunnelingAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpProfileSplitTunnelingAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpProfileSplitTunnelingAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_ip: Optional[str] = None,
                 id: Optional[int] = None):
        if dest_ip is not None:
            pulumi.set(__self__, "dest_ip", dest_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> Optional[str]:
        return pulumi.get(self, "dest_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class WirelessControllerWtpRadio1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoPowerHigh":
            suggest = "auto_power_high"
        elif key == "autoPowerLevel":
            suggest = "auto_power_level"
        elif key == "autoPowerLow":
            suggest = "auto_power_low"
        elif key == "autoPowerTarget":
            suggest = "auto_power_target"
        elif key == "drmaManualMode":
            suggest = "drma_manual_mode"
        elif key == "overrideAnalysis":
            suggest = "override_analysis"
        elif key == "overrideBand":
            suggest = "override_band"
        elif key == "overrideChannel":
            suggest = "override_channel"
        elif key == "overrideTxpower":
            suggest = "override_txpower"
        elif key == "overrideVaps":
            suggest = "override_vaps"
        elif key == "powerLevel":
            suggest = "power_level"
        elif key == "powerMode":
            suggest = "power_mode"
        elif key == "powerValue":
            suggest = "power_value"
        elif key == "radioId":
            suggest = "radio_id"
        elif key == "spectrumAnalysis":
            suggest = "spectrum_analysis"
        elif key == "vapAll":
            suggest = "vap_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpRadio1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpRadio1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpRadio1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_power_high: Optional[int] = None,
                 auto_power_level: Optional[str] = None,
                 auto_power_low: Optional[int] = None,
                 auto_power_target: Optional[str] = None,
                 band: Optional[str] = None,
                 channels: Optional[Sequence['outputs.WirelessControllerWtpRadio1Channel']] = None,
                 drma_manual_mode: Optional[str] = None,
                 override_analysis: Optional[str] = None,
                 override_band: Optional[str] = None,
                 override_channel: Optional[str] = None,
                 override_txpower: Optional[str] = None,
                 override_vaps: Optional[str] = None,
                 power_level: Optional[int] = None,
                 power_mode: Optional[str] = None,
                 power_value: Optional[int] = None,
                 radio_id: Optional[int] = None,
                 spectrum_analysis: Optional[str] = None,
                 vap_all: Optional[str] = None,
                 vaps: Optional[Sequence['outputs.WirelessControllerWtpRadio1Vap']] = None):
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_high")

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_level")

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_low")

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_target")

    @property
    @pulumi.getter
    def band(self) -> Optional[str]:
        return pulumi.get(self, "band")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence['outputs.WirelessControllerWtpRadio1Channel']]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[str]:
        return pulumi.get(self, "drma_manual_mode")

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[str]:
        return pulumi.get(self, "override_analysis")

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[str]:
        return pulumi.get(self, "override_band")

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[str]:
        return pulumi.get(self, "override_channel")

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[str]:
        return pulumi.get(self, "override_txpower")

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[str]:
        return pulumi.get(self, "override_vaps")

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[int]:
        return pulumi.get(self, "power_level")

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[str]:
        return pulumi.get(self, "power_mode")

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[int]:
        return pulumi.get(self, "power_value")

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[int]:
        return pulumi.get(self, "radio_id")

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[str]:
        return pulumi.get(self, "spectrum_analysis")

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[str]:
        return pulumi.get(self, "vap_all")

    @property
    @pulumi.getter
    def vaps(self) -> Optional[Sequence['outputs.WirelessControllerWtpRadio1Vap']]:
        return pulumi.get(self, "vaps")


@pulumi.output_type
class WirelessControllerWtpRadio1Channel(dict):
    def __init__(__self__, *,
                 chan: Optional[str] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[str]:
        return pulumi.get(self, "chan")


@pulumi.output_type
class WirelessControllerWtpRadio1Vap(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerWtpRadio2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoPowerHigh":
            suggest = "auto_power_high"
        elif key == "autoPowerLevel":
            suggest = "auto_power_level"
        elif key == "autoPowerLow":
            suggest = "auto_power_low"
        elif key == "autoPowerTarget":
            suggest = "auto_power_target"
        elif key == "drmaManualMode":
            suggest = "drma_manual_mode"
        elif key == "overrideAnalysis":
            suggest = "override_analysis"
        elif key == "overrideBand":
            suggest = "override_band"
        elif key == "overrideChannel":
            suggest = "override_channel"
        elif key == "overrideTxpower":
            suggest = "override_txpower"
        elif key == "overrideVaps":
            suggest = "override_vaps"
        elif key == "powerLevel":
            suggest = "power_level"
        elif key == "powerMode":
            suggest = "power_mode"
        elif key == "powerValue":
            suggest = "power_value"
        elif key == "radioId":
            suggest = "radio_id"
        elif key == "spectrumAnalysis":
            suggest = "spectrum_analysis"
        elif key == "vapAll":
            suggest = "vap_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpRadio2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpRadio2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpRadio2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_power_high: Optional[int] = None,
                 auto_power_level: Optional[str] = None,
                 auto_power_low: Optional[int] = None,
                 auto_power_target: Optional[str] = None,
                 band: Optional[str] = None,
                 channels: Optional[Sequence['outputs.WirelessControllerWtpRadio2Channel']] = None,
                 drma_manual_mode: Optional[str] = None,
                 override_analysis: Optional[str] = None,
                 override_band: Optional[str] = None,
                 override_channel: Optional[str] = None,
                 override_txpower: Optional[str] = None,
                 override_vaps: Optional[str] = None,
                 power_level: Optional[int] = None,
                 power_mode: Optional[str] = None,
                 power_value: Optional[int] = None,
                 radio_id: Optional[int] = None,
                 spectrum_analysis: Optional[str] = None,
                 vap_all: Optional[str] = None,
                 vaps: Optional[Sequence['outputs.WirelessControllerWtpRadio2Vap']] = None):
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_high")

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_level")

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_low")

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_target")

    @property
    @pulumi.getter
    def band(self) -> Optional[str]:
        return pulumi.get(self, "band")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence['outputs.WirelessControllerWtpRadio2Channel']]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[str]:
        return pulumi.get(self, "drma_manual_mode")

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[str]:
        return pulumi.get(self, "override_analysis")

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[str]:
        return pulumi.get(self, "override_band")

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[str]:
        return pulumi.get(self, "override_channel")

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[str]:
        return pulumi.get(self, "override_txpower")

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[str]:
        return pulumi.get(self, "override_vaps")

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[int]:
        return pulumi.get(self, "power_level")

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[str]:
        return pulumi.get(self, "power_mode")

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[int]:
        return pulumi.get(self, "power_value")

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[int]:
        return pulumi.get(self, "radio_id")

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[str]:
        return pulumi.get(self, "spectrum_analysis")

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[str]:
        return pulumi.get(self, "vap_all")

    @property
    @pulumi.getter
    def vaps(self) -> Optional[Sequence['outputs.WirelessControllerWtpRadio2Vap']]:
        return pulumi.get(self, "vaps")


@pulumi.output_type
class WirelessControllerWtpRadio2Channel(dict):
    def __init__(__self__, *,
                 chan: Optional[str] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[str]:
        return pulumi.get(self, "chan")


@pulumi.output_type
class WirelessControllerWtpRadio2Vap(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerWtpRadio3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoPowerHigh":
            suggest = "auto_power_high"
        elif key == "autoPowerLevel":
            suggest = "auto_power_level"
        elif key == "autoPowerLow":
            suggest = "auto_power_low"
        elif key == "autoPowerTarget":
            suggest = "auto_power_target"
        elif key == "drmaManualMode":
            suggest = "drma_manual_mode"
        elif key == "overrideAnalysis":
            suggest = "override_analysis"
        elif key == "overrideBand":
            suggest = "override_band"
        elif key == "overrideChannel":
            suggest = "override_channel"
        elif key == "overrideTxpower":
            suggest = "override_txpower"
        elif key == "overrideVaps":
            suggest = "override_vaps"
        elif key == "powerLevel":
            suggest = "power_level"
        elif key == "powerMode":
            suggest = "power_mode"
        elif key == "powerValue":
            suggest = "power_value"
        elif key == "spectrumAnalysis":
            suggest = "spectrum_analysis"
        elif key == "vapAll":
            suggest = "vap_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpRadio3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpRadio3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpRadio3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_power_high: Optional[int] = None,
                 auto_power_level: Optional[str] = None,
                 auto_power_low: Optional[int] = None,
                 auto_power_target: Optional[str] = None,
                 band: Optional[str] = None,
                 channels: Optional[Sequence['outputs.WirelessControllerWtpRadio3Channel']] = None,
                 drma_manual_mode: Optional[str] = None,
                 override_analysis: Optional[str] = None,
                 override_band: Optional[str] = None,
                 override_channel: Optional[str] = None,
                 override_txpower: Optional[str] = None,
                 override_vaps: Optional[str] = None,
                 power_level: Optional[int] = None,
                 power_mode: Optional[str] = None,
                 power_value: Optional[int] = None,
                 spectrum_analysis: Optional[str] = None,
                 vap_all: Optional[str] = None,
                 vaps: Optional[Sequence['outputs.WirelessControllerWtpRadio3Vap']] = None):
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_high")

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_level")

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_low")

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_target")

    @property
    @pulumi.getter
    def band(self) -> Optional[str]:
        return pulumi.get(self, "band")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence['outputs.WirelessControllerWtpRadio3Channel']]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[str]:
        return pulumi.get(self, "drma_manual_mode")

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[str]:
        return pulumi.get(self, "override_analysis")

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[str]:
        return pulumi.get(self, "override_band")

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[str]:
        return pulumi.get(self, "override_channel")

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[str]:
        return pulumi.get(self, "override_txpower")

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[str]:
        return pulumi.get(self, "override_vaps")

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[int]:
        return pulumi.get(self, "power_level")

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[str]:
        return pulumi.get(self, "power_mode")

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[int]:
        return pulumi.get(self, "power_value")

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[str]:
        return pulumi.get(self, "spectrum_analysis")

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[str]:
        return pulumi.get(self, "vap_all")

    @property
    @pulumi.getter
    def vaps(self) -> Optional[Sequence['outputs.WirelessControllerWtpRadio3Vap']]:
        return pulumi.get(self, "vaps")


@pulumi.output_type
class WirelessControllerWtpRadio3Channel(dict):
    def __init__(__self__, *,
                 chan: Optional[str] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[str]:
        return pulumi.get(self, "chan")


@pulumi.output_type
class WirelessControllerWtpRadio3Vap(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerWtpRadio4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoPowerHigh":
            suggest = "auto_power_high"
        elif key == "autoPowerLevel":
            suggest = "auto_power_level"
        elif key == "autoPowerLow":
            suggest = "auto_power_low"
        elif key == "autoPowerTarget":
            suggest = "auto_power_target"
        elif key == "drmaManualMode":
            suggest = "drma_manual_mode"
        elif key == "overrideAnalysis":
            suggest = "override_analysis"
        elif key == "overrideBand":
            suggest = "override_band"
        elif key == "overrideChannel":
            suggest = "override_channel"
        elif key == "overrideTxpower":
            suggest = "override_txpower"
        elif key == "overrideVaps":
            suggest = "override_vaps"
        elif key == "powerLevel":
            suggest = "power_level"
        elif key == "powerMode":
            suggest = "power_mode"
        elif key == "powerValue":
            suggest = "power_value"
        elif key == "spectrumAnalysis":
            suggest = "spectrum_analysis"
        elif key == "vapAll":
            suggest = "vap_all"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpRadio4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpRadio4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpRadio4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_power_high: Optional[int] = None,
                 auto_power_level: Optional[str] = None,
                 auto_power_low: Optional[int] = None,
                 auto_power_target: Optional[str] = None,
                 band: Optional[str] = None,
                 channels: Optional[Sequence['outputs.WirelessControllerWtpRadio4Channel']] = None,
                 drma_manual_mode: Optional[str] = None,
                 override_analysis: Optional[str] = None,
                 override_band: Optional[str] = None,
                 override_channel: Optional[str] = None,
                 override_txpower: Optional[str] = None,
                 override_vaps: Optional[str] = None,
                 power_level: Optional[int] = None,
                 power_mode: Optional[str] = None,
                 power_value: Optional[int] = None,
                 spectrum_analysis: Optional[str] = None,
                 vap_all: Optional[str] = None,
                 vaps: Optional[Sequence['outputs.WirelessControllerWtpRadio4Vap']] = None):
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_high")

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_level")

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[int]:
        return pulumi.get(self, "auto_power_low")

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[str]:
        return pulumi.get(self, "auto_power_target")

    @property
    @pulumi.getter
    def band(self) -> Optional[str]:
        return pulumi.get(self, "band")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence['outputs.WirelessControllerWtpRadio4Channel']]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[str]:
        return pulumi.get(self, "drma_manual_mode")

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[str]:
        return pulumi.get(self, "override_analysis")

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[str]:
        return pulumi.get(self, "override_band")

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[str]:
        return pulumi.get(self, "override_channel")

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[str]:
        return pulumi.get(self, "override_txpower")

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[str]:
        return pulumi.get(self, "override_vaps")

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[int]:
        return pulumi.get(self, "power_level")

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[str]:
        return pulumi.get(self, "power_mode")

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[int]:
        return pulumi.get(self, "power_value")

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[str]:
        return pulumi.get(self, "spectrum_analysis")

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[str]:
        return pulumi.get(self, "vap_all")

    @property
    @pulumi.getter
    def vaps(self) -> Optional[Sequence['outputs.WirelessControllerWtpRadio4Vap']]:
        return pulumi.get(self, "vaps")


@pulumi.output_type
class WirelessControllerWtpRadio4Channel(dict):
    def __init__(__self__, *,
                 chan: Optional[str] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[str]:
        return pulumi.get(self, "chan")


@pulumi.output_type
class WirelessControllerWtpRadio4Vap(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WirelessControllerWtpSplitTunnelingAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destIp":
            suggest = "dest_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessControllerWtpSplitTunnelingAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessControllerWtpSplitTunnelingAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessControllerWtpSplitTunnelingAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_ip: Optional[str] = None,
                 id: Optional[int] = None):
        if dest_ip is not None:
            pulumi.set(__self__, "dest_ip", dest_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> Optional[str]:
        return pulumi.get(self, "dest_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


