# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserRadiusArgs', 'UserRadius']

@pulumi.input_type
class UserRadiusArgs:
    def __init__(__self__, *,
                 accounting_servers: Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusAccountingServerArgs']]]] = None,
                 acct_all_servers: Optional[pulumi.Input[str]] = None,
                 acct_interim_interval: Optional[pulumi.Input[int]] = None,
                 all_usergroup: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 classes: Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusClassArgs']]]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_override_attr_type: Optional[pulumi.Input[str]] = None,
                 h3c_compatibility: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 mac_case: Optional[pulumi.Input[str]] = None,
                 mac_password_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_username_delimiter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nas_id: Optional[pulumi.Input[str]] = None,
                 nas_id_type: Optional[pulumi.Input[str]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 password_encoding: Optional[pulumi.Input[str]] = None,
                 password_renewal: Optional[pulumi.Input[str]] = None,
                 radius_coa: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rsso_context_timeout: Optional[pulumi.Input[int]] = None,
                 rsso_endpoint_attribute: Optional[pulumi.Input[str]] = None,
                 rsso_endpoint_block_attribute: Optional[pulumi.Input[str]] = None,
                 rsso_ep_one_ip_only: Optional[pulumi.Input[str]] = None,
                 rsso_flush_ip_session: Optional[pulumi.Input[str]] = None,
                 rsso_log_flags: Optional[pulumi.Input[str]] = None,
                 rsso_log_period: Optional[pulumi.Input[int]] = None,
                 rsso_radius_response: Optional[pulumi.Input[str]] = None,
                 rsso_radius_server_port: Optional[pulumi.Input[int]] = None,
                 rsso_secret: Optional[pulumi.Input[str]] = None,
                 rsso_validate_request_secret: Optional[pulumi.Input[str]] = None,
                 secondary_secret: Optional[pulumi.Input[str]] = None,
                 secondary_server: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 sso_attribute: Optional[pulumi.Input[str]] = None,
                 sso_attribute_key: Optional[pulumi.Input[str]] = None,
                 sso_attribute_value_override: Optional[pulumi.Input[str]] = None,
                 status_ttl: Optional[pulumi.Input[int]] = None,
                 switch_controller_acct_fast_framedip_detect: Optional[pulumi.Input[int]] = None,
                 switch_controller_service_type: Optional[pulumi.Input[str]] = None,
                 tertiary_secret: Optional[pulumi.Input[str]] = None,
                 tertiary_server: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 tls_min_proto_version: Optional[pulumi.Input[str]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 use_management_vdom: Optional[pulumi.Input[str]] = None,
                 username_case_sensitive: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserRadius resource.
        """
        if accounting_servers is not None:
            pulumi.set(__self__, "accounting_servers", accounting_servers)
        if acct_all_servers is not None:
            pulumi.set(__self__, "acct_all_servers", acct_all_servers)
        if acct_interim_interval is not None:
            pulumi.set(__self__, "acct_interim_interval", acct_interim_interval)
        if all_usergroup is not None:
            pulumi.set(__self__, "all_usergroup", all_usergroup)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if classes is not None:
            pulumi.set(__self__, "classes", classes)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_override_attr_type is not None:
            pulumi.set(__self__, "group_override_attr_type", group_override_attr_type)
        if h3c_compatibility is not None:
            pulumi.set(__self__, "h3c_compatibility", h3c_compatibility)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if mac_case is not None:
            pulumi.set(__self__, "mac_case", mac_case)
        if mac_password_delimiter is not None:
            pulumi.set(__self__, "mac_password_delimiter", mac_password_delimiter)
        if mac_username_delimiter is not None:
            pulumi.set(__self__, "mac_username_delimiter", mac_username_delimiter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nas_id is not None:
            pulumi.set(__self__, "nas_id", nas_id)
        if nas_id_type is not None:
            pulumi.set(__self__, "nas_id_type", nas_id_type)
        if nas_ip is not None:
            pulumi.set(__self__, "nas_ip", nas_ip)
        if password_encoding is not None:
            pulumi.set(__self__, "password_encoding", password_encoding)
        if password_renewal is not None:
            pulumi.set(__self__, "password_renewal", password_renewal)
        if radius_coa is not None:
            pulumi.set(__self__, "radius_coa", radius_coa)
        if radius_port is not None:
            pulumi.set(__self__, "radius_port", radius_port)
        if rsso is not None:
            pulumi.set(__self__, "rsso", rsso)
        if rsso_context_timeout is not None:
            pulumi.set(__self__, "rsso_context_timeout", rsso_context_timeout)
        if rsso_endpoint_attribute is not None:
            pulumi.set(__self__, "rsso_endpoint_attribute", rsso_endpoint_attribute)
        if rsso_endpoint_block_attribute is not None:
            pulumi.set(__self__, "rsso_endpoint_block_attribute", rsso_endpoint_block_attribute)
        if rsso_ep_one_ip_only is not None:
            pulumi.set(__self__, "rsso_ep_one_ip_only", rsso_ep_one_ip_only)
        if rsso_flush_ip_session is not None:
            pulumi.set(__self__, "rsso_flush_ip_session", rsso_flush_ip_session)
        if rsso_log_flags is not None:
            pulumi.set(__self__, "rsso_log_flags", rsso_log_flags)
        if rsso_log_period is not None:
            pulumi.set(__self__, "rsso_log_period", rsso_log_period)
        if rsso_radius_response is not None:
            pulumi.set(__self__, "rsso_radius_response", rsso_radius_response)
        if rsso_radius_server_port is not None:
            pulumi.set(__self__, "rsso_radius_server_port", rsso_radius_server_port)
        if rsso_secret is not None:
            pulumi.set(__self__, "rsso_secret", rsso_secret)
        if rsso_validate_request_secret is not None:
            pulumi.set(__self__, "rsso_validate_request_secret", rsso_validate_request_secret)
        if secondary_secret is not None:
            pulumi.set(__self__, "secondary_secret", secondary_secret)
        if secondary_server is not None:
            pulumi.set(__self__, "secondary_server", secondary_server)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server_identity_check is not None:
            pulumi.set(__self__, "server_identity_check", server_identity_check)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if sso_attribute is not None:
            pulumi.set(__self__, "sso_attribute", sso_attribute)
        if sso_attribute_key is not None:
            pulumi.set(__self__, "sso_attribute_key", sso_attribute_key)
        if sso_attribute_value_override is not None:
            pulumi.set(__self__, "sso_attribute_value_override", sso_attribute_value_override)
        if status_ttl is not None:
            pulumi.set(__self__, "status_ttl", status_ttl)
        if switch_controller_acct_fast_framedip_detect is not None:
            pulumi.set(__self__, "switch_controller_acct_fast_framedip_detect", switch_controller_acct_fast_framedip_detect)
        if switch_controller_service_type is not None:
            pulumi.set(__self__, "switch_controller_service_type", switch_controller_service_type)
        if tertiary_secret is not None:
            pulumi.set(__self__, "tertiary_secret", tertiary_secret)
        if tertiary_server is not None:
            pulumi.set(__self__, "tertiary_server", tertiary_server)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if tls_min_proto_version is not None:
            pulumi.set(__self__, "tls_min_proto_version", tls_min_proto_version)
        if transport_protocol is not None:
            pulumi.set(__self__, "transport_protocol", transport_protocol)
        if use_management_vdom is not None:
            pulumi.set(__self__, "use_management_vdom", use_management_vdom)
        if username_case_sensitive is not None:
            pulumi.set(__self__, "username_case_sensitive", username_case_sensitive)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="accountingServers")
    def accounting_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusAccountingServerArgs']]]]:
        return pulumi.get(self, "accounting_servers")

    @accounting_servers.setter
    def accounting_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusAccountingServerArgs']]]]):
        pulumi.set(self, "accounting_servers", value)

    @property
    @pulumi.getter(name="acctAllServers")
    def acct_all_servers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acct_all_servers")

    @acct_all_servers.setter
    def acct_all_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acct_all_servers", value)

    @property
    @pulumi.getter(name="acctInterimInterval")
    def acct_interim_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "acct_interim_interval")

    @acct_interim_interval.setter
    def acct_interim_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acct_interim_interval", value)

    @property
    @pulumi.getter(name="allUsergroup")
    def all_usergroup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "all_usergroup")

    @all_usergroup.setter
    def all_usergroup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "all_usergroup", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter
    def classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusClassArgs']]]]:
        return pulumi.get(self, "classes")

    @classes.setter
    def classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusClassArgs']]]]):
        pulumi.set(self, "classes", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupOverrideAttrType")
    def group_override_attr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_override_attr_type")

    @group_override_attr_type.setter
    def group_override_attr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_override_attr_type", value)

    @property
    @pulumi.getter(name="h3cCompatibility")
    def h3c_compatibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "h3c_compatibility")

    @h3c_compatibility.setter
    def h3c_compatibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h3c_compatibility", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="macCase")
    def mac_case(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_case")

    @mac_case.setter
    def mac_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_case", value)

    @property
    @pulumi.getter(name="macPasswordDelimiter")
    def mac_password_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_password_delimiter")

    @mac_password_delimiter.setter
    def mac_password_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_password_delimiter", value)

    @property
    @pulumi.getter(name="macUsernameDelimiter")
    def mac_username_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_username_delimiter")

    @mac_username_delimiter.setter
    def mac_username_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_username_delimiter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nasId")
    def nas_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nas_id")

    @nas_id.setter
    def nas_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nas_id", value)

    @property
    @pulumi.getter(name="nasIdType")
    def nas_id_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nas_id_type")

    @nas_id_type.setter
    def nas_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nas_id_type", value)

    @property
    @pulumi.getter(name="nasIp")
    def nas_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nas_ip")

    @nas_ip.setter
    def nas_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nas_ip", value)

    @property
    @pulumi.getter(name="passwordEncoding")
    def password_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_encoding")

    @password_encoding.setter
    def password_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_encoding", value)

    @property
    @pulumi.getter(name="passwordRenewal")
    def password_renewal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_renewal")

    @password_renewal.setter
    def password_renewal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_renewal", value)

    @property
    @pulumi.getter(name="radiusCoa")
    def radius_coa(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_coa")

    @radius_coa.setter
    def radius_coa(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_coa", value)

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radius_port")

    @radius_port.setter
    def radius_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_port", value)

    @property
    @pulumi.getter
    def rsso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso")

    @rsso.setter
    def rsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso", value)

    @property
    @pulumi.getter(name="rssoContextTimeout")
    def rsso_context_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rsso_context_timeout")

    @rsso_context_timeout.setter
    def rsso_context_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rsso_context_timeout", value)

    @property
    @pulumi.getter(name="rssoEndpointAttribute")
    def rsso_endpoint_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_endpoint_attribute")

    @rsso_endpoint_attribute.setter
    def rsso_endpoint_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_endpoint_attribute", value)

    @property
    @pulumi.getter(name="rssoEndpointBlockAttribute")
    def rsso_endpoint_block_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_endpoint_block_attribute")

    @rsso_endpoint_block_attribute.setter
    def rsso_endpoint_block_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_endpoint_block_attribute", value)

    @property
    @pulumi.getter(name="rssoEpOneIpOnly")
    def rsso_ep_one_ip_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_ep_one_ip_only")

    @rsso_ep_one_ip_only.setter
    def rsso_ep_one_ip_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_ep_one_ip_only", value)

    @property
    @pulumi.getter(name="rssoFlushIpSession")
    def rsso_flush_ip_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_flush_ip_session")

    @rsso_flush_ip_session.setter
    def rsso_flush_ip_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_flush_ip_session", value)

    @property
    @pulumi.getter(name="rssoLogFlags")
    def rsso_log_flags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_log_flags")

    @rsso_log_flags.setter
    def rsso_log_flags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_log_flags", value)

    @property
    @pulumi.getter(name="rssoLogPeriod")
    def rsso_log_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rsso_log_period")

    @rsso_log_period.setter
    def rsso_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rsso_log_period", value)

    @property
    @pulumi.getter(name="rssoRadiusResponse")
    def rsso_radius_response(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_radius_response")

    @rsso_radius_response.setter
    def rsso_radius_response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_radius_response", value)

    @property
    @pulumi.getter(name="rssoRadiusServerPort")
    def rsso_radius_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rsso_radius_server_port")

    @rsso_radius_server_port.setter
    def rsso_radius_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rsso_radius_server_port", value)

    @property
    @pulumi.getter(name="rssoSecret")
    def rsso_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_secret")

    @rsso_secret.setter
    def rsso_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_secret", value)

    @property
    @pulumi.getter(name="rssoValidateRequestSecret")
    def rsso_validate_request_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_validate_request_secret")

    @rsso_validate_request_secret.setter
    def rsso_validate_request_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_validate_request_secret", value)

    @property
    @pulumi.getter(name="secondarySecret")
    def secondary_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_secret")

    @secondary_secret.setter
    def secondary_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_secret", value)

    @property
    @pulumi.getter(name="secondaryServer")
    def secondary_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_server")

    @secondary_server.setter
    def secondary_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_server", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverIdentityCheck")
    def server_identity_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_identity_check")

    @server_identity_check.setter
    def server_identity_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_identity_check", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="ssoAttribute")
    def sso_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_attribute")

    @sso_attribute.setter
    def sso_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_attribute", value)

    @property
    @pulumi.getter(name="ssoAttributeKey")
    def sso_attribute_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_attribute_key")

    @sso_attribute_key.setter
    def sso_attribute_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_attribute_key", value)

    @property
    @pulumi.getter(name="ssoAttributeValueOverride")
    def sso_attribute_value_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_attribute_value_override")

    @sso_attribute_value_override.setter
    def sso_attribute_value_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_attribute_value_override", value)

    @property
    @pulumi.getter(name="statusTtl")
    def status_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "status_ttl")

    @status_ttl.setter
    def status_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_ttl", value)

    @property
    @pulumi.getter(name="switchControllerAcctFastFramedipDetect")
    def switch_controller_acct_fast_framedip_detect(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "switch_controller_acct_fast_framedip_detect")

    @switch_controller_acct_fast_framedip_detect.setter
    def switch_controller_acct_fast_framedip_detect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_controller_acct_fast_framedip_detect", value)

    @property
    @pulumi.getter(name="switchControllerServiceType")
    def switch_controller_service_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_controller_service_type")

    @switch_controller_service_type.setter
    def switch_controller_service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_service_type", value)

    @property
    @pulumi.getter(name="tertiarySecret")
    def tertiary_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tertiary_secret")

    @tertiary_secret.setter
    def tertiary_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tertiary_secret", value)

    @property
    @pulumi.getter(name="tertiaryServer")
    def tertiary_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tertiary_server")

    @tertiary_server.setter
    def tertiary_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tertiary_server", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="tlsMinProtoVersion")
    def tls_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_min_proto_version")

    @tls_min_proto_version.setter
    def tls_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_min_proto_version", value)

    @property
    @pulumi.getter(name="transportProtocol")
    def transport_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport_protocol")

    @transport_protocol.setter
    def transport_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport_protocol", value)

    @property
    @pulumi.getter(name="useManagementVdom")
    def use_management_vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_management_vdom")

    @use_management_vdom.setter
    def use_management_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_management_vdom", value)

    @property
    @pulumi.getter(name="usernameCaseSensitive")
    def username_case_sensitive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_case_sensitive")

    @username_case_sensitive.setter
    def username_case_sensitive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_case_sensitive", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _UserRadiusState:
    def __init__(__self__, *,
                 accounting_servers: Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusAccountingServerArgs']]]] = None,
                 acct_all_servers: Optional[pulumi.Input[str]] = None,
                 acct_interim_interval: Optional[pulumi.Input[int]] = None,
                 all_usergroup: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 classes: Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusClassArgs']]]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_override_attr_type: Optional[pulumi.Input[str]] = None,
                 h3c_compatibility: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 mac_case: Optional[pulumi.Input[str]] = None,
                 mac_password_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_username_delimiter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nas_id: Optional[pulumi.Input[str]] = None,
                 nas_id_type: Optional[pulumi.Input[str]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 password_encoding: Optional[pulumi.Input[str]] = None,
                 password_renewal: Optional[pulumi.Input[str]] = None,
                 radius_coa: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rsso_context_timeout: Optional[pulumi.Input[int]] = None,
                 rsso_endpoint_attribute: Optional[pulumi.Input[str]] = None,
                 rsso_endpoint_block_attribute: Optional[pulumi.Input[str]] = None,
                 rsso_ep_one_ip_only: Optional[pulumi.Input[str]] = None,
                 rsso_flush_ip_session: Optional[pulumi.Input[str]] = None,
                 rsso_log_flags: Optional[pulumi.Input[str]] = None,
                 rsso_log_period: Optional[pulumi.Input[int]] = None,
                 rsso_radius_response: Optional[pulumi.Input[str]] = None,
                 rsso_radius_server_port: Optional[pulumi.Input[int]] = None,
                 rsso_secret: Optional[pulumi.Input[str]] = None,
                 rsso_validate_request_secret: Optional[pulumi.Input[str]] = None,
                 secondary_secret: Optional[pulumi.Input[str]] = None,
                 secondary_server: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 sso_attribute: Optional[pulumi.Input[str]] = None,
                 sso_attribute_key: Optional[pulumi.Input[str]] = None,
                 sso_attribute_value_override: Optional[pulumi.Input[str]] = None,
                 status_ttl: Optional[pulumi.Input[int]] = None,
                 switch_controller_acct_fast_framedip_detect: Optional[pulumi.Input[int]] = None,
                 switch_controller_service_type: Optional[pulumi.Input[str]] = None,
                 tertiary_secret: Optional[pulumi.Input[str]] = None,
                 tertiary_server: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 tls_min_proto_version: Optional[pulumi.Input[str]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 use_management_vdom: Optional[pulumi.Input[str]] = None,
                 username_case_sensitive: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserRadius resources.
        """
        if accounting_servers is not None:
            pulumi.set(__self__, "accounting_servers", accounting_servers)
        if acct_all_servers is not None:
            pulumi.set(__self__, "acct_all_servers", acct_all_servers)
        if acct_interim_interval is not None:
            pulumi.set(__self__, "acct_interim_interval", acct_interim_interval)
        if all_usergroup is not None:
            pulumi.set(__self__, "all_usergroup", all_usergroup)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if classes is not None:
            pulumi.set(__self__, "classes", classes)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_override_attr_type is not None:
            pulumi.set(__self__, "group_override_attr_type", group_override_attr_type)
        if h3c_compatibility is not None:
            pulumi.set(__self__, "h3c_compatibility", h3c_compatibility)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if mac_case is not None:
            pulumi.set(__self__, "mac_case", mac_case)
        if mac_password_delimiter is not None:
            pulumi.set(__self__, "mac_password_delimiter", mac_password_delimiter)
        if mac_username_delimiter is not None:
            pulumi.set(__self__, "mac_username_delimiter", mac_username_delimiter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nas_id is not None:
            pulumi.set(__self__, "nas_id", nas_id)
        if nas_id_type is not None:
            pulumi.set(__self__, "nas_id_type", nas_id_type)
        if nas_ip is not None:
            pulumi.set(__self__, "nas_ip", nas_ip)
        if password_encoding is not None:
            pulumi.set(__self__, "password_encoding", password_encoding)
        if password_renewal is not None:
            pulumi.set(__self__, "password_renewal", password_renewal)
        if radius_coa is not None:
            pulumi.set(__self__, "radius_coa", radius_coa)
        if radius_port is not None:
            pulumi.set(__self__, "radius_port", radius_port)
        if rsso is not None:
            pulumi.set(__self__, "rsso", rsso)
        if rsso_context_timeout is not None:
            pulumi.set(__self__, "rsso_context_timeout", rsso_context_timeout)
        if rsso_endpoint_attribute is not None:
            pulumi.set(__self__, "rsso_endpoint_attribute", rsso_endpoint_attribute)
        if rsso_endpoint_block_attribute is not None:
            pulumi.set(__self__, "rsso_endpoint_block_attribute", rsso_endpoint_block_attribute)
        if rsso_ep_one_ip_only is not None:
            pulumi.set(__self__, "rsso_ep_one_ip_only", rsso_ep_one_ip_only)
        if rsso_flush_ip_session is not None:
            pulumi.set(__self__, "rsso_flush_ip_session", rsso_flush_ip_session)
        if rsso_log_flags is not None:
            pulumi.set(__self__, "rsso_log_flags", rsso_log_flags)
        if rsso_log_period is not None:
            pulumi.set(__self__, "rsso_log_period", rsso_log_period)
        if rsso_radius_response is not None:
            pulumi.set(__self__, "rsso_radius_response", rsso_radius_response)
        if rsso_radius_server_port is not None:
            pulumi.set(__self__, "rsso_radius_server_port", rsso_radius_server_port)
        if rsso_secret is not None:
            pulumi.set(__self__, "rsso_secret", rsso_secret)
        if rsso_validate_request_secret is not None:
            pulumi.set(__self__, "rsso_validate_request_secret", rsso_validate_request_secret)
        if secondary_secret is not None:
            pulumi.set(__self__, "secondary_secret", secondary_secret)
        if secondary_server is not None:
            pulumi.set(__self__, "secondary_server", secondary_server)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server_identity_check is not None:
            pulumi.set(__self__, "server_identity_check", server_identity_check)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if sso_attribute is not None:
            pulumi.set(__self__, "sso_attribute", sso_attribute)
        if sso_attribute_key is not None:
            pulumi.set(__self__, "sso_attribute_key", sso_attribute_key)
        if sso_attribute_value_override is not None:
            pulumi.set(__self__, "sso_attribute_value_override", sso_attribute_value_override)
        if status_ttl is not None:
            pulumi.set(__self__, "status_ttl", status_ttl)
        if switch_controller_acct_fast_framedip_detect is not None:
            pulumi.set(__self__, "switch_controller_acct_fast_framedip_detect", switch_controller_acct_fast_framedip_detect)
        if switch_controller_service_type is not None:
            pulumi.set(__self__, "switch_controller_service_type", switch_controller_service_type)
        if tertiary_secret is not None:
            pulumi.set(__self__, "tertiary_secret", tertiary_secret)
        if tertiary_server is not None:
            pulumi.set(__self__, "tertiary_server", tertiary_server)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if tls_min_proto_version is not None:
            pulumi.set(__self__, "tls_min_proto_version", tls_min_proto_version)
        if transport_protocol is not None:
            pulumi.set(__self__, "transport_protocol", transport_protocol)
        if use_management_vdom is not None:
            pulumi.set(__self__, "use_management_vdom", use_management_vdom)
        if username_case_sensitive is not None:
            pulumi.set(__self__, "username_case_sensitive", username_case_sensitive)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="accountingServers")
    def accounting_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusAccountingServerArgs']]]]:
        return pulumi.get(self, "accounting_servers")

    @accounting_servers.setter
    def accounting_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusAccountingServerArgs']]]]):
        pulumi.set(self, "accounting_servers", value)

    @property
    @pulumi.getter(name="acctAllServers")
    def acct_all_servers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acct_all_servers")

    @acct_all_servers.setter
    def acct_all_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acct_all_servers", value)

    @property
    @pulumi.getter(name="acctInterimInterval")
    def acct_interim_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "acct_interim_interval")

    @acct_interim_interval.setter
    def acct_interim_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acct_interim_interval", value)

    @property
    @pulumi.getter(name="allUsergroup")
    def all_usergroup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "all_usergroup")

    @all_usergroup.setter
    def all_usergroup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "all_usergroup", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter
    def classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusClassArgs']]]]:
        return pulumi.get(self, "classes")

    @classes.setter
    def classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserRadiusClassArgs']]]]):
        pulumi.set(self, "classes", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupOverrideAttrType")
    def group_override_attr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_override_attr_type")

    @group_override_attr_type.setter
    def group_override_attr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_override_attr_type", value)

    @property
    @pulumi.getter(name="h3cCompatibility")
    def h3c_compatibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "h3c_compatibility")

    @h3c_compatibility.setter
    def h3c_compatibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h3c_compatibility", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="macCase")
    def mac_case(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_case")

    @mac_case.setter
    def mac_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_case", value)

    @property
    @pulumi.getter(name="macPasswordDelimiter")
    def mac_password_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_password_delimiter")

    @mac_password_delimiter.setter
    def mac_password_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_password_delimiter", value)

    @property
    @pulumi.getter(name="macUsernameDelimiter")
    def mac_username_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_username_delimiter")

    @mac_username_delimiter.setter
    def mac_username_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_username_delimiter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nasId")
    def nas_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nas_id")

    @nas_id.setter
    def nas_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nas_id", value)

    @property
    @pulumi.getter(name="nasIdType")
    def nas_id_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nas_id_type")

    @nas_id_type.setter
    def nas_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nas_id_type", value)

    @property
    @pulumi.getter(name="nasIp")
    def nas_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nas_ip")

    @nas_ip.setter
    def nas_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nas_ip", value)

    @property
    @pulumi.getter(name="passwordEncoding")
    def password_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_encoding")

    @password_encoding.setter
    def password_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_encoding", value)

    @property
    @pulumi.getter(name="passwordRenewal")
    def password_renewal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_renewal")

    @password_renewal.setter
    def password_renewal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_renewal", value)

    @property
    @pulumi.getter(name="radiusCoa")
    def radius_coa(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_coa")

    @radius_coa.setter
    def radius_coa(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_coa", value)

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radius_port")

    @radius_port.setter
    def radius_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_port", value)

    @property
    @pulumi.getter
    def rsso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso")

    @rsso.setter
    def rsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso", value)

    @property
    @pulumi.getter(name="rssoContextTimeout")
    def rsso_context_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rsso_context_timeout")

    @rsso_context_timeout.setter
    def rsso_context_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rsso_context_timeout", value)

    @property
    @pulumi.getter(name="rssoEndpointAttribute")
    def rsso_endpoint_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_endpoint_attribute")

    @rsso_endpoint_attribute.setter
    def rsso_endpoint_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_endpoint_attribute", value)

    @property
    @pulumi.getter(name="rssoEndpointBlockAttribute")
    def rsso_endpoint_block_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_endpoint_block_attribute")

    @rsso_endpoint_block_attribute.setter
    def rsso_endpoint_block_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_endpoint_block_attribute", value)

    @property
    @pulumi.getter(name="rssoEpOneIpOnly")
    def rsso_ep_one_ip_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_ep_one_ip_only")

    @rsso_ep_one_ip_only.setter
    def rsso_ep_one_ip_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_ep_one_ip_only", value)

    @property
    @pulumi.getter(name="rssoFlushIpSession")
    def rsso_flush_ip_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_flush_ip_session")

    @rsso_flush_ip_session.setter
    def rsso_flush_ip_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_flush_ip_session", value)

    @property
    @pulumi.getter(name="rssoLogFlags")
    def rsso_log_flags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_log_flags")

    @rsso_log_flags.setter
    def rsso_log_flags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_log_flags", value)

    @property
    @pulumi.getter(name="rssoLogPeriod")
    def rsso_log_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rsso_log_period")

    @rsso_log_period.setter
    def rsso_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rsso_log_period", value)

    @property
    @pulumi.getter(name="rssoRadiusResponse")
    def rsso_radius_response(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_radius_response")

    @rsso_radius_response.setter
    def rsso_radius_response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_radius_response", value)

    @property
    @pulumi.getter(name="rssoRadiusServerPort")
    def rsso_radius_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rsso_radius_server_port")

    @rsso_radius_server_port.setter
    def rsso_radius_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rsso_radius_server_port", value)

    @property
    @pulumi.getter(name="rssoSecret")
    def rsso_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_secret")

    @rsso_secret.setter
    def rsso_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_secret", value)

    @property
    @pulumi.getter(name="rssoValidateRequestSecret")
    def rsso_validate_request_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso_validate_request_secret")

    @rsso_validate_request_secret.setter
    def rsso_validate_request_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso_validate_request_secret", value)

    @property
    @pulumi.getter(name="secondarySecret")
    def secondary_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_secret")

    @secondary_secret.setter
    def secondary_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_secret", value)

    @property
    @pulumi.getter(name="secondaryServer")
    def secondary_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_server")

    @secondary_server.setter
    def secondary_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_server", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverIdentityCheck")
    def server_identity_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_identity_check")

    @server_identity_check.setter
    def server_identity_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_identity_check", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="ssoAttribute")
    def sso_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_attribute")

    @sso_attribute.setter
    def sso_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_attribute", value)

    @property
    @pulumi.getter(name="ssoAttributeKey")
    def sso_attribute_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_attribute_key")

    @sso_attribute_key.setter
    def sso_attribute_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_attribute_key", value)

    @property
    @pulumi.getter(name="ssoAttributeValueOverride")
    def sso_attribute_value_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_attribute_value_override")

    @sso_attribute_value_override.setter
    def sso_attribute_value_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_attribute_value_override", value)

    @property
    @pulumi.getter(name="statusTtl")
    def status_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "status_ttl")

    @status_ttl.setter
    def status_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_ttl", value)

    @property
    @pulumi.getter(name="switchControllerAcctFastFramedipDetect")
    def switch_controller_acct_fast_framedip_detect(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "switch_controller_acct_fast_framedip_detect")

    @switch_controller_acct_fast_framedip_detect.setter
    def switch_controller_acct_fast_framedip_detect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_controller_acct_fast_framedip_detect", value)

    @property
    @pulumi.getter(name="switchControllerServiceType")
    def switch_controller_service_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_controller_service_type")

    @switch_controller_service_type.setter
    def switch_controller_service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_service_type", value)

    @property
    @pulumi.getter(name="tertiarySecret")
    def tertiary_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tertiary_secret")

    @tertiary_secret.setter
    def tertiary_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tertiary_secret", value)

    @property
    @pulumi.getter(name="tertiaryServer")
    def tertiary_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tertiary_server")

    @tertiary_server.setter
    def tertiary_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tertiary_server", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="tlsMinProtoVersion")
    def tls_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_min_proto_version")

    @tls_min_proto_version.setter
    def tls_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_min_proto_version", value)

    @property
    @pulumi.getter(name="transportProtocol")
    def transport_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport_protocol")

    @transport_protocol.setter
    def transport_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport_protocol", value)

    @property
    @pulumi.getter(name="useManagementVdom")
    def use_management_vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_management_vdom")

    @use_management_vdom.setter
    def use_management_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_management_vdom", value)

    @property
    @pulumi.getter(name="usernameCaseSensitive")
    def username_case_sensitive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_case_sensitive")

    @username_case_sensitive.setter
    def username_case_sensitive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_case_sensitive", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class UserRadius(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounting_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRadiusAccountingServerArgs']]]]] = None,
                 acct_all_servers: Optional[pulumi.Input[str]] = None,
                 acct_interim_interval: Optional[pulumi.Input[int]] = None,
                 all_usergroup: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 classes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRadiusClassArgs']]]]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_override_attr_type: Optional[pulumi.Input[str]] = None,
                 h3c_compatibility: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 mac_case: Optional[pulumi.Input[str]] = None,
                 mac_password_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_username_delimiter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nas_id: Optional[pulumi.Input[str]] = None,
                 nas_id_type: Optional[pulumi.Input[str]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 password_encoding: Optional[pulumi.Input[str]] = None,
                 password_renewal: Optional[pulumi.Input[str]] = None,
                 radius_coa: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rsso_context_timeout: Optional[pulumi.Input[int]] = None,
                 rsso_endpoint_attribute: Optional[pulumi.Input[str]] = None,
                 rsso_endpoint_block_attribute: Optional[pulumi.Input[str]] = None,
                 rsso_ep_one_ip_only: Optional[pulumi.Input[str]] = None,
                 rsso_flush_ip_session: Optional[pulumi.Input[str]] = None,
                 rsso_log_flags: Optional[pulumi.Input[str]] = None,
                 rsso_log_period: Optional[pulumi.Input[int]] = None,
                 rsso_radius_response: Optional[pulumi.Input[str]] = None,
                 rsso_radius_server_port: Optional[pulumi.Input[int]] = None,
                 rsso_secret: Optional[pulumi.Input[str]] = None,
                 rsso_validate_request_secret: Optional[pulumi.Input[str]] = None,
                 secondary_secret: Optional[pulumi.Input[str]] = None,
                 secondary_server: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 sso_attribute: Optional[pulumi.Input[str]] = None,
                 sso_attribute_key: Optional[pulumi.Input[str]] = None,
                 sso_attribute_value_override: Optional[pulumi.Input[str]] = None,
                 status_ttl: Optional[pulumi.Input[int]] = None,
                 switch_controller_acct_fast_framedip_detect: Optional[pulumi.Input[int]] = None,
                 switch_controller_service_type: Optional[pulumi.Input[str]] = None,
                 tertiary_secret: Optional[pulumi.Input[str]] = None,
                 tertiary_server: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 tls_min_proto_version: Optional[pulumi.Input[str]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 use_management_vdom: Optional[pulumi.Input[str]] = None,
                 username_case_sensitive: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a UserRadius resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UserRadiusArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UserRadius resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserRadiusArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserRadiusArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounting_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRadiusAccountingServerArgs']]]]] = None,
                 acct_all_servers: Optional[pulumi.Input[str]] = None,
                 acct_interim_interval: Optional[pulumi.Input[int]] = None,
                 all_usergroup: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 classes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRadiusClassArgs']]]]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_override_attr_type: Optional[pulumi.Input[str]] = None,
                 h3c_compatibility: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 mac_case: Optional[pulumi.Input[str]] = None,
                 mac_password_delimiter: Optional[pulumi.Input[str]] = None,
                 mac_username_delimiter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nas_id: Optional[pulumi.Input[str]] = None,
                 nas_id_type: Optional[pulumi.Input[str]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 password_encoding: Optional[pulumi.Input[str]] = None,
                 password_renewal: Optional[pulumi.Input[str]] = None,
                 radius_coa: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rsso_context_timeout: Optional[pulumi.Input[int]] = None,
                 rsso_endpoint_attribute: Optional[pulumi.Input[str]] = None,
                 rsso_endpoint_block_attribute: Optional[pulumi.Input[str]] = None,
                 rsso_ep_one_ip_only: Optional[pulumi.Input[str]] = None,
                 rsso_flush_ip_session: Optional[pulumi.Input[str]] = None,
                 rsso_log_flags: Optional[pulumi.Input[str]] = None,
                 rsso_log_period: Optional[pulumi.Input[int]] = None,
                 rsso_radius_response: Optional[pulumi.Input[str]] = None,
                 rsso_radius_server_port: Optional[pulumi.Input[int]] = None,
                 rsso_secret: Optional[pulumi.Input[str]] = None,
                 rsso_validate_request_secret: Optional[pulumi.Input[str]] = None,
                 secondary_secret: Optional[pulumi.Input[str]] = None,
                 secondary_server: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 sso_attribute: Optional[pulumi.Input[str]] = None,
                 sso_attribute_key: Optional[pulumi.Input[str]] = None,
                 sso_attribute_value_override: Optional[pulumi.Input[str]] = None,
                 status_ttl: Optional[pulumi.Input[int]] = None,
                 switch_controller_acct_fast_framedip_detect: Optional[pulumi.Input[int]] = None,
                 switch_controller_service_type: Optional[pulumi.Input[str]] = None,
                 tertiary_secret: Optional[pulumi.Input[str]] = None,
                 tertiary_server: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 tls_min_proto_version: Optional[pulumi.Input[str]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 use_management_vdom: Optional[pulumi.Input[str]] = None,
                 username_case_sensitive: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserRadiusArgs.__new__(UserRadiusArgs)

            __props__.__dict__["accounting_servers"] = accounting_servers
            __props__.__dict__["acct_all_servers"] = acct_all_servers
            __props__.__dict__["acct_interim_interval"] = acct_interim_interval
            __props__.__dict__["all_usergroup"] = all_usergroup
            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["ca_cert"] = ca_cert
            __props__.__dict__["classes"] = classes
            __props__.__dict__["client_cert"] = client_cert
            __props__.__dict__["delimiter"] = delimiter
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["group_override_attr_type"] = group_override_attr_type
            __props__.__dict__["h3c_compatibility"] = h3c_compatibility
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["mac_case"] = mac_case
            __props__.__dict__["mac_password_delimiter"] = mac_password_delimiter
            __props__.__dict__["mac_username_delimiter"] = mac_username_delimiter
            __props__.__dict__["name"] = name
            __props__.__dict__["nas_id"] = nas_id
            __props__.__dict__["nas_id_type"] = nas_id_type
            __props__.__dict__["nas_ip"] = nas_ip
            __props__.__dict__["password_encoding"] = password_encoding
            __props__.__dict__["password_renewal"] = password_renewal
            __props__.__dict__["radius_coa"] = radius_coa
            __props__.__dict__["radius_port"] = radius_port
            __props__.__dict__["rsso"] = rsso
            __props__.__dict__["rsso_context_timeout"] = rsso_context_timeout
            __props__.__dict__["rsso_endpoint_attribute"] = rsso_endpoint_attribute
            __props__.__dict__["rsso_endpoint_block_attribute"] = rsso_endpoint_block_attribute
            __props__.__dict__["rsso_ep_one_ip_only"] = rsso_ep_one_ip_only
            __props__.__dict__["rsso_flush_ip_session"] = rsso_flush_ip_session
            __props__.__dict__["rsso_log_flags"] = rsso_log_flags
            __props__.__dict__["rsso_log_period"] = rsso_log_period
            __props__.__dict__["rsso_radius_response"] = rsso_radius_response
            __props__.__dict__["rsso_radius_server_port"] = rsso_radius_server_port
            __props__.__dict__["rsso_secret"] = None if rsso_secret is None else pulumi.Output.secret(rsso_secret)
            __props__.__dict__["rsso_validate_request_secret"] = rsso_validate_request_secret
            __props__.__dict__["secondary_secret"] = None if secondary_secret is None else pulumi.Output.secret(secondary_secret)
            __props__.__dict__["secondary_server"] = secondary_server
            __props__.__dict__["secret"] = None if secret is None else pulumi.Output.secret(secret)
            __props__.__dict__["server"] = server
            __props__.__dict__["server_identity_check"] = server_identity_check
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["sso_attribute"] = sso_attribute
            __props__.__dict__["sso_attribute_key"] = None if sso_attribute_key is None else pulumi.Output.secret(sso_attribute_key)
            __props__.__dict__["sso_attribute_value_override"] = sso_attribute_value_override
            __props__.__dict__["status_ttl"] = status_ttl
            __props__.__dict__["switch_controller_acct_fast_framedip_detect"] = switch_controller_acct_fast_framedip_detect
            __props__.__dict__["switch_controller_service_type"] = switch_controller_service_type
            __props__.__dict__["tertiary_secret"] = None if tertiary_secret is None else pulumi.Output.secret(tertiary_secret)
            __props__.__dict__["tertiary_server"] = tertiary_server
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["tls_min_proto_version"] = tls_min_proto_version
            __props__.__dict__["transport_protocol"] = transport_protocol
            __props__.__dict__["use_management_vdom"] = use_management_vdom
            __props__.__dict__["username_case_sensitive"] = username_case_sensitive
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["rssoSecret", "secondarySecret", "secret", "ssoAttributeKey", "tertiarySecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(UserRadius, __self__).__init__(
            'fortios:index/userRadius:UserRadius',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accounting_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRadiusAccountingServerArgs']]]]] = None,
            acct_all_servers: Optional[pulumi.Input[str]] = None,
            acct_interim_interval: Optional[pulumi.Input[int]] = None,
            all_usergroup: Optional[pulumi.Input[str]] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            ca_cert: Optional[pulumi.Input[str]] = None,
            classes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRadiusClassArgs']]]]] = None,
            client_cert: Optional[pulumi.Input[str]] = None,
            delimiter: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            group_override_attr_type: Optional[pulumi.Input[str]] = None,
            h3c_compatibility: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            mac_case: Optional[pulumi.Input[str]] = None,
            mac_password_delimiter: Optional[pulumi.Input[str]] = None,
            mac_username_delimiter: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nas_id: Optional[pulumi.Input[str]] = None,
            nas_id_type: Optional[pulumi.Input[str]] = None,
            nas_ip: Optional[pulumi.Input[str]] = None,
            password_encoding: Optional[pulumi.Input[str]] = None,
            password_renewal: Optional[pulumi.Input[str]] = None,
            radius_coa: Optional[pulumi.Input[str]] = None,
            radius_port: Optional[pulumi.Input[int]] = None,
            rsso: Optional[pulumi.Input[str]] = None,
            rsso_context_timeout: Optional[pulumi.Input[int]] = None,
            rsso_endpoint_attribute: Optional[pulumi.Input[str]] = None,
            rsso_endpoint_block_attribute: Optional[pulumi.Input[str]] = None,
            rsso_ep_one_ip_only: Optional[pulumi.Input[str]] = None,
            rsso_flush_ip_session: Optional[pulumi.Input[str]] = None,
            rsso_log_flags: Optional[pulumi.Input[str]] = None,
            rsso_log_period: Optional[pulumi.Input[int]] = None,
            rsso_radius_response: Optional[pulumi.Input[str]] = None,
            rsso_radius_server_port: Optional[pulumi.Input[int]] = None,
            rsso_secret: Optional[pulumi.Input[str]] = None,
            rsso_validate_request_secret: Optional[pulumi.Input[str]] = None,
            secondary_secret: Optional[pulumi.Input[str]] = None,
            secondary_server: Optional[pulumi.Input[str]] = None,
            secret: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            server_identity_check: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            sso_attribute: Optional[pulumi.Input[str]] = None,
            sso_attribute_key: Optional[pulumi.Input[str]] = None,
            sso_attribute_value_override: Optional[pulumi.Input[str]] = None,
            status_ttl: Optional[pulumi.Input[int]] = None,
            switch_controller_acct_fast_framedip_detect: Optional[pulumi.Input[int]] = None,
            switch_controller_service_type: Optional[pulumi.Input[str]] = None,
            tertiary_secret: Optional[pulumi.Input[str]] = None,
            tertiary_server: Optional[pulumi.Input[str]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            tls_min_proto_version: Optional[pulumi.Input[str]] = None,
            transport_protocol: Optional[pulumi.Input[str]] = None,
            use_management_vdom: Optional[pulumi.Input[str]] = None,
            username_case_sensitive: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'UserRadius':
        """
        Get an existing UserRadius resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserRadiusState.__new__(_UserRadiusState)

        __props__.__dict__["accounting_servers"] = accounting_servers
        __props__.__dict__["acct_all_servers"] = acct_all_servers
        __props__.__dict__["acct_interim_interval"] = acct_interim_interval
        __props__.__dict__["all_usergroup"] = all_usergroup
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["ca_cert"] = ca_cert
        __props__.__dict__["classes"] = classes
        __props__.__dict__["client_cert"] = client_cert
        __props__.__dict__["delimiter"] = delimiter
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["group_override_attr_type"] = group_override_attr_type
        __props__.__dict__["h3c_compatibility"] = h3c_compatibility
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["mac_case"] = mac_case
        __props__.__dict__["mac_password_delimiter"] = mac_password_delimiter
        __props__.__dict__["mac_username_delimiter"] = mac_username_delimiter
        __props__.__dict__["name"] = name
        __props__.__dict__["nas_id"] = nas_id
        __props__.__dict__["nas_id_type"] = nas_id_type
        __props__.__dict__["nas_ip"] = nas_ip
        __props__.__dict__["password_encoding"] = password_encoding
        __props__.__dict__["password_renewal"] = password_renewal
        __props__.__dict__["radius_coa"] = radius_coa
        __props__.__dict__["radius_port"] = radius_port
        __props__.__dict__["rsso"] = rsso
        __props__.__dict__["rsso_context_timeout"] = rsso_context_timeout
        __props__.__dict__["rsso_endpoint_attribute"] = rsso_endpoint_attribute
        __props__.__dict__["rsso_endpoint_block_attribute"] = rsso_endpoint_block_attribute
        __props__.__dict__["rsso_ep_one_ip_only"] = rsso_ep_one_ip_only
        __props__.__dict__["rsso_flush_ip_session"] = rsso_flush_ip_session
        __props__.__dict__["rsso_log_flags"] = rsso_log_flags
        __props__.__dict__["rsso_log_period"] = rsso_log_period
        __props__.__dict__["rsso_radius_response"] = rsso_radius_response
        __props__.__dict__["rsso_radius_server_port"] = rsso_radius_server_port
        __props__.__dict__["rsso_secret"] = rsso_secret
        __props__.__dict__["rsso_validate_request_secret"] = rsso_validate_request_secret
        __props__.__dict__["secondary_secret"] = secondary_secret
        __props__.__dict__["secondary_server"] = secondary_server
        __props__.__dict__["secret"] = secret
        __props__.__dict__["server"] = server
        __props__.__dict__["server_identity_check"] = server_identity_check
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["sso_attribute"] = sso_attribute
        __props__.__dict__["sso_attribute_key"] = sso_attribute_key
        __props__.__dict__["sso_attribute_value_override"] = sso_attribute_value_override
        __props__.__dict__["status_ttl"] = status_ttl
        __props__.__dict__["switch_controller_acct_fast_framedip_detect"] = switch_controller_acct_fast_framedip_detect
        __props__.__dict__["switch_controller_service_type"] = switch_controller_service_type
        __props__.__dict__["tertiary_secret"] = tertiary_secret
        __props__.__dict__["tertiary_server"] = tertiary_server
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["tls_min_proto_version"] = tls_min_proto_version
        __props__.__dict__["transport_protocol"] = transport_protocol
        __props__.__dict__["use_management_vdom"] = use_management_vdom
        __props__.__dict__["username_case_sensitive"] = username_case_sensitive
        __props__.__dict__["vdomparam"] = vdomparam
        return UserRadius(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountingServers")
    def accounting_servers(self) -> pulumi.Output[Optional[Sequence['outputs.UserRadiusAccountingServer']]]:
        return pulumi.get(self, "accounting_servers")

    @property
    @pulumi.getter(name="acctAllServers")
    def acct_all_servers(self) -> pulumi.Output[str]:
        return pulumi.get(self, "acct_all_servers")

    @property
    @pulumi.getter(name="acctInterimInterval")
    def acct_interim_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "acct_interim_interval")

    @property
    @pulumi.getter(name="allUsergroup")
    def all_usergroup(self) -> pulumi.Output[str]:
        return pulumi.get(self, "all_usergroup")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter
    def classes(self) -> pulumi.Output[Optional[Sequence['outputs.UserRadiusClass']]]:
        return pulumi.get(self, "classes")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter
    def delimiter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="groupOverrideAttrType")
    def group_override_attr_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_override_attr_type")

    @property
    @pulumi.getter(name="h3cCompatibility")
    def h3c_compatibility(self) -> pulumi.Output[str]:
        return pulumi.get(self, "h3c_compatibility")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="macCase")
    def mac_case(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_case")

    @property
    @pulumi.getter(name="macPasswordDelimiter")
    def mac_password_delimiter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_password_delimiter")

    @property
    @pulumi.getter(name="macUsernameDelimiter")
    def mac_username_delimiter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_username_delimiter")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nasId")
    def nas_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nas_id")

    @property
    @pulumi.getter(name="nasIdType")
    def nas_id_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nas_id_type")

    @property
    @pulumi.getter(name="nasIp")
    def nas_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nas_ip")

    @property
    @pulumi.getter(name="passwordEncoding")
    def password_encoding(self) -> pulumi.Output[str]:
        return pulumi.get(self, "password_encoding")

    @property
    @pulumi.getter(name="passwordRenewal")
    def password_renewal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "password_renewal")

    @property
    @pulumi.getter(name="radiusCoa")
    def radius_coa(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radius_coa")

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "radius_port")

    @property
    @pulumi.getter
    def rsso(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rsso")

    @property
    @pulumi.getter(name="rssoContextTimeout")
    def rsso_context_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "rsso_context_timeout")

    @property
    @pulumi.getter(name="rssoEndpointAttribute")
    def rsso_endpoint_attribute(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rsso_endpoint_attribute")

    @property
    @pulumi.getter(name="rssoEndpointBlockAttribute")
    def rsso_endpoint_block_attribute(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rsso_endpoint_block_attribute")

    @property
    @pulumi.getter(name="rssoEpOneIpOnly")
    def rsso_ep_one_ip_only(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rsso_ep_one_ip_only")

    @property
    @pulumi.getter(name="rssoFlushIpSession")
    def rsso_flush_ip_session(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rsso_flush_ip_session")

    @property
    @pulumi.getter(name="rssoLogFlags")
    def rsso_log_flags(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rsso_log_flags")

    @property
    @pulumi.getter(name="rssoLogPeriod")
    def rsso_log_period(self) -> pulumi.Output[int]:
        return pulumi.get(self, "rsso_log_period")

    @property
    @pulumi.getter(name="rssoRadiusResponse")
    def rsso_radius_response(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rsso_radius_response")

    @property
    @pulumi.getter(name="rssoRadiusServerPort")
    def rsso_radius_server_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "rsso_radius_server_port")

    @property
    @pulumi.getter(name="rssoSecret")
    def rsso_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "rsso_secret")

    @property
    @pulumi.getter(name="rssoValidateRequestSecret")
    def rsso_validate_request_secret(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rsso_validate_request_secret")

    @property
    @pulumi.getter(name="secondarySecret")
    def secondary_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "secondary_secret")

    @property
    @pulumi.getter(name="secondaryServer")
    def secondary_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "secondary_server")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverIdentityCheck")
    def server_identity_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_identity_check")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="ssoAttribute")
    def sso_attribute(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sso_attribute")

    @property
    @pulumi.getter(name="ssoAttributeKey")
    def sso_attribute_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sso_attribute_key")

    @property
    @pulumi.getter(name="ssoAttributeValueOverride")
    def sso_attribute_value_override(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sso_attribute_value_override")

    @property
    @pulumi.getter(name="statusTtl")
    def status_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "status_ttl")

    @property
    @pulumi.getter(name="switchControllerAcctFastFramedipDetect")
    def switch_controller_acct_fast_framedip_detect(self) -> pulumi.Output[int]:
        return pulumi.get(self, "switch_controller_acct_fast_framedip_detect")

    @property
    @pulumi.getter(name="switchControllerServiceType")
    def switch_controller_service_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_controller_service_type")

    @property
    @pulumi.getter(name="tertiarySecret")
    def tertiary_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tertiary_secret")

    @property
    @pulumi.getter(name="tertiaryServer")
    def tertiary_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tertiary_server")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="tlsMinProtoVersion")
    def tls_min_proto_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tls_min_proto_version")

    @property
    @pulumi.getter(name="transportProtocol")
    def transport_protocol(self) -> pulumi.Output[str]:
        return pulumi.get(self, "transport_protocol")

    @property
    @pulumi.getter(name="useManagementVdom")
    def use_management_vdom(self) -> pulumi.Output[str]:
        return pulumi.get(self, "use_management_vdom")

    @property
    @pulumi.getter(name="usernameCaseSensitive")
    def username_case_sensitive(self) -> pulumi.Output[str]:
        return pulumi.get(self, "username_case_sensitive")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

