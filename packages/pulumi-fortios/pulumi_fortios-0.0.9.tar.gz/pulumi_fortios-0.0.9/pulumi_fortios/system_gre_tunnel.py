# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SystemGreTunnelArgs', 'SystemGreTunnel']

@pulumi.input_type
class SystemGreTunnelArgs:
    def __init__(__self__, *,
                 local_gw: pulumi.Input[str],
                 remote_gw: pulumi.Input[str],
                 checksum_reception: Optional[pulumi.Input[str]] = None,
                 checksum_transmission: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_copying: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 keepalive_failtimes: Optional[pulumi.Input[int]] = None,
                 keepalive_interval: Optional[pulumi.Input[int]] = None,
                 key_inbound: Optional[pulumi.Input[int]] = None,
                 key_outbound: Optional[pulumi.Input[int]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 sequence_number_reception: Optional[pulumi.Input[str]] = None,
                 sequence_number_transmission: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemGreTunnel resource.
        """
        pulumi.set(__self__, "local_gw", local_gw)
        pulumi.set(__self__, "remote_gw", remote_gw)
        if checksum_reception is not None:
            pulumi.set(__self__, "checksum_reception", checksum_reception)
        if checksum_transmission is not None:
            pulumi.set(__self__, "checksum_transmission", checksum_transmission)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dscp_copying is not None:
            pulumi.set(__self__, "dscp_copying", dscp_copying)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if keepalive_failtimes is not None:
            pulumi.set(__self__, "keepalive_failtimes", keepalive_failtimes)
        if keepalive_interval is not None:
            pulumi.set(__self__, "keepalive_interval", keepalive_interval)
        if key_inbound is not None:
            pulumi.set(__self__, "key_inbound", key_inbound)
        if key_outbound is not None:
            pulumi.set(__self__, "key_outbound", key_outbound)
        if local_gw6 is not None:
            pulumi.set(__self__, "local_gw6", local_gw6)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_gw6 is not None:
            pulumi.set(__self__, "remote_gw6", remote_gw6)
        if sequence_number_reception is not None:
            pulumi.set(__self__, "sequence_number_reception", sequence_number_reception)
        if sequence_number_transmission is not None:
            pulumi.set(__self__, "sequence_number_transmission", sequence_number_transmission)
        if use_sdwan is not None:
            pulumi.set(__self__, "use_sdwan", use_sdwan)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> pulumi.Input[str]:
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Input[str]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="checksumReception")
    def checksum_reception(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checksum_reception")

    @checksum_reception.setter
    def checksum_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_reception", value)

    @property
    @pulumi.getter(name="checksumTransmission")
    def checksum_transmission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checksum_transmission")

    @checksum_transmission.setter
    def checksum_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_transmission", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dscpCopying")
    def dscp_copying(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_copying")

    @dscp_copying.setter
    def dscp_copying(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_copying", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="keepaliveFailtimes")
    def keepalive_failtimes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keepalive_failtimes")

    @keepalive_failtimes.setter
    def keepalive_failtimes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_failtimes", value)

    @property
    @pulumi.getter(name="keepaliveInterval")
    def keepalive_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keepalive_interval")

    @keepalive_interval.setter
    def keepalive_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_interval", value)

    @property
    @pulumi.getter(name="keyInbound")
    def key_inbound(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_inbound")

    @key_inbound.setter
    def key_inbound(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_inbound", value)

    @property
    @pulumi.getter(name="keyOutbound")
    def key_outbound(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_outbound")

    @key_outbound.setter
    def key_outbound(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_outbound", value)

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw6")

    @local_gw6.setter
    def local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw6", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw6")

    @remote_gw6.setter
    def remote_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw6", value)

    @property
    @pulumi.getter(name="sequenceNumberReception")
    def sequence_number_reception(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sequence_number_reception")

    @sequence_number_reception.setter
    def sequence_number_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sequence_number_reception", value)

    @property
    @pulumi.getter(name="sequenceNumberTransmission")
    def sequence_number_transmission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sequence_number_transmission")

    @sequence_number_transmission.setter
    def sequence_number_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sequence_number_transmission", value)

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_sdwan")

    @use_sdwan.setter
    def use_sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_sdwan", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemGreTunnelState:
    def __init__(__self__, *,
                 checksum_reception: Optional[pulumi.Input[str]] = None,
                 checksum_transmission: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_copying: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 keepalive_failtimes: Optional[pulumi.Input[int]] = None,
                 keepalive_interval: Optional[pulumi.Input[int]] = None,
                 key_inbound: Optional[pulumi.Input[int]] = None,
                 key_outbound: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 sequence_number_reception: Optional[pulumi.Input[str]] = None,
                 sequence_number_transmission: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemGreTunnel resources.
        """
        if checksum_reception is not None:
            pulumi.set(__self__, "checksum_reception", checksum_reception)
        if checksum_transmission is not None:
            pulumi.set(__self__, "checksum_transmission", checksum_transmission)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dscp_copying is not None:
            pulumi.set(__self__, "dscp_copying", dscp_copying)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if keepalive_failtimes is not None:
            pulumi.set(__self__, "keepalive_failtimes", keepalive_failtimes)
        if keepalive_interval is not None:
            pulumi.set(__self__, "keepalive_interval", keepalive_interval)
        if key_inbound is not None:
            pulumi.set(__self__, "key_inbound", key_inbound)
        if key_outbound is not None:
            pulumi.set(__self__, "key_outbound", key_outbound)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if local_gw6 is not None:
            pulumi.set(__self__, "local_gw6", local_gw6)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if remote_gw6 is not None:
            pulumi.set(__self__, "remote_gw6", remote_gw6)
        if sequence_number_reception is not None:
            pulumi.set(__self__, "sequence_number_reception", sequence_number_reception)
        if sequence_number_transmission is not None:
            pulumi.set(__self__, "sequence_number_transmission", sequence_number_transmission)
        if use_sdwan is not None:
            pulumi.set(__self__, "use_sdwan", use_sdwan)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="checksumReception")
    def checksum_reception(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checksum_reception")

    @checksum_reception.setter
    def checksum_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_reception", value)

    @property
    @pulumi.getter(name="checksumTransmission")
    def checksum_transmission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checksum_transmission")

    @checksum_transmission.setter
    def checksum_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_transmission", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dscpCopying")
    def dscp_copying(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_copying")

    @dscp_copying.setter
    def dscp_copying(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_copying", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="keepaliveFailtimes")
    def keepalive_failtimes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keepalive_failtimes")

    @keepalive_failtimes.setter
    def keepalive_failtimes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_failtimes", value)

    @property
    @pulumi.getter(name="keepaliveInterval")
    def keepalive_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keepalive_interval")

    @keepalive_interval.setter
    def keepalive_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_interval", value)

    @property
    @pulumi.getter(name="keyInbound")
    def key_inbound(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_inbound")

    @key_inbound.setter
    def key_inbound(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_inbound", value)

    @property
    @pulumi.getter(name="keyOutbound")
    def key_outbound(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_outbound")

    @key_outbound.setter
    def key_outbound(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_outbound", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw6")

    @local_gw6.setter
    def local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw6", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw6")

    @remote_gw6.setter
    def remote_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw6", value)

    @property
    @pulumi.getter(name="sequenceNumberReception")
    def sequence_number_reception(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sequence_number_reception")

    @sequence_number_reception.setter
    def sequence_number_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sequence_number_reception", value)

    @property
    @pulumi.getter(name="sequenceNumberTransmission")
    def sequence_number_transmission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sequence_number_transmission")

    @sequence_number_transmission.setter
    def sequence_number_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sequence_number_transmission", value)

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_sdwan")

    @use_sdwan.setter
    def use_sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_sdwan", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemGreTunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 checksum_reception: Optional[pulumi.Input[str]] = None,
                 checksum_transmission: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_copying: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 keepalive_failtimes: Optional[pulumi.Input[int]] = None,
                 keepalive_interval: Optional[pulumi.Input[int]] = None,
                 key_inbound: Optional[pulumi.Input[int]] = None,
                 key_outbound: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 sequence_number_reception: Optional[pulumi.Input[str]] = None,
                 sequence_number_transmission: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemGreTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemGreTunnelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemGreTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemGreTunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemGreTunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 checksum_reception: Optional[pulumi.Input[str]] = None,
                 checksum_transmission: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_copying: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 keepalive_failtimes: Optional[pulumi.Input[int]] = None,
                 keepalive_interval: Optional[pulumi.Input[int]] = None,
                 key_inbound: Optional[pulumi.Input[int]] = None,
                 key_outbound: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 sequence_number_reception: Optional[pulumi.Input[str]] = None,
                 sequence_number_transmission: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemGreTunnelArgs.__new__(SystemGreTunnelArgs)

            __props__.__dict__["checksum_reception"] = checksum_reception
            __props__.__dict__["checksum_transmission"] = checksum_transmission
            __props__.__dict__["diffservcode"] = diffservcode
            __props__.__dict__["dscp_copying"] = dscp_copying
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["keepalive_failtimes"] = keepalive_failtimes
            __props__.__dict__["keepalive_interval"] = keepalive_interval
            __props__.__dict__["key_inbound"] = key_inbound
            __props__.__dict__["key_outbound"] = key_outbound
            if local_gw is None and not opts.urn:
                raise TypeError("Missing required property 'local_gw'")
            __props__.__dict__["local_gw"] = local_gw
            __props__.__dict__["local_gw6"] = local_gw6
            __props__.__dict__["name"] = name
            if remote_gw is None and not opts.urn:
                raise TypeError("Missing required property 'remote_gw'")
            __props__.__dict__["remote_gw"] = remote_gw
            __props__.__dict__["remote_gw6"] = remote_gw6
            __props__.__dict__["sequence_number_reception"] = sequence_number_reception
            __props__.__dict__["sequence_number_transmission"] = sequence_number_transmission
            __props__.__dict__["use_sdwan"] = use_sdwan
            __props__.__dict__["vdomparam"] = vdomparam
        super(SystemGreTunnel, __self__).__init__(
            'fortios:index/systemGreTunnel:SystemGreTunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            checksum_reception: Optional[pulumi.Input[str]] = None,
            checksum_transmission: Optional[pulumi.Input[str]] = None,
            diffservcode: Optional[pulumi.Input[str]] = None,
            dscp_copying: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip_version: Optional[pulumi.Input[str]] = None,
            keepalive_failtimes: Optional[pulumi.Input[int]] = None,
            keepalive_interval: Optional[pulumi.Input[int]] = None,
            key_inbound: Optional[pulumi.Input[int]] = None,
            key_outbound: Optional[pulumi.Input[int]] = None,
            local_gw: Optional[pulumi.Input[str]] = None,
            local_gw6: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            remote_gw: Optional[pulumi.Input[str]] = None,
            remote_gw6: Optional[pulumi.Input[str]] = None,
            sequence_number_reception: Optional[pulumi.Input[str]] = None,
            sequence_number_transmission: Optional[pulumi.Input[str]] = None,
            use_sdwan: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemGreTunnel':
        """
        Get an existing SystemGreTunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemGreTunnelState.__new__(_SystemGreTunnelState)

        __props__.__dict__["checksum_reception"] = checksum_reception
        __props__.__dict__["checksum_transmission"] = checksum_transmission
        __props__.__dict__["diffservcode"] = diffservcode
        __props__.__dict__["dscp_copying"] = dscp_copying
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["keepalive_failtimes"] = keepalive_failtimes
        __props__.__dict__["keepalive_interval"] = keepalive_interval
        __props__.__dict__["key_inbound"] = key_inbound
        __props__.__dict__["key_outbound"] = key_outbound
        __props__.__dict__["local_gw"] = local_gw
        __props__.__dict__["local_gw6"] = local_gw6
        __props__.__dict__["name"] = name
        __props__.__dict__["remote_gw"] = remote_gw
        __props__.__dict__["remote_gw6"] = remote_gw6
        __props__.__dict__["sequence_number_reception"] = sequence_number_reception
        __props__.__dict__["sequence_number_transmission"] = sequence_number_transmission
        __props__.__dict__["use_sdwan"] = use_sdwan
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemGreTunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="checksumReception")
    def checksum_reception(self) -> pulumi.Output[str]:
        return pulumi.get(self, "checksum_reception")

    @property
    @pulumi.getter(name="checksumTransmission")
    def checksum_transmission(self) -> pulumi.Output[str]:
        return pulumi.get(self, "checksum_transmission")

    @property
    @pulumi.getter
    def diffservcode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dscpCopying")
    def dscp_copying(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dscp_copying")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="keepaliveFailtimes")
    def keepalive_failtimes(self) -> pulumi.Output[int]:
        return pulumi.get(self, "keepalive_failtimes")

    @property
    @pulumi.getter(name="keepaliveInterval")
    def keepalive_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "keepalive_interval")

    @property
    @pulumi.getter(name="keyInbound")
    def key_inbound(self) -> pulumi.Output[int]:
        return pulumi.get(self, "key_inbound")

    @property
    @pulumi.getter(name="keyOutbound")
    def key_outbound(self) -> pulumi.Output[int]:
        return pulumi.get(self, "key_outbound")

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_gw")

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_gw6")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remote_gw6")

    @property
    @pulumi.getter(name="sequenceNumberReception")
    def sequence_number_reception(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sequence_number_reception")

    @property
    @pulumi.getter(name="sequenceNumberTransmission")
    def sequence_number_transmission(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sequence_number_transmission")

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "use_sdwan")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

