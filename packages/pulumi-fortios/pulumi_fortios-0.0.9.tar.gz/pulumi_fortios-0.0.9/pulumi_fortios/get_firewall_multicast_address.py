# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetFirewallMulticastAddressResult',
    'AwaitableGetFirewallMulticastAddressResult',
    'get_firewall_multicast_address',
    'get_firewall_multicast_address_output',
]

@pulumi.output_type
class GetFirewallMulticastAddressResult:
    """
    A collection of values returned by GetFirewallMulticastAddress.
    """
    def __init__(__self__, associated_interface=None, color=None, comment=None, end_ip=None, id=None, name=None, start_ip=None, subnet=None, taggings=None, type=None, vdomparam=None, visibility=None):
        if associated_interface and not isinstance(associated_interface, str):
            raise TypeError("Expected argument 'associated_interface' to be a str")
        pulumi.set(__self__, "associated_interface", associated_interface)
        if color and not isinstance(color, int):
            raise TypeError("Expected argument 'color' to be a int")
        pulumi.set(__self__, "color", color)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if end_ip and not isinstance(end_ip, str):
            raise TypeError("Expected argument 'end_ip' to be a str")
        pulumi.set(__self__, "end_ip", end_ip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if start_ip and not isinstance(start_ip, str):
            raise TypeError("Expected argument 'start_ip' to be a str")
        pulumi.set(__self__, "start_ip", start_ip)
        if subnet and not isinstance(subnet, str):
            raise TypeError("Expected argument 'subnet' to be a str")
        pulumi.set(__self__, "subnet", subnet)
        if taggings and not isinstance(taggings, list):
            raise TypeError("Expected argument 'taggings' to be a list")
        pulumi.set(__self__, "taggings", taggings)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="associatedInterface")
    def associated_interface(self) -> str:
        return pulumi.get(self, "associated_interface")

    @property
    @pulumi.getter
    def color(self) -> int:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter
    def taggings(self) -> Sequence['outputs.GetFirewallMulticastAddressTaggingResult']:
        return pulumi.get(self, "taggings")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def visibility(self) -> str:
        return pulumi.get(self, "visibility")


class AwaitableGetFirewallMulticastAddressResult(GetFirewallMulticastAddressResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallMulticastAddressResult(
            associated_interface=self.associated_interface,
            color=self.color,
            comment=self.comment,
            end_ip=self.end_ip,
            id=self.id,
            name=self.name,
            start_ip=self.start_ip,
            subnet=self.subnet,
            taggings=self.taggings,
            type=self.type,
            vdomparam=self.vdomparam,
            visibility=self.visibility)


def get_firewall_multicast_address(name: Optional[str] = None,
                                   vdomparam: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallMulticastAddressResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getFirewallMulticastAddress:GetFirewallMulticastAddress', __args__, opts=opts, typ=GetFirewallMulticastAddressResult).value

    return AwaitableGetFirewallMulticastAddressResult(
        associated_interface=pulumi.get(__ret__, 'associated_interface'),
        color=pulumi.get(__ret__, 'color'),
        comment=pulumi.get(__ret__, 'comment'),
        end_ip=pulumi.get(__ret__, 'end_ip'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        start_ip=pulumi.get(__ret__, 'start_ip'),
        subnet=pulumi.get(__ret__, 'subnet'),
        taggings=pulumi.get(__ret__, 'taggings'),
        type=pulumi.get(__ret__, 'type'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        visibility=pulumi.get(__ret__, 'visibility'))


@_utilities.lift_output_func(get_firewall_multicast_address)
def get_firewall_multicast_address_output(name: Optional[pulumi.Input[str]] = None,
                                          vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallMulticastAddressResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
