# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpnCertificateCaArgs', 'VpnCertificateCa']

@pulumi.input_type
class VpnCertificateCaArgs:
    def __init__(__self__, *,
                 ca: pulumi.Input[str],
                 auto_update_days: Optional[pulumi.Input[int]] = None,
                 auto_update_days_warning: Optional[pulumi.Input[int]] = None,
                 ca_identifier: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 obsolete: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input[str]] = None,
                 scep_url: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_inspection_trusted: Optional[pulumi.Input[str]] = None,
                 trusted: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpnCertificateCa resource.
        """
        pulumi.set(__self__, "ca", ca)
        if auto_update_days is not None:
            pulumi.set(__self__, "auto_update_days", auto_update_days)
        if auto_update_days_warning is not None:
            pulumi.set(__self__, "auto_update_days_warning", auto_update_days_warning)
        if ca_identifier is not None:
            pulumi.set(__self__, "ca_identifier", ca_identifier)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if obsolete is not None:
            pulumi.set(__self__, "obsolete", obsolete)
        if range is not None:
            pulumi.set(__self__, "range", range)
        if scep_url is not None:
            pulumi.set(__self__, "scep_url", scep_url)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_inspection_trusted is not None:
            pulumi.set(__self__, "ssl_inspection_trusted", ssl_inspection_trusted)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def ca(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="autoUpdateDays")
    def auto_update_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_update_days")

    @auto_update_days.setter
    def auto_update_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_update_days", value)

    @property
    @pulumi.getter(name="autoUpdateDaysWarning")
    def auto_update_days_warning(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_update_days_warning")

    @auto_update_days_warning.setter
    def auto_update_days_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_update_days_warning", value)

    @property
    @pulumi.getter(name="caIdentifier")
    def ca_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_identifier")

    @ca_identifier.setter
    def ca_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_identifier", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def obsolete(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "obsolete")

    @obsolete.setter
    def obsolete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obsolete", value)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter(name="scepUrl")
    def scep_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scep_url")

    @scep_url.setter
    def scep_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scep_url", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslInspectionTrusted")
    def ssl_inspection_trusted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_inspection_trusted")

    @ssl_inspection_trusted.setter
    def ssl_inspection_trusted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_inspection_trusted", value)

    @property
    @pulumi.getter
    def trusted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trusted")

    @trusted.setter
    def trusted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusted", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _VpnCertificateCaState:
    def __init__(__self__, *,
                 auto_update_days: Optional[pulumi.Input[int]] = None,
                 auto_update_days_warning: Optional[pulumi.Input[int]] = None,
                 ca: Optional[pulumi.Input[str]] = None,
                 ca_identifier: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 obsolete: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input[str]] = None,
                 scep_url: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_inspection_trusted: Optional[pulumi.Input[str]] = None,
                 trusted: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpnCertificateCa resources.
        """
        if auto_update_days is not None:
            pulumi.set(__self__, "auto_update_days", auto_update_days)
        if auto_update_days_warning is not None:
            pulumi.set(__self__, "auto_update_days_warning", auto_update_days_warning)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if ca_identifier is not None:
            pulumi.set(__self__, "ca_identifier", ca_identifier)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if obsolete is not None:
            pulumi.set(__self__, "obsolete", obsolete)
        if range is not None:
            pulumi.set(__self__, "range", range)
        if scep_url is not None:
            pulumi.set(__self__, "scep_url", scep_url)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_inspection_trusted is not None:
            pulumi.set(__self__, "ssl_inspection_trusted", ssl_inspection_trusted)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoUpdateDays")
    def auto_update_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_update_days")

    @auto_update_days.setter
    def auto_update_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_update_days", value)

    @property
    @pulumi.getter(name="autoUpdateDaysWarning")
    def auto_update_days_warning(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_update_days_warning")

    @auto_update_days_warning.setter
    def auto_update_days_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_update_days_warning", value)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="caIdentifier")
    def ca_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_identifier")

    @ca_identifier.setter
    def ca_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_identifier", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def obsolete(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "obsolete")

    @obsolete.setter
    def obsolete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obsolete", value)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter(name="scepUrl")
    def scep_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scep_url")

    @scep_url.setter
    def scep_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scep_url", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslInspectionTrusted")
    def ssl_inspection_trusted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_inspection_trusted")

    @ssl_inspection_trusted.setter
    def ssl_inspection_trusted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_inspection_trusted", value)

    @property
    @pulumi.getter
    def trusted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trusted")

    @trusted.setter
    def trusted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusted", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class VpnCertificateCa(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_update_days: Optional[pulumi.Input[int]] = None,
                 auto_update_days_warning: Optional[pulumi.Input[int]] = None,
                 ca: Optional[pulumi.Input[str]] = None,
                 ca_identifier: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 obsolete: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input[str]] = None,
                 scep_url: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_inspection_trusted: Optional[pulumi.Input[str]] = None,
                 trusted: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VpnCertificateCa resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpnCertificateCaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpnCertificateCa resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpnCertificateCaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnCertificateCaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_update_days: Optional[pulumi.Input[int]] = None,
                 auto_update_days_warning: Optional[pulumi.Input[int]] = None,
                 ca: Optional[pulumi.Input[str]] = None,
                 ca_identifier: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 obsolete: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input[str]] = None,
                 scep_url: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_inspection_trusted: Optional[pulumi.Input[str]] = None,
                 trusted: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnCertificateCaArgs.__new__(VpnCertificateCaArgs)

            __props__.__dict__["auto_update_days"] = auto_update_days
            __props__.__dict__["auto_update_days_warning"] = auto_update_days_warning
            if ca is None and not opts.urn:
                raise TypeError("Missing required property 'ca'")
            __props__.__dict__["ca"] = ca
            __props__.__dict__["ca_identifier"] = ca_identifier
            __props__.__dict__["last_updated"] = last_updated
            __props__.__dict__["name"] = name
            __props__.__dict__["obsolete"] = obsolete
            __props__.__dict__["range"] = range
            __props__.__dict__["scep_url"] = scep_url
            __props__.__dict__["source"] = source
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["ssl_inspection_trusted"] = ssl_inspection_trusted
            __props__.__dict__["trusted"] = trusted
            __props__.__dict__["vdomparam"] = vdomparam
        super(VpnCertificateCa, __self__).__init__(
            'fortios:index/vpnCertificateCa:VpnCertificateCa',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_update_days: Optional[pulumi.Input[int]] = None,
            auto_update_days_warning: Optional[pulumi.Input[int]] = None,
            ca: Optional[pulumi.Input[str]] = None,
            ca_identifier: Optional[pulumi.Input[str]] = None,
            last_updated: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            obsolete: Optional[pulumi.Input[str]] = None,
            range: Optional[pulumi.Input[str]] = None,
            scep_url: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            ssl_inspection_trusted: Optional[pulumi.Input[str]] = None,
            trusted: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'VpnCertificateCa':
        """
        Get an existing VpnCertificateCa resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnCertificateCaState.__new__(_VpnCertificateCaState)

        __props__.__dict__["auto_update_days"] = auto_update_days
        __props__.__dict__["auto_update_days_warning"] = auto_update_days_warning
        __props__.__dict__["ca"] = ca
        __props__.__dict__["ca_identifier"] = ca_identifier
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["name"] = name
        __props__.__dict__["obsolete"] = obsolete
        __props__.__dict__["range"] = range
        __props__.__dict__["scep_url"] = scep_url
        __props__.__dict__["source"] = source
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["ssl_inspection_trusted"] = ssl_inspection_trusted
        __props__.__dict__["trusted"] = trusted
        __props__.__dict__["vdomparam"] = vdomparam
        return VpnCertificateCa(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoUpdateDays")
    def auto_update_days(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auto_update_days")

    @property
    @pulumi.getter(name="autoUpdateDaysWarning")
    def auto_update_days_warning(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auto_update_days_warning")

    @property
    @pulumi.getter
    def ca(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="caIdentifier")
    def ca_identifier(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca_identifier")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[int]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def obsolete(self) -> pulumi.Output[str]:
        return pulumi.get(self, "obsolete")

    @property
    @pulumi.getter
    def range(self) -> pulumi.Output[str]:
        return pulumi.get(self, "range")

    @property
    @pulumi.getter(name="scepUrl")
    def scep_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "scep_url")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sslInspectionTrusted")
    def ssl_inspection_trusted(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_inspection_trusted")

    @property
    @pulumi.getter
    def trusted(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trusted")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

