# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemNtpArgs', 'SystemNtp']

@pulumi.input_type
class SystemNtpArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpInterfaceArgs']]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpNtpserverArgs']]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 server_mode: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 syncinterval: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemNtp resource.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if ntpservers is not None:
            pulumi.set(__self__, "ntpservers", ntpservers)
        if ntpsync is not None:
            pulumi.set(__self__, "ntpsync", ntpsync)
        if server_mode is not None:
            pulumi.set(__self__, "server_mode", server_mode)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if syncinterval is not None:
            pulumi.set(__self__, "syncinterval", syncinterval)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpInterfaceArgs']]]]:
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def ntpservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpNtpserverArgs']]]]:
        return pulumi.get(self, "ntpservers")

    @ntpservers.setter
    def ntpservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpNtpserverArgs']]]]):
        pulumi.set(self, "ntpservers", value)

    @property
    @pulumi.getter
    def ntpsync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntpsync")

    @ntpsync.setter
    def ntpsync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntpsync", value)

    @property
    @pulumi.getter(name="serverMode")
    def server_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_mode")

    @server_mode.setter
    def server_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_mode", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def syncinterval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "syncinterval")

    @syncinterval.setter
    def syncinterval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "syncinterval", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemNtpState:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpInterfaceArgs']]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpNtpserverArgs']]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 server_mode: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 syncinterval: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemNtp resources.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if ntpservers is not None:
            pulumi.set(__self__, "ntpservers", ntpservers)
        if ntpsync is not None:
            pulumi.set(__self__, "ntpsync", ntpsync)
        if server_mode is not None:
            pulumi.set(__self__, "server_mode", server_mode)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if syncinterval is not None:
            pulumi.set(__self__, "syncinterval", syncinterval)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpInterfaceArgs']]]]:
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def ntpservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpNtpserverArgs']]]]:
        return pulumi.get(self, "ntpservers")

    @ntpservers.setter
    def ntpservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemNtpNtpserverArgs']]]]):
        pulumi.set(self, "ntpservers", value)

    @property
    @pulumi.getter
    def ntpsync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntpsync")

    @ntpsync.setter
    def ntpsync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntpsync", value)

    @property
    @pulumi.getter(name="serverMode")
    def server_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_mode")

    @server_mode.setter
    def server_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_mode", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def syncinterval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "syncinterval")

    @syncinterval.setter
    def syncinterval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "syncinterval", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemNtp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemNtpInterfaceArgs']]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemNtpNtpserverArgs']]]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 server_mode: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 syncinterval: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemNtp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemNtpArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemNtp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemNtpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemNtpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemNtpInterfaceArgs']]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemNtpNtpserverArgs']]]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 server_mode: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 syncinterval: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemNtpArgs.__new__(SystemNtpArgs)

            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["interfaces"] = interfaces
            __props__.__dict__["key"] = None if key is None else pulumi.Output.secret(key)
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["key_type"] = key_type
            __props__.__dict__["ntpservers"] = ntpservers
            __props__.__dict__["ntpsync"] = ntpsync
            __props__.__dict__["server_mode"] = server_mode
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["source_ip6"] = source_ip6
            __props__.__dict__["syncinterval"] = syncinterval
            __props__.__dict__["type"] = type
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["key"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SystemNtp, __self__).__init__(
            'fortios:index/systemNtp:SystemNtp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemNtpInterfaceArgs']]]]] = None,
            key: Optional[pulumi.Input[str]] = None,
            key_id: Optional[pulumi.Input[int]] = None,
            key_type: Optional[pulumi.Input[str]] = None,
            ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemNtpNtpserverArgs']]]]] = None,
            ntpsync: Optional[pulumi.Input[str]] = None,
            server_mode: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            source_ip6: Optional[pulumi.Input[str]] = None,
            syncinterval: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemNtp':
        """
        Get an existing SystemNtp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemNtpState.__new__(_SystemNtpState)

        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interfaces"] = interfaces
        __props__.__dict__["key"] = key
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["key_type"] = key_type
        __props__.__dict__["ntpservers"] = ntpservers
        __props__.__dict__["ntpsync"] = ntpsync
        __props__.__dict__["server_mode"] = server_mode
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["source_ip6"] = source_ip6
        __props__.__dict__["syncinterval"] = syncinterval
        __props__.__dict__["type"] = type
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemNtp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.SystemNtpInterface']]]:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter
    def ntpservers(self) -> pulumi.Output[Optional[Sequence['outputs.SystemNtpNtpserver']]]:
        return pulumi.get(self, "ntpservers")

    @property
    @pulumi.getter
    def ntpsync(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ntpsync")

    @property
    @pulumi.getter(name="serverMode")
    def server_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_mode")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter
    def syncinterval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "syncinterval")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

