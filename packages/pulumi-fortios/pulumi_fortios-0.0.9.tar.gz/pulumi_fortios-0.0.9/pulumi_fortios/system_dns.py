# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemDnsArgs', 'SystemDns']

@pulumi.input_type
class SystemDnsArgs:
    def __init__(__self__, *,
                 primary: pulumi.Input[str],
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 cache_notfound_responses: Optional[pulumi.Input[str]] = None,
                 dns_cache_limit: Optional[pulumi.Input[int]] = None,
                 dns_cache_ttl: Optional[pulumi.Input[int]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDomainArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fqdn_cache_ttl: Optional[pulumi.Input[int]] = None,
                 fqdn_max_refresh: Optional[pulumi.Input[int]] = None,
                 fqdn_min_refresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsServerHostnameArgs']]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemDns resource.
        """
        pulumi.set(__self__, "primary", primary)
        if alt_primary is not None:
            pulumi.set(__self__, "alt_primary", alt_primary)
        if alt_secondary is not None:
            pulumi.set(__self__, "alt_secondary", alt_secondary)
        if cache_notfound_responses is not None:
            pulumi.set(__self__, "cache_notfound_responses", cache_notfound_responses)
        if dns_cache_limit is not None:
            pulumi.set(__self__, "dns_cache_limit", dns_cache_limit)
        if dns_cache_ttl is not None:
            pulumi.set(__self__, "dns_cache_ttl", dns_cache_ttl)
        if dns_over_tls is not None:
            pulumi.set(__self__, "dns_over_tls", dns_over_tls)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fqdn_cache_ttl is not None:
            pulumi.set(__self__, "fqdn_cache_ttl", fqdn_cache_ttl)
        if fqdn_max_refresh is not None:
            pulumi.set(__self__, "fqdn_max_refresh", fqdn_max_refresh)
        if fqdn_min_refresh is not None:
            pulumi.set(__self__, "fqdn_min_refresh", fqdn_min_refresh)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ip6_primary is not None:
            pulumi.set(__self__, "ip6_primary", ip6_primary)
        if ip6_secondary is not None:
            pulumi.set(__self__, "ip6_secondary", ip6_secondary)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if server_hostnames is not None:
            pulumi.set(__self__, "server_hostnames", server_hostnames)
        if server_select_method is not None:
            pulumi.set(__self__, "server_select_method", server_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def primary(self) -> pulumi.Input[str]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter(name="altPrimary")
    def alt_primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alt_primary")

    @alt_primary.setter
    def alt_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_primary", value)

    @property
    @pulumi.getter(name="altSecondary")
    def alt_secondary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alt_secondary")

    @alt_secondary.setter
    def alt_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_secondary", value)

    @property
    @pulumi.getter(name="cacheNotfoundResponses")
    def cache_notfound_responses(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_notfound_responses")

    @cache_notfound_responses.setter
    def cache_notfound_responses(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_notfound_responses", value)

    @property
    @pulumi.getter(name="dnsCacheLimit")
    def dns_cache_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dns_cache_limit")

    @dns_cache_limit.setter
    def dns_cache_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_cache_limit", value)

    @property
    @pulumi.getter(name="dnsCacheTtl")
    def dns_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dns_cache_ttl")

    @dns_cache_ttl.setter
    def dns_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_cache_ttl", value)

    @property
    @pulumi.getter(name="dnsOverTls")
    def dns_over_tls(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_over_tls")

    @dns_over_tls.setter
    def dns_over_tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_over_tls", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDomainArgs']]]]:
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDomainArgs']]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fqdnCacheTtl")
    def fqdn_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fqdn_cache_ttl")

    @fqdn_cache_ttl.setter
    def fqdn_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_cache_ttl", value)

    @property
    @pulumi.getter(name="fqdnMaxRefresh")
    def fqdn_max_refresh(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fqdn_max_refresh")

    @fqdn_max_refresh.setter
    def fqdn_max_refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_max_refresh", value)

    @property
    @pulumi.getter(name="fqdnMinRefresh")
    def fqdn_min_refresh(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fqdn_min_refresh")

    @fqdn_min_refresh.setter
    def fqdn_min_refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_min_refresh", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ip6Primary")
    def ip6_primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_primary")

    @ip6_primary.setter
    def ip6_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_primary", value)

    @property
    @pulumi.getter(name="ip6Secondary")
    def ip6_secondary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_secondary")

    @ip6_secondary.setter
    def ip6_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_secondary", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary", value)

    @property
    @pulumi.getter(name="serverHostnames")
    def server_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsServerHostnameArgs']]]]:
        return pulumi.get(self, "server_hostnames")

    @server_hostnames.setter
    def server_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsServerHostnameArgs']]]]):
        pulumi.set(self, "server_hostnames", value)

    @property
    @pulumi.getter(name="serverSelectMethod")
    def server_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_select_method")

    @server_select_method.setter
    def server_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemDnsState:
    def __init__(__self__, *,
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 cache_notfound_responses: Optional[pulumi.Input[str]] = None,
                 dns_cache_limit: Optional[pulumi.Input[int]] = None,
                 dns_cache_ttl: Optional[pulumi.Input[int]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDomainArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fqdn_cache_ttl: Optional[pulumi.Input[int]] = None,
                 fqdn_max_refresh: Optional[pulumi.Input[int]] = None,
                 fqdn_min_refresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsServerHostnameArgs']]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemDns resources.
        """
        if alt_primary is not None:
            pulumi.set(__self__, "alt_primary", alt_primary)
        if alt_secondary is not None:
            pulumi.set(__self__, "alt_secondary", alt_secondary)
        if cache_notfound_responses is not None:
            pulumi.set(__self__, "cache_notfound_responses", cache_notfound_responses)
        if dns_cache_limit is not None:
            pulumi.set(__self__, "dns_cache_limit", dns_cache_limit)
        if dns_cache_ttl is not None:
            pulumi.set(__self__, "dns_cache_ttl", dns_cache_ttl)
        if dns_over_tls is not None:
            pulumi.set(__self__, "dns_over_tls", dns_over_tls)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fqdn_cache_ttl is not None:
            pulumi.set(__self__, "fqdn_cache_ttl", fqdn_cache_ttl)
        if fqdn_max_refresh is not None:
            pulumi.set(__self__, "fqdn_max_refresh", fqdn_max_refresh)
        if fqdn_min_refresh is not None:
            pulumi.set(__self__, "fqdn_min_refresh", fqdn_min_refresh)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ip6_primary is not None:
            pulumi.set(__self__, "ip6_primary", ip6_primary)
        if ip6_secondary is not None:
            pulumi.set(__self__, "ip6_secondary", ip6_secondary)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if server_hostnames is not None:
            pulumi.set(__self__, "server_hostnames", server_hostnames)
        if server_select_method is not None:
            pulumi.set(__self__, "server_select_method", server_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="altPrimary")
    def alt_primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alt_primary")

    @alt_primary.setter
    def alt_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_primary", value)

    @property
    @pulumi.getter(name="altSecondary")
    def alt_secondary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alt_secondary")

    @alt_secondary.setter
    def alt_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_secondary", value)

    @property
    @pulumi.getter(name="cacheNotfoundResponses")
    def cache_notfound_responses(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_notfound_responses")

    @cache_notfound_responses.setter
    def cache_notfound_responses(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_notfound_responses", value)

    @property
    @pulumi.getter(name="dnsCacheLimit")
    def dns_cache_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dns_cache_limit")

    @dns_cache_limit.setter
    def dns_cache_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_cache_limit", value)

    @property
    @pulumi.getter(name="dnsCacheTtl")
    def dns_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dns_cache_ttl")

    @dns_cache_ttl.setter
    def dns_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_cache_ttl", value)

    @property
    @pulumi.getter(name="dnsOverTls")
    def dns_over_tls(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_over_tls")

    @dns_over_tls.setter
    def dns_over_tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_over_tls", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDomainArgs']]]]:
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDomainArgs']]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fqdnCacheTtl")
    def fqdn_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fqdn_cache_ttl")

    @fqdn_cache_ttl.setter
    def fqdn_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_cache_ttl", value)

    @property
    @pulumi.getter(name="fqdnMaxRefresh")
    def fqdn_max_refresh(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fqdn_max_refresh")

    @fqdn_max_refresh.setter
    def fqdn_max_refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_max_refresh", value)

    @property
    @pulumi.getter(name="fqdnMinRefresh")
    def fqdn_min_refresh(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fqdn_min_refresh")

    @fqdn_min_refresh.setter
    def fqdn_min_refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_min_refresh", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ip6Primary")
    def ip6_primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_primary")

    @ip6_primary.setter
    def ip6_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_primary", value)

    @property
    @pulumi.getter(name="ip6Secondary")
    def ip6_secondary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_secondary")

    @ip6_secondary.setter
    def ip6_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_secondary", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary", value)

    @property
    @pulumi.getter(name="serverHostnames")
    def server_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsServerHostnameArgs']]]]:
        return pulumi.get(self, "server_hostnames")

    @server_hostnames.setter
    def server_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsServerHostnameArgs']]]]):
        pulumi.set(self, "server_hostnames", value)

    @property
    @pulumi.getter(name="serverSelectMethod")
    def server_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_select_method")

    @server_select_method.setter
    def server_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemDns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 cache_notfound_responses: Optional[pulumi.Input[str]] = None,
                 dns_cache_limit: Optional[pulumi.Input[int]] = None,
                 dns_cache_ttl: Optional[pulumi.Input[int]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDnsDomainArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fqdn_cache_ttl: Optional[pulumi.Input[int]] = None,
                 fqdn_max_refresh: Optional[pulumi.Input[int]] = None,
                 fqdn_min_refresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDnsServerHostnameArgs']]]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemDns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemDnsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemDns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemDnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemDnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 cache_notfound_responses: Optional[pulumi.Input[str]] = None,
                 dns_cache_limit: Optional[pulumi.Input[int]] = None,
                 dns_cache_ttl: Optional[pulumi.Input[int]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDnsDomainArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fqdn_cache_ttl: Optional[pulumi.Input[int]] = None,
                 fqdn_max_refresh: Optional[pulumi.Input[int]] = None,
                 fqdn_min_refresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDnsServerHostnameArgs']]]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemDnsArgs.__new__(SystemDnsArgs)

            __props__.__dict__["alt_primary"] = alt_primary
            __props__.__dict__["alt_secondary"] = alt_secondary
            __props__.__dict__["cache_notfound_responses"] = cache_notfound_responses
            __props__.__dict__["dns_cache_limit"] = dns_cache_limit
            __props__.__dict__["dns_cache_ttl"] = dns_cache_ttl
            __props__.__dict__["dns_over_tls"] = dns_over_tls
            __props__.__dict__["domains"] = domains
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fqdn_cache_ttl"] = fqdn_cache_ttl
            __props__.__dict__["fqdn_max_refresh"] = fqdn_max_refresh
            __props__.__dict__["fqdn_min_refresh"] = fqdn_min_refresh
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["ip6_primary"] = ip6_primary
            __props__.__dict__["ip6_secondary"] = ip6_secondary
            __props__.__dict__["log"] = log
            if primary is None and not opts.urn:
                raise TypeError("Missing required property 'primary'")
            __props__.__dict__["primary"] = primary
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["retry"] = retry
            __props__.__dict__["secondary"] = secondary
            __props__.__dict__["server_hostnames"] = server_hostnames
            __props__.__dict__["server_select_method"] = server_select_method
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["ssl_certificate"] = ssl_certificate
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["vdomparam"] = vdomparam
        super(SystemDns, __self__).__init__(
            'fortios:index/systemDns:SystemDns',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alt_primary: Optional[pulumi.Input[str]] = None,
            alt_secondary: Optional[pulumi.Input[str]] = None,
            cache_notfound_responses: Optional[pulumi.Input[str]] = None,
            dns_cache_limit: Optional[pulumi.Input[int]] = None,
            dns_cache_ttl: Optional[pulumi.Input[int]] = None,
            dns_over_tls: Optional[pulumi.Input[str]] = None,
            domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDnsDomainArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fqdn_cache_ttl: Optional[pulumi.Input[int]] = None,
            fqdn_max_refresh: Optional[pulumi.Input[int]] = None,
            fqdn_min_refresh: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            ip6_primary: Optional[pulumi.Input[str]] = None,
            ip6_secondary: Optional[pulumi.Input[str]] = None,
            log: Optional[pulumi.Input[str]] = None,
            primary: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            retry: Optional[pulumi.Input[int]] = None,
            secondary: Optional[pulumi.Input[str]] = None,
            server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDnsServerHostnameArgs']]]]] = None,
            server_select_method: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            ssl_certificate: Optional[pulumi.Input[str]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemDns':
        """
        Get an existing SystemDns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemDnsState.__new__(_SystemDnsState)

        __props__.__dict__["alt_primary"] = alt_primary
        __props__.__dict__["alt_secondary"] = alt_secondary
        __props__.__dict__["cache_notfound_responses"] = cache_notfound_responses
        __props__.__dict__["dns_cache_limit"] = dns_cache_limit
        __props__.__dict__["dns_cache_ttl"] = dns_cache_ttl
        __props__.__dict__["dns_over_tls"] = dns_over_tls
        __props__.__dict__["domains"] = domains
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fqdn_cache_ttl"] = fqdn_cache_ttl
        __props__.__dict__["fqdn_max_refresh"] = fqdn_max_refresh
        __props__.__dict__["fqdn_min_refresh"] = fqdn_min_refresh
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["ip6_primary"] = ip6_primary
        __props__.__dict__["ip6_secondary"] = ip6_secondary
        __props__.__dict__["log"] = log
        __props__.__dict__["primary"] = primary
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["retry"] = retry
        __props__.__dict__["secondary"] = secondary
        __props__.__dict__["server_hostnames"] = server_hostnames
        __props__.__dict__["server_select_method"] = server_select_method
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["ssl_certificate"] = ssl_certificate
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemDns(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="altPrimary")
    def alt_primary(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alt_primary")

    @property
    @pulumi.getter(name="altSecondary")
    def alt_secondary(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alt_secondary")

    @property
    @pulumi.getter(name="cacheNotfoundResponses")
    def cache_notfound_responses(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_notfound_responses")

    @property
    @pulumi.getter(name="dnsCacheLimit")
    def dns_cache_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dns_cache_limit")

    @property
    @pulumi.getter(name="dnsCacheTtl")
    def dns_cache_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dns_cache_ttl")

    @property
    @pulumi.getter(name="dnsOverTls")
    def dns_over_tls(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_over_tls")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDnsDomain']]]:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fqdnCacheTtl")
    def fqdn_cache_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fqdn_cache_ttl")

    @property
    @pulumi.getter(name="fqdnMaxRefresh")
    def fqdn_max_refresh(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fqdn_max_refresh")

    @property
    @pulumi.getter(name="fqdnMinRefresh")
    def fqdn_min_refresh(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fqdn_min_refresh")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="ip6Primary")
    def ip6_primary(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip6_primary")

    @property
    @pulumi.getter(name="ip6Secondary")
    def ip6_secondary(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip6_secondary")

    @property
    @pulumi.getter
    def log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def primary(self) -> pulumi.Output[str]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def retry(self) -> pulumi.Output[int]:
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter
    def secondary(self) -> pulumi.Output[str]:
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter(name="serverHostnames")
    def server_hostnames(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDnsServerHostname']]]:
        return pulumi.get(self, "server_hostnames")

    @property
    @pulumi.getter(name="serverSelectMethod")
    def server_select_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_certificate")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

