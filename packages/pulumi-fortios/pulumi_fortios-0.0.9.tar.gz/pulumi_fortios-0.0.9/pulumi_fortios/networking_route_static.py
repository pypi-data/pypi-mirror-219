# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NetworkingRouteStaticArgs', 'NetworkingRouteStatic']

@pulumi.input_type
class NetworkingRouteStaticArgs:
    def __init__(__self__, *,
                 device: pulumi.Input[str],
                 gateway: pulumi.Input[str],
                 blackhole: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkingRouteStatic resource.
        """
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "gateway", gateway)
        if blackhole is not None:
            pulumi.set(__self__, "blackhole", blackhole)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Input[str]:
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: pulumi.Input[str]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def blackhole(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blackhole")

    @blackhole.setter
    def blackhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blackhole", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _NetworkingRouteStaticState:
    def __init__(__self__, *,
                 blackhole: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NetworkingRouteStatic resources.
        """
        if blackhole is not None:
            pulumi.set(__self__, "blackhole", blackhole)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def blackhole(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blackhole")

    @blackhole.setter
    def blackhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blackhole", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weight", value)


class NetworkingRouteStatic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blackhole: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NetworkingRouteStatic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkingRouteStaticArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkingRouteStatic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkingRouteStaticArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkingRouteStaticArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blackhole: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkingRouteStaticArgs.__new__(NetworkingRouteStaticArgs)

            __props__.__dict__["blackhole"] = blackhole
            __props__.__dict__["comment"] = comment
            if device is None and not opts.urn:
                raise TypeError("Missing required property 'device'")
            __props__.__dict__["device"] = device
            __props__.__dict__["distance"] = distance
            __props__.__dict__["dst"] = dst
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["internet_service"] = internet_service
            __props__.__dict__["priority"] = priority
            __props__.__dict__["status"] = status
            __props__.__dict__["weight"] = weight
        super(NetworkingRouteStatic, __self__).__init__(
            'fortios:index/networkingRouteStatic:NetworkingRouteStatic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            blackhole: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            distance: Optional[pulumi.Input[str]] = None,
            dst: Optional[pulumi.Input[str]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            internet_service: Optional[pulumi.Input[int]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            weight: Optional[pulumi.Input[str]] = None) -> 'NetworkingRouteStatic':
        """
        Get an existing NetworkingRouteStatic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkingRouteStaticState.__new__(_NetworkingRouteStaticState)

        __props__.__dict__["blackhole"] = blackhole
        __props__.__dict__["comment"] = comment
        __props__.__dict__["device"] = device
        __props__.__dict__["distance"] = distance
        __props__.__dict__["dst"] = dst
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["internet_service"] = internet_service
        __props__.__dict__["priority"] = priority
        __props__.__dict__["status"] = status
        __props__.__dict__["weight"] = weight
        return NetworkingRouteStatic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def blackhole(self) -> pulumi.Output[str]:
        return pulumi.get(self, "blackhole")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[str]:
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def dst(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> pulumi.Output[int]:
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[str]:
        return pulumi.get(self, "weight")

