# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetFirewallCentralSnatMapResult',
    'AwaitableGetFirewallCentralSnatMapResult',
    'get_firewall_central_snat_map',
    'get_firewall_central_snat_map_output',
]

@pulumi.output_type
class GetFirewallCentralSnatMapResult:
    """
    A collection of values returned by GetFirewallCentralSnatMap.
    """
    def __init__(__self__, comments=None, dst_addr6s=None, dst_addrs=None, dst_port=None, dstintfs=None, id=None, nat=None, nat46=None, nat64=None, nat_ippool6s=None, nat_ippools=None, nat_port=None, orig_addr6s=None, orig_addrs=None, orig_port=None, policyid=None, protocol=None, srcintfs=None, status=None, type=None, uuid=None, vdomparam=None):
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if dst_addr6s and not isinstance(dst_addr6s, list):
            raise TypeError("Expected argument 'dst_addr6s' to be a list")
        pulumi.set(__self__, "dst_addr6s", dst_addr6s)
        if dst_addrs and not isinstance(dst_addrs, list):
            raise TypeError("Expected argument 'dst_addrs' to be a list")
        pulumi.set(__self__, "dst_addrs", dst_addrs)
        if dst_port and not isinstance(dst_port, str):
            raise TypeError("Expected argument 'dst_port' to be a str")
        pulumi.set(__self__, "dst_port", dst_port)
        if dstintfs and not isinstance(dstintfs, list):
            raise TypeError("Expected argument 'dstintfs' to be a list")
        pulumi.set(__self__, "dstintfs", dstintfs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nat and not isinstance(nat, str):
            raise TypeError("Expected argument 'nat' to be a str")
        pulumi.set(__self__, "nat", nat)
        if nat46 and not isinstance(nat46, str):
            raise TypeError("Expected argument 'nat46' to be a str")
        pulumi.set(__self__, "nat46", nat46)
        if nat64 and not isinstance(nat64, str):
            raise TypeError("Expected argument 'nat64' to be a str")
        pulumi.set(__self__, "nat64", nat64)
        if nat_ippool6s and not isinstance(nat_ippool6s, list):
            raise TypeError("Expected argument 'nat_ippool6s' to be a list")
        pulumi.set(__self__, "nat_ippool6s", nat_ippool6s)
        if nat_ippools and not isinstance(nat_ippools, list):
            raise TypeError("Expected argument 'nat_ippools' to be a list")
        pulumi.set(__self__, "nat_ippools", nat_ippools)
        if nat_port and not isinstance(nat_port, str):
            raise TypeError("Expected argument 'nat_port' to be a str")
        pulumi.set(__self__, "nat_port", nat_port)
        if orig_addr6s and not isinstance(orig_addr6s, list):
            raise TypeError("Expected argument 'orig_addr6s' to be a list")
        pulumi.set(__self__, "orig_addr6s", orig_addr6s)
        if orig_addrs and not isinstance(orig_addrs, list):
            raise TypeError("Expected argument 'orig_addrs' to be a list")
        pulumi.set(__self__, "orig_addrs", orig_addrs)
        if orig_port and not isinstance(orig_port, str):
            raise TypeError("Expected argument 'orig_port' to be a str")
        pulumi.set(__self__, "orig_port", orig_port)
        if policyid and not isinstance(policyid, int):
            raise TypeError("Expected argument 'policyid' to be a int")
        pulumi.set(__self__, "policyid", policyid)
        if protocol and not isinstance(protocol, int):
            raise TypeError("Expected argument 'protocol' to be a int")
        pulumi.set(__self__, "protocol", protocol)
        if srcintfs and not isinstance(srcintfs, list):
            raise TypeError("Expected argument 'srcintfs' to be a list")
        pulumi.set(__self__, "srcintfs", srcintfs)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dstAddr6s")
    def dst_addr6s(self) -> Sequence['outputs.GetFirewallCentralSnatMapDstAddr6Result']:
        return pulumi.get(self, "dst_addr6s")

    @property
    @pulumi.getter(name="dstAddrs")
    def dst_addrs(self) -> Sequence['outputs.GetFirewallCentralSnatMapDstAddrResult']:
        return pulumi.get(self, "dst_addrs")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> str:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def dstintfs(self) -> Sequence['outputs.GetFirewallCentralSnatMapDstintfResult']:
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def nat(self) -> str:
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def nat46(self) -> str:
        return pulumi.get(self, "nat46")

    @property
    @pulumi.getter
    def nat64(self) -> str:
        return pulumi.get(self, "nat64")

    @property
    @pulumi.getter(name="natIppool6s")
    def nat_ippool6s(self) -> Sequence['outputs.GetFirewallCentralSnatMapNatIppool6Result']:
        return pulumi.get(self, "nat_ippool6s")

    @property
    @pulumi.getter(name="natIppools")
    def nat_ippools(self) -> Sequence['outputs.GetFirewallCentralSnatMapNatIppoolResult']:
        return pulumi.get(self, "nat_ippools")

    @property
    @pulumi.getter(name="natPort")
    def nat_port(self) -> str:
        return pulumi.get(self, "nat_port")

    @property
    @pulumi.getter(name="origAddr6s")
    def orig_addr6s(self) -> Sequence['outputs.GetFirewallCentralSnatMapOrigAddr6Result']:
        return pulumi.get(self, "orig_addr6s")

    @property
    @pulumi.getter(name="origAddrs")
    def orig_addrs(self) -> Sequence['outputs.GetFirewallCentralSnatMapOrigAddrResult']:
        return pulumi.get(self, "orig_addrs")

    @property
    @pulumi.getter(name="origPort")
    def orig_port(self) -> str:
        return pulumi.get(self, "orig_port")

    @property
    @pulumi.getter
    def policyid(self) -> int:
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def srcintfs(self) -> Sequence['outputs.GetFirewallCentralSnatMapSrcintfResult']:
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetFirewallCentralSnatMapResult(GetFirewallCentralSnatMapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallCentralSnatMapResult(
            comments=self.comments,
            dst_addr6s=self.dst_addr6s,
            dst_addrs=self.dst_addrs,
            dst_port=self.dst_port,
            dstintfs=self.dstintfs,
            id=self.id,
            nat=self.nat,
            nat46=self.nat46,
            nat64=self.nat64,
            nat_ippool6s=self.nat_ippool6s,
            nat_ippools=self.nat_ippools,
            nat_port=self.nat_port,
            orig_addr6s=self.orig_addr6s,
            orig_addrs=self.orig_addrs,
            orig_port=self.orig_port,
            policyid=self.policyid,
            protocol=self.protocol,
            srcintfs=self.srcintfs,
            status=self.status,
            type=self.type,
            uuid=self.uuid,
            vdomparam=self.vdomparam)


def get_firewall_central_snat_map(policyid: Optional[int] = None,
                                  vdomparam: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallCentralSnatMapResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['policyid'] = policyid
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getFirewallCentralSnatMap:GetFirewallCentralSnatMap', __args__, opts=opts, typ=GetFirewallCentralSnatMapResult).value

    return AwaitableGetFirewallCentralSnatMapResult(
        comments=pulumi.get(__ret__, 'comments'),
        dst_addr6s=pulumi.get(__ret__, 'dst_addr6s'),
        dst_addrs=pulumi.get(__ret__, 'dst_addrs'),
        dst_port=pulumi.get(__ret__, 'dst_port'),
        dstintfs=pulumi.get(__ret__, 'dstintfs'),
        id=pulumi.get(__ret__, 'id'),
        nat=pulumi.get(__ret__, 'nat'),
        nat46=pulumi.get(__ret__, 'nat46'),
        nat64=pulumi.get(__ret__, 'nat64'),
        nat_ippool6s=pulumi.get(__ret__, 'nat_ippool6s'),
        nat_ippools=pulumi.get(__ret__, 'nat_ippools'),
        nat_port=pulumi.get(__ret__, 'nat_port'),
        orig_addr6s=pulumi.get(__ret__, 'orig_addr6s'),
        orig_addrs=pulumi.get(__ret__, 'orig_addrs'),
        orig_port=pulumi.get(__ret__, 'orig_port'),
        policyid=pulumi.get(__ret__, 'policyid'),
        protocol=pulumi.get(__ret__, 'protocol'),
        srcintfs=pulumi.get(__ret__, 'srcintfs'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_firewall_central_snat_map)
def get_firewall_central_snat_map_output(policyid: Optional[pulumi.Input[int]] = None,
                                         vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallCentralSnatMapResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
