# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemReplacemsgGroupArgs', 'SystemReplacemsgGroup']

@pulumi.input_type
class SystemReplacemsgGroupArgs:
    def __init__(__self__, *,
                 group_type: pulumi.Input[str],
                 admins: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAdminArgs']]]] = None,
                 alertmails: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAlertmailArgs']]]] = None,
                 auths: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAuthArgs']]]] = None,
                 automations: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAutomationArgs']]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 custom_messages: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupCustomMessageArgs']]]] = None,
                 device_detection_portals: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupDeviceDetectionPortalArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ecs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupEcArgs']]]] = None,
                 fortiguard_wfs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFortiguardWfArgs']]]] = None,
                 ftps: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFtpArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupHttpArgs']]]] = None,
                 icaps: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupIcapArgs']]]] = None,
                 mails: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupMailArgs']]]] = None,
                 nac_quars: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNacQuarArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntps: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNntpArgs']]]] = None,
                 spams: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSpamArgs']]]] = None,
                 sslvpns: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSslvpnArgs']]]] = None,
                 traffic_quotas: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupTrafficQuotaArgs']]]] = None,
                 utms: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupUtmArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webproxies: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupWebproxyArgs']]]] = None):
        """
        The set of arguments for constructing a SystemReplacemsgGroup resource.
        """
        pulumi.set(__self__, "group_type", group_type)
        if admins is not None:
            pulumi.set(__self__, "admins", admins)
        if alertmails is not None:
            pulumi.set(__self__, "alertmails", alertmails)
        if auths is not None:
            pulumi.set(__self__, "auths", auths)
        if automations is not None:
            pulumi.set(__self__, "automations", automations)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if custom_messages is not None:
            pulumi.set(__self__, "custom_messages", custom_messages)
        if device_detection_portals is not None:
            pulumi.set(__self__, "device_detection_portals", device_detection_portals)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ecs is not None:
            pulumi.set(__self__, "ecs", ecs)
        if fortiguard_wfs is not None:
            pulumi.set(__self__, "fortiguard_wfs", fortiguard_wfs)
        if ftps is not None:
            pulumi.set(__self__, "ftps", ftps)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if https is not None:
            pulumi.set(__self__, "https", https)
        if icaps is not None:
            pulumi.set(__self__, "icaps", icaps)
        if mails is not None:
            pulumi.set(__self__, "mails", mails)
        if nac_quars is not None:
            pulumi.set(__self__, "nac_quars", nac_quars)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nntps is not None:
            pulumi.set(__self__, "nntps", nntps)
        if spams is not None:
            pulumi.set(__self__, "spams", spams)
        if sslvpns is not None:
            pulumi.set(__self__, "sslvpns", sslvpns)
        if traffic_quotas is not None:
            pulumi.set(__self__, "traffic_quotas", traffic_quotas)
        if utms is not None:
            pulumi.set(__self__, "utms", utms)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webproxies is not None:
            pulumi.set(__self__, "webproxies", webproxies)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter
    def admins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAdminArgs']]]]:
        return pulumi.get(self, "admins")

    @admins.setter
    def admins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAdminArgs']]]]):
        pulumi.set(self, "admins", value)

    @property
    @pulumi.getter
    def alertmails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAlertmailArgs']]]]:
        return pulumi.get(self, "alertmails")

    @alertmails.setter
    def alertmails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAlertmailArgs']]]]):
        pulumi.set(self, "alertmails", value)

    @property
    @pulumi.getter
    def auths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAuthArgs']]]]:
        return pulumi.get(self, "auths")

    @auths.setter
    def auths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAuthArgs']]]]):
        pulumi.set(self, "auths", value)

    @property
    @pulumi.getter
    def automations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAutomationArgs']]]]:
        return pulumi.get(self, "automations")

    @automations.setter
    def automations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAutomationArgs']]]]):
        pulumi.set(self, "automations", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="customMessages")
    def custom_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupCustomMessageArgs']]]]:
        return pulumi.get(self, "custom_messages")

    @custom_messages.setter
    def custom_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupCustomMessageArgs']]]]):
        pulumi.set(self, "custom_messages", value)

    @property
    @pulumi.getter(name="deviceDetectionPortals")
    def device_detection_portals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupDeviceDetectionPortalArgs']]]]:
        return pulumi.get(self, "device_detection_portals")

    @device_detection_portals.setter
    def device_detection_portals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupDeviceDetectionPortalArgs']]]]):
        pulumi.set(self, "device_detection_portals", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def ecs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupEcArgs']]]]:
        return pulumi.get(self, "ecs")

    @ecs.setter
    def ecs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupEcArgs']]]]):
        pulumi.set(self, "ecs", value)

    @property
    @pulumi.getter(name="fortiguardWfs")
    def fortiguard_wfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFortiguardWfArgs']]]]:
        return pulumi.get(self, "fortiguard_wfs")

    @fortiguard_wfs.setter
    def fortiguard_wfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFortiguardWfArgs']]]]):
        pulumi.set(self, "fortiguard_wfs", value)

    @property
    @pulumi.getter
    def ftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFtpArgs']]]]:
        return pulumi.get(self, "ftps")

    @ftps.setter
    def ftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFtpArgs']]]]):
        pulumi.set(self, "ftps", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupHttpArgs']]]]:
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupHttpArgs']]]]):
        pulumi.set(self, "https", value)

    @property
    @pulumi.getter
    def icaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupIcapArgs']]]]:
        return pulumi.get(self, "icaps")

    @icaps.setter
    def icaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupIcapArgs']]]]):
        pulumi.set(self, "icaps", value)

    @property
    @pulumi.getter
    def mails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupMailArgs']]]]:
        return pulumi.get(self, "mails")

    @mails.setter
    def mails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupMailArgs']]]]):
        pulumi.set(self, "mails", value)

    @property
    @pulumi.getter(name="nacQuars")
    def nac_quars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNacQuarArgs']]]]:
        return pulumi.get(self, "nac_quars")

    @nac_quars.setter
    def nac_quars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNacQuarArgs']]]]):
        pulumi.set(self, "nac_quars", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nntps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNntpArgs']]]]:
        return pulumi.get(self, "nntps")

    @nntps.setter
    def nntps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNntpArgs']]]]):
        pulumi.set(self, "nntps", value)

    @property
    @pulumi.getter
    def spams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSpamArgs']]]]:
        return pulumi.get(self, "spams")

    @spams.setter
    def spams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSpamArgs']]]]):
        pulumi.set(self, "spams", value)

    @property
    @pulumi.getter
    def sslvpns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSslvpnArgs']]]]:
        return pulumi.get(self, "sslvpns")

    @sslvpns.setter
    def sslvpns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSslvpnArgs']]]]):
        pulumi.set(self, "sslvpns", value)

    @property
    @pulumi.getter(name="trafficQuotas")
    def traffic_quotas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupTrafficQuotaArgs']]]]:
        return pulumi.get(self, "traffic_quotas")

    @traffic_quotas.setter
    def traffic_quotas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupTrafficQuotaArgs']]]]):
        pulumi.set(self, "traffic_quotas", value)

    @property
    @pulumi.getter
    def utms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupUtmArgs']]]]:
        return pulumi.get(self, "utms")

    @utms.setter
    def utms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupUtmArgs']]]]):
        pulumi.set(self, "utms", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def webproxies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupWebproxyArgs']]]]:
        return pulumi.get(self, "webproxies")

    @webproxies.setter
    def webproxies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupWebproxyArgs']]]]):
        pulumi.set(self, "webproxies", value)


@pulumi.input_type
class _SystemReplacemsgGroupState:
    def __init__(__self__, *,
                 admins: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAdminArgs']]]] = None,
                 alertmails: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAlertmailArgs']]]] = None,
                 auths: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAuthArgs']]]] = None,
                 automations: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAutomationArgs']]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 custom_messages: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupCustomMessageArgs']]]] = None,
                 device_detection_portals: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupDeviceDetectionPortalArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ecs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupEcArgs']]]] = None,
                 fortiguard_wfs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFortiguardWfArgs']]]] = None,
                 ftps: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFtpArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 https: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupHttpArgs']]]] = None,
                 icaps: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupIcapArgs']]]] = None,
                 mails: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupMailArgs']]]] = None,
                 nac_quars: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNacQuarArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntps: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNntpArgs']]]] = None,
                 spams: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSpamArgs']]]] = None,
                 sslvpns: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSslvpnArgs']]]] = None,
                 traffic_quotas: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupTrafficQuotaArgs']]]] = None,
                 utms: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupUtmArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webproxies: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupWebproxyArgs']]]] = None):
        """
        Input properties used for looking up and filtering SystemReplacemsgGroup resources.
        """
        if admins is not None:
            pulumi.set(__self__, "admins", admins)
        if alertmails is not None:
            pulumi.set(__self__, "alertmails", alertmails)
        if auths is not None:
            pulumi.set(__self__, "auths", auths)
        if automations is not None:
            pulumi.set(__self__, "automations", automations)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if custom_messages is not None:
            pulumi.set(__self__, "custom_messages", custom_messages)
        if device_detection_portals is not None:
            pulumi.set(__self__, "device_detection_portals", device_detection_portals)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ecs is not None:
            pulumi.set(__self__, "ecs", ecs)
        if fortiguard_wfs is not None:
            pulumi.set(__self__, "fortiguard_wfs", fortiguard_wfs)
        if ftps is not None:
            pulumi.set(__self__, "ftps", ftps)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if https is not None:
            pulumi.set(__self__, "https", https)
        if icaps is not None:
            pulumi.set(__self__, "icaps", icaps)
        if mails is not None:
            pulumi.set(__self__, "mails", mails)
        if nac_quars is not None:
            pulumi.set(__self__, "nac_quars", nac_quars)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nntps is not None:
            pulumi.set(__self__, "nntps", nntps)
        if spams is not None:
            pulumi.set(__self__, "spams", spams)
        if sslvpns is not None:
            pulumi.set(__self__, "sslvpns", sslvpns)
        if traffic_quotas is not None:
            pulumi.set(__self__, "traffic_quotas", traffic_quotas)
        if utms is not None:
            pulumi.set(__self__, "utms", utms)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webproxies is not None:
            pulumi.set(__self__, "webproxies", webproxies)

    @property
    @pulumi.getter
    def admins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAdminArgs']]]]:
        return pulumi.get(self, "admins")

    @admins.setter
    def admins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAdminArgs']]]]):
        pulumi.set(self, "admins", value)

    @property
    @pulumi.getter
    def alertmails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAlertmailArgs']]]]:
        return pulumi.get(self, "alertmails")

    @alertmails.setter
    def alertmails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAlertmailArgs']]]]):
        pulumi.set(self, "alertmails", value)

    @property
    @pulumi.getter
    def auths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAuthArgs']]]]:
        return pulumi.get(self, "auths")

    @auths.setter
    def auths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAuthArgs']]]]):
        pulumi.set(self, "auths", value)

    @property
    @pulumi.getter
    def automations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAutomationArgs']]]]:
        return pulumi.get(self, "automations")

    @automations.setter
    def automations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupAutomationArgs']]]]):
        pulumi.set(self, "automations", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="customMessages")
    def custom_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupCustomMessageArgs']]]]:
        return pulumi.get(self, "custom_messages")

    @custom_messages.setter
    def custom_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupCustomMessageArgs']]]]):
        pulumi.set(self, "custom_messages", value)

    @property
    @pulumi.getter(name="deviceDetectionPortals")
    def device_detection_portals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupDeviceDetectionPortalArgs']]]]:
        return pulumi.get(self, "device_detection_portals")

    @device_detection_portals.setter
    def device_detection_portals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupDeviceDetectionPortalArgs']]]]):
        pulumi.set(self, "device_detection_portals", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def ecs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupEcArgs']]]]:
        return pulumi.get(self, "ecs")

    @ecs.setter
    def ecs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupEcArgs']]]]):
        pulumi.set(self, "ecs", value)

    @property
    @pulumi.getter(name="fortiguardWfs")
    def fortiguard_wfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFortiguardWfArgs']]]]:
        return pulumi.get(self, "fortiguard_wfs")

    @fortiguard_wfs.setter
    def fortiguard_wfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFortiguardWfArgs']]]]):
        pulumi.set(self, "fortiguard_wfs", value)

    @property
    @pulumi.getter
    def ftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFtpArgs']]]]:
        return pulumi.get(self, "ftps")

    @ftps.setter
    def ftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupFtpArgs']]]]):
        pulumi.set(self, "ftps", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupHttpArgs']]]]:
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupHttpArgs']]]]):
        pulumi.set(self, "https", value)

    @property
    @pulumi.getter
    def icaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupIcapArgs']]]]:
        return pulumi.get(self, "icaps")

    @icaps.setter
    def icaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupIcapArgs']]]]):
        pulumi.set(self, "icaps", value)

    @property
    @pulumi.getter
    def mails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupMailArgs']]]]:
        return pulumi.get(self, "mails")

    @mails.setter
    def mails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupMailArgs']]]]):
        pulumi.set(self, "mails", value)

    @property
    @pulumi.getter(name="nacQuars")
    def nac_quars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNacQuarArgs']]]]:
        return pulumi.get(self, "nac_quars")

    @nac_quars.setter
    def nac_quars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNacQuarArgs']]]]):
        pulumi.set(self, "nac_quars", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nntps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNntpArgs']]]]:
        return pulumi.get(self, "nntps")

    @nntps.setter
    def nntps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupNntpArgs']]]]):
        pulumi.set(self, "nntps", value)

    @property
    @pulumi.getter
    def spams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSpamArgs']]]]:
        return pulumi.get(self, "spams")

    @spams.setter
    def spams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSpamArgs']]]]):
        pulumi.set(self, "spams", value)

    @property
    @pulumi.getter
    def sslvpns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSslvpnArgs']]]]:
        return pulumi.get(self, "sslvpns")

    @sslvpns.setter
    def sslvpns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupSslvpnArgs']]]]):
        pulumi.set(self, "sslvpns", value)

    @property
    @pulumi.getter(name="trafficQuotas")
    def traffic_quotas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupTrafficQuotaArgs']]]]:
        return pulumi.get(self, "traffic_quotas")

    @traffic_quotas.setter
    def traffic_quotas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupTrafficQuotaArgs']]]]):
        pulumi.set(self, "traffic_quotas", value)

    @property
    @pulumi.getter
    def utms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupUtmArgs']]]]:
        return pulumi.get(self, "utms")

    @utms.setter
    def utms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupUtmArgs']]]]):
        pulumi.set(self, "utms", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def webproxies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupWebproxyArgs']]]]:
        return pulumi.get(self, "webproxies")

    @webproxies.setter
    def webproxies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemReplacemsgGroupWebproxyArgs']]]]):
        pulumi.set(self, "webproxies", value)


class SystemReplacemsgGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admins: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAdminArgs']]]]] = None,
                 alertmails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAlertmailArgs']]]]] = None,
                 auths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAuthArgs']]]]] = None,
                 automations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAutomationArgs']]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 custom_messages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupCustomMessageArgs']]]]] = None,
                 device_detection_portals: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupDeviceDetectionPortalArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ecs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupEcArgs']]]]] = None,
                 fortiguard_wfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupFortiguardWfArgs']]]]] = None,
                 ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupFtpArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 https: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupHttpArgs']]]]] = None,
                 icaps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupIcapArgs']]]]] = None,
                 mails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupMailArgs']]]]] = None,
                 nac_quars: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupNacQuarArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupNntpArgs']]]]] = None,
                 spams: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupSpamArgs']]]]] = None,
                 sslvpns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupSslvpnArgs']]]]] = None,
                 traffic_quotas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupTrafficQuotaArgs']]]]] = None,
                 utms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupUtmArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webproxies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupWebproxyArgs']]]]] = None,
                 __props__=None):
        """
        Create a SystemReplacemsgGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemReplacemsgGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemReplacemsgGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemReplacemsgGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemReplacemsgGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admins: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAdminArgs']]]]] = None,
                 alertmails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAlertmailArgs']]]]] = None,
                 auths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAuthArgs']]]]] = None,
                 automations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAutomationArgs']]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 custom_messages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupCustomMessageArgs']]]]] = None,
                 device_detection_portals: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupDeviceDetectionPortalArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ecs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupEcArgs']]]]] = None,
                 fortiguard_wfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupFortiguardWfArgs']]]]] = None,
                 ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupFtpArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 https: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupHttpArgs']]]]] = None,
                 icaps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupIcapArgs']]]]] = None,
                 mails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupMailArgs']]]]] = None,
                 nac_quars: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupNacQuarArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupNntpArgs']]]]] = None,
                 spams: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupSpamArgs']]]]] = None,
                 sslvpns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupSslvpnArgs']]]]] = None,
                 traffic_quotas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupTrafficQuotaArgs']]]]] = None,
                 utms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupUtmArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webproxies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupWebproxyArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemReplacemsgGroupArgs.__new__(SystemReplacemsgGroupArgs)

            __props__.__dict__["admins"] = admins
            __props__.__dict__["alertmails"] = alertmails
            __props__.__dict__["auths"] = auths
            __props__.__dict__["automations"] = automations
            __props__.__dict__["comment"] = comment
            __props__.__dict__["custom_messages"] = custom_messages
            __props__.__dict__["device_detection_portals"] = device_detection_portals
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ecs"] = ecs
            __props__.__dict__["fortiguard_wfs"] = fortiguard_wfs
            __props__.__dict__["ftps"] = ftps
            __props__.__dict__["get_all_tables"] = get_all_tables
            if group_type is None and not opts.urn:
                raise TypeError("Missing required property 'group_type'")
            __props__.__dict__["group_type"] = group_type
            __props__.__dict__["https"] = https
            __props__.__dict__["icaps"] = icaps
            __props__.__dict__["mails"] = mails
            __props__.__dict__["nac_quars"] = nac_quars
            __props__.__dict__["name"] = name
            __props__.__dict__["nntps"] = nntps
            __props__.__dict__["spams"] = spams
            __props__.__dict__["sslvpns"] = sslvpns
            __props__.__dict__["traffic_quotas"] = traffic_quotas
            __props__.__dict__["utms"] = utms
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["webproxies"] = webproxies
        super(SystemReplacemsgGroup, __self__).__init__(
            'fortios:index/systemReplacemsgGroup:SystemReplacemsgGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admins: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAdminArgs']]]]] = None,
            alertmails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAlertmailArgs']]]]] = None,
            auths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAuthArgs']]]]] = None,
            automations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupAutomationArgs']]]]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            custom_messages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupCustomMessageArgs']]]]] = None,
            device_detection_portals: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupDeviceDetectionPortalArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ecs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupEcArgs']]]]] = None,
            fortiguard_wfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupFortiguardWfArgs']]]]] = None,
            ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupFtpArgs']]]]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            group_type: Optional[pulumi.Input[str]] = None,
            https: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupHttpArgs']]]]] = None,
            icaps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupIcapArgs']]]]] = None,
            mails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupMailArgs']]]]] = None,
            nac_quars: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupNacQuarArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nntps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupNntpArgs']]]]] = None,
            spams: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupSpamArgs']]]]] = None,
            sslvpns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupSslvpnArgs']]]]] = None,
            traffic_quotas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupTrafficQuotaArgs']]]]] = None,
            utms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupUtmArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            webproxies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemReplacemsgGroupWebproxyArgs']]]]] = None) -> 'SystemReplacemsgGroup':
        """
        Get an existing SystemReplacemsgGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemReplacemsgGroupState.__new__(_SystemReplacemsgGroupState)

        __props__.__dict__["admins"] = admins
        __props__.__dict__["alertmails"] = alertmails
        __props__.__dict__["auths"] = auths
        __props__.__dict__["automations"] = automations
        __props__.__dict__["comment"] = comment
        __props__.__dict__["custom_messages"] = custom_messages
        __props__.__dict__["device_detection_portals"] = device_detection_portals
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ecs"] = ecs
        __props__.__dict__["fortiguard_wfs"] = fortiguard_wfs
        __props__.__dict__["ftps"] = ftps
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["group_type"] = group_type
        __props__.__dict__["https"] = https
        __props__.__dict__["icaps"] = icaps
        __props__.__dict__["mails"] = mails
        __props__.__dict__["nac_quars"] = nac_quars
        __props__.__dict__["name"] = name
        __props__.__dict__["nntps"] = nntps
        __props__.__dict__["spams"] = spams
        __props__.__dict__["sslvpns"] = sslvpns
        __props__.__dict__["traffic_quotas"] = traffic_quotas
        __props__.__dict__["utms"] = utms
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["webproxies"] = webproxies
        return SystemReplacemsgGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def admins(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupAdmin']]]:
        return pulumi.get(self, "admins")

    @property
    @pulumi.getter
    def alertmails(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupAlertmail']]]:
        return pulumi.get(self, "alertmails")

    @property
    @pulumi.getter
    def auths(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupAuth']]]:
        return pulumi.get(self, "auths")

    @property
    @pulumi.getter
    def automations(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupAutomation']]]:
        return pulumi.get(self, "automations")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="customMessages")
    def custom_messages(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupCustomMessage']]]:
        return pulumi.get(self, "custom_messages")

    @property
    @pulumi.getter(name="deviceDetectionPortals")
    def device_detection_portals(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupDeviceDetectionPortal']]]:
        return pulumi.get(self, "device_detection_portals")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def ecs(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupEc']]]:
        return pulumi.get(self, "ecs")

    @property
    @pulumi.getter(name="fortiguardWfs")
    def fortiguard_wfs(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupFortiguardWf']]]:
        return pulumi.get(self, "fortiguard_wfs")

    @property
    @pulumi.getter
    def ftps(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupFtp']]]:
        return pulumi.get(self, "ftps")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def https(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupHttp']]]:
        return pulumi.get(self, "https")

    @property
    @pulumi.getter
    def icaps(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupIcap']]]:
        return pulumi.get(self, "icaps")

    @property
    @pulumi.getter
    def mails(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupMail']]]:
        return pulumi.get(self, "mails")

    @property
    @pulumi.getter(name="nacQuars")
    def nac_quars(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupNacQuar']]]:
        return pulumi.get(self, "nac_quars")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nntps(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupNntp']]]:
        return pulumi.get(self, "nntps")

    @property
    @pulumi.getter
    def spams(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupSpam']]]:
        return pulumi.get(self, "spams")

    @property
    @pulumi.getter
    def sslvpns(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupSslvpn']]]:
        return pulumi.get(self, "sslvpns")

    @property
    @pulumi.getter(name="trafficQuotas")
    def traffic_quotas(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupTrafficQuota']]]:
        return pulumi.get(self, "traffic_quotas")

    @property
    @pulumi.getter
    def utms(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupUtm']]]:
        return pulumi.get(self, "utms")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def webproxies(self) -> pulumi.Output[Optional[Sequence['outputs.SystemReplacemsgGroupWebproxy']]]:
        return pulumi.get(self, "webproxies")

