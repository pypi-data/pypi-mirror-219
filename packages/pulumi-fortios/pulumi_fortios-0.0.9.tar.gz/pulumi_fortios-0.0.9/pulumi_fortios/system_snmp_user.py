# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemSnmpUserArgs', 'SystemSnmpUser']

@pulumi.input_type
class SystemSnmpUserArgs:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 notify_hosts6: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_lport: Optional[pulumi.Input[int]] = None,
                 trap_rport: Optional[pulumi.Input[int]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpUserVdomArgs']]]] = None):
        """
        The set of arguments for constructing a SystemSnmpUser resource.
        """
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if mib_view is not None:
            pulumi.set(__self__, "mib_view", mib_view)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_hosts is not None:
            pulumi.set(__self__, "notify_hosts", notify_hosts)
        if notify_hosts6 is not None:
            pulumi.set(__self__, "notify_hosts6", notify_hosts6)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query_port is not None:
            pulumi.set(__self__, "query_port", query_port)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ipv6 is not None:
            pulumi.set(__self__, "source_ipv6", source_ipv6)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_lport is not None:
            pulumi.set(__self__, "trap_lport", trap_lport)
        if trap_rport is not None:
            pulumi.set(__self__, "trap_rport", trap_rport)
        if trap_status is not None:
            pulumi.set(__self__, "trap_status", trap_status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="mibView")
    def mib_view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mib_view")

    @mib_view.setter
    def mib_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mib_view", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyHosts")
    def notify_hosts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_hosts")

    @notify_hosts.setter
    def notify_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts", value)

    @property
    @pulumi.getter(name="notifyHosts6")
    def notify_hosts6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_hosts6")

    @notify_hosts6.setter
    def notify_hosts6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts6", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_port")

    @query_port.setter
    def query_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_port", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ipv6")

    @source_ipv6.setter
    def source_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ipv6", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapLport")
    def trap_lport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_lport")

    @trap_lport.setter
    def trap_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_lport", value)

    @property
    @pulumi.getter(name="trapRport")
    def trap_rport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_rport")

    @trap_rport.setter
    def trap_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_rport", value)

    @property
    @pulumi.getter(name="trapStatus")
    def trap_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_status")

    @trap_status.setter
    def trap_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpUserVdomArgs']]]]:
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpUserVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


@pulumi.input_type
class _SystemSnmpUserState:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 notify_hosts6: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_lport: Optional[pulumi.Input[int]] = None,
                 trap_rport: Optional[pulumi.Input[int]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpUserVdomArgs']]]] = None):
        """
        Input properties used for looking up and filtering SystemSnmpUser resources.
        """
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if mib_view is not None:
            pulumi.set(__self__, "mib_view", mib_view)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_hosts is not None:
            pulumi.set(__self__, "notify_hosts", notify_hosts)
        if notify_hosts6 is not None:
            pulumi.set(__self__, "notify_hosts6", notify_hosts6)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query_port is not None:
            pulumi.set(__self__, "query_port", query_port)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ipv6 is not None:
            pulumi.set(__self__, "source_ipv6", source_ipv6)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_lport is not None:
            pulumi.set(__self__, "trap_lport", trap_lport)
        if trap_rport is not None:
            pulumi.set(__self__, "trap_rport", trap_rport)
        if trap_status is not None:
            pulumi.set(__self__, "trap_status", trap_status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="mibView")
    def mib_view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mib_view")

    @mib_view.setter
    def mib_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mib_view", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyHosts")
    def notify_hosts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_hosts")

    @notify_hosts.setter
    def notify_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts", value)

    @property
    @pulumi.getter(name="notifyHosts6")
    def notify_hosts6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_hosts6")

    @notify_hosts6.setter
    def notify_hosts6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts6", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_port")

    @query_port.setter
    def query_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_port", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ipv6")

    @source_ipv6.setter
    def source_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ipv6", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapLport")
    def trap_lport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_lport")

    @trap_lport.setter
    def trap_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_lport", value)

    @property
    @pulumi.getter(name="trapRport")
    def trap_rport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_rport")

    @trap_rport.setter
    def trap_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_rport", value)

    @property
    @pulumi.getter(name="trapStatus")
    def trap_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_status")

    @trap_status.setter
    def trap_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpUserVdomArgs']]]]:
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpUserVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


class SystemSnmpUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 notify_hosts6: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_lport: Optional[pulumi.Input[int]] = None,
                 trap_rport: Optional[pulumi.Input[int]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpUserVdomArgs']]]]] = None,
                 __props__=None):
        """
        Create a SystemSnmpUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemSnmpUserArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemSnmpUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemSnmpUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemSnmpUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 notify_hosts6: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_lport: Optional[pulumi.Input[int]] = None,
                 trap_rport: Optional[pulumi.Input[int]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpUserVdomArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemSnmpUserArgs.__new__(SystemSnmpUserArgs)

            __props__.__dict__["auth_proto"] = auth_proto
            __props__.__dict__["auth_pwd"] = None if auth_pwd is None else pulumi.Output.secret(auth_pwd)
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["events"] = events
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ha_direct"] = ha_direct
            __props__.__dict__["mib_view"] = mib_view
            __props__.__dict__["name"] = name
            __props__.__dict__["notify_hosts"] = notify_hosts
            __props__.__dict__["notify_hosts6"] = notify_hosts6
            __props__.__dict__["priv_proto"] = priv_proto
            __props__.__dict__["priv_pwd"] = None if priv_pwd is None else pulumi.Output.secret(priv_pwd)
            __props__.__dict__["queries"] = queries
            __props__.__dict__["query_port"] = query_port
            __props__.__dict__["security_level"] = security_level
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["source_ipv6"] = source_ipv6
            __props__.__dict__["status"] = status
            __props__.__dict__["trap_lport"] = trap_lport
            __props__.__dict__["trap_rport"] = trap_rport
            __props__.__dict__["trap_status"] = trap_status
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vdoms"] = vdoms
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authPwd", "privPwd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SystemSnmpUser, __self__).__init__(
            'fortios:index/systemSnmpUser:SystemSnmpUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_proto: Optional[pulumi.Input[str]] = None,
            auth_pwd: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            events: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ha_direct: Optional[pulumi.Input[str]] = None,
            mib_view: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notify_hosts: Optional[pulumi.Input[str]] = None,
            notify_hosts6: Optional[pulumi.Input[str]] = None,
            priv_proto: Optional[pulumi.Input[str]] = None,
            priv_pwd: Optional[pulumi.Input[str]] = None,
            queries: Optional[pulumi.Input[str]] = None,
            query_port: Optional[pulumi.Input[int]] = None,
            security_level: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            source_ipv6: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            trap_lport: Optional[pulumi.Input[int]] = None,
            trap_rport: Optional[pulumi.Input[int]] = None,
            trap_status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpUserVdomArgs']]]]] = None) -> 'SystemSnmpUser':
        """
        Get an existing SystemSnmpUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemSnmpUserState.__new__(_SystemSnmpUserState)

        __props__.__dict__["auth_proto"] = auth_proto
        __props__.__dict__["auth_pwd"] = auth_pwd
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["events"] = events
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ha_direct"] = ha_direct
        __props__.__dict__["mib_view"] = mib_view
        __props__.__dict__["name"] = name
        __props__.__dict__["notify_hosts"] = notify_hosts
        __props__.__dict__["notify_hosts6"] = notify_hosts6
        __props__.__dict__["priv_proto"] = priv_proto
        __props__.__dict__["priv_pwd"] = priv_pwd
        __props__.__dict__["queries"] = queries
        __props__.__dict__["query_port"] = query_port
        __props__.__dict__["security_level"] = security_level
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["source_ipv6"] = source_ipv6
        __props__.__dict__["status"] = status
        __props__.__dict__["trap_lport"] = trap_lport
        __props__.__dict__["trap_rport"] = trap_rport
        __props__.__dict__["trap_status"] = trap_status
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vdoms"] = vdoms
        return SystemSnmpUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_proto")

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "auth_pwd")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[str]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ha_direct")

    @property
    @pulumi.getter(name="mibView")
    def mib_view(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mib_view")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyHosts")
    def notify_hosts(self) -> pulumi.Output[str]:
        return pulumi.get(self, "notify_hosts")

    @property
    @pulumi.getter(name="notifyHosts6")
    def notify_hosts6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "notify_hosts6")

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priv_proto")

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "priv_pwd")

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Output[str]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "query_port")

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_level")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ipv6")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trapLport")
    def trap_lport(self) -> pulumi.Output[int]:
        return pulumi.get(self, "trap_lport")

    @property
    @pulumi.getter(name="trapRport")
    def trap_rport(self) -> pulumi.Output[int]:
        return pulumi.get(self, "trap_rport")

    @property
    @pulumi.getter(name="trapStatus")
    def trap_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trap_status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vdoms(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSnmpUserVdom']]]:
        return pulumi.get(self, "vdoms")

