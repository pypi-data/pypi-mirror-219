# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SystemDeviceUpgradeArgs', 'SystemDeviceUpgrade']

@pulumi.input_type
class SystemDeviceUpgradeArgs:
    def __init__(__self__, *,
                 device_type: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 maximum_minutes: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemDeviceUpgrade resource.
        """
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if maximum_minutes is not None:
            pulumi.set(__self__, "maximum_minutes", maximum_minutes)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if setup_time is not None:
            pulumi.set(__self__, "setup_time", setup_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timing is not None:
            pulumi.set(__self__, "timing", timing)
        if upgrade_path is not None:
            pulumi.set(__self__, "upgrade_path", upgrade_path)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="maximumMinutes")
    def maximum_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_minutes")

    @maximum_minutes.setter
    def maximum_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_minutes", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "setup_time")

    @setup_time.setter
    def setup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setup_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def timing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timing")

    @timing.setter
    def timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timing", value)

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upgrade_path")

    @upgrade_path.setter
    def upgrade_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_path", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemDeviceUpgradeState:
    def __init__(__self__, *,
                 device_type: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 maximum_minutes: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemDeviceUpgrade resources.
        """
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if maximum_minutes is not None:
            pulumi.set(__self__, "maximum_minutes", maximum_minutes)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if setup_time is not None:
            pulumi.set(__self__, "setup_time", setup_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timing is not None:
            pulumi.set(__self__, "timing", timing)
        if upgrade_path is not None:
            pulumi.set(__self__, "upgrade_path", upgrade_path)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="maximumMinutes")
    def maximum_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_minutes")

    @maximum_minutes.setter
    def maximum_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_minutes", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "setup_time")

    @setup_time.setter
    def setup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setup_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def timing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timing")

    @timing.setter
    def timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timing", value)

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upgrade_path")

    @upgrade_path.setter
    def upgrade_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_path", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemDeviceUpgrade(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 maximum_minutes: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemDeviceUpgrade resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemDeviceUpgradeArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemDeviceUpgrade resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemDeviceUpgradeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemDeviceUpgradeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 maximum_minutes: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemDeviceUpgradeArgs.__new__(SystemDeviceUpgradeArgs)

            __props__.__dict__["device_type"] = device_type
            __props__.__dict__["failure_reason"] = failure_reason
            __props__.__dict__["maximum_minutes"] = maximum_minutes
            __props__.__dict__["serial"] = serial
            __props__.__dict__["setup_time"] = setup_time
            __props__.__dict__["status"] = status
            __props__.__dict__["time"] = time
            __props__.__dict__["timing"] = timing
            __props__.__dict__["upgrade_path"] = upgrade_path
            __props__.__dict__["vdomparam"] = vdomparam
        super(SystemDeviceUpgrade, __self__).__init__(
            'fortios:index/systemDeviceUpgrade:SystemDeviceUpgrade',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device_type: Optional[pulumi.Input[str]] = None,
            failure_reason: Optional[pulumi.Input[str]] = None,
            maximum_minutes: Optional[pulumi.Input[int]] = None,
            serial: Optional[pulumi.Input[str]] = None,
            setup_time: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            time: Optional[pulumi.Input[str]] = None,
            timing: Optional[pulumi.Input[str]] = None,
            upgrade_path: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemDeviceUpgrade':
        """
        Get an existing SystemDeviceUpgrade resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemDeviceUpgradeState.__new__(_SystemDeviceUpgradeState)

        __props__.__dict__["device_type"] = device_type
        __props__.__dict__["failure_reason"] = failure_reason
        __props__.__dict__["maximum_minutes"] = maximum_minutes
        __props__.__dict__["serial"] = serial
        __props__.__dict__["setup_time"] = setup_time
        __props__.__dict__["status"] = status
        __props__.__dict__["time"] = time
        __props__.__dict__["timing"] = timing
        __props__.__dict__["upgrade_path"] = upgrade_path
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemDeviceUpgrade(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> pulumi.Output[str]:
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="maximumMinutes")
    def maximum_minutes(self) -> pulumi.Output[int]:
        return pulumi.get(self, "maximum_minutes")

    @property
    @pulumi.getter
    def serial(self) -> pulumi.Output[str]:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "setup_time")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def timing(self) -> pulumi.Output[str]:
        return pulumi.get(self, "timing")

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upgrade_path")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

