# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemDhcp6ServerArgs', 'SystemDhcp6Server']

@pulumi.input_type
class SystemDhcp6ServerArgs:
    def __init__(__self__, *,
                 fosid: pulumi.Input[int],
                 interface: pulumi.Input[str],
                 subnet: pulumi.Input[str],
                 delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
                 dns_search_list: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerIpRangeArgs']]]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 option1: Optional[pulumi.Input[str]] = None,
                 option2: Optional[pulumi.Input[str]] = None,
                 option3: Optional[pulumi.Input[str]] = None,
                 prefix_mode: Optional[pulumi.Input[str]] = None,
                 prefix_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerPrefixRangeArgs']]]] = None,
                 rapid_commit: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upstream_interface: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemDhcp6Server resource.
        """
        pulumi.set(__self__, "fosid", fosid)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "subnet", subnet)
        if delegated_prefix_iaid is not None:
            pulumi.set(__self__, "delegated_prefix_iaid", delegated_prefix_iaid)
        if dns_search_list is not None:
            pulumi.set(__self__, "dns_search_list", dns_search_list)
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_server3 is not None:
            pulumi.set(__self__, "dns_server3", dns_server3)
        if dns_server4 is not None:
            pulumi.set(__self__, "dns_server4", dns_server4)
        if dns_service is not None:
            pulumi.set(__self__, "dns_service", dns_service)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_mode is not None:
            pulumi.set(__self__, "ip_mode", ip_mode)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if option1 is not None:
            pulumi.set(__self__, "option1", option1)
        if option2 is not None:
            pulumi.set(__self__, "option2", option2)
        if option3 is not None:
            pulumi.set(__self__, "option3", option3)
        if prefix_mode is not None:
            pulumi.set(__self__, "prefix_mode", prefix_mode)
        if prefix_ranges is not None:
            pulumi.set(__self__, "prefix_ranges", prefix_ranges)
        if rapid_commit is not None:
            pulumi.set(__self__, "rapid_commit", rapid_commit)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if upstream_interface is not None:
            pulumi.set(__self__, "upstream_interface", upstream_interface)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Input[int]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: pulumi.Input[int]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="delegatedPrefixIaid")
    def delegated_prefix_iaid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delegated_prefix_iaid")

    @delegated_prefix_iaid.setter
    def delegated_prefix_iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delegated_prefix_iaid", value)

    @property
    @pulumi.getter(name="dnsSearchList")
    def dns_search_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_search_list")

    @dns_search_list.setter
    def dns_search_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_search_list", value)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter(name="dnsServer3")
    def dns_server3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server3")

    @dns_server3.setter
    def dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server3", value)

    @property
    @pulumi.getter(name="dnsServer4")
    def dns_server4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server4")

    @dns_server4.setter
    def dns_server4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server4", value)

    @property
    @pulumi.getter(name="dnsService")
    def dns_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_service")

    @dns_service.setter
    def dns_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_service", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_mode")

    @ip_mode.setter
    def ip_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mode", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerIpRangeArgs']]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter
    def option1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option1")

    @option1.setter
    def option1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option1", value)

    @property
    @pulumi.getter
    def option2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option2")

    @option2.setter
    def option2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option2", value)

    @property
    @pulumi.getter
    def option3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option3")

    @option3.setter
    def option3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option3", value)

    @property
    @pulumi.getter(name="prefixMode")
    def prefix_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_mode")

    @prefix_mode.setter
    def prefix_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_mode", value)

    @property
    @pulumi.getter(name="prefixRanges")
    def prefix_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerPrefixRangeArgs']]]]:
        return pulumi.get(self, "prefix_ranges")

    @prefix_ranges.setter
    def prefix_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerPrefixRangeArgs']]]]):
        pulumi.set(self, "prefix_ranges", value)

    @property
    @pulumi.getter(name="rapidCommit")
    def rapid_commit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rapid_commit")

    @rapid_commit.setter
    def rapid_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rapid_commit", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="upstreamInterface")
    def upstream_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream_interface")

    @upstream_interface.setter
    def upstream_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_interface", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemDhcp6ServerState:
    def __init__(__self__, *,
                 delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
                 dns_search_list: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerIpRangeArgs']]]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 option1: Optional[pulumi.Input[str]] = None,
                 option2: Optional[pulumi.Input[str]] = None,
                 option3: Optional[pulumi.Input[str]] = None,
                 prefix_mode: Optional[pulumi.Input[str]] = None,
                 prefix_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerPrefixRangeArgs']]]] = None,
                 rapid_commit: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 upstream_interface: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemDhcp6Server resources.
        """
        if delegated_prefix_iaid is not None:
            pulumi.set(__self__, "delegated_prefix_iaid", delegated_prefix_iaid)
        if dns_search_list is not None:
            pulumi.set(__self__, "dns_search_list", dns_search_list)
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_server3 is not None:
            pulumi.set(__self__, "dns_server3", dns_server3)
        if dns_server4 is not None:
            pulumi.set(__self__, "dns_server4", dns_server4)
        if dns_service is not None:
            pulumi.set(__self__, "dns_service", dns_service)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_mode is not None:
            pulumi.set(__self__, "ip_mode", ip_mode)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if option1 is not None:
            pulumi.set(__self__, "option1", option1)
        if option2 is not None:
            pulumi.set(__self__, "option2", option2)
        if option3 is not None:
            pulumi.set(__self__, "option3", option3)
        if prefix_mode is not None:
            pulumi.set(__self__, "prefix_mode", prefix_mode)
        if prefix_ranges is not None:
            pulumi.set(__self__, "prefix_ranges", prefix_ranges)
        if rapid_commit is not None:
            pulumi.set(__self__, "rapid_commit", rapid_commit)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if upstream_interface is not None:
            pulumi.set(__self__, "upstream_interface", upstream_interface)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="delegatedPrefixIaid")
    def delegated_prefix_iaid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delegated_prefix_iaid")

    @delegated_prefix_iaid.setter
    def delegated_prefix_iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delegated_prefix_iaid", value)

    @property
    @pulumi.getter(name="dnsSearchList")
    def dns_search_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_search_list")

    @dns_search_list.setter
    def dns_search_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_search_list", value)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter(name="dnsServer3")
    def dns_server3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server3")

    @dns_server3.setter
    def dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server3", value)

    @property
    @pulumi.getter(name="dnsServer4")
    def dns_server4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server4")

    @dns_server4.setter
    def dns_server4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server4", value)

    @property
    @pulumi.getter(name="dnsService")
    def dns_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_service")

    @dns_service.setter
    def dns_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_service", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_mode")

    @ip_mode.setter
    def ip_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mode", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerIpRangeArgs']]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter
    def option1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option1")

    @option1.setter
    def option1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option1", value)

    @property
    @pulumi.getter
    def option2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option2")

    @option2.setter
    def option2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option2", value)

    @property
    @pulumi.getter
    def option3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option3")

    @option3.setter
    def option3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option3", value)

    @property
    @pulumi.getter(name="prefixMode")
    def prefix_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_mode")

    @prefix_mode.setter
    def prefix_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_mode", value)

    @property
    @pulumi.getter(name="prefixRanges")
    def prefix_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerPrefixRangeArgs']]]]:
        return pulumi.get(self, "prefix_ranges")

    @prefix_ranges.setter
    def prefix_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcp6ServerPrefixRangeArgs']]]]):
        pulumi.set(self, "prefix_ranges", value)

    @property
    @pulumi.getter(name="rapidCommit")
    def rapid_commit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rapid_commit")

    @rapid_commit.setter
    def rapid_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rapid_commit", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="upstreamInterface")
    def upstream_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream_interface")

    @upstream_interface.setter
    def upstream_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_interface", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemDhcp6Server(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
                 dns_search_list: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcp6ServerIpRangeArgs']]]]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 option1: Optional[pulumi.Input[str]] = None,
                 option2: Optional[pulumi.Input[str]] = None,
                 option3: Optional[pulumi.Input[str]] = None,
                 prefix_mode: Optional[pulumi.Input[str]] = None,
                 prefix_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcp6ServerPrefixRangeArgs']]]]] = None,
                 rapid_commit: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 upstream_interface: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemDhcp6Server resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemDhcp6ServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemDhcp6Server resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemDhcp6ServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemDhcp6ServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
                 dns_search_list: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcp6ServerIpRangeArgs']]]]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 option1: Optional[pulumi.Input[str]] = None,
                 option2: Optional[pulumi.Input[str]] = None,
                 option3: Optional[pulumi.Input[str]] = None,
                 prefix_mode: Optional[pulumi.Input[str]] = None,
                 prefix_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcp6ServerPrefixRangeArgs']]]]] = None,
                 rapid_commit: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 upstream_interface: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemDhcp6ServerArgs.__new__(SystemDhcp6ServerArgs)

            __props__.__dict__["delegated_prefix_iaid"] = delegated_prefix_iaid
            __props__.__dict__["dns_search_list"] = dns_search_list
            __props__.__dict__["dns_server1"] = dns_server1
            __props__.__dict__["dns_server2"] = dns_server2
            __props__.__dict__["dns_server3"] = dns_server3
            __props__.__dict__["dns_server4"] = dns_server4
            __props__.__dict__["dns_service"] = dns_service
            __props__.__dict__["domain"] = domain
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            if fosid is None and not opts.urn:
                raise TypeError("Missing required property 'fosid'")
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip_mode"] = ip_mode
            __props__.__dict__["ip_ranges"] = ip_ranges
            __props__.__dict__["lease_time"] = lease_time
            __props__.__dict__["option1"] = option1
            __props__.__dict__["option2"] = option2
            __props__.__dict__["option3"] = option3
            __props__.__dict__["prefix_mode"] = prefix_mode
            __props__.__dict__["prefix_ranges"] = prefix_ranges
            __props__.__dict__["rapid_commit"] = rapid_commit
            __props__.__dict__["status"] = status
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["upstream_interface"] = upstream_interface
            __props__.__dict__["vdomparam"] = vdomparam
        super(SystemDhcp6Server, __self__).__init__(
            'fortios:index/systemDhcp6Server:SystemDhcp6Server',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
            dns_search_list: Optional[pulumi.Input[str]] = None,
            dns_server1: Optional[pulumi.Input[str]] = None,
            dns_server2: Optional[pulumi.Input[str]] = None,
            dns_server3: Optional[pulumi.Input[str]] = None,
            dns_server4: Optional[pulumi.Input[str]] = None,
            dns_service: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip_mode: Optional[pulumi.Input[str]] = None,
            ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcp6ServerIpRangeArgs']]]]] = None,
            lease_time: Optional[pulumi.Input[int]] = None,
            option1: Optional[pulumi.Input[str]] = None,
            option2: Optional[pulumi.Input[str]] = None,
            option3: Optional[pulumi.Input[str]] = None,
            prefix_mode: Optional[pulumi.Input[str]] = None,
            prefix_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDhcp6ServerPrefixRangeArgs']]]]] = None,
            rapid_commit: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet: Optional[pulumi.Input[str]] = None,
            upstream_interface: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemDhcp6Server':
        """
        Get an existing SystemDhcp6Server resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemDhcp6ServerState.__new__(_SystemDhcp6ServerState)

        __props__.__dict__["delegated_prefix_iaid"] = delegated_prefix_iaid
        __props__.__dict__["dns_search_list"] = dns_search_list
        __props__.__dict__["dns_server1"] = dns_server1
        __props__.__dict__["dns_server2"] = dns_server2
        __props__.__dict__["dns_server3"] = dns_server3
        __props__.__dict__["dns_server4"] = dns_server4
        __props__.__dict__["dns_service"] = dns_service
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip_mode"] = ip_mode
        __props__.__dict__["ip_ranges"] = ip_ranges
        __props__.__dict__["lease_time"] = lease_time
        __props__.__dict__["option1"] = option1
        __props__.__dict__["option2"] = option2
        __props__.__dict__["option3"] = option3
        __props__.__dict__["prefix_mode"] = prefix_mode
        __props__.__dict__["prefix_ranges"] = prefix_ranges
        __props__.__dict__["rapid_commit"] = rapid_commit
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["upstream_interface"] = upstream_interface
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemDhcp6Server(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="delegatedPrefixIaid")
    def delegated_prefix_iaid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "delegated_prefix_iaid")

    @property
    @pulumi.getter(name="dnsSearchList")
    def dns_search_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_search_list")

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_server1")

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_server2")

    @property
    @pulumi.getter(name="dnsServer3")
    def dns_server3(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_server3")

    @property
    @pulumi.getter(name="dnsServer4")
    def dns_server4(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_server4")

    @property
    @pulumi.getter(name="dnsService")
    def dns_service(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_service")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_mode")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDhcp6ServerIpRange']]]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter
    def option1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "option1")

    @property
    @pulumi.getter
    def option2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "option2")

    @property
    @pulumi.getter
    def option3(self) -> pulumi.Output[str]:
        return pulumi.get(self, "option3")

    @property
    @pulumi.getter(name="prefixMode")
    def prefix_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "prefix_mode")

    @property
    @pulumi.getter(name="prefixRanges")
    def prefix_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDhcp6ServerPrefixRange']]]:
        return pulumi.get(self, "prefix_ranges")

    @property
    @pulumi.getter(name="rapidCommit")
    def rapid_commit(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rapid_commit")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="upstreamInterface")
    def upstream_interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upstream_interface")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

