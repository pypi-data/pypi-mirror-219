# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouterIsisArgs', 'RouterIsis']

@pulumi.input_type
class RouterIsisArgs:
    def __init__(__self__, *,
                 adjacency_check: Optional[pulumi.Input[str]] = None,
                 adjacency_check6: Optional[pulumi.Input[str]] = None,
                 adv_passive_only: Optional[pulumi.Input[str]] = None,
                 adv_passive_only6: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l1: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l2: Optional[pulumi.Input[str]] = None,
                 auth_mode_l1: Optional[pulumi.Input[str]] = None,
                 auth_mode_l2: Optional[pulumi.Input[str]] = None,
                 auth_password_l1: Optional[pulumi.Input[str]] = None,
                 auth_password_l2: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l1: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l2: Optional[pulumi.Input[str]] = None,
                 default_originate: Optional[pulumi.Input[str]] = None,
                 default_originate6: Optional[pulumi.Input[str]] = None,
                 dynamic_hostname: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ignore_lsp_errors: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 isis_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisInterfaceArgs']]]] = None,
                 isis_nets: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisNetArgs']]]] = None,
                 lsp_gen_interval_l1: Optional[pulumi.Input[int]] = None,
                 lsp_gen_interval_l2: Optional[pulumi.Input[int]] = None,
                 lsp_refresh_interval: Optional[pulumi.Input[int]] = None,
                 max_lsp_lifetime: Optional[pulumi.Input[int]] = None,
                 metric_style: Optional[pulumi.Input[str]] = None,
                 overload_bit: Optional[pulumi.Input[str]] = None,
                 overload_bit_on_startup: Optional[pulumi.Input[int]] = None,
                 overload_bit_suppress: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2_list: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistribute6Args']]]] = None,
                 redistribute_l1: Optional[pulumi.Input[str]] = None,
                 redistribute_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute_l2: Optional[pulumi.Input[str]] = None,
                 redistribute_l2_list: Optional[pulumi.Input[str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistributeArgs']]]] = None,
                 spf_interval_exp_l1: Optional[pulumi.Input[str]] = None,
                 spf_interval_exp_l2: Optional[pulumi.Input[str]] = None,
                 summary_address6s: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddress6Args']]]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddressArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RouterIsis resource.
        """
        if adjacency_check is not None:
            pulumi.set(__self__, "adjacency_check", adjacency_check)
        if adjacency_check6 is not None:
            pulumi.set(__self__, "adjacency_check6", adjacency_check6)
        if adv_passive_only is not None:
            pulumi.set(__self__, "adv_passive_only", adv_passive_only)
        if adv_passive_only6 is not None:
            pulumi.set(__self__, "adv_passive_only6", adv_passive_only6)
        if auth_keychain_l1 is not None:
            pulumi.set(__self__, "auth_keychain_l1", auth_keychain_l1)
        if auth_keychain_l2 is not None:
            pulumi.set(__self__, "auth_keychain_l2", auth_keychain_l2)
        if auth_mode_l1 is not None:
            pulumi.set(__self__, "auth_mode_l1", auth_mode_l1)
        if auth_mode_l2 is not None:
            pulumi.set(__self__, "auth_mode_l2", auth_mode_l2)
        if auth_password_l1 is not None:
            pulumi.set(__self__, "auth_password_l1", auth_password_l1)
        if auth_password_l2 is not None:
            pulumi.set(__self__, "auth_password_l2", auth_password_l2)
        if auth_sendonly_l1 is not None:
            pulumi.set(__self__, "auth_sendonly_l1", auth_sendonly_l1)
        if auth_sendonly_l2 is not None:
            pulumi.set(__self__, "auth_sendonly_l2", auth_sendonly_l2)
        if default_originate is not None:
            pulumi.set(__self__, "default_originate", default_originate)
        if default_originate6 is not None:
            pulumi.set(__self__, "default_originate6", default_originate6)
        if dynamic_hostname is not None:
            pulumi.set(__self__, "dynamic_hostname", dynamic_hostname)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ignore_lsp_errors is not None:
            pulumi.set(__self__, "ignore_lsp_errors", ignore_lsp_errors)
        if is_type is not None:
            pulumi.set(__self__, "is_type", is_type)
        if isis_interfaces is not None:
            pulumi.set(__self__, "isis_interfaces", isis_interfaces)
        if isis_nets is not None:
            pulumi.set(__self__, "isis_nets", isis_nets)
        if lsp_gen_interval_l1 is not None:
            pulumi.set(__self__, "lsp_gen_interval_l1", lsp_gen_interval_l1)
        if lsp_gen_interval_l2 is not None:
            pulumi.set(__self__, "lsp_gen_interval_l2", lsp_gen_interval_l2)
        if lsp_refresh_interval is not None:
            pulumi.set(__self__, "lsp_refresh_interval", lsp_refresh_interval)
        if max_lsp_lifetime is not None:
            pulumi.set(__self__, "max_lsp_lifetime", max_lsp_lifetime)
        if metric_style is not None:
            pulumi.set(__self__, "metric_style", metric_style)
        if overload_bit is not None:
            pulumi.set(__self__, "overload_bit", overload_bit)
        if overload_bit_on_startup is not None:
            pulumi.set(__self__, "overload_bit_on_startup", overload_bit_on_startup)
        if overload_bit_suppress is not None:
            pulumi.set(__self__, "overload_bit_suppress", overload_bit_suppress)
        if redistribute6_l1 is not None:
            pulumi.set(__self__, "redistribute6_l1", redistribute6_l1)
        if redistribute6_l1_list is not None:
            pulumi.set(__self__, "redistribute6_l1_list", redistribute6_l1_list)
        if redistribute6_l2 is not None:
            pulumi.set(__self__, "redistribute6_l2", redistribute6_l2)
        if redistribute6_l2_list is not None:
            pulumi.set(__self__, "redistribute6_l2_list", redistribute6_l2_list)
        if redistribute6s is not None:
            pulumi.set(__self__, "redistribute6s", redistribute6s)
        if redistribute_l1 is not None:
            pulumi.set(__self__, "redistribute_l1", redistribute_l1)
        if redistribute_l1_list is not None:
            pulumi.set(__self__, "redistribute_l1_list", redistribute_l1_list)
        if redistribute_l2 is not None:
            pulumi.set(__self__, "redistribute_l2", redistribute_l2)
        if redistribute_l2_list is not None:
            pulumi.set(__self__, "redistribute_l2_list", redistribute_l2_list)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if spf_interval_exp_l1 is not None:
            pulumi.set(__self__, "spf_interval_exp_l1", spf_interval_exp_l1)
        if spf_interval_exp_l2 is not None:
            pulumi.set(__self__, "spf_interval_exp_l2", spf_interval_exp_l2)
        if summary_address6s is not None:
            pulumi.set(__self__, "summary_address6s", summary_address6s)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="adjacencyCheck")
    def adjacency_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adjacency_check")

    @adjacency_check.setter
    def adjacency_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adjacency_check", value)

    @property
    @pulumi.getter(name="adjacencyCheck6")
    def adjacency_check6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adjacency_check6")

    @adjacency_check6.setter
    def adjacency_check6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adjacency_check6", value)

    @property
    @pulumi.getter(name="advPassiveOnly")
    def adv_passive_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adv_passive_only")

    @adv_passive_only.setter
    def adv_passive_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adv_passive_only", value)

    @property
    @pulumi.getter(name="advPassiveOnly6")
    def adv_passive_only6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adv_passive_only6")

    @adv_passive_only6.setter
    def adv_passive_only6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adv_passive_only6", value)

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_keychain_l1")

    @auth_keychain_l1.setter
    def auth_keychain_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l1", value)

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_keychain_l2")

    @auth_keychain_l2.setter
    def auth_keychain_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l2", value)

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode_l1")

    @auth_mode_l1.setter
    def auth_mode_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l1", value)

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode_l2")

    @auth_mode_l2.setter
    def auth_mode_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l2", value)

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_password_l1")

    @auth_password_l1.setter
    def auth_password_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l1", value)

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_password_l2")

    @auth_password_l2.setter
    def auth_password_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l2", value)

    @property
    @pulumi.getter(name="authSendonlyL1")
    def auth_sendonly_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_sendonly_l1")

    @auth_sendonly_l1.setter
    def auth_sendonly_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_sendonly_l1", value)

    @property
    @pulumi.getter(name="authSendonlyL2")
    def auth_sendonly_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_sendonly_l2")

    @auth_sendonly_l2.setter
    def auth_sendonly_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_sendonly_l2", value)

    @property
    @pulumi.getter(name="defaultOriginate")
    def default_originate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_originate")

    @default_originate.setter
    def default_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate", value)

    @property
    @pulumi.getter(name="defaultOriginate6")
    def default_originate6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_originate6")

    @default_originate6.setter
    def default_originate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate6", value)

    @property
    @pulumi.getter(name="dynamicHostname")
    def dynamic_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_hostname")

    @dynamic_hostname.setter
    def dynamic_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_hostname", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ignoreLspErrors")
    def ignore_lsp_errors(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_lsp_errors")

    @ignore_lsp_errors.setter
    def ignore_lsp_errors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_lsp_errors", value)

    @property
    @pulumi.getter(name="isType")
    def is_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_type")

    @is_type.setter
    def is_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_type", value)

    @property
    @pulumi.getter(name="isisInterfaces")
    def isis_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisInterfaceArgs']]]]:
        return pulumi.get(self, "isis_interfaces")

    @isis_interfaces.setter
    def isis_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisInterfaceArgs']]]]):
        pulumi.set(self, "isis_interfaces", value)

    @property
    @pulumi.getter(name="isisNets")
    def isis_nets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisNetArgs']]]]:
        return pulumi.get(self, "isis_nets")

    @isis_nets.setter
    def isis_nets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisNetArgs']]]]):
        pulumi.set(self, "isis_nets", value)

    @property
    @pulumi.getter(name="lspGenIntervalL1")
    def lsp_gen_interval_l1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lsp_gen_interval_l1")

    @lsp_gen_interval_l1.setter
    def lsp_gen_interval_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_gen_interval_l1", value)

    @property
    @pulumi.getter(name="lspGenIntervalL2")
    def lsp_gen_interval_l2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lsp_gen_interval_l2")

    @lsp_gen_interval_l2.setter
    def lsp_gen_interval_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_gen_interval_l2", value)

    @property
    @pulumi.getter(name="lspRefreshInterval")
    def lsp_refresh_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lsp_refresh_interval")

    @lsp_refresh_interval.setter
    def lsp_refresh_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_refresh_interval", value)

    @property
    @pulumi.getter(name="maxLspLifetime")
    def max_lsp_lifetime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_lsp_lifetime")

    @max_lsp_lifetime.setter
    def max_lsp_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_lsp_lifetime", value)

    @property
    @pulumi.getter(name="metricStyle")
    def metric_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_style")

    @metric_style.setter
    def metric_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_style", value)

    @property
    @pulumi.getter(name="overloadBit")
    def overload_bit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overload_bit")

    @overload_bit.setter
    def overload_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overload_bit", value)

    @property
    @pulumi.getter(name="overloadBitOnStartup")
    def overload_bit_on_startup(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "overload_bit_on_startup")

    @overload_bit_on_startup.setter
    def overload_bit_on_startup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "overload_bit_on_startup", value)

    @property
    @pulumi.getter(name="overloadBitSuppress")
    def overload_bit_suppress(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overload_bit_suppress")

    @overload_bit_suppress.setter
    def overload_bit_suppress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overload_bit_suppress", value)

    @property
    @pulumi.getter(name="redistribute6L1")
    def redistribute6_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute6_l1")

    @redistribute6_l1.setter
    def redistribute6_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l1", value)

    @property
    @pulumi.getter(name="redistribute6L1List")
    def redistribute6_l1_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute6_l1_list")

    @redistribute6_l1_list.setter
    def redistribute6_l1_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l1_list", value)

    @property
    @pulumi.getter(name="redistribute6L2")
    def redistribute6_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute6_l2")

    @redistribute6_l2.setter
    def redistribute6_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l2", value)

    @property
    @pulumi.getter(name="redistribute6L2List")
    def redistribute6_l2_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute6_l2_list")

    @redistribute6_l2_list.setter
    def redistribute6_l2_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l2_list", value)

    @property
    @pulumi.getter
    def redistribute6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistribute6Args']]]]:
        return pulumi.get(self, "redistribute6s")

    @redistribute6s.setter
    def redistribute6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistribute6Args']]]]):
        pulumi.set(self, "redistribute6s", value)

    @property
    @pulumi.getter(name="redistributeL1")
    def redistribute_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute_l1")

    @redistribute_l1.setter
    def redistribute_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l1", value)

    @property
    @pulumi.getter(name="redistributeL1List")
    def redistribute_l1_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute_l1_list")

    @redistribute_l1_list.setter
    def redistribute_l1_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l1_list", value)

    @property
    @pulumi.getter(name="redistributeL2")
    def redistribute_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute_l2")

    @redistribute_l2.setter
    def redistribute_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l2", value)

    @property
    @pulumi.getter(name="redistributeL2List")
    def redistribute_l2_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute_l2_list")

    @redistribute_l2_list.setter
    def redistribute_l2_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l2_list", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistributeArgs']]]]:
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="spfIntervalExpL1")
    def spf_interval_exp_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spf_interval_exp_l1")

    @spf_interval_exp_l1.setter
    def spf_interval_exp_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_interval_exp_l1", value)

    @property
    @pulumi.getter(name="spfIntervalExpL2")
    def spf_interval_exp_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spf_interval_exp_l2")

    @spf_interval_exp_l2.setter
    def spf_interval_exp_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_interval_exp_l2", value)

    @property
    @pulumi.getter(name="summaryAddress6s")
    def summary_address6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddress6Args']]]]:
        return pulumi.get(self, "summary_address6s")

    @summary_address6s.setter
    def summary_address6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddress6Args']]]]):
        pulumi.set(self, "summary_address6s", value)

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddressArgs']]]]:
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _RouterIsisState:
    def __init__(__self__, *,
                 adjacency_check: Optional[pulumi.Input[str]] = None,
                 adjacency_check6: Optional[pulumi.Input[str]] = None,
                 adv_passive_only: Optional[pulumi.Input[str]] = None,
                 adv_passive_only6: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l1: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l2: Optional[pulumi.Input[str]] = None,
                 auth_mode_l1: Optional[pulumi.Input[str]] = None,
                 auth_mode_l2: Optional[pulumi.Input[str]] = None,
                 auth_password_l1: Optional[pulumi.Input[str]] = None,
                 auth_password_l2: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l1: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l2: Optional[pulumi.Input[str]] = None,
                 default_originate: Optional[pulumi.Input[str]] = None,
                 default_originate6: Optional[pulumi.Input[str]] = None,
                 dynamic_hostname: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ignore_lsp_errors: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 isis_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisInterfaceArgs']]]] = None,
                 isis_nets: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisNetArgs']]]] = None,
                 lsp_gen_interval_l1: Optional[pulumi.Input[int]] = None,
                 lsp_gen_interval_l2: Optional[pulumi.Input[int]] = None,
                 lsp_refresh_interval: Optional[pulumi.Input[int]] = None,
                 max_lsp_lifetime: Optional[pulumi.Input[int]] = None,
                 metric_style: Optional[pulumi.Input[str]] = None,
                 overload_bit: Optional[pulumi.Input[str]] = None,
                 overload_bit_on_startup: Optional[pulumi.Input[int]] = None,
                 overload_bit_suppress: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2_list: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistribute6Args']]]] = None,
                 redistribute_l1: Optional[pulumi.Input[str]] = None,
                 redistribute_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute_l2: Optional[pulumi.Input[str]] = None,
                 redistribute_l2_list: Optional[pulumi.Input[str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistributeArgs']]]] = None,
                 spf_interval_exp_l1: Optional[pulumi.Input[str]] = None,
                 spf_interval_exp_l2: Optional[pulumi.Input[str]] = None,
                 summary_address6s: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddress6Args']]]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddressArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouterIsis resources.
        """
        if adjacency_check is not None:
            pulumi.set(__self__, "adjacency_check", adjacency_check)
        if adjacency_check6 is not None:
            pulumi.set(__self__, "adjacency_check6", adjacency_check6)
        if adv_passive_only is not None:
            pulumi.set(__self__, "adv_passive_only", adv_passive_only)
        if adv_passive_only6 is not None:
            pulumi.set(__self__, "adv_passive_only6", adv_passive_only6)
        if auth_keychain_l1 is not None:
            pulumi.set(__self__, "auth_keychain_l1", auth_keychain_l1)
        if auth_keychain_l2 is not None:
            pulumi.set(__self__, "auth_keychain_l2", auth_keychain_l2)
        if auth_mode_l1 is not None:
            pulumi.set(__self__, "auth_mode_l1", auth_mode_l1)
        if auth_mode_l2 is not None:
            pulumi.set(__self__, "auth_mode_l2", auth_mode_l2)
        if auth_password_l1 is not None:
            pulumi.set(__self__, "auth_password_l1", auth_password_l1)
        if auth_password_l2 is not None:
            pulumi.set(__self__, "auth_password_l2", auth_password_l2)
        if auth_sendonly_l1 is not None:
            pulumi.set(__self__, "auth_sendonly_l1", auth_sendonly_l1)
        if auth_sendonly_l2 is not None:
            pulumi.set(__self__, "auth_sendonly_l2", auth_sendonly_l2)
        if default_originate is not None:
            pulumi.set(__self__, "default_originate", default_originate)
        if default_originate6 is not None:
            pulumi.set(__self__, "default_originate6", default_originate6)
        if dynamic_hostname is not None:
            pulumi.set(__self__, "dynamic_hostname", dynamic_hostname)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ignore_lsp_errors is not None:
            pulumi.set(__self__, "ignore_lsp_errors", ignore_lsp_errors)
        if is_type is not None:
            pulumi.set(__self__, "is_type", is_type)
        if isis_interfaces is not None:
            pulumi.set(__self__, "isis_interfaces", isis_interfaces)
        if isis_nets is not None:
            pulumi.set(__self__, "isis_nets", isis_nets)
        if lsp_gen_interval_l1 is not None:
            pulumi.set(__self__, "lsp_gen_interval_l1", lsp_gen_interval_l1)
        if lsp_gen_interval_l2 is not None:
            pulumi.set(__self__, "lsp_gen_interval_l2", lsp_gen_interval_l2)
        if lsp_refresh_interval is not None:
            pulumi.set(__self__, "lsp_refresh_interval", lsp_refresh_interval)
        if max_lsp_lifetime is not None:
            pulumi.set(__self__, "max_lsp_lifetime", max_lsp_lifetime)
        if metric_style is not None:
            pulumi.set(__self__, "metric_style", metric_style)
        if overload_bit is not None:
            pulumi.set(__self__, "overload_bit", overload_bit)
        if overload_bit_on_startup is not None:
            pulumi.set(__self__, "overload_bit_on_startup", overload_bit_on_startup)
        if overload_bit_suppress is not None:
            pulumi.set(__self__, "overload_bit_suppress", overload_bit_suppress)
        if redistribute6_l1 is not None:
            pulumi.set(__self__, "redistribute6_l1", redistribute6_l1)
        if redistribute6_l1_list is not None:
            pulumi.set(__self__, "redistribute6_l1_list", redistribute6_l1_list)
        if redistribute6_l2 is not None:
            pulumi.set(__self__, "redistribute6_l2", redistribute6_l2)
        if redistribute6_l2_list is not None:
            pulumi.set(__self__, "redistribute6_l2_list", redistribute6_l2_list)
        if redistribute6s is not None:
            pulumi.set(__self__, "redistribute6s", redistribute6s)
        if redistribute_l1 is not None:
            pulumi.set(__self__, "redistribute_l1", redistribute_l1)
        if redistribute_l1_list is not None:
            pulumi.set(__self__, "redistribute_l1_list", redistribute_l1_list)
        if redistribute_l2 is not None:
            pulumi.set(__self__, "redistribute_l2", redistribute_l2)
        if redistribute_l2_list is not None:
            pulumi.set(__self__, "redistribute_l2_list", redistribute_l2_list)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if spf_interval_exp_l1 is not None:
            pulumi.set(__self__, "spf_interval_exp_l1", spf_interval_exp_l1)
        if spf_interval_exp_l2 is not None:
            pulumi.set(__self__, "spf_interval_exp_l2", spf_interval_exp_l2)
        if summary_address6s is not None:
            pulumi.set(__self__, "summary_address6s", summary_address6s)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="adjacencyCheck")
    def adjacency_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adjacency_check")

    @adjacency_check.setter
    def adjacency_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adjacency_check", value)

    @property
    @pulumi.getter(name="adjacencyCheck6")
    def adjacency_check6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adjacency_check6")

    @adjacency_check6.setter
    def adjacency_check6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adjacency_check6", value)

    @property
    @pulumi.getter(name="advPassiveOnly")
    def adv_passive_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adv_passive_only")

    @adv_passive_only.setter
    def adv_passive_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adv_passive_only", value)

    @property
    @pulumi.getter(name="advPassiveOnly6")
    def adv_passive_only6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adv_passive_only6")

    @adv_passive_only6.setter
    def adv_passive_only6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adv_passive_only6", value)

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_keychain_l1")

    @auth_keychain_l1.setter
    def auth_keychain_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l1", value)

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_keychain_l2")

    @auth_keychain_l2.setter
    def auth_keychain_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l2", value)

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode_l1")

    @auth_mode_l1.setter
    def auth_mode_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l1", value)

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode_l2")

    @auth_mode_l2.setter
    def auth_mode_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l2", value)

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_password_l1")

    @auth_password_l1.setter
    def auth_password_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l1", value)

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_password_l2")

    @auth_password_l2.setter
    def auth_password_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l2", value)

    @property
    @pulumi.getter(name="authSendonlyL1")
    def auth_sendonly_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_sendonly_l1")

    @auth_sendonly_l1.setter
    def auth_sendonly_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_sendonly_l1", value)

    @property
    @pulumi.getter(name="authSendonlyL2")
    def auth_sendonly_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_sendonly_l2")

    @auth_sendonly_l2.setter
    def auth_sendonly_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_sendonly_l2", value)

    @property
    @pulumi.getter(name="defaultOriginate")
    def default_originate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_originate")

    @default_originate.setter
    def default_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate", value)

    @property
    @pulumi.getter(name="defaultOriginate6")
    def default_originate6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_originate6")

    @default_originate6.setter
    def default_originate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate6", value)

    @property
    @pulumi.getter(name="dynamicHostname")
    def dynamic_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_hostname")

    @dynamic_hostname.setter
    def dynamic_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_hostname", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ignoreLspErrors")
    def ignore_lsp_errors(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_lsp_errors")

    @ignore_lsp_errors.setter
    def ignore_lsp_errors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_lsp_errors", value)

    @property
    @pulumi.getter(name="isType")
    def is_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_type")

    @is_type.setter
    def is_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_type", value)

    @property
    @pulumi.getter(name="isisInterfaces")
    def isis_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisInterfaceArgs']]]]:
        return pulumi.get(self, "isis_interfaces")

    @isis_interfaces.setter
    def isis_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisInterfaceArgs']]]]):
        pulumi.set(self, "isis_interfaces", value)

    @property
    @pulumi.getter(name="isisNets")
    def isis_nets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisNetArgs']]]]:
        return pulumi.get(self, "isis_nets")

    @isis_nets.setter
    def isis_nets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisIsisNetArgs']]]]):
        pulumi.set(self, "isis_nets", value)

    @property
    @pulumi.getter(name="lspGenIntervalL1")
    def lsp_gen_interval_l1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lsp_gen_interval_l1")

    @lsp_gen_interval_l1.setter
    def lsp_gen_interval_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_gen_interval_l1", value)

    @property
    @pulumi.getter(name="lspGenIntervalL2")
    def lsp_gen_interval_l2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lsp_gen_interval_l2")

    @lsp_gen_interval_l2.setter
    def lsp_gen_interval_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_gen_interval_l2", value)

    @property
    @pulumi.getter(name="lspRefreshInterval")
    def lsp_refresh_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lsp_refresh_interval")

    @lsp_refresh_interval.setter
    def lsp_refresh_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_refresh_interval", value)

    @property
    @pulumi.getter(name="maxLspLifetime")
    def max_lsp_lifetime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_lsp_lifetime")

    @max_lsp_lifetime.setter
    def max_lsp_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_lsp_lifetime", value)

    @property
    @pulumi.getter(name="metricStyle")
    def metric_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_style")

    @metric_style.setter
    def metric_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_style", value)

    @property
    @pulumi.getter(name="overloadBit")
    def overload_bit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overload_bit")

    @overload_bit.setter
    def overload_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overload_bit", value)

    @property
    @pulumi.getter(name="overloadBitOnStartup")
    def overload_bit_on_startup(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "overload_bit_on_startup")

    @overload_bit_on_startup.setter
    def overload_bit_on_startup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "overload_bit_on_startup", value)

    @property
    @pulumi.getter(name="overloadBitSuppress")
    def overload_bit_suppress(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overload_bit_suppress")

    @overload_bit_suppress.setter
    def overload_bit_suppress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overload_bit_suppress", value)

    @property
    @pulumi.getter(name="redistribute6L1")
    def redistribute6_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute6_l1")

    @redistribute6_l1.setter
    def redistribute6_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l1", value)

    @property
    @pulumi.getter(name="redistribute6L1List")
    def redistribute6_l1_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute6_l1_list")

    @redistribute6_l1_list.setter
    def redistribute6_l1_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l1_list", value)

    @property
    @pulumi.getter(name="redistribute6L2")
    def redistribute6_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute6_l2")

    @redistribute6_l2.setter
    def redistribute6_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l2", value)

    @property
    @pulumi.getter(name="redistribute6L2List")
    def redistribute6_l2_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute6_l2_list")

    @redistribute6_l2_list.setter
    def redistribute6_l2_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l2_list", value)

    @property
    @pulumi.getter
    def redistribute6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistribute6Args']]]]:
        return pulumi.get(self, "redistribute6s")

    @redistribute6s.setter
    def redistribute6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistribute6Args']]]]):
        pulumi.set(self, "redistribute6s", value)

    @property
    @pulumi.getter(name="redistributeL1")
    def redistribute_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute_l1")

    @redistribute_l1.setter
    def redistribute_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l1", value)

    @property
    @pulumi.getter(name="redistributeL1List")
    def redistribute_l1_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute_l1_list")

    @redistribute_l1_list.setter
    def redistribute_l1_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l1_list", value)

    @property
    @pulumi.getter(name="redistributeL2")
    def redistribute_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute_l2")

    @redistribute_l2.setter
    def redistribute_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l2", value)

    @property
    @pulumi.getter(name="redistributeL2List")
    def redistribute_l2_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redistribute_l2_list")

    @redistribute_l2_list.setter
    def redistribute_l2_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l2_list", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistributeArgs']]]]:
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="spfIntervalExpL1")
    def spf_interval_exp_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spf_interval_exp_l1")

    @spf_interval_exp_l1.setter
    def spf_interval_exp_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_interval_exp_l1", value)

    @property
    @pulumi.getter(name="spfIntervalExpL2")
    def spf_interval_exp_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spf_interval_exp_l2")

    @spf_interval_exp_l2.setter
    def spf_interval_exp_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_interval_exp_l2", value)

    @property
    @pulumi.getter(name="summaryAddress6s")
    def summary_address6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddress6Args']]]]:
        return pulumi.get(self, "summary_address6s")

    @summary_address6s.setter
    def summary_address6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddress6Args']]]]):
        pulumi.set(self, "summary_address6s", value)

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddressArgs']]]]:
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterIsisSummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class RouterIsis(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adjacency_check: Optional[pulumi.Input[str]] = None,
                 adjacency_check6: Optional[pulumi.Input[str]] = None,
                 adv_passive_only: Optional[pulumi.Input[str]] = None,
                 adv_passive_only6: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l1: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l2: Optional[pulumi.Input[str]] = None,
                 auth_mode_l1: Optional[pulumi.Input[str]] = None,
                 auth_mode_l2: Optional[pulumi.Input[str]] = None,
                 auth_password_l1: Optional[pulumi.Input[str]] = None,
                 auth_password_l2: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l1: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l2: Optional[pulumi.Input[str]] = None,
                 default_originate: Optional[pulumi.Input[str]] = None,
                 default_originate6: Optional[pulumi.Input[str]] = None,
                 dynamic_hostname: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ignore_lsp_errors: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 isis_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisIsisInterfaceArgs']]]]] = None,
                 isis_nets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisIsisNetArgs']]]]] = None,
                 lsp_gen_interval_l1: Optional[pulumi.Input[int]] = None,
                 lsp_gen_interval_l2: Optional[pulumi.Input[int]] = None,
                 lsp_refresh_interval: Optional[pulumi.Input[int]] = None,
                 max_lsp_lifetime: Optional[pulumi.Input[int]] = None,
                 metric_style: Optional[pulumi.Input[str]] = None,
                 overload_bit: Optional[pulumi.Input[str]] = None,
                 overload_bit_on_startup: Optional[pulumi.Input[int]] = None,
                 overload_bit_suppress: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2_list: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisRedistribute6Args']]]]] = None,
                 redistribute_l1: Optional[pulumi.Input[str]] = None,
                 redistribute_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute_l2: Optional[pulumi.Input[str]] = None,
                 redistribute_l2_list: Optional[pulumi.Input[str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisRedistributeArgs']]]]] = None,
                 spf_interval_exp_l1: Optional[pulumi.Input[str]] = None,
                 spf_interval_exp_l2: Optional[pulumi.Input[str]] = None,
                 summary_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisSummaryAddress6Args']]]]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisSummaryAddressArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RouterIsis resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RouterIsisArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RouterIsis resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RouterIsisArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouterIsisArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adjacency_check: Optional[pulumi.Input[str]] = None,
                 adjacency_check6: Optional[pulumi.Input[str]] = None,
                 adv_passive_only: Optional[pulumi.Input[str]] = None,
                 adv_passive_only6: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l1: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l2: Optional[pulumi.Input[str]] = None,
                 auth_mode_l1: Optional[pulumi.Input[str]] = None,
                 auth_mode_l2: Optional[pulumi.Input[str]] = None,
                 auth_password_l1: Optional[pulumi.Input[str]] = None,
                 auth_password_l2: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l1: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l2: Optional[pulumi.Input[str]] = None,
                 default_originate: Optional[pulumi.Input[str]] = None,
                 default_originate6: Optional[pulumi.Input[str]] = None,
                 dynamic_hostname: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ignore_lsp_errors: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 isis_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisIsisInterfaceArgs']]]]] = None,
                 isis_nets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisIsisNetArgs']]]]] = None,
                 lsp_gen_interval_l1: Optional[pulumi.Input[int]] = None,
                 lsp_gen_interval_l2: Optional[pulumi.Input[int]] = None,
                 lsp_refresh_interval: Optional[pulumi.Input[int]] = None,
                 max_lsp_lifetime: Optional[pulumi.Input[int]] = None,
                 metric_style: Optional[pulumi.Input[str]] = None,
                 overload_bit: Optional[pulumi.Input[str]] = None,
                 overload_bit_on_startup: Optional[pulumi.Input[int]] = None,
                 overload_bit_suppress: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2_list: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisRedistribute6Args']]]]] = None,
                 redistribute_l1: Optional[pulumi.Input[str]] = None,
                 redistribute_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute_l2: Optional[pulumi.Input[str]] = None,
                 redistribute_l2_list: Optional[pulumi.Input[str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisRedistributeArgs']]]]] = None,
                 spf_interval_exp_l1: Optional[pulumi.Input[str]] = None,
                 spf_interval_exp_l2: Optional[pulumi.Input[str]] = None,
                 summary_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisSummaryAddress6Args']]]]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisSummaryAddressArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouterIsisArgs.__new__(RouterIsisArgs)

            __props__.__dict__["adjacency_check"] = adjacency_check
            __props__.__dict__["adjacency_check6"] = adjacency_check6
            __props__.__dict__["adv_passive_only"] = adv_passive_only
            __props__.__dict__["adv_passive_only6"] = adv_passive_only6
            __props__.__dict__["auth_keychain_l1"] = auth_keychain_l1
            __props__.__dict__["auth_keychain_l2"] = auth_keychain_l2
            __props__.__dict__["auth_mode_l1"] = auth_mode_l1
            __props__.__dict__["auth_mode_l2"] = auth_mode_l2
            __props__.__dict__["auth_password_l1"] = None if auth_password_l1 is None else pulumi.Output.secret(auth_password_l1)
            __props__.__dict__["auth_password_l2"] = None if auth_password_l2 is None else pulumi.Output.secret(auth_password_l2)
            __props__.__dict__["auth_sendonly_l1"] = auth_sendonly_l1
            __props__.__dict__["auth_sendonly_l2"] = auth_sendonly_l2
            __props__.__dict__["default_originate"] = default_originate
            __props__.__dict__["default_originate6"] = default_originate6
            __props__.__dict__["dynamic_hostname"] = dynamic_hostname
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ignore_lsp_errors"] = ignore_lsp_errors
            __props__.__dict__["is_type"] = is_type
            __props__.__dict__["isis_interfaces"] = isis_interfaces
            __props__.__dict__["isis_nets"] = isis_nets
            __props__.__dict__["lsp_gen_interval_l1"] = lsp_gen_interval_l1
            __props__.__dict__["lsp_gen_interval_l2"] = lsp_gen_interval_l2
            __props__.__dict__["lsp_refresh_interval"] = lsp_refresh_interval
            __props__.__dict__["max_lsp_lifetime"] = max_lsp_lifetime
            __props__.__dict__["metric_style"] = metric_style
            __props__.__dict__["overload_bit"] = overload_bit
            __props__.__dict__["overload_bit_on_startup"] = overload_bit_on_startup
            __props__.__dict__["overload_bit_suppress"] = overload_bit_suppress
            __props__.__dict__["redistribute6_l1"] = redistribute6_l1
            __props__.__dict__["redistribute6_l1_list"] = redistribute6_l1_list
            __props__.__dict__["redistribute6_l2"] = redistribute6_l2
            __props__.__dict__["redistribute6_l2_list"] = redistribute6_l2_list
            __props__.__dict__["redistribute6s"] = redistribute6s
            __props__.__dict__["redistribute_l1"] = redistribute_l1
            __props__.__dict__["redistribute_l1_list"] = redistribute_l1_list
            __props__.__dict__["redistribute_l2"] = redistribute_l2
            __props__.__dict__["redistribute_l2_list"] = redistribute_l2_list
            __props__.__dict__["redistributes"] = redistributes
            __props__.__dict__["spf_interval_exp_l1"] = spf_interval_exp_l1
            __props__.__dict__["spf_interval_exp_l2"] = spf_interval_exp_l2
            __props__.__dict__["summary_address6s"] = summary_address6s
            __props__.__dict__["summary_addresses"] = summary_addresses
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authPasswordL1", "authPasswordL2"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(RouterIsis, __self__).__init__(
            'fortios:index/routerIsis:RouterIsis',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adjacency_check: Optional[pulumi.Input[str]] = None,
            adjacency_check6: Optional[pulumi.Input[str]] = None,
            adv_passive_only: Optional[pulumi.Input[str]] = None,
            adv_passive_only6: Optional[pulumi.Input[str]] = None,
            auth_keychain_l1: Optional[pulumi.Input[str]] = None,
            auth_keychain_l2: Optional[pulumi.Input[str]] = None,
            auth_mode_l1: Optional[pulumi.Input[str]] = None,
            auth_mode_l2: Optional[pulumi.Input[str]] = None,
            auth_password_l1: Optional[pulumi.Input[str]] = None,
            auth_password_l2: Optional[pulumi.Input[str]] = None,
            auth_sendonly_l1: Optional[pulumi.Input[str]] = None,
            auth_sendonly_l2: Optional[pulumi.Input[str]] = None,
            default_originate: Optional[pulumi.Input[str]] = None,
            default_originate6: Optional[pulumi.Input[str]] = None,
            dynamic_hostname: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ignore_lsp_errors: Optional[pulumi.Input[str]] = None,
            is_type: Optional[pulumi.Input[str]] = None,
            isis_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisIsisInterfaceArgs']]]]] = None,
            isis_nets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisIsisNetArgs']]]]] = None,
            lsp_gen_interval_l1: Optional[pulumi.Input[int]] = None,
            lsp_gen_interval_l2: Optional[pulumi.Input[int]] = None,
            lsp_refresh_interval: Optional[pulumi.Input[int]] = None,
            max_lsp_lifetime: Optional[pulumi.Input[int]] = None,
            metric_style: Optional[pulumi.Input[str]] = None,
            overload_bit: Optional[pulumi.Input[str]] = None,
            overload_bit_on_startup: Optional[pulumi.Input[int]] = None,
            overload_bit_suppress: Optional[pulumi.Input[str]] = None,
            redistribute6_l1: Optional[pulumi.Input[str]] = None,
            redistribute6_l1_list: Optional[pulumi.Input[str]] = None,
            redistribute6_l2: Optional[pulumi.Input[str]] = None,
            redistribute6_l2_list: Optional[pulumi.Input[str]] = None,
            redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisRedistribute6Args']]]]] = None,
            redistribute_l1: Optional[pulumi.Input[str]] = None,
            redistribute_l1_list: Optional[pulumi.Input[str]] = None,
            redistribute_l2: Optional[pulumi.Input[str]] = None,
            redistribute_l2_list: Optional[pulumi.Input[str]] = None,
            redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisRedistributeArgs']]]]] = None,
            spf_interval_exp_l1: Optional[pulumi.Input[str]] = None,
            spf_interval_exp_l2: Optional[pulumi.Input[str]] = None,
            summary_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisSummaryAddress6Args']]]]] = None,
            summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterIsisSummaryAddressArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'RouterIsis':
        """
        Get an existing RouterIsis resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouterIsisState.__new__(_RouterIsisState)

        __props__.__dict__["adjacency_check"] = adjacency_check
        __props__.__dict__["adjacency_check6"] = adjacency_check6
        __props__.__dict__["adv_passive_only"] = adv_passive_only
        __props__.__dict__["adv_passive_only6"] = adv_passive_only6
        __props__.__dict__["auth_keychain_l1"] = auth_keychain_l1
        __props__.__dict__["auth_keychain_l2"] = auth_keychain_l2
        __props__.__dict__["auth_mode_l1"] = auth_mode_l1
        __props__.__dict__["auth_mode_l2"] = auth_mode_l2
        __props__.__dict__["auth_password_l1"] = auth_password_l1
        __props__.__dict__["auth_password_l2"] = auth_password_l2
        __props__.__dict__["auth_sendonly_l1"] = auth_sendonly_l1
        __props__.__dict__["auth_sendonly_l2"] = auth_sendonly_l2
        __props__.__dict__["default_originate"] = default_originate
        __props__.__dict__["default_originate6"] = default_originate6
        __props__.__dict__["dynamic_hostname"] = dynamic_hostname
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ignore_lsp_errors"] = ignore_lsp_errors
        __props__.__dict__["is_type"] = is_type
        __props__.__dict__["isis_interfaces"] = isis_interfaces
        __props__.__dict__["isis_nets"] = isis_nets
        __props__.__dict__["lsp_gen_interval_l1"] = lsp_gen_interval_l1
        __props__.__dict__["lsp_gen_interval_l2"] = lsp_gen_interval_l2
        __props__.__dict__["lsp_refresh_interval"] = lsp_refresh_interval
        __props__.__dict__["max_lsp_lifetime"] = max_lsp_lifetime
        __props__.__dict__["metric_style"] = metric_style
        __props__.__dict__["overload_bit"] = overload_bit
        __props__.__dict__["overload_bit_on_startup"] = overload_bit_on_startup
        __props__.__dict__["overload_bit_suppress"] = overload_bit_suppress
        __props__.__dict__["redistribute6_l1"] = redistribute6_l1
        __props__.__dict__["redistribute6_l1_list"] = redistribute6_l1_list
        __props__.__dict__["redistribute6_l2"] = redistribute6_l2
        __props__.__dict__["redistribute6_l2_list"] = redistribute6_l2_list
        __props__.__dict__["redistribute6s"] = redistribute6s
        __props__.__dict__["redistribute_l1"] = redistribute_l1
        __props__.__dict__["redistribute_l1_list"] = redistribute_l1_list
        __props__.__dict__["redistribute_l2"] = redistribute_l2
        __props__.__dict__["redistribute_l2_list"] = redistribute_l2_list
        __props__.__dict__["redistributes"] = redistributes
        __props__.__dict__["spf_interval_exp_l1"] = spf_interval_exp_l1
        __props__.__dict__["spf_interval_exp_l2"] = spf_interval_exp_l2
        __props__.__dict__["summary_address6s"] = summary_address6s
        __props__.__dict__["summary_addresses"] = summary_addresses
        __props__.__dict__["vdomparam"] = vdomparam
        return RouterIsis(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adjacencyCheck")
    def adjacency_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "adjacency_check")

    @property
    @pulumi.getter(name="adjacencyCheck6")
    def adjacency_check6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "adjacency_check6")

    @property
    @pulumi.getter(name="advPassiveOnly")
    def adv_passive_only(self) -> pulumi.Output[str]:
        return pulumi.get(self, "adv_passive_only")

    @property
    @pulumi.getter(name="advPassiveOnly6")
    def adv_passive_only6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "adv_passive_only6")

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_keychain_l1")

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_keychain_l2")

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_mode_l1")

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_mode_l2")

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "auth_password_l1")

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "auth_password_l2")

    @property
    @pulumi.getter(name="authSendonlyL1")
    def auth_sendonly_l1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_sendonly_l1")

    @property
    @pulumi.getter(name="authSendonlyL2")
    def auth_sendonly_l2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_sendonly_l2")

    @property
    @pulumi.getter(name="defaultOriginate")
    def default_originate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_originate")

    @property
    @pulumi.getter(name="defaultOriginate6")
    def default_originate6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_originate6")

    @property
    @pulumi.getter(name="dynamicHostname")
    def dynamic_hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dynamic_hostname")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ignoreLspErrors")
    def ignore_lsp_errors(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ignore_lsp_errors")

    @property
    @pulumi.getter(name="isType")
    def is_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "is_type")

    @property
    @pulumi.getter(name="isisInterfaces")
    def isis_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.RouterIsisIsisInterface']]]:
        return pulumi.get(self, "isis_interfaces")

    @property
    @pulumi.getter(name="isisNets")
    def isis_nets(self) -> pulumi.Output[Optional[Sequence['outputs.RouterIsisIsisNet']]]:
        return pulumi.get(self, "isis_nets")

    @property
    @pulumi.getter(name="lspGenIntervalL1")
    def lsp_gen_interval_l1(self) -> pulumi.Output[int]:
        return pulumi.get(self, "lsp_gen_interval_l1")

    @property
    @pulumi.getter(name="lspGenIntervalL2")
    def lsp_gen_interval_l2(self) -> pulumi.Output[int]:
        return pulumi.get(self, "lsp_gen_interval_l2")

    @property
    @pulumi.getter(name="lspRefreshInterval")
    def lsp_refresh_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "lsp_refresh_interval")

    @property
    @pulumi.getter(name="maxLspLifetime")
    def max_lsp_lifetime(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_lsp_lifetime")

    @property
    @pulumi.getter(name="metricStyle")
    def metric_style(self) -> pulumi.Output[str]:
        return pulumi.get(self, "metric_style")

    @property
    @pulumi.getter(name="overloadBit")
    def overload_bit(self) -> pulumi.Output[str]:
        return pulumi.get(self, "overload_bit")

    @property
    @pulumi.getter(name="overloadBitOnStartup")
    def overload_bit_on_startup(self) -> pulumi.Output[int]:
        return pulumi.get(self, "overload_bit_on_startup")

    @property
    @pulumi.getter(name="overloadBitSuppress")
    def overload_bit_suppress(self) -> pulumi.Output[str]:
        return pulumi.get(self, "overload_bit_suppress")

    @property
    @pulumi.getter(name="redistribute6L1")
    def redistribute6_l1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "redistribute6_l1")

    @property
    @pulumi.getter(name="redistribute6L1List")
    def redistribute6_l1_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "redistribute6_l1_list")

    @property
    @pulumi.getter(name="redistribute6L2")
    def redistribute6_l2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "redistribute6_l2")

    @property
    @pulumi.getter(name="redistribute6L2List")
    def redistribute6_l2_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "redistribute6_l2_list")

    @property
    @pulumi.getter
    def redistribute6s(self) -> pulumi.Output[Optional[Sequence['outputs.RouterIsisRedistribute6']]]:
        return pulumi.get(self, "redistribute6s")

    @property
    @pulumi.getter(name="redistributeL1")
    def redistribute_l1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "redistribute_l1")

    @property
    @pulumi.getter(name="redistributeL1List")
    def redistribute_l1_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "redistribute_l1_list")

    @property
    @pulumi.getter(name="redistributeL2")
    def redistribute_l2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "redistribute_l2")

    @property
    @pulumi.getter(name="redistributeL2List")
    def redistribute_l2_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "redistribute_l2_list")

    @property
    @pulumi.getter
    def redistributes(self) -> pulumi.Output[Optional[Sequence['outputs.RouterIsisRedistribute']]]:
        return pulumi.get(self, "redistributes")

    @property
    @pulumi.getter(name="spfIntervalExpL1")
    def spf_interval_exp_l1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "spf_interval_exp_l1")

    @property
    @pulumi.getter(name="spfIntervalExpL2")
    def spf_interval_exp_l2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "spf_interval_exp_l2")

    @property
    @pulumi.getter(name="summaryAddress6s")
    def summary_address6s(self) -> pulumi.Output[Optional[Sequence['outputs.RouterIsisSummaryAddress6']]]:
        return pulumi.get(self, "summary_address6s")

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.RouterIsisSummaryAddress']]]:
        return pulumi.get(self, "summary_addresses")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

