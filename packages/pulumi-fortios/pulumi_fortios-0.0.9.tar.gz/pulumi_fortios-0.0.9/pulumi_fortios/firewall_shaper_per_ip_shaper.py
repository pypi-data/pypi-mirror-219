# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FirewallShaperPerIpShaperArgs', 'FirewallShaperPerIpShaper']

@pulumi.input_type
class FirewallShaperPerIpShaperArgs:
    def __init__(__self__, *,
                 bandwidth_unit: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None,
                 max_concurrent_session: Optional[pulumi.Input[int]] = None,
                 max_concurrent_tcp_session: Optional[pulumi.Input[int]] = None,
                 max_concurrent_udp_session: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallShaperPerIpShaper resource.
        """
        if bandwidth_unit is not None:
            pulumi.set(__self__, "bandwidth_unit", bandwidth_unit)
        if diffserv_forward is not None:
            pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse is not None:
            pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward is not None:
            pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev is not None:
            pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if max_bandwidth is not None:
            pulumi.set(__self__, "max_bandwidth", max_bandwidth)
        if max_concurrent_session is not None:
            pulumi.set(__self__, "max_concurrent_session", max_concurrent_session)
        if max_concurrent_tcp_session is not None:
            pulumi.set(__self__, "max_concurrent_tcp_session", max_concurrent_tcp_session)
        if max_concurrent_udp_session is not None:
            pulumi.set(__self__, "max_concurrent_udp_session", max_concurrent_udp_session)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bandwidthUnit")
    def bandwidth_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_unit")

    @bandwidth_unit.setter
    def bandwidth_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_unit", value)

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv_forward")

    @diffserv_forward.setter
    def diffserv_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_forward", value)

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv_reverse")

    @diffserv_reverse.setter
    def diffserv_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_reverse", value)

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode_forward")

    @diffservcode_forward.setter
    def diffservcode_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_forward", value)

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode_rev")

    @diffservcode_rev.setter
    def diffservcode_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_rev", value)

    @property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_bandwidth")

    @max_bandwidth.setter
    def max_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bandwidth", value)

    @property
    @pulumi.getter(name="maxConcurrentSession")
    def max_concurrent_session(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_session")

    @max_concurrent_session.setter
    def max_concurrent_session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_session", value)

    @property
    @pulumi.getter(name="maxConcurrentTcpSession")
    def max_concurrent_tcp_session(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_tcp_session")

    @max_concurrent_tcp_session.setter
    def max_concurrent_tcp_session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_tcp_session", value)

    @property
    @pulumi.getter(name="maxConcurrentUdpSession")
    def max_concurrent_udp_session(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_udp_session")

    @max_concurrent_udp_session.setter
    def max_concurrent_udp_session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_udp_session", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FirewallShaperPerIpShaperState:
    def __init__(__self__, *,
                 bandwidth_unit: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None,
                 max_concurrent_session: Optional[pulumi.Input[int]] = None,
                 max_concurrent_tcp_session: Optional[pulumi.Input[int]] = None,
                 max_concurrent_udp_session: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallShaperPerIpShaper resources.
        """
        if bandwidth_unit is not None:
            pulumi.set(__self__, "bandwidth_unit", bandwidth_unit)
        if diffserv_forward is not None:
            pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse is not None:
            pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward is not None:
            pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev is not None:
            pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if max_bandwidth is not None:
            pulumi.set(__self__, "max_bandwidth", max_bandwidth)
        if max_concurrent_session is not None:
            pulumi.set(__self__, "max_concurrent_session", max_concurrent_session)
        if max_concurrent_tcp_session is not None:
            pulumi.set(__self__, "max_concurrent_tcp_session", max_concurrent_tcp_session)
        if max_concurrent_udp_session is not None:
            pulumi.set(__self__, "max_concurrent_udp_session", max_concurrent_udp_session)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bandwidthUnit")
    def bandwidth_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_unit")

    @bandwidth_unit.setter
    def bandwidth_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_unit", value)

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv_forward")

    @diffserv_forward.setter
    def diffserv_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_forward", value)

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv_reverse")

    @diffserv_reverse.setter
    def diffserv_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_reverse", value)

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode_forward")

    @diffservcode_forward.setter
    def diffservcode_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_forward", value)

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode_rev")

    @diffservcode_rev.setter
    def diffservcode_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_rev", value)

    @property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_bandwidth")

    @max_bandwidth.setter
    def max_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bandwidth", value)

    @property
    @pulumi.getter(name="maxConcurrentSession")
    def max_concurrent_session(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_session")

    @max_concurrent_session.setter
    def max_concurrent_session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_session", value)

    @property
    @pulumi.getter(name="maxConcurrentTcpSession")
    def max_concurrent_tcp_session(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_tcp_session")

    @max_concurrent_tcp_session.setter
    def max_concurrent_tcp_session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_tcp_session", value)

    @property
    @pulumi.getter(name="maxConcurrentUdpSession")
    def max_concurrent_udp_session(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_udp_session")

    @max_concurrent_udp_session.setter
    def max_concurrent_udp_session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_udp_session", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class FirewallShaperPerIpShaper(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_unit: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None,
                 max_concurrent_session: Optional[pulumi.Input[int]] = None,
                 max_concurrent_tcp_session: Optional[pulumi.Input[int]] = None,
                 max_concurrent_udp_session: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallShaperPerIpShaper resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallShaperPerIpShaperArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallShaperPerIpShaper resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallShaperPerIpShaperArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallShaperPerIpShaperArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_unit: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None,
                 max_concurrent_session: Optional[pulumi.Input[int]] = None,
                 max_concurrent_tcp_session: Optional[pulumi.Input[int]] = None,
                 max_concurrent_udp_session: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallShaperPerIpShaperArgs.__new__(FirewallShaperPerIpShaperArgs)

            __props__.__dict__["bandwidth_unit"] = bandwidth_unit
            __props__.__dict__["diffserv_forward"] = diffserv_forward
            __props__.__dict__["diffserv_reverse"] = diffserv_reverse
            __props__.__dict__["diffservcode_forward"] = diffservcode_forward
            __props__.__dict__["diffservcode_rev"] = diffservcode_rev
            __props__.__dict__["max_bandwidth"] = max_bandwidth
            __props__.__dict__["max_concurrent_session"] = max_concurrent_session
            __props__.__dict__["max_concurrent_tcp_session"] = max_concurrent_tcp_session
            __props__.__dict__["max_concurrent_udp_session"] = max_concurrent_udp_session
            __props__.__dict__["name"] = name
            __props__.__dict__["vdomparam"] = vdomparam
        super(FirewallShaperPerIpShaper, __self__).__init__(
            'fortios:index/firewallShaperPerIpShaper:FirewallShaperPerIpShaper',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth_unit: Optional[pulumi.Input[str]] = None,
            diffserv_forward: Optional[pulumi.Input[str]] = None,
            diffserv_reverse: Optional[pulumi.Input[str]] = None,
            diffservcode_forward: Optional[pulumi.Input[str]] = None,
            diffservcode_rev: Optional[pulumi.Input[str]] = None,
            max_bandwidth: Optional[pulumi.Input[int]] = None,
            max_concurrent_session: Optional[pulumi.Input[int]] = None,
            max_concurrent_tcp_session: Optional[pulumi.Input[int]] = None,
            max_concurrent_udp_session: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'FirewallShaperPerIpShaper':
        """
        Get an existing FirewallShaperPerIpShaper resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallShaperPerIpShaperState.__new__(_FirewallShaperPerIpShaperState)

        __props__.__dict__["bandwidth_unit"] = bandwidth_unit
        __props__.__dict__["diffserv_forward"] = diffserv_forward
        __props__.__dict__["diffserv_reverse"] = diffserv_reverse
        __props__.__dict__["diffservcode_forward"] = diffservcode_forward
        __props__.__dict__["diffservcode_rev"] = diffservcode_rev
        __props__.__dict__["max_bandwidth"] = max_bandwidth
        __props__.__dict__["max_concurrent_session"] = max_concurrent_session
        __props__.__dict__["max_concurrent_tcp_session"] = max_concurrent_tcp_session
        __props__.__dict__["max_concurrent_udp_session"] = max_concurrent_udp_session
        __props__.__dict__["name"] = name
        __props__.__dict__["vdomparam"] = vdomparam
        return FirewallShaperPerIpShaper(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bandwidthUnit")
    def bandwidth_unit(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bandwidth_unit")

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffserv_forward")

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffserv_reverse")

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffservcode_forward")

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffservcode_rev")

    @property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_bandwidth")

    @property
    @pulumi.getter(name="maxConcurrentSession")
    def max_concurrent_session(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_concurrent_session")

    @property
    @pulumi.getter(name="maxConcurrentTcpSession")
    def max_concurrent_tcp_session(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_concurrent_tcp_session")

    @property
    @pulumi.getter(name="maxConcurrentUdpSession")
    def max_concurrent_udp_session(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_concurrent_udp_session")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

