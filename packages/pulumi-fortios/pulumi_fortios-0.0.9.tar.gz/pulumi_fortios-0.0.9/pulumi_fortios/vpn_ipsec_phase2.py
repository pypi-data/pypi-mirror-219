# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpnIpsecPhase2Args', 'VpnIpsecPhase2']

@pulumi.input_type
class VpnIpsecPhase2Args:
    def __init__(__self__, *,
                 phase1name: pulumi.Input[str],
                 proposal: pulumi.Input[str],
                 add_route: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp_ipsec: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_end_ip6: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_name6: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_start_ip6: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 dst_subnet6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 initiator_ts_narrow: Optional[pulumi.Input[str]] = None,
                 ipv4_df: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[str]] = None,
                 keylife_type: Optional[pulumi.Input[str]] = None,
                 keylifekbs: Optional[pulumi.Input[int]] = None,
                 keylifeseconds: Optional[pulumi.Input[int]] = None,
                 l2tp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pfs: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 replay: Optional[pulumi.Input[str]] = None,
                 route_overlap: Optional[pulumi.Input[str]] = None,
                 selector_match: Optional[pulumi.Input[str]] = None,
                 single_source: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_end_ip6: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_name6: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_start_ip6: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None,
                 src_subnet6: Optional[pulumi.Input[str]] = None,
                 use_natip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpnIpsecPhase2 resource.
        """
        pulumi.set(__self__, "phase1name", phase1name)
        pulumi.set(__self__, "proposal", proposal)
        if add_route is not None:
            pulumi.set(__self__, "add_route", add_route)
        if auto_negotiate is not None:
            pulumi.set(__self__, "auto_negotiate", auto_negotiate)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dhcp_ipsec is not None:
            pulumi.set(__self__, "dhcp_ipsec", dhcp_ipsec)
        if dhgrp is not None:
            pulumi.set(__self__, "dhgrp", dhgrp)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dst_addr_type is not None:
            pulumi.set(__self__, "dst_addr_type", dst_addr_type)
        if dst_end_ip is not None:
            pulumi.set(__self__, "dst_end_ip", dst_end_ip)
        if dst_end_ip6 is not None:
            pulumi.set(__self__, "dst_end_ip6", dst_end_ip6)
        if dst_name is not None:
            pulumi.set(__self__, "dst_name", dst_name)
        if dst_name6 is not None:
            pulumi.set(__self__, "dst_name6", dst_name6)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if dst_start_ip is not None:
            pulumi.set(__self__, "dst_start_ip", dst_start_ip)
        if dst_start_ip6 is not None:
            pulumi.set(__self__, "dst_start_ip6", dst_start_ip6)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if dst_subnet6 is not None:
            pulumi.set(__self__, "dst_subnet6", dst_subnet6)
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if inbound_dscp_copy is not None:
            pulumi.set(__self__, "inbound_dscp_copy", inbound_dscp_copy)
        if initiator_ts_narrow is not None:
            pulumi.set(__self__, "initiator_ts_narrow", initiator_ts_narrow)
        if ipv4_df is not None:
            pulumi.set(__self__, "ipv4_df", ipv4_df)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keylife_type is not None:
            pulumi.set(__self__, "keylife_type", keylife_type)
        if keylifekbs is not None:
            pulumi.set(__self__, "keylifekbs", keylifekbs)
        if keylifeseconds is not None:
            pulumi.set(__self__, "keylifeseconds", keylifeseconds)
        if l2tp is not None:
            pulumi.set(__self__, "l2tp", l2tp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if replay is not None:
            pulumi.set(__self__, "replay", replay)
        if route_overlap is not None:
            pulumi.set(__self__, "route_overlap", route_overlap)
        if selector_match is not None:
            pulumi.set(__self__, "selector_match", selector_match)
        if single_source is not None:
            pulumi.set(__self__, "single_source", single_source)
        if src_addr_type is not None:
            pulumi.set(__self__, "src_addr_type", src_addr_type)
        if src_end_ip is not None:
            pulumi.set(__self__, "src_end_ip", src_end_ip)
        if src_end_ip6 is not None:
            pulumi.set(__self__, "src_end_ip6", src_end_ip6)
        if src_name is not None:
            pulumi.set(__self__, "src_name", src_name)
        if src_name6 is not None:
            pulumi.set(__self__, "src_name6", src_name6)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if src_start_ip is not None:
            pulumi.set(__self__, "src_start_ip", src_start_ip)
        if src_start_ip6 is not None:
            pulumi.set(__self__, "src_start_ip6", src_start_ip6)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)
        if src_subnet6 is not None:
            pulumi.set(__self__, "src_subnet6", src_subnet6)
        if use_natip is not None:
            pulumi.set(__self__, "use_natip", use_natip)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def phase1name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "phase1name")

    @phase1name.setter
    def phase1name(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase1name", value)

    @property
    @pulumi.getter
    def proposal(self) -> pulumi.Input[str]:
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: pulumi.Input[str]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "add_route")

    @add_route.setter
    def add_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_route", value)

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_negotiate")

    @auto_negotiate.setter
    def auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_negotiate", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dhcpIpsec")
    def dhcp_ipsec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_ipsec")

    @dhcp_ipsec.setter
    def dhcp_ipsec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ipsec", value)

    @property
    @pulumi.getter
    def dhgrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhgrp")

    @dhgrp.setter
    def dhgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhgrp", value)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dstAddrType")
    def dst_addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_addr_type")

    @dst_addr_type.setter
    def dst_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_addr_type", value)

    @property
    @pulumi.getter(name="dstEndIp")
    def dst_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_end_ip")

    @dst_end_ip.setter
    def dst_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_end_ip", value)

    @property
    @pulumi.getter(name="dstEndIp6")
    def dst_end_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_end_ip6")

    @dst_end_ip6.setter
    def dst_end_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_end_ip6", value)

    @property
    @pulumi.getter(name="dstName")
    def dst_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_name")

    @dst_name.setter
    def dst_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_name", value)

    @property
    @pulumi.getter(name="dstName6")
    def dst_name6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_name6")

    @dst_name6.setter
    def dst_name6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_name6", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="dstStartIp")
    def dst_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_start_ip")

    @dst_start_ip.setter
    def dst_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_start_ip", value)

    @property
    @pulumi.getter(name="dstStartIp6")
    def dst_start_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_start_ip6")

    @dst_start_ip6.setter
    def dst_start_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_start_ip6", value)

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_subnet")

    @dst_subnet.setter
    def dst_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet", value)

    @property
    @pulumi.getter(name="dstSubnet6")
    def dst_subnet6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_subnet6")

    @dst_subnet6.setter
    def dst_subnet6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet6", value)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inbound_dscp_copy")

    @inbound_dscp_copy.setter
    def inbound_dscp_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound_dscp_copy", value)

    @property
    @pulumi.getter(name="initiatorTsNarrow")
    def initiator_ts_narrow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "initiator_ts_narrow")

    @initiator_ts_narrow.setter
    def initiator_ts_narrow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initiator_ts_narrow", value)

    @property
    @pulumi.getter(name="ipv4Df")
    def ipv4_df(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_df")

    @ipv4_df.setter
    def ipv4_df(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_df", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter(name="keylifeType")
    def keylife_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keylife_type")

    @keylife_type.setter
    def keylife_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keylife_type", value)

    @property
    @pulumi.getter
    def keylifekbs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keylifekbs")

    @keylifekbs.setter
    def keylifekbs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylifekbs", value)

    @property
    @pulumi.getter
    def keylifeseconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keylifeseconds")

    @keylifeseconds.setter
    def keylifeseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylifeseconds", value)

    @property
    @pulumi.getter
    def l2tp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "l2tp")

    @l2tp.setter
    def l2tp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2tp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pfs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pfs")

    @pfs.setter
    def pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pfs", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def replay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replay")

    @replay.setter
    def replay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replay", value)

    @property
    @pulumi.getter(name="routeOverlap")
    def route_overlap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_overlap")

    @route_overlap.setter
    def route_overlap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_overlap", value)

    @property
    @pulumi.getter(name="selectorMatch")
    def selector_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector_match")

    @selector_match.setter
    def selector_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector_match", value)

    @property
    @pulumi.getter(name="singleSource")
    def single_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "single_source")

    @single_source.setter
    def single_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_source", value)

    @property
    @pulumi.getter(name="srcAddrType")
    def src_addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_addr_type")

    @src_addr_type.setter
    def src_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_addr_type", value)

    @property
    @pulumi.getter(name="srcEndIp")
    def src_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_end_ip")

    @src_end_ip.setter
    def src_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_end_ip", value)

    @property
    @pulumi.getter(name="srcEndIp6")
    def src_end_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_end_ip6")

    @src_end_ip6.setter
    def src_end_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_end_ip6", value)

    @property
    @pulumi.getter(name="srcName")
    def src_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_name")

    @src_name.setter
    def src_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_name", value)

    @property
    @pulumi.getter(name="srcName6")
    def src_name6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_name6")

    @src_name6.setter
    def src_name6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_name6", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter(name="srcStartIp")
    def src_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_start_ip")

    @src_start_ip.setter
    def src_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_start_ip", value)

    @property
    @pulumi.getter(name="srcStartIp6")
    def src_start_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_start_ip6")

    @src_start_ip6.setter
    def src_start_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_start_ip6", value)

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_subnet")

    @src_subnet.setter
    def src_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet", value)

    @property
    @pulumi.getter(name="srcSubnet6")
    def src_subnet6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_subnet6")

    @src_subnet6.setter
    def src_subnet6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet6", value)

    @property
    @pulumi.getter(name="useNatip")
    def use_natip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_natip")

    @use_natip.setter
    def use_natip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_natip", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _VpnIpsecPhase2State:
    def __init__(__self__, *,
                 add_route: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp_ipsec: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_end_ip6: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_name6: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_start_ip6: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 dst_subnet6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 initiator_ts_narrow: Optional[pulumi.Input[str]] = None,
                 ipv4_df: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[str]] = None,
                 keylife_type: Optional[pulumi.Input[str]] = None,
                 keylifekbs: Optional[pulumi.Input[int]] = None,
                 keylifeseconds: Optional[pulumi.Input[int]] = None,
                 l2tp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pfs: Optional[pulumi.Input[str]] = None,
                 phase1name: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 replay: Optional[pulumi.Input[str]] = None,
                 route_overlap: Optional[pulumi.Input[str]] = None,
                 selector_match: Optional[pulumi.Input[str]] = None,
                 single_source: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_end_ip6: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_name6: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_start_ip6: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None,
                 src_subnet6: Optional[pulumi.Input[str]] = None,
                 use_natip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpnIpsecPhase2 resources.
        """
        if add_route is not None:
            pulumi.set(__self__, "add_route", add_route)
        if auto_negotiate is not None:
            pulumi.set(__self__, "auto_negotiate", auto_negotiate)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dhcp_ipsec is not None:
            pulumi.set(__self__, "dhcp_ipsec", dhcp_ipsec)
        if dhgrp is not None:
            pulumi.set(__self__, "dhgrp", dhgrp)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dst_addr_type is not None:
            pulumi.set(__self__, "dst_addr_type", dst_addr_type)
        if dst_end_ip is not None:
            pulumi.set(__self__, "dst_end_ip", dst_end_ip)
        if dst_end_ip6 is not None:
            pulumi.set(__self__, "dst_end_ip6", dst_end_ip6)
        if dst_name is not None:
            pulumi.set(__self__, "dst_name", dst_name)
        if dst_name6 is not None:
            pulumi.set(__self__, "dst_name6", dst_name6)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if dst_start_ip is not None:
            pulumi.set(__self__, "dst_start_ip", dst_start_ip)
        if dst_start_ip6 is not None:
            pulumi.set(__self__, "dst_start_ip6", dst_start_ip6)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if dst_subnet6 is not None:
            pulumi.set(__self__, "dst_subnet6", dst_subnet6)
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if inbound_dscp_copy is not None:
            pulumi.set(__self__, "inbound_dscp_copy", inbound_dscp_copy)
        if initiator_ts_narrow is not None:
            pulumi.set(__self__, "initiator_ts_narrow", initiator_ts_narrow)
        if ipv4_df is not None:
            pulumi.set(__self__, "ipv4_df", ipv4_df)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keylife_type is not None:
            pulumi.set(__self__, "keylife_type", keylife_type)
        if keylifekbs is not None:
            pulumi.set(__self__, "keylifekbs", keylifekbs)
        if keylifeseconds is not None:
            pulumi.set(__self__, "keylifeseconds", keylifeseconds)
        if l2tp is not None:
            pulumi.set(__self__, "l2tp", l2tp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if phase1name is not None:
            pulumi.set(__self__, "phase1name", phase1name)
        if proposal is not None:
            pulumi.set(__self__, "proposal", proposal)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if replay is not None:
            pulumi.set(__self__, "replay", replay)
        if route_overlap is not None:
            pulumi.set(__self__, "route_overlap", route_overlap)
        if selector_match is not None:
            pulumi.set(__self__, "selector_match", selector_match)
        if single_source is not None:
            pulumi.set(__self__, "single_source", single_source)
        if src_addr_type is not None:
            pulumi.set(__self__, "src_addr_type", src_addr_type)
        if src_end_ip is not None:
            pulumi.set(__self__, "src_end_ip", src_end_ip)
        if src_end_ip6 is not None:
            pulumi.set(__self__, "src_end_ip6", src_end_ip6)
        if src_name is not None:
            pulumi.set(__self__, "src_name", src_name)
        if src_name6 is not None:
            pulumi.set(__self__, "src_name6", src_name6)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if src_start_ip is not None:
            pulumi.set(__self__, "src_start_ip", src_start_ip)
        if src_start_ip6 is not None:
            pulumi.set(__self__, "src_start_ip6", src_start_ip6)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)
        if src_subnet6 is not None:
            pulumi.set(__self__, "src_subnet6", src_subnet6)
        if use_natip is not None:
            pulumi.set(__self__, "use_natip", use_natip)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "add_route")

    @add_route.setter
    def add_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_route", value)

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_negotiate")

    @auto_negotiate.setter
    def auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_negotiate", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dhcpIpsec")
    def dhcp_ipsec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_ipsec")

    @dhcp_ipsec.setter
    def dhcp_ipsec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ipsec", value)

    @property
    @pulumi.getter
    def dhgrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhgrp")

    @dhgrp.setter
    def dhgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhgrp", value)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dstAddrType")
    def dst_addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_addr_type")

    @dst_addr_type.setter
    def dst_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_addr_type", value)

    @property
    @pulumi.getter(name="dstEndIp")
    def dst_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_end_ip")

    @dst_end_ip.setter
    def dst_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_end_ip", value)

    @property
    @pulumi.getter(name="dstEndIp6")
    def dst_end_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_end_ip6")

    @dst_end_ip6.setter
    def dst_end_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_end_ip6", value)

    @property
    @pulumi.getter(name="dstName")
    def dst_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_name")

    @dst_name.setter
    def dst_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_name", value)

    @property
    @pulumi.getter(name="dstName6")
    def dst_name6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_name6")

    @dst_name6.setter
    def dst_name6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_name6", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="dstStartIp")
    def dst_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_start_ip")

    @dst_start_ip.setter
    def dst_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_start_ip", value)

    @property
    @pulumi.getter(name="dstStartIp6")
    def dst_start_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_start_ip6")

    @dst_start_ip6.setter
    def dst_start_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_start_ip6", value)

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_subnet")

    @dst_subnet.setter
    def dst_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet", value)

    @property
    @pulumi.getter(name="dstSubnet6")
    def dst_subnet6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_subnet6")

    @dst_subnet6.setter
    def dst_subnet6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet6", value)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inbound_dscp_copy")

    @inbound_dscp_copy.setter
    def inbound_dscp_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound_dscp_copy", value)

    @property
    @pulumi.getter(name="initiatorTsNarrow")
    def initiator_ts_narrow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "initiator_ts_narrow")

    @initiator_ts_narrow.setter
    def initiator_ts_narrow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initiator_ts_narrow", value)

    @property
    @pulumi.getter(name="ipv4Df")
    def ipv4_df(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_df")

    @ipv4_df.setter
    def ipv4_df(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_df", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter(name="keylifeType")
    def keylife_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keylife_type")

    @keylife_type.setter
    def keylife_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keylife_type", value)

    @property
    @pulumi.getter
    def keylifekbs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keylifekbs")

    @keylifekbs.setter
    def keylifekbs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylifekbs", value)

    @property
    @pulumi.getter
    def keylifeseconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keylifeseconds")

    @keylifeseconds.setter
    def keylifeseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylifeseconds", value)

    @property
    @pulumi.getter
    def l2tp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "l2tp")

    @l2tp.setter
    def l2tp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2tp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pfs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pfs")

    @pfs.setter
    def pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pfs", value)

    @property
    @pulumi.getter
    def phase1name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phase1name")

    @phase1name.setter
    def phase1name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase1name", value)

    @property
    @pulumi.getter
    def proposal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def replay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replay")

    @replay.setter
    def replay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replay", value)

    @property
    @pulumi.getter(name="routeOverlap")
    def route_overlap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_overlap")

    @route_overlap.setter
    def route_overlap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_overlap", value)

    @property
    @pulumi.getter(name="selectorMatch")
    def selector_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector_match")

    @selector_match.setter
    def selector_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector_match", value)

    @property
    @pulumi.getter(name="singleSource")
    def single_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "single_source")

    @single_source.setter
    def single_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_source", value)

    @property
    @pulumi.getter(name="srcAddrType")
    def src_addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_addr_type")

    @src_addr_type.setter
    def src_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_addr_type", value)

    @property
    @pulumi.getter(name="srcEndIp")
    def src_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_end_ip")

    @src_end_ip.setter
    def src_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_end_ip", value)

    @property
    @pulumi.getter(name="srcEndIp6")
    def src_end_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_end_ip6")

    @src_end_ip6.setter
    def src_end_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_end_ip6", value)

    @property
    @pulumi.getter(name="srcName")
    def src_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_name")

    @src_name.setter
    def src_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_name", value)

    @property
    @pulumi.getter(name="srcName6")
    def src_name6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_name6")

    @src_name6.setter
    def src_name6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_name6", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter(name="srcStartIp")
    def src_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_start_ip")

    @src_start_ip.setter
    def src_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_start_ip", value)

    @property
    @pulumi.getter(name="srcStartIp6")
    def src_start_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_start_ip6")

    @src_start_ip6.setter
    def src_start_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_start_ip6", value)

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_subnet")

    @src_subnet.setter
    def src_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet", value)

    @property
    @pulumi.getter(name="srcSubnet6")
    def src_subnet6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_subnet6")

    @src_subnet6.setter
    def src_subnet6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet6", value)

    @property
    @pulumi.getter(name="useNatip")
    def use_natip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_natip")

    @use_natip.setter
    def use_natip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_natip", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class VpnIpsecPhase2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp_ipsec: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_end_ip6: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_name6: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_start_ip6: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 dst_subnet6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 initiator_ts_narrow: Optional[pulumi.Input[str]] = None,
                 ipv4_df: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[str]] = None,
                 keylife_type: Optional[pulumi.Input[str]] = None,
                 keylifekbs: Optional[pulumi.Input[int]] = None,
                 keylifeseconds: Optional[pulumi.Input[int]] = None,
                 l2tp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pfs: Optional[pulumi.Input[str]] = None,
                 phase1name: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 replay: Optional[pulumi.Input[str]] = None,
                 route_overlap: Optional[pulumi.Input[str]] = None,
                 selector_match: Optional[pulumi.Input[str]] = None,
                 single_source: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_end_ip6: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_name6: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_start_ip6: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None,
                 src_subnet6: Optional[pulumi.Input[str]] = None,
                 use_natip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VpnIpsecPhase2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpnIpsecPhase2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpnIpsecPhase2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpnIpsecPhase2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnIpsecPhase2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp_ipsec: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_end_ip6: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_name6: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_start_ip6: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 dst_subnet6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 initiator_ts_narrow: Optional[pulumi.Input[str]] = None,
                 ipv4_df: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[str]] = None,
                 keylife_type: Optional[pulumi.Input[str]] = None,
                 keylifekbs: Optional[pulumi.Input[int]] = None,
                 keylifeseconds: Optional[pulumi.Input[int]] = None,
                 l2tp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pfs: Optional[pulumi.Input[str]] = None,
                 phase1name: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 replay: Optional[pulumi.Input[str]] = None,
                 route_overlap: Optional[pulumi.Input[str]] = None,
                 selector_match: Optional[pulumi.Input[str]] = None,
                 single_source: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_end_ip6: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_name6: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_start_ip6: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None,
                 src_subnet6: Optional[pulumi.Input[str]] = None,
                 use_natip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnIpsecPhase2Args.__new__(VpnIpsecPhase2Args)

            __props__.__dict__["add_route"] = add_route
            __props__.__dict__["auto_negotiate"] = auto_negotiate
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dhcp_ipsec"] = dhcp_ipsec
            __props__.__dict__["dhgrp"] = dhgrp
            __props__.__dict__["diffserv"] = diffserv
            __props__.__dict__["diffservcode"] = diffservcode
            __props__.__dict__["dst_addr_type"] = dst_addr_type
            __props__.__dict__["dst_end_ip"] = dst_end_ip
            __props__.__dict__["dst_end_ip6"] = dst_end_ip6
            __props__.__dict__["dst_name"] = dst_name
            __props__.__dict__["dst_name6"] = dst_name6
            __props__.__dict__["dst_port"] = dst_port
            __props__.__dict__["dst_start_ip"] = dst_start_ip
            __props__.__dict__["dst_start_ip6"] = dst_start_ip6
            __props__.__dict__["dst_subnet"] = dst_subnet
            __props__.__dict__["dst_subnet6"] = dst_subnet6
            __props__.__dict__["encapsulation"] = encapsulation
            __props__.__dict__["inbound_dscp_copy"] = inbound_dscp_copy
            __props__.__dict__["initiator_ts_narrow"] = initiator_ts_narrow
            __props__.__dict__["ipv4_df"] = ipv4_df
            __props__.__dict__["keepalive"] = keepalive
            __props__.__dict__["keylife_type"] = keylife_type
            __props__.__dict__["keylifekbs"] = keylifekbs
            __props__.__dict__["keylifeseconds"] = keylifeseconds
            __props__.__dict__["l2tp"] = l2tp
            __props__.__dict__["name"] = name
            __props__.__dict__["pfs"] = pfs
            if phase1name is None and not opts.urn:
                raise TypeError("Missing required property 'phase1name'")
            __props__.__dict__["phase1name"] = phase1name
            if proposal is None and not opts.urn:
                raise TypeError("Missing required property 'proposal'")
            __props__.__dict__["proposal"] = proposal
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["replay"] = replay
            __props__.__dict__["route_overlap"] = route_overlap
            __props__.__dict__["selector_match"] = selector_match
            __props__.__dict__["single_source"] = single_source
            __props__.__dict__["src_addr_type"] = src_addr_type
            __props__.__dict__["src_end_ip"] = src_end_ip
            __props__.__dict__["src_end_ip6"] = src_end_ip6
            __props__.__dict__["src_name"] = src_name
            __props__.__dict__["src_name6"] = src_name6
            __props__.__dict__["src_port"] = src_port
            __props__.__dict__["src_start_ip"] = src_start_ip
            __props__.__dict__["src_start_ip6"] = src_start_ip6
            __props__.__dict__["src_subnet"] = src_subnet
            __props__.__dict__["src_subnet6"] = src_subnet6
            __props__.__dict__["use_natip"] = use_natip
            __props__.__dict__["vdomparam"] = vdomparam
        super(VpnIpsecPhase2, __self__).__init__(
            'fortios:index/vpnIpsecPhase2:VpnIpsecPhase2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_route: Optional[pulumi.Input[str]] = None,
            auto_negotiate: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dhcp_ipsec: Optional[pulumi.Input[str]] = None,
            dhgrp: Optional[pulumi.Input[str]] = None,
            diffserv: Optional[pulumi.Input[str]] = None,
            diffservcode: Optional[pulumi.Input[str]] = None,
            dst_addr_type: Optional[pulumi.Input[str]] = None,
            dst_end_ip: Optional[pulumi.Input[str]] = None,
            dst_end_ip6: Optional[pulumi.Input[str]] = None,
            dst_name: Optional[pulumi.Input[str]] = None,
            dst_name6: Optional[pulumi.Input[str]] = None,
            dst_port: Optional[pulumi.Input[int]] = None,
            dst_start_ip: Optional[pulumi.Input[str]] = None,
            dst_start_ip6: Optional[pulumi.Input[str]] = None,
            dst_subnet: Optional[pulumi.Input[str]] = None,
            dst_subnet6: Optional[pulumi.Input[str]] = None,
            encapsulation: Optional[pulumi.Input[str]] = None,
            inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
            initiator_ts_narrow: Optional[pulumi.Input[str]] = None,
            ipv4_df: Optional[pulumi.Input[str]] = None,
            keepalive: Optional[pulumi.Input[str]] = None,
            keylife_type: Optional[pulumi.Input[str]] = None,
            keylifekbs: Optional[pulumi.Input[int]] = None,
            keylifeseconds: Optional[pulumi.Input[int]] = None,
            l2tp: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pfs: Optional[pulumi.Input[str]] = None,
            phase1name: Optional[pulumi.Input[str]] = None,
            proposal: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[int]] = None,
            replay: Optional[pulumi.Input[str]] = None,
            route_overlap: Optional[pulumi.Input[str]] = None,
            selector_match: Optional[pulumi.Input[str]] = None,
            single_source: Optional[pulumi.Input[str]] = None,
            src_addr_type: Optional[pulumi.Input[str]] = None,
            src_end_ip: Optional[pulumi.Input[str]] = None,
            src_end_ip6: Optional[pulumi.Input[str]] = None,
            src_name: Optional[pulumi.Input[str]] = None,
            src_name6: Optional[pulumi.Input[str]] = None,
            src_port: Optional[pulumi.Input[int]] = None,
            src_start_ip: Optional[pulumi.Input[str]] = None,
            src_start_ip6: Optional[pulumi.Input[str]] = None,
            src_subnet: Optional[pulumi.Input[str]] = None,
            src_subnet6: Optional[pulumi.Input[str]] = None,
            use_natip: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'VpnIpsecPhase2':
        """
        Get an existing VpnIpsecPhase2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnIpsecPhase2State.__new__(_VpnIpsecPhase2State)

        __props__.__dict__["add_route"] = add_route
        __props__.__dict__["auto_negotiate"] = auto_negotiate
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dhcp_ipsec"] = dhcp_ipsec
        __props__.__dict__["dhgrp"] = dhgrp
        __props__.__dict__["diffserv"] = diffserv
        __props__.__dict__["diffservcode"] = diffservcode
        __props__.__dict__["dst_addr_type"] = dst_addr_type
        __props__.__dict__["dst_end_ip"] = dst_end_ip
        __props__.__dict__["dst_end_ip6"] = dst_end_ip6
        __props__.__dict__["dst_name"] = dst_name
        __props__.__dict__["dst_name6"] = dst_name6
        __props__.__dict__["dst_port"] = dst_port
        __props__.__dict__["dst_start_ip"] = dst_start_ip
        __props__.__dict__["dst_start_ip6"] = dst_start_ip6
        __props__.__dict__["dst_subnet"] = dst_subnet
        __props__.__dict__["dst_subnet6"] = dst_subnet6
        __props__.__dict__["encapsulation"] = encapsulation
        __props__.__dict__["inbound_dscp_copy"] = inbound_dscp_copy
        __props__.__dict__["initiator_ts_narrow"] = initiator_ts_narrow
        __props__.__dict__["ipv4_df"] = ipv4_df
        __props__.__dict__["keepalive"] = keepalive
        __props__.__dict__["keylife_type"] = keylife_type
        __props__.__dict__["keylifekbs"] = keylifekbs
        __props__.__dict__["keylifeseconds"] = keylifeseconds
        __props__.__dict__["l2tp"] = l2tp
        __props__.__dict__["name"] = name
        __props__.__dict__["pfs"] = pfs
        __props__.__dict__["phase1name"] = phase1name
        __props__.__dict__["proposal"] = proposal
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["replay"] = replay
        __props__.__dict__["route_overlap"] = route_overlap
        __props__.__dict__["selector_match"] = selector_match
        __props__.__dict__["single_source"] = single_source
        __props__.__dict__["src_addr_type"] = src_addr_type
        __props__.__dict__["src_end_ip"] = src_end_ip
        __props__.__dict__["src_end_ip6"] = src_end_ip6
        __props__.__dict__["src_name"] = src_name
        __props__.__dict__["src_name6"] = src_name6
        __props__.__dict__["src_port"] = src_port
        __props__.__dict__["src_start_ip"] = src_start_ip
        __props__.__dict__["src_start_ip6"] = src_start_ip6
        __props__.__dict__["src_subnet"] = src_subnet
        __props__.__dict__["src_subnet6"] = src_subnet6
        __props__.__dict__["use_natip"] = use_natip
        __props__.__dict__["vdomparam"] = vdomparam
        return VpnIpsecPhase2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> pulumi.Output[str]:
        return pulumi.get(self, "add_route")

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_negotiate")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dhcpIpsec")
    def dhcp_ipsec(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_ipsec")

    @property
    @pulumi.getter
    def dhgrp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhgrp")

    @property
    @pulumi.getter
    def diffserv(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffserv")

    @property
    @pulumi.getter
    def diffservcode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dstAddrType")
    def dst_addr_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_addr_type")

    @property
    @pulumi.getter(name="dstEndIp")
    def dst_end_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_end_ip")

    @property
    @pulumi.getter(name="dstEndIp6")
    def dst_end_ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_end_ip6")

    @property
    @pulumi.getter(name="dstName")
    def dst_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_name")

    @property
    @pulumi.getter(name="dstName6")
    def dst_name6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_name6")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="dstStartIp")
    def dst_start_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_start_ip")

    @property
    @pulumi.getter(name="dstStartIp6")
    def dst_start_ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_start_ip6")

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_subnet")

    @property
    @pulumi.getter(name="dstSubnet6")
    def dst_subnet6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_subnet6")

    @property
    @pulumi.getter
    def encapsulation(self) -> pulumi.Output[str]:
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "inbound_dscp_copy")

    @property
    @pulumi.getter(name="initiatorTsNarrow")
    def initiator_ts_narrow(self) -> pulumi.Output[str]:
        return pulumi.get(self, "initiator_ts_narrow")

    @property
    @pulumi.getter(name="ipv4Df")
    def ipv4_df(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_df")

    @property
    @pulumi.getter
    def keepalive(self) -> pulumi.Output[str]:
        return pulumi.get(self, "keepalive")

    @property
    @pulumi.getter(name="keylifeType")
    def keylife_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "keylife_type")

    @property
    @pulumi.getter
    def keylifekbs(self) -> pulumi.Output[int]:
        return pulumi.get(self, "keylifekbs")

    @property
    @pulumi.getter
    def keylifeseconds(self) -> pulumi.Output[int]:
        return pulumi.get(self, "keylifeseconds")

    @property
    @pulumi.getter
    def l2tp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "l2tp")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pfs(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pfs")

    @property
    @pulumi.getter
    def phase1name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "phase1name")

    @property
    @pulumi.getter
    def proposal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proposal")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def replay(self) -> pulumi.Output[str]:
        return pulumi.get(self, "replay")

    @property
    @pulumi.getter(name="routeOverlap")
    def route_overlap(self) -> pulumi.Output[str]:
        return pulumi.get(self, "route_overlap")

    @property
    @pulumi.getter(name="selectorMatch")
    def selector_match(self) -> pulumi.Output[str]:
        return pulumi.get(self, "selector_match")

    @property
    @pulumi.getter(name="singleSource")
    def single_source(self) -> pulumi.Output[str]:
        return pulumi.get(self, "single_source")

    @property
    @pulumi.getter(name="srcAddrType")
    def src_addr_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_addr_type")

    @property
    @pulumi.getter(name="srcEndIp")
    def src_end_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_end_ip")

    @property
    @pulumi.getter(name="srcEndIp6")
    def src_end_ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_end_ip6")

    @property
    @pulumi.getter(name="srcName")
    def src_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_name")

    @property
    @pulumi.getter(name="srcName6")
    def src_name6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_name6")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter(name="srcStartIp")
    def src_start_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_start_ip")

    @property
    @pulumi.getter(name="srcStartIp6")
    def src_start_ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_start_ip6")

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_subnet")

    @property
    @pulumi.getter(name="srcSubnet6")
    def src_subnet6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_subnet6")

    @property
    @pulumi.getter(name="useNatip")
    def use_natip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "use_natip")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

