# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemNpuArgs', 'SystemNpu']

@pulumi.input_type
class SystemNpuArgs:
    def __init__(__self__, *,
                 capwap_offload: Optional[pulumi.Input[str]] = None,
                 dedicated_management_affinity: Optional[pulumi.Input[str]] = None,
                 dedicated_management_cpu: Optional[pulumi.Input[str]] = None,
                 fastpath: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ipsec_dec_subengine_mask: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_subengine_mask: Optional[pulumi.Input[str]] = None,
                 ipsec_inbound_cache: Optional[pulumi.Input[str]] = None,
                 ipsec_mtu_override: Optional[pulumi.Input[str]] = None,
                 ipsec_over_vlink: Optional[pulumi.Input[str]] = None,
                 mcast_session_accounting: Optional[pulumi.Input[str]] = None,
                 np6_cps_optimization_mode: Optional[pulumi.Input[str]] = None,
                 priority_protocol: Optional[pulumi.Input['SystemNpuPriorityProtocolArgs']] = None,
                 rdp_offload: Optional[pulumi.Input[str]] = None,
                 session_denied_offload: Optional[pulumi.Input[str]] = None,
                 sse_backpressure: Optional[pulumi.Input[str]] = None,
                 strip_clear_text_padding: Optional[pulumi.Input[str]] = None,
                 strip_esp_padding: Optional[pulumi.Input[str]] = None,
                 sw_np_bandwidth: Optional[pulumi.Input[str]] = None,
                 uesp_offload: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemNpu resource.
        """
        if capwap_offload is not None:
            pulumi.set(__self__, "capwap_offload", capwap_offload)
        if dedicated_management_affinity is not None:
            pulumi.set(__self__, "dedicated_management_affinity", dedicated_management_affinity)
        if dedicated_management_cpu is not None:
            pulumi.set(__self__, "dedicated_management_cpu", dedicated_management_cpu)
        if fastpath is not None:
            pulumi.set(__self__, "fastpath", fastpath)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ipsec_dec_subengine_mask is not None:
            pulumi.set(__self__, "ipsec_dec_subengine_mask", ipsec_dec_subengine_mask)
        if ipsec_enc_subengine_mask is not None:
            pulumi.set(__self__, "ipsec_enc_subengine_mask", ipsec_enc_subengine_mask)
        if ipsec_inbound_cache is not None:
            pulumi.set(__self__, "ipsec_inbound_cache", ipsec_inbound_cache)
        if ipsec_mtu_override is not None:
            pulumi.set(__self__, "ipsec_mtu_override", ipsec_mtu_override)
        if ipsec_over_vlink is not None:
            pulumi.set(__self__, "ipsec_over_vlink", ipsec_over_vlink)
        if mcast_session_accounting is not None:
            pulumi.set(__self__, "mcast_session_accounting", mcast_session_accounting)
        if np6_cps_optimization_mode is not None:
            pulumi.set(__self__, "np6_cps_optimization_mode", np6_cps_optimization_mode)
        if priority_protocol is not None:
            pulumi.set(__self__, "priority_protocol", priority_protocol)
        if rdp_offload is not None:
            pulumi.set(__self__, "rdp_offload", rdp_offload)
        if session_denied_offload is not None:
            pulumi.set(__self__, "session_denied_offload", session_denied_offload)
        if sse_backpressure is not None:
            pulumi.set(__self__, "sse_backpressure", sse_backpressure)
        if strip_clear_text_padding is not None:
            pulumi.set(__self__, "strip_clear_text_padding", strip_clear_text_padding)
        if strip_esp_padding is not None:
            pulumi.set(__self__, "strip_esp_padding", strip_esp_padding)
        if sw_np_bandwidth is not None:
            pulumi.set(__self__, "sw_np_bandwidth", sw_np_bandwidth)
        if uesp_offload is not None:
            pulumi.set(__self__, "uesp_offload", uesp_offload)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="capwapOffload")
    def capwap_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capwap_offload")

    @capwap_offload.setter
    def capwap_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capwap_offload", value)

    @property
    @pulumi.getter(name="dedicatedManagementAffinity")
    def dedicated_management_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dedicated_management_affinity")

    @dedicated_management_affinity.setter
    def dedicated_management_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_management_affinity", value)

    @property
    @pulumi.getter(name="dedicatedManagementCpu")
    def dedicated_management_cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dedicated_management_cpu")

    @dedicated_management_cpu.setter
    def dedicated_management_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_management_cpu", value)

    @property
    @pulumi.getter
    def fastpath(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fastpath")

    @fastpath.setter
    def fastpath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fastpath", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipsecDecSubengineMask")
    def ipsec_dec_subengine_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_dec_subengine_mask")

    @ipsec_dec_subengine_mask.setter
    def ipsec_dec_subengine_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_dec_subengine_mask", value)

    @property
    @pulumi.getter(name="ipsecEncSubengineMask")
    def ipsec_enc_subengine_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_enc_subengine_mask")

    @ipsec_enc_subengine_mask.setter
    def ipsec_enc_subengine_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_enc_subengine_mask", value)

    @property
    @pulumi.getter(name="ipsecInboundCache")
    def ipsec_inbound_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_inbound_cache")

    @ipsec_inbound_cache.setter
    def ipsec_inbound_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_inbound_cache", value)

    @property
    @pulumi.getter(name="ipsecMtuOverride")
    def ipsec_mtu_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_mtu_override")

    @ipsec_mtu_override.setter
    def ipsec_mtu_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_mtu_override", value)

    @property
    @pulumi.getter(name="ipsecOverVlink")
    def ipsec_over_vlink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_over_vlink")

    @ipsec_over_vlink.setter
    def ipsec_over_vlink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_over_vlink", value)

    @property
    @pulumi.getter(name="mcastSessionAccounting")
    def mcast_session_accounting(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mcast_session_accounting")

    @mcast_session_accounting.setter
    def mcast_session_accounting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mcast_session_accounting", value)

    @property
    @pulumi.getter(name="np6CpsOptimizationMode")
    def np6_cps_optimization_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "np6_cps_optimization_mode")

    @np6_cps_optimization_mode.setter
    def np6_cps_optimization_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "np6_cps_optimization_mode", value)

    @property
    @pulumi.getter(name="priorityProtocol")
    def priority_protocol(self) -> Optional[pulumi.Input['SystemNpuPriorityProtocolArgs']]:
        return pulumi.get(self, "priority_protocol")

    @priority_protocol.setter
    def priority_protocol(self, value: Optional[pulumi.Input['SystemNpuPriorityProtocolArgs']]):
        pulumi.set(self, "priority_protocol", value)

    @property
    @pulumi.getter(name="rdpOffload")
    def rdp_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rdp_offload")

    @rdp_offload.setter
    def rdp_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdp_offload", value)

    @property
    @pulumi.getter(name="sessionDeniedOffload")
    def session_denied_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_denied_offload")

    @session_denied_offload.setter
    def session_denied_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_denied_offload", value)

    @property
    @pulumi.getter(name="sseBackpressure")
    def sse_backpressure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sse_backpressure")

    @sse_backpressure.setter
    def sse_backpressure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sse_backpressure", value)

    @property
    @pulumi.getter(name="stripClearTextPadding")
    def strip_clear_text_padding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strip_clear_text_padding")

    @strip_clear_text_padding.setter
    def strip_clear_text_padding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strip_clear_text_padding", value)

    @property
    @pulumi.getter(name="stripEspPadding")
    def strip_esp_padding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strip_esp_padding")

    @strip_esp_padding.setter
    def strip_esp_padding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strip_esp_padding", value)

    @property
    @pulumi.getter(name="swNpBandwidth")
    def sw_np_bandwidth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sw_np_bandwidth")

    @sw_np_bandwidth.setter
    def sw_np_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sw_np_bandwidth", value)

    @property
    @pulumi.getter(name="uespOffload")
    def uesp_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uesp_offload")

    @uesp_offload.setter
    def uesp_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uesp_offload", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemNpuState:
    def __init__(__self__, *,
                 capwap_offload: Optional[pulumi.Input[str]] = None,
                 dedicated_management_affinity: Optional[pulumi.Input[str]] = None,
                 dedicated_management_cpu: Optional[pulumi.Input[str]] = None,
                 fastpath: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ipsec_dec_subengine_mask: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_subengine_mask: Optional[pulumi.Input[str]] = None,
                 ipsec_inbound_cache: Optional[pulumi.Input[str]] = None,
                 ipsec_mtu_override: Optional[pulumi.Input[str]] = None,
                 ipsec_over_vlink: Optional[pulumi.Input[str]] = None,
                 mcast_session_accounting: Optional[pulumi.Input[str]] = None,
                 np6_cps_optimization_mode: Optional[pulumi.Input[str]] = None,
                 priority_protocol: Optional[pulumi.Input['SystemNpuPriorityProtocolArgs']] = None,
                 rdp_offload: Optional[pulumi.Input[str]] = None,
                 session_denied_offload: Optional[pulumi.Input[str]] = None,
                 sse_backpressure: Optional[pulumi.Input[str]] = None,
                 strip_clear_text_padding: Optional[pulumi.Input[str]] = None,
                 strip_esp_padding: Optional[pulumi.Input[str]] = None,
                 sw_np_bandwidth: Optional[pulumi.Input[str]] = None,
                 uesp_offload: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemNpu resources.
        """
        if capwap_offload is not None:
            pulumi.set(__self__, "capwap_offload", capwap_offload)
        if dedicated_management_affinity is not None:
            pulumi.set(__self__, "dedicated_management_affinity", dedicated_management_affinity)
        if dedicated_management_cpu is not None:
            pulumi.set(__self__, "dedicated_management_cpu", dedicated_management_cpu)
        if fastpath is not None:
            pulumi.set(__self__, "fastpath", fastpath)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ipsec_dec_subengine_mask is not None:
            pulumi.set(__self__, "ipsec_dec_subengine_mask", ipsec_dec_subengine_mask)
        if ipsec_enc_subengine_mask is not None:
            pulumi.set(__self__, "ipsec_enc_subengine_mask", ipsec_enc_subengine_mask)
        if ipsec_inbound_cache is not None:
            pulumi.set(__self__, "ipsec_inbound_cache", ipsec_inbound_cache)
        if ipsec_mtu_override is not None:
            pulumi.set(__self__, "ipsec_mtu_override", ipsec_mtu_override)
        if ipsec_over_vlink is not None:
            pulumi.set(__self__, "ipsec_over_vlink", ipsec_over_vlink)
        if mcast_session_accounting is not None:
            pulumi.set(__self__, "mcast_session_accounting", mcast_session_accounting)
        if np6_cps_optimization_mode is not None:
            pulumi.set(__self__, "np6_cps_optimization_mode", np6_cps_optimization_mode)
        if priority_protocol is not None:
            pulumi.set(__self__, "priority_protocol", priority_protocol)
        if rdp_offload is not None:
            pulumi.set(__self__, "rdp_offload", rdp_offload)
        if session_denied_offload is not None:
            pulumi.set(__self__, "session_denied_offload", session_denied_offload)
        if sse_backpressure is not None:
            pulumi.set(__self__, "sse_backpressure", sse_backpressure)
        if strip_clear_text_padding is not None:
            pulumi.set(__self__, "strip_clear_text_padding", strip_clear_text_padding)
        if strip_esp_padding is not None:
            pulumi.set(__self__, "strip_esp_padding", strip_esp_padding)
        if sw_np_bandwidth is not None:
            pulumi.set(__self__, "sw_np_bandwidth", sw_np_bandwidth)
        if uesp_offload is not None:
            pulumi.set(__self__, "uesp_offload", uesp_offload)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="capwapOffload")
    def capwap_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capwap_offload")

    @capwap_offload.setter
    def capwap_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capwap_offload", value)

    @property
    @pulumi.getter(name="dedicatedManagementAffinity")
    def dedicated_management_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dedicated_management_affinity")

    @dedicated_management_affinity.setter
    def dedicated_management_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_management_affinity", value)

    @property
    @pulumi.getter(name="dedicatedManagementCpu")
    def dedicated_management_cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dedicated_management_cpu")

    @dedicated_management_cpu.setter
    def dedicated_management_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_management_cpu", value)

    @property
    @pulumi.getter
    def fastpath(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fastpath")

    @fastpath.setter
    def fastpath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fastpath", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipsecDecSubengineMask")
    def ipsec_dec_subengine_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_dec_subengine_mask")

    @ipsec_dec_subengine_mask.setter
    def ipsec_dec_subengine_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_dec_subengine_mask", value)

    @property
    @pulumi.getter(name="ipsecEncSubengineMask")
    def ipsec_enc_subengine_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_enc_subengine_mask")

    @ipsec_enc_subengine_mask.setter
    def ipsec_enc_subengine_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_enc_subengine_mask", value)

    @property
    @pulumi.getter(name="ipsecInboundCache")
    def ipsec_inbound_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_inbound_cache")

    @ipsec_inbound_cache.setter
    def ipsec_inbound_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_inbound_cache", value)

    @property
    @pulumi.getter(name="ipsecMtuOverride")
    def ipsec_mtu_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_mtu_override")

    @ipsec_mtu_override.setter
    def ipsec_mtu_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_mtu_override", value)

    @property
    @pulumi.getter(name="ipsecOverVlink")
    def ipsec_over_vlink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_over_vlink")

    @ipsec_over_vlink.setter
    def ipsec_over_vlink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_over_vlink", value)

    @property
    @pulumi.getter(name="mcastSessionAccounting")
    def mcast_session_accounting(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mcast_session_accounting")

    @mcast_session_accounting.setter
    def mcast_session_accounting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mcast_session_accounting", value)

    @property
    @pulumi.getter(name="np6CpsOptimizationMode")
    def np6_cps_optimization_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "np6_cps_optimization_mode")

    @np6_cps_optimization_mode.setter
    def np6_cps_optimization_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "np6_cps_optimization_mode", value)

    @property
    @pulumi.getter(name="priorityProtocol")
    def priority_protocol(self) -> Optional[pulumi.Input['SystemNpuPriorityProtocolArgs']]:
        return pulumi.get(self, "priority_protocol")

    @priority_protocol.setter
    def priority_protocol(self, value: Optional[pulumi.Input['SystemNpuPriorityProtocolArgs']]):
        pulumi.set(self, "priority_protocol", value)

    @property
    @pulumi.getter(name="rdpOffload")
    def rdp_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rdp_offload")

    @rdp_offload.setter
    def rdp_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdp_offload", value)

    @property
    @pulumi.getter(name="sessionDeniedOffload")
    def session_denied_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_denied_offload")

    @session_denied_offload.setter
    def session_denied_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_denied_offload", value)

    @property
    @pulumi.getter(name="sseBackpressure")
    def sse_backpressure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sse_backpressure")

    @sse_backpressure.setter
    def sse_backpressure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sse_backpressure", value)

    @property
    @pulumi.getter(name="stripClearTextPadding")
    def strip_clear_text_padding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strip_clear_text_padding")

    @strip_clear_text_padding.setter
    def strip_clear_text_padding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strip_clear_text_padding", value)

    @property
    @pulumi.getter(name="stripEspPadding")
    def strip_esp_padding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strip_esp_padding")

    @strip_esp_padding.setter
    def strip_esp_padding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strip_esp_padding", value)

    @property
    @pulumi.getter(name="swNpBandwidth")
    def sw_np_bandwidth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sw_np_bandwidth")

    @sw_np_bandwidth.setter
    def sw_np_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sw_np_bandwidth", value)

    @property
    @pulumi.getter(name="uespOffload")
    def uesp_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uesp_offload")

    @uesp_offload.setter
    def uesp_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uesp_offload", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemNpu(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capwap_offload: Optional[pulumi.Input[str]] = None,
                 dedicated_management_affinity: Optional[pulumi.Input[str]] = None,
                 dedicated_management_cpu: Optional[pulumi.Input[str]] = None,
                 fastpath: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ipsec_dec_subengine_mask: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_subengine_mask: Optional[pulumi.Input[str]] = None,
                 ipsec_inbound_cache: Optional[pulumi.Input[str]] = None,
                 ipsec_mtu_override: Optional[pulumi.Input[str]] = None,
                 ipsec_over_vlink: Optional[pulumi.Input[str]] = None,
                 mcast_session_accounting: Optional[pulumi.Input[str]] = None,
                 np6_cps_optimization_mode: Optional[pulumi.Input[str]] = None,
                 priority_protocol: Optional[pulumi.Input[pulumi.InputType['SystemNpuPriorityProtocolArgs']]] = None,
                 rdp_offload: Optional[pulumi.Input[str]] = None,
                 session_denied_offload: Optional[pulumi.Input[str]] = None,
                 sse_backpressure: Optional[pulumi.Input[str]] = None,
                 strip_clear_text_padding: Optional[pulumi.Input[str]] = None,
                 strip_esp_padding: Optional[pulumi.Input[str]] = None,
                 sw_np_bandwidth: Optional[pulumi.Input[str]] = None,
                 uesp_offload: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemNpu resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemNpuArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemNpu resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemNpuArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemNpuArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capwap_offload: Optional[pulumi.Input[str]] = None,
                 dedicated_management_affinity: Optional[pulumi.Input[str]] = None,
                 dedicated_management_cpu: Optional[pulumi.Input[str]] = None,
                 fastpath: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ipsec_dec_subengine_mask: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_subengine_mask: Optional[pulumi.Input[str]] = None,
                 ipsec_inbound_cache: Optional[pulumi.Input[str]] = None,
                 ipsec_mtu_override: Optional[pulumi.Input[str]] = None,
                 ipsec_over_vlink: Optional[pulumi.Input[str]] = None,
                 mcast_session_accounting: Optional[pulumi.Input[str]] = None,
                 np6_cps_optimization_mode: Optional[pulumi.Input[str]] = None,
                 priority_protocol: Optional[pulumi.Input[pulumi.InputType['SystemNpuPriorityProtocolArgs']]] = None,
                 rdp_offload: Optional[pulumi.Input[str]] = None,
                 session_denied_offload: Optional[pulumi.Input[str]] = None,
                 sse_backpressure: Optional[pulumi.Input[str]] = None,
                 strip_clear_text_padding: Optional[pulumi.Input[str]] = None,
                 strip_esp_padding: Optional[pulumi.Input[str]] = None,
                 sw_np_bandwidth: Optional[pulumi.Input[str]] = None,
                 uesp_offload: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemNpuArgs.__new__(SystemNpuArgs)

            __props__.__dict__["capwap_offload"] = capwap_offload
            __props__.__dict__["dedicated_management_affinity"] = dedicated_management_affinity
            __props__.__dict__["dedicated_management_cpu"] = dedicated_management_cpu
            __props__.__dict__["fastpath"] = fastpath
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ipsec_dec_subengine_mask"] = ipsec_dec_subengine_mask
            __props__.__dict__["ipsec_enc_subengine_mask"] = ipsec_enc_subengine_mask
            __props__.__dict__["ipsec_inbound_cache"] = ipsec_inbound_cache
            __props__.__dict__["ipsec_mtu_override"] = ipsec_mtu_override
            __props__.__dict__["ipsec_over_vlink"] = ipsec_over_vlink
            __props__.__dict__["mcast_session_accounting"] = mcast_session_accounting
            __props__.__dict__["np6_cps_optimization_mode"] = np6_cps_optimization_mode
            __props__.__dict__["priority_protocol"] = priority_protocol
            __props__.__dict__["rdp_offload"] = rdp_offload
            __props__.__dict__["session_denied_offload"] = session_denied_offload
            __props__.__dict__["sse_backpressure"] = sse_backpressure
            __props__.__dict__["strip_clear_text_padding"] = strip_clear_text_padding
            __props__.__dict__["strip_esp_padding"] = strip_esp_padding
            __props__.__dict__["sw_np_bandwidth"] = sw_np_bandwidth
            __props__.__dict__["uesp_offload"] = uesp_offload
            __props__.__dict__["vdomparam"] = vdomparam
        super(SystemNpu, __self__).__init__(
            'fortios:index/systemNpu:SystemNpu',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capwap_offload: Optional[pulumi.Input[str]] = None,
            dedicated_management_affinity: Optional[pulumi.Input[str]] = None,
            dedicated_management_cpu: Optional[pulumi.Input[str]] = None,
            fastpath: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ipsec_dec_subengine_mask: Optional[pulumi.Input[str]] = None,
            ipsec_enc_subengine_mask: Optional[pulumi.Input[str]] = None,
            ipsec_inbound_cache: Optional[pulumi.Input[str]] = None,
            ipsec_mtu_override: Optional[pulumi.Input[str]] = None,
            ipsec_over_vlink: Optional[pulumi.Input[str]] = None,
            mcast_session_accounting: Optional[pulumi.Input[str]] = None,
            np6_cps_optimization_mode: Optional[pulumi.Input[str]] = None,
            priority_protocol: Optional[pulumi.Input[pulumi.InputType['SystemNpuPriorityProtocolArgs']]] = None,
            rdp_offload: Optional[pulumi.Input[str]] = None,
            session_denied_offload: Optional[pulumi.Input[str]] = None,
            sse_backpressure: Optional[pulumi.Input[str]] = None,
            strip_clear_text_padding: Optional[pulumi.Input[str]] = None,
            strip_esp_padding: Optional[pulumi.Input[str]] = None,
            sw_np_bandwidth: Optional[pulumi.Input[str]] = None,
            uesp_offload: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemNpu':
        """
        Get an existing SystemNpu resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemNpuState.__new__(_SystemNpuState)

        __props__.__dict__["capwap_offload"] = capwap_offload
        __props__.__dict__["dedicated_management_affinity"] = dedicated_management_affinity
        __props__.__dict__["dedicated_management_cpu"] = dedicated_management_cpu
        __props__.__dict__["fastpath"] = fastpath
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ipsec_dec_subengine_mask"] = ipsec_dec_subengine_mask
        __props__.__dict__["ipsec_enc_subengine_mask"] = ipsec_enc_subengine_mask
        __props__.__dict__["ipsec_inbound_cache"] = ipsec_inbound_cache
        __props__.__dict__["ipsec_mtu_override"] = ipsec_mtu_override
        __props__.__dict__["ipsec_over_vlink"] = ipsec_over_vlink
        __props__.__dict__["mcast_session_accounting"] = mcast_session_accounting
        __props__.__dict__["np6_cps_optimization_mode"] = np6_cps_optimization_mode
        __props__.__dict__["priority_protocol"] = priority_protocol
        __props__.__dict__["rdp_offload"] = rdp_offload
        __props__.__dict__["session_denied_offload"] = session_denied_offload
        __props__.__dict__["sse_backpressure"] = sse_backpressure
        __props__.__dict__["strip_clear_text_padding"] = strip_clear_text_padding
        __props__.__dict__["strip_esp_padding"] = strip_esp_padding
        __props__.__dict__["sw_np_bandwidth"] = sw_np_bandwidth
        __props__.__dict__["uesp_offload"] = uesp_offload
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemNpu(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="capwapOffload")
    def capwap_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "capwap_offload")

    @property
    @pulumi.getter(name="dedicatedManagementAffinity")
    def dedicated_management_affinity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dedicated_management_affinity")

    @property
    @pulumi.getter(name="dedicatedManagementCpu")
    def dedicated_management_cpu(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dedicated_management_cpu")

    @property
    @pulumi.getter
    def fastpath(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fastpath")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ipsecDecSubengineMask")
    def ipsec_dec_subengine_mask(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_dec_subengine_mask")

    @property
    @pulumi.getter(name="ipsecEncSubengineMask")
    def ipsec_enc_subengine_mask(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_enc_subengine_mask")

    @property
    @pulumi.getter(name="ipsecInboundCache")
    def ipsec_inbound_cache(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_inbound_cache")

    @property
    @pulumi.getter(name="ipsecMtuOverride")
    def ipsec_mtu_override(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_mtu_override")

    @property
    @pulumi.getter(name="ipsecOverVlink")
    def ipsec_over_vlink(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_over_vlink")

    @property
    @pulumi.getter(name="mcastSessionAccounting")
    def mcast_session_accounting(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mcast_session_accounting")

    @property
    @pulumi.getter(name="np6CpsOptimizationMode")
    def np6_cps_optimization_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "np6_cps_optimization_mode")

    @property
    @pulumi.getter(name="priorityProtocol")
    def priority_protocol(self) -> pulumi.Output['outputs.SystemNpuPriorityProtocol']:
        return pulumi.get(self, "priority_protocol")

    @property
    @pulumi.getter(name="rdpOffload")
    def rdp_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rdp_offload")

    @property
    @pulumi.getter(name="sessionDeniedOffload")
    def session_denied_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "session_denied_offload")

    @property
    @pulumi.getter(name="sseBackpressure")
    def sse_backpressure(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sse_backpressure")

    @property
    @pulumi.getter(name="stripClearTextPadding")
    def strip_clear_text_padding(self) -> pulumi.Output[str]:
        return pulumi.get(self, "strip_clear_text_padding")

    @property
    @pulumi.getter(name="stripEspPadding")
    def strip_esp_padding(self) -> pulumi.Output[str]:
        return pulumi.get(self, "strip_esp_padding")

    @property
    @pulumi.getter(name="swNpBandwidth")
    def sw_np_bandwidth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sw_np_bandwidth")

    @property
    @pulumi.getter(name="uespOffload")
    def uesp_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uesp_offload")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

