# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FirewallProfileGroupArgs', 'FirewallProfileGroup']

@pulumi.input_type
class FirewallProfileGroupArgs:
    def __init__(__self__, *,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallProfileGroup resource.
        """
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if cifs_profile is not None:
            pulumi.set(__self__, "cifs_profile", cifs_profile)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile is not None:
            pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if file_filter_profile is not None:
            pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if icap_profile is not None:
            pulumi.set(__self__, "icap_profile", icap_profile)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_voip_filter is not None:
            pulumi.set(__self__, "ips_voip_filter", ips_voip_filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if sctp_filter_profile is not None:
            pulumi.set(__self__, "sctp_filter_profile", sctp_filter_profile)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if ssh_filter_profile is not None:
            pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_profile is not None:
            pulumi.set(__self__, "videofilter_profile", videofilter_profile)
        if voip_profile is not None:
            pulumi.set(__self__, "voip_profile", voip_profile)
        if waf_profile is not None:
            pulumi.set(__self__, "waf_profile", waf_profile)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cifs_profile")

    @cifs_profile.setter
    def cifs_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cifs_profile", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnsfilter_profile")

    @dnsfilter_profile.setter
    def dnsfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter_profile", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_filter_profile")

    @file_filter_profile.setter
    def file_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile", value)

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icap_profile")

    @icap_profile.setter
    def icap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_profile", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_voip_filter")

    @ips_voip_filter.setter
    def ips_voip_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_voip_filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sctp_filter_profile")

    @sctp_filter_profile.setter
    def sctp_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_filter_profile", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_filter_profile")

    @ssh_filter_profile.setter
    def ssh_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_filter_profile", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "videofilter_profile")

    @videofilter_profile.setter
    def videofilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "videofilter_profile", value)

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voip_profile")

    @voip_profile.setter
    def voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_profile", value)

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "waf_profile")

    @waf_profile.setter
    def waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_profile", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)


@pulumi.input_type
class _FirewallProfileGroupState:
    def __init__(__self__, *,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallProfileGroup resources.
        """
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if cifs_profile is not None:
            pulumi.set(__self__, "cifs_profile", cifs_profile)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile is not None:
            pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if file_filter_profile is not None:
            pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if icap_profile is not None:
            pulumi.set(__self__, "icap_profile", icap_profile)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_voip_filter is not None:
            pulumi.set(__self__, "ips_voip_filter", ips_voip_filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if sctp_filter_profile is not None:
            pulumi.set(__self__, "sctp_filter_profile", sctp_filter_profile)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if ssh_filter_profile is not None:
            pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_profile is not None:
            pulumi.set(__self__, "videofilter_profile", videofilter_profile)
        if voip_profile is not None:
            pulumi.set(__self__, "voip_profile", voip_profile)
        if waf_profile is not None:
            pulumi.set(__self__, "waf_profile", waf_profile)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cifs_profile")

    @cifs_profile.setter
    def cifs_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cifs_profile", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnsfilter_profile")

    @dnsfilter_profile.setter
    def dnsfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter_profile", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_filter_profile")

    @file_filter_profile.setter
    def file_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile", value)

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icap_profile")

    @icap_profile.setter
    def icap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_profile", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_voip_filter")

    @ips_voip_filter.setter
    def ips_voip_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_voip_filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sctp_filter_profile")

    @sctp_filter_profile.setter
    def sctp_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_filter_profile", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_filter_profile")

    @ssh_filter_profile.setter
    def ssh_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_filter_profile", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "videofilter_profile")

    @videofilter_profile.setter
    def videofilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "videofilter_profile", value)

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voip_profile")

    @voip_profile.setter
    def voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_profile", value)

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "waf_profile")

    @waf_profile.setter
    def waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_profile", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)


class FirewallProfileGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallProfileGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallProfileGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallProfileGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallProfileGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallProfileGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallProfileGroupArgs.__new__(FirewallProfileGroupArgs)

            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["av_profile"] = av_profile
            __props__.__dict__["cifs_profile"] = cifs_profile
            __props__.__dict__["dlp_profile"] = dlp_profile
            __props__.__dict__["dlp_sensor"] = dlp_sensor
            __props__.__dict__["dnsfilter_profile"] = dnsfilter_profile
            __props__.__dict__["emailfilter_profile"] = emailfilter_profile
            __props__.__dict__["file_filter_profile"] = file_filter_profile
            __props__.__dict__["icap_profile"] = icap_profile
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["ips_voip_filter"] = ips_voip_filter
            __props__.__dict__["name"] = name
            __props__.__dict__["profile_protocol_options"] = profile_protocol_options
            __props__.__dict__["sctp_filter_profile"] = sctp_filter_profile
            __props__.__dict__["spamfilter_profile"] = spamfilter_profile
            __props__.__dict__["ssh_filter_profile"] = ssh_filter_profile
            __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["videofilter_profile"] = videofilter_profile
            __props__.__dict__["voip_profile"] = voip_profile
            __props__.__dict__["waf_profile"] = waf_profile
            __props__.__dict__["webfilter_profile"] = webfilter_profile
        super(FirewallProfileGroup, __self__).__init__(
            'fortios:index/firewallProfileGroup:FirewallProfileGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            av_profile: Optional[pulumi.Input[str]] = None,
            cifs_profile: Optional[pulumi.Input[str]] = None,
            dlp_profile: Optional[pulumi.Input[str]] = None,
            dlp_sensor: Optional[pulumi.Input[str]] = None,
            dnsfilter_profile: Optional[pulumi.Input[str]] = None,
            emailfilter_profile: Optional[pulumi.Input[str]] = None,
            file_filter_profile: Optional[pulumi.Input[str]] = None,
            icap_profile: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            ips_voip_filter: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            profile_protocol_options: Optional[pulumi.Input[str]] = None,
            sctp_filter_profile: Optional[pulumi.Input[str]] = None,
            spamfilter_profile: Optional[pulumi.Input[str]] = None,
            ssh_filter_profile: Optional[pulumi.Input[str]] = None,
            ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            videofilter_profile: Optional[pulumi.Input[str]] = None,
            voip_profile: Optional[pulumi.Input[str]] = None,
            waf_profile: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None) -> 'FirewallProfileGroup':
        """
        Get an existing FirewallProfileGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallProfileGroupState.__new__(_FirewallProfileGroupState)

        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["av_profile"] = av_profile
        __props__.__dict__["cifs_profile"] = cifs_profile
        __props__.__dict__["dlp_profile"] = dlp_profile
        __props__.__dict__["dlp_sensor"] = dlp_sensor
        __props__.__dict__["dnsfilter_profile"] = dnsfilter_profile
        __props__.__dict__["emailfilter_profile"] = emailfilter_profile
        __props__.__dict__["file_filter_profile"] = file_filter_profile
        __props__.__dict__["icap_profile"] = icap_profile
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["ips_voip_filter"] = ips_voip_filter
        __props__.__dict__["name"] = name
        __props__.__dict__["profile_protocol_options"] = profile_protocol_options
        __props__.__dict__["sctp_filter_profile"] = sctp_filter_profile
        __props__.__dict__["spamfilter_profile"] = spamfilter_profile
        __props__.__dict__["ssh_filter_profile"] = ssh_filter_profile
        __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["videofilter_profile"] = videofilter_profile
        __props__.__dict__["voip_profile"] = voip_profile
        __props__.__dict__["waf_profile"] = waf_profile
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        return FirewallProfileGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cifs_profile")

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dlp_profile")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dnsfilter_profile")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_filter_profile")

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "icap_profile")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ips_voip_filter")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> pulumi.Output[str]:
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sctp_filter_profile")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_filter_profile")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "videofilter_profile")

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "voip_profile")

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "waf_profile")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "webfilter_profile")

