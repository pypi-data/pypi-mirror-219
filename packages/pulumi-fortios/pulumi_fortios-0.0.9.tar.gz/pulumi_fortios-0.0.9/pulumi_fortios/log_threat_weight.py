# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogThreatWeightArgs', 'LogThreatWeight']

@pulumi.input_type
class LogThreatWeightArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightApplicationArgs']]]] = None,
                 blocked_connection: Optional[pulumi.Input[str]] = None,
                 botnet_connection_detected: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failed_connection: Optional[pulumi.Input[str]] = None,
                 geolocations: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightGeolocationArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input['LogThreatWeightIpsArgs']] = None,
                 level: Optional[pulumi.Input['LogThreatWeightLevelArgs']] = None,
                 malware: Optional[pulumi.Input['LogThreatWeightMalwareArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_block_detected: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webs: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightWebArgs']]]] = None):
        """
        The set of arguments for constructing a LogThreatWeight resource.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if blocked_connection is not None:
            pulumi.set(__self__, "blocked_connection", blocked_connection)
        if botnet_connection_detected is not None:
            pulumi.set(__self__, "botnet_connection_detected", botnet_connection_detected)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if failed_connection is not None:
            pulumi.set(__self__, "failed_connection", failed_connection)
        if geolocations is not None:
            pulumi.set(__self__, "geolocations", geolocations)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if malware is not None:
            pulumi.set(__self__, "malware", malware)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url_block_detected is not None:
            pulumi.set(__self__, "url_block_detected", url_block_detected)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webs is not None:
            pulumi.set(__self__, "webs", webs)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="blockedConnection")
    def blocked_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blocked_connection")

    @blocked_connection.setter
    def blocked_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocked_connection", value)

    @property
    @pulumi.getter(name="botnetConnectionDetected")
    def botnet_connection_detected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "botnet_connection_detected")

    @botnet_connection_detected.setter
    def botnet_connection_detected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "botnet_connection_detected", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failedConnection")
    def failed_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "failed_connection")

    @failed_connection.setter
    def failed_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_connection", value)

    @property
    @pulumi.getter
    def geolocations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightGeolocationArgs']]]]:
        return pulumi.get(self, "geolocations")

    @geolocations.setter
    def geolocations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightGeolocationArgs']]]]):
        pulumi.set(self, "geolocations", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input['LogThreatWeightIpsArgs']]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input['LogThreatWeightIpsArgs']]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input['LogThreatWeightLevelArgs']]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input['LogThreatWeightLevelArgs']]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def malware(self) -> Optional[pulumi.Input['LogThreatWeightMalwareArgs']]:
        return pulumi.get(self, "malware")

    @malware.setter
    def malware(self, value: Optional[pulumi.Input['LogThreatWeightMalwareArgs']]):
        pulumi.set(self, "malware", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="urlBlockDetected")
    def url_block_detected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_block_detected")

    @url_block_detected.setter
    def url_block_detected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_block_detected", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def webs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightWebArgs']]]]:
        return pulumi.get(self, "webs")

    @webs.setter
    def webs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightWebArgs']]]]):
        pulumi.set(self, "webs", value)


@pulumi.input_type
class _LogThreatWeightState:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightApplicationArgs']]]] = None,
                 blocked_connection: Optional[pulumi.Input[str]] = None,
                 botnet_connection_detected: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failed_connection: Optional[pulumi.Input[str]] = None,
                 geolocations: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightGeolocationArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input['LogThreatWeightIpsArgs']] = None,
                 level: Optional[pulumi.Input['LogThreatWeightLevelArgs']] = None,
                 malware: Optional[pulumi.Input['LogThreatWeightMalwareArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_block_detected: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webs: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightWebArgs']]]] = None):
        """
        Input properties used for looking up and filtering LogThreatWeight resources.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if blocked_connection is not None:
            pulumi.set(__self__, "blocked_connection", blocked_connection)
        if botnet_connection_detected is not None:
            pulumi.set(__self__, "botnet_connection_detected", botnet_connection_detected)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if failed_connection is not None:
            pulumi.set(__self__, "failed_connection", failed_connection)
        if geolocations is not None:
            pulumi.set(__self__, "geolocations", geolocations)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if malware is not None:
            pulumi.set(__self__, "malware", malware)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url_block_detected is not None:
            pulumi.set(__self__, "url_block_detected", url_block_detected)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webs is not None:
            pulumi.set(__self__, "webs", webs)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="blockedConnection")
    def blocked_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blocked_connection")

    @blocked_connection.setter
    def blocked_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocked_connection", value)

    @property
    @pulumi.getter(name="botnetConnectionDetected")
    def botnet_connection_detected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "botnet_connection_detected")

    @botnet_connection_detected.setter
    def botnet_connection_detected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "botnet_connection_detected", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failedConnection")
    def failed_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "failed_connection")

    @failed_connection.setter
    def failed_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_connection", value)

    @property
    @pulumi.getter
    def geolocations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightGeolocationArgs']]]]:
        return pulumi.get(self, "geolocations")

    @geolocations.setter
    def geolocations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightGeolocationArgs']]]]):
        pulumi.set(self, "geolocations", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input['LogThreatWeightIpsArgs']]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input['LogThreatWeightIpsArgs']]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input['LogThreatWeightLevelArgs']]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input['LogThreatWeightLevelArgs']]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def malware(self) -> Optional[pulumi.Input['LogThreatWeightMalwareArgs']]:
        return pulumi.get(self, "malware")

    @malware.setter
    def malware(self, value: Optional[pulumi.Input['LogThreatWeightMalwareArgs']]):
        pulumi.set(self, "malware", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="urlBlockDetected")
    def url_block_detected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_block_detected")

    @url_block_detected.setter
    def url_block_detected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_block_detected", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def webs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightWebArgs']]]]:
        return pulumi.get(self, "webs")

    @webs.setter
    def webs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatWeightWebArgs']]]]):
        pulumi.set(self, "webs", value)


class LogThreatWeight(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatWeightApplicationArgs']]]]] = None,
                 blocked_connection: Optional[pulumi.Input[str]] = None,
                 botnet_connection_detected: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failed_connection: Optional[pulumi.Input[str]] = None,
                 geolocations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatWeightGeolocationArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[pulumi.InputType['LogThreatWeightIpsArgs']]] = None,
                 level: Optional[pulumi.Input[pulumi.InputType['LogThreatWeightLevelArgs']]] = None,
                 malware: Optional[pulumi.Input[pulumi.InputType['LogThreatWeightMalwareArgs']]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_block_detected: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatWeightWebArgs']]]]] = None,
                 __props__=None):
        """
        Create a LogThreatWeight resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LogThreatWeightArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogThreatWeight resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogThreatWeightArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogThreatWeightArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatWeightApplicationArgs']]]]] = None,
                 blocked_connection: Optional[pulumi.Input[str]] = None,
                 botnet_connection_detected: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failed_connection: Optional[pulumi.Input[str]] = None,
                 geolocations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatWeightGeolocationArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[pulumi.InputType['LogThreatWeightIpsArgs']]] = None,
                 level: Optional[pulumi.Input[pulumi.InputType['LogThreatWeightLevelArgs']]] = None,
                 malware: Optional[pulumi.Input[pulumi.InputType['LogThreatWeightMalwareArgs']]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_block_detected: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatWeightWebArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogThreatWeightArgs.__new__(LogThreatWeightArgs)

            __props__.__dict__["applications"] = applications
            __props__.__dict__["blocked_connection"] = blocked_connection
            __props__.__dict__["botnet_connection_detected"] = botnet_connection_detected
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["failed_connection"] = failed_connection
            __props__.__dict__["geolocations"] = geolocations
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ips"] = ips
            __props__.__dict__["level"] = level
            __props__.__dict__["malware"] = malware
            __props__.__dict__["status"] = status
            __props__.__dict__["url_block_detected"] = url_block_detected
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["webs"] = webs
        super(LogThreatWeight, __self__).__init__(
            'fortios:index/logThreatWeight:LogThreatWeight',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatWeightApplicationArgs']]]]] = None,
            blocked_connection: Optional[pulumi.Input[str]] = None,
            botnet_connection_detected: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            failed_connection: Optional[pulumi.Input[str]] = None,
            geolocations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatWeightGeolocationArgs']]]]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ips: Optional[pulumi.Input[pulumi.InputType['LogThreatWeightIpsArgs']]] = None,
            level: Optional[pulumi.Input[pulumi.InputType['LogThreatWeightLevelArgs']]] = None,
            malware: Optional[pulumi.Input[pulumi.InputType['LogThreatWeightMalwareArgs']]] = None,
            status: Optional[pulumi.Input[str]] = None,
            url_block_detected: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            webs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatWeightWebArgs']]]]] = None) -> 'LogThreatWeight':
        """
        Get an existing LogThreatWeight resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogThreatWeightState.__new__(_LogThreatWeightState)

        __props__.__dict__["applications"] = applications
        __props__.__dict__["blocked_connection"] = blocked_connection
        __props__.__dict__["botnet_connection_detected"] = botnet_connection_detected
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["failed_connection"] = failed_connection
        __props__.__dict__["geolocations"] = geolocations
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ips"] = ips
        __props__.__dict__["level"] = level
        __props__.__dict__["malware"] = malware
        __props__.__dict__["status"] = status
        __props__.__dict__["url_block_detected"] = url_block_detected
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["webs"] = webs
        return LogThreatWeight(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[Sequence['outputs.LogThreatWeightApplication']]]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="blockedConnection")
    def blocked_connection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "blocked_connection")

    @property
    @pulumi.getter(name="botnetConnectionDetected")
    def botnet_connection_detected(self) -> pulumi.Output[str]:
        return pulumi.get(self, "botnet_connection_detected")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="failedConnection")
    def failed_connection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "failed_connection")

    @property
    @pulumi.getter
    def geolocations(self) -> pulumi.Output[Optional[Sequence['outputs.LogThreatWeightGeolocation']]]:
        return pulumi.get(self, "geolocations")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def ips(self) -> pulumi.Output['outputs.LogThreatWeightIps']:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def level(self) -> pulumi.Output['outputs.LogThreatWeightLevel']:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def malware(self) -> pulumi.Output['outputs.LogThreatWeightMalware']:
        return pulumi.get(self, "malware")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="urlBlockDetected")
    def url_block_detected(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url_block_detected")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def webs(self) -> pulumi.Output[Optional[Sequence['outputs.LogThreatWeightWeb']]]:
        return pulumi.get(self, "webs")

