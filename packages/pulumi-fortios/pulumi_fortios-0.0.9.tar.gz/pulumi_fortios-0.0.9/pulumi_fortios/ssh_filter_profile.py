# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SshFilterProfileArgs', 'SshFilterProfile']

@pulumi.input_type
class SshFilterProfileArgs:
    def __init__(__self__, *,
                 block: Optional[pulumi.Input[str]] = None,
                 default_command_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input['SshFilterProfileFileFilterArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 shell_commands: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileShellCommandArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SshFilterProfile resource.
        """
        if block is not None:
            pulumi.set(__self__, "block", block)
        if default_command_log is not None:
            pulumi.set(__self__, "default_command_log", default_command_log)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shell_commands is not None:
            pulumi.set(__self__, "shell_commands", shell_commands)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block")

    @block.setter
    def block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block", value)

    @property
    @pulumi.getter(name="defaultCommandLog")
    def default_command_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_command_log")

    @default_command_log.setter
    def default_command_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_command_log", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input['SshFilterProfileFileFilterArgs']]:
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input['SshFilterProfileFileFilterArgs']]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="shellCommands")
    def shell_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileShellCommandArgs']]]]:
        return pulumi.get(self, "shell_commands")

    @shell_commands.setter
    def shell_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileShellCommandArgs']]]]):
        pulumi.set(self, "shell_commands", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SshFilterProfileState:
    def __init__(__self__, *,
                 block: Optional[pulumi.Input[str]] = None,
                 default_command_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input['SshFilterProfileFileFilterArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 shell_commands: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileShellCommandArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SshFilterProfile resources.
        """
        if block is not None:
            pulumi.set(__self__, "block", block)
        if default_command_log is not None:
            pulumi.set(__self__, "default_command_log", default_command_log)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shell_commands is not None:
            pulumi.set(__self__, "shell_commands", shell_commands)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block")

    @block.setter
    def block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block", value)

    @property
    @pulumi.getter(name="defaultCommandLog")
    def default_command_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_command_log")

    @default_command_log.setter
    def default_command_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_command_log", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input['SshFilterProfileFileFilterArgs']]:
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input['SshFilterProfileFileFilterArgs']]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="shellCommands")
    def shell_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileShellCommandArgs']]]]:
        return pulumi.get(self, "shell_commands")

    @shell_commands.setter
    def shell_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileShellCommandArgs']]]]):
        pulumi.set(self, "shell_commands", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SshFilterProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block: Optional[pulumi.Input[str]] = None,
                 default_command_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[pulumi.InputType['SshFilterProfileFileFilterArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 shell_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SshFilterProfileShellCommandArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SshFilterProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SshFilterProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SshFilterProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SshFilterProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SshFilterProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block: Optional[pulumi.Input[str]] = None,
                 default_command_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[pulumi.InputType['SshFilterProfileFileFilterArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 shell_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SshFilterProfileShellCommandArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SshFilterProfileArgs.__new__(SshFilterProfileArgs)

            __props__.__dict__["block"] = block
            __props__.__dict__["default_command_log"] = default_command_log
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["file_filter"] = file_filter
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["log"] = log
            __props__.__dict__["name"] = name
            __props__.__dict__["shell_commands"] = shell_commands
            __props__.__dict__["vdomparam"] = vdomparam
        super(SshFilterProfile, __self__).__init__(
            'fortios:index/sshFilterProfile:SshFilterProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            block: Optional[pulumi.Input[str]] = None,
            default_command_log: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            file_filter: Optional[pulumi.Input[pulumi.InputType['SshFilterProfileFileFilterArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            log: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            shell_commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SshFilterProfileShellCommandArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SshFilterProfile':
        """
        Get an existing SshFilterProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SshFilterProfileState.__new__(_SshFilterProfileState)

        __props__.__dict__["block"] = block
        __props__.__dict__["default_command_log"] = default_command_log
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["file_filter"] = file_filter
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["log"] = log
        __props__.__dict__["name"] = name
        __props__.__dict__["shell_commands"] = shell_commands
        __props__.__dict__["vdomparam"] = vdomparam
        return SshFilterProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def block(self) -> pulumi.Output[str]:
        return pulumi.get(self, "block")

    @property
    @pulumi.getter(name="defaultCommandLog")
    def default_command_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_command_log")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> pulumi.Output['outputs.SshFilterProfileFileFilter']:
        return pulumi.get(self, "file_filter")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shellCommands")
    def shell_commands(self) -> pulumi.Output[Optional[Sequence['outputs.SshFilterProfileShellCommand']]]:
        return pulumi.get(self, "shell_commands")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

