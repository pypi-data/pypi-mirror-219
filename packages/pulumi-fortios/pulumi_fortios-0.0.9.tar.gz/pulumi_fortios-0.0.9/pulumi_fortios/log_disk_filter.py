# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogDiskFilterArgs', 'LogDiskFilter']

@pulumi.input_type
class LogDiskFilterArgs:
    def __init__(__self__, *,
                 admin: Optional[pulumi.Input[str]] = None,
                 anomaly: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 cpu_memory_usage: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[str]] = None,
                 dlp_archive: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 forward_traffic: Optional[pulumi.Input[str]] = None,
                 free_styles: Optional[pulumi.Input[Sequence[pulumi.Input['LogDiskFilterFreeStyleArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gtp: Optional[pulumi.Input[str]] = None,
                 ha: Optional[pulumi.Input[str]] = None,
                 ipsec: Optional[pulumi.Input[str]] = None,
                 ldb_monitor: Optional[pulumi.Input[str]] = None,
                 local_traffic: Optional[pulumi.Input[str]] = None,
                 multicast_traffic: Optional[pulumi.Input[str]] = None,
                 netscan_discovery: Optional[pulumi.Input[str]] = None,
                 netscan_vulnerability: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 ppp: Optional[pulumi.Input[str]] = None,
                 radius: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 sniffer_traffic: Optional[pulumi.Input[str]] = None,
                 ssh: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_adm: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_auth: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_session: Optional[pulumi.Input[str]] = None,
                 system: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vip_ssl: Optional[pulumi.Input[str]] = None,
                 voip: Optional[pulumi.Input[str]] = None,
                 wan_opt: Optional[pulumi.Input[str]] = None,
                 wireless_activity: Optional[pulumi.Input[str]] = None,
                 ztna_traffic: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LogDiskFilter resource.
        """
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if anomaly is not None:
            pulumi.set(__self__, "anomaly", anomaly)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if cpu_memory_usage is not None:
            pulumi.set(__self__, "cpu_memory_usage", cpu_memory_usage)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if dlp_archive is not None:
            pulumi.set(__self__, "dlp_archive", dlp_archive)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if forward_traffic is not None:
            pulumi.set(__self__, "forward_traffic", forward_traffic)
        if free_styles is not None:
            pulumi.set(__self__, "free_styles", free_styles)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gtp is not None:
            pulumi.set(__self__, "gtp", gtp)
        if ha is not None:
            pulumi.set(__self__, "ha", ha)
        if ipsec is not None:
            pulumi.set(__self__, "ipsec", ipsec)
        if ldb_monitor is not None:
            pulumi.set(__self__, "ldb_monitor", ldb_monitor)
        if local_traffic is not None:
            pulumi.set(__self__, "local_traffic", local_traffic)
        if multicast_traffic is not None:
            pulumi.set(__self__, "multicast_traffic", multicast_traffic)
        if netscan_discovery is not None:
            pulumi.set(__self__, "netscan_discovery", netscan_discovery)
        if netscan_vulnerability is not None:
            pulumi.set(__self__, "netscan_vulnerability", netscan_vulnerability)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if ppp is not None:
            pulumi.set(__self__, "ppp", ppp)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if sniffer_traffic is not None:
            pulumi.set(__self__, "sniffer_traffic", sniffer_traffic)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if sslvpn_log_adm is not None:
            pulumi.set(__self__, "sslvpn_log_adm", sslvpn_log_adm)
        if sslvpn_log_auth is not None:
            pulumi.set(__self__, "sslvpn_log_auth", sslvpn_log_auth)
        if sslvpn_log_session is not None:
            pulumi.set(__self__, "sslvpn_log_session", sslvpn_log_session)
        if system is not None:
            pulumi.set(__self__, "system", system)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vip_ssl is not None:
            pulumi.set(__self__, "vip_ssl", vip_ssl)
        if voip is not None:
            pulumi.set(__self__, "voip", voip)
        if wan_opt is not None:
            pulumi.set(__self__, "wan_opt", wan_opt)
        if wireless_activity is not None:
            pulumi.set(__self__, "wireless_activity", wireless_activity)
        if ztna_traffic is not None:
            pulumi.set(__self__, "ztna_traffic", ztna_traffic)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def anomaly(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anomaly")

    @anomaly.setter
    def anomaly(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anomaly", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="cpuMemoryUsage")
    def cpu_memory_usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_memory_usage")

    @cpu_memory_usage.setter
    def cpu_memory_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_memory_usage", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter(name="dlpArchive")
    def dlp_archive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_archive")

    @dlp_archive.setter
    def dlp_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_archive", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="forwardTraffic")
    def forward_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forward_traffic")

    @forward_traffic.setter
    def forward_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_traffic", value)

    @property
    @pulumi.getter(name="freeStyles")
    def free_styles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogDiskFilterFreeStyleArgs']]]]:
        return pulumi.get(self, "free_styles")

    @free_styles.setter
    def free_styles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogDiskFilterFreeStyleArgs']]]]):
        pulumi.set(self, "free_styles", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def gtp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gtp")

    @gtp.setter
    def gtp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gtp", value)

    @property
    @pulumi.getter
    def ha(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha")

    @ha.setter
    def ha(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha", value)

    @property
    @pulumi.getter
    def ipsec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec")

    @ipsec.setter
    def ipsec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec", value)

    @property
    @pulumi.getter(name="ldbMonitor")
    def ldb_monitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldb_monitor")

    @ldb_monitor.setter
    def ldb_monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_monitor", value)

    @property
    @pulumi.getter(name="localTraffic")
    def local_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_traffic")

    @local_traffic.setter
    def local_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_traffic", value)

    @property
    @pulumi.getter(name="multicastTraffic")
    def multicast_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_traffic")

    @multicast_traffic.setter
    def multicast_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_traffic", value)

    @property
    @pulumi.getter(name="netscanDiscovery")
    def netscan_discovery(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "netscan_discovery")

    @netscan_discovery.setter
    def netscan_discovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netscan_discovery", value)

    @property
    @pulumi.getter(name="netscanVulnerability")
    def netscan_vulnerability(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "netscan_vulnerability")

    @netscan_vulnerability.setter
    def netscan_vulnerability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netscan_vulnerability", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def ppp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppp")

    @ppp.setter
    def ppp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp", value)

    @property
    @pulumi.getter
    def radius(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius")

    @radius.setter
    def radius(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="snifferTraffic")
    def sniffer_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sniffer_traffic")

    @sniffer_traffic.setter
    def sniffer_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sniffer_traffic", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter(name="sslvpnLogAdm")
    def sslvpn_log_adm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_log_adm")

    @sslvpn_log_adm.setter
    def sslvpn_log_adm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_log_adm", value)

    @property
    @pulumi.getter(name="sslvpnLogAuth")
    def sslvpn_log_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_log_auth")

    @sslvpn_log_auth.setter
    def sslvpn_log_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_log_auth", value)

    @property
    @pulumi.getter(name="sslvpnLogSession")
    def sslvpn_log_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_log_session")

    @sslvpn_log_session.setter
    def sslvpn_log_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_log_session", value)

    @property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vipSsl")
    def vip_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vip_ssl")

    @vip_ssl.setter
    def vip_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip_ssl", value)

    @property
    @pulumi.getter
    def voip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voip")

    @voip.setter
    def voip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip", value)

    @property
    @pulumi.getter(name="wanOpt")
    def wan_opt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_opt")

    @wan_opt.setter
    def wan_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_opt", value)

    @property
    @pulumi.getter(name="wirelessActivity")
    def wireless_activity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wireless_activity")

    @wireless_activity.setter
    def wireless_activity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wireless_activity", value)

    @property
    @pulumi.getter(name="ztnaTraffic")
    def ztna_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ztna_traffic")

    @ztna_traffic.setter
    def ztna_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_traffic", value)


@pulumi.input_type
class _LogDiskFilterState:
    def __init__(__self__, *,
                 admin: Optional[pulumi.Input[str]] = None,
                 anomaly: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 cpu_memory_usage: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[str]] = None,
                 dlp_archive: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 forward_traffic: Optional[pulumi.Input[str]] = None,
                 free_styles: Optional[pulumi.Input[Sequence[pulumi.Input['LogDiskFilterFreeStyleArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gtp: Optional[pulumi.Input[str]] = None,
                 ha: Optional[pulumi.Input[str]] = None,
                 ipsec: Optional[pulumi.Input[str]] = None,
                 ldb_monitor: Optional[pulumi.Input[str]] = None,
                 local_traffic: Optional[pulumi.Input[str]] = None,
                 multicast_traffic: Optional[pulumi.Input[str]] = None,
                 netscan_discovery: Optional[pulumi.Input[str]] = None,
                 netscan_vulnerability: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 ppp: Optional[pulumi.Input[str]] = None,
                 radius: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 sniffer_traffic: Optional[pulumi.Input[str]] = None,
                 ssh: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_adm: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_auth: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_session: Optional[pulumi.Input[str]] = None,
                 system: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vip_ssl: Optional[pulumi.Input[str]] = None,
                 voip: Optional[pulumi.Input[str]] = None,
                 wan_opt: Optional[pulumi.Input[str]] = None,
                 wireless_activity: Optional[pulumi.Input[str]] = None,
                 ztna_traffic: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LogDiskFilter resources.
        """
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if anomaly is not None:
            pulumi.set(__self__, "anomaly", anomaly)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if cpu_memory_usage is not None:
            pulumi.set(__self__, "cpu_memory_usage", cpu_memory_usage)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if dlp_archive is not None:
            pulumi.set(__self__, "dlp_archive", dlp_archive)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if forward_traffic is not None:
            pulumi.set(__self__, "forward_traffic", forward_traffic)
        if free_styles is not None:
            pulumi.set(__self__, "free_styles", free_styles)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gtp is not None:
            pulumi.set(__self__, "gtp", gtp)
        if ha is not None:
            pulumi.set(__self__, "ha", ha)
        if ipsec is not None:
            pulumi.set(__self__, "ipsec", ipsec)
        if ldb_monitor is not None:
            pulumi.set(__self__, "ldb_monitor", ldb_monitor)
        if local_traffic is not None:
            pulumi.set(__self__, "local_traffic", local_traffic)
        if multicast_traffic is not None:
            pulumi.set(__self__, "multicast_traffic", multicast_traffic)
        if netscan_discovery is not None:
            pulumi.set(__self__, "netscan_discovery", netscan_discovery)
        if netscan_vulnerability is not None:
            pulumi.set(__self__, "netscan_vulnerability", netscan_vulnerability)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if ppp is not None:
            pulumi.set(__self__, "ppp", ppp)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if sniffer_traffic is not None:
            pulumi.set(__self__, "sniffer_traffic", sniffer_traffic)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if sslvpn_log_adm is not None:
            pulumi.set(__self__, "sslvpn_log_adm", sslvpn_log_adm)
        if sslvpn_log_auth is not None:
            pulumi.set(__self__, "sslvpn_log_auth", sslvpn_log_auth)
        if sslvpn_log_session is not None:
            pulumi.set(__self__, "sslvpn_log_session", sslvpn_log_session)
        if system is not None:
            pulumi.set(__self__, "system", system)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vip_ssl is not None:
            pulumi.set(__self__, "vip_ssl", vip_ssl)
        if voip is not None:
            pulumi.set(__self__, "voip", voip)
        if wan_opt is not None:
            pulumi.set(__self__, "wan_opt", wan_opt)
        if wireless_activity is not None:
            pulumi.set(__self__, "wireless_activity", wireless_activity)
        if ztna_traffic is not None:
            pulumi.set(__self__, "ztna_traffic", ztna_traffic)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def anomaly(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anomaly")

    @anomaly.setter
    def anomaly(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anomaly", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="cpuMemoryUsage")
    def cpu_memory_usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_memory_usage")

    @cpu_memory_usage.setter
    def cpu_memory_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_memory_usage", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter(name="dlpArchive")
    def dlp_archive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_archive")

    @dlp_archive.setter
    def dlp_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_archive", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="forwardTraffic")
    def forward_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forward_traffic")

    @forward_traffic.setter
    def forward_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_traffic", value)

    @property
    @pulumi.getter(name="freeStyles")
    def free_styles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogDiskFilterFreeStyleArgs']]]]:
        return pulumi.get(self, "free_styles")

    @free_styles.setter
    def free_styles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogDiskFilterFreeStyleArgs']]]]):
        pulumi.set(self, "free_styles", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def gtp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gtp")

    @gtp.setter
    def gtp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gtp", value)

    @property
    @pulumi.getter
    def ha(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha")

    @ha.setter
    def ha(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha", value)

    @property
    @pulumi.getter
    def ipsec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec")

    @ipsec.setter
    def ipsec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec", value)

    @property
    @pulumi.getter(name="ldbMonitor")
    def ldb_monitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldb_monitor")

    @ldb_monitor.setter
    def ldb_monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_monitor", value)

    @property
    @pulumi.getter(name="localTraffic")
    def local_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_traffic")

    @local_traffic.setter
    def local_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_traffic", value)

    @property
    @pulumi.getter(name="multicastTraffic")
    def multicast_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_traffic")

    @multicast_traffic.setter
    def multicast_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_traffic", value)

    @property
    @pulumi.getter(name="netscanDiscovery")
    def netscan_discovery(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "netscan_discovery")

    @netscan_discovery.setter
    def netscan_discovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netscan_discovery", value)

    @property
    @pulumi.getter(name="netscanVulnerability")
    def netscan_vulnerability(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "netscan_vulnerability")

    @netscan_vulnerability.setter
    def netscan_vulnerability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netscan_vulnerability", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def ppp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppp")

    @ppp.setter
    def ppp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp", value)

    @property
    @pulumi.getter
    def radius(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius")

    @radius.setter
    def radius(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="snifferTraffic")
    def sniffer_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sniffer_traffic")

    @sniffer_traffic.setter
    def sniffer_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sniffer_traffic", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter(name="sslvpnLogAdm")
    def sslvpn_log_adm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_log_adm")

    @sslvpn_log_adm.setter
    def sslvpn_log_adm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_log_adm", value)

    @property
    @pulumi.getter(name="sslvpnLogAuth")
    def sslvpn_log_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_log_auth")

    @sslvpn_log_auth.setter
    def sslvpn_log_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_log_auth", value)

    @property
    @pulumi.getter(name="sslvpnLogSession")
    def sslvpn_log_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_log_session")

    @sslvpn_log_session.setter
    def sslvpn_log_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_log_session", value)

    @property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vipSsl")
    def vip_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vip_ssl")

    @vip_ssl.setter
    def vip_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip_ssl", value)

    @property
    @pulumi.getter
    def voip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voip")

    @voip.setter
    def voip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip", value)

    @property
    @pulumi.getter(name="wanOpt")
    def wan_opt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_opt")

    @wan_opt.setter
    def wan_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_opt", value)

    @property
    @pulumi.getter(name="wirelessActivity")
    def wireless_activity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wireless_activity")

    @wireless_activity.setter
    def wireless_activity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wireless_activity", value)

    @property
    @pulumi.getter(name="ztnaTraffic")
    def ztna_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ztna_traffic")

    @ztna_traffic.setter
    def ztna_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_traffic", value)


class LogDiskFilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin: Optional[pulumi.Input[str]] = None,
                 anomaly: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 cpu_memory_usage: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[str]] = None,
                 dlp_archive: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 forward_traffic: Optional[pulumi.Input[str]] = None,
                 free_styles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogDiskFilterFreeStyleArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gtp: Optional[pulumi.Input[str]] = None,
                 ha: Optional[pulumi.Input[str]] = None,
                 ipsec: Optional[pulumi.Input[str]] = None,
                 ldb_monitor: Optional[pulumi.Input[str]] = None,
                 local_traffic: Optional[pulumi.Input[str]] = None,
                 multicast_traffic: Optional[pulumi.Input[str]] = None,
                 netscan_discovery: Optional[pulumi.Input[str]] = None,
                 netscan_vulnerability: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 ppp: Optional[pulumi.Input[str]] = None,
                 radius: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 sniffer_traffic: Optional[pulumi.Input[str]] = None,
                 ssh: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_adm: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_auth: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_session: Optional[pulumi.Input[str]] = None,
                 system: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vip_ssl: Optional[pulumi.Input[str]] = None,
                 voip: Optional[pulumi.Input[str]] = None,
                 wan_opt: Optional[pulumi.Input[str]] = None,
                 wireless_activity: Optional[pulumi.Input[str]] = None,
                 ztna_traffic: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LogDiskFilter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LogDiskFilterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogDiskFilter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogDiskFilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogDiskFilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin: Optional[pulumi.Input[str]] = None,
                 anomaly: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 cpu_memory_usage: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[str]] = None,
                 dlp_archive: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 forward_traffic: Optional[pulumi.Input[str]] = None,
                 free_styles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogDiskFilterFreeStyleArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gtp: Optional[pulumi.Input[str]] = None,
                 ha: Optional[pulumi.Input[str]] = None,
                 ipsec: Optional[pulumi.Input[str]] = None,
                 ldb_monitor: Optional[pulumi.Input[str]] = None,
                 local_traffic: Optional[pulumi.Input[str]] = None,
                 multicast_traffic: Optional[pulumi.Input[str]] = None,
                 netscan_discovery: Optional[pulumi.Input[str]] = None,
                 netscan_vulnerability: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 ppp: Optional[pulumi.Input[str]] = None,
                 radius: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 sniffer_traffic: Optional[pulumi.Input[str]] = None,
                 ssh: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_adm: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_auth: Optional[pulumi.Input[str]] = None,
                 sslvpn_log_session: Optional[pulumi.Input[str]] = None,
                 system: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vip_ssl: Optional[pulumi.Input[str]] = None,
                 voip: Optional[pulumi.Input[str]] = None,
                 wan_opt: Optional[pulumi.Input[str]] = None,
                 wireless_activity: Optional[pulumi.Input[str]] = None,
                 ztna_traffic: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogDiskFilterArgs.__new__(LogDiskFilterArgs)

            __props__.__dict__["admin"] = admin
            __props__.__dict__["anomaly"] = anomaly
            __props__.__dict__["auth"] = auth
            __props__.__dict__["cpu_memory_usage"] = cpu_memory_usage
            __props__.__dict__["dhcp"] = dhcp
            __props__.__dict__["dlp_archive"] = dlp_archive
            __props__.__dict__["dns"] = dns
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["event"] = event
            __props__.__dict__["filter"] = filter
            __props__.__dict__["filter_type"] = filter_type
            __props__.__dict__["forward_traffic"] = forward_traffic
            __props__.__dict__["free_styles"] = free_styles
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["gtp"] = gtp
            __props__.__dict__["ha"] = ha
            __props__.__dict__["ipsec"] = ipsec
            __props__.__dict__["ldb_monitor"] = ldb_monitor
            __props__.__dict__["local_traffic"] = local_traffic
            __props__.__dict__["multicast_traffic"] = multicast_traffic
            __props__.__dict__["netscan_discovery"] = netscan_discovery
            __props__.__dict__["netscan_vulnerability"] = netscan_vulnerability
            __props__.__dict__["pattern"] = pattern
            __props__.__dict__["ppp"] = ppp
            __props__.__dict__["radius"] = radius
            __props__.__dict__["severity"] = severity
            __props__.__dict__["sniffer_traffic"] = sniffer_traffic
            __props__.__dict__["ssh"] = ssh
            __props__.__dict__["sslvpn_log_adm"] = sslvpn_log_adm
            __props__.__dict__["sslvpn_log_auth"] = sslvpn_log_auth
            __props__.__dict__["sslvpn_log_session"] = sslvpn_log_session
            __props__.__dict__["system"] = system
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vip_ssl"] = vip_ssl
            __props__.__dict__["voip"] = voip
            __props__.__dict__["wan_opt"] = wan_opt
            __props__.__dict__["wireless_activity"] = wireless_activity
            __props__.__dict__["ztna_traffic"] = ztna_traffic
        super(LogDiskFilter, __self__).__init__(
            'fortios:index/logDiskFilter:LogDiskFilter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin: Optional[pulumi.Input[str]] = None,
            anomaly: Optional[pulumi.Input[str]] = None,
            auth: Optional[pulumi.Input[str]] = None,
            cpu_memory_usage: Optional[pulumi.Input[str]] = None,
            dhcp: Optional[pulumi.Input[str]] = None,
            dlp_archive: Optional[pulumi.Input[str]] = None,
            dns: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            event: Optional[pulumi.Input[str]] = None,
            filter: Optional[pulumi.Input[str]] = None,
            filter_type: Optional[pulumi.Input[str]] = None,
            forward_traffic: Optional[pulumi.Input[str]] = None,
            free_styles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogDiskFilterFreeStyleArgs']]]]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            gtp: Optional[pulumi.Input[str]] = None,
            ha: Optional[pulumi.Input[str]] = None,
            ipsec: Optional[pulumi.Input[str]] = None,
            ldb_monitor: Optional[pulumi.Input[str]] = None,
            local_traffic: Optional[pulumi.Input[str]] = None,
            multicast_traffic: Optional[pulumi.Input[str]] = None,
            netscan_discovery: Optional[pulumi.Input[str]] = None,
            netscan_vulnerability: Optional[pulumi.Input[str]] = None,
            pattern: Optional[pulumi.Input[str]] = None,
            ppp: Optional[pulumi.Input[str]] = None,
            radius: Optional[pulumi.Input[str]] = None,
            severity: Optional[pulumi.Input[str]] = None,
            sniffer_traffic: Optional[pulumi.Input[str]] = None,
            ssh: Optional[pulumi.Input[str]] = None,
            sslvpn_log_adm: Optional[pulumi.Input[str]] = None,
            sslvpn_log_auth: Optional[pulumi.Input[str]] = None,
            sslvpn_log_session: Optional[pulumi.Input[str]] = None,
            system: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vip_ssl: Optional[pulumi.Input[str]] = None,
            voip: Optional[pulumi.Input[str]] = None,
            wan_opt: Optional[pulumi.Input[str]] = None,
            wireless_activity: Optional[pulumi.Input[str]] = None,
            ztna_traffic: Optional[pulumi.Input[str]] = None) -> 'LogDiskFilter':
        """
        Get an existing LogDiskFilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogDiskFilterState.__new__(_LogDiskFilterState)

        __props__.__dict__["admin"] = admin
        __props__.__dict__["anomaly"] = anomaly
        __props__.__dict__["auth"] = auth
        __props__.__dict__["cpu_memory_usage"] = cpu_memory_usage
        __props__.__dict__["dhcp"] = dhcp
        __props__.__dict__["dlp_archive"] = dlp_archive
        __props__.__dict__["dns"] = dns
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["event"] = event
        __props__.__dict__["filter"] = filter
        __props__.__dict__["filter_type"] = filter_type
        __props__.__dict__["forward_traffic"] = forward_traffic
        __props__.__dict__["free_styles"] = free_styles
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["gtp"] = gtp
        __props__.__dict__["ha"] = ha
        __props__.__dict__["ipsec"] = ipsec
        __props__.__dict__["ldb_monitor"] = ldb_monitor
        __props__.__dict__["local_traffic"] = local_traffic
        __props__.__dict__["multicast_traffic"] = multicast_traffic
        __props__.__dict__["netscan_discovery"] = netscan_discovery
        __props__.__dict__["netscan_vulnerability"] = netscan_vulnerability
        __props__.__dict__["pattern"] = pattern
        __props__.__dict__["ppp"] = ppp
        __props__.__dict__["radius"] = radius
        __props__.__dict__["severity"] = severity
        __props__.__dict__["sniffer_traffic"] = sniffer_traffic
        __props__.__dict__["ssh"] = ssh
        __props__.__dict__["sslvpn_log_adm"] = sslvpn_log_adm
        __props__.__dict__["sslvpn_log_auth"] = sslvpn_log_auth
        __props__.__dict__["sslvpn_log_session"] = sslvpn_log_session
        __props__.__dict__["system"] = system
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vip_ssl"] = vip_ssl
        __props__.__dict__["voip"] = voip
        __props__.__dict__["wan_opt"] = wan_opt
        __props__.__dict__["wireless_activity"] = wireless_activity
        __props__.__dict__["ztna_traffic"] = ztna_traffic
        return LogDiskFilter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def admin(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def anomaly(self) -> pulumi.Output[str]:
        return pulumi.get(self, "anomaly")

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter(name="cpuMemoryUsage")
    def cpu_memory_usage(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cpu_memory_usage")

    @property
    @pulumi.getter
    def dhcp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter(name="dlpArchive")
    def dlp_archive(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dlp_archive")

    @property
    @pulumi.getter
    def dns(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def event(self) -> pulumi.Output[str]:
        return pulumi.get(self, "event")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="forwardTraffic")
    def forward_traffic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forward_traffic")

    @property
    @pulumi.getter(name="freeStyles")
    def free_styles(self) -> pulumi.Output[Optional[Sequence['outputs.LogDiskFilterFreeStyle']]]:
        return pulumi.get(self, "free_styles")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def gtp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gtp")

    @property
    @pulumi.getter
    def ha(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ha")

    @property
    @pulumi.getter
    def ipsec(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec")

    @property
    @pulumi.getter(name="ldbMonitor")
    def ldb_monitor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ldb_monitor")

    @property
    @pulumi.getter(name="localTraffic")
    def local_traffic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_traffic")

    @property
    @pulumi.getter(name="multicastTraffic")
    def multicast_traffic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "multicast_traffic")

    @property
    @pulumi.getter(name="netscanDiscovery")
    def netscan_discovery(self) -> pulumi.Output[str]:
        return pulumi.get(self, "netscan_discovery")

    @property
    @pulumi.getter(name="netscanVulnerability")
    def netscan_vulnerability(self) -> pulumi.Output[str]:
        return pulumi.get(self, "netscan_vulnerability")

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def ppp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ppp")

    @property
    @pulumi.getter
    def radius(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radius")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="snifferTraffic")
    def sniffer_traffic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sniffer_traffic")

    @property
    @pulumi.getter
    def ssh(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter(name="sslvpnLogAdm")
    def sslvpn_log_adm(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sslvpn_log_adm")

    @property
    @pulumi.getter(name="sslvpnLogAuth")
    def sslvpn_log_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sslvpn_log_auth")

    @property
    @pulumi.getter(name="sslvpnLogSession")
    def sslvpn_log_session(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sslvpn_log_session")

    @property
    @pulumi.getter
    def system(self) -> pulumi.Output[str]:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vipSsl")
    def vip_ssl(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vip_ssl")

    @property
    @pulumi.getter
    def voip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "voip")

    @property
    @pulumi.getter(name="wanOpt")
    def wan_opt(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wan_opt")

    @property
    @pulumi.getter(name="wirelessActivity")
    def wireless_activity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wireless_activity")

    @property
    @pulumi.getter(name="ztnaTraffic")
    def ztna_traffic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ztna_traffic")

