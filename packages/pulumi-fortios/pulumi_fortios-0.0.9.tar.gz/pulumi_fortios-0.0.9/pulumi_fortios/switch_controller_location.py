# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SwitchControllerLocationArgs', 'SwitchControllerLocation']

@pulumi.input_type
class SwitchControllerLocationArgs:
    def __init__(__self__, *,
                 address_civic: Optional[pulumi.Input['SwitchControllerLocationAddressCivicArgs']] = None,
                 coordinates: Optional[pulumi.Input['SwitchControllerLocationCoordinatesArgs']] = None,
                 elin_number: Optional[pulumi.Input['SwitchControllerLocationElinNumberArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerLocation resource.
        """
        if address_civic is not None:
            pulumi.set(__self__, "address_civic", address_civic)
        if coordinates is not None:
            pulumi.set(__self__, "coordinates", coordinates)
        if elin_number is not None:
            pulumi.set(__self__, "elin_number", elin_number)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addressCivic")
    def address_civic(self) -> Optional[pulumi.Input['SwitchControllerLocationAddressCivicArgs']]:
        return pulumi.get(self, "address_civic")

    @address_civic.setter
    def address_civic(self, value: Optional[pulumi.Input['SwitchControllerLocationAddressCivicArgs']]):
        pulumi.set(self, "address_civic", value)

    @property
    @pulumi.getter
    def coordinates(self) -> Optional[pulumi.Input['SwitchControllerLocationCoordinatesArgs']]:
        return pulumi.get(self, "coordinates")

    @coordinates.setter
    def coordinates(self, value: Optional[pulumi.Input['SwitchControllerLocationCoordinatesArgs']]):
        pulumi.set(self, "coordinates", value)

    @property
    @pulumi.getter(name="elinNumber")
    def elin_number(self) -> Optional[pulumi.Input['SwitchControllerLocationElinNumberArgs']]:
        return pulumi.get(self, "elin_number")

    @elin_number.setter
    def elin_number(self, value: Optional[pulumi.Input['SwitchControllerLocationElinNumberArgs']]):
        pulumi.set(self, "elin_number", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchControllerLocationState:
    def __init__(__self__, *,
                 address_civic: Optional[pulumi.Input['SwitchControllerLocationAddressCivicArgs']] = None,
                 coordinates: Optional[pulumi.Input['SwitchControllerLocationCoordinatesArgs']] = None,
                 elin_number: Optional[pulumi.Input['SwitchControllerLocationElinNumberArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerLocation resources.
        """
        if address_civic is not None:
            pulumi.set(__self__, "address_civic", address_civic)
        if coordinates is not None:
            pulumi.set(__self__, "coordinates", coordinates)
        if elin_number is not None:
            pulumi.set(__self__, "elin_number", elin_number)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addressCivic")
    def address_civic(self) -> Optional[pulumi.Input['SwitchControllerLocationAddressCivicArgs']]:
        return pulumi.get(self, "address_civic")

    @address_civic.setter
    def address_civic(self, value: Optional[pulumi.Input['SwitchControllerLocationAddressCivicArgs']]):
        pulumi.set(self, "address_civic", value)

    @property
    @pulumi.getter
    def coordinates(self) -> Optional[pulumi.Input['SwitchControllerLocationCoordinatesArgs']]:
        return pulumi.get(self, "coordinates")

    @coordinates.setter
    def coordinates(self, value: Optional[pulumi.Input['SwitchControllerLocationCoordinatesArgs']]):
        pulumi.set(self, "coordinates", value)

    @property
    @pulumi.getter(name="elinNumber")
    def elin_number(self) -> Optional[pulumi.Input['SwitchControllerLocationElinNumberArgs']]:
        return pulumi.get(self, "elin_number")

    @elin_number.setter
    def elin_number(self, value: Optional[pulumi.Input['SwitchControllerLocationElinNumberArgs']]):
        pulumi.set(self, "elin_number", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchControllerLocation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_civic: Optional[pulumi.Input[pulumi.InputType['SwitchControllerLocationAddressCivicArgs']]] = None,
                 coordinates: Optional[pulumi.Input[pulumi.InputType['SwitchControllerLocationCoordinatesArgs']]] = None,
                 elin_number: Optional[pulumi.Input[pulumi.InputType['SwitchControllerLocationElinNumberArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerLocation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerLocationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerLocation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerLocationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerLocationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_civic: Optional[pulumi.Input[pulumi.InputType['SwitchControllerLocationAddressCivicArgs']]] = None,
                 coordinates: Optional[pulumi.Input[pulumi.InputType['SwitchControllerLocationCoordinatesArgs']]] = None,
                 elin_number: Optional[pulumi.Input[pulumi.InputType['SwitchControllerLocationElinNumberArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerLocationArgs.__new__(SwitchControllerLocationArgs)

            __props__.__dict__["address_civic"] = address_civic
            __props__.__dict__["coordinates"] = coordinates
            __props__.__dict__["elin_number"] = elin_number
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["name"] = name
            __props__.__dict__["vdomparam"] = vdomparam
        super(SwitchControllerLocation, __self__).__init__(
            'fortios:index/switchControllerLocation:SwitchControllerLocation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_civic: Optional[pulumi.Input[pulumi.InputType['SwitchControllerLocationAddressCivicArgs']]] = None,
            coordinates: Optional[pulumi.Input[pulumi.InputType['SwitchControllerLocationCoordinatesArgs']]] = None,
            elin_number: Optional[pulumi.Input[pulumi.InputType['SwitchControllerLocationElinNumberArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerLocation':
        """
        Get an existing SwitchControllerLocation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerLocationState.__new__(_SwitchControllerLocationState)

        __props__.__dict__["address_civic"] = address_civic
        __props__.__dict__["coordinates"] = coordinates
        __props__.__dict__["elin_number"] = elin_number
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["name"] = name
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchControllerLocation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressCivic")
    def address_civic(self) -> pulumi.Output['outputs.SwitchControllerLocationAddressCivic']:
        return pulumi.get(self, "address_civic")

    @property
    @pulumi.getter
    def coordinates(self) -> pulumi.Output['outputs.SwitchControllerLocationCoordinates']:
        return pulumi.get(self, "coordinates")

    @property
    @pulumi.getter(name="elinNumber")
    def elin_number(self) -> pulumi.Output['outputs.SwitchControllerLocationElinNumber']:
        return pulumi.get(self, "elin_number")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

