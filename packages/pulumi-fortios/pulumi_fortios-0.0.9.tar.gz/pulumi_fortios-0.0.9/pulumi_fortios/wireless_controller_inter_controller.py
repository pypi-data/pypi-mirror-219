# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WirelessControllerInterControllerArgs', 'WirelessControllerInterController']

@pulumi.input_type
class WirelessControllerInterControllerArgs:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fast_failover_max: Optional[pulumi.Input[int]] = None,
                 fast_failover_wait: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 inter_controller_key: Optional[pulumi.Input[str]] = None,
                 inter_controller_mode: Optional[pulumi.Input[str]] = None,
                 inter_controller_peers: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerInterControllerInterControllerPeerArgs']]]] = None,
                 inter_controller_pri: Optional[pulumi.Input[str]] = None,
                 l3_roaming: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WirelessControllerInterController resource.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fast_failover_max is not None:
            pulumi.set(__self__, "fast_failover_max", fast_failover_max)
        if fast_failover_wait is not None:
            pulumi.set(__self__, "fast_failover_wait", fast_failover_wait)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if inter_controller_key is not None:
            pulumi.set(__self__, "inter_controller_key", inter_controller_key)
        if inter_controller_mode is not None:
            pulumi.set(__self__, "inter_controller_mode", inter_controller_mode)
        if inter_controller_peers is not None:
            pulumi.set(__self__, "inter_controller_peers", inter_controller_peers)
        if inter_controller_pri is not None:
            pulumi.set(__self__, "inter_controller_pri", inter_controller_pri)
        if l3_roaming is not None:
            pulumi.set(__self__, "l3_roaming", l3_roaming)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fastFailoverMax")
    def fast_failover_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fast_failover_max")

    @fast_failover_max.setter
    def fast_failover_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fast_failover_max", value)

    @property
    @pulumi.getter(name="fastFailoverWait")
    def fast_failover_wait(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fast_failover_wait")

    @fast_failover_wait.setter
    def fast_failover_wait(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fast_failover_wait", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="interControllerKey")
    def inter_controller_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inter_controller_key")

    @inter_controller_key.setter
    def inter_controller_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_controller_key", value)

    @property
    @pulumi.getter(name="interControllerMode")
    def inter_controller_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inter_controller_mode")

    @inter_controller_mode.setter
    def inter_controller_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_controller_mode", value)

    @property
    @pulumi.getter(name="interControllerPeers")
    def inter_controller_peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerInterControllerInterControllerPeerArgs']]]]:
        return pulumi.get(self, "inter_controller_peers")

    @inter_controller_peers.setter
    def inter_controller_peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerInterControllerInterControllerPeerArgs']]]]):
        pulumi.set(self, "inter_controller_peers", value)

    @property
    @pulumi.getter(name="interControllerPri")
    def inter_controller_pri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inter_controller_pri")

    @inter_controller_pri.setter
    def inter_controller_pri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_controller_pri", value)

    @property
    @pulumi.getter(name="l3Roaming")
    def l3_roaming(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "l3_roaming")

    @l3_roaming.setter
    def l3_roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l3_roaming", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _WirelessControllerInterControllerState:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fast_failover_max: Optional[pulumi.Input[int]] = None,
                 fast_failover_wait: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 inter_controller_key: Optional[pulumi.Input[str]] = None,
                 inter_controller_mode: Optional[pulumi.Input[str]] = None,
                 inter_controller_peers: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerInterControllerInterControllerPeerArgs']]]] = None,
                 inter_controller_pri: Optional[pulumi.Input[str]] = None,
                 l3_roaming: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WirelessControllerInterController resources.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fast_failover_max is not None:
            pulumi.set(__self__, "fast_failover_max", fast_failover_max)
        if fast_failover_wait is not None:
            pulumi.set(__self__, "fast_failover_wait", fast_failover_wait)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if inter_controller_key is not None:
            pulumi.set(__self__, "inter_controller_key", inter_controller_key)
        if inter_controller_mode is not None:
            pulumi.set(__self__, "inter_controller_mode", inter_controller_mode)
        if inter_controller_peers is not None:
            pulumi.set(__self__, "inter_controller_peers", inter_controller_peers)
        if inter_controller_pri is not None:
            pulumi.set(__self__, "inter_controller_pri", inter_controller_pri)
        if l3_roaming is not None:
            pulumi.set(__self__, "l3_roaming", l3_roaming)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fastFailoverMax")
    def fast_failover_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fast_failover_max")

    @fast_failover_max.setter
    def fast_failover_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fast_failover_max", value)

    @property
    @pulumi.getter(name="fastFailoverWait")
    def fast_failover_wait(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fast_failover_wait")

    @fast_failover_wait.setter
    def fast_failover_wait(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fast_failover_wait", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="interControllerKey")
    def inter_controller_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inter_controller_key")

    @inter_controller_key.setter
    def inter_controller_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_controller_key", value)

    @property
    @pulumi.getter(name="interControllerMode")
    def inter_controller_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inter_controller_mode")

    @inter_controller_mode.setter
    def inter_controller_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_controller_mode", value)

    @property
    @pulumi.getter(name="interControllerPeers")
    def inter_controller_peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerInterControllerInterControllerPeerArgs']]]]:
        return pulumi.get(self, "inter_controller_peers")

    @inter_controller_peers.setter
    def inter_controller_peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerInterControllerInterControllerPeerArgs']]]]):
        pulumi.set(self, "inter_controller_peers", value)

    @property
    @pulumi.getter(name="interControllerPri")
    def inter_controller_pri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inter_controller_pri")

    @inter_controller_pri.setter
    def inter_controller_pri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_controller_pri", value)

    @property
    @pulumi.getter(name="l3Roaming")
    def l3_roaming(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "l3_roaming")

    @l3_roaming.setter
    def l3_roaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l3_roaming", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class WirelessControllerInterController(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fast_failover_max: Optional[pulumi.Input[int]] = None,
                 fast_failover_wait: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 inter_controller_key: Optional[pulumi.Input[str]] = None,
                 inter_controller_mode: Optional[pulumi.Input[str]] = None,
                 inter_controller_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerInterControllerInterControllerPeerArgs']]]]] = None,
                 inter_controller_pri: Optional[pulumi.Input[str]] = None,
                 l3_roaming: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WirelessControllerInterController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WirelessControllerInterControllerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WirelessControllerInterController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WirelessControllerInterControllerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WirelessControllerInterControllerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fast_failover_max: Optional[pulumi.Input[int]] = None,
                 fast_failover_wait: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 inter_controller_key: Optional[pulumi.Input[str]] = None,
                 inter_controller_mode: Optional[pulumi.Input[str]] = None,
                 inter_controller_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerInterControllerInterControllerPeerArgs']]]]] = None,
                 inter_controller_pri: Optional[pulumi.Input[str]] = None,
                 l3_roaming: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WirelessControllerInterControllerArgs.__new__(WirelessControllerInterControllerArgs)

            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fast_failover_max"] = fast_failover_max
            __props__.__dict__["fast_failover_wait"] = fast_failover_wait
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["inter_controller_key"] = None if inter_controller_key is None else pulumi.Output.secret(inter_controller_key)
            __props__.__dict__["inter_controller_mode"] = inter_controller_mode
            __props__.__dict__["inter_controller_peers"] = inter_controller_peers
            __props__.__dict__["inter_controller_pri"] = inter_controller_pri
            __props__.__dict__["l3_roaming"] = l3_roaming
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["interControllerKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(WirelessControllerInterController, __self__).__init__(
            'fortios:index/wirelessControllerInterController:WirelessControllerInterController',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fast_failover_max: Optional[pulumi.Input[int]] = None,
            fast_failover_wait: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            inter_controller_key: Optional[pulumi.Input[str]] = None,
            inter_controller_mode: Optional[pulumi.Input[str]] = None,
            inter_controller_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerInterControllerInterControllerPeerArgs']]]]] = None,
            inter_controller_pri: Optional[pulumi.Input[str]] = None,
            l3_roaming: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'WirelessControllerInterController':
        """
        Get an existing WirelessControllerInterController resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WirelessControllerInterControllerState.__new__(_WirelessControllerInterControllerState)

        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fast_failover_max"] = fast_failover_max
        __props__.__dict__["fast_failover_wait"] = fast_failover_wait
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["inter_controller_key"] = inter_controller_key
        __props__.__dict__["inter_controller_mode"] = inter_controller_mode
        __props__.__dict__["inter_controller_peers"] = inter_controller_peers
        __props__.__dict__["inter_controller_pri"] = inter_controller_pri
        __props__.__dict__["l3_roaming"] = l3_roaming
        __props__.__dict__["vdomparam"] = vdomparam
        return WirelessControllerInterController(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fastFailoverMax")
    def fast_failover_max(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fast_failover_max")

    @property
    @pulumi.getter(name="fastFailoverWait")
    def fast_failover_wait(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fast_failover_wait")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="interControllerKey")
    def inter_controller_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "inter_controller_key")

    @property
    @pulumi.getter(name="interControllerMode")
    def inter_controller_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "inter_controller_mode")

    @property
    @pulumi.getter(name="interControllerPeers")
    def inter_controller_peers(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerInterControllerInterControllerPeer']]]:
        return pulumi.get(self, "inter_controller_peers")

    @property
    @pulumi.getter(name="interControllerPri")
    def inter_controller_pri(self) -> pulumi.Output[str]:
        return pulumi.get(self, "inter_controller_pri")

    @property
    @pulumi.getter(name="l3Roaming")
    def l3_roaming(self) -> pulumi.Output[str]:
        return pulumi.get(self, "l3_roaming")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

