# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReportChartArgs', 'ReportChart']

@pulumi.input_type
class ReportChartArgs:
    def __init__(__self__, *,
                 comments: pulumi.Input[str],
                 dataset: pulumi.Input[str],
                 background: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 category_series: Optional[pulumi.Input['ReportChartCategorySeriesArgs']] = None,
                 color_palette: Optional[pulumi.Input[str]] = None,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnArgs']]]] = None,
                 dimension: Optional[pulumi.Input[str]] = None,
                 drill_down_charts: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartDrillDownChartArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 favorite: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 graph_type: Optional[pulumi.Input[str]] = None,
                 legend: Optional[pulumi.Input[str]] = None,
                 legend_font_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_font_size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value_series: Optional[pulumi.Input['ReportChartValueSeriesArgs']] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 x_series: Optional[pulumi.Input['ReportChartXSeriesArgs']] = None,
                 y_series: Optional[pulumi.Input['ReportChartYSeriesArgs']] = None):
        """
        The set of arguments for constructing a ReportChart resource.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "dataset", dataset)
        if background is not None:
            pulumi.set(__self__, "background", background)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if category_series is not None:
            pulumi.set(__self__, "category_series", category_series)
        if color_palette is not None:
            pulumi.set(__self__, "color_palette", color_palette)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if dimension is not None:
            pulumi.set(__self__, "dimension", dimension)
        if drill_down_charts is not None:
            pulumi.set(__self__, "drill_down_charts", drill_down_charts)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if graph_type is not None:
            pulumi.set(__self__, "graph_type", graph_type)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if legend_font_size is not None:
            pulumi.set(__self__, "legend_font_size", legend_font_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_font_size is not None:
            pulumi.set(__self__, "title_font_size", title_font_size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value_series is not None:
            pulumi.set(__self__, "value_series", value_series)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if x_series is not None:
            pulumi.set(__self__, "x_series", x_series)
        if y_series is not None:
            pulumi.set(__self__, "y_series", y_series)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: pulumi.Input[str]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def dataset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def background(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background")

    @background.setter
    def background(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="categorySeries")
    def category_series(self) -> Optional[pulumi.Input['ReportChartCategorySeriesArgs']]:
        return pulumi.get(self, "category_series")

    @category_series.setter
    def category_series(self, value: Optional[pulumi.Input['ReportChartCategorySeriesArgs']]):
        pulumi.set(self, "category_series", value)

    @property
    @pulumi.getter(name="colorPalette")
    def color_palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_palette")

    @color_palette.setter
    def color_palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_palette", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def dimension(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter(name="drillDownCharts")
    def drill_down_charts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartDrillDownChartArgs']]]]:
        return pulumi.get(self, "drill_down_charts")

    @drill_down_charts.setter
    def drill_down_charts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartDrillDownChartArgs']]]]):
        pulumi.set(self, "drill_down_charts", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def favorite(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "favorite")

    @favorite.setter
    def favorite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "favorite", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="graphType")
    def graph_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "graph_type")

    @graph_type.setter
    def graph_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graph_type", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="legendFontSize")
    def legend_font_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "legend_font_size")

    @legend_font_size.setter
    def legend_font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "legend_font_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleFontSize")
    def title_font_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "title_font_size")

    @title_font_size.setter
    def title_font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "title_font_size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="valueSeries")
    def value_series(self) -> Optional[pulumi.Input['ReportChartValueSeriesArgs']]:
        return pulumi.get(self, "value_series")

    @value_series.setter
    def value_series(self, value: Optional[pulumi.Input['ReportChartValueSeriesArgs']]):
        pulumi.set(self, "value_series", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="xSeries")
    def x_series(self) -> Optional[pulumi.Input['ReportChartXSeriesArgs']]:
        return pulumi.get(self, "x_series")

    @x_series.setter
    def x_series(self, value: Optional[pulumi.Input['ReportChartXSeriesArgs']]):
        pulumi.set(self, "x_series", value)

    @property
    @pulumi.getter(name="ySeries")
    def y_series(self) -> Optional[pulumi.Input['ReportChartYSeriesArgs']]:
        return pulumi.get(self, "y_series")

    @y_series.setter
    def y_series(self, value: Optional[pulumi.Input['ReportChartYSeriesArgs']]):
        pulumi.set(self, "y_series", value)


@pulumi.input_type
class _ReportChartState:
    def __init__(__self__, *,
                 background: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 category_series: Optional[pulumi.Input['ReportChartCategorySeriesArgs']] = None,
                 color_palette: Optional[pulumi.Input[str]] = None,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnArgs']]]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dataset: Optional[pulumi.Input[str]] = None,
                 dimension: Optional[pulumi.Input[str]] = None,
                 drill_down_charts: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartDrillDownChartArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 favorite: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 graph_type: Optional[pulumi.Input[str]] = None,
                 legend: Optional[pulumi.Input[str]] = None,
                 legend_font_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_font_size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value_series: Optional[pulumi.Input['ReportChartValueSeriesArgs']] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 x_series: Optional[pulumi.Input['ReportChartXSeriesArgs']] = None,
                 y_series: Optional[pulumi.Input['ReportChartYSeriesArgs']] = None):
        """
        Input properties used for looking up and filtering ReportChart resources.
        """
        if background is not None:
            pulumi.set(__self__, "background", background)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if category_series is not None:
            pulumi.set(__self__, "category_series", category_series)
        if color_palette is not None:
            pulumi.set(__self__, "color_palette", color_palette)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if dimension is not None:
            pulumi.set(__self__, "dimension", dimension)
        if drill_down_charts is not None:
            pulumi.set(__self__, "drill_down_charts", drill_down_charts)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if graph_type is not None:
            pulumi.set(__self__, "graph_type", graph_type)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if legend_font_size is not None:
            pulumi.set(__self__, "legend_font_size", legend_font_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_font_size is not None:
            pulumi.set(__self__, "title_font_size", title_font_size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value_series is not None:
            pulumi.set(__self__, "value_series", value_series)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if x_series is not None:
            pulumi.set(__self__, "x_series", x_series)
        if y_series is not None:
            pulumi.set(__self__, "y_series", y_series)

    @property
    @pulumi.getter
    def background(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background")

    @background.setter
    def background(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="categorySeries")
    def category_series(self) -> Optional[pulumi.Input['ReportChartCategorySeriesArgs']]:
        return pulumi.get(self, "category_series")

    @category_series.setter
    def category_series(self, value: Optional[pulumi.Input['ReportChartCategorySeriesArgs']]):
        pulumi.set(self, "category_series", value)

    @property
    @pulumi.getter(name="colorPalette")
    def color_palette(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_palette")

    @color_palette.setter
    def color_palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_palette", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def dimension(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter(name="drillDownCharts")
    def drill_down_charts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartDrillDownChartArgs']]]]:
        return pulumi.get(self, "drill_down_charts")

    @drill_down_charts.setter
    def drill_down_charts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartDrillDownChartArgs']]]]):
        pulumi.set(self, "drill_down_charts", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def favorite(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "favorite")

    @favorite.setter
    def favorite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "favorite", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="graphType")
    def graph_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "graph_type")

    @graph_type.setter
    def graph_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graph_type", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="legendFontSize")
    def legend_font_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "legend_font_size")

    @legend_font_size.setter
    def legend_font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "legend_font_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleFontSize")
    def title_font_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "title_font_size")

    @title_font_size.setter
    def title_font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "title_font_size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="valueSeries")
    def value_series(self) -> Optional[pulumi.Input['ReportChartValueSeriesArgs']]:
        return pulumi.get(self, "value_series")

    @value_series.setter
    def value_series(self, value: Optional[pulumi.Input['ReportChartValueSeriesArgs']]):
        pulumi.set(self, "value_series", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="xSeries")
    def x_series(self) -> Optional[pulumi.Input['ReportChartXSeriesArgs']]:
        return pulumi.get(self, "x_series")

    @x_series.setter
    def x_series(self, value: Optional[pulumi.Input['ReportChartXSeriesArgs']]):
        pulumi.set(self, "x_series", value)

    @property
    @pulumi.getter(name="ySeries")
    def y_series(self) -> Optional[pulumi.Input['ReportChartYSeriesArgs']]:
        return pulumi.get(self, "y_series")

    @y_series.setter
    def y_series(self, value: Optional[pulumi.Input['ReportChartYSeriesArgs']]):
        pulumi.set(self, "y_series", value)


class ReportChart(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 background: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 category_series: Optional[pulumi.Input[pulumi.InputType['ReportChartCategorySeriesArgs']]] = None,
                 color_palette: Optional[pulumi.Input[str]] = None,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReportChartColumnArgs']]]]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dataset: Optional[pulumi.Input[str]] = None,
                 dimension: Optional[pulumi.Input[str]] = None,
                 drill_down_charts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReportChartDrillDownChartArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 favorite: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 graph_type: Optional[pulumi.Input[str]] = None,
                 legend: Optional[pulumi.Input[str]] = None,
                 legend_font_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_font_size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value_series: Optional[pulumi.Input[pulumi.InputType['ReportChartValueSeriesArgs']]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 x_series: Optional[pulumi.Input[pulumi.InputType['ReportChartXSeriesArgs']]] = None,
                 y_series: Optional[pulumi.Input[pulumi.InputType['ReportChartYSeriesArgs']]] = None,
                 __props__=None):
        """
        Create a ReportChart resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReportChartArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ReportChart resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ReportChartArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReportChartArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 background: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 category_series: Optional[pulumi.Input[pulumi.InputType['ReportChartCategorySeriesArgs']]] = None,
                 color_palette: Optional[pulumi.Input[str]] = None,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReportChartColumnArgs']]]]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dataset: Optional[pulumi.Input[str]] = None,
                 dimension: Optional[pulumi.Input[str]] = None,
                 drill_down_charts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReportChartDrillDownChartArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 favorite: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 graph_type: Optional[pulumi.Input[str]] = None,
                 legend: Optional[pulumi.Input[str]] = None,
                 legend_font_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_font_size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value_series: Optional[pulumi.Input[pulumi.InputType['ReportChartValueSeriesArgs']]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 x_series: Optional[pulumi.Input[pulumi.InputType['ReportChartXSeriesArgs']]] = None,
                 y_series: Optional[pulumi.Input[pulumi.InputType['ReportChartYSeriesArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReportChartArgs.__new__(ReportChartArgs)

            __props__.__dict__["background"] = background
            __props__.__dict__["category"] = category
            __props__.__dict__["category_series"] = category_series
            __props__.__dict__["color_palette"] = color_palette
            __props__.__dict__["columns"] = columns
            if comments is None and not opts.urn:
                raise TypeError("Missing required property 'comments'")
            __props__.__dict__["comments"] = comments
            if dataset is None and not opts.urn:
                raise TypeError("Missing required property 'dataset'")
            __props__.__dict__["dataset"] = dataset
            __props__.__dict__["dimension"] = dimension
            __props__.__dict__["drill_down_charts"] = drill_down_charts
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["favorite"] = favorite
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["graph_type"] = graph_type
            __props__.__dict__["legend"] = legend
            __props__.__dict__["legend_font_size"] = legend_font_size
            __props__.__dict__["name"] = name
            __props__.__dict__["period"] = period
            __props__.__dict__["policy"] = policy
            __props__.__dict__["style"] = style
            __props__.__dict__["title"] = title
            __props__.__dict__["title_font_size"] = title_font_size
            __props__.__dict__["type"] = type
            __props__.__dict__["value_series"] = value_series
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["x_series"] = x_series
            __props__.__dict__["y_series"] = y_series
        super(ReportChart, __self__).__init__(
            'fortios:index/reportChart:ReportChart',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            background: Optional[pulumi.Input[str]] = None,
            category: Optional[pulumi.Input[str]] = None,
            category_series: Optional[pulumi.Input[pulumi.InputType['ReportChartCategorySeriesArgs']]] = None,
            color_palette: Optional[pulumi.Input[str]] = None,
            columns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReportChartColumnArgs']]]]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dataset: Optional[pulumi.Input[str]] = None,
            dimension: Optional[pulumi.Input[str]] = None,
            drill_down_charts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReportChartDrillDownChartArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            favorite: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            graph_type: Optional[pulumi.Input[str]] = None,
            legend: Optional[pulumi.Input[str]] = None,
            legend_font_size: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[str]] = None,
            policy: Optional[pulumi.Input[int]] = None,
            style: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            title_font_size: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            value_series: Optional[pulumi.Input[pulumi.InputType['ReportChartValueSeriesArgs']]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            x_series: Optional[pulumi.Input[pulumi.InputType['ReportChartXSeriesArgs']]] = None,
            y_series: Optional[pulumi.Input[pulumi.InputType['ReportChartYSeriesArgs']]] = None) -> 'ReportChart':
        """
        Get an existing ReportChart resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReportChartState.__new__(_ReportChartState)

        __props__.__dict__["background"] = background
        __props__.__dict__["category"] = category
        __props__.__dict__["category_series"] = category_series
        __props__.__dict__["color_palette"] = color_palette
        __props__.__dict__["columns"] = columns
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dataset"] = dataset
        __props__.__dict__["dimension"] = dimension
        __props__.__dict__["drill_down_charts"] = drill_down_charts
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["favorite"] = favorite
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["graph_type"] = graph_type
        __props__.__dict__["legend"] = legend
        __props__.__dict__["legend_font_size"] = legend_font_size
        __props__.__dict__["name"] = name
        __props__.__dict__["period"] = period
        __props__.__dict__["policy"] = policy
        __props__.__dict__["style"] = style
        __props__.__dict__["title"] = title
        __props__.__dict__["title_font_size"] = title_font_size
        __props__.__dict__["type"] = type
        __props__.__dict__["value_series"] = value_series
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["x_series"] = x_series
        __props__.__dict__["y_series"] = y_series
        return ReportChart(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def background(self) -> pulumi.Output[str]:
        return pulumi.get(self, "background")

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="categorySeries")
    def category_series(self) -> pulumi.Output['outputs.ReportChartCategorySeries']:
        return pulumi.get(self, "category_series")

    @property
    @pulumi.getter(name="colorPalette")
    def color_palette(self) -> pulumi.Output[str]:
        return pulumi.get(self, "color_palette")

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Output[Optional[Sequence['outputs.ReportChartColumn']]]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def dataset(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def dimension(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dimension")

    @property
    @pulumi.getter(name="drillDownCharts")
    def drill_down_charts(self) -> pulumi.Output[Optional[Sequence['outputs.ReportChartDrillDownChart']]]:
        return pulumi.get(self, "drill_down_charts")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def favorite(self) -> pulumi.Output[str]:
        return pulumi.get(self, "favorite")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="graphType")
    def graph_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "graph_type")

    @property
    @pulumi.getter
    def legend(self) -> pulumi.Output[str]:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter(name="legendFontSize")
    def legend_font_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "legend_font_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[str]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output[int]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def style(self) -> pulumi.Output[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleFontSize")
    def title_font_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "title_font_size")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="valueSeries")
    def value_series(self) -> pulumi.Output['outputs.ReportChartValueSeries']:
        return pulumi.get(self, "value_series")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="xSeries")
    def x_series(self) -> pulumi.Output['outputs.ReportChartXSeries']:
        return pulumi.get(self, "x_series")

    @property
    @pulumi.getter(name="ySeries")
    def y_series(self) -> pulumi.Output['outputs.ReportChartYSeries']:
        return pulumi.get(self, "y_series")

