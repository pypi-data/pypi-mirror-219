# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSystemAutoScriptResult',
    'AwaitableGetSystemAutoScriptResult',
    'get_system_auto_script',
    'get_system_auto_script_output',
]

@pulumi.output_type
class GetSystemAutoScriptResult:
    """
    A collection of values returned by GetSystemAutoScript.
    """
    def __init__(__self__, id=None, interval=None, name=None, output_size=None, repeat=None, script=None, start=None, timeout=None, vdomparam=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interval and not isinstance(interval, int):
            raise TypeError("Expected argument 'interval' to be a int")
        pulumi.set(__self__, "interval", interval)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_size and not isinstance(output_size, int):
            raise TypeError("Expected argument 'output_size' to be a int")
        pulumi.set(__self__, "output_size", output_size)
        if repeat and not isinstance(repeat, int):
            raise TypeError("Expected argument 'repeat' to be a int")
        pulumi.set(__self__, "repeat", repeat)
        if script and not isinstance(script, str):
            raise TypeError("Expected argument 'script' to be a str")
        pulumi.set(__self__, "script", script)
        if start and not isinstance(start, str):
            raise TypeError("Expected argument 'start' to be a str")
        pulumi.set(__self__, "start", start)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputSize")
    def output_size(self) -> int:
        return pulumi.get(self, "output_size")

    @property
    @pulumi.getter
    def repeat(self) -> int:
        return pulumi.get(self, "repeat")

    @property
    @pulumi.getter
    def script(self) -> str:
        return pulumi.get(self, "script")

    @property
    @pulumi.getter
    def start(self) -> str:
        return pulumi.get(self, "start")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetSystemAutoScriptResult(GetSystemAutoScriptResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemAutoScriptResult(
            id=self.id,
            interval=self.interval,
            name=self.name,
            output_size=self.output_size,
            repeat=self.repeat,
            script=self.script,
            start=self.start,
            timeout=self.timeout,
            vdomparam=self.vdomparam)


def get_system_auto_script(name: Optional[str] = None,
                           vdomparam: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemAutoScriptResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemAutoScript:GetSystemAutoScript', __args__, opts=opts, typ=GetSystemAutoScriptResult).value

    return AwaitableGetSystemAutoScriptResult(
        id=pulumi.get(__ret__, 'id'),
        interval=pulumi.get(__ret__, 'interval'),
        name=pulumi.get(__ret__, 'name'),
        output_size=pulumi.get(__ret__, 'output_size'),
        repeat=pulumi.get(__ret__, 'repeat'),
        script=pulumi.get(__ret__, 'script'),
        start=pulumi.get(__ret__, 'start'),
        timeout=pulumi.get(__ret__, 'timeout'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_system_auto_script)
def get_system_auto_script_output(name: Optional[pulumi.Input[str]] = None,
                                  vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemAutoScriptResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
