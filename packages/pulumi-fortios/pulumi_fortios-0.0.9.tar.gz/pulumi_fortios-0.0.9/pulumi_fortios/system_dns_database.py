# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemDnsDatabaseArgs', 'SystemDnsDatabase']

@pulumi.input_type
class SystemDnsDatabaseArgs:
    def __init__(__self__, *,
                 authoritative: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 ttl: pulumi.Input[int],
                 type: pulumi.Input[str],
                 view: pulumi.Input[str],
                 allow_transfer: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 dns_entries: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDatabaseDnsEntryArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 forwarder: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_master: Optional[pulumi.Input[str]] = None,
                 ip_primary: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_name: Optional[pulumi.Input[str]] = None,
                 rr_max: Optional[pulumi.Input[int]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemDnsDatabase resource.
        """
        pulumi.set(__self__, "authoritative", authoritative)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "view", view)
        if allow_transfer is not None:
            pulumi.set(__self__, "allow_transfer", allow_transfer)
        if contact is not None:
            pulumi.set(__self__, "contact", contact)
        if dns_entries is not None:
            pulumi.set(__self__, "dns_entries", dns_entries)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if forwarder is not None:
            pulumi.set(__self__, "forwarder", forwarder)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_master is not None:
            pulumi.set(__self__, "ip_master", ip_master)
        if ip_primary is not None:
            pulumi.set(__self__, "ip_primary", ip_primary)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_name is not None:
            pulumi.set(__self__, "primary_name", primary_name)
        if rr_max is not None:
            pulumi.set(__self__, "rr_max", rr_max)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authoritative(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authoritative")

    @authoritative.setter
    def authoritative(self, value: pulumi.Input[str]):
        pulumi.set(self, "authoritative", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Input[int]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: pulumi.Input[int]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def view(self) -> pulumi.Input[str]:
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: pulumi.Input[str]):
        pulumi.set(self, "view", value)

    @property
    @pulumi.getter(name="allowTransfer")
    def allow_transfer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_transfer")

    @allow_transfer.setter
    def allow_transfer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_transfer", value)

    @property
    @pulumi.getter
    def contact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "contact")

    @contact.setter
    def contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact", value)

    @property
    @pulumi.getter(name="dnsEntries")
    def dns_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDatabaseDnsEntryArgs']]]]:
        return pulumi.get(self, "dns_entries")

    @dns_entries.setter
    def dns_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDatabaseDnsEntryArgs']]]]):
        pulumi.set(self, "dns_entries", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def forwarder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forwarder")

    @forwarder.setter
    def forwarder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forwarder", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipMaster")
    def ip_master(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_master")

    @ip_master.setter
    def ip_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_master", value)

    @property
    @pulumi.getter(name="ipPrimary")
    def ip_primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_primary")

    @ip_primary.setter
    def ip_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_primary", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryName")
    def primary_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_name")

    @primary_name.setter
    def primary_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_name", value)

    @property
    @pulumi.getter(name="rrMax")
    def rr_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rr_max")

    @rr_max.setter
    def rr_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rr_max", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemDnsDatabaseState:
    def __init__(__self__, *,
                 allow_transfer: Optional[pulumi.Input[str]] = None,
                 authoritative: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 dns_entries: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDatabaseDnsEntryArgs']]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 forwarder: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_master: Optional[pulumi.Input[str]] = None,
                 ip_primary: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_name: Optional[pulumi.Input[str]] = None,
                 rr_max: Optional[pulumi.Input[int]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemDnsDatabase resources.
        """
        if allow_transfer is not None:
            pulumi.set(__self__, "allow_transfer", allow_transfer)
        if authoritative is not None:
            pulumi.set(__self__, "authoritative", authoritative)
        if contact is not None:
            pulumi.set(__self__, "contact", contact)
        if dns_entries is not None:
            pulumi.set(__self__, "dns_entries", dns_entries)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if forwarder is not None:
            pulumi.set(__self__, "forwarder", forwarder)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_master is not None:
            pulumi.set(__self__, "ip_master", ip_master)
        if ip_primary is not None:
            pulumi.set(__self__, "ip_primary", ip_primary)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_name is not None:
            pulumi.set(__self__, "primary_name", primary_name)
        if rr_max is not None:
            pulumi.set(__self__, "rr_max", rr_max)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter(name="allowTransfer")
    def allow_transfer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_transfer")

    @allow_transfer.setter
    def allow_transfer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_transfer", value)

    @property
    @pulumi.getter
    def authoritative(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authoritative")

    @authoritative.setter
    def authoritative(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authoritative", value)

    @property
    @pulumi.getter
    def contact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "contact")

    @contact.setter
    def contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact", value)

    @property
    @pulumi.getter(name="dnsEntries")
    def dns_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDatabaseDnsEntryArgs']]]]:
        return pulumi.get(self, "dns_entries")

    @dns_entries.setter
    def dns_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDnsDatabaseDnsEntryArgs']]]]):
        pulumi.set(self, "dns_entries", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def forwarder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forwarder")

    @forwarder.setter
    def forwarder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forwarder", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipMaster")
    def ip_master(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_master")

    @ip_master.setter
    def ip_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_master", value)

    @property
    @pulumi.getter(name="ipPrimary")
    def ip_primary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_primary")

    @ip_primary.setter
    def ip_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_primary", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryName")
    def primary_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_name")

    @primary_name.setter
    def primary_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_name", value)

    @property
    @pulumi.getter(name="rrMax")
    def rr_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rr_max")

    @rr_max.setter
    def rr_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rr_max", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


class SystemDnsDatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_transfer: Optional[pulumi.Input[str]] = None,
                 authoritative: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 dns_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDnsDatabaseDnsEntryArgs']]]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 forwarder: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_master: Optional[pulumi.Input[str]] = None,
                 ip_primary: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_name: Optional[pulumi.Input[str]] = None,
                 rr_max: Optional[pulumi.Input[int]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemDnsDatabase resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemDnsDatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemDnsDatabase resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemDnsDatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemDnsDatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_transfer: Optional[pulumi.Input[str]] = None,
                 authoritative: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 dns_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDnsDatabaseDnsEntryArgs']]]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 forwarder: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_master: Optional[pulumi.Input[str]] = None,
                 ip_primary: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_name: Optional[pulumi.Input[str]] = None,
                 rr_max: Optional[pulumi.Input[int]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemDnsDatabaseArgs.__new__(SystemDnsDatabaseArgs)

            __props__.__dict__["allow_transfer"] = allow_transfer
            if authoritative is None and not opts.urn:
                raise TypeError("Missing required property 'authoritative'")
            __props__.__dict__["authoritative"] = authoritative
            __props__.__dict__["contact"] = contact
            __props__.__dict__["dns_entries"] = dns_entries
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["forwarder"] = forwarder
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ip_master"] = ip_master
            __props__.__dict__["ip_primary"] = ip_primary
            __props__.__dict__["name"] = name
            __props__.__dict__["primary_name"] = primary_name
            __props__.__dict__["rr_max"] = rr_max
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["status"] = status
            if ttl is None and not opts.urn:
                raise TypeError("Missing required property 'ttl'")
            __props__.__dict__["ttl"] = ttl
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vdomparam"] = vdomparam
            if view is None and not opts.urn:
                raise TypeError("Missing required property 'view'")
            __props__.__dict__["view"] = view
        super(SystemDnsDatabase, __self__).__init__(
            'fortios:index/systemDnsDatabase:SystemDnsDatabase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_transfer: Optional[pulumi.Input[str]] = None,
            authoritative: Optional[pulumi.Input[str]] = None,
            contact: Optional[pulumi.Input[str]] = None,
            dns_entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemDnsDatabaseDnsEntryArgs']]]]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            forwarder: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ip_master: Optional[pulumi.Input[str]] = None,
            ip_primary: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            primary_name: Optional[pulumi.Input[str]] = None,
            rr_max: Optional[pulumi.Input[int]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            view: Optional[pulumi.Input[str]] = None) -> 'SystemDnsDatabase':
        """
        Get an existing SystemDnsDatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemDnsDatabaseState.__new__(_SystemDnsDatabaseState)

        __props__.__dict__["allow_transfer"] = allow_transfer
        __props__.__dict__["authoritative"] = authoritative
        __props__.__dict__["contact"] = contact
        __props__.__dict__["dns_entries"] = dns_entries
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["forwarder"] = forwarder
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ip_master"] = ip_master
        __props__.__dict__["ip_primary"] = ip_primary
        __props__.__dict__["name"] = name
        __props__.__dict__["primary_name"] = primary_name
        __props__.__dict__["rr_max"] = rr_max
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["status"] = status
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["type"] = type
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["view"] = view
        return SystemDnsDatabase(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowTransfer")
    def allow_transfer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "allow_transfer")

    @property
    @pulumi.getter
    def authoritative(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authoritative")

    @property
    @pulumi.getter
    def contact(self) -> pulumi.Output[str]:
        return pulumi.get(self, "contact")

    @property
    @pulumi.getter(name="dnsEntries")
    def dns_entries(self) -> pulumi.Output[Optional[Sequence['outputs.SystemDnsDatabaseDnsEntry']]]:
        return pulumi.get(self, "dns_entries")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def forwarder(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forwarder")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ipMaster")
    def ip_master(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_master")

    @property
    @pulumi.getter(name="ipPrimary")
    def ip_primary(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_primary")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryName")
    def primary_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "primary_name")

    @property
    @pulumi.getter(name="rrMax")
    def rr_max(self) -> pulumi.Output[int]:
        return pulumi.get(self, "rr_max")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def view(self) -> pulumi.Output[str]:
        return pulumi.get(self, "view")

