# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VoipProfileArgs', 'VoipProfile']

@pulumi.input_type
class VoipProfileArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 msrp: Optional[pulumi.Input['VoipProfileMsrpArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sccp: Optional[pulumi.Input['VoipProfileSccpArgs']] = None,
                 sip: Optional[pulumi.Input['VoipProfileSipArgs']] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VoipProfile resource.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if msrp is not None:
            pulumi.set(__self__, "msrp", msrp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sccp is not None:
            pulumi.set(__self__, "sccp", sccp)
        if sip is not None:
            pulumi.set(__self__, "sip", sip)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def msrp(self) -> Optional[pulumi.Input['VoipProfileMsrpArgs']]:
        return pulumi.get(self, "msrp")

    @msrp.setter
    def msrp(self, value: Optional[pulumi.Input['VoipProfileMsrpArgs']]):
        pulumi.set(self, "msrp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def sccp(self) -> Optional[pulumi.Input['VoipProfileSccpArgs']]:
        return pulumi.get(self, "sccp")

    @sccp.setter
    def sccp(self, value: Optional[pulumi.Input['VoipProfileSccpArgs']]):
        pulumi.set(self, "sccp", value)

    @property
    @pulumi.getter
    def sip(self) -> Optional[pulumi.Input['VoipProfileSipArgs']]:
        return pulumi.get(self, "sip")

    @sip.setter
    def sip(self, value: Optional[pulumi.Input['VoipProfileSipArgs']]):
        pulumi.set(self, "sip", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _VoipProfileState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 msrp: Optional[pulumi.Input['VoipProfileMsrpArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sccp: Optional[pulumi.Input['VoipProfileSccpArgs']] = None,
                 sip: Optional[pulumi.Input['VoipProfileSipArgs']] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VoipProfile resources.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if msrp is not None:
            pulumi.set(__self__, "msrp", msrp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sccp is not None:
            pulumi.set(__self__, "sccp", sccp)
        if sip is not None:
            pulumi.set(__self__, "sip", sip)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def msrp(self) -> Optional[pulumi.Input['VoipProfileMsrpArgs']]:
        return pulumi.get(self, "msrp")

    @msrp.setter
    def msrp(self, value: Optional[pulumi.Input['VoipProfileMsrpArgs']]):
        pulumi.set(self, "msrp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def sccp(self) -> Optional[pulumi.Input['VoipProfileSccpArgs']]:
        return pulumi.get(self, "sccp")

    @sccp.setter
    def sccp(self, value: Optional[pulumi.Input['VoipProfileSccpArgs']]):
        pulumi.set(self, "sccp", value)

    @property
    @pulumi.getter
    def sip(self) -> Optional[pulumi.Input['VoipProfileSipArgs']]:
        return pulumi.get(self, "sip")

    @sip.setter
    def sip(self, value: Optional[pulumi.Input['VoipProfileSipArgs']]):
        pulumi.set(self, "sip", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class VoipProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 msrp: Optional[pulumi.Input[pulumi.InputType['VoipProfileMsrpArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sccp: Optional[pulumi.Input[pulumi.InputType['VoipProfileSccpArgs']]] = None,
                 sip: Optional[pulumi.Input[pulumi.InputType['VoipProfileSipArgs']]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VoipProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VoipProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VoipProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VoipProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VoipProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 msrp: Optional[pulumi.Input[pulumi.InputType['VoipProfileMsrpArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sccp: Optional[pulumi.Input[pulumi.InputType['VoipProfileSccpArgs']]] = None,
                 sip: Optional[pulumi.Input[pulumi.InputType['VoipProfileSipArgs']]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VoipProfileArgs.__new__(VoipProfileArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["feature_set"] = feature_set
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["msrp"] = msrp
            __props__.__dict__["name"] = name
            __props__.__dict__["sccp"] = sccp
            __props__.__dict__["sip"] = sip
            __props__.__dict__["vdomparam"] = vdomparam
        super(VoipProfile, __self__).__init__(
            'fortios:index/voipProfile:VoipProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            feature_set: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            msrp: Optional[pulumi.Input[pulumi.InputType['VoipProfileMsrpArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            sccp: Optional[pulumi.Input[pulumi.InputType['VoipProfileSccpArgs']]] = None,
            sip: Optional[pulumi.Input[pulumi.InputType['VoipProfileSipArgs']]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'VoipProfile':
        """
        Get an existing VoipProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VoipProfileState.__new__(_VoipProfileState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["feature_set"] = feature_set
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["msrp"] = msrp
        __props__.__dict__["name"] = name
        __props__.__dict__["sccp"] = sccp
        __props__.__dict__["sip"] = sip
        __props__.__dict__["vdomparam"] = vdomparam
        return VoipProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> pulumi.Output[str]:
        return pulumi.get(self, "feature_set")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def msrp(self) -> pulumi.Output['outputs.VoipProfileMsrp']:
        return pulumi.get(self, "msrp")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sccp(self) -> pulumi.Output['outputs.VoipProfileSccp']:
        return pulumi.get(self, "sccp")

    @property
    @pulumi.getter
    def sip(self) -> pulumi.Output['outputs.VoipProfileSip']:
        return pulumi.get(self, "sip")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

