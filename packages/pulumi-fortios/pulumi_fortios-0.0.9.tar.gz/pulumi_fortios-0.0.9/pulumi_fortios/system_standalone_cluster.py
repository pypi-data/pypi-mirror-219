# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemStandaloneClusterArgs', 'SystemStandaloneCluster']

@pulumi.input_type
class SystemStandaloneClusterArgs:
    def __init__(__self__, *,
                 cluster_peers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_member_id: Optional[pulumi.Input[int]] = None,
                 layer2_connection: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 session_sync_dev: Optional[pulumi.Input[str]] = None,
                 standalone_group_id: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemStandaloneCluster resource.
        """
        if cluster_peers is not None:
            pulumi.set(__self__, "cluster_peers", cluster_peers)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_member_id is not None:
            pulumi.set(__self__, "group_member_id", group_member_id)
        if layer2_connection is not None:
            pulumi.set(__self__, "layer2_connection", layer2_connection)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if session_sync_dev is not None:
            pulumi.set(__self__, "session_sync_dev", session_sync_dev)
        if standalone_group_id is not None:
            pulumi.set(__self__, "standalone_group_id", standalone_group_id)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="clusterPeers")
    def cluster_peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerArgs']]]]:
        return pulumi.get(self, "cluster_peers")

    @cluster_peers.setter
    def cluster_peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerArgs']]]]):
        pulumi.set(self, "cluster_peers", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupMemberId")
    def group_member_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_member_id")

    @group_member_id.setter
    def group_member_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_member_id", value)

    @property
    @pulumi.getter(name="layer2Connection")
    def layer2_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "layer2_connection")

    @layer2_connection.setter
    def layer2_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layer2_connection", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="sessionSyncDev")
    def session_sync_dev(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_sync_dev")

    @session_sync_dev.setter
    def session_sync_dev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_sync_dev", value)

    @property
    @pulumi.getter(name="standaloneGroupId")
    def standalone_group_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "standalone_group_id")

    @standalone_group_id.setter
    def standalone_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "standalone_group_id", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemStandaloneClusterState:
    def __init__(__self__, *,
                 cluster_peers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_member_id: Optional[pulumi.Input[int]] = None,
                 layer2_connection: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 session_sync_dev: Optional[pulumi.Input[str]] = None,
                 standalone_group_id: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemStandaloneCluster resources.
        """
        if cluster_peers is not None:
            pulumi.set(__self__, "cluster_peers", cluster_peers)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_member_id is not None:
            pulumi.set(__self__, "group_member_id", group_member_id)
        if layer2_connection is not None:
            pulumi.set(__self__, "layer2_connection", layer2_connection)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if session_sync_dev is not None:
            pulumi.set(__self__, "session_sync_dev", session_sync_dev)
        if standalone_group_id is not None:
            pulumi.set(__self__, "standalone_group_id", standalone_group_id)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="clusterPeers")
    def cluster_peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerArgs']]]]:
        return pulumi.get(self, "cluster_peers")

    @cluster_peers.setter
    def cluster_peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerArgs']]]]):
        pulumi.set(self, "cluster_peers", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupMemberId")
    def group_member_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_member_id")

    @group_member_id.setter
    def group_member_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_member_id", value)

    @property
    @pulumi.getter(name="layer2Connection")
    def layer2_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "layer2_connection")

    @layer2_connection.setter
    def layer2_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layer2_connection", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="sessionSyncDev")
    def session_sync_dev(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_sync_dev")

    @session_sync_dev.setter
    def session_sync_dev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_sync_dev", value)

    @property
    @pulumi.getter(name="standaloneGroupId")
    def standalone_group_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "standalone_group_id")

    @standalone_group_id.setter
    def standalone_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "standalone_group_id", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemStandaloneCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemStandaloneClusterClusterPeerArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_member_id: Optional[pulumi.Input[int]] = None,
                 layer2_connection: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 session_sync_dev: Optional[pulumi.Input[str]] = None,
                 standalone_group_id: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemStandaloneCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemStandaloneClusterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemStandaloneCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemStandaloneClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemStandaloneClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemStandaloneClusterClusterPeerArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_member_id: Optional[pulumi.Input[int]] = None,
                 layer2_connection: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 session_sync_dev: Optional[pulumi.Input[str]] = None,
                 standalone_group_id: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemStandaloneClusterArgs.__new__(SystemStandaloneClusterArgs)

            __props__.__dict__["cluster_peers"] = cluster_peers
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["encryption"] = encryption
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["group_member_id"] = group_member_id
            __props__.__dict__["layer2_connection"] = layer2_connection
            __props__.__dict__["psksecret"] = None if psksecret is None else pulumi.Output.secret(psksecret)
            __props__.__dict__["session_sync_dev"] = session_sync_dev
            __props__.__dict__["standalone_group_id"] = standalone_group_id
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["psksecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SystemStandaloneCluster, __self__).__init__(
            'fortios:index/systemStandaloneCluster:SystemStandaloneCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemStandaloneClusterClusterPeerArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            encryption: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            group_member_id: Optional[pulumi.Input[int]] = None,
            layer2_connection: Optional[pulumi.Input[str]] = None,
            psksecret: Optional[pulumi.Input[str]] = None,
            session_sync_dev: Optional[pulumi.Input[str]] = None,
            standalone_group_id: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemStandaloneCluster':
        """
        Get an existing SystemStandaloneCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemStandaloneClusterState.__new__(_SystemStandaloneClusterState)

        __props__.__dict__["cluster_peers"] = cluster_peers
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["group_member_id"] = group_member_id
        __props__.__dict__["layer2_connection"] = layer2_connection
        __props__.__dict__["psksecret"] = psksecret
        __props__.__dict__["session_sync_dev"] = session_sync_dev
        __props__.__dict__["standalone_group_id"] = standalone_group_id
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemStandaloneCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterPeers")
    def cluster_peers(self) -> pulumi.Output[Optional[Sequence['outputs.SystemStandaloneClusterClusterPeer']]]:
        return pulumi.get(self, "cluster_peers")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def encryption(self) -> pulumi.Output[str]:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="groupMemberId")
    def group_member_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "group_member_id")

    @property
    @pulumi.getter(name="layer2Connection")
    def layer2_connection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "layer2_connection")

    @property
    @pulumi.getter
    def psksecret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "psksecret")

    @property
    @pulumi.getter(name="sessionSyncDev")
    def session_sync_dev(self) -> pulumi.Output[str]:
        return pulumi.get(self, "session_sync_dev")

    @property
    @pulumi.getter(name="standaloneGroupId")
    def standalone_group_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "standalone_group_id")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

