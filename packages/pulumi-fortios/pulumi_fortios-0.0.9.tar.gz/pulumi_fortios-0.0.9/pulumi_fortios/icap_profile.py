# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IcapProfileArgs', 'IcapProfile']

@pulumi.input_type
class IcapProfileArgs:
    def __init__(__self__, *,
                 chunk_encap: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extension_feature: Optional[pulumi.Input[str]] = None,
                 file_transfer: Optional[pulumi.Input[str]] = None,
                 file_transfer_failure: Optional[pulumi.Input[str]] = None,
                 file_transfer_path: Optional[pulumi.Input[str]] = None,
                 file_transfer_server: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 icap_block_log: Optional[pulumi.Input[str]] = None,
                 icap_headers: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]] = None,
                 methods: Optional[pulumi.Input[str]] = None,
                 n204_response: Optional[pulumi.Input[str]] = None,
                 n204_size_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preview: Optional[pulumi.Input[str]] = None,
                 preview_data_length: Optional[pulumi.Input[int]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 request_failure: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 request_server: Optional[pulumi.Input[str]] = None,
                 respmod_default_action: Optional[pulumi.Input[str]] = None,
                 respmod_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]] = None,
                 response: Optional[pulumi.Input[str]] = None,
                 response_failure: Optional[pulumi.Input[str]] = None,
                 response_path: Optional[pulumi.Input[str]] = None,
                 response_req_hdr: Optional[pulumi.Input[str]] = None,
                 response_server: Optional[pulumi.Input[str]] = None,
                 scan_progress_interval: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IcapProfile resource.
        """
        if chunk_encap is not None:
            pulumi.set(__self__, "chunk_encap", chunk_encap)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extension_feature is not None:
            pulumi.set(__self__, "extension_feature", extension_feature)
        if file_transfer is not None:
            pulumi.set(__self__, "file_transfer", file_transfer)
        if file_transfer_failure is not None:
            pulumi.set(__self__, "file_transfer_failure", file_transfer_failure)
        if file_transfer_path is not None:
            pulumi.set(__self__, "file_transfer_path", file_transfer_path)
        if file_transfer_server is not None:
            pulumi.set(__self__, "file_transfer_server", file_transfer_server)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if icap_block_log is not None:
            pulumi.set(__self__, "icap_block_log", icap_block_log)
        if icap_headers is not None:
            pulumi.set(__self__, "icap_headers", icap_headers)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if n204_response is not None:
            pulumi.set(__self__, "n204_response", n204_response)
        if n204_size_limit is not None:
            pulumi.set(__self__, "n204_size_limit", n204_size_limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preview is not None:
            pulumi.set(__self__, "preview", preview)
        if preview_data_length is not None:
            pulumi.set(__self__, "preview_data_length", preview_data_length)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if request_failure is not None:
            pulumi.set(__self__, "request_failure", request_failure)
        if request_path is not None:
            pulumi.set(__self__, "request_path", request_path)
        if request_server is not None:
            pulumi.set(__self__, "request_server", request_server)
        if respmod_default_action is not None:
            pulumi.set(__self__, "respmod_default_action", respmod_default_action)
        if respmod_forward_rules is not None:
            pulumi.set(__self__, "respmod_forward_rules", respmod_forward_rules)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if response_failure is not None:
            pulumi.set(__self__, "response_failure", response_failure)
        if response_path is not None:
            pulumi.set(__self__, "response_path", response_path)
        if response_req_hdr is not None:
            pulumi.set(__self__, "response_req_hdr", response_req_hdr)
        if response_server is not None:
            pulumi.set(__self__, "response_server", response_server)
        if scan_progress_interval is not None:
            pulumi.set(__self__, "scan_progress_interval", scan_progress_interval)
        if streaming_content_bypass is not None:
            pulumi.set(__self__, "streaming_content_bypass", streaming_content_bypass)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="chunkEncap")
    def chunk_encap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chunk_encap")

    @chunk_encap.setter
    def chunk_encap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chunk_encap", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extensionFeature")
    def extension_feature(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extension_feature")

    @extension_feature.setter
    def extension_feature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension_feature", value)

    @property
    @pulumi.getter(name="fileTransfer")
    def file_transfer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_transfer")

    @file_transfer.setter
    def file_transfer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_transfer", value)

    @property
    @pulumi.getter(name="fileTransferFailure")
    def file_transfer_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_transfer_failure")

    @file_transfer_failure.setter
    def file_transfer_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_transfer_failure", value)

    @property
    @pulumi.getter(name="fileTransferPath")
    def file_transfer_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_transfer_path")

    @file_transfer_path.setter
    def file_transfer_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_transfer_path", value)

    @property
    @pulumi.getter(name="fileTransferServer")
    def file_transfer_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_transfer_server")

    @file_transfer_server.setter
    def file_transfer_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_transfer_server", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="icapBlockLog")
    def icap_block_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icap_block_log")

    @icap_block_log.setter
    def icap_block_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_block_log", value)

    @property
    @pulumi.getter(name="icapHeaders")
    def icap_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]]:
        return pulumi.get(self, "icap_headers")

    @icap_headers.setter
    def icap_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]]):
        pulumi.set(self, "icap_headers", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter(name="n204Response")
    def n204_response(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "n204_response")

    @n204_response.setter
    def n204_response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n204_response", value)

    @property
    @pulumi.getter(name="n204SizeLimit")
    def n204_size_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "n204_size_limit")

    @n204_size_limit.setter
    def n204_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "n204_size_limit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def preview(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preview")

    @preview.setter
    def preview(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preview", value)

    @property
    @pulumi.getter(name="previewDataLength")
    def preview_data_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preview_data_length")

    @preview_data_length.setter
    def preview_data_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preview_data_length", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="requestFailure")
    def request_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_failure")

    @request_failure.setter
    def request_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_failure", value)

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_path")

    @request_path.setter
    def request_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_path", value)

    @property
    @pulumi.getter(name="requestServer")
    def request_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_server")

    @request_server.setter
    def request_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_server", value)

    @property
    @pulumi.getter(name="respmodDefaultAction")
    def respmod_default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "respmod_default_action")

    @respmod_default_action.setter
    def respmod_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "respmod_default_action", value)

    @property
    @pulumi.getter(name="respmodForwardRules")
    def respmod_forward_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]]:
        return pulumi.get(self, "respmod_forward_rules")

    @respmod_forward_rules.setter
    def respmod_forward_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]]):
        pulumi.set(self, "respmod_forward_rules", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response", value)

    @property
    @pulumi.getter(name="responseFailure")
    def response_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_failure")

    @response_failure.setter
    def response_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_failure", value)

    @property
    @pulumi.getter(name="responsePath")
    def response_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_path")

    @response_path.setter
    def response_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_path", value)

    @property
    @pulumi.getter(name="responseReqHdr")
    def response_req_hdr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_req_hdr")

    @response_req_hdr.setter
    def response_req_hdr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_req_hdr", value)

    @property
    @pulumi.getter(name="responseServer")
    def response_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_server")

    @response_server.setter
    def response_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_server", value)

    @property
    @pulumi.getter(name="scanProgressInterval")
    def scan_progress_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scan_progress_interval")

    @scan_progress_interval.setter
    def scan_progress_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_progress_interval", value)

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "streaming_content_bypass")

    @streaming_content_bypass.setter
    def streaming_content_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "streaming_content_bypass", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _IcapProfileState:
    def __init__(__self__, *,
                 chunk_encap: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extension_feature: Optional[pulumi.Input[str]] = None,
                 file_transfer: Optional[pulumi.Input[str]] = None,
                 file_transfer_failure: Optional[pulumi.Input[str]] = None,
                 file_transfer_path: Optional[pulumi.Input[str]] = None,
                 file_transfer_server: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 icap_block_log: Optional[pulumi.Input[str]] = None,
                 icap_headers: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]] = None,
                 methods: Optional[pulumi.Input[str]] = None,
                 n204_response: Optional[pulumi.Input[str]] = None,
                 n204_size_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preview: Optional[pulumi.Input[str]] = None,
                 preview_data_length: Optional[pulumi.Input[int]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 request_failure: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 request_server: Optional[pulumi.Input[str]] = None,
                 respmod_default_action: Optional[pulumi.Input[str]] = None,
                 respmod_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]] = None,
                 response: Optional[pulumi.Input[str]] = None,
                 response_failure: Optional[pulumi.Input[str]] = None,
                 response_path: Optional[pulumi.Input[str]] = None,
                 response_req_hdr: Optional[pulumi.Input[str]] = None,
                 response_server: Optional[pulumi.Input[str]] = None,
                 scan_progress_interval: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IcapProfile resources.
        """
        if chunk_encap is not None:
            pulumi.set(__self__, "chunk_encap", chunk_encap)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extension_feature is not None:
            pulumi.set(__self__, "extension_feature", extension_feature)
        if file_transfer is not None:
            pulumi.set(__self__, "file_transfer", file_transfer)
        if file_transfer_failure is not None:
            pulumi.set(__self__, "file_transfer_failure", file_transfer_failure)
        if file_transfer_path is not None:
            pulumi.set(__self__, "file_transfer_path", file_transfer_path)
        if file_transfer_server is not None:
            pulumi.set(__self__, "file_transfer_server", file_transfer_server)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if icap_block_log is not None:
            pulumi.set(__self__, "icap_block_log", icap_block_log)
        if icap_headers is not None:
            pulumi.set(__self__, "icap_headers", icap_headers)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if n204_response is not None:
            pulumi.set(__self__, "n204_response", n204_response)
        if n204_size_limit is not None:
            pulumi.set(__self__, "n204_size_limit", n204_size_limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preview is not None:
            pulumi.set(__self__, "preview", preview)
        if preview_data_length is not None:
            pulumi.set(__self__, "preview_data_length", preview_data_length)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if request_failure is not None:
            pulumi.set(__self__, "request_failure", request_failure)
        if request_path is not None:
            pulumi.set(__self__, "request_path", request_path)
        if request_server is not None:
            pulumi.set(__self__, "request_server", request_server)
        if respmod_default_action is not None:
            pulumi.set(__self__, "respmod_default_action", respmod_default_action)
        if respmod_forward_rules is not None:
            pulumi.set(__self__, "respmod_forward_rules", respmod_forward_rules)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if response_failure is not None:
            pulumi.set(__self__, "response_failure", response_failure)
        if response_path is not None:
            pulumi.set(__self__, "response_path", response_path)
        if response_req_hdr is not None:
            pulumi.set(__self__, "response_req_hdr", response_req_hdr)
        if response_server is not None:
            pulumi.set(__self__, "response_server", response_server)
        if scan_progress_interval is not None:
            pulumi.set(__self__, "scan_progress_interval", scan_progress_interval)
        if streaming_content_bypass is not None:
            pulumi.set(__self__, "streaming_content_bypass", streaming_content_bypass)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="chunkEncap")
    def chunk_encap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chunk_encap")

    @chunk_encap.setter
    def chunk_encap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chunk_encap", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extensionFeature")
    def extension_feature(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extension_feature")

    @extension_feature.setter
    def extension_feature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension_feature", value)

    @property
    @pulumi.getter(name="fileTransfer")
    def file_transfer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_transfer")

    @file_transfer.setter
    def file_transfer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_transfer", value)

    @property
    @pulumi.getter(name="fileTransferFailure")
    def file_transfer_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_transfer_failure")

    @file_transfer_failure.setter
    def file_transfer_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_transfer_failure", value)

    @property
    @pulumi.getter(name="fileTransferPath")
    def file_transfer_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_transfer_path")

    @file_transfer_path.setter
    def file_transfer_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_transfer_path", value)

    @property
    @pulumi.getter(name="fileTransferServer")
    def file_transfer_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_transfer_server")

    @file_transfer_server.setter
    def file_transfer_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_transfer_server", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="icapBlockLog")
    def icap_block_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icap_block_log")

    @icap_block_log.setter
    def icap_block_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_block_log", value)

    @property
    @pulumi.getter(name="icapHeaders")
    def icap_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]]:
        return pulumi.get(self, "icap_headers")

    @icap_headers.setter
    def icap_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]]):
        pulumi.set(self, "icap_headers", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter(name="n204Response")
    def n204_response(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "n204_response")

    @n204_response.setter
    def n204_response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n204_response", value)

    @property
    @pulumi.getter(name="n204SizeLimit")
    def n204_size_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "n204_size_limit")

    @n204_size_limit.setter
    def n204_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "n204_size_limit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def preview(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preview")

    @preview.setter
    def preview(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preview", value)

    @property
    @pulumi.getter(name="previewDataLength")
    def preview_data_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preview_data_length")

    @preview_data_length.setter
    def preview_data_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preview_data_length", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="requestFailure")
    def request_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_failure")

    @request_failure.setter
    def request_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_failure", value)

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_path")

    @request_path.setter
    def request_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_path", value)

    @property
    @pulumi.getter(name="requestServer")
    def request_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_server")

    @request_server.setter
    def request_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_server", value)

    @property
    @pulumi.getter(name="respmodDefaultAction")
    def respmod_default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "respmod_default_action")

    @respmod_default_action.setter
    def respmod_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "respmod_default_action", value)

    @property
    @pulumi.getter(name="respmodForwardRules")
    def respmod_forward_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]]:
        return pulumi.get(self, "respmod_forward_rules")

    @respmod_forward_rules.setter
    def respmod_forward_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]]):
        pulumi.set(self, "respmod_forward_rules", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response", value)

    @property
    @pulumi.getter(name="responseFailure")
    def response_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_failure")

    @response_failure.setter
    def response_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_failure", value)

    @property
    @pulumi.getter(name="responsePath")
    def response_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_path")

    @response_path.setter
    def response_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_path", value)

    @property
    @pulumi.getter(name="responseReqHdr")
    def response_req_hdr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_req_hdr")

    @response_req_hdr.setter
    def response_req_hdr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_req_hdr", value)

    @property
    @pulumi.getter(name="responseServer")
    def response_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_server")

    @response_server.setter
    def response_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_server", value)

    @property
    @pulumi.getter(name="scanProgressInterval")
    def scan_progress_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scan_progress_interval")

    @scan_progress_interval.setter
    def scan_progress_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_progress_interval", value)

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "streaming_content_bypass")

    @streaming_content_bypass.setter
    def streaming_content_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "streaming_content_bypass", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class IcapProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chunk_encap: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extension_feature: Optional[pulumi.Input[str]] = None,
                 file_transfer: Optional[pulumi.Input[str]] = None,
                 file_transfer_failure: Optional[pulumi.Input[str]] = None,
                 file_transfer_path: Optional[pulumi.Input[str]] = None,
                 file_transfer_server: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 icap_block_log: Optional[pulumi.Input[str]] = None,
                 icap_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileIcapHeaderArgs']]]]] = None,
                 methods: Optional[pulumi.Input[str]] = None,
                 n204_response: Optional[pulumi.Input[str]] = None,
                 n204_size_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preview: Optional[pulumi.Input[str]] = None,
                 preview_data_length: Optional[pulumi.Input[int]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 request_failure: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 request_server: Optional[pulumi.Input[str]] = None,
                 respmod_default_action: Optional[pulumi.Input[str]] = None,
                 respmod_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileRespmodForwardRuleArgs']]]]] = None,
                 response: Optional[pulumi.Input[str]] = None,
                 response_failure: Optional[pulumi.Input[str]] = None,
                 response_path: Optional[pulumi.Input[str]] = None,
                 response_req_hdr: Optional[pulumi.Input[str]] = None,
                 response_server: Optional[pulumi.Input[str]] = None,
                 scan_progress_interval: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a IcapProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IcapProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IcapProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IcapProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IcapProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chunk_encap: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extension_feature: Optional[pulumi.Input[str]] = None,
                 file_transfer: Optional[pulumi.Input[str]] = None,
                 file_transfer_failure: Optional[pulumi.Input[str]] = None,
                 file_transfer_path: Optional[pulumi.Input[str]] = None,
                 file_transfer_server: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 icap_block_log: Optional[pulumi.Input[str]] = None,
                 icap_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileIcapHeaderArgs']]]]] = None,
                 methods: Optional[pulumi.Input[str]] = None,
                 n204_response: Optional[pulumi.Input[str]] = None,
                 n204_size_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preview: Optional[pulumi.Input[str]] = None,
                 preview_data_length: Optional[pulumi.Input[int]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 request_failure: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 request_server: Optional[pulumi.Input[str]] = None,
                 respmod_default_action: Optional[pulumi.Input[str]] = None,
                 respmod_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileRespmodForwardRuleArgs']]]]] = None,
                 response: Optional[pulumi.Input[str]] = None,
                 response_failure: Optional[pulumi.Input[str]] = None,
                 response_path: Optional[pulumi.Input[str]] = None,
                 response_req_hdr: Optional[pulumi.Input[str]] = None,
                 response_server: Optional[pulumi.Input[str]] = None,
                 scan_progress_interval: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IcapProfileArgs.__new__(IcapProfileArgs)

            __props__.__dict__["chunk_encap"] = chunk_encap
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["extension_feature"] = extension_feature
            __props__.__dict__["file_transfer"] = file_transfer
            __props__.__dict__["file_transfer_failure"] = file_transfer_failure
            __props__.__dict__["file_transfer_path"] = file_transfer_path
            __props__.__dict__["file_transfer_server"] = file_transfer_server
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["icap_block_log"] = icap_block_log
            __props__.__dict__["icap_headers"] = icap_headers
            __props__.__dict__["methods"] = methods
            __props__.__dict__["n204_response"] = n204_response
            __props__.__dict__["n204_size_limit"] = n204_size_limit
            __props__.__dict__["name"] = name
            __props__.__dict__["preview"] = preview
            __props__.__dict__["preview_data_length"] = preview_data_length
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["request"] = request
            __props__.__dict__["request_failure"] = request_failure
            __props__.__dict__["request_path"] = request_path
            __props__.__dict__["request_server"] = request_server
            __props__.__dict__["respmod_default_action"] = respmod_default_action
            __props__.__dict__["respmod_forward_rules"] = respmod_forward_rules
            __props__.__dict__["response"] = response
            __props__.__dict__["response_failure"] = response_failure
            __props__.__dict__["response_path"] = response_path
            __props__.__dict__["response_req_hdr"] = response_req_hdr
            __props__.__dict__["response_server"] = response_server
            __props__.__dict__["scan_progress_interval"] = scan_progress_interval
            __props__.__dict__["streaming_content_bypass"] = streaming_content_bypass
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["vdomparam"] = vdomparam
        super(IcapProfile, __self__).__init__(
            'fortios:index/icapProfile:IcapProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            chunk_encap: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            extension_feature: Optional[pulumi.Input[str]] = None,
            file_transfer: Optional[pulumi.Input[str]] = None,
            file_transfer_failure: Optional[pulumi.Input[str]] = None,
            file_transfer_path: Optional[pulumi.Input[str]] = None,
            file_transfer_server: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            icap_block_log: Optional[pulumi.Input[str]] = None,
            icap_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileIcapHeaderArgs']]]]] = None,
            methods: Optional[pulumi.Input[str]] = None,
            n204_response: Optional[pulumi.Input[str]] = None,
            n204_size_limit: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            preview: Optional[pulumi.Input[str]] = None,
            preview_data_length: Optional[pulumi.Input[int]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            request: Optional[pulumi.Input[str]] = None,
            request_failure: Optional[pulumi.Input[str]] = None,
            request_path: Optional[pulumi.Input[str]] = None,
            request_server: Optional[pulumi.Input[str]] = None,
            respmod_default_action: Optional[pulumi.Input[str]] = None,
            respmod_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileRespmodForwardRuleArgs']]]]] = None,
            response: Optional[pulumi.Input[str]] = None,
            response_failure: Optional[pulumi.Input[str]] = None,
            response_path: Optional[pulumi.Input[str]] = None,
            response_req_hdr: Optional[pulumi.Input[str]] = None,
            response_server: Optional[pulumi.Input[str]] = None,
            scan_progress_interval: Optional[pulumi.Input[int]] = None,
            streaming_content_bypass: Optional[pulumi.Input[str]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'IcapProfile':
        """
        Get an existing IcapProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IcapProfileState.__new__(_IcapProfileState)

        __props__.__dict__["chunk_encap"] = chunk_encap
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["extension_feature"] = extension_feature
        __props__.__dict__["file_transfer"] = file_transfer
        __props__.__dict__["file_transfer_failure"] = file_transfer_failure
        __props__.__dict__["file_transfer_path"] = file_transfer_path
        __props__.__dict__["file_transfer_server"] = file_transfer_server
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["icap_block_log"] = icap_block_log
        __props__.__dict__["icap_headers"] = icap_headers
        __props__.__dict__["methods"] = methods
        __props__.__dict__["n204_response"] = n204_response
        __props__.__dict__["n204_size_limit"] = n204_size_limit
        __props__.__dict__["name"] = name
        __props__.__dict__["preview"] = preview
        __props__.__dict__["preview_data_length"] = preview_data_length
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["request"] = request
        __props__.__dict__["request_failure"] = request_failure
        __props__.__dict__["request_path"] = request_path
        __props__.__dict__["request_server"] = request_server
        __props__.__dict__["respmod_default_action"] = respmod_default_action
        __props__.__dict__["respmod_forward_rules"] = respmod_forward_rules
        __props__.__dict__["response"] = response
        __props__.__dict__["response_failure"] = response_failure
        __props__.__dict__["response_path"] = response_path
        __props__.__dict__["response_req_hdr"] = response_req_hdr
        __props__.__dict__["response_server"] = response_server
        __props__.__dict__["scan_progress_interval"] = scan_progress_interval
        __props__.__dict__["streaming_content_bypass"] = streaming_content_bypass
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["vdomparam"] = vdomparam
        return IcapProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="chunkEncap")
    def chunk_encap(self) -> pulumi.Output[str]:
        return pulumi.get(self, "chunk_encap")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="extensionFeature")
    def extension_feature(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extension_feature")

    @property
    @pulumi.getter(name="fileTransfer")
    def file_transfer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_transfer")

    @property
    @pulumi.getter(name="fileTransferFailure")
    def file_transfer_failure(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_transfer_failure")

    @property
    @pulumi.getter(name="fileTransferPath")
    def file_transfer_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_transfer_path")

    @property
    @pulumi.getter(name="fileTransferServer")
    def file_transfer_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_transfer_server")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="icapBlockLog")
    def icap_block_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "icap_block_log")

    @property
    @pulumi.getter(name="icapHeaders")
    def icap_headers(self) -> pulumi.Output[Optional[Sequence['outputs.IcapProfileIcapHeader']]]:
        return pulumi.get(self, "icap_headers")

    @property
    @pulumi.getter
    def methods(self) -> pulumi.Output[str]:
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter(name="n204Response")
    def n204_response(self) -> pulumi.Output[str]:
        return pulumi.get(self, "n204_response")

    @property
    @pulumi.getter(name="n204SizeLimit")
    def n204_size_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "n204_size_limit")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def preview(self) -> pulumi.Output[str]:
        return pulumi.get(self, "preview")

    @property
    @pulumi.getter(name="previewDataLength")
    def preview_data_length(self) -> pulumi.Output[int]:
        return pulumi.get(self, "preview_data_length")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter
    def request(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="requestFailure")
    def request_failure(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_failure")

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_path")

    @property
    @pulumi.getter(name="requestServer")
    def request_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_server")

    @property
    @pulumi.getter(name="respmodDefaultAction")
    def respmod_default_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "respmod_default_action")

    @property
    @pulumi.getter(name="respmodForwardRules")
    def respmod_forward_rules(self) -> pulumi.Output[Optional[Sequence['outputs.IcapProfileRespmodForwardRule']]]:
        return pulumi.get(self, "respmod_forward_rules")

    @property
    @pulumi.getter
    def response(self) -> pulumi.Output[str]:
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="responseFailure")
    def response_failure(self) -> pulumi.Output[str]:
        return pulumi.get(self, "response_failure")

    @property
    @pulumi.getter(name="responsePath")
    def response_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "response_path")

    @property
    @pulumi.getter(name="responseReqHdr")
    def response_req_hdr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "response_req_hdr")

    @property
    @pulumi.getter(name="responseServer")
    def response_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "response_server")

    @property
    @pulumi.getter(name="scanProgressInterval")
    def scan_progress_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "scan_progress_interval")

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> pulumi.Output[str]:
        return pulumi.get(self, "streaming_content_bypass")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

