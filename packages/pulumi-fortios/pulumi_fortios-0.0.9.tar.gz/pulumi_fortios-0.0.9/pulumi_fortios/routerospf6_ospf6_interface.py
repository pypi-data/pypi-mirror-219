# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Routerospf6Ospf6InterfaceArgs', 'Routerospf6Ospf6Interface']

@pulumi.input_type
class Routerospf6Ospf6InterfaceArgs:
    def __init__(__self__, *,
                 area_id: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceIpsecKeyArgs']]]] = None,
                 key_rollover_interval: Optional[pulumi.Input[int]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceNeighborArgs']]]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Routerospf6Ospf6Interface resource.
        """
        if area_id is not None:
            pulumi.set(__self__, "area_id", area_id)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_auth_alg")

    @ipsec_auth_alg.setter
    def ipsec_auth_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_auth_alg", value)

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_enc_alg")

    @ipsec_enc_alg.setter
    def ipsec_enc_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_enc_alg", value)

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceIpsecKeyArgs']]]]:
        return pulumi.get(self, "ipsec_keys")

    @ipsec_keys.setter
    def ipsec_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceIpsecKeyArgs']]]]):
        pulumi.set(self, "ipsec_keys", value)

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_rollover_interval")

    @key_rollover_interval.setter
    def key_rollover_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_rollover_interval", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mtu_ignore")

    @mtu_ignore.setter
    def mtu_ignore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_ignore", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceNeighborArgs']]]]:
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _Routerospf6Ospf6InterfaceState:
    def __init__(__self__, *,
                 area_id: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceIpsecKeyArgs']]]] = None,
                 key_rollover_interval: Optional[pulumi.Input[int]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceNeighborArgs']]]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Routerospf6Ospf6Interface resources.
        """
        if area_id is not None:
            pulumi.set(__self__, "area_id", area_id)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_auth_alg")

    @ipsec_auth_alg.setter
    def ipsec_auth_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_auth_alg", value)

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_enc_alg")

    @ipsec_enc_alg.setter
    def ipsec_enc_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_enc_alg", value)

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceIpsecKeyArgs']]]]:
        return pulumi.get(self, "ipsec_keys")

    @ipsec_keys.setter
    def ipsec_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceIpsecKeyArgs']]]]):
        pulumi.set(self, "ipsec_keys", value)

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_rollover_interval")

    @key_rollover_interval.setter
    def key_rollover_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_rollover_interval", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mtu_ignore")

    @mtu_ignore.setter
    def mtu_ignore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_ignore", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceNeighborArgs']]]]:
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Routerospf6Ospf6InterfaceNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Routerospf6Ospf6Interface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area_id: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Routerospf6Ospf6InterfaceIpsecKeyArgs']]]]] = None,
                 key_rollover_interval: Optional[pulumi.Input[int]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Routerospf6Ospf6InterfaceNeighborArgs']]]]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Routerospf6Ospf6Interface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[Routerospf6Ospf6InterfaceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Routerospf6Ospf6Interface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param Routerospf6Ospf6InterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Routerospf6Ospf6InterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area_id: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Routerospf6Ospf6InterfaceIpsecKeyArgs']]]]] = None,
                 key_rollover_interval: Optional[pulumi.Input[int]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Routerospf6Ospf6InterfaceNeighborArgs']]]]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Routerospf6Ospf6InterfaceArgs.__new__(Routerospf6Ospf6InterfaceArgs)

            __props__.__dict__["area_id"] = area_id
            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["bfd"] = bfd
            __props__.__dict__["cost"] = cost
            __props__.__dict__["dead_interval"] = dead_interval
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["hello_interval"] = hello_interval
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ipsec_auth_alg"] = ipsec_auth_alg
            __props__.__dict__["ipsec_enc_alg"] = ipsec_enc_alg
            __props__.__dict__["ipsec_keys"] = ipsec_keys
            __props__.__dict__["key_rollover_interval"] = key_rollover_interval
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["mtu_ignore"] = mtu_ignore
            __props__.__dict__["name"] = name
            __props__.__dict__["neighbors"] = neighbors
            __props__.__dict__["network_type"] = network_type
            __props__.__dict__["priority"] = priority
            __props__.__dict__["retransmit_interval"] = retransmit_interval
            __props__.__dict__["status"] = status
            __props__.__dict__["transmit_delay"] = transmit_delay
            __props__.__dict__["vdomparam"] = vdomparam
        super(Routerospf6Ospf6Interface, __self__).__init__(
            'fortios:index/routerospf6Ospf6Interface:Routerospf6Ospf6Interface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area_id: Optional[pulumi.Input[str]] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            bfd: Optional[pulumi.Input[str]] = None,
            cost: Optional[pulumi.Input[int]] = None,
            dead_interval: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            hello_interval: Optional[pulumi.Input[int]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
            ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
            ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Routerospf6Ospf6InterfaceIpsecKeyArgs']]]]] = None,
            key_rollover_interval: Optional[pulumi.Input[int]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            mtu_ignore: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Routerospf6Ospf6InterfaceNeighborArgs']]]]] = None,
            network_type: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            retransmit_interval: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            transmit_delay: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Routerospf6Ospf6Interface':
        """
        Get an existing Routerospf6Ospf6Interface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Routerospf6Ospf6InterfaceState.__new__(_Routerospf6Ospf6InterfaceState)

        __props__.__dict__["area_id"] = area_id
        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["bfd"] = bfd
        __props__.__dict__["cost"] = cost
        __props__.__dict__["dead_interval"] = dead_interval
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["hello_interval"] = hello_interval
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ipsec_auth_alg"] = ipsec_auth_alg
        __props__.__dict__["ipsec_enc_alg"] = ipsec_enc_alg
        __props__.__dict__["ipsec_keys"] = ipsec_keys
        __props__.__dict__["key_rollover_interval"] = key_rollover_interval
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["mtu_ignore"] = mtu_ignore
        __props__.__dict__["name"] = name
        __props__.__dict__["neighbors"] = neighbors
        __props__.__dict__["network_type"] = network_type
        __props__.__dict__["priority"] = priority
        __props__.__dict__["retransmit_interval"] = retransmit_interval
        __props__.__dict__["status"] = status
        __props__.__dict__["transmit_delay"] = transmit_delay
        __props__.__dict__["vdomparam"] = vdomparam
        return Routerospf6Ospf6Interface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def bfd(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def cost(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> pulumi.Output[Optional[Sequence['outputs.Routerospf6Ospf6InterfaceIpsecKey']]]:
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def neighbors(self) -> pulumi.Output[Optional[Sequence['outputs.Routerospf6Ospf6InterfaceNeighbor']]]:
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> pulumi.Output[int]:
        return pulumi.get(self, "transmit_delay")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

