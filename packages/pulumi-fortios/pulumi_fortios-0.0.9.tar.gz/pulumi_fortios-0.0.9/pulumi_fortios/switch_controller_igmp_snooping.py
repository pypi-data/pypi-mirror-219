# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerIgmpSnoopingArgs', 'SwitchControllerIgmpSnooping']

@pulumi.input_type
class SwitchControllerIgmpSnoopingArgs:
    def __init__(__self__, *,
                 aging_time: Optional[pulumi.Input[int]] = None,
                 flood_unknown_multicast: Optional[pulumi.Input[str]] = None,
                 query_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerIgmpSnooping resource.
        """
        if aging_time is not None:
            pulumi.set(__self__, "aging_time", aging_time)
        if flood_unknown_multicast is not None:
            pulumi.set(__self__, "flood_unknown_multicast", flood_unknown_multicast)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="agingTime")
    def aging_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "aging_time")

    @aging_time.setter
    def aging_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aging_time", value)

    @property
    @pulumi.getter(name="floodUnknownMulticast")
    def flood_unknown_multicast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flood_unknown_multicast")

    @flood_unknown_multicast.setter
    def flood_unknown_multicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flood_unknown_multicast", value)

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_interval")

    @query_interval.setter
    def query_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_interval", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchControllerIgmpSnoopingState:
    def __init__(__self__, *,
                 aging_time: Optional[pulumi.Input[int]] = None,
                 flood_unknown_multicast: Optional[pulumi.Input[str]] = None,
                 query_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerIgmpSnooping resources.
        """
        if aging_time is not None:
            pulumi.set(__self__, "aging_time", aging_time)
        if flood_unknown_multicast is not None:
            pulumi.set(__self__, "flood_unknown_multicast", flood_unknown_multicast)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="agingTime")
    def aging_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "aging_time")

    @aging_time.setter
    def aging_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aging_time", value)

    @property
    @pulumi.getter(name="floodUnknownMulticast")
    def flood_unknown_multicast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flood_unknown_multicast")

    @flood_unknown_multicast.setter
    def flood_unknown_multicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flood_unknown_multicast", value)

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_interval")

    @query_interval.setter
    def query_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_interval", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchControllerIgmpSnooping(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aging_time: Optional[pulumi.Input[int]] = None,
                 flood_unknown_multicast: Optional[pulumi.Input[str]] = None,
                 query_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerIgmpSnooping resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerIgmpSnoopingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerIgmpSnooping resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerIgmpSnoopingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerIgmpSnoopingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aging_time: Optional[pulumi.Input[int]] = None,
                 flood_unknown_multicast: Optional[pulumi.Input[str]] = None,
                 query_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerIgmpSnoopingArgs.__new__(SwitchControllerIgmpSnoopingArgs)

            __props__.__dict__["aging_time"] = aging_time
            __props__.__dict__["flood_unknown_multicast"] = flood_unknown_multicast
            __props__.__dict__["query_interval"] = query_interval
            __props__.__dict__["vdomparam"] = vdomparam
        super(SwitchControllerIgmpSnooping, __self__).__init__(
            'fortios:index/switchControllerIgmpSnooping:SwitchControllerIgmpSnooping',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aging_time: Optional[pulumi.Input[int]] = None,
            flood_unknown_multicast: Optional[pulumi.Input[str]] = None,
            query_interval: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerIgmpSnooping':
        """
        Get an existing SwitchControllerIgmpSnooping resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerIgmpSnoopingState.__new__(_SwitchControllerIgmpSnoopingState)

        __props__.__dict__["aging_time"] = aging_time
        __props__.__dict__["flood_unknown_multicast"] = flood_unknown_multicast
        __props__.__dict__["query_interval"] = query_interval
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchControllerIgmpSnooping(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="agingTime")
    def aging_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "aging_time")

    @property
    @pulumi.getter(name="floodUnknownMulticast")
    def flood_unknown_multicast(self) -> pulumi.Output[str]:
        return pulumi.get(self, "flood_unknown_multicast")

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "query_interval")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

