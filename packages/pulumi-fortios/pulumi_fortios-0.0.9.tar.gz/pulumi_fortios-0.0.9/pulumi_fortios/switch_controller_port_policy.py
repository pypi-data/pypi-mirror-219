# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerPortPolicyArgs', 'SwitchControllerPortPolicy']

@pulumi.input_type
class SwitchControllerPortPolicyArgs:
    def __init__(__self__, *,
                 bounce_port_link: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 n8021x: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_policy: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerPortPolicy resource.
        """
        if bounce_port_link is not None:
            pulumi.set(__self__, "bounce_port_link", bounce_port_link)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fortilink is not None:
            pulumi.set(__self__, "fortilink", fortilink)
        if lldp_profile is not None:
            pulumi.set(__self__, "lldp_profile", lldp_profile)
        if n8021x is not None:
            pulumi.set(__self__, "n8021x", n8021x)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_policy is not None:
            pulumi.set(__self__, "vlan_policy", vlan_policy)

    @property
    @pulumi.getter(name="bouncePortLink")
    def bounce_port_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bounce_port_link")

    @bounce_port_link.setter
    def bounce_port_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_port_link", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fortilink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortilink")

    @fortilink.setter
    def fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink", value)

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp_profile")

    @lldp_profile.setter
    def lldp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_profile", value)

    @property
    @pulumi.getter
    def n8021x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "n8021x")

    @n8021x.setter
    def n8021x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n8021x", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_policy", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vlanPolicy")
    def vlan_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_policy")

    @vlan_policy.setter
    def vlan_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_policy", value)


@pulumi.input_type
class _SwitchControllerPortPolicyState:
    def __init__(__self__, *,
                 bounce_port_link: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 n8021x: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_policy: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerPortPolicy resources.
        """
        if bounce_port_link is not None:
            pulumi.set(__self__, "bounce_port_link", bounce_port_link)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fortilink is not None:
            pulumi.set(__self__, "fortilink", fortilink)
        if lldp_profile is not None:
            pulumi.set(__self__, "lldp_profile", lldp_profile)
        if n8021x is not None:
            pulumi.set(__self__, "n8021x", n8021x)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan_policy is not None:
            pulumi.set(__self__, "vlan_policy", vlan_policy)

    @property
    @pulumi.getter(name="bouncePortLink")
    def bounce_port_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bounce_port_link")

    @bounce_port_link.setter
    def bounce_port_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_port_link", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fortilink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortilink")

    @fortilink.setter
    def fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink", value)

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp_profile")

    @lldp_profile.setter
    def lldp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_profile", value)

    @property
    @pulumi.getter
    def n8021x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "n8021x")

    @n8021x.setter
    def n8021x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n8021x", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_policy", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vlanPolicy")
    def vlan_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_policy")

    @vlan_policy.setter
    def vlan_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_policy", value)


class SwitchControllerPortPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bounce_port_link: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 n8021x: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_policy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerPortPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerPortPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerPortPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerPortPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerPortPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bounce_port_link: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 n8021x: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan_policy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerPortPolicyArgs.__new__(SwitchControllerPortPolicyArgs)

            __props__.__dict__["bounce_port_link"] = bounce_port_link
            __props__.__dict__["description"] = description
            __props__.__dict__["fortilink"] = fortilink
            __props__.__dict__["lldp_profile"] = lldp_profile
            __props__.__dict__["n8021x"] = n8021x
            __props__.__dict__["name"] = name
            __props__.__dict__["qos_policy"] = qos_policy
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vlan_policy"] = vlan_policy
        super(SwitchControllerPortPolicy, __self__).__init__(
            'fortios:index/switchControllerPortPolicy:SwitchControllerPortPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bounce_port_link: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            fortilink: Optional[pulumi.Input[str]] = None,
            lldp_profile: Optional[pulumi.Input[str]] = None,
            n8021x: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            qos_policy: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vlan_policy: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerPortPolicy':
        """
        Get an existing SwitchControllerPortPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerPortPolicyState.__new__(_SwitchControllerPortPolicyState)

        __props__.__dict__["bounce_port_link"] = bounce_port_link
        __props__.__dict__["description"] = description
        __props__.__dict__["fortilink"] = fortilink
        __props__.__dict__["lldp_profile"] = lldp_profile
        __props__.__dict__["n8021x"] = n8021x
        __props__.__dict__["name"] = name
        __props__.__dict__["qos_policy"] = qos_policy
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vlan_policy"] = vlan_policy
        return SwitchControllerPortPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bouncePortLink")
    def bounce_port_link(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bounce_port_link")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def fortilink(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortilink")

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "lldp_profile")

    @property
    @pulumi.getter
    def n8021x(self) -> pulumi.Output[str]:
        return pulumi.get(self, "n8021x")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "qos_policy")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vlanPolicy")
    def vlan_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vlan_policy")

