# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerSnmpUserArgs', 'SwitchControllerSnmpUser']

@pulumi.input_type
class SwitchControllerSnmpUserArgs:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerSnmpUser resource.
        """
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query_port is not None:
            pulumi.set(__self__, "query_port", query_port)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_port")

    @query_port.setter
    def query_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_port", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchControllerSnmpUserState:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerSnmpUser resources.
        """
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query_port is not None:
            pulumi.set(__self__, "query_port", query_port)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_port")

    @query_port.setter
    def query_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_port", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchControllerSnmpUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerSnmpUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerSnmpUserArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerSnmpUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerSnmpUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerSnmpUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerSnmpUserArgs.__new__(SwitchControllerSnmpUserArgs)

            __props__.__dict__["auth_proto"] = auth_proto
            __props__.__dict__["auth_pwd"] = None if auth_pwd is None else pulumi.Output.secret(auth_pwd)
            __props__.__dict__["name"] = name
            __props__.__dict__["priv_proto"] = priv_proto
            __props__.__dict__["priv_pwd"] = None if priv_pwd is None else pulumi.Output.secret(priv_pwd)
            __props__.__dict__["queries"] = queries
            __props__.__dict__["query_port"] = query_port
            __props__.__dict__["security_level"] = security_level
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authPwd", "privPwd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SwitchControllerSnmpUser, __self__).__init__(
            'fortios:index/switchControllerSnmpUser:SwitchControllerSnmpUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_proto: Optional[pulumi.Input[str]] = None,
            auth_pwd: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            priv_proto: Optional[pulumi.Input[str]] = None,
            priv_pwd: Optional[pulumi.Input[str]] = None,
            queries: Optional[pulumi.Input[str]] = None,
            query_port: Optional[pulumi.Input[int]] = None,
            security_level: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerSnmpUser':
        """
        Get an existing SwitchControllerSnmpUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerSnmpUserState.__new__(_SwitchControllerSnmpUserState)

        __props__.__dict__["auth_proto"] = auth_proto
        __props__.__dict__["auth_pwd"] = auth_pwd
        __props__.__dict__["name"] = name
        __props__.__dict__["priv_proto"] = priv_proto
        __props__.__dict__["priv_pwd"] = priv_pwd
        __props__.__dict__["queries"] = queries
        __props__.__dict__["query_port"] = query_port
        __props__.__dict__["security_level"] = security_level
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchControllerSnmpUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_proto")

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "auth_pwd")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priv_proto")

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "priv_pwd")

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Output[str]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "query_port")

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_level")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

