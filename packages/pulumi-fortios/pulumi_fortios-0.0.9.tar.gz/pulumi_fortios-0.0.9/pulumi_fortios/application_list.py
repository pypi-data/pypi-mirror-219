# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationListArgs', 'ApplicationList']

@pulumi.input_type
class ApplicationListArgs:
    def __init__(__self__, *,
                 app_replacemsg: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_default_network_services: Optional[pulumi.Input[str]] = None,
                 deep_app_inspection: Optional[pulumi.Input[str]] = None,
                 default_network_services: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListDefaultNetworkServiceArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enforce_default_app_port: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryArgs']]]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 force_inclusion_ssl_di_sigs: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_application_action: Optional[pulumi.Input[str]] = None,
                 other_application_log: Optional[pulumi.Input[str]] = None,
                 p2p_black_list: Optional[pulumi.Input[str]] = None,
                 p2p_block_list: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 unknown_application_action: Optional[pulumi.Input[str]] = None,
                 unknown_application_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ApplicationList resource.
        """
        if app_replacemsg is not None:
            pulumi.set(__self__, "app_replacemsg", app_replacemsg)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if control_default_network_services is not None:
            pulumi.set(__self__, "control_default_network_services", control_default_network_services)
        if deep_app_inspection is not None:
            pulumi.set(__self__, "deep_app_inspection", deep_app_inspection)
        if default_network_services is not None:
            pulumi.set(__self__, "default_network_services", default_network_services)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if enforce_default_app_port is not None:
            pulumi.set(__self__, "enforce_default_app_port", enforce_default_app_port)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if force_inclusion_ssl_di_sigs is not None:
            pulumi.set(__self__, "force_inclusion_ssl_di_sigs", force_inclusion_ssl_di_sigs)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if other_application_action is not None:
            pulumi.set(__self__, "other_application_action", other_application_action)
        if other_application_log is not None:
            pulumi.set(__self__, "other_application_log", other_application_log)
        if p2p_black_list is not None:
            pulumi.set(__self__, "p2p_black_list", p2p_black_list)
        if p2p_block_list is not None:
            pulumi.set(__self__, "p2p_block_list", p2p_block_list)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if unknown_application_action is not None:
            pulumi.set(__self__, "unknown_application_action", unknown_application_action)
        if unknown_application_log is not None:
            pulumi.set(__self__, "unknown_application_log", unknown_application_log)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="appReplacemsg")
    def app_replacemsg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_replacemsg")

    @app_replacemsg.setter
    def app_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_replacemsg", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="controlDefaultNetworkServices")
    def control_default_network_services(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "control_default_network_services")

    @control_default_network_services.setter
    def control_default_network_services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_default_network_services", value)

    @property
    @pulumi.getter(name="deepAppInspection")
    def deep_app_inspection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deep_app_inspection")

    @deep_app_inspection.setter
    def deep_app_inspection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deep_app_inspection", value)

    @property
    @pulumi.getter(name="defaultNetworkServices")
    def default_network_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListDefaultNetworkServiceArgs']]]]:
        return pulumi.get(self, "default_network_services")

    @default_network_services.setter
    def default_network_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListDefaultNetworkServiceArgs']]]]):
        pulumi.set(self, "default_network_services", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="enforceDefaultAppPort")
    def enforce_default_app_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enforce_default_app_port")

    @enforce_default_app_port.setter
    def enforce_default_app_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_default_app_port", value)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryArgs']]]]:
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="forceInclusionSslDiSigs")
    def force_inclusion_ssl_di_sigs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "force_inclusion_ssl_di_sigs")

    @force_inclusion_ssl_di_sigs.setter
    def force_inclusion_ssl_di_sigs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_inclusion_ssl_di_sigs", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="otherApplicationAction")
    def other_application_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "other_application_action")

    @other_application_action.setter
    def other_application_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other_application_action", value)

    @property
    @pulumi.getter(name="otherApplicationLog")
    def other_application_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "other_application_log")

    @other_application_log.setter
    def other_application_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other_application_log", value)

    @property
    @pulumi.getter(name="p2pBlackList")
    def p2p_black_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "p2p_black_list")

    @p2p_black_list.setter
    def p2p_black_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "p2p_black_list", value)

    @property
    @pulumi.getter(name="p2pBlockList")
    def p2p_block_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "p2p_block_list")

    @p2p_block_list.setter
    def p2p_block_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "p2p_block_list", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter(name="unknownApplicationAction")
    def unknown_application_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_application_action")

    @unknown_application_action.setter
    def unknown_application_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_application_action", value)

    @property
    @pulumi.getter(name="unknownApplicationLog")
    def unknown_application_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_application_log")

    @unknown_application_log.setter
    def unknown_application_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_application_log", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ApplicationListState:
    def __init__(__self__, *,
                 app_replacemsg: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_default_network_services: Optional[pulumi.Input[str]] = None,
                 deep_app_inspection: Optional[pulumi.Input[str]] = None,
                 default_network_services: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListDefaultNetworkServiceArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enforce_default_app_port: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryArgs']]]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 force_inclusion_ssl_di_sigs: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_application_action: Optional[pulumi.Input[str]] = None,
                 other_application_log: Optional[pulumi.Input[str]] = None,
                 p2p_black_list: Optional[pulumi.Input[str]] = None,
                 p2p_block_list: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 unknown_application_action: Optional[pulumi.Input[str]] = None,
                 unknown_application_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApplicationList resources.
        """
        if app_replacemsg is not None:
            pulumi.set(__self__, "app_replacemsg", app_replacemsg)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if control_default_network_services is not None:
            pulumi.set(__self__, "control_default_network_services", control_default_network_services)
        if deep_app_inspection is not None:
            pulumi.set(__self__, "deep_app_inspection", deep_app_inspection)
        if default_network_services is not None:
            pulumi.set(__self__, "default_network_services", default_network_services)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if enforce_default_app_port is not None:
            pulumi.set(__self__, "enforce_default_app_port", enforce_default_app_port)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if force_inclusion_ssl_di_sigs is not None:
            pulumi.set(__self__, "force_inclusion_ssl_di_sigs", force_inclusion_ssl_di_sigs)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if other_application_action is not None:
            pulumi.set(__self__, "other_application_action", other_application_action)
        if other_application_log is not None:
            pulumi.set(__self__, "other_application_log", other_application_log)
        if p2p_black_list is not None:
            pulumi.set(__self__, "p2p_black_list", p2p_black_list)
        if p2p_block_list is not None:
            pulumi.set(__self__, "p2p_block_list", p2p_block_list)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if unknown_application_action is not None:
            pulumi.set(__self__, "unknown_application_action", unknown_application_action)
        if unknown_application_log is not None:
            pulumi.set(__self__, "unknown_application_log", unknown_application_log)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="appReplacemsg")
    def app_replacemsg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_replacemsg")

    @app_replacemsg.setter
    def app_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_replacemsg", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="controlDefaultNetworkServices")
    def control_default_network_services(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "control_default_network_services")

    @control_default_network_services.setter
    def control_default_network_services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_default_network_services", value)

    @property
    @pulumi.getter(name="deepAppInspection")
    def deep_app_inspection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deep_app_inspection")

    @deep_app_inspection.setter
    def deep_app_inspection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deep_app_inspection", value)

    @property
    @pulumi.getter(name="defaultNetworkServices")
    def default_network_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListDefaultNetworkServiceArgs']]]]:
        return pulumi.get(self, "default_network_services")

    @default_network_services.setter
    def default_network_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListDefaultNetworkServiceArgs']]]]):
        pulumi.set(self, "default_network_services", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="enforceDefaultAppPort")
    def enforce_default_app_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enforce_default_app_port")

    @enforce_default_app_port.setter
    def enforce_default_app_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_default_app_port", value)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryArgs']]]]:
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="forceInclusionSslDiSigs")
    def force_inclusion_ssl_di_sigs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "force_inclusion_ssl_di_sigs")

    @force_inclusion_ssl_di_sigs.setter
    def force_inclusion_ssl_di_sigs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_inclusion_ssl_di_sigs", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="otherApplicationAction")
    def other_application_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "other_application_action")

    @other_application_action.setter
    def other_application_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other_application_action", value)

    @property
    @pulumi.getter(name="otherApplicationLog")
    def other_application_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "other_application_log")

    @other_application_log.setter
    def other_application_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other_application_log", value)

    @property
    @pulumi.getter(name="p2pBlackList")
    def p2p_black_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "p2p_black_list")

    @p2p_black_list.setter
    def p2p_black_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "p2p_black_list", value)

    @property
    @pulumi.getter(name="p2pBlockList")
    def p2p_block_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "p2p_block_list")

    @p2p_block_list.setter
    def p2p_block_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "p2p_block_list", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter(name="unknownApplicationAction")
    def unknown_application_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_application_action")

    @unknown_application_action.setter
    def unknown_application_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_application_action", value)

    @property
    @pulumi.getter(name="unknownApplicationLog")
    def unknown_application_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_application_log")

    @unknown_application_log.setter
    def unknown_application_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_application_log", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class ApplicationList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_replacemsg: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_default_network_services: Optional[pulumi.Input[str]] = None,
                 deep_app_inspection: Optional[pulumi.Input[str]] = None,
                 default_network_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationListDefaultNetworkServiceArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enforce_default_app_port: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationListEntryArgs']]]]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 force_inclusion_ssl_di_sigs: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_application_action: Optional[pulumi.Input[str]] = None,
                 other_application_log: Optional[pulumi.Input[str]] = None,
                 p2p_black_list: Optional[pulumi.Input[str]] = None,
                 p2p_block_list: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 unknown_application_action: Optional[pulumi.Input[str]] = None,
                 unknown_application_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ApplicationList resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ApplicationListArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ApplicationList resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ApplicationListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_replacemsg: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_default_network_services: Optional[pulumi.Input[str]] = None,
                 deep_app_inspection: Optional[pulumi.Input[str]] = None,
                 default_network_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationListDefaultNetworkServiceArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enforce_default_app_port: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationListEntryArgs']]]]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 force_inclusion_ssl_di_sigs: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_application_action: Optional[pulumi.Input[str]] = None,
                 other_application_log: Optional[pulumi.Input[str]] = None,
                 p2p_black_list: Optional[pulumi.Input[str]] = None,
                 p2p_block_list: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 unknown_application_action: Optional[pulumi.Input[str]] = None,
                 unknown_application_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationListArgs.__new__(ApplicationListArgs)

            __props__.__dict__["app_replacemsg"] = app_replacemsg
            __props__.__dict__["comment"] = comment
            __props__.__dict__["control_default_network_services"] = control_default_network_services
            __props__.__dict__["deep_app_inspection"] = deep_app_inspection
            __props__.__dict__["default_network_services"] = default_network_services
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["enforce_default_app_port"] = enforce_default_app_port
            __props__.__dict__["entries"] = entries
            __props__.__dict__["extended_log"] = extended_log
            __props__.__dict__["force_inclusion_ssl_di_sigs"] = force_inclusion_ssl_di_sigs
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["name"] = name
            __props__.__dict__["options"] = options
            __props__.__dict__["other_application_action"] = other_application_action
            __props__.__dict__["other_application_log"] = other_application_log
            __props__.__dict__["p2p_black_list"] = p2p_black_list
            __props__.__dict__["p2p_block_list"] = p2p_block_list
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["unknown_application_action"] = unknown_application_action
            __props__.__dict__["unknown_application_log"] = unknown_application_log
            __props__.__dict__["vdomparam"] = vdomparam
        super(ApplicationList, __self__).__init__(
            'fortios:index/applicationList:ApplicationList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_replacemsg: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            control_default_network_services: Optional[pulumi.Input[str]] = None,
            deep_app_inspection: Optional[pulumi.Input[str]] = None,
            default_network_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationListDefaultNetworkServiceArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            enforce_default_app_port: Optional[pulumi.Input[str]] = None,
            entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationListEntryArgs']]]]] = None,
            extended_log: Optional[pulumi.Input[str]] = None,
            force_inclusion_ssl_di_sigs: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[str]] = None,
            other_application_action: Optional[pulumi.Input[str]] = None,
            other_application_log: Optional[pulumi.Input[str]] = None,
            p2p_black_list: Optional[pulumi.Input[str]] = None,
            p2p_block_list: Optional[pulumi.Input[str]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            unknown_application_action: Optional[pulumi.Input[str]] = None,
            unknown_application_log: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'ApplicationList':
        """
        Get an existing ApplicationList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationListState.__new__(_ApplicationListState)

        __props__.__dict__["app_replacemsg"] = app_replacemsg
        __props__.__dict__["comment"] = comment
        __props__.__dict__["control_default_network_services"] = control_default_network_services
        __props__.__dict__["deep_app_inspection"] = deep_app_inspection
        __props__.__dict__["default_network_services"] = default_network_services
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["enforce_default_app_port"] = enforce_default_app_port
        __props__.__dict__["entries"] = entries
        __props__.__dict__["extended_log"] = extended_log
        __props__.__dict__["force_inclusion_ssl_di_sigs"] = force_inclusion_ssl_di_sigs
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["other_application_action"] = other_application_action
        __props__.__dict__["other_application_log"] = other_application_log
        __props__.__dict__["p2p_black_list"] = p2p_black_list
        __props__.__dict__["p2p_block_list"] = p2p_block_list
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["unknown_application_action"] = unknown_application_action
        __props__.__dict__["unknown_application_log"] = unknown_application_log
        __props__.__dict__["vdomparam"] = vdomparam
        return ApplicationList(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appReplacemsg")
    def app_replacemsg(self) -> pulumi.Output[str]:
        return pulumi.get(self, "app_replacemsg")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="controlDefaultNetworkServices")
    def control_default_network_services(self) -> pulumi.Output[str]:
        return pulumi.get(self, "control_default_network_services")

    @property
    @pulumi.getter(name="deepAppInspection")
    def deep_app_inspection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "deep_app_inspection")

    @property
    @pulumi.getter(name="defaultNetworkServices")
    def default_network_services(self) -> pulumi.Output[Optional[Sequence['outputs.ApplicationListDefaultNetworkService']]]:
        return pulumi.get(self, "default_network_services")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="enforceDefaultAppPort")
    def enforce_default_app_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "enforce_default_app_port")

    @property
    @pulumi.getter
    def entries(self) -> pulumi.Output[Optional[Sequence['outputs.ApplicationListEntry']]]:
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extended_log")

    @property
    @pulumi.getter(name="forceInclusionSslDiSigs")
    def force_inclusion_ssl_di_sigs(self) -> pulumi.Output[str]:
        return pulumi.get(self, "force_inclusion_ssl_di_sigs")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="otherApplicationAction")
    def other_application_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "other_application_action")

    @property
    @pulumi.getter(name="otherApplicationLog")
    def other_application_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "other_application_log")

    @property
    @pulumi.getter(name="p2pBlackList")
    def p2p_black_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "p2p_black_list")

    @property
    @pulumi.getter(name="p2pBlockList")
    def p2p_block_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "p2p_block_list")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter(name="unknownApplicationAction")
    def unknown_application_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "unknown_application_action")

    @property
    @pulumi.getter(name="unknownApplicationLog")
    def unknown_application_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "unknown_application_log")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

