# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpnSslWebRealmArgs', 'VpnSslWebRealm']

@pulumi.input_type
class VpnSslWebRealmArgs:
    def __init__(__self__, *,
                 login_page: Optional[pulumi.Input[str]] = None,
                 max_concurrent_user: Optional[pulumi.Input[int]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 url_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None,
                 virtual_host_only: Optional[pulumi.Input[str]] = None,
                 virtual_host_server_cert: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpnSslWebRealm resource.
        """
        if login_page is not None:
            pulumi.set(__self__, "login_page", login_page)
        if max_concurrent_user is not None:
            pulumi.set(__self__, "max_concurrent_user", max_concurrent_user)
        if nas_ip is not None:
            pulumi.set(__self__, "nas_ip", nas_ip)
        if radius_port is not None:
            pulumi.set(__self__, "radius_port", radius_port)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)
        if virtual_host_only is not None:
            pulumi.set(__self__, "virtual_host_only", virtual_host_only)
        if virtual_host_server_cert is not None:
            pulumi.set(__self__, "virtual_host_server_cert", virtual_host_server_cert)

    @property
    @pulumi.getter(name="loginPage")
    def login_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_page")

    @login_page.setter
    def login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_page", value)

    @property
    @pulumi.getter(name="maxConcurrentUser")
    def max_concurrent_user(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_user")

    @max_concurrent_user.setter
    def max_concurrent_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_user", value)

    @property
    @pulumi.getter(name="nasIp")
    def nas_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nas_ip")

    @nas_ip.setter
    def nas_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nas_ip", value)

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radius_port")

    @radius_port.setter
    def radius_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_port", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_path")

    @url_path.setter
    def url_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_path", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)

    @property
    @pulumi.getter(name="virtualHostOnly")
    def virtual_host_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host_only")

    @virtual_host_only.setter
    def virtual_host_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host_only", value)

    @property
    @pulumi.getter(name="virtualHostServerCert")
    def virtual_host_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host_server_cert")

    @virtual_host_server_cert.setter
    def virtual_host_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host_server_cert", value)


@pulumi.input_type
class _VpnSslWebRealmState:
    def __init__(__self__, *,
                 login_page: Optional[pulumi.Input[str]] = None,
                 max_concurrent_user: Optional[pulumi.Input[int]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 url_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None,
                 virtual_host_only: Optional[pulumi.Input[str]] = None,
                 virtual_host_server_cert: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpnSslWebRealm resources.
        """
        if login_page is not None:
            pulumi.set(__self__, "login_page", login_page)
        if max_concurrent_user is not None:
            pulumi.set(__self__, "max_concurrent_user", max_concurrent_user)
        if nas_ip is not None:
            pulumi.set(__self__, "nas_ip", nas_ip)
        if radius_port is not None:
            pulumi.set(__self__, "radius_port", radius_port)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)
        if virtual_host_only is not None:
            pulumi.set(__self__, "virtual_host_only", virtual_host_only)
        if virtual_host_server_cert is not None:
            pulumi.set(__self__, "virtual_host_server_cert", virtual_host_server_cert)

    @property
    @pulumi.getter(name="loginPage")
    def login_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_page")

    @login_page.setter
    def login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_page", value)

    @property
    @pulumi.getter(name="maxConcurrentUser")
    def max_concurrent_user(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_user")

    @max_concurrent_user.setter
    def max_concurrent_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_user", value)

    @property
    @pulumi.getter(name="nasIp")
    def nas_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nas_ip")

    @nas_ip.setter
    def nas_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nas_ip", value)

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radius_port")

    @radius_port.setter
    def radius_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_port", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_path")

    @url_path.setter
    def url_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_path", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)

    @property
    @pulumi.getter(name="virtualHostOnly")
    def virtual_host_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host_only")

    @virtual_host_only.setter
    def virtual_host_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host_only", value)

    @property
    @pulumi.getter(name="virtualHostServerCert")
    def virtual_host_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host_server_cert")

    @virtual_host_server_cert.setter
    def virtual_host_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host_server_cert", value)


class VpnSslWebRealm(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 login_page: Optional[pulumi.Input[str]] = None,
                 max_concurrent_user: Optional[pulumi.Input[int]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 url_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None,
                 virtual_host_only: Optional[pulumi.Input[str]] = None,
                 virtual_host_server_cert: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VpnSslWebRealm resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VpnSslWebRealmArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpnSslWebRealm resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpnSslWebRealmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnSslWebRealmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 login_page: Optional[pulumi.Input[str]] = None,
                 max_concurrent_user: Optional[pulumi.Input[int]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 url_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None,
                 virtual_host_only: Optional[pulumi.Input[str]] = None,
                 virtual_host_server_cert: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnSslWebRealmArgs.__new__(VpnSslWebRealmArgs)

            __props__.__dict__["login_page"] = login_page
            __props__.__dict__["max_concurrent_user"] = max_concurrent_user
            __props__.__dict__["nas_ip"] = nas_ip
            __props__.__dict__["radius_port"] = radius_port
            __props__.__dict__["radius_server"] = radius_server
            __props__.__dict__["url_path"] = url_path
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["virtual_host"] = virtual_host
            __props__.__dict__["virtual_host_only"] = virtual_host_only
            __props__.__dict__["virtual_host_server_cert"] = virtual_host_server_cert
        super(VpnSslWebRealm, __self__).__init__(
            'fortios:index/vpnSslWebRealm:VpnSslWebRealm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            login_page: Optional[pulumi.Input[str]] = None,
            max_concurrent_user: Optional[pulumi.Input[int]] = None,
            nas_ip: Optional[pulumi.Input[str]] = None,
            radius_port: Optional[pulumi.Input[int]] = None,
            radius_server: Optional[pulumi.Input[str]] = None,
            url_path: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            virtual_host: Optional[pulumi.Input[str]] = None,
            virtual_host_only: Optional[pulumi.Input[str]] = None,
            virtual_host_server_cert: Optional[pulumi.Input[str]] = None) -> 'VpnSslWebRealm':
        """
        Get an existing VpnSslWebRealm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnSslWebRealmState.__new__(_VpnSslWebRealmState)

        __props__.__dict__["login_page"] = login_page
        __props__.__dict__["max_concurrent_user"] = max_concurrent_user
        __props__.__dict__["nas_ip"] = nas_ip
        __props__.__dict__["radius_port"] = radius_port
        __props__.__dict__["radius_server"] = radius_server
        __props__.__dict__["url_path"] = url_path
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["virtual_host"] = virtual_host
        __props__.__dict__["virtual_host_only"] = virtual_host_only
        __props__.__dict__["virtual_host_server_cert"] = virtual_host_server_cert
        return VpnSslWebRealm(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="loginPage")
    def login_page(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "login_page")

    @property
    @pulumi.getter(name="maxConcurrentUser")
    def max_concurrent_user(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_concurrent_user")

    @property
    @pulumi.getter(name="nasIp")
    def nas_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nas_ip")

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "radius_port")

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radius_server")

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url_path")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "virtual_host")

    @property
    @pulumi.getter(name="virtualHostOnly")
    def virtual_host_only(self) -> pulumi.Output[str]:
        return pulumi.get(self, "virtual_host_only")

    @property
    @pulumi.getter(name="virtualHostServerCert")
    def virtual_host_server_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "virtual_host_server_cert")

