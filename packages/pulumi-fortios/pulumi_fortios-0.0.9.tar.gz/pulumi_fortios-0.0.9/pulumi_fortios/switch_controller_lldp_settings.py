# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerLldpSettingsArgs', 'SwitchControllerLldpSettings']

@pulumi.input_type
class SwitchControllerLldpSettingsArgs:
    def __init__(__self__, *,
                 device_detection: Optional[pulumi.Input[str]] = None,
                 fast_start_interval: Optional[pulumi.Input[int]] = None,
                 management_interface: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tx_hold: Optional[pulumi.Input[int]] = None,
                 tx_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerLldpSettings resource.
        """
        if device_detection is not None:
            pulumi.set(__self__, "device_detection", device_detection)
        if fast_start_interval is not None:
            pulumi.set(__self__, "fast_start_interval", fast_start_interval)
        if management_interface is not None:
            pulumi.set(__self__, "management_interface", management_interface)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tx_hold is not None:
            pulumi.set(__self__, "tx_hold", tx_hold)
        if tx_interval is not None:
            pulumi.set(__self__, "tx_interval", tx_interval)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="deviceDetection")
    def device_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_detection")

    @device_detection.setter
    def device_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_detection", value)

    @property
    @pulumi.getter(name="fastStartInterval")
    def fast_start_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fast_start_interval")

    @fast_start_interval.setter
    def fast_start_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fast_start_interval", value)

    @property
    @pulumi.getter(name="managementInterface")
    def management_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_interface")

    @management_interface.setter
    def management_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_interface", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="txHold")
    def tx_hold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tx_hold")

    @tx_hold.setter
    def tx_hold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tx_hold", value)

    @property
    @pulumi.getter(name="txInterval")
    def tx_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tx_interval")

    @tx_interval.setter
    def tx_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tx_interval", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchControllerLldpSettingsState:
    def __init__(__self__, *,
                 device_detection: Optional[pulumi.Input[str]] = None,
                 fast_start_interval: Optional[pulumi.Input[int]] = None,
                 management_interface: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tx_hold: Optional[pulumi.Input[int]] = None,
                 tx_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerLldpSettings resources.
        """
        if device_detection is not None:
            pulumi.set(__self__, "device_detection", device_detection)
        if fast_start_interval is not None:
            pulumi.set(__self__, "fast_start_interval", fast_start_interval)
        if management_interface is not None:
            pulumi.set(__self__, "management_interface", management_interface)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tx_hold is not None:
            pulumi.set(__self__, "tx_hold", tx_hold)
        if tx_interval is not None:
            pulumi.set(__self__, "tx_interval", tx_interval)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="deviceDetection")
    def device_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_detection")

    @device_detection.setter
    def device_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_detection", value)

    @property
    @pulumi.getter(name="fastStartInterval")
    def fast_start_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fast_start_interval")

    @fast_start_interval.setter
    def fast_start_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fast_start_interval", value)

    @property
    @pulumi.getter(name="managementInterface")
    def management_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_interface")

    @management_interface.setter
    def management_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_interface", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="txHold")
    def tx_hold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tx_hold")

    @tx_hold.setter
    def tx_hold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tx_hold", value)

    @property
    @pulumi.getter(name="txInterval")
    def tx_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tx_interval")

    @tx_interval.setter
    def tx_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tx_interval", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchControllerLldpSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_detection: Optional[pulumi.Input[str]] = None,
                 fast_start_interval: Optional[pulumi.Input[int]] = None,
                 management_interface: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tx_hold: Optional[pulumi.Input[int]] = None,
                 tx_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerLldpSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerLldpSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerLldpSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerLldpSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerLldpSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_detection: Optional[pulumi.Input[str]] = None,
                 fast_start_interval: Optional[pulumi.Input[int]] = None,
                 management_interface: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tx_hold: Optional[pulumi.Input[int]] = None,
                 tx_interval: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerLldpSettingsArgs.__new__(SwitchControllerLldpSettingsArgs)

            __props__.__dict__["device_detection"] = device_detection
            __props__.__dict__["fast_start_interval"] = fast_start_interval
            __props__.__dict__["management_interface"] = management_interface
            __props__.__dict__["status"] = status
            __props__.__dict__["tx_hold"] = tx_hold
            __props__.__dict__["tx_interval"] = tx_interval
            __props__.__dict__["vdomparam"] = vdomparam
        super(SwitchControllerLldpSettings, __self__).__init__(
            'fortios:index/switchControllerLldpSettings:SwitchControllerLldpSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device_detection: Optional[pulumi.Input[str]] = None,
            fast_start_interval: Optional[pulumi.Input[int]] = None,
            management_interface: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tx_hold: Optional[pulumi.Input[int]] = None,
            tx_interval: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerLldpSettings':
        """
        Get an existing SwitchControllerLldpSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerLldpSettingsState.__new__(_SwitchControllerLldpSettingsState)

        __props__.__dict__["device_detection"] = device_detection
        __props__.__dict__["fast_start_interval"] = fast_start_interval
        __props__.__dict__["management_interface"] = management_interface
        __props__.__dict__["status"] = status
        __props__.__dict__["tx_hold"] = tx_hold
        __props__.__dict__["tx_interval"] = tx_interval
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchControllerLldpSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deviceDetection")
    def device_detection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "device_detection")

    @property
    @pulumi.getter(name="fastStartInterval")
    def fast_start_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fast_start_interval")

    @property
    @pulumi.getter(name="managementInterface")
    def management_interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "management_interface")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="txHold")
    def tx_hold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tx_hold")

    @property
    @pulumi.getter(name="txInterval")
    def tx_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tx_interval")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

