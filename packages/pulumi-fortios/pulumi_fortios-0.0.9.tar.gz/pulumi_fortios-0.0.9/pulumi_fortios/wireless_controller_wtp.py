# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WirelessControllerWtpArgs', 'WirelessControllerWtp']

@pulumi.input_type
class WirelessControllerWtpArgs:
    def __init__(__self__, *,
                 wtp_profile: pulumi.Input[str],
                 admin: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 apcfg_profile: Optional[pulumi.Input[str]] = None,
                 bonjour_profile: Optional[pulumi.Input[str]] = None,
                 coordinate_latitude: Optional[pulumi.Input[str]] = None,
                 coordinate_longitude: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 image_download: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 ip_fragment_preventing: Optional[pulumi.Input[str]] = None,
                 lan: Optional[pulumi.Input['WirelessControllerWtpLanArgs']] = None,
                 led_state: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_change: Optional[pulumi.Input[str]] = None,
                 mesh_bridge_enable: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_allowaccess: Optional[pulumi.Input[str]] = None,
                 override_ip_fragment: Optional[pulumi.Input[str]] = None,
                 override_lan: Optional[pulumi.Input[str]] = None,
                 override_led_state: Optional[pulumi.Input[str]] = None,
                 override_login_passwd_change: Optional[pulumi.Input[str]] = None,
                 override_split_tunnel: Optional[pulumi.Input[str]] = None,
                 override_wan_port_mode: Optional[pulumi.Input[str]] = None,
                 radio1: Optional[pulumi.Input['WirelessControllerWtpRadio1Args']] = None,
                 radio2: Optional[pulumi.Input['WirelessControllerWtpRadio2Args']] = None,
                 radio3: Optional[pulumi.Input['WirelessControllerWtpRadio3Args']] = None,
                 radio4: Optional[pulumi.Input['WirelessControllerWtpRadio4Args']] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 region_x: Optional[pulumi.Input[str]] = None,
                 region_y: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_local_ap_subnet: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_path: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acls: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpSplitTunnelingAclArgs']]]] = None,
                 tun_mtu_downlink: Optional[pulumi.Input[int]] = None,
                 tun_mtu_uplink: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_port_mode: Optional[pulumi.Input[str]] = None,
                 wtp_id: Optional[pulumi.Input[str]] = None,
                 wtp_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WirelessControllerWtp resource.
        """
        pulumi.set(__self__, "wtp_profile", wtp_profile)
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if apcfg_profile is not None:
            pulumi.set(__self__, "apcfg_profile", apcfg_profile)
        if bonjour_profile is not None:
            pulumi.set(__self__, "bonjour_profile", bonjour_profile)
        if coordinate_latitude is not None:
            pulumi.set(__self__, "coordinate_latitude", coordinate_latitude)
        if coordinate_longitude is not None:
            pulumi.set(__self__, "coordinate_longitude", coordinate_longitude)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if firmware_provision is not None:
            pulumi.set(__self__, "firmware_provision", firmware_provision)
        if firmware_provision_latest is not None:
            pulumi.set(__self__, "firmware_provision_latest", firmware_provision_latest)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if image_download is not None:
            pulumi.set(__self__, "image_download", image_download)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if ip_fragment_preventing is not None:
            pulumi.set(__self__, "ip_fragment_preventing", ip_fragment_preventing)
        if lan is not None:
            pulumi.set(__self__, "lan", lan)
        if led_state is not None:
            pulumi.set(__self__, "led_state", led_state)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if login_passwd is not None:
            pulumi.set(__self__, "login_passwd", login_passwd)
        if login_passwd_change is not None:
            pulumi.set(__self__, "login_passwd_change", login_passwd_change)
        if mesh_bridge_enable is not None:
            pulumi.set(__self__, "mesh_bridge_enable", mesh_bridge_enable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_allowaccess is not None:
            pulumi.set(__self__, "override_allowaccess", override_allowaccess)
        if override_ip_fragment is not None:
            pulumi.set(__self__, "override_ip_fragment", override_ip_fragment)
        if override_lan is not None:
            pulumi.set(__self__, "override_lan", override_lan)
        if override_led_state is not None:
            pulumi.set(__self__, "override_led_state", override_led_state)
        if override_login_passwd_change is not None:
            pulumi.set(__self__, "override_login_passwd_change", override_login_passwd_change)
        if override_split_tunnel is not None:
            pulumi.set(__self__, "override_split_tunnel", override_split_tunnel)
        if override_wan_port_mode is not None:
            pulumi.set(__self__, "override_wan_port_mode", override_wan_port_mode)
        if radio1 is not None:
            pulumi.set(__self__, "radio1", radio1)
        if radio2 is not None:
            pulumi.set(__self__, "radio2", radio2)
        if radio3 is not None:
            pulumi.set(__self__, "radio3", radio3)
        if radio4 is not None:
            pulumi.set(__self__, "radio4", radio4)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if region_x is not None:
            pulumi.set(__self__, "region_x", region_x)
        if region_y is not None:
            pulumi.set(__self__, "region_y", region_y)
        if split_tunneling_acl_local_ap_subnet is not None:
            pulumi.set(__self__, "split_tunneling_acl_local_ap_subnet", split_tunneling_acl_local_ap_subnet)
        if split_tunneling_acl_path is not None:
            pulumi.set(__self__, "split_tunneling_acl_path", split_tunneling_acl_path)
        if split_tunneling_acls is not None:
            pulumi.set(__self__, "split_tunneling_acls", split_tunneling_acls)
        if tun_mtu_downlink is not None:
            pulumi.set(__self__, "tun_mtu_downlink", tun_mtu_downlink)
        if tun_mtu_uplink is not None:
            pulumi.set(__self__, "tun_mtu_uplink", tun_mtu_uplink)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wan_port_mode is not None:
            pulumi.set(__self__, "wan_port_mode", wan_port_mode)
        if wtp_id is not None:
            pulumi.set(__self__, "wtp_id", wtp_id)
        if wtp_mode is not None:
            pulumi.set(__self__, "wtp_mode", wtp_mode)

    @property
    @pulumi.getter(name="wtpProfile")
    def wtp_profile(self) -> pulumi.Input[str]:
        return pulumi.get(self, "wtp_profile")

    @wtp_profile.setter
    def wtp_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "wtp_profile", value)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="apcfgProfile")
    def apcfg_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apcfg_profile")

    @apcfg_profile.setter
    def apcfg_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apcfg_profile", value)

    @property
    @pulumi.getter(name="bonjourProfile")
    def bonjour_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bonjour_profile")

    @bonjour_profile.setter
    def bonjour_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bonjour_profile", value)

    @property
    @pulumi.getter(name="coordinateLatitude")
    def coordinate_latitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_latitude")

    @coordinate_latitude.setter
    def coordinate_latitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_latitude", value)

    @property
    @pulumi.getter(name="coordinateLongitude")
    def coordinate_longitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_longitude")

    @coordinate_longitude.setter
    def coordinate_longitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_longitude", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="firmwareProvision")
    def firmware_provision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision")

    @firmware_provision.setter
    def firmware_provision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision", value)

    @property
    @pulumi.getter(name="firmwareProvisionLatest")
    def firmware_provision_latest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision_latest")

    @firmware_provision_latest.setter
    def firmware_provision_latest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_latest", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="imageDownload")
    def image_download(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_download")

    @image_download.setter
    def image_download(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_download", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="ipFragmentPreventing")
    def ip_fragment_preventing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_fragment_preventing")

    @ip_fragment_preventing.setter
    def ip_fragment_preventing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_fragment_preventing", value)

    @property
    @pulumi.getter
    def lan(self) -> Optional[pulumi.Input['WirelessControllerWtpLanArgs']]:
        return pulumi.get(self, "lan")

    @lan.setter
    def lan(self, value: Optional[pulumi.Input['WirelessControllerWtpLanArgs']]):
        pulumi.set(self, "lan", value)

    @property
    @pulumi.getter(name="ledState")
    def led_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "led_state")

    @led_state.setter
    def led_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "led_state", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="loginPasswd")
    def login_passwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd")

    @login_passwd.setter
    def login_passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd", value)

    @property
    @pulumi.getter(name="loginPasswdChange")
    def login_passwd_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd_change")

    @login_passwd_change.setter
    def login_passwd_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd_change", value)

    @property
    @pulumi.getter(name="meshBridgeEnable")
    def mesh_bridge_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mesh_bridge_enable")

    @mesh_bridge_enable.setter
    def mesh_bridge_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_bridge_enable", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideAllowaccess")
    def override_allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_allowaccess")

    @override_allowaccess.setter
    def override_allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_allowaccess", value)

    @property
    @pulumi.getter(name="overrideIpFragment")
    def override_ip_fragment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_ip_fragment")

    @override_ip_fragment.setter
    def override_ip_fragment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_ip_fragment", value)

    @property
    @pulumi.getter(name="overrideLan")
    def override_lan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_lan")

    @override_lan.setter
    def override_lan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_lan", value)

    @property
    @pulumi.getter(name="overrideLedState")
    def override_led_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_led_state")

    @override_led_state.setter
    def override_led_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_led_state", value)

    @property
    @pulumi.getter(name="overrideLoginPasswdChange")
    def override_login_passwd_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_login_passwd_change")

    @override_login_passwd_change.setter
    def override_login_passwd_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_login_passwd_change", value)

    @property
    @pulumi.getter(name="overrideSplitTunnel")
    def override_split_tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_split_tunnel")

    @override_split_tunnel.setter
    def override_split_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_split_tunnel", value)

    @property
    @pulumi.getter(name="overrideWanPortMode")
    def override_wan_port_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_wan_port_mode")

    @override_wan_port_mode.setter
    def override_wan_port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_wan_port_mode", value)

    @property
    @pulumi.getter
    def radio1(self) -> Optional[pulumi.Input['WirelessControllerWtpRadio1Args']]:
        return pulumi.get(self, "radio1")

    @radio1.setter
    def radio1(self, value: Optional[pulumi.Input['WirelessControllerWtpRadio1Args']]):
        pulumi.set(self, "radio1", value)

    @property
    @pulumi.getter
    def radio2(self) -> Optional[pulumi.Input['WirelessControllerWtpRadio2Args']]:
        return pulumi.get(self, "radio2")

    @radio2.setter
    def radio2(self, value: Optional[pulumi.Input['WirelessControllerWtpRadio2Args']]):
        pulumi.set(self, "radio2", value)

    @property
    @pulumi.getter
    def radio3(self) -> Optional[pulumi.Input['WirelessControllerWtpRadio3Args']]:
        return pulumi.get(self, "radio3")

    @radio3.setter
    def radio3(self, value: Optional[pulumi.Input['WirelessControllerWtpRadio3Args']]):
        pulumi.set(self, "radio3", value)

    @property
    @pulumi.getter
    def radio4(self) -> Optional[pulumi.Input['WirelessControllerWtpRadio4Args']]:
        return pulumi.get(self, "radio4")

    @radio4.setter
    def radio4(self, value: Optional[pulumi.Input['WirelessControllerWtpRadio4Args']]):
        pulumi.set(self, "radio4", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="regionX")
    def region_x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region_x")

    @region_x.setter
    def region_x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_x", value)

    @property
    @pulumi.getter(name="regionY")
    def region_y(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region_y")

    @region_y.setter
    def region_y(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_y", value)

    @property
    @pulumi.getter(name="splitTunnelingAclLocalApSubnet")
    def split_tunneling_acl_local_ap_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling_acl_local_ap_subnet")

    @split_tunneling_acl_local_ap_subnet.setter
    def split_tunneling_acl_local_ap_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling_acl_local_ap_subnet", value)

    @property
    @pulumi.getter(name="splitTunnelingAclPath")
    def split_tunneling_acl_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling_acl_path")

    @split_tunneling_acl_path.setter
    def split_tunneling_acl_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling_acl_path", value)

    @property
    @pulumi.getter(name="splitTunnelingAcls")
    def split_tunneling_acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpSplitTunnelingAclArgs']]]]:
        return pulumi.get(self, "split_tunneling_acls")

    @split_tunneling_acls.setter
    def split_tunneling_acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpSplitTunnelingAclArgs']]]]):
        pulumi.set(self, "split_tunneling_acls", value)

    @property
    @pulumi.getter(name="tunMtuDownlink")
    def tun_mtu_downlink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tun_mtu_downlink")

    @tun_mtu_downlink.setter
    def tun_mtu_downlink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tun_mtu_downlink", value)

    @property
    @pulumi.getter(name="tunMtuUplink")
    def tun_mtu_uplink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tun_mtu_uplink")

    @tun_mtu_uplink.setter
    def tun_mtu_uplink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tun_mtu_uplink", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wanPortMode")
    def wan_port_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_mode")

    @wan_port_mode.setter
    def wan_port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_mode", value)

    @property
    @pulumi.getter(name="wtpId")
    def wtp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wtp_id")

    @wtp_id.setter
    def wtp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_id", value)

    @property
    @pulumi.getter(name="wtpMode")
    def wtp_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wtp_mode")

    @wtp_mode.setter
    def wtp_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_mode", value)


@pulumi.input_type
class _WirelessControllerWtpState:
    def __init__(__self__, *,
                 admin: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 apcfg_profile: Optional[pulumi.Input[str]] = None,
                 bonjour_profile: Optional[pulumi.Input[str]] = None,
                 coordinate_latitude: Optional[pulumi.Input[str]] = None,
                 coordinate_longitude: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 image_download: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 ip_fragment_preventing: Optional[pulumi.Input[str]] = None,
                 lan: Optional[pulumi.Input['WirelessControllerWtpLanArgs']] = None,
                 led_state: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_change: Optional[pulumi.Input[str]] = None,
                 mesh_bridge_enable: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_allowaccess: Optional[pulumi.Input[str]] = None,
                 override_ip_fragment: Optional[pulumi.Input[str]] = None,
                 override_lan: Optional[pulumi.Input[str]] = None,
                 override_led_state: Optional[pulumi.Input[str]] = None,
                 override_login_passwd_change: Optional[pulumi.Input[str]] = None,
                 override_split_tunnel: Optional[pulumi.Input[str]] = None,
                 override_wan_port_mode: Optional[pulumi.Input[str]] = None,
                 radio1: Optional[pulumi.Input['WirelessControllerWtpRadio1Args']] = None,
                 radio2: Optional[pulumi.Input['WirelessControllerWtpRadio2Args']] = None,
                 radio3: Optional[pulumi.Input['WirelessControllerWtpRadio3Args']] = None,
                 radio4: Optional[pulumi.Input['WirelessControllerWtpRadio4Args']] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 region_x: Optional[pulumi.Input[str]] = None,
                 region_y: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_local_ap_subnet: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_path: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acls: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpSplitTunnelingAclArgs']]]] = None,
                 tun_mtu_downlink: Optional[pulumi.Input[int]] = None,
                 tun_mtu_uplink: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_port_mode: Optional[pulumi.Input[str]] = None,
                 wtp_id: Optional[pulumi.Input[str]] = None,
                 wtp_mode: Optional[pulumi.Input[str]] = None,
                 wtp_profile: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WirelessControllerWtp resources.
        """
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if apcfg_profile is not None:
            pulumi.set(__self__, "apcfg_profile", apcfg_profile)
        if bonjour_profile is not None:
            pulumi.set(__self__, "bonjour_profile", bonjour_profile)
        if coordinate_latitude is not None:
            pulumi.set(__self__, "coordinate_latitude", coordinate_latitude)
        if coordinate_longitude is not None:
            pulumi.set(__self__, "coordinate_longitude", coordinate_longitude)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if firmware_provision is not None:
            pulumi.set(__self__, "firmware_provision", firmware_provision)
        if firmware_provision_latest is not None:
            pulumi.set(__self__, "firmware_provision_latest", firmware_provision_latest)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if image_download is not None:
            pulumi.set(__self__, "image_download", image_download)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if ip_fragment_preventing is not None:
            pulumi.set(__self__, "ip_fragment_preventing", ip_fragment_preventing)
        if lan is not None:
            pulumi.set(__self__, "lan", lan)
        if led_state is not None:
            pulumi.set(__self__, "led_state", led_state)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if login_passwd is not None:
            pulumi.set(__self__, "login_passwd", login_passwd)
        if login_passwd_change is not None:
            pulumi.set(__self__, "login_passwd_change", login_passwd_change)
        if mesh_bridge_enable is not None:
            pulumi.set(__self__, "mesh_bridge_enable", mesh_bridge_enable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_allowaccess is not None:
            pulumi.set(__self__, "override_allowaccess", override_allowaccess)
        if override_ip_fragment is not None:
            pulumi.set(__self__, "override_ip_fragment", override_ip_fragment)
        if override_lan is not None:
            pulumi.set(__self__, "override_lan", override_lan)
        if override_led_state is not None:
            pulumi.set(__self__, "override_led_state", override_led_state)
        if override_login_passwd_change is not None:
            pulumi.set(__self__, "override_login_passwd_change", override_login_passwd_change)
        if override_split_tunnel is not None:
            pulumi.set(__self__, "override_split_tunnel", override_split_tunnel)
        if override_wan_port_mode is not None:
            pulumi.set(__self__, "override_wan_port_mode", override_wan_port_mode)
        if radio1 is not None:
            pulumi.set(__self__, "radio1", radio1)
        if radio2 is not None:
            pulumi.set(__self__, "radio2", radio2)
        if radio3 is not None:
            pulumi.set(__self__, "radio3", radio3)
        if radio4 is not None:
            pulumi.set(__self__, "radio4", radio4)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if region_x is not None:
            pulumi.set(__self__, "region_x", region_x)
        if region_y is not None:
            pulumi.set(__self__, "region_y", region_y)
        if split_tunneling_acl_local_ap_subnet is not None:
            pulumi.set(__self__, "split_tunneling_acl_local_ap_subnet", split_tunneling_acl_local_ap_subnet)
        if split_tunneling_acl_path is not None:
            pulumi.set(__self__, "split_tunneling_acl_path", split_tunneling_acl_path)
        if split_tunneling_acls is not None:
            pulumi.set(__self__, "split_tunneling_acls", split_tunneling_acls)
        if tun_mtu_downlink is not None:
            pulumi.set(__self__, "tun_mtu_downlink", tun_mtu_downlink)
        if tun_mtu_uplink is not None:
            pulumi.set(__self__, "tun_mtu_uplink", tun_mtu_uplink)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wan_port_mode is not None:
            pulumi.set(__self__, "wan_port_mode", wan_port_mode)
        if wtp_id is not None:
            pulumi.set(__self__, "wtp_id", wtp_id)
        if wtp_mode is not None:
            pulumi.set(__self__, "wtp_mode", wtp_mode)
        if wtp_profile is not None:
            pulumi.set(__self__, "wtp_profile", wtp_profile)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="apcfgProfile")
    def apcfg_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apcfg_profile")

    @apcfg_profile.setter
    def apcfg_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apcfg_profile", value)

    @property
    @pulumi.getter(name="bonjourProfile")
    def bonjour_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bonjour_profile")

    @bonjour_profile.setter
    def bonjour_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bonjour_profile", value)

    @property
    @pulumi.getter(name="coordinateLatitude")
    def coordinate_latitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_latitude")

    @coordinate_latitude.setter
    def coordinate_latitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_latitude", value)

    @property
    @pulumi.getter(name="coordinateLongitude")
    def coordinate_longitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_longitude")

    @coordinate_longitude.setter
    def coordinate_longitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_longitude", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="firmwareProvision")
    def firmware_provision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision")

    @firmware_provision.setter
    def firmware_provision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision", value)

    @property
    @pulumi.getter(name="firmwareProvisionLatest")
    def firmware_provision_latest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firmware_provision_latest")

    @firmware_provision_latest.setter
    def firmware_provision_latest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firmware_provision_latest", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="imageDownload")
    def image_download(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_download")

    @image_download.setter
    def image_download(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_download", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="ipFragmentPreventing")
    def ip_fragment_preventing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_fragment_preventing")

    @ip_fragment_preventing.setter
    def ip_fragment_preventing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_fragment_preventing", value)

    @property
    @pulumi.getter
    def lan(self) -> Optional[pulumi.Input['WirelessControllerWtpLanArgs']]:
        return pulumi.get(self, "lan")

    @lan.setter
    def lan(self, value: Optional[pulumi.Input['WirelessControllerWtpLanArgs']]):
        pulumi.set(self, "lan", value)

    @property
    @pulumi.getter(name="ledState")
    def led_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "led_state")

    @led_state.setter
    def led_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "led_state", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="loginPasswd")
    def login_passwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd")

    @login_passwd.setter
    def login_passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd", value)

    @property
    @pulumi.getter(name="loginPasswdChange")
    def login_passwd_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_passwd_change")

    @login_passwd_change.setter
    def login_passwd_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_passwd_change", value)

    @property
    @pulumi.getter(name="meshBridgeEnable")
    def mesh_bridge_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mesh_bridge_enable")

    @mesh_bridge_enable.setter
    def mesh_bridge_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_bridge_enable", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideAllowaccess")
    def override_allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_allowaccess")

    @override_allowaccess.setter
    def override_allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_allowaccess", value)

    @property
    @pulumi.getter(name="overrideIpFragment")
    def override_ip_fragment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_ip_fragment")

    @override_ip_fragment.setter
    def override_ip_fragment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_ip_fragment", value)

    @property
    @pulumi.getter(name="overrideLan")
    def override_lan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_lan")

    @override_lan.setter
    def override_lan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_lan", value)

    @property
    @pulumi.getter(name="overrideLedState")
    def override_led_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_led_state")

    @override_led_state.setter
    def override_led_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_led_state", value)

    @property
    @pulumi.getter(name="overrideLoginPasswdChange")
    def override_login_passwd_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_login_passwd_change")

    @override_login_passwd_change.setter
    def override_login_passwd_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_login_passwd_change", value)

    @property
    @pulumi.getter(name="overrideSplitTunnel")
    def override_split_tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_split_tunnel")

    @override_split_tunnel.setter
    def override_split_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_split_tunnel", value)

    @property
    @pulumi.getter(name="overrideWanPortMode")
    def override_wan_port_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_wan_port_mode")

    @override_wan_port_mode.setter
    def override_wan_port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_wan_port_mode", value)

    @property
    @pulumi.getter
    def radio1(self) -> Optional[pulumi.Input['WirelessControllerWtpRadio1Args']]:
        return pulumi.get(self, "radio1")

    @radio1.setter
    def radio1(self, value: Optional[pulumi.Input['WirelessControllerWtpRadio1Args']]):
        pulumi.set(self, "radio1", value)

    @property
    @pulumi.getter
    def radio2(self) -> Optional[pulumi.Input['WirelessControllerWtpRadio2Args']]:
        return pulumi.get(self, "radio2")

    @radio2.setter
    def radio2(self, value: Optional[pulumi.Input['WirelessControllerWtpRadio2Args']]):
        pulumi.set(self, "radio2", value)

    @property
    @pulumi.getter
    def radio3(self) -> Optional[pulumi.Input['WirelessControllerWtpRadio3Args']]:
        return pulumi.get(self, "radio3")

    @radio3.setter
    def radio3(self, value: Optional[pulumi.Input['WirelessControllerWtpRadio3Args']]):
        pulumi.set(self, "radio3", value)

    @property
    @pulumi.getter
    def radio4(self) -> Optional[pulumi.Input['WirelessControllerWtpRadio4Args']]:
        return pulumi.get(self, "radio4")

    @radio4.setter
    def radio4(self, value: Optional[pulumi.Input['WirelessControllerWtpRadio4Args']]):
        pulumi.set(self, "radio4", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="regionX")
    def region_x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region_x")

    @region_x.setter
    def region_x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_x", value)

    @property
    @pulumi.getter(name="regionY")
    def region_y(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region_y")

    @region_y.setter
    def region_y(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_y", value)

    @property
    @pulumi.getter(name="splitTunnelingAclLocalApSubnet")
    def split_tunneling_acl_local_ap_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling_acl_local_ap_subnet")

    @split_tunneling_acl_local_ap_subnet.setter
    def split_tunneling_acl_local_ap_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling_acl_local_ap_subnet", value)

    @property
    @pulumi.getter(name="splitTunnelingAclPath")
    def split_tunneling_acl_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_tunneling_acl_path")

    @split_tunneling_acl_path.setter
    def split_tunneling_acl_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_tunneling_acl_path", value)

    @property
    @pulumi.getter(name="splitTunnelingAcls")
    def split_tunneling_acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpSplitTunnelingAclArgs']]]]:
        return pulumi.get(self, "split_tunneling_acls")

    @split_tunneling_acls.setter
    def split_tunneling_acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpSplitTunnelingAclArgs']]]]):
        pulumi.set(self, "split_tunneling_acls", value)

    @property
    @pulumi.getter(name="tunMtuDownlink")
    def tun_mtu_downlink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tun_mtu_downlink")

    @tun_mtu_downlink.setter
    def tun_mtu_downlink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tun_mtu_downlink", value)

    @property
    @pulumi.getter(name="tunMtuUplink")
    def tun_mtu_uplink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tun_mtu_uplink")

    @tun_mtu_uplink.setter
    def tun_mtu_uplink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tun_mtu_uplink", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wanPortMode")
    def wan_port_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_port_mode")

    @wan_port_mode.setter
    def wan_port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_port_mode", value)

    @property
    @pulumi.getter(name="wtpId")
    def wtp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wtp_id")

    @wtp_id.setter
    def wtp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_id", value)

    @property
    @pulumi.getter(name="wtpMode")
    def wtp_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wtp_mode")

    @wtp_mode.setter
    def wtp_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_mode", value)

    @property
    @pulumi.getter(name="wtpProfile")
    def wtp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wtp_profile")

    @wtp_profile.setter
    def wtp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_profile", value)


class WirelessControllerWtp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 apcfg_profile: Optional[pulumi.Input[str]] = None,
                 bonjour_profile: Optional[pulumi.Input[str]] = None,
                 coordinate_latitude: Optional[pulumi.Input[str]] = None,
                 coordinate_longitude: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 image_download: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 ip_fragment_preventing: Optional[pulumi.Input[str]] = None,
                 lan: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpLanArgs']]] = None,
                 led_state: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_change: Optional[pulumi.Input[str]] = None,
                 mesh_bridge_enable: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_allowaccess: Optional[pulumi.Input[str]] = None,
                 override_ip_fragment: Optional[pulumi.Input[str]] = None,
                 override_lan: Optional[pulumi.Input[str]] = None,
                 override_led_state: Optional[pulumi.Input[str]] = None,
                 override_login_passwd_change: Optional[pulumi.Input[str]] = None,
                 override_split_tunnel: Optional[pulumi.Input[str]] = None,
                 override_wan_port_mode: Optional[pulumi.Input[str]] = None,
                 radio1: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio1Args']]] = None,
                 radio2: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio2Args']]] = None,
                 radio3: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio3Args']]] = None,
                 radio4: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio4Args']]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 region_x: Optional[pulumi.Input[str]] = None,
                 region_y: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_local_ap_subnet: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_path: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpSplitTunnelingAclArgs']]]]] = None,
                 tun_mtu_downlink: Optional[pulumi.Input[int]] = None,
                 tun_mtu_uplink: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_port_mode: Optional[pulumi.Input[str]] = None,
                 wtp_id: Optional[pulumi.Input[str]] = None,
                 wtp_mode: Optional[pulumi.Input[str]] = None,
                 wtp_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WirelessControllerWtp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WirelessControllerWtpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WirelessControllerWtp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WirelessControllerWtpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WirelessControllerWtpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 apcfg_profile: Optional[pulumi.Input[str]] = None,
                 bonjour_profile: Optional[pulumi.Input[str]] = None,
                 coordinate_latitude: Optional[pulumi.Input[str]] = None,
                 coordinate_longitude: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 firmware_provision: Optional[pulumi.Input[str]] = None,
                 firmware_provision_latest: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 image_download: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 ip_fragment_preventing: Optional[pulumi.Input[str]] = None,
                 lan: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpLanArgs']]] = None,
                 led_state: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 login_passwd: Optional[pulumi.Input[str]] = None,
                 login_passwd_change: Optional[pulumi.Input[str]] = None,
                 mesh_bridge_enable: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_allowaccess: Optional[pulumi.Input[str]] = None,
                 override_ip_fragment: Optional[pulumi.Input[str]] = None,
                 override_lan: Optional[pulumi.Input[str]] = None,
                 override_led_state: Optional[pulumi.Input[str]] = None,
                 override_login_passwd_change: Optional[pulumi.Input[str]] = None,
                 override_split_tunnel: Optional[pulumi.Input[str]] = None,
                 override_wan_port_mode: Optional[pulumi.Input[str]] = None,
                 radio1: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio1Args']]] = None,
                 radio2: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio2Args']]] = None,
                 radio3: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio3Args']]] = None,
                 radio4: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio4Args']]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 region_x: Optional[pulumi.Input[str]] = None,
                 region_y: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_local_ap_subnet: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acl_path: Optional[pulumi.Input[str]] = None,
                 split_tunneling_acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpSplitTunnelingAclArgs']]]]] = None,
                 tun_mtu_downlink: Optional[pulumi.Input[int]] = None,
                 tun_mtu_uplink: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wan_port_mode: Optional[pulumi.Input[str]] = None,
                 wtp_id: Optional[pulumi.Input[str]] = None,
                 wtp_mode: Optional[pulumi.Input[str]] = None,
                 wtp_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WirelessControllerWtpArgs.__new__(WirelessControllerWtpArgs)

            __props__.__dict__["admin"] = admin
            __props__.__dict__["allowaccess"] = allowaccess
            __props__.__dict__["apcfg_profile"] = apcfg_profile
            __props__.__dict__["bonjour_profile"] = bonjour_profile
            __props__.__dict__["coordinate_latitude"] = coordinate_latitude
            __props__.__dict__["coordinate_longitude"] = coordinate_longitude
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["firmware_provision"] = firmware_provision
            __props__.__dict__["firmware_provision_latest"] = firmware_provision_latest
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["image_download"] = image_download
            __props__.__dict__["index"] = index
            __props__.__dict__["ip_fragment_preventing"] = ip_fragment_preventing
            __props__.__dict__["lan"] = lan
            __props__.__dict__["led_state"] = led_state
            __props__.__dict__["location"] = location
            __props__.__dict__["login_passwd"] = None if login_passwd is None else pulumi.Output.secret(login_passwd)
            __props__.__dict__["login_passwd_change"] = login_passwd_change
            __props__.__dict__["mesh_bridge_enable"] = mesh_bridge_enable
            __props__.__dict__["name"] = name
            __props__.__dict__["override_allowaccess"] = override_allowaccess
            __props__.__dict__["override_ip_fragment"] = override_ip_fragment
            __props__.__dict__["override_lan"] = override_lan
            __props__.__dict__["override_led_state"] = override_led_state
            __props__.__dict__["override_login_passwd_change"] = override_login_passwd_change
            __props__.__dict__["override_split_tunnel"] = override_split_tunnel
            __props__.__dict__["override_wan_port_mode"] = override_wan_port_mode
            __props__.__dict__["radio1"] = radio1
            __props__.__dict__["radio2"] = radio2
            __props__.__dict__["radio3"] = radio3
            __props__.__dict__["radio4"] = radio4
            __props__.__dict__["region"] = region
            __props__.__dict__["region_x"] = region_x
            __props__.__dict__["region_y"] = region_y
            __props__.__dict__["split_tunneling_acl_local_ap_subnet"] = split_tunneling_acl_local_ap_subnet
            __props__.__dict__["split_tunneling_acl_path"] = split_tunneling_acl_path
            __props__.__dict__["split_tunneling_acls"] = split_tunneling_acls
            __props__.__dict__["tun_mtu_downlink"] = tun_mtu_downlink
            __props__.__dict__["tun_mtu_uplink"] = tun_mtu_uplink
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wan_port_mode"] = wan_port_mode
            __props__.__dict__["wtp_id"] = wtp_id
            __props__.__dict__["wtp_mode"] = wtp_mode
            if wtp_profile is None and not opts.urn:
                raise TypeError("Missing required property 'wtp_profile'")
            __props__.__dict__["wtp_profile"] = wtp_profile
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["loginPasswd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(WirelessControllerWtp, __self__).__init__(
            'fortios:index/wirelessControllerWtp:WirelessControllerWtp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin: Optional[pulumi.Input[str]] = None,
            allowaccess: Optional[pulumi.Input[str]] = None,
            apcfg_profile: Optional[pulumi.Input[str]] = None,
            bonjour_profile: Optional[pulumi.Input[str]] = None,
            coordinate_latitude: Optional[pulumi.Input[str]] = None,
            coordinate_longitude: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            firmware_provision: Optional[pulumi.Input[str]] = None,
            firmware_provision_latest: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            image_download: Optional[pulumi.Input[str]] = None,
            index: Optional[pulumi.Input[int]] = None,
            ip_fragment_preventing: Optional[pulumi.Input[str]] = None,
            lan: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpLanArgs']]] = None,
            led_state: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            login_passwd: Optional[pulumi.Input[str]] = None,
            login_passwd_change: Optional[pulumi.Input[str]] = None,
            mesh_bridge_enable: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            override_allowaccess: Optional[pulumi.Input[str]] = None,
            override_ip_fragment: Optional[pulumi.Input[str]] = None,
            override_lan: Optional[pulumi.Input[str]] = None,
            override_led_state: Optional[pulumi.Input[str]] = None,
            override_login_passwd_change: Optional[pulumi.Input[str]] = None,
            override_split_tunnel: Optional[pulumi.Input[str]] = None,
            override_wan_port_mode: Optional[pulumi.Input[str]] = None,
            radio1: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio1Args']]] = None,
            radio2: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio2Args']]] = None,
            radio3: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio3Args']]] = None,
            radio4: Optional[pulumi.Input[pulumi.InputType['WirelessControllerWtpRadio4Args']]] = None,
            region: Optional[pulumi.Input[str]] = None,
            region_x: Optional[pulumi.Input[str]] = None,
            region_y: Optional[pulumi.Input[str]] = None,
            split_tunneling_acl_local_ap_subnet: Optional[pulumi.Input[str]] = None,
            split_tunneling_acl_path: Optional[pulumi.Input[str]] = None,
            split_tunneling_acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerWtpSplitTunnelingAclArgs']]]]] = None,
            tun_mtu_downlink: Optional[pulumi.Input[int]] = None,
            tun_mtu_uplink: Optional[pulumi.Input[int]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wan_port_mode: Optional[pulumi.Input[str]] = None,
            wtp_id: Optional[pulumi.Input[str]] = None,
            wtp_mode: Optional[pulumi.Input[str]] = None,
            wtp_profile: Optional[pulumi.Input[str]] = None) -> 'WirelessControllerWtp':
        """
        Get an existing WirelessControllerWtp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WirelessControllerWtpState.__new__(_WirelessControllerWtpState)

        __props__.__dict__["admin"] = admin
        __props__.__dict__["allowaccess"] = allowaccess
        __props__.__dict__["apcfg_profile"] = apcfg_profile
        __props__.__dict__["bonjour_profile"] = bonjour_profile
        __props__.__dict__["coordinate_latitude"] = coordinate_latitude
        __props__.__dict__["coordinate_longitude"] = coordinate_longitude
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["firmware_provision"] = firmware_provision
        __props__.__dict__["firmware_provision_latest"] = firmware_provision_latest
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["image_download"] = image_download
        __props__.__dict__["index"] = index
        __props__.__dict__["ip_fragment_preventing"] = ip_fragment_preventing
        __props__.__dict__["lan"] = lan
        __props__.__dict__["led_state"] = led_state
        __props__.__dict__["location"] = location
        __props__.__dict__["login_passwd"] = login_passwd
        __props__.__dict__["login_passwd_change"] = login_passwd_change
        __props__.__dict__["mesh_bridge_enable"] = mesh_bridge_enable
        __props__.__dict__["name"] = name
        __props__.__dict__["override_allowaccess"] = override_allowaccess
        __props__.__dict__["override_ip_fragment"] = override_ip_fragment
        __props__.__dict__["override_lan"] = override_lan
        __props__.__dict__["override_led_state"] = override_led_state
        __props__.__dict__["override_login_passwd_change"] = override_login_passwd_change
        __props__.__dict__["override_split_tunnel"] = override_split_tunnel
        __props__.__dict__["override_wan_port_mode"] = override_wan_port_mode
        __props__.__dict__["radio1"] = radio1
        __props__.__dict__["radio2"] = radio2
        __props__.__dict__["radio3"] = radio3
        __props__.__dict__["radio4"] = radio4
        __props__.__dict__["region"] = region
        __props__.__dict__["region_x"] = region_x
        __props__.__dict__["region_y"] = region_y
        __props__.__dict__["split_tunneling_acl_local_ap_subnet"] = split_tunneling_acl_local_ap_subnet
        __props__.__dict__["split_tunneling_acl_path"] = split_tunneling_acl_path
        __props__.__dict__["split_tunneling_acls"] = split_tunneling_acls
        __props__.__dict__["tun_mtu_downlink"] = tun_mtu_downlink
        __props__.__dict__["tun_mtu_uplink"] = tun_mtu_uplink
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wan_port_mode"] = wan_port_mode
        __props__.__dict__["wtp_id"] = wtp_id
        __props__.__dict__["wtp_mode"] = wtp_mode
        __props__.__dict__["wtp_profile"] = wtp_profile
        return WirelessControllerWtp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def admin(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def allowaccess(self) -> pulumi.Output[str]:
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter(name="apcfgProfile")
    def apcfg_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "apcfg_profile")

    @property
    @pulumi.getter(name="bonjourProfile")
    def bonjour_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bonjour_profile")

    @property
    @pulumi.getter(name="coordinateLatitude")
    def coordinate_latitude(self) -> pulumi.Output[str]:
        return pulumi.get(self, "coordinate_latitude")

    @property
    @pulumi.getter(name="coordinateLongitude")
    def coordinate_longitude(self) -> pulumi.Output[str]:
        return pulumi.get(self, "coordinate_longitude")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="firmwareProvision")
    def firmware_provision(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firmware_provision")

    @property
    @pulumi.getter(name="firmwareProvisionLatest")
    def firmware_provision_latest(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firmware_provision_latest")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="imageDownload")
    def image_download(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image_download")

    @property
    @pulumi.getter
    def index(self) -> pulumi.Output[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="ipFragmentPreventing")
    def ip_fragment_preventing(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_fragment_preventing")

    @property
    @pulumi.getter
    def lan(self) -> pulumi.Output['outputs.WirelessControllerWtpLan']:
        return pulumi.get(self, "lan")

    @property
    @pulumi.getter(name="ledState")
    def led_state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "led_state")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="loginPasswd")
    def login_passwd(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "login_passwd")

    @property
    @pulumi.getter(name="loginPasswdChange")
    def login_passwd_change(self) -> pulumi.Output[str]:
        return pulumi.get(self, "login_passwd_change")

    @property
    @pulumi.getter(name="meshBridgeEnable")
    def mesh_bridge_enable(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mesh_bridge_enable")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideAllowaccess")
    def override_allowaccess(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_allowaccess")

    @property
    @pulumi.getter(name="overrideIpFragment")
    def override_ip_fragment(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_ip_fragment")

    @property
    @pulumi.getter(name="overrideLan")
    def override_lan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_lan")

    @property
    @pulumi.getter(name="overrideLedState")
    def override_led_state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_led_state")

    @property
    @pulumi.getter(name="overrideLoginPasswdChange")
    def override_login_passwd_change(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_login_passwd_change")

    @property
    @pulumi.getter(name="overrideSplitTunnel")
    def override_split_tunnel(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_split_tunnel")

    @property
    @pulumi.getter(name="overrideWanPortMode")
    def override_wan_port_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override_wan_port_mode")

    @property
    @pulumi.getter
    def radio1(self) -> pulumi.Output['outputs.WirelessControllerWtpRadio1']:
        return pulumi.get(self, "radio1")

    @property
    @pulumi.getter
    def radio2(self) -> pulumi.Output['outputs.WirelessControllerWtpRadio2']:
        return pulumi.get(self, "radio2")

    @property
    @pulumi.getter
    def radio3(self) -> pulumi.Output['outputs.WirelessControllerWtpRadio3']:
        return pulumi.get(self, "radio3")

    @property
    @pulumi.getter
    def radio4(self) -> pulumi.Output['outputs.WirelessControllerWtpRadio4']:
        return pulumi.get(self, "radio4")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionX")
    def region_x(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region_x")

    @property
    @pulumi.getter(name="regionY")
    def region_y(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region_y")

    @property
    @pulumi.getter(name="splitTunnelingAclLocalApSubnet")
    def split_tunneling_acl_local_ap_subnet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "split_tunneling_acl_local_ap_subnet")

    @property
    @pulumi.getter(name="splitTunnelingAclPath")
    def split_tunneling_acl_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "split_tunneling_acl_path")

    @property
    @pulumi.getter(name="splitTunnelingAcls")
    def split_tunneling_acls(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerWtpSplitTunnelingAcl']]]:
        return pulumi.get(self, "split_tunneling_acls")

    @property
    @pulumi.getter(name="tunMtuDownlink")
    def tun_mtu_downlink(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tun_mtu_downlink")

    @property
    @pulumi.getter(name="tunMtuUplink")
    def tun_mtu_uplink(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tun_mtu_uplink")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="wanPortMode")
    def wan_port_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wan_port_mode")

    @property
    @pulumi.getter(name="wtpId")
    def wtp_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wtp_id")

    @property
    @pulumi.getter(name="wtpMode")
    def wtp_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wtp_mode")

    @property
    @pulumi.getter(name="wtpProfile")
    def wtp_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wtp_profile")

