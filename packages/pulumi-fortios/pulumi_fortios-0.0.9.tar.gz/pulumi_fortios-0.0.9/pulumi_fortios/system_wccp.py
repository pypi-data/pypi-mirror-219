# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SystemWccpArgs', 'SystemWccp']

@pulumi.input_type
class SystemWccpArgs:
    def __init__(__self__, *,
                 assignment_bucket_format: Optional[pulumi.Input[str]] = None,
                 assignment_dstaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_method: Optional[pulumi.Input[str]] = None,
                 assignment_srcaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_weight: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cache_engine_method: Optional[pulumi.Input[str]] = None,
                 cache_id: Optional[pulumi.Input[str]] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 group_address: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 ports_defined: Optional[pulumi.Input[str]] = None,
                 primary_hash: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 return_method: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 router_list: Optional[pulumi.Input[str]] = None,
                 server_list: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemWccp resource.
        """
        if assignment_bucket_format is not None:
            pulumi.set(__self__, "assignment_bucket_format", assignment_bucket_format)
        if assignment_dstaddr_mask is not None:
            pulumi.set(__self__, "assignment_dstaddr_mask", assignment_dstaddr_mask)
        if assignment_method is not None:
            pulumi.set(__self__, "assignment_method", assignment_method)
        if assignment_srcaddr_mask is not None:
            pulumi.set(__self__, "assignment_srcaddr_mask", assignment_srcaddr_mask)
        if assignment_weight is not None:
            pulumi.set(__self__, "assignment_weight", assignment_weight)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if cache_engine_method is not None:
            pulumi.set(__self__, "cache_engine_method", cache_engine_method)
        if cache_id is not None:
            pulumi.set(__self__, "cache_id", cache_id)
        if forward_method is not None:
            pulumi.set(__self__, "forward_method", forward_method)
        if group_address is not None:
            pulumi.set(__self__, "group_address", group_address)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if ports_defined is not None:
            pulumi.set(__self__, "ports_defined", ports_defined)
        if primary_hash is not None:
            pulumi.set(__self__, "primary_hash", primary_hash)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if return_method is not None:
            pulumi.set(__self__, "return_method", return_method)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if router_list is not None:
            pulumi.set(__self__, "router_list", router_list)
        if server_list is not None:
            pulumi.set(__self__, "server_list", server_list)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="assignmentBucketFormat")
    def assignment_bucket_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assignment_bucket_format")

    @assignment_bucket_format.setter
    def assignment_bucket_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_bucket_format", value)

    @property
    @pulumi.getter(name="assignmentDstaddrMask")
    def assignment_dstaddr_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assignment_dstaddr_mask")

    @assignment_dstaddr_mask.setter
    def assignment_dstaddr_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_dstaddr_mask", value)

    @property
    @pulumi.getter(name="assignmentMethod")
    def assignment_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assignment_method")

    @assignment_method.setter
    def assignment_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_method", value)

    @property
    @pulumi.getter(name="assignmentSrcaddrMask")
    def assignment_srcaddr_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assignment_srcaddr_mask")

    @assignment_srcaddr_mask.setter
    def assignment_srcaddr_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_srcaddr_mask", value)

    @property
    @pulumi.getter(name="assignmentWeight")
    def assignment_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assignment_weight")

    @assignment_weight.setter
    def assignment_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assignment_weight", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="cacheEngineMethod")
    def cache_engine_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_engine_method")

    @cache_engine_method.setter
    def cache_engine_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_engine_method", value)

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_id")

    @cache_id.setter
    def cache_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_id", value)

    @property
    @pulumi.getter(name="forwardMethod")
    def forward_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forward_method")

    @forward_method.setter
    def forward_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_method", value)

    @property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_address")

    @group_address.setter
    def group_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_address", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="portsDefined")
    def ports_defined(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports_defined")

    @ports_defined.setter
    def ports_defined(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports_defined", value)

    @property
    @pulumi.getter(name="primaryHash")
    def primary_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_hash")

    @primary_hash.setter
    def primary_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_hash", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="returnMethod")
    def return_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "return_method")

    @return_method.setter
    def return_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "return_method", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="routerList")
    def router_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_list")

    @router_list.setter
    def router_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_list", value)

    @property
    @pulumi.getter(name="serverList")
    def server_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_list")

    @server_list.setter
    def server_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_list", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemWccpState:
    def __init__(__self__, *,
                 assignment_bucket_format: Optional[pulumi.Input[str]] = None,
                 assignment_dstaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_method: Optional[pulumi.Input[str]] = None,
                 assignment_srcaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_weight: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cache_engine_method: Optional[pulumi.Input[str]] = None,
                 cache_id: Optional[pulumi.Input[str]] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 group_address: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 ports_defined: Optional[pulumi.Input[str]] = None,
                 primary_hash: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 return_method: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 router_list: Optional[pulumi.Input[str]] = None,
                 server_list: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemWccp resources.
        """
        if assignment_bucket_format is not None:
            pulumi.set(__self__, "assignment_bucket_format", assignment_bucket_format)
        if assignment_dstaddr_mask is not None:
            pulumi.set(__self__, "assignment_dstaddr_mask", assignment_dstaddr_mask)
        if assignment_method is not None:
            pulumi.set(__self__, "assignment_method", assignment_method)
        if assignment_srcaddr_mask is not None:
            pulumi.set(__self__, "assignment_srcaddr_mask", assignment_srcaddr_mask)
        if assignment_weight is not None:
            pulumi.set(__self__, "assignment_weight", assignment_weight)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if cache_engine_method is not None:
            pulumi.set(__self__, "cache_engine_method", cache_engine_method)
        if cache_id is not None:
            pulumi.set(__self__, "cache_id", cache_id)
        if forward_method is not None:
            pulumi.set(__self__, "forward_method", forward_method)
        if group_address is not None:
            pulumi.set(__self__, "group_address", group_address)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if ports_defined is not None:
            pulumi.set(__self__, "ports_defined", ports_defined)
        if primary_hash is not None:
            pulumi.set(__self__, "primary_hash", primary_hash)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if return_method is not None:
            pulumi.set(__self__, "return_method", return_method)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if router_list is not None:
            pulumi.set(__self__, "router_list", router_list)
        if server_list is not None:
            pulumi.set(__self__, "server_list", server_list)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="assignmentBucketFormat")
    def assignment_bucket_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assignment_bucket_format")

    @assignment_bucket_format.setter
    def assignment_bucket_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_bucket_format", value)

    @property
    @pulumi.getter(name="assignmentDstaddrMask")
    def assignment_dstaddr_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assignment_dstaddr_mask")

    @assignment_dstaddr_mask.setter
    def assignment_dstaddr_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_dstaddr_mask", value)

    @property
    @pulumi.getter(name="assignmentMethod")
    def assignment_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assignment_method")

    @assignment_method.setter
    def assignment_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_method", value)

    @property
    @pulumi.getter(name="assignmentSrcaddrMask")
    def assignment_srcaddr_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assignment_srcaddr_mask")

    @assignment_srcaddr_mask.setter
    def assignment_srcaddr_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_srcaddr_mask", value)

    @property
    @pulumi.getter(name="assignmentWeight")
    def assignment_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assignment_weight")

    @assignment_weight.setter
    def assignment_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assignment_weight", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="cacheEngineMethod")
    def cache_engine_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_engine_method")

    @cache_engine_method.setter
    def cache_engine_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_engine_method", value)

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_id")

    @cache_id.setter
    def cache_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_id", value)

    @property
    @pulumi.getter(name="forwardMethod")
    def forward_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forward_method")

    @forward_method.setter
    def forward_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_method", value)

    @property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_address")

    @group_address.setter
    def group_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_address", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="portsDefined")
    def ports_defined(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports_defined")

    @ports_defined.setter
    def ports_defined(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports_defined", value)

    @property
    @pulumi.getter(name="primaryHash")
    def primary_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_hash")

    @primary_hash.setter
    def primary_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_hash", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="returnMethod")
    def return_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "return_method")

    @return_method.setter
    def return_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "return_method", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="routerList")
    def router_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_list")

    @router_list.setter
    def router_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_list", value)

    @property
    @pulumi.getter(name="serverList")
    def server_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_list")

    @server_list.setter
    def server_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_list", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemWccp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignment_bucket_format: Optional[pulumi.Input[str]] = None,
                 assignment_dstaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_method: Optional[pulumi.Input[str]] = None,
                 assignment_srcaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_weight: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cache_engine_method: Optional[pulumi.Input[str]] = None,
                 cache_id: Optional[pulumi.Input[str]] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 group_address: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 ports_defined: Optional[pulumi.Input[str]] = None,
                 primary_hash: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 return_method: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 router_list: Optional[pulumi.Input[str]] = None,
                 server_list: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemWccp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemWccpArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemWccp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemWccpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemWccpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignment_bucket_format: Optional[pulumi.Input[str]] = None,
                 assignment_dstaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_method: Optional[pulumi.Input[str]] = None,
                 assignment_srcaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_weight: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cache_engine_method: Optional[pulumi.Input[str]] = None,
                 cache_id: Optional[pulumi.Input[str]] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 group_address: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 ports_defined: Optional[pulumi.Input[str]] = None,
                 primary_hash: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 return_method: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 router_list: Optional[pulumi.Input[str]] = None,
                 server_list: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemWccpArgs.__new__(SystemWccpArgs)

            __props__.__dict__["assignment_bucket_format"] = assignment_bucket_format
            __props__.__dict__["assignment_dstaddr_mask"] = assignment_dstaddr_mask
            __props__.__dict__["assignment_method"] = assignment_method
            __props__.__dict__["assignment_srcaddr_mask"] = assignment_srcaddr_mask
            __props__.__dict__["assignment_weight"] = assignment_weight
            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["cache_engine_method"] = cache_engine_method
            __props__.__dict__["cache_id"] = cache_id
            __props__.__dict__["forward_method"] = forward_method
            __props__.__dict__["group_address"] = group_address
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["ports"] = ports
            __props__.__dict__["ports_defined"] = ports_defined
            __props__.__dict__["primary_hash"] = primary_hash
            __props__.__dict__["priority"] = priority
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["return_method"] = return_method
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["router_list"] = router_list
            __props__.__dict__["server_list"] = server_list
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SystemWccp, __self__).__init__(
            'fortios:index/systemWccp:SystemWccp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assignment_bucket_format: Optional[pulumi.Input[str]] = None,
            assignment_dstaddr_mask: Optional[pulumi.Input[str]] = None,
            assignment_method: Optional[pulumi.Input[str]] = None,
            assignment_srcaddr_mask: Optional[pulumi.Input[str]] = None,
            assignment_weight: Optional[pulumi.Input[int]] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            cache_engine_method: Optional[pulumi.Input[str]] = None,
            cache_id: Optional[pulumi.Input[str]] = None,
            forward_method: Optional[pulumi.Input[str]] = None,
            group_address: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            ports: Optional[pulumi.Input[str]] = None,
            ports_defined: Optional[pulumi.Input[str]] = None,
            primary_hash: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[int]] = None,
            return_method: Optional[pulumi.Input[str]] = None,
            router_id: Optional[pulumi.Input[str]] = None,
            router_list: Optional[pulumi.Input[str]] = None,
            server_list: Optional[pulumi.Input[str]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            service_type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemWccp':
        """
        Get an existing SystemWccp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemWccpState.__new__(_SystemWccpState)

        __props__.__dict__["assignment_bucket_format"] = assignment_bucket_format
        __props__.__dict__["assignment_dstaddr_mask"] = assignment_dstaddr_mask
        __props__.__dict__["assignment_method"] = assignment_method
        __props__.__dict__["assignment_srcaddr_mask"] = assignment_srcaddr_mask
        __props__.__dict__["assignment_weight"] = assignment_weight
        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["cache_engine_method"] = cache_engine_method
        __props__.__dict__["cache_id"] = cache_id
        __props__.__dict__["forward_method"] = forward_method
        __props__.__dict__["group_address"] = group_address
        __props__.__dict__["password"] = password
        __props__.__dict__["ports"] = ports
        __props__.__dict__["ports_defined"] = ports_defined
        __props__.__dict__["primary_hash"] = primary_hash
        __props__.__dict__["priority"] = priority
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["return_method"] = return_method
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["router_list"] = router_list
        __props__.__dict__["server_list"] = server_list
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemWccp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assignmentBucketFormat")
    def assignment_bucket_format(self) -> pulumi.Output[str]:
        return pulumi.get(self, "assignment_bucket_format")

    @property
    @pulumi.getter(name="assignmentDstaddrMask")
    def assignment_dstaddr_mask(self) -> pulumi.Output[str]:
        return pulumi.get(self, "assignment_dstaddr_mask")

    @property
    @pulumi.getter(name="assignmentMethod")
    def assignment_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "assignment_method")

    @property
    @pulumi.getter(name="assignmentSrcaddrMask")
    def assignment_srcaddr_mask(self) -> pulumi.Output[str]:
        return pulumi.get(self, "assignment_srcaddr_mask")

    @property
    @pulumi.getter(name="assignmentWeight")
    def assignment_weight(self) -> pulumi.Output[int]:
        return pulumi.get(self, "assignment_weight")

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="cacheEngineMethod")
    def cache_engine_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_engine_method")

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_id")

    @property
    @pulumi.getter(name="forwardMethod")
    def forward_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forward_method")

    @property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_address")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="portsDefined")
    def ports_defined(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ports_defined")

    @property
    @pulumi.getter(name="primaryHash")
    def primary_hash(self) -> pulumi.Output[str]:
        return pulumi.get(self, "primary_hash")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="returnMethod")
    def return_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "return_method")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="routerList")
    def router_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "router_list")

    @property
    @pulumi.getter(name="serverList")
    def server_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_list")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

