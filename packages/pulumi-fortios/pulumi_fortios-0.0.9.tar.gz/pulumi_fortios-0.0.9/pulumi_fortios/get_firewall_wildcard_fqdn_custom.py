# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetFirewallWildcardFqdnCustomResult',
    'AwaitableGetFirewallWildcardFqdnCustomResult',
    'get_firewall_wildcard_fqdn_custom',
    'get_firewall_wildcard_fqdn_custom_output',
]

@pulumi.output_type
class GetFirewallWildcardFqdnCustomResult:
    """
    A collection of values returned by GetFirewallWildcardFqdnCustom.
    """
    def __init__(__self__, color=None, comment=None, id=None, name=None, uuid=None, vdomparam=None, visibility=None, wildcard_fqdn=None):
        if color and not isinstance(color, int):
            raise TypeError("Expected argument 'color' to be a int")
        pulumi.set(__self__, "color", color)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)
        if wildcard_fqdn and not isinstance(wildcard_fqdn, str):
            raise TypeError("Expected argument 'wildcard_fqdn' to be a str")
        pulumi.set(__self__, "wildcard_fqdn", wildcard_fqdn)

    @property
    @pulumi.getter
    def color(self) -> int:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def visibility(self) -> str:
        return pulumi.get(self, "visibility")

    @property
    @pulumi.getter(name="wildcardFqdn")
    def wildcard_fqdn(self) -> str:
        return pulumi.get(self, "wildcard_fqdn")


class AwaitableGetFirewallWildcardFqdnCustomResult(GetFirewallWildcardFqdnCustomResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallWildcardFqdnCustomResult(
            color=self.color,
            comment=self.comment,
            id=self.id,
            name=self.name,
            uuid=self.uuid,
            vdomparam=self.vdomparam,
            visibility=self.visibility,
            wildcard_fqdn=self.wildcard_fqdn)


def get_firewall_wildcard_fqdn_custom(name: Optional[str] = None,
                                      vdomparam: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallWildcardFqdnCustomResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getFirewallWildcardFqdnCustom:GetFirewallWildcardFqdnCustom', __args__, opts=opts, typ=GetFirewallWildcardFqdnCustomResult).value

    return AwaitableGetFirewallWildcardFqdnCustomResult(
        color=pulumi.get(__ret__, 'color'),
        comment=pulumi.get(__ret__, 'comment'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        uuid=pulumi.get(__ret__, 'uuid'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        visibility=pulumi.get(__ret__, 'visibility'),
        wildcard_fqdn=pulumi.get(__ret__, 'wildcard_fqdn'))


@_utilities.lift_output_func(get_firewall_wildcard_fqdn_custom)
def get_firewall_wildcard_fqdn_custom_output(name: Optional[pulumi.Input[str]] = None,
                                             vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallWildcardFqdnCustomResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
