# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FirewallSslSettingArgs', 'FirewallSslSetting']

@pulumi.input_type
class FirewallSslSettingArgs:
    def __init__(__self__, *,
                 cert_cache_capacity: pulumi.Input[int],
                 cert_cache_timeout: pulumi.Input[int],
                 no_matching_cipher_action: pulumi.Input[str],
                 proxy_connect_timeout: pulumi.Input[int],
                 session_cache_capacity: pulumi.Input[int],
                 session_cache_timeout: pulumi.Input[int],
                 ssl_dh_bits: pulumi.Input[str],
                 ssl_send_empty_frags: pulumi.Input[str],
                 abbreviate_handshake: Optional[pulumi.Input[str]] = None,
                 kxp_queue_threshold: Optional[pulumi.Input[int]] = None,
                 ssl_queue_threshold: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallSslSetting resource.
        """
        pulumi.set(__self__, "cert_cache_capacity", cert_cache_capacity)
        pulumi.set(__self__, "cert_cache_timeout", cert_cache_timeout)
        pulumi.set(__self__, "no_matching_cipher_action", no_matching_cipher_action)
        pulumi.set(__self__, "proxy_connect_timeout", proxy_connect_timeout)
        pulumi.set(__self__, "session_cache_capacity", session_cache_capacity)
        pulumi.set(__self__, "session_cache_timeout", session_cache_timeout)
        pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        pulumi.set(__self__, "ssl_send_empty_frags", ssl_send_empty_frags)
        if abbreviate_handshake is not None:
            pulumi.set(__self__, "abbreviate_handshake", abbreviate_handshake)
        if kxp_queue_threshold is not None:
            pulumi.set(__self__, "kxp_queue_threshold", kxp_queue_threshold)
        if ssl_queue_threshold is not None:
            pulumi.set(__self__, "ssl_queue_threshold", ssl_queue_threshold)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="certCacheCapacity")
    def cert_cache_capacity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cert_cache_capacity")

    @cert_cache_capacity.setter
    def cert_cache_capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "cert_cache_capacity", value)

    @property
    @pulumi.getter(name="certCacheTimeout")
    def cert_cache_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cert_cache_timeout")

    @cert_cache_timeout.setter
    def cert_cache_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "cert_cache_timeout", value)

    @property
    @pulumi.getter(name="noMatchingCipherAction")
    def no_matching_cipher_action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "no_matching_cipher_action")

    @no_matching_cipher_action.setter
    def no_matching_cipher_action(self, value: pulumi.Input[str]):
        pulumi.set(self, "no_matching_cipher_action", value)

    @property
    @pulumi.getter(name="proxyConnectTimeout")
    def proxy_connect_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "proxy_connect_timeout")

    @proxy_connect_timeout.setter
    def proxy_connect_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "proxy_connect_timeout", value)

    @property
    @pulumi.getter(name="sessionCacheCapacity")
    def session_cache_capacity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "session_cache_capacity")

    @session_cache_capacity.setter
    def session_cache_capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "session_cache_capacity", value)

    @property
    @pulumi.getter(name="sessionCacheTimeout")
    def session_cache_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "session_cache_timeout")

    @session_cache_timeout.setter
    def session_cache_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "session_cache_timeout", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_send_empty_frags")

    @ssl_send_empty_frags.setter
    def ssl_send_empty_frags(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_send_empty_frags", value)

    @property
    @pulumi.getter(name="abbreviateHandshake")
    def abbreviate_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "abbreviate_handshake")

    @abbreviate_handshake.setter
    def abbreviate_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abbreviate_handshake", value)

    @property
    @pulumi.getter(name="kxpQueueThreshold")
    def kxp_queue_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "kxp_queue_threshold")

    @kxp_queue_threshold.setter
    def kxp_queue_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "kxp_queue_threshold", value)

    @property
    @pulumi.getter(name="sslQueueThreshold")
    def ssl_queue_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_queue_threshold")

    @ssl_queue_threshold.setter
    def ssl_queue_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_queue_threshold", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FirewallSslSettingState:
    def __init__(__self__, *,
                 abbreviate_handshake: Optional[pulumi.Input[str]] = None,
                 cert_cache_capacity: Optional[pulumi.Input[int]] = None,
                 cert_cache_timeout: Optional[pulumi.Input[int]] = None,
                 kxp_queue_threshold: Optional[pulumi.Input[int]] = None,
                 no_matching_cipher_action: Optional[pulumi.Input[str]] = None,
                 proxy_connect_timeout: Optional[pulumi.Input[int]] = None,
                 session_cache_capacity: Optional[pulumi.Input[int]] = None,
                 session_cache_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_queue_threshold: Optional[pulumi.Input[int]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallSslSetting resources.
        """
        if abbreviate_handshake is not None:
            pulumi.set(__self__, "abbreviate_handshake", abbreviate_handshake)
        if cert_cache_capacity is not None:
            pulumi.set(__self__, "cert_cache_capacity", cert_cache_capacity)
        if cert_cache_timeout is not None:
            pulumi.set(__self__, "cert_cache_timeout", cert_cache_timeout)
        if kxp_queue_threshold is not None:
            pulumi.set(__self__, "kxp_queue_threshold", kxp_queue_threshold)
        if no_matching_cipher_action is not None:
            pulumi.set(__self__, "no_matching_cipher_action", no_matching_cipher_action)
        if proxy_connect_timeout is not None:
            pulumi.set(__self__, "proxy_connect_timeout", proxy_connect_timeout)
        if session_cache_capacity is not None:
            pulumi.set(__self__, "session_cache_capacity", session_cache_capacity)
        if session_cache_timeout is not None:
            pulumi.set(__self__, "session_cache_timeout", session_cache_timeout)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_queue_threshold is not None:
            pulumi.set(__self__, "ssl_queue_threshold", ssl_queue_threshold)
        if ssl_send_empty_frags is not None:
            pulumi.set(__self__, "ssl_send_empty_frags", ssl_send_empty_frags)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="abbreviateHandshake")
    def abbreviate_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "abbreviate_handshake")

    @abbreviate_handshake.setter
    def abbreviate_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abbreviate_handshake", value)

    @property
    @pulumi.getter(name="certCacheCapacity")
    def cert_cache_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cert_cache_capacity")

    @cert_cache_capacity.setter
    def cert_cache_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_cache_capacity", value)

    @property
    @pulumi.getter(name="certCacheTimeout")
    def cert_cache_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cert_cache_timeout")

    @cert_cache_timeout.setter
    def cert_cache_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_cache_timeout", value)

    @property
    @pulumi.getter(name="kxpQueueThreshold")
    def kxp_queue_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "kxp_queue_threshold")

    @kxp_queue_threshold.setter
    def kxp_queue_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "kxp_queue_threshold", value)

    @property
    @pulumi.getter(name="noMatchingCipherAction")
    def no_matching_cipher_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "no_matching_cipher_action")

    @no_matching_cipher_action.setter
    def no_matching_cipher_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_matching_cipher_action", value)

    @property
    @pulumi.getter(name="proxyConnectTimeout")
    def proxy_connect_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "proxy_connect_timeout")

    @proxy_connect_timeout.setter
    def proxy_connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_connect_timeout", value)

    @property
    @pulumi.getter(name="sessionCacheCapacity")
    def session_cache_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_cache_capacity")

    @session_cache_capacity.setter
    def session_cache_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_cache_capacity", value)

    @property
    @pulumi.getter(name="sessionCacheTimeout")
    def session_cache_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_cache_timeout")

    @session_cache_timeout.setter
    def session_cache_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_cache_timeout", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslQueueThreshold")
    def ssl_queue_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_queue_threshold")

    @ssl_queue_threshold.setter
    def ssl_queue_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_queue_threshold", value)

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_send_empty_frags")

    @ssl_send_empty_frags.setter
    def ssl_send_empty_frags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_send_empty_frags", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class FirewallSslSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abbreviate_handshake: Optional[pulumi.Input[str]] = None,
                 cert_cache_capacity: Optional[pulumi.Input[int]] = None,
                 cert_cache_timeout: Optional[pulumi.Input[int]] = None,
                 kxp_queue_threshold: Optional[pulumi.Input[int]] = None,
                 no_matching_cipher_action: Optional[pulumi.Input[str]] = None,
                 proxy_connect_timeout: Optional[pulumi.Input[int]] = None,
                 session_cache_capacity: Optional[pulumi.Input[int]] = None,
                 session_cache_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_queue_threshold: Optional[pulumi.Input[int]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallSslSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallSslSettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallSslSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallSslSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallSslSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abbreviate_handshake: Optional[pulumi.Input[str]] = None,
                 cert_cache_capacity: Optional[pulumi.Input[int]] = None,
                 cert_cache_timeout: Optional[pulumi.Input[int]] = None,
                 kxp_queue_threshold: Optional[pulumi.Input[int]] = None,
                 no_matching_cipher_action: Optional[pulumi.Input[str]] = None,
                 proxy_connect_timeout: Optional[pulumi.Input[int]] = None,
                 session_cache_capacity: Optional[pulumi.Input[int]] = None,
                 session_cache_timeout: Optional[pulumi.Input[int]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_queue_threshold: Optional[pulumi.Input[int]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallSslSettingArgs.__new__(FirewallSslSettingArgs)

            __props__.__dict__["abbreviate_handshake"] = abbreviate_handshake
            if cert_cache_capacity is None and not opts.urn:
                raise TypeError("Missing required property 'cert_cache_capacity'")
            __props__.__dict__["cert_cache_capacity"] = cert_cache_capacity
            if cert_cache_timeout is None and not opts.urn:
                raise TypeError("Missing required property 'cert_cache_timeout'")
            __props__.__dict__["cert_cache_timeout"] = cert_cache_timeout
            __props__.__dict__["kxp_queue_threshold"] = kxp_queue_threshold
            if no_matching_cipher_action is None and not opts.urn:
                raise TypeError("Missing required property 'no_matching_cipher_action'")
            __props__.__dict__["no_matching_cipher_action"] = no_matching_cipher_action
            if proxy_connect_timeout is None and not opts.urn:
                raise TypeError("Missing required property 'proxy_connect_timeout'")
            __props__.__dict__["proxy_connect_timeout"] = proxy_connect_timeout
            if session_cache_capacity is None and not opts.urn:
                raise TypeError("Missing required property 'session_cache_capacity'")
            __props__.__dict__["session_cache_capacity"] = session_cache_capacity
            if session_cache_timeout is None and not opts.urn:
                raise TypeError("Missing required property 'session_cache_timeout'")
            __props__.__dict__["session_cache_timeout"] = session_cache_timeout
            if ssl_dh_bits is None and not opts.urn:
                raise TypeError("Missing required property 'ssl_dh_bits'")
            __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
            __props__.__dict__["ssl_queue_threshold"] = ssl_queue_threshold
            if ssl_send_empty_frags is None and not opts.urn:
                raise TypeError("Missing required property 'ssl_send_empty_frags'")
            __props__.__dict__["ssl_send_empty_frags"] = ssl_send_empty_frags
            __props__.__dict__["vdomparam"] = vdomparam
        super(FirewallSslSetting, __self__).__init__(
            'fortios:index/firewallSslSetting:FirewallSslSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abbreviate_handshake: Optional[pulumi.Input[str]] = None,
            cert_cache_capacity: Optional[pulumi.Input[int]] = None,
            cert_cache_timeout: Optional[pulumi.Input[int]] = None,
            kxp_queue_threshold: Optional[pulumi.Input[int]] = None,
            no_matching_cipher_action: Optional[pulumi.Input[str]] = None,
            proxy_connect_timeout: Optional[pulumi.Input[int]] = None,
            session_cache_capacity: Optional[pulumi.Input[int]] = None,
            session_cache_timeout: Optional[pulumi.Input[int]] = None,
            ssl_dh_bits: Optional[pulumi.Input[str]] = None,
            ssl_queue_threshold: Optional[pulumi.Input[int]] = None,
            ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'FirewallSslSetting':
        """
        Get an existing FirewallSslSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallSslSettingState.__new__(_FirewallSslSettingState)

        __props__.__dict__["abbreviate_handshake"] = abbreviate_handshake
        __props__.__dict__["cert_cache_capacity"] = cert_cache_capacity
        __props__.__dict__["cert_cache_timeout"] = cert_cache_timeout
        __props__.__dict__["kxp_queue_threshold"] = kxp_queue_threshold
        __props__.__dict__["no_matching_cipher_action"] = no_matching_cipher_action
        __props__.__dict__["proxy_connect_timeout"] = proxy_connect_timeout
        __props__.__dict__["session_cache_capacity"] = session_cache_capacity
        __props__.__dict__["session_cache_timeout"] = session_cache_timeout
        __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
        __props__.__dict__["ssl_queue_threshold"] = ssl_queue_threshold
        __props__.__dict__["ssl_send_empty_frags"] = ssl_send_empty_frags
        __props__.__dict__["vdomparam"] = vdomparam
        return FirewallSslSetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abbreviateHandshake")
    def abbreviate_handshake(self) -> pulumi.Output[str]:
        return pulumi.get(self, "abbreviate_handshake")

    @property
    @pulumi.getter(name="certCacheCapacity")
    def cert_cache_capacity(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cert_cache_capacity")

    @property
    @pulumi.getter(name="certCacheTimeout")
    def cert_cache_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cert_cache_timeout")

    @property
    @pulumi.getter(name="kxpQueueThreshold")
    def kxp_queue_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "kxp_queue_threshold")

    @property
    @pulumi.getter(name="noMatchingCipherAction")
    def no_matching_cipher_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "no_matching_cipher_action")

    @property
    @pulumi.getter(name="proxyConnectTimeout")
    def proxy_connect_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "proxy_connect_timeout")

    @property
    @pulumi.getter(name="sessionCacheCapacity")
    def session_cache_capacity(self) -> pulumi.Output[int]:
        return pulumi.get(self, "session_cache_capacity")

    @property
    @pulumi.getter(name="sessionCacheTimeout")
    def session_cache_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "session_cache_timeout")

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_dh_bits")

    @property
    @pulumi.getter(name="sslQueueThreshold")
    def ssl_queue_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssl_queue_threshold")

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_send_empty_frags")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

