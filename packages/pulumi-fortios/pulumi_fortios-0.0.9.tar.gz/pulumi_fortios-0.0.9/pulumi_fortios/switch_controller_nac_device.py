# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerNacDeviceArgs', 'SwitchControllerNacDevice']

@pulumi.input_type
class SwitchControllerNacDeviceArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 last_known_port: Optional[pulumi.Input[str]] = None,
                 last_known_switch: Optional[pulumi.Input[str]] = None,
                 last_seen: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mac_policy: Optional[pulumi.Input[str]] = None,
                 matched_nac_policy: Optional[pulumi.Input[str]] = None,
                 port_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerNacDevice resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if last_known_port is not None:
            pulumi.set(__self__, "last_known_port", last_known_port)
        if last_known_switch is not None:
            pulumi.set(__self__, "last_known_switch", last_known_switch)
        if last_seen is not None:
            pulumi.set(__self__, "last_seen", last_seen)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mac_policy is not None:
            pulumi.set(__self__, "mac_policy", mac_policy)
        if matched_nac_policy is not None:
            pulumi.set(__self__, "matched_nac_policy", matched_nac_policy)
        if port_policy is not None:
            pulumi.set(__self__, "port_policy", port_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="lastKnownPort")
    def last_known_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_known_port")

    @last_known_port.setter
    def last_known_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_known_port", value)

    @property
    @pulumi.getter(name="lastKnownSwitch")
    def last_known_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_known_switch")

    @last_known_switch.setter
    def last_known_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_known_switch", value)

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_seen")

    @last_seen.setter
    def last_seen(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_seen", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="macPolicy")
    def mac_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_policy")

    @mac_policy.setter
    def mac_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_policy", value)

    @property
    @pulumi.getter(name="matchedNacPolicy")
    def matched_nac_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "matched_nac_policy")

    @matched_nac_policy.setter
    def matched_nac_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matched_nac_policy", value)

    @property
    @pulumi.getter(name="portPolicy")
    def port_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_policy")

    @port_policy.setter
    def port_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_policy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchControllerNacDeviceState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 last_known_port: Optional[pulumi.Input[str]] = None,
                 last_known_switch: Optional[pulumi.Input[str]] = None,
                 last_seen: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mac_policy: Optional[pulumi.Input[str]] = None,
                 matched_nac_policy: Optional[pulumi.Input[str]] = None,
                 port_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerNacDevice resources.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if last_known_port is not None:
            pulumi.set(__self__, "last_known_port", last_known_port)
        if last_known_switch is not None:
            pulumi.set(__self__, "last_known_switch", last_known_switch)
        if last_seen is not None:
            pulumi.set(__self__, "last_seen", last_seen)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mac_policy is not None:
            pulumi.set(__self__, "mac_policy", mac_policy)
        if matched_nac_policy is not None:
            pulumi.set(__self__, "matched_nac_policy", matched_nac_policy)
        if port_policy is not None:
            pulumi.set(__self__, "port_policy", port_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="lastKnownPort")
    def last_known_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_known_port")

    @last_known_port.setter
    def last_known_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_known_port", value)

    @property
    @pulumi.getter(name="lastKnownSwitch")
    def last_known_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_known_switch")

    @last_known_switch.setter
    def last_known_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_known_switch", value)

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_seen")

    @last_seen.setter
    def last_seen(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_seen", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="macPolicy")
    def mac_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_policy")

    @mac_policy.setter
    def mac_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_policy", value)

    @property
    @pulumi.getter(name="matchedNacPolicy")
    def matched_nac_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "matched_nac_policy")

    @matched_nac_policy.setter
    def matched_nac_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matched_nac_policy", value)

    @property
    @pulumi.getter(name="portPolicy")
    def port_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_policy")

    @port_policy.setter
    def port_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_policy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchControllerNacDevice(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 last_known_port: Optional[pulumi.Input[str]] = None,
                 last_known_switch: Optional[pulumi.Input[str]] = None,
                 last_seen: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mac_policy: Optional[pulumi.Input[str]] = None,
                 matched_nac_policy: Optional[pulumi.Input[str]] = None,
                 port_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerNacDevice resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerNacDeviceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerNacDevice resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerNacDeviceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerNacDeviceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 last_known_port: Optional[pulumi.Input[str]] = None,
                 last_known_switch: Optional[pulumi.Input[str]] = None,
                 last_seen: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mac_policy: Optional[pulumi.Input[str]] = None,
                 matched_nac_policy: Optional[pulumi.Input[str]] = None,
                 port_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerNacDeviceArgs.__new__(SwitchControllerNacDeviceArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["last_known_port"] = last_known_port
            __props__.__dict__["last_known_switch"] = last_known_switch
            __props__.__dict__["last_seen"] = last_seen
            __props__.__dict__["mac"] = mac
            __props__.__dict__["mac_policy"] = mac_policy
            __props__.__dict__["matched_nac_policy"] = matched_nac_policy
            __props__.__dict__["port_policy"] = port_policy
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
        super(SwitchControllerNacDevice, __self__).__init__(
            'fortios:index/switchControllerNacDevice:SwitchControllerNacDevice',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            last_known_port: Optional[pulumi.Input[str]] = None,
            last_known_switch: Optional[pulumi.Input[str]] = None,
            last_seen: Optional[pulumi.Input[int]] = None,
            mac: Optional[pulumi.Input[str]] = None,
            mac_policy: Optional[pulumi.Input[str]] = None,
            matched_nac_policy: Optional[pulumi.Input[str]] = None,
            port_policy: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerNacDevice':
        """
        Get an existing SwitchControllerNacDevice resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerNacDeviceState.__new__(_SwitchControllerNacDeviceState)

        __props__.__dict__["description"] = description
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["last_known_port"] = last_known_port
        __props__.__dict__["last_known_switch"] = last_known_switch
        __props__.__dict__["last_seen"] = last_seen
        __props__.__dict__["mac"] = mac
        __props__.__dict__["mac_policy"] = mac_policy
        __props__.__dict__["matched_nac_policy"] = matched_nac_policy
        __props__.__dict__["port_policy"] = port_policy
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchControllerNacDevice(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="lastKnownPort")
    def last_known_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_known_port")

    @property
    @pulumi.getter(name="lastKnownSwitch")
    def last_known_switch(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_known_switch")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> pulumi.Output[int]:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="macPolicy")
    def mac_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_policy")

    @property
    @pulumi.getter(name="matchedNacPolicy")
    def matched_nac_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "matched_nac_policy")

    @property
    @pulumi.getter(name="portPolicy")
    def port_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "port_policy")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

