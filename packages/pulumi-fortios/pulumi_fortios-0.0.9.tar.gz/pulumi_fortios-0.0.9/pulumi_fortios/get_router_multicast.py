# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetRouterMulticastResult',
    'AwaitableGetRouterMulticastResult',
    'get_router_multicast',
    'get_router_multicast_output',
]

@pulumi.output_type
class GetRouterMulticastResult:
    """
    A collection of values returned by GetRouterMulticast.
    """
    def __init__(__self__, id=None, interfaces=None, multicast_routing=None, pim_sm_globals=None, route_limit=None, route_threshold=None, vdomparam=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interfaces and not isinstance(interfaces, list):
            raise TypeError("Expected argument 'interfaces' to be a list")
        pulumi.set(__self__, "interfaces", interfaces)
        if multicast_routing and not isinstance(multicast_routing, str):
            raise TypeError("Expected argument 'multicast_routing' to be a str")
        pulumi.set(__self__, "multicast_routing", multicast_routing)
        if pim_sm_globals and not isinstance(pim_sm_globals, list):
            raise TypeError("Expected argument 'pim_sm_globals' to be a list")
        pulumi.set(__self__, "pim_sm_globals", pim_sm_globals)
        if route_limit and not isinstance(route_limit, int):
            raise TypeError("Expected argument 'route_limit' to be a int")
        pulumi.set(__self__, "route_limit", route_limit)
        if route_threshold and not isinstance(route_threshold, int):
            raise TypeError("Expected argument 'route_threshold' to be a int")
        pulumi.set(__self__, "route_threshold", route_threshold)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetRouterMulticastInterfaceResult']:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter(name="multicastRouting")
    def multicast_routing(self) -> str:
        return pulumi.get(self, "multicast_routing")

    @property
    @pulumi.getter(name="pimSmGlobals")
    def pim_sm_globals(self) -> Sequence['outputs.GetRouterMulticastPimSmGlobalResult']:
        return pulumi.get(self, "pim_sm_globals")

    @property
    @pulumi.getter(name="routeLimit")
    def route_limit(self) -> int:
        return pulumi.get(self, "route_limit")

    @property
    @pulumi.getter(name="routeThreshold")
    def route_threshold(self) -> int:
        return pulumi.get(self, "route_threshold")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetRouterMulticastResult(GetRouterMulticastResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouterMulticastResult(
            id=self.id,
            interfaces=self.interfaces,
            multicast_routing=self.multicast_routing,
            pim_sm_globals=self.pim_sm_globals,
            route_limit=self.route_limit,
            route_threshold=self.route_threshold,
            vdomparam=self.vdomparam)


def get_router_multicast(vdomparam: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouterMulticastResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getRouterMulticast:GetRouterMulticast', __args__, opts=opts, typ=GetRouterMulticastResult).value

    return AwaitableGetRouterMulticastResult(
        id=pulumi.get(__ret__, 'id'),
        interfaces=pulumi.get(__ret__, 'interfaces'),
        multicast_routing=pulumi.get(__ret__, 'multicast_routing'),
        pim_sm_globals=pulumi.get(__ret__, 'pim_sm_globals'),
        route_limit=pulumi.get(__ret__, 'route_limit'),
        route_threshold=pulumi.get(__ret__, 'route_threshold'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_router_multicast)
def get_router_multicast_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRouterMulticastResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
