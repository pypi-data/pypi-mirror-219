# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSystemFmResult',
    'AwaitableGetSystemFmResult',
    'get_system_fm',
    'get_system_fm_output',
]

@pulumi.output_type
class GetSystemFmResult:
    """
    A collection of values returned by GetSystemFm.
    """
    def __init__(__self__, auto_backup=None, fosid=None, id=None, ip=None, ipsec=None, scheduled_config_restore=None, status=None, vdom=None, vdomparam=None):
        if auto_backup and not isinstance(auto_backup, str):
            raise TypeError("Expected argument 'auto_backup' to be a str")
        pulumi.set(__self__, "auto_backup", auto_backup)
        if fosid and not isinstance(fosid, str):
            raise TypeError("Expected argument 'fosid' to be a str")
        pulumi.set(__self__, "fosid", fosid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if ipsec and not isinstance(ipsec, str):
            raise TypeError("Expected argument 'ipsec' to be a str")
        pulumi.set(__self__, "ipsec", ipsec)
        if scheduled_config_restore and not isinstance(scheduled_config_restore, str):
            raise TypeError("Expected argument 'scheduled_config_restore' to be a str")
        pulumi.set(__self__, "scheduled_config_restore", scheduled_config_restore)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vdom and not isinstance(vdom, str):
            raise TypeError("Expected argument 'vdom' to be a str")
        pulumi.set(__self__, "vdom", vdom)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoBackup")
    def auto_backup(self) -> str:
        return pulumi.get(self, "auto_backup")

    @property
    @pulumi.getter
    def fosid(self) -> str:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ipsec(self) -> str:
        return pulumi.get(self, "ipsec")

    @property
    @pulumi.getter(name="scheduledConfigRestore")
    def scheduled_config_restore(self) -> str:
        return pulumi.get(self, "scheduled_config_restore")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdom(self) -> str:
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetSystemFmResult(GetSystemFmResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemFmResult(
            auto_backup=self.auto_backup,
            fosid=self.fosid,
            id=self.id,
            ip=self.ip,
            ipsec=self.ipsec,
            scheduled_config_restore=self.scheduled_config_restore,
            status=self.status,
            vdom=self.vdom,
            vdomparam=self.vdomparam)


def get_system_fm(vdomparam: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemFmResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemFm:GetSystemFm', __args__, opts=opts, typ=GetSystemFmResult).value

    return AwaitableGetSystemFmResult(
        auto_backup=pulumi.get(__ret__, 'auto_backup'),
        fosid=pulumi.get(__ret__, 'fosid'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        ipsec=pulumi.get(__ret__, 'ipsec'),
        scheduled_config_restore=pulumi.get(__ret__, 'scheduled_config_restore'),
        status=pulumi.get(__ret__, 'status'),
        vdom=pulumi.get(__ret__, 'vdom'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_system_fm)
def get_system_fm_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemFmResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
