# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WebfilterFortiguardArgs', 'WebfilterFortiguard']

@pulumi.input_type
class WebfilterFortiguardArgs:
    def __init__(__self__, *,
                 cache_mem_percent: Optional[pulumi.Input[int]] = None,
                 cache_mem_permille: Optional[pulumi.Input[int]] = None,
                 cache_mode: Optional[pulumi.Input[str]] = None,
                 cache_prefix_match: Optional[pulumi.Input[str]] = None,
                 close_ports: Optional[pulumi.Input[str]] = None,
                 embed_image: Optional[pulumi.Input[str]] = None,
                 ovrd_auth_https: Optional[pulumi.Input[str]] = None,
                 ovrd_auth_port: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_http: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_https: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_https_flow: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_warning: Optional[pulumi.Input[int]] = None,
                 request_packet_size_limit: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 warn_auth_https: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WebfilterFortiguard resource.
        """
        if cache_mem_percent is not None:
            pulumi.set(__self__, "cache_mem_percent", cache_mem_percent)
        if cache_mem_permille is not None:
            pulumi.set(__self__, "cache_mem_permille", cache_mem_permille)
        if cache_mode is not None:
            pulumi.set(__self__, "cache_mode", cache_mode)
        if cache_prefix_match is not None:
            pulumi.set(__self__, "cache_prefix_match", cache_prefix_match)
        if close_ports is not None:
            pulumi.set(__self__, "close_ports", close_ports)
        if embed_image is not None:
            pulumi.set(__self__, "embed_image", embed_image)
        if ovrd_auth_https is not None:
            pulumi.set(__self__, "ovrd_auth_https", ovrd_auth_https)
        if ovrd_auth_port is not None:
            pulumi.set(__self__, "ovrd_auth_port", ovrd_auth_port)
        if ovrd_auth_port_http is not None:
            pulumi.set(__self__, "ovrd_auth_port_http", ovrd_auth_port_http)
        if ovrd_auth_port_https is not None:
            pulumi.set(__self__, "ovrd_auth_port_https", ovrd_auth_port_https)
        if ovrd_auth_port_https_flow is not None:
            pulumi.set(__self__, "ovrd_auth_port_https_flow", ovrd_auth_port_https_flow)
        if ovrd_auth_port_warning is not None:
            pulumi.set(__self__, "ovrd_auth_port_warning", ovrd_auth_port_warning)
        if request_packet_size_limit is not None:
            pulumi.set(__self__, "request_packet_size_limit", request_packet_size_limit)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if warn_auth_https is not None:
            pulumi.set(__self__, "warn_auth_https", warn_auth_https)

    @property
    @pulumi.getter(name="cacheMemPercent")
    def cache_mem_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_mem_percent")

    @cache_mem_percent.setter
    def cache_mem_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_mem_percent", value)

    @property
    @pulumi.getter(name="cacheMemPermille")
    def cache_mem_permille(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_mem_permille")

    @cache_mem_permille.setter
    def cache_mem_permille(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_mem_permille", value)

    @property
    @pulumi.getter(name="cacheMode")
    def cache_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_mode")

    @cache_mode.setter
    def cache_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_mode", value)

    @property
    @pulumi.getter(name="cachePrefixMatch")
    def cache_prefix_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_prefix_match")

    @cache_prefix_match.setter
    def cache_prefix_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_prefix_match", value)

    @property
    @pulumi.getter(name="closePorts")
    def close_ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "close_ports")

    @close_ports.setter
    def close_ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "close_ports", value)

    @property
    @pulumi.getter(name="embedImage")
    def embed_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "embed_image")

    @embed_image.setter
    def embed_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "embed_image", value)

    @property
    @pulumi.getter(name="ovrdAuthHttps")
    def ovrd_auth_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ovrd_auth_https")

    @ovrd_auth_https.setter
    def ovrd_auth_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_auth_https", value)

    @property
    @pulumi.getter(name="ovrdAuthPort")
    def ovrd_auth_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ovrd_auth_port")

    @ovrd_auth_port.setter
    def ovrd_auth_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovrd_auth_port", value)

    @property
    @pulumi.getter(name="ovrdAuthPortHttp")
    def ovrd_auth_port_http(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ovrd_auth_port_http")

    @ovrd_auth_port_http.setter
    def ovrd_auth_port_http(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovrd_auth_port_http", value)

    @property
    @pulumi.getter(name="ovrdAuthPortHttps")
    def ovrd_auth_port_https(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ovrd_auth_port_https")

    @ovrd_auth_port_https.setter
    def ovrd_auth_port_https(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovrd_auth_port_https", value)

    @property
    @pulumi.getter(name="ovrdAuthPortHttpsFlow")
    def ovrd_auth_port_https_flow(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ovrd_auth_port_https_flow")

    @ovrd_auth_port_https_flow.setter
    def ovrd_auth_port_https_flow(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovrd_auth_port_https_flow", value)

    @property
    @pulumi.getter(name="ovrdAuthPortWarning")
    def ovrd_auth_port_warning(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ovrd_auth_port_warning")

    @ovrd_auth_port_warning.setter
    def ovrd_auth_port_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovrd_auth_port_warning", value)

    @property
    @pulumi.getter(name="requestPacketSizeLimit")
    def request_packet_size_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "request_packet_size_limit")

    @request_packet_size_limit.setter
    def request_packet_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_packet_size_limit", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="warnAuthHttps")
    def warn_auth_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warn_auth_https")

    @warn_auth_https.setter
    def warn_auth_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warn_auth_https", value)


@pulumi.input_type
class _WebfilterFortiguardState:
    def __init__(__self__, *,
                 cache_mem_percent: Optional[pulumi.Input[int]] = None,
                 cache_mem_permille: Optional[pulumi.Input[int]] = None,
                 cache_mode: Optional[pulumi.Input[str]] = None,
                 cache_prefix_match: Optional[pulumi.Input[str]] = None,
                 close_ports: Optional[pulumi.Input[str]] = None,
                 embed_image: Optional[pulumi.Input[str]] = None,
                 ovrd_auth_https: Optional[pulumi.Input[str]] = None,
                 ovrd_auth_port: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_http: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_https: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_https_flow: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_warning: Optional[pulumi.Input[int]] = None,
                 request_packet_size_limit: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 warn_auth_https: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WebfilterFortiguard resources.
        """
        if cache_mem_percent is not None:
            pulumi.set(__self__, "cache_mem_percent", cache_mem_percent)
        if cache_mem_permille is not None:
            pulumi.set(__self__, "cache_mem_permille", cache_mem_permille)
        if cache_mode is not None:
            pulumi.set(__self__, "cache_mode", cache_mode)
        if cache_prefix_match is not None:
            pulumi.set(__self__, "cache_prefix_match", cache_prefix_match)
        if close_ports is not None:
            pulumi.set(__self__, "close_ports", close_ports)
        if embed_image is not None:
            pulumi.set(__self__, "embed_image", embed_image)
        if ovrd_auth_https is not None:
            pulumi.set(__self__, "ovrd_auth_https", ovrd_auth_https)
        if ovrd_auth_port is not None:
            pulumi.set(__self__, "ovrd_auth_port", ovrd_auth_port)
        if ovrd_auth_port_http is not None:
            pulumi.set(__self__, "ovrd_auth_port_http", ovrd_auth_port_http)
        if ovrd_auth_port_https is not None:
            pulumi.set(__self__, "ovrd_auth_port_https", ovrd_auth_port_https)
        if ovrd_auth_port_https_flow is not None:
            pulumi.set(__self__, "ovrd_auth_port_https_flow", ovrd_auth_port_https_flow)
        if ovrd_auth_port_warning is not None:
            pulumi.set(__self__, "ovrd_auth_port_warning", ovrd_auth_port_warning)
        if request_packet_size_limit is not None:
            pulumi.set(__self__, "request_packet_size_limit", request_packet_size_limit)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if warn_auth_https is not None:
            pulumi.set(__self__, "warn_auth_https", warn_auth_https)

    @property
    @pulumi.getter(name="cacheMemPercent")
    def cache_mem_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_mem_percent")

    @cache_mem_percent.setter
    def cache_mem_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_mem_percent", value)

    @property
    @pulumi.getter(name="cacheMemPermille")
    def cache_mem_permille(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_mem_permille")

    @cache_mem_permille.setter
    def cache_mem_permille(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_mem_permille", value)

    @property
    @pulumi.getter(name="cacheMode")
    def cache_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_mode")

    @cache_mode.setter
    def cache_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_mode", value)

    @property
    @pulumi.getter(name="cachePrefixMatch")
    def cache_prefix_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_prefix_match")

    @cache_prefix_match.setter
    def cache_prefix_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_prefix_match", value)

    @property
    @pulumi.getter(name="closePorts")
    def close_ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "close_ports")

    @close_ports.setter
    def close_ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "close_ports", value)

    @property
    @pulumi.getter(name="embedImage")
    def embed_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "embed_image")

    @embed_image.setter
    def embed_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "embed_image", value)

    @property
    @pulumi.getter(name="ovrdAuthHttps")
    def ovrd_auth_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ovrd_auth_https")

    @ovrd_auth_https.setter
    def ovrd_auth_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_auth_https", value)

    @property
    @pulumi.getter(name="ovrdAuthPort")
    def ovrd_auth_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ovrd_auth_port")

    @ovrd_auth_port.setter
    def ovrd_auth_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovrd_auth_port", value)

    @property
    @pulumi.getter(name="ovrdAuthPortHttp")
    def ovrd_auth_port_http(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ovrd_auth_port_http")

    @ovrd_auth_port_http.setter
    def ovrd_auth_port_http(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovrd_auth_port_http", value)

    @property
    @pulumi.getter(name="ovrdAuthPortHttps")
    def ovrd_auth_port_https(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ovrd_auth_port_https")

    @ovrd_auth_port_https.setter
    def ovrd_auth_port_https(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovrd_auth_port_https", value)

    @property
    @pulumi.getter(name="ovrdAuthPortHttpsFlow")
    def ovrd_auth_port_https_flow(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ovrd_auth_port_https_flow")

    @ovrd_auth_port_https_flow.setter
    def ovrd_auth_port_https_flow(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovrd_auth_port_https_flow", value)

    @property
    @pulumi.getter(name="ovrdAuthPortWarning")
    def ovrd_auth_port_warning(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ovrd_auth_port_warning")

    @ovrd_auth_port_warning.setter
    def ovrd_auth_port_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovrd_auth_port_warning", value)

    @property
    @pulumi.getter(name="requestPacketSizeLimit")
    def request_packet_size_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "request_packet_size_limit")

    @request_packet_size_limit.setter
    def request_packet_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_packet_size_limit", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="warnAuthHttps")
    def warn_auth_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warn_auth_https")

    @warn_auth_https.setter
    def warn_auth_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warn_auth_https", value)


class WebfilterFortiguard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_mem_percent: Optional[pulumi.Input[int]] = None,
                 cache_mem_permille: Optional[pulumi.Input[int]] = None,
                 cache_mode: Optional[pulumi.Input[str]] = None,
                 cache_prefix_match: Optional[pulumi.Input[str]] = None,
                 close_ports: Optional[pulumi.Input[str]] = None,
                 embed_image: Optional[pulumi.Input[str]] = None,
                 ovrd_auth_https: Optional[pulumi.Input[str]] = None,
                 ovrd_auth_port: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_http: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_https: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_https_flow: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_warning: Optional[pulumi.Input[int]] = None,
                 request_packet_size_limit: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 warn_auth_https: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WebfilterFortiguard resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WebfilterFortiguardArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WebfilterFortiguard resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WebfilterFortiguardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebfilterFortiguardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_mem_percent: Optional[pulumi.Input[int]] = None,
                 cache_mem_permille: Optional[pulumi.Input[int]] = None,
                 cache_mode: Optional[pulumi.Input[str]] = None,
                 cache_prefix_match: Optional[pulumi.Input[str]] = None,
                 close_ports: Optional[pulumi.Input[str]] = None,
                 embed_image: Optional[pulumi.Input[str]] = None,
                 ovrd_auth_https: Optional[pulumi.Input[str]] = None,
                 ovrd_auth_port: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_http: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_https: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_https_flow: Optional[pulumi.Input[int]] = None,
                 ovrd_auth_port_warning: Optional[pulumi.Input[int]] = None,
                 request_packet_size_limit: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 warn_auth_https: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebfilterFortiguardArgs.__new__(WebfilterFortiguardArgs)

            __props__.__dict__["cache_mem_percent"] = cache_mem_percent
            __props__.__dict__["cache_mem_permille"] = cache_mem_permille
            __props__.__dict__["cache_mode"] = cache_mode
            __props__.__dict__["cache_prefix_match"] = cache_prefix_match
            __props__.__dict__["close_ports"] = close_ports
            __props__.__dict__["embed_image"] = embed_image
            __props__.__dict__["ovrd_auth_https"] = ovrd_auth_https
            __props__.__dict__["ovrd_auth_port"] = ovrd_auth_port
            __props__.__dict__["ovrd_auth_port_http"] = ovrd_auth_port_http
            __props__.__dict__["ovrd_auth_port_https"] = ovrd_auth_port_https
            __props__.__dict__["ovrd_auth_port_https_flow"] = ovrd_auth_port_https_flow
            __props__.__dict__["ovrd_auth_port_warning"] = ovrd_auth_port_warning
            __props__.__dict__["request_packet_size_limit"] = request_packet_size_limit
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["warn_auth_https"] = warn_auth_https
        super(WebfilterFortiguard, __self__).__init__(
            'fortios:index/webfilterFortiguard:WebfilterFortiguard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cache_mem_percent: Optional[pulumi.Input[int]] = None,
            cache_mem_permille: Optional[pulumi.Input[int]] = None,
            cache_mode: Optional[pulumi.Input[str]] = None,
            cache_prefix_match: Optional[pulumi.Input[str]] = None,
            close_ports: Optional[pulumi.Input[str]] = None,
            embed_image: Optional[pulumi.Input[str]] = None,
            ovrd_auth_https: Optional[pulumi.Input[str]] = None,
            ovrd_auth_port: Optional[pulumi.Input[int]] = None,
            ovrd_auth_port_http: Optional[pulumi.Input[int]] = None,
            ovrd_auth_port_https: Optional[pulumi.Input[int]] = None,
            ovrd_auth_port_https_flow: Optional[pulumi.Input[int]] = None,
            ovrd_auth_port_warning: Optional[pulumi.Input[int]] = None,
            request_packet_size_limit: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            warn_auth_https: Optional[pulumi.Input[str]] = None) -> 'WebfilterFortiguard':
        """
        Get an existing WebfilterFortiguard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebfilterFortiguardState.__new__(_WebfilterFortiguardState)

        __props__.__dict__["cache_mem_percent"] = cache_mem_percent
        __props__.__dict__["cache_mem_permille"] = cache_mem_permille
        __props__.__dict__["cache_mode"] = cache_mode
        __props__.__dict__["cache_prefix_match"] = cache_prefix_match
        __props__.__dict__["close_ports"] = close_ports
        __props__.__dict__["embed_image"] = embed_image
        __props__.__dict__["ovrd_auth_https"] = ovrd_auth_https
        __props__.__dict__["ovrd_auth_port"] = ovrd_auth_port
        __props__.__dict__["ovrd_auth_port_http"] = ovrd_auth_port_http
        __props__.__dict__["ovrd_auth_port_https"] = ovrd_auth_port_https
        __props__.__dict__["ovrd_auth_port_https_flow"] = ovrd_auth_port_https_flow
        __props__.__dict__["ovrd_auth_port_warning"] = ovrd_auth_port_warning
        __props__.__dict__["request_packet_size_limit"] = request_packet_size_limit
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["warn_auth_https"] = warn_auth_https
        return WebfilterFortiguard(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cacheMemPercent")
    def cache_mem_percent(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cache_mem_percent")

    @property
    @pulumi.getter(name="cacheMemPermille")
    def cache_mem_permille(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cache_mem_permille")

    @property
    @pulumi.getter(name="cacheMode")
    def cache_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_mode")

    @property
    @pulumi.getter(name="cachePrefixMatch")
    def cache_prefix_match(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_prefix_match")

    @property
    @pulumi.getter(name="closePorts")
    def close_ports(self) -> pulumi.Output[str]:
        return pulumi.get(self, "close_ports")

    @property
    @pulumi.getter(name="embedImage")
    def embed_image(self) -> pulumi.Output[str]:
        return pulumi.get(self, "embed_image")

    @property
    @pulumi.getter(name="ovrdAuthHttps")
    def ovrd_auth_https(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ovrd_auth_https")

    @property
    @pulumi.getter(name="ovrdAuthPort")
    def ovrd_auth_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ovrd_auth_port")

    @property
    @pulumi.getter(name="ovrdAuthPortHttp")
    def ovrd_auth_port_http(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ovrd_auth_port_http")

    @property
    @pulumi.getter(name="ovrdAuthPortHttps")
    def ovrd_auth_port_https(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ovrd_auth_port_https")

    @property
    @pulumi.getter(name="ovrdAuthPortHttpsFlow")
    def ovrd_auth_port_https_flow(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ovrd_auth_port_https_flow")

    @property
    @pulumi.getter(name="ovrdAuthPortWarning")
    def ovrd_auth_port_warning(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ovrd_auth_port_warning")

    @property
    @pulumi.getter(name="requestPacketSizeLimit")
    def request_packet_size_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "request_packet_size_limit")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="warnAuthHttps")
    def warn_auth_https(self) -> pulumi.Output[str]:
        return pulumi.get(self, "warn_auth_https")

