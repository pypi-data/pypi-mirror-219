# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AntivirusProfileArgs', 'AntivirusProfile']

@pulumi.input_type
class AntivirusProfileArgs:
    def __init__(__self__, *,
                 analytics_accept_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_bl_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_db: Optional[pulumi.Input[str]] = None,
                 analytics_ignore_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_max_upload: Optional[pulumi.Input[int]] = None,
                 analytics_wl_filetype: Optional[pulumi.Input[int]] = None,
                 av_block_log: Optional[pulumi.Input[str]] = None,
                 av_virus_log: Optional[pulumi.Input[str]] = None,
                 cifs: Optional[pulumi.Input['AntivirusProfileCifsArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input['AntivirusProfileContentDisarmArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_threat_feed: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external_blocklist_enable_all: Optional[pulumi.Input[str]] = None,
                 external_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input['AntivirusProfileExternalBlocklistArgs']]]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 fortiai_error_action: Optional[pulumi.Input[str]] = None,
                 fortiai_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortindr_error_action: Optional[pulumi.Input[str]] = None,
                 fortindr_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_error_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_max_upload: Optional[pulumi.Input[int]] = None,
                 fortisandbox_mode: Optional[pulumi.Input[str]] = None,
                 fortisandbox_timeout_action: Optional[pulumi.Input[str]] = None,
                 ftgd_analytics: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input['AntivirusProfileFtpArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input['AntivirusProfileHttpArgs']] = None,
                 imap: Optional[pulumi.Input['AntivirusProfileImapArgs']] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 mapi: Optional[pulumi.Input['AntivirusProfileMapiArgs']] = None,
                 mobile_malware_db: Optional[pulumi.Input[str]] = None,
                 nac_quar: Optional[pulumi.Input['AntivirusProfileNacQuarArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input['AntivirusProfileNntpArgs']] = None,
                 outbreak_prevention: Optional[pulumi.Input['AntivirusProfileOutbreakPreventionArgs']] = None,
                 outbreak_prevention_archive_scan: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input['AntivirusProfilePop3Args']] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 scan_mode: Optional[pulumi.Input[str]] = None,
                 smb: Optional[pulumi.Input['AntivirusProfileSmbArgs']] = None,
                 smtp: Optional[pulumi.Input['AntivirusProfileSmtpArgs']] = None,
                 ssh: Optional[pulumi.Input['AntivirusProfileSshArgs']] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AntivirusProfile resource.
        """
        if analytics_accept_filetype is not None:
            pulumi.set(__self__, "analytics_accept_filetype", analytics_accept_filetype)
        if analytics_bl_filetype is not None:
            pulumi.set(__self__, "analytics_bl_filetype", analytics_bl_filetype)
        if analytics_db is not None:
            pulumi.set(__self__, "analytics_db", analytics_db)
        if analytics_ignore_filetype is not None:
            pulumi.set(__self__, "analytics_ignore_filetype", analytics_ignore_filetype)
        if analytics_max_upload is not None:
            pulumi.set(__self__, "analytics_max_upload", analytics_max_upload)
        if analytics_wl_filetype is not None:
            pulumi.set(__self__, "analytics_wl_filetype", analytics_wl_filetype)
        if av_block_log is not None:
            pulumi.set(__self__, "av_block_log", av_block_log)
        if av_virus_log is not None:
            pulumi.set(__self__, "av_virus_log", av_virus_log)
        if cifs is not None:
            pulumi.set(__self__, "cifs", cifs)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ems_threat_feed is not None:
            pulumi.set(__self__, "ems_threat_feed", ems_threat_feed)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if external_blocklist_enable_all is not None:
            pulumi.set(__self__, "external_blocklist_enable_all", external_blocklist_enable_all)
        if external_blocklists is not None:
            pulumi.set(__self__, "external_blocklists", external_blocklists)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if fortiai_error_action is not None:
            pulumi.set(__self__, "fortiai_error_action", fortiai_error_action)
        if fortiai_timeout_action is not None:
            pulumi.set(__self__, "fortiai_timeout_action", fortiai_timeout_action)
        if fortindr_error_action is not None:
            pulumi.set(__self__, "fortindr_error_action", fortindr_error_action)
        if fortindr_timeout_action is not None:
            pulumi.set(__self__, "fortindr_timeout_action", fortindr_timeout_action)
        if fortisandbox_error_action is not None:
            pulumi.set(__self__, "fortisandbox_error_action", fortisandbox_error_action)
        if fortisandbox_max_upload is not None:
            pulumi.set(__self__, "fortisandbox_max_upload", fortisandbox_max_upload)
        if fortisandbox_mode is not None:
            pulumi.set(__self__, "fortisandbox_mode", fortisandbox_mode)
        if fortisandbox_timeout_action is not None:
            pulumi.set(__self__, "fortisandbox_timeout_action", fortisandbox_timeout_action)
        if ftgd_analytics is not None:
            pulumi.set(__self__, "ftgd_analytics", ftgd_analytics)
        if ftp is not None:
            pulumi.set(__self__, "ftp", ftp)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if imap is not None:
            pulumi.set(__self__, "imap", imap)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if mapi is not None:
            pulumi.set(__self__, "mapi", mapi)
        if mobile_malware_db is not None:
            pulumi.set(__self__, "mobile_malware_db", mobile_malware_db)
        if nac_quar is not None:
            pulumi.set(__self__, "nac_quar", nac_quar)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nntp is not None:
            pulumi.set(__self__, "nntp", nntp)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if outbreak_prevention_archive_scan is not None:
            pulumi.set(__self__, "outbreak_prevention_archive_scan", outbreak_prevention_archive_scan)
        if pop3 is not None:
            pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if scan_mode is not None:
            pulumi.set(__self__, "scan_mode", scan_mode)
        if smb is not None:
            pulumi.set(__self__, "smb", smb)
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="analyticsAcceptFiletype")
    def analytics_accept_filetype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "analytics_accept_filetype")

    @analytics_accept_filetype.setter
    def analytics_accept_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_accept_filetype", value)

    @property
    @pulumi.getter(name="analyticsBlFiletype")
    def analytics_bl_filetype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "analytics_bl_filetype")

    @analytics_bl_filetype.setter
    def analytics_bl_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_bl_filetype", value)

    @property
    @pulumi.getter(name="analyticsDb")
    def analytics_db(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "analytics_db")

    @analytics_db.setter
    def analytics_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "analytics_db", value)

    @property
    @pulumi.getter(name="analyticsIgnoreFiletype")
    def analytics_ignore_filetype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "analytics_ignore_filetype")

    @analytics_ignore_filetype.setter
    def analytics_ignore_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_ignore_filetype", value)

    @property
    @pulumi.getter(name="analyticsMaxUpload")
    def analytics_max_upload(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "analytics_max_upload")

    @analytics_max_upload.setter
    def analytics_max_upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_max_upload", value)

    @property
    @pulumi.getter(name="analyticsWlFiletype")
    def analytics_wl_filetype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "analytics_wl_filetype")

    @analytics_wl_filetype.setter
    def analytics_wl_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_wl_filetype", value)

    @property
    @pulumi.getter(name="avBlockLog")
    def av_block_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_block_log")

    @av_block_log.setter
    def av_block_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_block_log", value)

    @property
    @pulumi.getter(name="avVirusLog")
    def av_virus_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_virus_log")

    @av_virus_log.setter
    def av_virus_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_virus_log", value)

    @property
    @pulumi.getter
    def cifs(self) -> Optional[pulumi.Input['AntivirusProfileCifsArgs']]:
        return pulumi.get(self, "cifs")

    @cifs.setter
    def cifs(self, value: Optional[pulumi.Input['AntivirusProfileCifsArgs']]):
        pulumi.set(self, "cifs", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input['AntivirusProfileContentDisarmArgs']]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input['AntivirusProfileContentDisarmArgs']]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emsThreatFeed")
    def ems_threat_feed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ems_threat_feed")

    @ems_threat_feed.setter
    def ems_threat_feed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_threat_feed", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="externalBlocklistEnableAll")
    def external_blocklist_enable_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist_enable_all")

    @external_blocklist_enable_all.setter
    def external_blocklist_enable_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist_enable_all", value)

    @property
    @pulumi.getter(name="externalBlocklists")
    def external_blocklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntivirusProfileExternalBlocklistArgs']]]]:
        return pulumi.get(self, "external_blocklists")

    @external_blocklists.setter
    def external_blocklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntivirusProfileExternalBlocklistArgs']]]]):
        pulumi.set(self, "external_blocklists", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter(name="fortiaiErrorAction")
    def fortiai_error_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai_error_action")

    @fortiai_error_action.setter
    def fortiai_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai_error_action", value)

    @property
    @pulumi.getter(name="fortiaiTimeoutAction")
    def fortiai_timeout_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai_timeout_action")

    @fortiai_timeout_action.setter
    def fortiai_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai_timeout_action", value)

    @property
    @pulumi.getter(name="fortindrErrorAction")
    def fortindr_error_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr_error_action")

    @fortindr_error_action.setter
    def fortindr_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr_error_action", value)

    @property
    @pulumi.getter(name="fortindrTimeoutAction")
    def fortindr_timeout_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr_timeout_action")

    @fortindr_timeout_action.setter
    def fortindr_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr_timeout_action", value)

    @property
    @pulumi.getter(name="fortisandboxErrorAction")
    def fortisandbox_error_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox_error_action")

    @fortisandbox_error_action.setter
    def fortisandbox_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_error_action", value)

    @property
    @pulumi.getter(name="fortisandboxMaxUpload")
    def fortisandbox_max_upload(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortisandbox_max_upload")

    @fortisandbox_max_upload.setter
    def fortisandbox_max_upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortisandbox_max_upload", value)

    @property
    @pulumi.getter(name="fortisandboxMode")
    def fortisandbox_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox_mode")

    @fortisandbox_mode.setter
    def fortisandbox_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_mode", value)

    @property
    @pulumi.getter(name="fortisandboxTimeoutAction")
    def fortisandbox_timeout_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox_timeout_action")

    @fortisandbox_timeout_action.setter
    def fortisandbox_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_timeout_action", value)

    @property
    @pulumi.getter(name="ftgdAnalytics")
    def ftgd_analytics(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftgd_analytics")

    @ftgd_analytics.setter
    def ftgd_analytics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftgd_analytics", value)

    @property
    @pulumi.getter
    def ftp(self) -> Optional[pulumi.Input['AntivirusProfileFtpArgs']]:
        return pulumi.get(self, "ftp")

    @ftp.setter
    def ftp(self, value: Optional[pulumi.Input['AntivirusProfileFtpArgs']]):
        pulumi.set(self, "ftp", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['AntivirusProfileHttpArgs']]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['AntivirusProfileHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def imap(self) -> Optional[pulumi.Input['AntivirusProfileImapArgs']]:
        return pulumi.get(self, "imap")

    @imap.setter
    def imap(self, value: Optional[pulumi.Input['AntivirusProfileImapArgs']]):
        pulumi.set(self, "imap", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter
    def mapi(self) -> Optional[pulumi.Input['AntivirusProfileMapiArgs']]:
        return pulumi.get(self, "mapi")

    @mapi.setter
    def mapi(self, value: Optional[pulumi.Input['AntivirusProfileMapiArgs']]):
        pulumi.set(self, "mapi", value)

    @property
    @pulumi.getter(name="mobileMalwareDb")
    def mobile_malware_db(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mobile_malware_db")

    @mobile_malware_db.setter
    def mobile_malware_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile_malware_db", value)

    @property
    @pulumi.getter(name="nacQuar")
    def nac_quar(self) -> Optional[pulumi.Input['AntivirusProfileNacQuarArgs']]:
        return pulumi.get(self, "nac_quar")

    @nac_quar.setter
    def nac_quar(self, value: Optional[pulumi.Input['AntivirusProfileNacQuarArgs']]):
        pulumi.set(self, "nac_quar", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nntp(self) -> Optional[pulumi.Input['AntivirusProfileNntpArgs']]:
        return pulumi.get(self, "nntp")

    @nntp.setter
    def nntp(self, value: Optional[pulumi.Input['AntivirusProfileNntpArgs']]):
        pulumi.set(self, "nntp", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input['AntivirusProfileOutbreakPreventionArgs']]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input['AntivirusProfileOutbreakPreventionArgs']]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter(name="outbreakPreventionArchiveScan")
    def outbreak_prevention_archive_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention_archive_scan")

    @outbreak_prevention_archive_scan.setter
    def outbreak_prevention_archive_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention_archive_scan", value)

    @property
    @pulumi.getter
    def pop3(self) -> Optional[pulumi.Input['AntivirusProfilePop3Args']]:
        return pulumi.get(self, "pop3")

    @pop3.setter
    def pop3(self, value: Optional[pulumi.Input['AntivirusProfilePop3Args']]):
        pulumi.set(self, "pop3", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter(name="scanMode")
    def scan_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_mode")

    @scan_mode.setter
    def scan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_mode", value)

    @property
    @pulumi.getter
    def smb(self) -> Optional[pulumi.Input['AntivirusProfileSmbArgs']]:
        return pulumi.get(self, "smb")

    @smb.setter
    def smb(self, value: Optional[pulumi.Input['AntivirusProfileSmbArgs']]):
        pulumi.set(self, "smb", value)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['AntivirusProfileSmtpArgs']]:
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['AntivirusProfileSmtpArgs']]):
        pulumi.set(self, "smtp", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['AntivirusProfileSshArgs']]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['AntivirusProfileSshArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _AntivirusProfileState:
    def __init__(__self__, *,
                 analytics_accept_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_bl_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_db: Optional[pulumi.Input[str]] = None,
                 analytics_ignore_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_max_upload: Optional[pulumi.Input[int]] = None,
                 analytics_wl_filetype: Optional[pulumi.Input[int]] = None,
                 av_block_log: Optional[pulumi.Input[str]] = None,
                 av_virus_log: Optional[pulumi.Input[str]] = None,
                 cifs: Optional[pulumi.Input['AntivirusProfileCifsArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input['AntivirusProfileContentDisarmArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_threat_feed: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external_blocklist_enable_all: Optional[pulumi.Input[str]] = None,
                 external_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input['AntivirusProfileExternalBlocklistArgs']]]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 fortiai_error_action: Optional[pulumi.Input[str]] = None,
                 fortiai_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortindr_error_action: Optional[pulumi.Input[str]] = None,
                 fortindr_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_error_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_max_upload: Optional[pulumi.Input[int]] = None,
                 fortisandbox_mode: Optional[pulumi.Input[str]] = None,
                 fortisandbox_timeout_action: Optional[pulumi.Input[str]] = None,
                 ftgd_analytics: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input['AntivirusProfileFtpArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input['AntivirusProfileHttpArgs']] = None,
                 imap: Optional[pulumi.Input['AntivirusProfileImapArgs']] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 mapi: Optional[pulumi.Input['AntivirusProfileMapiArgs']] = None,
                 mobile_malware_db: Optional[pulumi.Input[str]] = None,
                 nac_quar: Optional[pulumi.Input['AntivirusProfileNacQuarArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input['AntivirusProfileNntpArgs']] = None,
                 outbreak_prevention: Optional[pulumi.Input['AntivirusProfileOutbreakPreventionArgs']] = None,
                 outbreak_prevention_archive_scan: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input['AntivirusProfilePop3Args']] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 scan_mode: Optional[pulumi.Input[str]] = None,
                 smb: Optional[pulumi.Input['AntivirusProfileSmbArgs']] = None,
                 smtp: Optional[pulumi.Input['AntivirusProfileSmtpArgs']] = None,
                 ssh: Optional[pulumi.Input['AntivirusProfileSshArgs']] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AntivirusProfile resources.
        """
        if analytics_accept_filetype is not None:
            pulumi.set(__self__, "analytics_accept_filetype", analytics_accept_filetype)
        if analytics_bl_filetype is not None:
            pulumi.set(__self__, "analytics_bl_filetype", analytics_bl_filetype)
        if analytics_db is not None:
            pulumi.set(__self__, "analytics_db", analytics_db)
        if analytics_ignore_filetype is not None:
            pulumi.set(__self__, "analytics_ignore_filetype", analytics_ignore_filetype)
        if analytics_max_upload is not None:
            pulumi.set(__self__, "analytics_max_upload", analytics_max_upload)
        if analytics_wl_filetype is not None:
            pulumi.set(__self__, "analytics_wl_filetype", analytics_wl_filetype)
        if av_block_log is not None:
            pulumi.set(__self__, "av_block_log", av_block_log)
        if av_virus_log is not None:
            pulumi.set(__self__, "av_virus_log", av_virus_log)
        if cifs is not None:
            pulumi.set(__self__, "cifs", cifs)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ems_threat_feed is not None:
            pulumi.set(__self__, "ems_threat_feed", ems_threat_feed)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if external_blocklist_enable_all is not None:
            pulumi.set(__self__, "external_blocklist_enable_all", external_blocklist_enable_all)
        if external_blocklists is not None:
            pulumi.set(__self__, "external_blocklists", external_blocklists)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if fortiai_error_action is not None:
            pulumi.set(__self__, "fortiai_error_action", fortiai_error_action)
        if fortiai_timeout_action is not None:
            pulumi.set(__self__, "fortiai_timeout_action", fortiai_timeout_action)
        if fortindr_error_action is not None:
            pulumi.set(__self__, "fortindr_error_action", fortindr_error_action)
        if fortindr_timeout_action is not None:
            pulumi.set(__self__, "fortindr_timeout_action", fortindr_timeout_action)
        if fortisandbox_error_action is not None:
            pulumi.set(__self__, "fortisandbox_error_action", fortisandbox_error_action)
        if fortisandbox_max_upload is not None:
            pulumi.set(__self__, "fortisandbox_max_upload", fortisandbox_max_upload)
        if fortisandbox_mode is not None:
            pulumi.set(__self__, "fortisandbox_mode", fortisandbox_mode)
        if fortisandbox_timeout_action is not None:
            pulumi.set(__self__, "fortisandbox_timeout_action", fortisandbox_timeout_action)
        if ftgd_analytics is not None:
            pulumi.set(__self__, "ftgd_analytics", ftgd_analytics)
        if ftp is not None:
            pulumi.set(__self__, "ftp", ftp)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if imap is not None:
            pulumi.set(__self__, "imap", imap)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if mapi is not None:
            pulumi.set(__self__, "mapi", mapi)
        if mobile_malware_db is not None:
            pulumi.set(__self__, "mobile_malware_db", mobile_malware_db)
        if nac_quar is not None:
            pulumi.set(__self__, "nac_quar", nac_quar)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nntp is not None:
            pulumi.set(__self__, "nntp", nntp)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if outbreak_prevention_archive_scan is not None:
            pulumi.set(__self__, "outbreak_prevention_archive_scan", outbreak_prevention_archive_scan)
        if pop3 is not None:
            pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if scan_mode is not None:
            pulumi.set(__self__, "scan_mode", scan_mode)
        if smb is not None:
            pulumi.set(__self__, "smb", smb)
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="analyticsAcceptFiletype")
    def analytics_accept_filetype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "analytics_accept_filetype")

    @analytics_accept_filetype.setter
    def analytics_accept_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_accept_filetype", value)

    @property
    @pulumi.getter(name="analyticsBlFiletype")
    def analytics_bl_filetype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "analytics_bl_filetype")

    @analytics_bl_filetype.setter
    def analytics_bl_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_bl_filetype", value)

    @property
    @pulumi.getter(name="analyticsDb")
    def analytics_db(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "analytics_db")

    @analytics_db.setter
    def analytics_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "analytics_db", value)

    @property
    @pulumi.getter(name="analyticsIgnoreFiletype")
    def analytics_ignore_filetype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "analytics_ignore_filetype")

    @analytics_ignore_filetype.setter
    def analytics_ignore_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_ignore_filetype", value)

    @property
    @pulumi.getter(name="analyticsMaxUpload")
    def analytics_max_upload(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "analytics_max_upload")

    @analytics_max_upload.setter
    def analytics_max_upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_max_upload", value)

    @property
    @pulumi.getter(name="analyticsWlFiletype")
    def analytics_wl_filetype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "analytics_wl_filetype")

    @analytics_wl_filetype.setter
    def analytics_wl_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_wl_filetype", value)

    @property
    @pulumi.getter(name="avBlockLog")
    def av_block_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_block_log")

    @av_block_log.setter
    def av_block_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_block_log", value)

    @property
    @pulumi.getter(name="avVirusLog")
    def av_virus_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_virus_log")

    @av_virus_log.setter
    def av_virus_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_virus_log", value)

    @property
    @pulumi.getter
    def cifs(self) -> Optional[pulumi.Input['AntivirusProfileCifsArgs']]:
        return pulumi.get(self, "cifs")

    @cifs.setter
    def cifs(self, value: Optional[pulumi.Input['AntivirusProfileCifsArgs']]):
        pulumi.set(self, "cifs", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input['AntivirusProfileContentDisarmArgs']]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input['AntivirusProfileContentDisarmArgs']]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emsThreatFeed")
    def ems_threat_feed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ems_threat_feed")

    @ems_threat_feed.setter
    def ems_threat_feed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_threat_feed", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="externalBlocklistEnableAll")
    def external_blocklist_enable_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist_enable_all")

    @external_blocklist_enable_all.setter
    def external_blocklist_enable_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist_enable_all", value)

    @property
    @pulumi.getter(name="externalBlocklists")
    def external_blocklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntivirusProfileExternalBlocklistArgs']]]]:
        return pulumi.get(self, "external_blocklists")

    @external_blocklists.setter
    def external_blocklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntivirusProfileExternalBlocklistArgs']]]]):
        pulumi.set(self, "external_blocklists", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter(name="fortiaiErrorAction")
    def fortiai_error_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai_error_action")

    @fortiai_error_action.setter
    def fortiai_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai_error_action", value)

    @property
    @pulumi.getter(name="fortiaiTimeoutAction")
    def fortiai_timeout_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai_timeout_action")

    @fortiai_timeout_action.setter
    def fortiai_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai_timeout_action", value)

    @property
    @pulumi.getter(name="fortindrErrorAction")
    def fortindr_error_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr_error_action")

    @fortindr_error_action.setter
    def fortindr_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr_error_action", value)

    @property
    @pulumi.getter(name="fortindrTimeoutAction")
    def fortindr_timeout_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr_timeout_action")

    @fortindr_timeout_action.setter
    def fortindr_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr_timeout_action", value)

    @property
    @pulumi.getter(name="fortisandboxErrorAction")
    def fortisandbox_error_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox_error_action")

    @fortisandbox_error_action.setter
    def fortisandbox_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_error_action", value)

    @property
    @pulumi.getter(name="fortisandboxMaxUpload")
    def fortisandbox_max_upload(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortisandbox_max_upload")

    @fortisandbox_max_upload.setter
    def fortisandbox_max_upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortisandbox_max_upload", value)

    @property
    @pulumi.getter(name="fortisandboxMode")
    def fortisandbox_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox_mode")

    @fortisandbox_mode.setter
    def fortisandbox_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_mode", value)

    @property
    @pulumi.getter(name="fortisandboxTimeoutAction")
    def fortisandbox_timeout_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox_timeout_action")

    @fortisandbox_timeout_action.setter
    def fortisandbox_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_timeout_action", value)

    @property
    @pulumi.getter(name="ftgdAnalytics")
    def ftgd_analytics(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftgd_analytics")

    @ftgd_analytics.setter
    def ftgd_analytics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftgd_analytics", value)

    @property
    @pulumi.getter
    def ftp(self) -> Optional[pulumi.Input['AntivirusProfileFtpArgs']]:
        return pulumi.get(self, "ftp")

    @ftp.setter
    def ftp(self, value: Optional[pulumi.Input['AntivirusProfileFtpArgs']]):
        pulumi.set(self, "ftp", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['AntivirusProfileHttpArgs']]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['AntivirusProfileHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def imap(self) -> Optional[pulumi.Input['AntivirusProfileImapArgs']]:
        return pulumi.get(self, "imap")

    @imap.setter
    def imap(self, value: Optional[pulumi.Input['AntivirusProfileImapArgs']]):
        pulumi.set(self, "imap", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter
    def mapi(self) -> Optional[pulumi.Input['AntivirusProfileMapiArgs']]:
        return pulumi.get(self, "mapi")

    @mapi.setter
    def mapi(self, value: Optional[pulumi.Input['AntivirusProfileMapiArgs']]):
        pulumi.set(self, "mapi", value)

    @property
    @pulumi.getter(name="mobileMalwareDb")
    def mobile_malware_db(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mobile_malware_db")

    @mobile_malware_db.setter
    def mobile_malware_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile_malware_db", value)

    @property
    @pulumi.getter(name="nacQuar")
    def nac_quar(self) -> Optional[pulumi.Input['AntivirusProfileNacQuarArgs']]:
        return pulumi.get(self, "nac_quar")

    @nac_quar.setter
    def nac_quar(self, value: Optional[pulumi.Input['AntivirusProfileNacQuarArgs']]):
        pulumi.set(self, "nac_quar", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nntp(self) -> Optional[pulumi.Input['AntivirusProfileNntpArgs']]:
        return pulumi.get(self, "nntp")

    @nntp.setter
    def nntp(self, value: Optional[pulumi.Input['AntivirusProfileNntpArgs']]):
        pulumi.set(self, "nntp", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input['AntivirusProfileOutbreakPreventionArgs']]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input['AntivirusProfileOutbreakPreventionArgs']]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter(name="outbreakPreventionArchiveScan")
    def outbreak_prevention_archive_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention_archive_scan")

    @outbreak_prevention_archive_scan.setter
    def outbreak_prevention_archive_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention_archive_scan", value)

    @property
    @pulumi.getter
    def pop3(self) -> Optional[pulumi.Input['AntivirusProfilePop3Args']]:
        return pulumi.get(self, "pop3")

    @pop3.setter
    def pop3(self, value: Optional[pulumi.Input['AntivirusProfilePop3Args']]):
        pulumi.set(self, "pop3", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter(name="scanMode")
    def scan_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_mode")

    @scan_mode.setter
    def scan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_mode", value)

    @property
    @pulumi.getter
    def smb(self) -> Optional[pulumi.Input['AntivirusProfileSmbArgs']]:
        return pulumi.get(self, "smb")

    @smb.setter
    def smb(self, value: Optional[pulumi.Input['AntivirusProfileSmbArgs']]):
        pulumi.set(self, "smb", value)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['AntivirusProfileSmtpArgs']]:
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['AntivirusProfileSmtpArgs']]):
        pulumi.set(self, "smtp", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['AntivirusProfileSshArgs']]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['AntivirusProfileSshArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class AntivirusProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analytics_accept_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_bl_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_db: Optional[pulumi.Input[str]] = None,
                 analytics_ignore_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_max_upload: Optional[pulumi.Input[int]] = None,
                 analytics_wl_filetype: Optional[pulumi.Input[int]] = None,
                 av_block_log: Optional[pulumi.Input[str]] = None,
                 av_virus_log: Optional[pulumi.Input[str]] = None,
                 cifs: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileCifsArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileContentDisarmArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_threat_feed: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external_blocklist_enable_all: Optional[pulumi.Input[str]] = None,
                 external_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AntivirusProfileExternalBlocklistArgs']]]]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 fortiai_error_action: Optional[pulumi.Input[str]] = None,
                 fortiai_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortindr_error_action: Optional[pulumi.Input[str]] = None,
                 fortindr_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_error_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_max_upload: Optional[pulumi.Input[int]] = None,
                 fortisandbox_mode: Optional[pulumi.Input[str]] = None,
                 fortisandbox_timeout_action: Optional[pulumi.Input[str]] = None,
                 ftgd_analytics: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileFtpArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileHttpArgs']]] = None,
                 imap: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileImapArgs']]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 mapi: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileMapiArgs']]] = None,
                 mobile_malware_db: Optional[pulumi.Input[str]] = None,
                 nac_quar: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileNacQuarArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileNntpArgs']]] = None,
                 outbreak_prevention: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileOutbreakPreventionArgs']]] = None,
                 outbreak_prevention_archive_scan: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input[pulumi.InputType['AntivirusProfilePop3Args']]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 scan_mode: Optional[pulumi.Input[str]] = None,
                 smb: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileSmbArgs']]] = None,
                 smtp: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileSmtpArgs']]] = None,
                 ssh: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileSshArgs']]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AntivirusProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AntivirusProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AntivirusProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AntivirusProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AntivirusProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analytics_accept_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_bl_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_db: Optional[pulumi.Input[str]] = None,
                 analytics_ignore_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_max_upload: Optional[pulumi.Input[int]] = None,
                 analytics_wl_filetype: Optional[pulumi.Input[int]] = None,
                 av_block_log: Optional[pulumi.Input[str]] = None,
                 av_virus_log: Optional[pulumi.Input[str]] = None,
                 cifs: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileCifsArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileContentDisarmArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_threat_feed: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external_blocklist_enable_all: Optional[pulumi.Input[str]] = None,
                 external_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AntivirusProfileExternalBlocklistArgs']]]]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 fortiai_error_action: Optional[pulumi.Input[str]] = None,
                 fortiai_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortindr_error_action: Optional[pulumi.Input[str]] = None,
                 fortindr_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_error_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_max_upload: Optional[pulumi.Input[int]] = None,
                 fortisandbox_mode: Optional[pulumi.Input[str]] = None,
                 fortisandbox_timeout_action: Optional[pulumi.Input[str]] = None,
                 ftgd_analytics: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileFtpArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileHttpArgs']]] = None,
                 imap: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileImapArgs']]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 mapi: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileMapiArgs']]] = None,
                 mobile_malware_db: Optional[pulumi.Input[str]] = None,
                 nac_quar: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileNacQuarArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileNntpArgs']]] = None,
                 outbreak_prevention: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileOutbreakPreventionArgs']]] = None,
                 outbreak_prevention_archive_scan: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input[pulumi.InputType['AntivirusProfilePop3Args']]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 scan_mode: Optional[pulumi.Input[str]] = None,
                 smb: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileSmbArgs']]] = None,
                 smtp: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileSmtpArgs']]] = None,
                 ssh: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileSshArgs']]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AntivirusProfileArgs.__new__(AntivirusProfileArgs)

            __props__.__dict__["analytics_accept_filetype"] = analytics_accept_filetype
            __props__.__dict__["analytics_bl_filetype"] = analytics_bl_filetype
            __props__.__dict__["analytics_db"] = analytics_db
            __props__.__dict__["analytics_ignore_filetype"] = analytics_ignore_filetype
            __props__.__dict__["analytics_max_upload"] = analytics_max_upload
            __props__.__dict__["analytics_wl_filetype"] = analytics_wl_filetype
            __props__.__dict__["av_block_log"] = av_block_log
            __props__.__dict__["av_virus_log"] = av_virus_log
            __props__.__dict__["cifs"] = cifs
            __props__.__dict__["comment"] = comment
            __props__.__dict__["content_disarm"] = content_disarm
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ems_threat_feed"] = ems_threat_feed
            __props__.__dict__["extended_log"] = extended_log
            __props__.__dict__["external_blocklist_enable_all"] = external_blocklist_enable_all
            __props__.__dict__["external_blocklists"] = external_blocklists
            __props__.__dict__["feature_set"] = feature_set
            __props__.__dict__["fortiai_error_action"] = fortiai_error_action
            __props__.__dict__["fortiai_timeout_action"] = fortiai_timeout_action
            __props__.__dict__["fortindr_error_action"] = fortindr_error_action
            __props__.__dict__["fortindr_timeout_action"] = fortindr_timeout_action
            __props__.__dict__["fortisandbox_error_action"] = fortisandbox_error_action
            __props__.__dict__["fortisandbox_max_upload"] = fortisandbox_max_upload
            __props__.__dict__["fortisandbox_mode"] = fortisandbox_mode
            __props__.__dict__["fortisandbox_timeout_action"] = fortisandbox_timeout_action
            __props__.__dict__["ftgd_analytics"] = ftgd_analytics
            __props__.__dict__["ftp"] = ftp
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["http"] = http
            __props__.__dict__["imap"] = imap
            __props__.__dict__["inspection_mode"] = inspection_mode
            __props__.__dict__["mapi"] = mapi
            __props__.__dict__["mobile_malware_db"] = mobile_malware_db
            __props__.__dict__["nac_quar"] = nac_quar
            __props__.__dict__["name"] = name
            __props__.__dict__["nntp"] = nntp
            __props__.__dict__["outbreak_prevention"] = outbreak_prevention
            __props__.__dict__["outbreak_prevention_archive_scan"] = outbreak_prevention_archive_scan
            __props__.__dict__["pop3"] = pop3
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["scan_mode"] = scan_mode
            __props__.__dict__["smb"] = smb
            __props__.__dict__["smtp"] = smtp
            __props__.__dict__["ssh"] = ssh
            __props__.__dict__["vdomparam"] = vdomparam
        super(AntivirusProfile, __self__).__init__(
            'fortios:index/antivirusProfile:AntivirusProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            analytics_accept_filetype: Optional[pulumi.Input[int]] = None,
            analytics_bl_filetype: Optional[pulumi.Input[int]] = None,
            analytics_db: Optional[pulumi.Input[str]] = None,
            analytics_ignore_filetype: Optional[pulumi.Input[int]] = None,
            analytics_max_upload: Optional[pulumi.Input[int]] = None,
            analytics_wl_filetype: Optional[pulumi.Input[int]] = None,
            av_block_log: Optional[pulumi.Input[str]] = None,
            av_virus_log: Optional[pulumi.Input[str]] = None,
            cifs: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileCifsArgs']]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            content_disarm: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileContentDisarmArgs']]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ems_threat_feed: Optional[pulumi.Input[str]] = None,
            extended_log: Optional[pulumi.Input[str]] = None,
            external_blocklist_enable_all: Optional[pulumi.Input[str]] = None,
            external_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AntivirusProfileExternalBlocklistArgs']]]]] = None,
            feature_set: Optional[pulumi.Input[str]] = None,
            fortiai_error_action: Optional[pulumi.Input[str]] = None,
            fortiai_timeout_action: Optional[pulumi.Input[str]] = None,
            fortindr_error_action: Optional[pulumi.Input[str]] = None,
            fortindr_timeout_action: Optional[pulumi.Input[str]] = None,
            fortisandbox_error_action: Optional[pulumi.Input[str]] = None,
            fortisandbox_max_upload: Optional[pulumi.Input[int]] = None,
            fortisandbox_mode: Optional[pulumi.Input[str]] = None,
            fortisandbox_timeout_action: Optional[pulumi.Input[str]] = None,
            ftgd_analytics: Optional[pulumi.Input[str]] = None,
            ftp: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileFtpArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            http: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileHttpArgs']]] = None,
            imap: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileImapArgs']]] = None,
            inspection_mode: Optional[pulumi.Input[str]] = None,
            mapi: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileMapiArgs']]] = None,
            mobile_malware_db: Optional[pulumi.Input[str]] = None,
            nac_quar: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileNacQuarArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nntp: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileNntpArgs']]] = None,
            outbreak_prevention: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileOutbreakPreventionArgs']]] = None,
            outbreak_prevention_archive_scan: Optional[pulumi.Input[str]] = None,
            pop3: Optional[pulumi.Input[pulumi.InputType['AntivirusProfilePop3Args']]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            scan_mode: Optional[pulumi.Input[str]] = None,
            smb: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileSmbArgs']]] = None,
            smtp: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileSmtpArgs']]] = None,
            ssh: Optional[pulumi.Input[pulumi.InputType['AntivirusProfileSshArgs']]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'AntivirusProfile':
        """
        Get an existing AntivirusProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AntivirusProfileState.__new__(_AntivirusProfileState)

        __props__.__dict__["analytics_accept_filetype"] = analytics_accept_filetype
        __props__.__dict__["analytics_bl_filetype"] = analytics_bl_filetype
        __props__.__dict__["analytics_db"] = analytics_db
        __props__.__dict__["analytics_ignore_filetype"] = analytics_ignore_filetype
        __props__.__dict__["analytics_max_upload"] = analytics_max_upload
        __props__.__dict__["analytics_wl_filetype"] = analytics_wl_filetype
        __props__.__dict__["av_block_log"] = av_block_log
        __props__.__dict__["av_virus_log"] = av_virus_log
        __props__.__dict__["cifs"] = cifs
        __props__.__dict__["comment"] = comment
        __props__.__dict__["content_disarm"] = content_disarm
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ems_threat_feed"] = ems_threat_feed
        __props__.__dict__["extended_log"] = extended_log
        __props__.__dict__["external_blocklist_enable_all"] = external_blocklist_enable_all
        __props__.__dict__["external_blocklists"] = external_blocklists
        __props__.__dict__["feature_set"] = feature_set
        __props__.__dict__["fortiai_error_action"] = fortiai_error_action
        __props__.__dict__["fortiai_timeout_action"] = fortiai_timeout_action
        __props__.__dict__["fortindr_error_action"] = fortindr_error_action
        __props__.__dict__["fortindr_timeout_action"] = fortindr_timeout_action
        __props__.__dict__["fortisandbox_error_action"] = fortisandbox_error_action
        __props__.__dict__["fortisandbox_max_upload"] = fortisandbox_max_upload
        __props__.__dict__["fortisandbox_mode"] = fortisandbox_mode
        __props__.__dict__["fortisandbox_timeout_action"] = fortisandbox_timeout_action
        __props__.__dict__["ftgd_analytics"] = ftgd_analytics
        __props__.__dict__["ftp"] = ftp
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["http"] = http
        __props__.__dict__["imap"] = imap
        __props__.__dict__["inspection_mode"] = inspection_mode
        __props__.__dict__["mapi"] = mapi
        __props__.__dict__["mobile_malware_db"] = mobile_malware_db
        __props__.__dict__["nac_quar"] = nac_quar
        __props__.__dict__["name"] = name
        __props__.__dict__["nntp"] = nntp
        __props__.__dict__["outbreak_prevention"] = outbreak_prevention
        __props__.__dict__["outbreak_prevention_archive_scan"] = outbreak_prevention_archive_scan
        __props__.__dict__["pop3"] = pop3
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["scan_mode"] = scan_mode
        __props__.__dict__["smb"] = smb
        __props__.__dict__["smtp"] = smtp
        __props__.__dict__["ssh"] = ssh
        __props__.__dict__["vdomparam"] = vdomparam
        return AntivirusProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="analyticsAcceptFiletype")
    def analytics_accept_filetype(self) -> pulumi.Output[int]:
        return pulumi.get(self, "analytics_accept_filetype")

    @property
    @pulumi.getter(name="analyticsBlFiletype")
    def analytics_bl_filetype(self) -> pulumi.Output[int]:
        return pulumi.get(self, "analytics_bl_filetype")

    @property
    @pulumi.getter(name="analyticsDb")
    def analytics_db(self) -> pulumi.Output[str]:
        return pulumi.get(self, "analytics_db")

    @property
    @pulumi.getter(name="analyticsIgnoreFiletype")
    def analytics_ignore_filetype(self) -> pulumi.Output[int]:
        return pulumi.get(self, "analytics_ignore_filetype")

    @property
    @pulumi.getter(name="analyticsMaxUpload")
    def analytics_max_upload(self) -> pulumi.Output[int]:
        return pulumi.get(self, "analytics_max_upload")

    @property
    @pulumi.getter(name="analyticsWlFiletype")
    def analytics_wl_filetype(self) -> pulumi.Output[int]:
        return pulumi.get(self, "analytics_wl_filetype")

    @property
    @pulumi.getter(name="avBlockLog")
    def av_block_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "av_block_log")

    @property
    @pulumi.getter(name="avVirusLog")
    def av_virus_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "av_virus_log")

    @property
    @pulumi.getter
    def cifs(self) -> pulumi.Output['outputs.AntivirusProfileCifs']:
        return pulumi.get(self, "cifs")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> pulumi.Output['outputs.AntivirusProfileContentDisarm']:
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emsThreatFeed")
    def ems_threat_feed(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ems_threat_feed")

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extended_log")

    @property
    @pulumi.getter(name="externalBlocklistEnableAll")
    def external_blocklist_enable_all(self) -> pulumi.Output[str]:
        return pulumi.get(self, "external_blocklist_enable_all")

    @property
    @pulumi.getter(name="externalBlocklists")
    def external_blocklists(self) -> pulumi.Output[Optional[Sequence['outputs.AntivirusProfileExternalBlocklist']]]:
        return pulumi.get(self, "external_blocklists")

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> pulumi.Output[str]:
        return pulumi.get(self, "feature_set")

    @property
    @pulumi.getter(name="fortiaiErrorAction")
    def fortiai_error_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortiai_error_action")

    @property
    @pulumi.getter(name="fortiaiTimeoutAction")
    def fortiai_timeout_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortiai_timeout_action")

    @property
    @pulumi.getter(name="fortindrErrorAction")
    def fortindr_error_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortindr_error_action")

    @property
    @pulumi.getter(name="fortindrTimeoutAction")
    def fortindr_timeout_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortindr_timeout_action")

    @property
    @pulumi.getter(name="fortisandboxErrorAction")
    def fortisandbox_error_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortisandbox_error_action")

    @property
    @pulumi.getter(name="fortisandboxMaxUpload")
    def fortisandbox_max_upload(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fortisandbox_max_upload")

    @property
    @pulumi.getter(name="fortisandboxMode")
    def fortisandbox_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortisandbox_mode")

    @property
    @pulumi.getter(name="fortisandboxTimeoutAction")
    def fortisandbox_timeout_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortisandbox_timeout_action")

    @property
    @pulumi.getter(name="ftgdAnalytics")
    def ftgd_analytics(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ftgd_analytics")

    @property
    @pulumi.getter
    def ftp(self) -> pulumi.Output['outputs.AntivirusProfileFtp']:
        return pulumi.get(self, "ftp")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def http(self) -> pulumi.Output['outputs.AntivirusProfileHttp']:
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def imap(self) -> pulumi.Output['outputs.AntivirusProfileImap']:
        return pulumi.get(self, "imap")

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "inspection_mode")

    @property
    @pulumi.getter
    def mapi(self) -> pulumi.Output['outputs.AntivirusProfileMapi']:
        return pulumi.get(self, "mapi")

    @property
    @pulumi.getter(name="mobileMalwareDb")
    def mobile_malware_db(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mobile_malware_db")

    @property
    @pulumi.getter(name="nacQuar")
    def nac_quar(self) -> pulumi.Output['outputs.AntivirusProfileNacQuar']:
        return pulumi.get(self, "nac_quar")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nntp(self) -> pulumi.Output['outputs.AntivirusProfileNntp']:
        return pulumi.get(self, "nntp")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> pulumi.Output['outputs.AntivirusProfileOutbreakPrevention']:
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter(name="outbreakPreventionArchiveScan")
    def outbreak_prevention_archive_scan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "outbreak_prevention_archive_scan")

    @property
    @pulumi.getter
    def pop3(self) -> pulumi.Output['outputs.AntivirusProfilePop3']:
        return pulumi.get(self, "pop3")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter(name="scanMode")
    def scan_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "scan_mode")

    @property
    @pulumi.getter
    def smb(self) -> pulumi.Output['outputs.AntivirusProfileSmb']:
        return pulumi.get(self, "smb")

    @property
    @pulumi.getter
    def smtp(self) -> pulumi.Output['outputs.AntivirusProfileSmtp']:
        return pulumi.get(self, "smtp")

    @property
    @pulumi.getter
    def ssh(self) -> pulumi.Output['outputs.AntivirusProfileSsh']:
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

