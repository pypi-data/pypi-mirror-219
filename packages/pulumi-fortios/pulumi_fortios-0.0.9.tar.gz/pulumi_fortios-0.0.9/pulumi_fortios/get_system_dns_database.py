# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSystemDnsDatabaseResult',
    'AwaitableGetSystemDnsDatabaseResult',
    'get_system_dns_database',
    'get_system_dns_database_output',
]

@pulumi.output_type
class GetSystemDnsDatabaseResult:
    """
    A collection of values returned by GetSystemDnsDatabase.
    """
    def __init__(__self__, allow_transfer=None, authoritative=None, contact=None, dns_entries=None, domain=None, forwarder=None, id=None, ip_master=None, ip_primary=None, name=None, primary_name=None, rr_max=None, source_ip=None, status=None, ttl=None, type=None, vdomparam=None, view=None):
        if allow_transfer and not isinstance(allow_transfer, str):
            raise TypeError("Expected argument 'allow_transfer' to be a str")
        pulumi.set(__self__, "allow_transfer", allow_transfer)
        if authoritative and not isinstance(authoritative, str):
            raise TypeError("Expected argument 'authoritative' to be a str")
        pulumi.set(__self__, "authoritative", authoritative)
        if contact and not isinstance(contact, str):
            raise TypeError("Expected argument 'contact' to be a str")
        pulumi.set(__self__, "contact", contact)
        if dns_entries and not isinstance(dns_entries, list):
            raise TypeError("Expected argument 'dns_entries' to be a list")
        pulumi.set(__self__, "dns_entries", dns_entries)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if forwarder and not isinstance(forwarder, str):
            raise TypeError("Expected argument 'forwarder' to be a str")
        pulumi.set(__self__, "forwarder", forwarder)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_master and not isinstance(ip_master, str):
            raise TypeError("Expected argument 'ip_master' to be a str")
        pulumi.set(__self__, "ip_master", ip_master)
        if ip_primary and not isinstance(ip_primary, str):
            raise TypeError("Expected argument 'ip_primary' to be a str")
        pulumi.set(__self__, "ip_primary", ip_primary)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary_name and not isinstance(primary_name, str):
            raise TypeError("Expected argument 'primary_name' to be a str")
        pulumi.set(__self__, "primary_name", primary_name)
        if rr_max and not isinstance(rr_max, int):
            raise TypeError("Expected argument 'rr_max' to be a int")
        pulumi.set(__self__, "rr_max", rr_max)
        if source_ip and not isinstance(source_ip, str):
            raise TypeError("Expected argument 'source_ip' to be a str")
        pulumi.set(__self__, "source_ip", source_ip)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if ttl and not isinstance(ttl, int):
            raise TypeError("Expected argument 'ttl' to be a int")
        pulumi.set(__self__, "ttl", ttl)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if view and not isinstance(view, str):
            raise TypeError("Expected argument 'view' to be a str")
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter(name="allowTransfer")
    def allow_transfer(self) -> str:
        return pulumi.get(self, "allow_transfer")

    @property
    @pulumi.getter
    def authoritative(self) -> str:
        return pulumi.get(self, "authoritative")

    @property
    @pulumi.getter
    def contact(self) -> str:
        return pulumi.get(self, "contact")

    @property
    @pulumi.getter(name="dnsEntries")
    def dns_entries(self) -> Sequence['outputs.GetSystemDnsDatabaseDnsEntryResult']:
        return pulumi.get(self, "dns_entries")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def forwarder(self) -> str:
        return pulumi.get(self, "forwarder")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipMaster")
    def ip_master(self) -> str:
        return pulumi.get(self, "ip_master")

    @property
    @pulumi.getter(name="ipPrimary")
    def ip_primary(self) -> str:
        return pulumi.get(self, "ip_primary")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryName")
    def primary_name(self) -> str:
        return pulumi.get(self, "primary_name")

    @property
    @pulumi.getter(name="rrMax")
    def rr_max(self) -> int:
        return pulumi.get(self, "rr_max")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def view(self) -> str:
        return pulumi.get(self, "view")


class AwaitableGetSystemDnsDatabaseResult(GetSystemDnsDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemDnsDatabaseResult(
            allow_transfer=self.allow_transfer,
            authoritative=self.authoritative,
            contact=self.contact,
            dns_entries=self.dns_entries,
            domain=self.domain,
            forwarder=self.forwarder,
            id=self.id,
            ip_master=self.ip_master,
            ip_primary=self.ip_primary,
            name=self.name,
            primary_name=self.primary_name,
            rr_max=self.rr_max,
            source_ip=self.source_ip,
            status=self.status,
            ttl=self.ttl,
            type=self.type,
            vdomparam=self.vdomparam,
            view=self.view)


def get_system_dns_database(name: Optional[str] = None,
                            vdomparam: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemDnsDatabaseResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemDnsDatabase:GetSystemDnsDatabase', __args__, opts=opts, typ=GetSystemDnsDatabaseResult).value

    return AwaitableGetSystemDnsDatabaseResult(
        allow_transfer=pulumi.get(__ret__, 'allow_transfer'),
        authoritative=pulumi.get(__ret__, 'authoritative'),
        contact=pulumi.get(__ret__, 'contact'),
        dns_entries=pulumi.get(__ret__, 'dns_entries'),
        domain=pulumi.get(__ret__, 'domain'),
        forwarder=pulumi.get(__ret__, 'forwarder'),
        id=pulumi.get(__ret__, 'id'),
        ip_master=pulumi.get(__ret__, 'ip_master'),
        ip_primary=pulumi.get(__ret__, 'ip_primary'),
        name=pulumi.get(__ret__, 'name'),
        primary_name=pulumi.get(__ret__, 'primary_name'),
        rr_max=pulumi.get(__ret__, 'rr_max'),
        source_ip=pulumi.get(__ret__, 'source_ip'),
        status=pulumi.get(__ret__, 'status'),
        ttl=pulumi.get(__ret__, 'ttl'),
        type=pulumi.get(__ret__, 'type'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        view=pulumi.get(__ret__, 'view'))


@_utilities.lift_output_func(get_system_dns_database)
def get_system_dns_database_output(name: Optional[pulumi.Input[str]] = None,
                                   vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemDnsDatabaseResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
