# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WafProfileArgs', 'WafProfile']

@pulumi.input_type
class WafProfileArgs:
    def __init__(__self__, *,
                 address_list: Optional[pulumi.Input['WafProfileAddressListArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 constraint: Optional[pulumi.Input['WafProfileConstraintArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input['WafProfileMethodArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signature: Optional[pulumi.Input['WafProfileSignatureArgs']] = None,
                 url_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WafProfile resource.
        """
        if address_list is not None:
            pulumi.set(__self__, "address_list", address_list)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if constraint is not None:
            pulumi.set(__self__, "constraint", constraint)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if url_accesses is not None:
            pulumi.set(__self__, "url_accesses", url_accesses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> Optional[pulumi.Input['WafProfileAddressListArgs']]:
        return pulumi.get(self, "address_list")

    @address_list.setter
    def address_list(self, value: Optional[pulumi.Input['WafProfileAddressListArgs']]):
        pulumi.set(self, "address_list", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def constraint(self) -> Optional[pulumi.Input['WafProfileConstraintArgs']]:
        return pulumi.get(self, "constraint")

    @constraint.setter
    def constraint(self, value: Optional[pulumi.Input['WafProfileConstraintArgs']]):
        pulumi.set(self, "constraint", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['WafProfileMethodArgs']]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['WafProfileMethodArgs']]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input['WafProfileSignatureArgs']]:
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input['WafProfileSignatureArgs']]):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="urlAccesses")
    def url_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]]:
        return pulumi.get(self, "url_accesses")

    @url_accesses.setter
    def url_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]]):
        pulumi.set(self, "url_accesses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _WafProfileState:
    def __init__(__self__, *,
                 address_list: Optional[pulumi.Input['WafProfileAddressListArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 constraint: Optional[pulumi.Input['WafProfileConstraintArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input['WafProfileMethodArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signature: Optional[pulumi.Input['WafProfileSignatureArgs']] = None,
                 url_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WafProfile resources.
        """
        if address_list is not None:
            pulumi.set(__self__, "address_list", address_list)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if constraint is not None:
            pulumi.set(__self__, "constraint", constraint)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if url_accesses is not None:
            pulumi.set(__self__, "url_accesses", url_accesses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> Optional[pulumi.Input['WafProfileAddressListArgs']]:
        return pulumi.get(self, "address_list")

    @address_list.setter
    def address_list(self, value: Optional[pulumi.Input['WafProfileAddressListArgs']]):
        pulumi.set(self, "address_list", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def constraint(self) -> Optional[pulumi.Input['WafProfileConstraintArgs']]:
        return pulumi.get(self, "constraint")

    @constraint.setter
    def constraint(self, value: Optional[pulumi.Input['WafProfileConstraintArgs']]):
        pulumi.set(self, "constraint", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['WafProfileMethodArgs']]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['WafProfileMethodArgs']]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input['WafProfileSignatureArgs']]:
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input['WafProfileSignatureArgs']]):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="urlAccesses")
    def url_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]]:
        return pulumi.get(self, "url_accesses")

    @url_accesses.setter
    def url_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]]):
        pulumi.set(self, "url_accesses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class WafProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_list: Optional[pulumi.Input[pulumi.InputType['WafProfileAddressListArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 constraint: Optional[pulumi.Input[pulumi.InputType['WafProfileConstraintArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[pulumi.InputType['WafProfileMethodArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signature: Optional[pulumi.Input[pulumi.InputType['WafProfileSignatureArgs']]] = None,
                 url_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafProfileUrlAccessArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WafProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WafProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WafProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WafProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WafProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_list: Optional[pulumi.Input[pulumi.InputType['WafProfileAddressListArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 constraint: Optional[pulumi.Input[pulumi.InputType['WafProfileConstraintArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[pulumi.InputType['WafProfileMethodArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signature: Optional[pulumi.Input[pulumi.InputType['WafProfileSignatureArgs']]] = None,
                 url_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafProfileUrlAccessArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WafProfileArgs.__new__(WafProfileArgs)

            __props__.__dict__["address_list"] = address_list
            __props__.__dict__["comment"] = comment
            __props__.__dict__["constraint"] = constraint
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["extended_log"] = extended_log
            __props__.__dict__["external"] = external
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["method"] = method
            __props__.__dict__["name"] = name
            __props__.__dict__["signature"] = signature
            __props__.__dict__["url_accesses"] = url_accesses
            __props__.__dict__["vdomparam"] = vdomparam
        super(WafProfile, __self__).__init__(
            'fortios:index/wafProfile:WafProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_list: Optional[pulumi.Input[pulumi.InputType['WafProfileAddressListArgs']]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            constraint: Optional[pulumi.Input[pulumi.InputType['WafProfileConstraintArgs']]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            extended_log: Optional[pulumi.Input[str]] = None,
            external: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            method: Optional[pulumi.Input[pulumi.InputType['WafProfileMethodArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            signature: Optional[pulumi.Input[pulumi.InputType['WafProfileSignatureArgs']]] = None,
            url_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafProfileUrlAccessArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'WafProfile':
        """
        Get an existing WafProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WafProfileState.__new__(_WafProfileState)

        __props__.__dict__["address_list"] = address_list
        __props__.__dict__["comment"] = comment
        __props__.__dict__["constraint"] = constraint
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["extended_log"] = extended_log
        __props__.__dict__["external"] = external
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["method"] = method
        __props__.__dict__["name"] = name
        __props__.__dict__["signature"] = signature
        __props__.__dict__["url_accesses"] = url_accesses
        __props__.__dict__["vdomparam"] = vdomparam
        return WafProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> pulumi.Output['outputs.WafProfileAddressList']:
        return pulumi.get(self, "address_list")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def constraint(self) -> pulumi.Output['outputs.WafProfileConstraint']:
        return pulumi.get(self, "constraint")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extended_log")

    @property
    @pulumi.getter
    def external(self) -> pulumi.Output[str]:
        return pulumi.get(self, "external")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def method(self) -> pulumi.Output['outputs.WafProfileMethod']:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def signature(self) -> pulumi.Output['outputs.WafProfileSignature']:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="urlAccesses")
    def url_accesses(self) -> pulumi.Output[Optional[Sequence['outputs.WafProfileUrlAccess']]]:
        return pulumi.get(self, "url_accesses")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

