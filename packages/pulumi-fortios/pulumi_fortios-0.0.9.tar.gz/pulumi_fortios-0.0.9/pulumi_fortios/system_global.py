# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemGlobalArgs', 'SystemGlobal']

@pulumi.input_type
class SystemGlobalArgs:
    def __init__(__self__, *,
                 admin_concurrent: Optional[pulumi.Input[str]] = None,
                 admin_console_timeout: Optional[pulumi.Input[int]] = None,
                 admin_forticloud_sso_default_profile: Optional[pulumi.Input[str]] = None,
                 admin_forticloud_sso_login: Optional[pulumi.Input[str]] = None,
                 admin_host: Optional[pulumi.Input[str]] = None,
                 admin_hsts_max_age: Optional[pulumi.Input[int]] = None,
                 admin_https_pki_required: Optional[pulumi.Input[str]] = None,
                 admin_https_redirect: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_banned_ciphers: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_ciphersuites: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_versions: Optional[pulumi.Input[str]] = None,
                 admin_lockout_duration: Optional[pulumi.Input[int]] = None,
                 admin_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 admin_login_max: Optional[pulumi.Input[int]] = None,
                 admin_maintainer: Optional[pulumi.Input[str]] = None,
                 admin_port: Optional[pulumi.Input[int]] = None,
                 admin_restrict_local: Optional[pulumi.Input[str]] = None,
                 admin_scp: Optional[pulumi.Input[str]] = None,
                 admin_server_cert: Optional[pulumi.Input[str]] = None,
                 admin_sport: Optional[pulumi.Input[int]] = None,
                 admin_ssh_grace_time: Optional[pulumi.Input[int]] = None,
                 admin_ssh_password: Optional[pulumi.Input[str]] = None,
                 admin_ssh_port: Optional[pulumi.Input[int]] = None,
                 admin_ssh_v1: Optional[pulumi.Input[str]] = None,
                 admin_telnet: Optional[pulumi.Input[str]] = None,
                 admin_telnet_port: Optional[pulumi.Input[int]] = None,
                 admintimeout: Optional[pulumi.Input[int]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 allow_traffic_redirect: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 arp_max_entry: Optional[pulumi.Input[int]] = None,
                 asymroute: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_port: Optional[pulumi.Input[int]] = None,
                 auth_https_port: Optional[pulumi.Input[int]] = None,
                 auth_ike_saml_port: Optional[pulumi.Input[int]] = None,
                 auth_keepalive: Optional[pulumi.Input[str]] = None,
                 auth_session_limit: Optional[pulumi.Input[str]] = None,
                 auto_auth_extension_device: Optional[pulumi.Input[str]] = None,
                 autorun_log_fsck: Optional[pulumi.Input[str]] = None,
                 av_affinity: Optional[pulumi.Input[str]] = None,
                 av_failopen: Optional[pulumi.Input[str]] = None,
                 av_failopen_session: Optional[pulumi.Input[str]] = None,
                 batch_cmdb: Optional[pulumi.Input[str]] = None,
                 block_session_timer: Optional[pulumi.Input[int]] = None,
                 br_fdb_max_entry: Optional[pulumi.Input[int]] = None,
                 cert_chain_max: Optional[pulumi.Input[int]] = None,
                 cfg_revert_timeout: Optional[pulumi.Input[int]] = None,
                 cfg_save: Optional[pulumi.Input[str]] = None,
                 check_protocol_header: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 cli_audit_log: Optional[pulumi.Input[str]] = None,
                 cloud_communication: Optional[pulumi.Input[str]] = None,
                 clt_cert_req: Optional[pulumi.Input[str]] = None,
                 cmdbsvr_affinity: Optional[pulumi.Input[str]] = None,
                 compliance_check: Optional[pulumi.Input[str]] = None,
                 compliance_check_time: Optional[pulumi.Input[str]] = None,
                 cpu_use_threshold: Optional[pulumi.Input[int]] = None,
                 csr_ca_attribute: Optional[pulumi.Input[str]] = None,
                 daily_restart: Optional[pulumi.Input[str]] = None,
                 default_service_source_port: Optional[pulumi.Input[str]] = None,
                 device_identification_active_scan_delay: Optional[pulumi.Input[int]] = None,
                 device_idle_timeout: Optional[pulumi.Input[int]] = None,
                 dh_params: Optional[pulumi.Input[str]] = None,
                 dnsproxy_worker_count: Optional[pulumi.Input[int]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 early_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 edit_vdom_prompt: Optional[pulumi.Input[str]] = None,
                 endpoint_control_fds_access: Optional[pulumi.Input[str]] = None,
                 endpoint_control_portal_port: Optional[pulumi.Input[int]] = None,
                 extender_controller_reserved_network: Optional[pulumi.Input[str]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 faz_disk_buffer_size: Optional[pulumi.Input[int]] = None,
                 fds_statistics: Optional[pulumi.Input[str]] = None,
                 fds_statistics_period: Optional[pulumi.Input[int]] = None,
                 fec_port: Optional[pulumi.Input[int]] = None,
                 fgd_alert_subscription: Optional[pulumi.Input[str]] = None,
                 forticonverter_config_upload: Optional[pulumi.Input[str]] = None,
                 forticonverter_integration: Optional[pulumi.Input[str]] = None,
                 fortiextender: Optional[pulumi.Input[str]] = None,
                 fortiextender_data_port: Optional[pulumi.Input[int]] = None,
                 fortiextender_discovery_lockdown: Optional[pulumi.Input[str]] = None,
                 fortiextender_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 fortiextender_vlan_mode: Optional[pulumi.Input[str]] = None,
                 fortiipam_integration: Optional[pulumi.Input[str]] = None,
                 fortiservice_port: Optional[pulumi.Input[int]] = None,
                 fortitoken_cloud: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gui_allow_default_hostname: Optional[pulumi.Input[str]] = None,
                 gui_allow_incompatible_fabric_fgt: Optional[pulumi.Input[str]] = None,
                 gui_app_detection_sdwan: Optional[pulumi.Input[str]] = None,
                 gui_cdn_domain_override: Optional[pulumi.Input[str]] = None,
                 gui_cdn_usage: Optional[pulumi.Input[str]] = None,
                 gui_certificates: Optional[pulumi.Input[str]] = None,
                 gui_custom_language: Optional[pulumi.Input[str]] = None,
                 gui_date_format: Optional[pulumi.Input[str]] = None,
                 gui_date_time_source: Optional[pulumi.Input[str]] = None,
                 gui_device_latitude: Optional[pulumi.Input[str]] = None,
                 gui_device_longitude: Optional[pulumi.Input[str]] = None,
                 gui_display_hostname: Optional[pulumi.Input[str]] = None,
                 gui_firmware_upgrade_setup_warning: Optional[pulumi.Input[str]] = None,
                 gui_firmware_upgrade_warning: Optional[pulumi.Input[str]] = None,
                 gui_forticare_registration_setup_warning: Optional[pulumi.Input[str]] = None,
                 gui_fortigate_cloud_sandbox: Optional[pulumi.Input[str]] = None,
                 gui_fortiguard_resource_fetch: Optional[pulumi.Input[str]] = None,
                 gui_fortisandbox_cloud: Optional[pulumi.Input[str]] = None,
                 gui_ipv6: Optional[pulumi.Input[str]] = None,
                 gui_lines_per_page: Optional[pulumi.Input[int]] = None,
                 gui_local_out: Optional[pulumi.Input[str]] = None,
                 gui_replacement_message_groups: Optional[pulumi.Input[str]] = None,
                 gui_rest_api_cache: Optional[pulumi.Input[str]] = None,
                 gui_theme: Optional[pulumi.Input[str]] = None,
                 gui_wireless_opensecurity: Optional[pulumi.Input[str]] = None,
                 gui_workflow_management: Optional[pulumi.Input[str]] = None,
                 ha_affinity: Optional[pulumi.Input[str]] = None,
                 honor_df: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 igmp_state_limit: Optional[pulumi.Input[int]] = None,
                 ike_embryonic_limit: Optional[pulumi.Input[int]] = None,
                 interface_subnet_usage: Optional[pulumi.Input[str]] = None,
                 internet_service_database: Optional[pulumi.Input[str]] = None,
                 internet_service_download_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemGlobalInternetServiceDownloadListArgs']]]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 ip_fragment_mem_thresholds: Optional[pulumi.Input[int]] = None,
                 ip_src_port_range: Optional[pulumi.Input[str]] = None,
                 ips_affinity: Optional[pulumi.Input[str]] = None,
                 ipsec_asic_offload: Optional[pulumi.Input[str]] = None,
                 ipsec_ha_seqjump_rate: Optional[pulumi.Input[int]] = None,
                 ipsec_hmac_offload: Optional[pulumi.Input[str]] = None,
                 ipsec_round_robin: Optional[pulumi.Input[str]] = None,
                 ipsec_soft_dec_async: Optional[pulumi.Input[str]] = None,
                 ipv6_accept_dad: Optional[pulumi.Input[int]] = None,
                 ipv6_allow_anycast_probe: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_local_in_slient_drop: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_multicast_probe: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_traffic_redirect: Optional[pulumi.Input[str]] = None,
                 irq_time_accounting: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 ldapconntimeout: Optional[pulumi.Input[int]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 log_single_cpu_high: Optional[pulumi.Input[str]] = None,
                 log_ssl_connection: Optional[pulumi.Input[str]] = None,
                 log_uuid_address: Optional[pulumi.Input[str]] = None,
                 log_uuid_policy: Optional[pulumi.Input[str]] = None,
                 login_timestamp: Optional[pulumi.Input[str]] = None,
                 long_vdom_name: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 management_port_use_admin_sport: Optional[pulumi.Input[str]] = None,
                 management_vdom: Optional[pulumi.Input[str]] = None,
                 max_dlpstat_memory: Optional[pulumi.Input[int]] = None,
                 max_route_cache_size: Optional[pulumi.Input[int]] = None,
                 mc_ttl_notchange: Optional[pulumi.Input[str]] = None,
                 memory_use_threshold_extreme: Optional[pulumi.Input[int]] = None,
                 memory_use_threshold_green: Optional[pulumi.Input[int]] = None,
                 memory_use_threshold_red: Optional[pulumi.Input[int]] = None,
                 miglog_affinity: Optional[pulumi.Input[str]] = None,
                 miglogd_children: Optional[pulumi.Input[int]] = None,
                 multi_factor_authentication: Optional[pulumi.Input[str]] = None,
                 multicast_forward: Optional[pulumi.Input[str]] = None,
                 ndp_max_entry: Optional[pulumi.Input[int]] = None,
                 per_user_bal: Optional[pulumi.Input[str]] = None,
                 per_user_bwl: Optional[pulumi.Input[str]] = None,
                 pmtu_discovery: Optional[pulumi.Input[str]] = None,
                 policy_auth_concurrent: Optional[pulumi.Input[int]] = None,
                 post_login_banner: Optional[pulumi.Input[str]] = None,
                 pre_login_banner: Optional[pulumi.Input[str]] = None,
                 private_data_encryption: Optional[pulumi.Input[str]] = None,
                 proxy_auth_lifetime: Optional[pulumi.Input[str]] = None,
                 proxy_auth_lifetime_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_auth_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_cert_use_mgmt_vdom: Optional[pulumi.Input[str]] = None,
                 proxy_cipher_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_keep_alive_mode: Optional[pulumi.Input[str]] = None,
                 proxy_kxp_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_re_authentication_mode: Optional[pulumi.Input[str]] = None,
                 proxy_re_authentication_time: Optional[pulumi.Input[int]] = None,
                 proxy_resource_mode: Optional[pulumi.Input[str]] = None,
                 proxy_worker_count: Optional[pulumi.Input[int]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 reboot_upon_config_restore: Optional[pulumi.Input[str]] = None,
                 refresh: Optional[pulumi.Input[int]] = None,
                 remoteauthtimeout: Optional[pulumi.Input[int]] = None,
                 reset_sessionless_tcp: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_logout: Optional[pulumi.Input[str]] = None,
                 revision_image_auto_backup: Optional[pulumi.Input[str]] = None,
                 scanunit_count: Optional[pulumi.Input[int]] = None,
                 security_rating_result_submission: Optional[pulumi.Input[str]] = None,
                 security_rating_run_on_schedule: Optional[pulumi.Input[str]] = None,
                 send_pmtu_icmp: Optional[pulumi.Input[str]] = None,
                 sflowd_max_children_num: Optional[pulumi.Input[int]] = None,
                 snat_route_change: Optional[pulumi.Input[str]] = None,
                 special_file23_support: Optional[pulumi.Input[str]] = None,
                 speedtest_server: Optional[pulumi.Input[str]] = None,
                 split_port: Optional[pulumi.Input[str]] = None,
                 ssd_trim_date: Optional[pulumi.Input[int]] = None,
                 ssd_trim_freq: Optional[pulumi.Input[str]] = None,
                 ssd_trim_hour: Optional[pulumi.Input[int]] = None,
                 ssd_trim_min: Optional[pulumi.Input[int]] = None,
                 ssd_trim_weekday: Optional[pulumi.Input[str]] = None,
                 ssh_cbc_cipher: Optional[pulumi.Input[str]] = None,
                 ssh_enc_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hmac_md5: Optional[pulumi.Input[str]] = None,
                 ssh_hostkey_algo: Optional[pulumi.Input[str]] = None,
                 ssh_kex_algo: Optional[pulumi.Input[str]] = None,
                 ssh_kex_sha1: Optional[pulumi.Input[str]] = None,
                 ssh_mac_algo: Optional[pulumi.Input[str]] = None,
                 ssh_mac_weak: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 ssl_static_key_ciphers: Optional[pulumi.Input[str]] = None,
                 sslvpn_cipher_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 sslvpn_ems_sn_check: Optional[pulumi.Input[str]] = None,
                 sslvpn_kxp_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 sslvpn_max_worker_count: Optional[pulumi.Input[int]] = None,
                 sslvpn_plugin_version_check: Optional[pulumi.Input[str]] = None,
                 strict_dirty_session_check: Optional[pulumi.Input[str]] = None,
                 strong_crypto: Optional[pulumi.Input[str]] = None,
                 switch_controller: Optional[pulumi.Input[str]] = None,
                 switch_controller_reserved_network: Optional[pulumi.Input[str]] = None,
                 sys_perf_log_interval: Optional[pulumi.Input[int]] = None,
                 syslog_affinity: Optional[pulumi.Input[str]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_option: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 tftp: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 tp_mc_skip_policy: Optional[pulumi.Input[str]] = None,
                 traffic_priority: Optional[pulumi.Input[str]] = None,
                 traffic_priority_level: Optional[pulumi.Input[str]] = None,
                 two_factor_email_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_fac_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_ftk_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_ftm_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_sms_expiry: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 url_filter_affinity: Optional[pulumi.Input[str]] = None,
                 url_filter_count: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_devices: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_unified_mem: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_users: Optional[pulumi.Input[int]] = None,
                 user_server_cert: Optional[pulumi.Input[str]] = None,
                 vdom_admin: Optional[pulumi.Input[str]] = None,
                 vdom_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vip_arp_range: Optional[pulumi.Input[str]] = None,
                 virtual_server_count: Optional[pulumi.Input[int]] = None,
                 virtual_server_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 vpn_ems_sn_check: Optional[pulumi.Input[str]] = None,
                 wad_affinity: Optional[pulumi.Input[str]] = None,
                 wad_csvc_cs_count: Optional[pulumi.Input[int]] = None,
                 wad_csvc_db_count: Optional[pulumi.Input[int]] = None,
                 wad_memory_change_granularity: Optional[pulumi.Input[int]] = None,
                 wad_restart_end_time: Optional[pulumi.Input[str]] = None,
                 wad_restart_mode: Optional[pulumi.Input[str]] = None,
                 wad_restart_start_time: Optional[pulumi.Input[str]] = None,
                 wad_source_affinity: Optional[pulumi.Input[str]] = None,
                 wad_worker_count: Optional[pulumi.Input[int]] = None,
                 wifi_ca_certificate: Optional[pulumi.Input[str]] = None,
                 wifi_certificate: Optional[pulumi.Input[str]] = None,
                 wimax4g_usb: Optional[pulumi.Input[str]] = None,
                 wireless_controller: Optional[pulumi.Input[str]] = None,
                 wireless_controller_port: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SystemGlobal resource.
        """
        if admin_concurrent is not None:
            pulumi.set(__self__, "admin_concurrent", admin_concurrent)
        if admin_console_timeout is not None:
            pulumi.set(__self__, "admin_console_timeout", admin_console_timeout)
        if admin_forticloud_sso_default_profile is not None:
            pulumi.set(__self__, "admin_forticloud_sso_default_profile", admin_forticloud_sso_default_profile)
        if admin_forticloud_sso_login is not None:
            pulumi.set(__self__, "admin_forticloud_sso_login", admin_forticloud_sso_login)
        if admin_host is not None:
            pulumi.set(__self__, "admin_host", admin_host)
        if admin_hsts_max_age is not None:
            pulumi.set(__self__, "admin_hsts_max_age", admin_hsts_max_age)
        if admin_https_pki_required is not None:
            pulumi.set(__self__, "admin_https_pki_required", admin_https_pki_required)
        if admin_https_redirect is not None:
            pulumi.set(__self__, "admin_https_redirect", admin_https_redirect)
        if admin_https_ssl_banned_ciphers is not None:
            pulumi.set(__self__, "admin_https_ssl_banned_ciphers", admin_https_ssl_banned_ciphers)
        if admin_https_ssl_ciphersuites is not None:
            pulumi.set(__self__, "admin_https_ssl_ciphersuites", admin_https_ssl_ciphersuites)
        if admin_https_ssl_versions is not None:
            pulumi.set(__self__, "admin_https_ssl_versions", admin_https_ssl_versions)
        if admin_lockout_duration is not None:
            pulumi.set(__self__, "admin_lockout_duration", admin_lockout_duration)
        if admin_lockout_threshold is not None:
            pulumi.set(__self__, "admin_lockout_threshold", admin_lockout_threshold)
        if admin_login_max is not None:
            pulumi.set(__self__, "admin_login_max", admin_login_max)
        if admin_maintainer is not None:
            pulumi.set(__self__, "admin_maintainer", admin_maintainer)
        if admin_port is not None:
            pulumi.set(__self__, "admin_port", admin_port)
        if admin_restrict_local is not None:
            pulumi.set(__self__, "admin_restrict_local", admin_restrict_local)
        if admin_scp is not None:
            pulumi.set(__self__, "admin_scp", admin_scp)
        if admin_server_cert is not None:
            pulumi.set(__self__, "admin_server_cert", admin_server_cert)
        if admin_sport is not None:
            pulumi.set(__self__, "admin_sport", admin_sport)
        if admin_ssh_grace_time is not None:
            pulumi.set(__self__, "admin_ssh_grace_time", admin_ssh_grace_time)
        if admin_ssh_password is not None:
            pulumi.set(__self__, "admin_ssh_password", admin_ssh_password)
        if admin_ssh_port is not None:
            pulumi.set(__self__, "admin_ssh_port", admin_ssh_port)
        if admin_ssh_v1 is not None:
            pulumi.set(__self__, "admin_ssh_v1", admin_ssh_v1)
        if admin_telnet is not None:
            pulumi.set(__self__, "admin_telnet", admin_telnet)
        if admin_telnet_port is not None:
            pulumi.set(__self__, "admin_telnet_port", admin_telnet_port)
        if admintimeout is not None:
            pulumi.set(__self__, "admintimeout", admintimeout)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if allow_traffic_redirect is not None:
            pulumi.set(__self__, "allow_traffic_redirect", allow_traffic_redirect)
        if anti_replay is not None:
            pulumi.set(__self__, "anti_replay", anti_replay)
        if arp_max_entry is not None:
            pulumi.set(__self__, "arp_max_entry", arp_max_entry)
        if asymroute is not None:
            pulumi.set(__self__, "asymroute", asymroute)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_http_port is not None:
            pulumi.set(__self__, "auth_http_port", auth_http_port)
        if auth_https_port is not None:
            pulumi.set(__self__, "auth_https_port", auth_https_port)
        if auth_ike_saml_port is not None:
            pulumi.set(__self__, "auth_ike_saml_port", auth_ike_saml_port)
        if auth_keepalive is not None:
            pulumi.set(__self__, "auth_keepalive", auth_keepalive)
        if auth_session_limit is not None:
            pulumi.set(__self__, "auth_session_limit", auth_session_limit)
        if auto_auth_extension_device is not None:
            pulumi.set(__self__, "auto_auth_extension_device", auto_auth_extension_device)
        if autorun_log_fsck is not None:
            pulumi.set(__self__, "autorun_log_fsck", autorun_log_fsck)
        if av_affinity is not None:
            pulumi.set(__self__, "av_affinity", av_affinity)
        if av_failopen is not None:
            pulumi.set(__self__, "av_failopen", av_failopen)
        if av_failopen_session is not None:
            pulumi.set(__self__, "av_failopen_session", av_failopen_session)
        if batch_cmdb is not None:
            pulumi.set(__self__, "batch_cmdb", batch_cmdb)
        if block_session_timer is not None:
            pulumi.set(__self__, "block_session_timer", block_session_timer)
        if br_fdb_max_entry is not None:
            pulumi.set(__self__, "br_fdb_max_entry", br_fdb_max_entry)
        if cert_chain_max is not None:
            pulumi.set(__self__, "cert_chain_max", cert_chain_max)
        if cfg_revert_timeout is not None:
            pulumi.set(__self__, "cfg_revert_timeout", cfg_revert_timeout)
        if cfg_save is not None:
            pulumi.set(__self__, "cfg_save", cfg_save)
        if check_protocol_header is not None:
            pulumi.set(__self__, "check_protocol_header", check_protocol_header)
        if check_reset_range is not None:
            pulumi.set(__self__, "check_reset_range", check_reset_range)
        if cli_audit_log is not None:
            pulumi.set(__self__, "cli_audit_log", cli_audit_log)
        if cloud_communication is not None:
            pulumi.set(__self__, "cloud_communication", cloud_communication)
        if clt_cert_req is not None:
            pulumi.set(__self__, "clt_cert_req", clt_cert_req)
        if cmdbsvr_affinity is not None:
            pulumi.set(__self__, "cmdbsvr_affinity", cmdbsvr_affinity)
        if compliance_check is not None:
            pulumi.set(__self__, "compliance_check", compliance_check)
        if compliance_check_time is not None:
            pulumi.set(__self__, "compliance_check_time", compliance_check_time)
        if cpu_use_threshold is not None:
            pulumi.set(__self__, "cpu_use_threshold", cpu_use_threshold)
        if csr_ca_attribute is not None:
            pulumi.set(__self__, "csr_ca_attribute", csr_ca_attribute)
        if daily_restart is not None:
            pulumi.set(__self__, "daily_restart", daily_restart)
        if default_service_source_port is not None:
            pulumi.set(__self__, "default_service_source_port", default_service_source_port)
        if device_identification_active_scan_delay is not None:
            pulumi.set(__self__, "device_identification_active_scan_delay", device_identification_active_scan_delay)
        if device_idle_timeout is not None:
            pulumi.set(__self__, "device_idle_timeout", device_idle_timeout)
        if dh_params is not None:
            pulumi.set(__self__, "dh_params", dh_params)
        if dnsproxy_worker_count is not None:
            pulumi.set(__self__, "dnsproxy_worker_count", dnsproxy_worker_count)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if early_tcp_npu_session is not None:
            pulumi.set(__self__, "early_tcp_npu_session", early_tcp_npu_session)
        if edit_vdom_prompt is not None:
            pulumi.set(__self__, "edit_vdom_prompt", edit_vdom_prompt)
        if endpoint_control_fds_access is not None:
            pulumi.set(__self__, "endpoint_control_fds_access", endpoint_control_fds_access)
        if endpoint_control_portal_port is not None:
            pulumi.set(__self__, "endpoint_control_portal_port", endpoint_control_portal_port)
        if extender_controller_reserved_network is not None:
            pulumi.set(__self__, "extender_controller_reserved_network", extender_controller_reserved_network)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if faz_disk_buffer_size is not None:
            pulumi.set(__self__, "faz_disk_buffer_size", faz_disk_buffer_size)
        if fds_statistics is not None:
            pulumi.set(__self__, "fds_statistics", fds_statistics)
        if fds_statistics_period is not None:
            pulumi.set(__self__, "fds_statistics_period", fds_statistics_period)
        if fec_port is not None:
            pulumi.set(__self__, "fec_port", fec_port)
        if fgd_alert_subscription is not None:
            pulumi.set(__self__, "fgd_alert_subscription", fgd_alert_subscription)
        if forticonverter_config_upload is not None:
            pulumi.set(__self__, "forticonverter_config_upload", forticonverter_config_upload)
        if forticonverter_integration is not None:
            pulumi.set(__self__, "forticonverter_integration", forticonverter_integration)
        if fortiextender is not None:
            pulumi.set(__self__, "fortiextender", fortiextender)
        if fortiextender_data_port is not None:
            pulumi.set(__self__, "fortiextender_data_port", fortiextender_data_port)
        if fortiextender_discovery_lockdown is not None:
            pulumi.set(__self__, "fortiextender_discovery_lockdown", fortiextender_discovery_lockdown)
        if fortiextender_provision_on_authorization is not None:
            pulumi.set(__self__, "fortiextender_provision_on_authorization", fortiextender_provision_on_authorization)
        if fortiextender_vlan_mode is not None:
            pulumi.set(__self__, "fortiextender_vlan_mode", fortiextender_vlan_mode)
        if fortiipam_integration is not None:
            pulumi.set(__self__, "fortiipam_integration", fortiipam_integration)
        if fortiservice_port is not None:
            pulumi.set(__self__, "fortiservice_port", fortiservice_port)
        if fortitoken_cloud is not None:
            pulumi.set(__self__, "fortitoken_cloud", fortitoken_cloud)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gui_allow_default_hostname is not None:
            pulumi.set(__self__, "gui_allow_default_hostname", gui_allow_default_hostname)
        if gui_allow_incompatible_fabric_fgt is not None:
            pulumi.set(__self__, "gui_allow_incompatible_fabric_fgt", gui_allow_incompatible_fabric_fgt)
        if gui_app_detection_sdwan is not None:
            pulumi.set(__self__, "gui_app_detection_sdwan", gui_app_detection_sdwan)
        if gui_cdn_domain_override is not None:
            pulumi.set(__self__, "gui_cdn_domain_override", gui_cdn_domain_override)
        if gui_cdn_usage is not None:
            pulumi.set(__self__, "gui_cdn_usage", gui_cdn_usage)
        if gui_certificates is not None:
            pulumi.set(__self__, "gui_certificates", gui_certificates)
        if gui_custom_language is not None:
            pulumi.set(__self__, "gui_custom_language", gui_custom_language)
        if gui_date_format is not None:
            pulumi.set(__self__, "gui_date_format", gui_date_format)
        if gui_date_time_source is not None:
            pulumi.set(__self__, "gui_date_time_source", gui_date_time_source)
        if gui_device_latitude is not None:
            pulumi.set(__self__, "gui_device_latitude", gui_device_latitude)
        if gui_device_longitude is not None:
            pulumi.set(__self__, "gui_device_longitude", gui_device_longitude)
        if gui_display_hostname is not None:
            pulumi.set(__self__, "gui_display_hostname", gui_display_hostname)
        if gui_firmware_upgrade_setup_warning is not None:
            pulumi.set(__self__, "gui_firmware_upgrade_setup_warning", gui_firmware_upgrade_setup_warning)
        if gui_firmware_upgrade_warning is not None:
            pulumi.set(__self__, "gui_firmware_upgrade_warning", gui_firmware_upgrade_warning)
        if gui_forticare_registration_setup_warning is not None:
            pulumi.set(__self__, "gui_forticare_registration_setup_warning", gui_forticare_registration_setup_warning)
        if gui_fortigate_cloud_sandbox is not None:
            pulumi.set(__self__, "gui_fortigate_cloud_sandbox", gui_fortigate_cloud_sandbox)
        if gui_fortiguard_resource_fetch is not None:
            pulumi.set(__self__, "gui_fortiguard_resource_fetch", gui_fortiguard_resource_fetch)
        if gui_fortisandbox_cloud is not None:
            pulumi.set(__self__, "gui_fortisandbox_cloud", gui_fortisandbox_cloud)
        if gui_ipv6 is not None:
            pulumi.set(__self__, "gui_ipv6", gui_ipv6)
        if gui_lines_per_page is not None:
            pulumi.set(__self__, "gui_lines_per_page", gui_lines_per_page)
        if gui_local_out is not None:
            pulumi.set(__self__, "gui_local_out", gui_local_out)
        if gui_replacement_message_groups is not None:
            pulumi.set(__self__, "gui_replacement_message_groups", gui_replacement_message_groups)
        if gui_rest_api_cache is not None:
            pulumi.set(__self__, "gui_rest_api_cache", gui_rest_api_cache)
        if gui_theme is not None:
            pulumi.set(__self__, "gui_theme", gui_theme)
        if gui_wireless_opensecurity is not None:
            pulumi.set(__self__, "gui_wireless_opensecurity", gui_wireless_opensecurity)
        if gui_workflow_management is not None:
            pulumi.set(__self__, "gui_workflow_management", gui_workflow_management)
        if ha_affinity is not None:
            pulumi.set(__self__, "ha_affinity", ha_affinity)
        if honor_df is not None:
            pulumi.set(__self__, "honor_df", honor_df)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if igmp_state_limit is not None:
            pulumi.set(__self__, "igmp_state_limit", igmp_state_limit)
        if ike_embryonic_limit is not None:
            pulumi.set(__self__, "ike_embryonic_limit", ike_embryonic_limit)
        if interface_subnet_usage is not None:
            pulumi.set(__self__, "interface_subnet_usage", interface_subnet_usage)
        if internet_service_database is not None:
            pulumi.set(__self__, "internet_service_database", internet_service_database)
        if internet_service_download_lists is not None:
            pulumi.set(__self__, "internet_service_download_lists", internet_service_download_lists)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if ip_fragment_mem_thresholds is not None:
            pulumi.set(__self__, "ip_fragment_mem_thresholds", ip_fragment_mem_thresholds)
        if ip_src_port_range is not None:
            pulumi.set(__self__, "ip_src_port_range", ip_src_port_range)
        if ips_affinity is not None:
            pulumi.set(__self__, "ips_affinity", ips_affinity)
        if ipsec_asic_offload is not None:
            pulumi.set(__self__, "ipsec_asic_offload", ipsec_asic_offload)
        if ipsec_ha_seqjump_rate is not None:
            pulumi.set(__self__, "ipsec_ha_seqjump_rate", ipsec_ha_seqjump_rate)
        if ipsec_hmac_offload is not None:
            pulumi.set(__self__, "ipsec_hmac_offload", ipsec_hmac_offload)
        if ipsec_round_robin is not None:
            pulumi.set(__self__, "ipsec_round_robin", ipsec_round_robin)
        if ipsec_soft_dec_async is not None:
            pulumi.set(__self__, "ipsec_soft_dec_async", ipsec_soft_dec_async)
        if ipv6_accept_dad is not None:
            pulumi.set(__self__, "ipv6_accept_dad", ipv6_accept_dad)
        if ipv6_allow_anycast_probe is not None:
            pulumi.set(__self__, "ipv6_allow_anycast_probe", ipv6_allow_anycast_probe)
        if ipv6_allow_local_in_slient_drop is not None:
            pulumi.set(__self__, "ipv6_allow_local_in_slient_drop", ipv6_allow_local_in_slient_drop)
        if ipv6_allow_multicast_probe is not None:
            pulumi.set(__self__, "ipv6_allow_multicast_probe", ipv6_allow_multicast_probe)
        if ipv6_allow_traffic_redirect is not None:
            pulumi.set(__self__, "ipv6_allow_traffic_redirect", ipv6_allow_traffic_redirect)
        if irq_time_accounting is not None:
            pulumi.set(__self__, "irq_time_accounting", irq_time_accounting)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if ldapconntimeout is not None:
            pulumi.set(__self__, "ldapconntimeout", ldapconntimeout)
        if lldp_reception is not None:
            pulumi.set(__self__, "lldp_reception", lldp_reception)
        if lldp_transmission is not None:
            pulumi.set(__self__, "lldp_transmission", lldp_transmission)
        if log_single_cpu_high is not None:
            pulumi.set(__self__, "log_single_cpu_high", log_single_cpu_high)
        if log_ssl_connection is not None:
            pulumi.set(__self__, "log_ssl_connection", log_ssl_connection)
        if log_uuid_address is not None:
            pulumi.set(__self__, "log_uuid_address", log_uuid_address)
        if log_uuid_policy is not None:
            pulumi.set(__self__, "log_uuid_policy", log_uuid_policy)
        if login_timestamp is not None:
            pulumi.set(__self__, "login_timestamp", login_timestamp)
        if long_vdom_name is not None:
            pulumi.set(__self__, "long_vdom_name", long_vdom_name)
        if management_ip is not None:
            pulumi.set(__self__, "management_ip", management_ip)
        if management_port is not None:
            pulumi.set(__self__, "management_port", management_port)
        if management_port_use_admin_sport is not None:
            pulumi.set(__self__, "management_port_use_admin_sport", management_port_use_admin_sport)
        if management_vdom is not None:
            pulumi.set(__self__, "management_vdom", management_vdom)
        if max_dlpstat_memory is not None:
            pulumi.set(__self__, "max_dlpstat_memory", max_dlpstat_memory)
        if max_route_cache_size is not None:
            pulumi.set(__self__, "max_route_cache_size", max_route_cache_size)
        if mc_ttl_notchange is not None:
            pulumi.set(__self__, "mc_ttl_notchange", mc_ttl_notchange)
        if memory_use_threshold_extreme is not None:
            pulumi.set(__self__, "memory_use_threshold_extreme", memory_use_threshold_extreme)
        if memory_use_threshold_green is not None:
            pulumi.set(__self__, "memory_use_threshold_green", memory_use_threshold_green)
        if memory_use_threshold_red is not None:
            pulumi.set(__self__, "memory_use_threshold_red", memory_use_threshold_red)
        if miglog_affinity is not None:
            pulumi.set(__self__, "miglog_affinity", miglog_affinity)
        if miglogd_children is not None:
            pulumi.set(__self__, "miglogd_children", miglogd_children)
        if multi_factor_authentication is not None:
            pulumi.set(__self__, "multi_factor_authentication", multi_factor_authentication)
        if multicast_forward is not None:
            pulumi.set(__self__, "multicast_forward", multicast_forward)
        if ndp_max_entry is not None:
            pulumi.set(__self__, "ndp_max_entry", ndp_max_entry)
        if per_user_bal is not None:
            pulumi.set(__self__, "per_user_bal", per_user_bal)
        if per_user_bwl is not None:
            pulumi.set(__self__, "per_user_bwl", per_user_bwl)
        if pmtu_discovery is not None:
            pulumi.set(__self__, "pmtu_discovery", pmtu_discovery)
        if policy_auth_concurrent is not None:
            pulumi.set(__self__, "policy_auth_concurrent", policy_auth_concurrent)
        if post_login_banner is not None:
            pulumi.set(__self__, "post_login_banner", post_login_banner)
        if pre_login_banner is not None:
            pulumi.set(__self__, "pre_login_banner", pre_login_banner)
        if private_data_encryption is not None:
            pulumi.set(__self__, "private_data_encryption", private_data_encryption)
        if proxy_auth_lifetime is not None:
            pulumi.set(__self__, "proxy_auth_lifetime", proxy_auth_lifetime)
        if proxy_auth_lifetime_timeout is not None:
            pulumi.set(__self__, "proxy_auth_lifetime_timeout", proxy_auth_lifetime_timeout)
        if proxy_auth_timeout is not None:
            pulumi.set(__self__, "proxy_auth_timeout", proxy_auth_timeout)
        if proxy_cert_use_mgmt_vdom is not None:
            pulumi.set(__self__, "proxy_cert_use_mgmt_vdom", proxy_cert_use_mgmt_vdom)
        if proxy_cipher_hardware_acceleration is not None:
            pulumi.set(__self__, "proxy_cipher_hardware_acceleration", proxy_cipher_hardware_acceleration)
        if proxy_hardware_acceleration is not None:
            pulumi.set(__self__, "proxy_hardware_acceleration", proxy_hardware_acceleration)
        if proxy_keep_alive_mode is not None:
            pulumi.set(__self__, "proxy_keep_alive_mode", proxy_keep_alive_mode)
        if proxy_kxp_hardware_acceleration is not None:
            pulumi.set(__self__, "proxy_kxp_hardware_acceleration", proxy_kxp_hardware_acceleration)
        if proxy_re_authentication_mode is not None:
            pulumi.set(__self__, "proxy_re_authentication_mode", proxy_re_authentication_mode)
        if proxy_re_authentication_time is not None:
            pulumi.set(__self__, "proxy_re_authentication_time", proxy_re_authentication_time)
        if proxy_resource_mode is not None:
            pulumi.set(__self__, "proxy_resource_mode", proxy_resource_mode)
        if proxy_worker_count is not None:
            pulumi.set(__self__, "proxy_worker_count", proxy_worker_count)
        if radius_port is not None:
            pulumi.set(__self__, "radius_port", radius_port)
        if reboot_upon_config_restore is not None:
            pulumi.set(__self__, "reboot_upon_config_restore", reboot_upon_config_restore)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if remoteauthtimeout is not None:
            pulumi.set(__self__, "remoteauthtimeout", remoteauthtimeout)
        if reset_sessionless_tcp is not None:
            pulumi.set(__self__, "reset_sessionless_tcp", reset_sessionless_tcp)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if revision_backup_on_logout is not None:
            pulumi.set(__self__, "revision_backup_on_logout", revision_backup_on_logout)
        if revision_image_auto_backup is not None:
            pulumi.set(__self__, "revision_image_auto_backup", revision_image_auto_backup)
        if scanunit_count is not None:
            pulumi.set(__self__, "scanunit_count", scanunit_count)
        if security_rating_result_submission is not None:
            pulumi.set(__self__, "security_rating_result_submission", security_rating_result_submission)
        if security_rating_run_on_schedule is not None:
            pulumi.set(__self__, "security_rating_run_on_schedule", security_rating_run_on_schedule)
        if send_pmtu_icmp is not None:
            pulumi.set(__self__, "send_pmtu_icmp", send_pmtu_icmp)
        if sflowd_max_children_num is not None:
            pulumi.set(__self__, "sflowd_max_children_num", sflowd_max_children_num)
        if snat_route_change is not None:
            pulumi.set(__self__, "snat_route_change", snat_route_change)
        if special_file23_support is not None:
            pulumi.set(__self__, "special_file23_support", special_file23_support)
        if speedtest_server is not None:
            pulumi.set(__self__, "speedtest_server", speedtest_server)
        if split_port is not None:
            pulumi.set(__self__, "split_port", split_port)
        if ssd_trim_date is not None:
            pulumi.set(__self__, "ssd_trim_date", ssd_trim_date)
        if ssd_trim_freq is not None:
            pulumi.set(__self__, "ssd_trim_freq", ssd_trim_freq)
        if ssd_trim_hour is not None:
            pulumi.set(__self__, "ssd_trim_hour", ssd_trim_hour)
        if ssd_trim_min is not None:
            pulumi.set(__self__, "ssd_trim_min", ssd_trim_min)
        if ssd_trim_weekday is not None:
            pulumi.set(__self__, "ssd_trim_weekday", ssd_trim_weekday)
        if ssh_cbc_cipher is not None:
            pulumi.set(__self__, "ssh_cbc_cipher", ssh_cbc_cipher)
        if ssh_enc_algo is not None:
            pulumi.set(__self__, "ssh_enc_algo", ssh_enc_algo)
        if ssh_hmac_md5 is not None:
            pulumi.set(__self__, "ssh_hmac_md5", ssh_hmac_md5)
        if ssh_hostkey_algo is not None:
            pulumi.set(__self__, "ssh_hostkey_algo", ssh_hostkey_algo)
        if ssh_kex_algo is not None:
            pulumi.set(__self__, "ssh_kex_algo", ssh_kex_algo)
        if ssh_kex_sha1 is not None:
            pulumi.set(__self__, "ssh_kex_sha1", ssh_kex_sha1)
        if ssh_mac_algo is not None:
            pulumi.set(__self__, "ssh_mac_algo", ssh_mac_algo)
        if ssh_mac_weak is not None:
            pulumi.set(__self__, "ssh_mac_weak", ssh_mac_weak)
        if ssl_min_proto_version is not None:
            pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if ssl_static_key_ciphers is not None:
            pulumi.set(__self__, "ssl_static_key_ciphers", ssl_static_key_ciphers)
        if sslvpn_cipher_hardware_acceleration is not None:
            pulumi.set(__self__, "sslvpn_cipher_hardware_acceleration", sslvpn_cipher_hardware_acceleration)
        if sslvpn_ems_sn_check is not None:
            pulumi.set(__self__, "sslvpn_ems_sn_check", sslvpn_ems_sn_check)
        if sslvpn_kxp_hardware_acceleration is not None:
            pulumi.set(__self__, "sslvpn_kxp_hardware_acceleration", sslvpn_kxp_hardware_acceleration)
        if sslvpn_max_worker_count is not None:
            pulumi.set(__self__, "sslvpn_max_worker_count", sslvpn_max_worker_count)
        if sslvpn_plugin_version_check is not None:
            pulumi.set(__self__, "sslvpn_plugin_version_check", sslvpn_plugin_version_check)
        if strict_dirty_session_check is not None:
            pulumi.set(__self__, "strict_dirty_session_check", strict_dirty_session_check)
        if strong_crypto is not None:
            pulumi.set(__self__, "strong_crypto", strong_crypto)
        if switch_controller is not None:
            pulumi.set(__self__, "switch_controller", switch_controller)
        if switch_controller_reserved_network is not None:
            pulumi.set(__self__, "switch_controller_reserved_network", switch_controller_reserved_network)
        if sys_perf_log_interval is not None:
            pulumi.set(__self__, "sys_perf_log_interval", sys_perf_log_interval)
        if syslog_affinity is not None:
            pulumi.set(__self__, "syslog_affinity", syslog_affinity)
        if tcp_halfclose_timer is not None:
            pulumi.set(__self__, "tcp_halfclose_timer", tcp_halfclose_timer)
        if tcp_halfopen_timer is not None:
            pulumi.set(__self__, "tcp_halfopen_timer", tcp_halfopen_timer)
        if tcp_option is not None:
            pulumi.set(__self__, "tcp_option", tcp_option)
        if tcp_rst_timer is not None:
            pulumi.set(__self__, "tcp_rst_timer", tcp_rst_timer)
        if tcp_timewait_timer is not None:
            pulumi.set(__self__, "tcp_timewait_timer", tcp_timewait_timer)
        if tftp is not None:
            pulumi.set(__self__, "tftp", tftp)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if tp_mc_skip_policy is not None:
            pulumi.set(__self__, "tp_mc_skip_policy", tp_mc_skip_policy)
        if traffic_priority is not None:
            pulumi.set(__self__, "traffic_priority", traffic_priority)
        if traffic_priority_level is not None:
            pulumi.set(__self__, "traffic_priority_level", traffic_priority_level)
        if two_factor_email_expiry is not None:
            pulumi.set(__self__, "two_factor_email_expiry", two_factor_email_expiry)
        if two_factor_fac_expiry is not None:
            pulumi.set(__self__, "two_factor_fac_expiry", two_factor_fac_expiry)
        if two_factor_ftk_expiry is not None:
            pulumi.set(__self__, "two_factor_ftk_expiry", two_factor_ftk_expiry)
        if two_factor_ftm_expiry is not None:
            pulumi.set(__self__, "two_factor_ftm_expiry", two_factor_ftm_expiry)
        if two_factor_sms_expiry is not None:
            pulumi.set(__self__, "two_factor_sms_expiry", two_factor_sms_expiry)
        if udp_idle_timer is not None:
            pulumi.set(__self__, "udp_idle_timer", udp_idle_timer)
        if url_filter_affinity is not None:
            pulumi.set(__self__, "url_filter_affinity", url_filter_affinity)
        if url_filter_count is not None:
            pulumi.set(__self__, "url_filter_count", url_filter_count)
        if user_device_store_max_devices is not None:
            pulumi.set(__self__, "user_device_store_max_devices", user_device_store_max_devices)
        if user_device_store_max_unified_mem is not None:
            pulumi.set(__self__, "user_device_store_max_unified_mem", user_device_store_max_unified_mem)
        if user_device_store_max_users is not None:
            pulumi.set(__self__, "user_device_store_max_users", user_device_store_max_users)
        if user_server_cert is not None:
            pulumi.set(__self__, "user_server_cert", user_server_cert)
        if vdom_admin is not None:
            pulumi.set(__self__, "vdom_admin", vdom_admin)
        if vdom_mode is not None:
            pulumi.set(__self__, "vdom_mode", vdom_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vip_arp_range is not None:
            pulumi.set(__self__, "vip_arp_range", vip_arp_range)
        if virtual_server_count is not None:
            pulumi.set(__self__, "virtual_server_count", virtual_server_count)
        if virtual_server_hardware_acceleration is not None:
            pulumi.set(__self__, "virtual_server_hardware_acceleration", virtual_server_hardware_acceleration)
        if virtual_switch_vlan is not None:
            pulumi.set(__self__, "virtual_switch_vlan", virtual_switch_vlan)
        if vpn_ems_sn_check is not None:
            pulumi.set(__self__, "vpn_ems_sn_check", vpn_ems_sn_check)
        if wad_affinity is not None:
            pulumi.set(__self__, "wad_affinity", wad_affinity)
        if wad_csvc_cs_count is not None:
            pulumi.set(__self__, "wad_csvc_cs_count", wad_csvc_cs_count)
        if wad_csvc_db_count is not None:
            pulumi.set(__self__, "wad_csvc_db_count", wad_csvc_db_count)
        if wad_memory_change_granularity is not None:
            pulumi.set(__self__, "wad_memory_change_granularity", wad_memory_change_granularity)
        if wad_restart_end_time is not None:
            pulumi.set(__self__, "wad_restart_end_time", wad_restart_end_time)
        if wad_restart_mode is not None:
            pulumi.set(__self__, "wad_restart_mode", wad_restart_mode)
        if wad_restart_start_time is not None:
            pulumi.set(__self__, "wad_restart_start_time", wad_restart_start_time)
        if wad_source_affinity is not None:
            pulumi.set(__self__, "wad_source_affinity", wad_source_affinity)
        if wad_worker_count is not None:
            pulumi.set(__self__, "wad_worker_count", wad_worker_count)
        if wifi_ca_certificate is not None:
            pulumi.set(__self__, "wifi_ca_certificate", wifi_ca_certificate)
        if wifi_certificate is not None:
            pulumi.set(__self__, "wifi_certificate", wifi_certificate)
        if wimax4g_usb is not None:
            pulumi.set(__self__, "wimax4g_usb", wimax4g_usb)
        if wireless_controller is not None:
            pulumi.set(__self__, "wireless_controller", wireless_controller)
        if wireless_controller_port is not None:
            pulumi.set(__self__, "wireless_controller_port", wireless_controller_port)

    @property
    @pulumi.getter(name="adminConcurrent")
    def admin_concurrent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_concurrent")

    @admin_concurrent.setter
    def admin_concurrent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_concurrent", value)

    @property
    @pulumi.getter(name="adminConsoleTimeout")
    def admin_console_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_console_timeout")

    @admin_console_timeout.setter
    def admin_console_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_console_timeout", value)

    @property
    @pulumi.getter(name="adminForticloudSsoDefaultProfile")
    def admin_forticloud_sso_default_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_forticloud_sso_default_profile")

    @admin_forticloud_sso_default_profile.setter
    def admin_forticloud_sso_default_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_forticloud_sso_default_profile", value)

    @property
    @pulumi.getter(name="adminForticloudSsoLogin")
    def admin_forticloud_sso_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_forticloud_sso_login")

    @admin_forticloud_sso_login.setter
    def admin_forticloud_sso_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_forticloud_sso_login", value)

    @property
    @pulumi.getter(name="adminHost")
    def admin_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_host")

    @admin_host.setter
    def admin_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_host", value)

    @property
    @pulumi.getter(name="adminHstsMaxAge")
    def admin_hsts_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_hsts_max_age")

    @admin_hsts_max_age.setter
    def admin_hsts_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_hsts_max_age", value)

    @property
    @pulumi.getter(name="adminHttpsPkiRequired")
    def admin_https_pki_required(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_https_pki_required")

    @admin_https_pki_required.setter
    def admin_https_pki_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_https_pki_required", value)

    @property
    @pulumi.getter(name="adminHttpsRedirect")
    def admin_https_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_https_redirect")

    @admin_https_redirect.setter
    def admin_https_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_https_redirect", value)

    @property
    @pulumi.getter(name="adminHttpsSslBannedCiphers")
    def admin_https_ssl_banned_ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_https_ssl_banned_ciphers")

    @admin_https_ssl_banned_ciphers.setter
    def admin_https_ssl_banned_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_https_ssl_banned_ciphers", value)

    @property
    @pulumi.getter(name="adminHttpsSslCiphersuites")
    def admin_https_ssl_ciphersuites(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_https_ssl_ciphersuites")

    @admin_https_ssl_ciphersuites.setter
    def admin_https_ssl_ciphersuites(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_https_ssl_ciphersuites", value)

    @property
    @pulumi.getter(name="adminHttpsSslVersions")
    def admin_https_ssl_versions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_https_ssl_versions")

    @admin_https_ssl_versions.setter
    def admin_https_ssl_versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_https_ssl_versions", value)

    @property
    @pulumi.getter(name="adminLockoutDuration")
    def admin_lockout_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_lockout_duration")

    @admin_lockout_duration.setter
    def admin_lockout_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_lockout_duration", value)

    @property
    @pulumi.getter(name="adminLockoutThreshold")
    def admin_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_lockout_threshold")

    @admin_lockout_threshold.setter
    def admin_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_lockout_threshold", value)

    @property
    @pulumi.getter(name="adminLoginMax")
    def admin_login_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_login_max")

    @admin_login_max.setter
    def admin_login_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_login_max", value)

    @property
    @pulumi.getter(name="adminMaintainer")
    def admin_maintainer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_maintainer")

    @admin_maintainer.setter
    def admin_maintainer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_maintainer", value)

    @property
    @pulumi.getter(name="adminPort")
    def admin_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_port")

    @admin_port.setter
    def admin_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_port", value)

    @property
    @pulumi.getter(name="adminRestrictLocal")
    def admin_restrict_local(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_restrict_local")

    @admin_restrict_local.setter
    def admin_restrict_local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_restrict_local", value)

    @property
    @pulumi.getter(name="adminScp")
    def admin_scp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_scp")

    @admin_scp.setter
    def admin_scp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_scp", value)

    @property
    @pulumi.getter(name="adminServerCert")
    def admin_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_server_cert")

    @admin_server_cert.setter
    def admin_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_server_cert", value)

    @property
    @pulumi.getter(name="adminSport")
    def admin_sport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_sport")

    @admin_sport.setter
    def admin_sport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_sport", value)

    @property
    @pulumi.getter(name="adminSshGraceTime")
    def admin_ssh_grace_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_ssh_grace_time")

    @admin_ssh_grace_time.setter
    def admin_ssh_grace_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_ssh_grace_time", value)

    @property
    @pulumi.getter(name="adminSshPassword")
    def admin_ssh_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_ssh_password")

    @admin_ssh_password.setter
    def admin_ssh_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_ssh_password", value)

    @property
    @pulumi.getter(name="adminSshPort")
    def admin_ssh_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_ssh_port")

    @admin_ssh_port.setter
    def admin_ssh_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_ssh_port", value)

    @property
    @pulumi.getter(name="adminSshV1")
    def admin_ssh_v1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_ssh_v1")

    @admin_ssh_v1.setter
    def admin_ssh_v1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_ssh_v1", value)

    @property
    @pulumi.getter(name="adminTelnet")
    def admin_telnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_telnet")

    @admin_telnet.setter
    def admin_telnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_telnet", value)

    @property
    @pulumi.getter(name="adminTelnetPort")
    def admin_telnet_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_telnet_port")

    @admin_telnet_port.setter
    def admin_telnet_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_telnet_port", value)

    @property
    @pulumi.getter
    def admintimeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admintimeout")

    @admintimeout.setter
    def admintimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admintimeout", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="allowTrafficRedirect")
    def allow_traffic_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_traffic_redirect")

    @allow_traffic_redirect.setter
    def allow_traffic_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_traffic_redirect", value)

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anti_replay")

    @anti_replay.setter
    def anti_replay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anti_replay", value)

    @property
    @pulumi.getter(name="arpMaxEntry")
    def arp_max_entry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "arp_max_entry")

    @arp_max_entry.setter
    def arp_max_entry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "arp_max_entry", value)

    @property
    @pulumi.getter
    def asymroute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asymroute")

    @asymroute.setter
    def asymroute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asymroute", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authHttpPort")
    def auth_http_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_http_port")

    @auth_http_port.setter
    def auth_http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_http_port", value)

    @property
    @pulumi.getter(name="authHttpsPort")
    def auth_https_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_https_port")

    @auth_https_port.setter
    def auth_https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_https_port", value)

    @property
    @pulumi.getter(name="authIkeSamlPort")
    def auth_ike_saml_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_ike_saml_port")

    @auth_ike_saml_port.setter
    def auth_ike_saml_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_ike_saml_port", value)

    @property
    @pulumi.getter(name="authKeepalive")
    def auth_keepalive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_keepalive")

    @auth_keepalive.setter
    def auth_keepalive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keepalive", value)

    @property
    @pulumi.getter(name="authSessionLimit")
    def auth_session_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_session_limit")

    @auth_session_limit.setter
    def auth_session_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_session_limit", value)

    @property
    @pulumi.getter(name="autoAuthExtensionDevice")
    def auto_auth_extension_device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_auth_extension_device")

    @auto_auth_extension_device.setter
    def auto_auth_extension_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_auth_extension_device", value)

    @property
    @pulumi.getter(name="autorunLogFsck")
    def autorun_log_fsck(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autorun_log_fsck")

    @autorun_log_fsck.setter
    def autorun_log_fsck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autorun_log_fsck", value)

    @property
    @pulumi.getter(name="avAffinity")
    def av_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_affinity")

    @av_affinity.setter
    def av_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_affinity", value)

    @property
    @pulumi.getter(name="avFailopen")
    def av_failopen(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_failopen")

    @av_failopen.setter
    def av_failopen(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_failopen", value)

    @property
    @pulumi.getter(name="avFailopenSession")
    def av_failopen_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_failopen_session")

    @av_failopen_session.setter
    def av_failopen_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_failopen_session", value)

    @property
    @pulumi.getter(name="batchCmdb")
    def batch_cmdb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "batch_cmdb")

    @batch_cmdb.setter
    def batch_cmdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "batch_cmdb", value)

    @property
    @pulumi.getter(name="blockSessionTimer")
    def block_session_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_session_timer")

    @block_session_timer.setter
    def block_session_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_session_timer", value)

    @property
    @pulumi.getter(name="brFdbMaxEntry")
    def br_fdb_max_entry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "br_fdb_max_entry")

    @br_fdb_max_entry.setter
    def br_fdb_max_entry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "br_fdb_max_entry", value)

    @property
    @pulumi.getter(name="certChainMax")
    def cert_chain_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cert_chain_max")

    @cert_chain_max.setter
    def cert_chain_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_chain_max", value)

    @property
    @pulumi.getter(name="cfgRevertTimeout")
    def cfg_revert_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cfg_revert_timeout")

    @cfg_revert_timeout.setter
    def cfg_revert_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cfg_revert_timeout", value)

    @property
    @pulumi.getter(name="cfgSave")
    def cfg_save(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cfg_save")

    @cfg_save.setter
    def cfg_save(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cfg_save", value)

    @property
    @pulumi.getter(name="checkProtocolHeader")
    def check_protocol_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_protocol_header")

    @check_protocol_header.setter
    def check_protocol_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_protocol_header", value)

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_reset_range")

    @check_reset_range.setter
    def check_reset_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_reset_range", value)

    @property
    @pulumi.getter(name="cliAuditLog")
    def cli_audit_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cli_audit_log")

    @cli_audit_log.setter
    def cli_audit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_audit_log", value)

    @property
    @pulumi.getter(name="cloudCommunication")
    def cloud_communication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_communication")

    @cloud_communication.setter
    def cloud_communication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_communication", value)

    @property
    @pulumi.getter(name="cltCertReq")
    def clt_cert_req(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clt_cert_req")

    @clt_cert_req.setter
    def clt_cert_req(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clt_cert_req", value)

    @property
    @pulumi.getter(name="cmdbsvrAffinity")
    def cmdbsvr_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmdbsvr_affinity")

    @cmdbsvr_affinity.setter
    def cmdbsvr_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmdbsvr_affinity", value)

    @property
    @pulumi.getter(name="complianceCheck")
    def compliance_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compliance_check")

    @compliance_check.setter
    def compliance_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_check", value)

    @property
    @pulumi.getter(name="complianceCheckTime")
    def compliance_check_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compliance_check_time")

    @compliance_check_time.setter
    def compliance_check_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_check_time", value)

    @property
    @pulumi.getter(name="cpuUseThreshold")
    def cpu_use_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu_use_threshold")

    @cpu_use_threshold.setter
    def cpu_use_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_use_threshold", value)

    @property
    @pulumi.getter(name="csrCaAttribute")
    def csr_ca_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csr_ca_attribute")

    @csr_ca_attribute.setter
    def csr_ca_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_ca_attribute", value)

    @property
    @pulumi.getter(name="dailyRestart")
    def daily_restart(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "daily_restart")

    @daily_restart.setter
    def daily_restart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daily_restart", value)

    @property
    @pulumi.getter(name="defaultServiceSourcePort")
    def default_service_source_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_service_source_port")

    @default_service_source_port.setter
    def default_service_source_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_service_source_port", value)

    @property
    @pulumi.getter(name="deviceIdentificationActiveScanDelay")
    def device_identification_active_scan_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_identification_active_scan_delay")

    @device_identification_active_scan_delay.setter
    def device_identification_active_scan_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_identification_active_scan_delay", value)

    @property
    @pulumi.getter(name="deviceIdleTimeout")
    def device_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_idle_timeout")

    @device_idle_timeout.setter
    def device_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_idle_timeout", value)

    @property
    @pulumi.getter(name="dhParams")
    def dh_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dh_params")

    @dh_params.setter
    def dh_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dh_params", value)

    @property
    @pulumi.getter(name="dnsproxyWorkerCount")
    def dnsproxy_worker_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dnsproxy_worker_count")

    @dnsproxy_worker_count.setter
    def dnsproxy_worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dnsproxy_worker_count", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="earlyTcpNpuSession")
    def early_tcp_npu_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "early_tcp_npu_session")

    @early_tcp_npu_session.setter
    def early_tcp_npu_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "early_tcp_npu_session", value)

    @property
    @pulumi.getter(name="editVdomPrompt")
    def edit_vdom_prompt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "edit_vdom_prompt")

    @edit_vdom_prompt.setter
    def edit_vdom_prompt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edit_vdom_prompt", value)

    @property
    @pulumi.getter(name="endpointControlFdsAccess")
    def endpoint_control_fds_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_control_fds_access")

    @endpoint_control_fds_access.setter
    def endpoint_control_fds_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_control_fds_access", value)

    @property
    @pulumi.getter(name="endpointControlPortalPort")
    def endpoint_control_portal_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "endpoint_control_portal_port")

    @endpoint_control_portal_port.setter
    def endpoint_control_portal_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "endpoint_control_portal_port", value)

    @property
    @pulumi.getter(name="extenderControllerReservedNetwork")
    def extender_controller_reserved_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extender_controller_reserved_network")

    @extender_controller_reserved_network.setter
    def extender_controller_reserved_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extender_controller_reserved_network", value)

    @property
    @pulumi.getter
    def failtime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failtime")

    @failtime.setter
    def failtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failtime", value)

    @property
    @pulumi.getter(name="fazDiskBufferSize")
    def faz_disk_buffer_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "faz_disk_buffer_size")

    @faz_disk_buffer_size.setter
    def faz_disk_buffer_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "faz_disk_buffer_size", value)

    @property
    @pulumi.getter(name="fdsStatistics")
    def fds_statistics(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fds_statistics")

    @fds_statistics.setter
    def fds_statistics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fds_statistics", value)

    @property
    @pulumi.getter(name="fdsStatisticsPeriod")
    def fds_statistics_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fds_statistics_period")

    @fds_statistics_period.setter
    def fds_statistics_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fds_statistics_period", value)

    @property
    @pulumi.getter(name="fecPort")
    def fec_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_port")

    @fec_port.setter
    def fec_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_port", value)

    @property
    @pulumi.getter(name="fgdAlertSubscription")
    def fgd_alert_subscription(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fgd_alert_subscription")

    @fgd_alert_subscription.setter
    def fgd_alert_subscription(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgd_alert_subscription", value)

    @property
    @pulumi.getter(name="forticonverterConfigUpload")
    def forticonverter_config_upload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticonverter_config_upload")

    @forticonverter_config_upload.setter
    def forticonverter_config_upload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticonverter_config_upload", value)

    @property
    @pulumi.getter(name="forticonverterIntegration")
    def forticonverter_integration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticonverter_integration")

    @forticonverter_integration.setter
    def forticonverter_integration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticonverter_integration", value)

    @property
    @pulumi.getter
    def fortiextender(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiextender")

    @fortiextender.setter
    def fortiextender(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiextender", value)

    @property
    @pulumi.getter(name="fortiextenderDataPort")
    def fortiextender_data_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortiextender_data_port")

    @fortiextender_data_port.setter
    def fortiextender_data_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortiextender_data_port", value)

    @property
    @pulumi.getter(name="fortiextenderDiscoveryLockdown")
    def fortiextender_discovery_lockdown(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiextender_discovery_lockdown")

    @fortiextender_discovery_lockdown.setter
    def fortiextender_discovery_lockdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiextender_discovery_lockdown", value)

    @property
    @pulumi.getter(name="fortiextenderProvisionOnAuthorization")
    def fortiextender_provision_on_authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiextender_provision_on_authorization")

    @fortiextender_provision_on_authorization.setter
    def fortiextender_provision_on_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiextender_provision_on_authorization", value)

    @property
    @pulumi.getter(name="fortiextenderVlanMode")
    def fortiextender_vlan_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiextender_vlan_mode")

    @fortiextender_vlan_mode.setter
    def fortiextender_vlan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiextender_vlan_mode", value)

    @property
    @pulumi.getter(name="fortiipamIntegration")
    def fortiipam_integration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiipam_integration")

    @fortiipam_integration.setter
    def fortiipam_integration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiipam_integration", value)

    @property
    @pulumi.getter(name="fortiservicePort")
    def fortiservice_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortiservice_port")

    @fortiservice_port.setter
    def fortiservice_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortiservice_port", value)

    @property
    @pulumi.getter(name="fortitokenCloud")
    def fortitoken_cloud(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortitoken_cloud")

    @fortitoken_cloud.setter
    def fortitoken_cloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortitoken_cloud", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="guiAllowDefaultHostname")
    def gui_allow_default_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_allow_default_hostname")

    @gui_allow_default_hostname.setter
    def gui_allow_default_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_allow_default_hostname", value)

    @property
    @pulumi.getter(name="guiAllowIncompatibleFabricFgt")
    def gui_allow_incompatible_fabric_fgt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_allow_incompatible_fabric_fgt")

    @gui_allow_incompatible_fabric_fgt.setter
    def gui_allow_incompatible_fabric_fgt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_allow_incompatible_fabric_fgt", value)

    @property
    @pulumi.getter(name="guiAppDetectionSdwan")
    def gui_app_detection_sdwan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_app_detection_sdwan")

    @gui_app_detection_sdwan.setter
    def gui_app_detection_sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_app_detection_sdwan", value)

    @property
    @pulumi.getter(name="guiCdnDomainOverride")
    def gui_cdn_domain_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_cdn_domain_override")

    @gui_cdn_domain_override.setter
    def gui_cdn_domain_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_cdn_domain_override", value)

    @property
    @pulumi.getter(name="guiCdnUsage")
    def gui_cdn_usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_cdn_usage")

    @gui_cdn_usage.setter
    def gui_cdn_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_cdn_usage", value)

    @property
    @pulumi.getter(name="guiCertificates")
    def gui_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_certificates")

    @gui_certificates.setter
    def gui_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_certificates", value)

    @property
    @pulumi.getter(name="guiCustomLanguage")
    def gui_custom_language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_custom_language")

    @gui_custom_language.setter
    def gui_custom_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_custom_language", value)

    @property
    @pulumi.getter(name="guiDateFormat")
    def gui_date_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_date_format")

    @gui_date_format.setter
    def gui_date_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_date_format", value)

    @property
    @pulumi.getter(name="guiDateTimeSource")
    def gui_date_time_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_date_time_source")

    @gui_date_time_source.setter
    def gui_date_time_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_date_time_source", value)

    @property
    @pulumi.getter(name="guiDeviceLatitude")
    def gui_device_latitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_device_latitude")

    @gui_device_latitude.setter
    def gui_device_latitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_device_latitude", value)

    @property
    @pulumi.getter(name="guiDeviceLongitude")
    def gui_device_longitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_device_longitude")

    @gui_device_longitude.setter
    def gui_device_longitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_device_longitude", value)

    @property
    @pulumi.getter(name="guiDisplayHostname")
    def gui_display_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_display_hostname")

    @gui_display_hostname.setter
    def gui_display_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_display_hostname", value)

    @property
    @pulumi.getter(name="guiFirmwareUpgradeSetupWarning")
    def gui_firmware_upgrade_setup_warning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_firmware_upgrade_setup_warning")

    @gui_firmware_upgrade_setup_warning.setter
    def gui_firmware_upgrade_setup_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_firmware_upgrade_setup_warning", value)

    @property
    @pulumi.getter(name="guiFirmwareUpgradeWarning")
    def gui_firmware_upgrade_warning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_firmware_upgrade_warning")

    @gui_firmware_upgrade_warning.setter
    def gui_firmware_upgrade_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_firmware_upgrade_warning", value)

    @property
    @pulumi.getter(name="guiForticareRegistrationSetupWarning")
    def gui_forticare_registration_setup_warning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_forticare_registration_setup_warning")

    @gui_forticare_registration_setup_warning.setter
    def gui_forticare_registration_setup_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_forticare_registration_setup_warning", value)

    @property
    @pulumi.getter(name="guiFortigateCloudSandbox")
    def gui_fortigate_cloud_sandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_fortigate_cloud_sandbox")

    @gui_fortigate_cloud_sandbox.setter
    def gui_fortigate_cloud_sandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_fortigate_cloud_sandbox", value)

    @property
    @pulumi.getter(name="guiFortiguardResourceFetch")
    def gui_fortiguard_resource_fetch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_fortiguard_resource_fetch")

    @gui_fortiguard_resource_fetch.setter
    def gui_fortiguard_resource_fetch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_fortiguard_resource_fetch", value)

    @property
    @pulumi.getter(name="guiFortisandboxCloud")
    def gui_fortisandbox_cloud(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_fortisandbox_cloud")

    @gui_fortisandbox_cloud.setter
    def gui_fortisandbox_cloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_fortisandbox_cloud", value)

    @property
    @pulumi.getter(name="guiIpv6")
    def gui_ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_ipv6")

    @gui_ipv6.setter
    def gui_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_ipv6", value)

    @property
    @pulumi.getter(name="guiLinesPerPage")
    def gui_lines_per_page(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gui_lines_per_page")

    @gui_lines_per_page.setter
    def gui_lines_per_page(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gui_lines_per_page", value)

    @property
    @pulumi.getter(name="guiLocalOut")
    def gui_local_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_local_out")

    @gui_local_out.setter
    def gui_local_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_local_out", value)

    @property
    @pulumi.getter(name="guiReplacementMessageGroups")
    def gui_replacement_message_groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_replacement_message_groups")

    @gui_replacement_message_groups.setter
    def gui_replacement_message_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_replacement_message_groups", value)

    @property
    @pulumi.getter(name="guiRestApiCache")
    def gui_rest_api_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_rest_api_cache")

    @gui_rest_api_cache.setter
    def gui_rest_api_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_rest_api_cache", value)

    @property
    @pulumi.getter(name="guiTheme")
    def gui_theme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_theme")

    @gui_theme.setter
    def gui_theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_theme", value)

    @property
    @pulumi.getter(name="guiWirelessOpensecurity")
    def gui_wireless_opensecurity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_wireless_opensecurity")

    @gui_wireless_opensecurity.setter
    def gui_wireless_opensecurity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_wireless_opensecurity", value)

    @property
    @pulumi.getter(name="guiWorkflowManagement")
    def gui_workflow_management(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_workflow_management")

    @gui_workflow_management.setter
    def gui_workflow_management(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_workflow_management", value)

    @property
    @pulumi.getter(name="haAffinity")
    def ha_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha_affinity")

    @ha_affinity.setter
    def ha_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_affinity", value)

    @property
    @pulumi.getter(name="honorDf")
    def honor_df(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "honor_df")

    @honor_df.setter
    def honor_df(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "honor_df", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="igmpStateLimit")
    def igmp_state_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "igmp_state_limit")

    @igmp_state_limit.setter
    def igmp_state_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "igmp_state_limit", value)

    @property
    @pulumi.getter(name="ikeEmbryonicLimit")
    def ike_embryonic_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ike_embryonic_limit")

    @ike_embryonic_limit.setter
    def ike_embryonic_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_embryonic_limit", value)

    @property
    @pulumi.getter(name="interfaceSubnetUsage")
    def interface_subnet_usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_subnet_usage")

    @interface_subnet_usage.setter
    def interface_subnet_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_subnet_usage", value)

    @property
    @pulumi.getter(name="internetServiceDatabase")
    def internet_service_database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_database")

    @internet_service_database.setter
    def internet_service_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_database", value)

    @property
    @pulumi.getter(name="internetServiceDownloadLists")
    def internet_service_download_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemGlobalInternetServiceDownloadListArgs']]]]:
        return pulumi.get(self, "internet_service_download_lists")

    @internet_service_download_lists.setter
    def internet_service_download_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemGlobalInternetServiceDownloadListArgs']]]]):
        pulumi.set(self, "internet_service_download_lists", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="ipFragmentMemThresholds")
    def ip_fragment_mem_thresholds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip_fragment_mem_thresholds")

    @ip_fragment_mem_thresholds.setter
    def ip_fragment_mem_thresholds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_fragment_mem_thresholds", value)

    @property
    @pulumi.getter(name="ipSrcPortRange")
    def ip_src_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_src_port_range")

    @ip_src_port_range.setter
    def ip_src_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_src_port_range", value)

    @property
    @pulumi.getter(name="ipsAffinity")
    def ips_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_affinity")

    @ips_affinity.setter
    def ips_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_affinity", value)

    @property
    @pulumi.getter(name="ipsecAsicOffload")
    def ipsec_asic_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_asic_offload")

    @ipsec_asic_offload.setter
    def ipsec_asic_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_asic_offload", value)

    @property
    @pulumi.getter(name="ipsecHaSeqjumpRate")
    def ipsec_ha_seqjump_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipsec_ha_seqjump_rate")

    @ipsec_ha_seqjump_rate.setter
    def ipsec_ha_seqjump_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_ha_seqjump_rate", value)

    @property
    @pulumi.getter(name="ipsecHmacOffload")
    def ipsec_hmac_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_hmac_offload")

    @ipsec_hmac_offload.setter
    def ipsec_hmac_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_hmac_offload", value)

    @property
    @pulumi.getter(name="ipsecRoundRobin")
    def ipsec_round_robin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_round_robin")

    @ipsec_round_robin.setter
    def ipsec_round_robin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_round_robin", value)

    @property
    @pulumi.getter(name="ipsecSoftDecAsync")
    def ipsec_soft_dec_async(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_soft_dec_async")

    @ipsec_soft_dec_async.setter
    def ipsec_soft_dec_async(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_soft_dec_async", value)

    @property
    @pulumi.getter(name="ipv6AcceptDad")
    def ipv6_accept_dad(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipv6_accept_dad")

    @ipv6_accept_dad.setter
    def ipv6_accept_dad(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_accept_dad", value)

    @property
    @pulumi.getter(name="ipv6AllowAnycastProbe")
    def ipv6_allow_anycast_probe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_allow_anycast_probe")

    @ipv6_allow_anycast_probe.setter
    def ipv6_allow_anycast_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_allow_anycast_probe", value)

    @property
    @pulumi.getter(name="ipv6AllowLocalInSlientDrop")
    def ipv6_allow_local_in_slient_drop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_allow_local_in_slient_drop")

    @ipv6_allow_local_in_slient_drop.setter
    def ipv6_allow_local_in_slient_drop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_allow_local_in_slient_drop", value)

    @property
    @pulumi.getter(name="ipv6AllowMulticastProbe")
    def ipv6_allow_multicast_probe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_allow_multicast_probe")

    @ipv6_allow_multicast_probe.setter
    def ipv6_allow_multicast_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_allow_multicast_probe", value)

    @property
    @pulumi.getter(name="ipv6AllowTrafficRedirect")
    def ipv6_allow_traffic_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_allow_traffic_redirect")

    @ipv6_allow_traffic_redirect.setter
    def ipv6_allow_traffic_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_allow_traffic_redirect", value)

    @property
    @pulumi.getter(name="irqTimeAccounting")
    def irq_time_accounting(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "irq_time_accounting")

    @irq_time_accounting.setter
    def irq_time_accounting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "irq_time_accounting", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def ldapconntimeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ldapconntimeout")

    @ldapconntimeout.setter
    def ldapconntimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ldapconntimeout", value)

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp_reception")

    @lldp_reception.setter
    def lldp_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_reception", value)

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp_transmission")

    @lldp_transmission.setter
    def lldp_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_transmission", value)

    @property
    @pulumi.getter(name="logSingleCpuHigh")
    def log_single_cpu_high(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_single_cpu_high")

    @log_single_cpu_high.setter
    def log_single_cpu_high(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_single_cpu_high", value)

    @property
    @pulumi.getter(name="logSslConnection")
    def log_ssl_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_ssl_connection")

    @log_ssl_connection.setter
    def log_ssl_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_ssl_connection", value)

    @property
    @pulumi.getter(name="logUuidAddress")
    def log_uuid_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_uuid_address")

    @log_uuid_address.setter
    def log_uuid_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_uuid_address", value)

    @property
    @pulumi.getter(name="logUuidPolicy")
    def log_uuid_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_uuid_policy")

    @log_uuid_policy.setter
    def log_uuid_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_uuid_policy", value)

    @property
    @pulumi.getter(name="loginTimestamp")
    def login_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_timestamp")

    @login_timestamp.setter
    def login_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_timestamp", value)

    @property
    @pulumi.getter(name="longVdomName")
    def long_vdom_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "long_vdom_name")

    @long_vdom_name.setter
    def long_vdom_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_vdom_name", value)

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_ip")

    @management_ip.setter
    def management_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_ip", value)

    @property
    @pulumi.getter(name="managementPort")
    def management_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "management_port")

    @management_port.setter
    def management_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "management_port", value)

    @property
    @pulumi.getter(name="managementPortUseAdminSport")
    def management_port_use_admin_sport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_port_use_admin_sport")

    @management_port_use_admin_sport.setter
    def management_port_use_admin_sport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_port_use_admin_sport", value)

    @property
    @pulumi.getter(name="managementVdom")
    def management_vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_vdom")

    @management_vdom.setter
    def management_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_vdom", value)

    @property
    @pulumi.getter(name="maxDlpstatMemory")
    def max_dlpstat_memory(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_dlpstat_memory")

    @max_dlpstat_memory.setter
    def max_dlpstat_memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_dlpstat_memory", value)

    @property
    @pulumi.getter(name="maxRouteCacheSize")
    def max_route_cache_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_route_cache_size")

    @max_route_cache_size.setter
    def max_route_cache_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_route_cache_size", value)

    @property
    @pulumi.getter(name="mcTtlNotchange")
    def mc_ttl_notchange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mc_ttl_notchange")

    @mc_ttl_notchange.setter
    def mc_ttl_notchange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mc_ttl_notchange", value)

    @property
    @pulumi.getter(name="memoryUseThresholdExtreme")
    def memory_use_threshold_extreme(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_use_threshold_extreme")

    @memory_use_threshold_extreme.setter
    def memory_use_threshold_extreme(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_use_threshold_extreme", value)

    @property
    @pulumi.getter(name="memoryUseThresholdGreen")
    def memory_use_threshold_green(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_use_threshold_green")

    @memory_use_threshold_green.setter
    def memory_use_threshold_green(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_use_threshold_green", value)

    @property
    @pulumi.getter(name="memoryUseThresholdRed")
    def memory_use_threshold_red(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_use_threshold_red")

    @memory_use_threshold_red.setter
    def memory_use_threshold_red(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_use_threshold_red", value)

    @property
    @pulumi.getter(name="miglogAffinity")
    def miglog_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "miglog_affinity")

    @miglog_affinity.setter
    def miglog_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "miglog_affinity", value)

    @property
    @pulumi.getter(name="miglogdChildren")
    def miglogd_children(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "miglogd_children")

    @miglogd_children.setter
    def miglogd_children(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "miglogd_children", value)

    @property
    @pulumi.getter(name="multiFactorAuthentication")
    def multi_factor_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multi_factor_authentication")

    @multi_factor_authentication.setter
    def multi_factor_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_factor_authentication", value)

    @property
    @pulumi.getter(name="multicastForward")
    def multicast_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_forward")

    @multicast_forward.setter
    def multicast_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_forward", value)

    @property
    @pulumi.getter(name="ndpMaxEntry")
    def ndp_max_entry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ndp_max_entry")

    @ndp_max_entry.setter
    def ndp_max_entry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ndp_max_entry", value)

    @property
    @pulumi.getter(name="perUserBal")
    def per_user_bal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "per_user_bal")

    @per_user_bal.setter
    def per_user_bal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_user_bal", value)

    @property
    @pulumi.getter(name="perUserBwl")
    def per_user_bwl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "per_user_bwl")

    @per_user_bwl.setter
    def per_user_bwl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_user_bwl", value)

    @property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pmtu_discovery")

    @pmtu_discovery.setter
    def pmtu_discovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pmtu_discovery", value)

    @property
    @pulumi.getter(name="policyAuthConcurrent")
    def policy_auth_concurrent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policy_auth_concurrent")

    @policy_auth_concurrent.setter
    def policy_auth_concurrent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_auth_concurrent", value)

    @property
    @pulumi.getter(name="postLoginBanner")
    def post_login_banner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_login_banner")

    @post_login_banner.setter
    def post_login_banner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_login_banner", value)

    @property
    @pulumi.getter(name="preLoginBanner")
    def pre_login_banner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_login_banner")

    @pre_login_banner.setter
    def pre_login_banner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_login_banner", value)

    @property
    @pulumi.getter(name="privateDataEncryption")
    def private_data_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_data_encryption")

    @private_data_encryption.setter
    def private_data_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_data_encryption", value)

    @property
    @pulumi.getter(name="proxyAuthLifetime")
    def proxy_auth_lifetime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_auth_lifetime")

    @proxy_auth_lifetime.setter
    def proxy_auth_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_auth_lifetime", value)

    @property
    @pulumi.getter(name="proxyAuthLifetimeTimeout")
    def proxy_auth_lifetime_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "proxy_auth_lifetime_timeout")

    @proxy_auth_lifetime_timeout.setter
    def proxy_auth_lifetime_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_auth_lifetime_timeout", value)

    @property
    @pulumi.getter(name="proxyAuthTimeout")
    def proxy_auth_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "proxy_auth_timeout")

    @proxy_auth_timeout.setter
    def proxy_auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_auth_timeout", value)

    @property
    @pulumi.getter(name="proxyCertUseMgmtVdom")
    def proxy_cert_use_mgmt_vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_cert_use_mgmt_vdom")

    @proxy_cert_use_mgmt_vdom.setter
    def proxy_cert_use_mgmt_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_cert_use_mgmt_vdom", value)

    @property
    @pulumi.getter(name="proxyCipherHardwareAcceleration")
    def proxy_cipher_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_cipher_hardware_acceleration")

    @proxy_cipher_hardware_acceleration.setter
    def proxy_cipher_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_cipher_hardware_acceleration", value)

    @property
    @pulumi.getter(name="proxyHardwareAcceleration")
    def proxy_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_hardware_acceleration")

    @proxy_hardware_acceleration.setter
    def proxy_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_hardware_acceleration", value)

    @property
    @pulumi.getter(name="proxyKeepAliveMode")
    def proxy_keep_alive_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_keep_alive_mode")

    @proxy_keep_alive_mode.setter
    def proxy_keep_alive_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_keep_alive_mode", value)

    @property
    @pulumi.getter(name="proxyKxpHardwareAcceleration")
    def proxy_kxp_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_kxp_hardware_acceleration")

    @proxy_kxp_hardware_acceleration.setter
    def proxy_kxp_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_kxp_hardware_acceleration", value)

    @property
    @pulumi.getter(name="proxyReAuthenticationMode")
    def proxy_re_authentication_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_re_authentication_mode")

    @proxy_re_authentication_mode.setter
    def proxy_re_authentication_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_re_authentication_mode", value)

    @property
    @pulumi.getter(name="proxyReAuthenticationTime")
    def proxy_re_authentication_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "proxy_re_authentication_time")

    @proxy_re_authentication_time.setter
    def proxy_re_authentication_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_re_authentication_time", value)

    @property
    @pulumi.getter(name="proxyResourceMode")
    def proxy_resource_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_resource_mode")

    @proxy_resource_mode.setter
    def proxy_resource_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_resource_mode", value)

    @property
    @pulumi.getter(name="proxyWorkerCount")
    def proxy_worker_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "proxy_worker_count")

    @proxy_worker_count.setter
    def proxy_worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_worker_count", value)

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radius_port")

    @radius_port.setter
    def radius_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_port", value)

    @property
    @pulumi.getter(name="rebootUponConfigRestore")
    def reboot_upon_config_restore(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reboot_upon_config_restore")

    @reboot_upon_config_restore.setter
    def reboot_upon_config_restore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reboot_upon_config_restore", value)

    @property
    @pulumi.getter
    def refresh(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh")

    @refresh.setter
    def refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh", value)

    @property
    @pulumi.getter
    def remoteauthtimeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remoteauthtimeout")

    @remoteauthtimeout.setter
    def remoteauthtimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remoteauthtimeout", value)

    @property
    @pulumi.getter(name="resetSessionlessTcp")
    def reset_sessionless_tcp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reset_sessionless_tcp")

    @reset_sessionless_tcp.setter
    def reset_sessionless_tcp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reset_sessionless_tcp", value)

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restart_time")

    @restart_time.setter
    def restart_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_time", value)

    @property
    @pulumi.getter(name="revisionBackupOnLogout")
    def revision_backup_on_logout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revision_backup_on_logout")

    @revision_backup_on_logout.setter
    def revision_backup_on_logout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_backup_on_logout", value)

    @property
    @pulumi.getter(name="revisionImageAutoBackup")
    def revision_image_auto_backup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revision_image_auto_backup")

    @revision_image_auto_backup.setter
    def revision_image_auto_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_image_auto_backup", value)

    @property
    @pulumi.getter(name="scanunitCount")
    def scanunit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scanunit_count")

    @scanunit_count.setter
    def scanunit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scanunit_count", value)

    @property
    @pulumi.getter(name="securityRatingResultSubmission")
    def security_rating_result_submission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_rating_result_submission")

    @security_rating_result_submission.setter
    def security_rating_result_submission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_rating_result_submission", value)

    @property
    @pulumi.getter(name="securityRatingRunOnSchedule")
    def security_rating_run_on_schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_rating_run_on_schedule")

    @security_rating_run_on_schedule.setter
    def security_rating_run_on_schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_rating_run_on_schedule", value)

    @property
    @pulumi.getter(name="sendPmtuIcmp")
    def send_pmtu_icmp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_pmtu_icmp")

    @send_pmtu_icmp.setter
    def send_pmtu_icmp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_pmtu_icmp", value)

    @property
    @pulumi.getter(name="sflowdMaxChildrenNum")
    def sflowd_max_children_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sflowd_max_children_num")

    @sflowd_max_children_num.setter
    def sflowd_max_children_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sflowd_max_children_num", value)

    @property
    @pulumi.getter(name="snatRouteChange")
    def snat_route_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_route_change")

    @snat_route_change.setter
    def snat_route_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_route_change", value)

    @property
    @pulumi.getter(name="specialFile23Support")
    def special_file23_support(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "special_file23_support")

    @special_file23_support.setter
    def special_file23_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "special_file23_support", value)

    @property
    @pulumi.getter(name="speedtestServer")
    def speedtest_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "speedtest_server")

    @speedtest_server.setter
    def speedtest_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speedtest_server", value)

    @property
    @pulumi.getter(name="splitPort")
    def split_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_port")

    @split_port.setter
    def split_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_port", value)

    @property
    @pulumi.getter(name="ssdTrimDate")
    def ssd_trim_date(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssd_trim_date")

    @ssd_trim_date.setter
    def ssd_trim_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssd_trim_date", value)

    @property
    @pulumi.getter(name="ssdTrimFreq")
    def ssd_trim_freq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssd_trim_freq")

    @ssd_trim_freq.setter
    def ssd_trim_freq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssd_trim_freq", value)

    @property
    @pulumi.getter(name="ssdTrimHour")
    def ssd_trim_hour(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssd_trim_hour")

    @ssd_trim_hour.setter
    def ssd_trim_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssd_trim_hour", value)

    @property
    @pulumi.getter(name="ssdTrimMin")
    def ssd_trim_min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssd_trim_min")

    @ssd_trim_min.setter
    def ssd_trim_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssd_trim_min", value)

    @property
    @pulumi.getter(name="ssdTrimWeekday")
    def ssd_trim_weekday(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssd_trim_weekday")

    @ssd_trim_weekday.setter
    def ssd_trim_weekday(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssd_trim_weekday", value)

    @property
    @pulumi.getter(name="sshCbcCipher")
    def ssh_cbc_cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_cbc_cipher")

    @ssh_cbc_cipher.setter
    def ssh_cbc_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_cbc_cipher", value)

    @property
    @pulumi.getter(name="sshEncAlgo")
    def ssh_enc_algo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_enc_algo")

    @ssh_enc_algo.setter
    def ssh_enc_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_enc_algo", value)

    @property
    @pulumi.getter(name="sshHmacMd5")
    def ssh_hmac_md5(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_hmac_md5")

    @ssh_hmac_md5.setter
    def ssh_hmac_md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hmac_md5", value)

    @property
    @pulumi.getter(name="sshHostkeyAlgo")
    def ssh_hostkey_algo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_hostkey_algo")

    @ssh_hostkey_algo.setter
    def ssh_hostkey_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hostkey_algo", value)

    @property
    @pulumi.getter(name="sshKexAlgo")
    def ssh_kex_algo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_kex_algo")

    @ssh_kex_algo.setter
    def ssh_kex_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_kex_algo", value)

    @property
    @pulumi.getter(name="sshKexSha1")
    def ssh_kex_sha1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_kex_sha1")

    @ssh_kex_sha1.setter
    def ssh_kex_sha1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_kex_sha1", value)

    @property
    @pulumi.getter(name="sshMacAlgo")
    def ssh_mac_algo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_mac_algo")

    @ssh_mac_algo.setter
    def ssh_mac_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_mac_algo", value)

    @property
    @pulumi.getter(name="sshMacWeak")
    def ssh_mac_weak(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_mac_weak")

    @ssh_mac_weak.setter
    def ssh_mac_weak(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_mac_weak", value)

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_proto_version")

    @ssl_min_proto_version.setter
    def ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_version", value)

    @property
    @pulumi.getter(name="sslStaticKeyCiphers")
    def ssl_static_key_ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_static_key_ciphers")

    @ssl_static_key_ciphers.setter
    def ssl_static_key_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_static_key_ciphers", value)

    @property
    @pulumi.getter(name="sslvpnCipherHardwareAcceleration")
    def sslvpn_cipher_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_cipher_hardware_acceleration")

    @sslvpn_cipher_hardware_acceleration.setter
    def sslvpn_cipher_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_cipher_hardware_acceleration", value)

    @property
    @pulumi.getter(name="sslvpnEmsSnCheck")
    def sslvpn_ems_sn_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_ems_sn_check")

    @sslvpn_ems_sn_check.setter
    def sslvpn_ems_sn_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_ems_sn_check", value)

    @property
    @pulumi.getter(name="sslvpnKxpHardwareAcceleration")
    def sslvpn_kxp_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_kxp_hardware_acceleration")

    @sslvpn_kxp_hardware_acceleration.setter
    def sslvpn_kxp_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_kxp_hardware_acceleration", value)

    @property
    @pulumi.getter(name="sslvpnMaxWorkerCount")
    def sslvpn_max_worker_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sslvpn_max_worker_count")

    @sslvpn_max_worker_count.setter
    def sslvpn_max_worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sslvpn_max_worker_count", value)

    @property
    @pulumi.getter(name="sslvpnPluginVersionCheck")
    def sslvpn_plugin_version_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_plugin_version_check")

    @sslvpn_plugin_version_check.setter
    def sslvpn_plugin_version_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_plugin_version_check", value)

    @property
    @pulumi.getter(name="strictDirtySessionCheck")
    def strict_dirty_session_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strict_dirty_session_check")

    @strict_dirty_session_check.setter
    def strict_dirty_session_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_dirty_session_check", value)

    @property
    @pulumi.getter(name="strongCrypto")
    def strong_crypto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strong_crypto")

    @strong_crypto.setter
    def strong_crypto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strong_crypto", value)

    @property
    @pulumi.getter(name="switchController")
    def switch_controller(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_controller")

    @switch_controller.setter
    def switch_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller", value)

    @property
    @pulumi.getter(name="switchControllerReservedNetwork")
    def switch_controller_reserved_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_controller_reserved_network")

    @switch_controller_reserved_network.setter
    def switch_controller_reserved_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_reserved_network", value)

    @property
    @pulumi.getter(name="sysPerfLogInterval")
    def sys_perf_log_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sys_perf_log_interval")

    @sys_perf_log_interval.setter
    def sys_perf_log_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sys_perf_log_interval", value)

    @property
    @pulumi.getter(name="syslogAffinity")
    def syslog_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "syslog_affinity")

    @syslog_affinity.setter
    def syslog_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "syslog_affinity", value)

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_halfclose_timer")

    @tcp_halfclose_timer.setter
    def tcp_halfclose_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfclose_timer", value)

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_halfopen_timer")

    @tcp_halfopen_timer.setter
    def tcp_halfopen_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfopen_timer", value)

    @property
    @pulumi.getter(name="tcpOption")
    def tcp_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_option")

    @tcp_option.setter
    def tcp_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_option", value)

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_rst_timer")

    @tcp_rst_timer.setter
    def tcp_rst_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_rst_timer", value)

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_timewait_timer")

    @tcp_timewait_timer.setter
    def tcp_timewait_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_timewait_timer", value)

    @property
    @pulumi.getter
    def tftp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tftp")

    @tftp.setter
    def tftp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tftp", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="tpMcSkipPolicy")
    def tp_mc_skip_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tp_mc_skip_policy")

    @tp_mc_skip_policy.setter
    def tp_mc_skip_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tp_mc_skip_policy", value)

    @property
    @pulumi.getter(name="trafficPriority")
    def traffic_priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_priority")

    @traffic_priority.setter
    def traffic_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_priority", value)

    @property
    @pulumi.getter(name="trafficPriorityLevel")
    def traffic_priority_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_priority_level")

    @traffic_priority_level.setter
    def traffic_priority_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_priority_level", value)

    @property
    @pulumi.getter(name="twoFactorEmailExpiry")
    def two_factor_email_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "two_factor_email_expiry")

    @two_factor_email_expiry.setter
    def two_factor_email_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_email_expiry", value)

    @property
    @pulumi.getter(name="twoFactorFacExpiry")
    def two_factor_fac_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "two_factor_fac_expiry")

    @two_factor_fac_expiry.setter
    def two_factor_fac_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_fac_expiry", value)

    @property
    @pulumi.getter(name="twoFactorFtkExpiry")
    def two_factor_ftk_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "two_factor_ftk_expiry")

    @two_factor_ftk_expiry.setter
    def two_factor_ftk_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_ftk_expiry", value)

    @property
    @pulumi.getter(name="twoFactorFtmExpiry")
    def two_factor_ftm_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "two_factor_ftm_expiry")

    @two_factor_ftm_expiry.setter
    def two_factor_ftm_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_ftm_expiry", value)

    @property
    @pulumi.getter(name="twoFactorSmsExpiry")
    def two_factor_sms_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "two_factor_sms_expiry")

    @two_factor_sms_expiry.setter
    def two_factor_sms_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_sms_expiry", value)

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "udp_idle_timer")

    @udp_idle_timer.setter
    def udp_idle_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "udp_idle_timer", value)

    @property
    @pulumi.getter(name="urlFilterAffinity")
    def url_filter_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_filter_affinity")

    @url_filter_affinity.setter
    def url_filter_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_filter_affinity", value)

    @property
    @pulumi.getter(name="urlFilterCount")
    def url_filter_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "url_filter_count")

    @url_filter_count.setter
    def url_filter_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "url_filter_count", value)

    @property
    @pulumi.getter(name="userDeviceStoreMaxDevices")
    def user_device_store_max_devices(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_device_store_max_devices")

    @user_device_store_max_devices.setter
    def user_device_store_max_devices(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_device_store_max_devices", value)

    @property
    @pulumi.getter(name="userDeviceStoreMaxUnifiedMem")
    def user_device_store_max_unified_mem(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_device_store_max_unified_mem")

    @user_device_store_max_unified_mem.setter
    def user_device_store_max_unified_mem(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_device_store_max_unified_mem", value)

    @property
    @pulumi.getter(name="userDeviceStoreMaxUsers")
    def user_device_store_max_users(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_device_store_max_users")

    @user_device_store_max_users.setter
    def user_device_store_max_users(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_device_store_max_users", value)

    @property
    @pulumi.getter(name="userServerCert")
    def user_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_server_cert")

    @user_server_cert.setter
    def user_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_server_cert", value)

    @property
    @pulumi.getter(name="vdomAdmin")
    def vdom_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdom_admin")

    @vdom_admin.setter
    def vdom_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom_admin", value)

    @property
    @pulumi.getter(name="vdomMode")
    def vdom_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdom_mode")

    @vdom_mode.setter
    def vdom_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vipArpRange")
    def vip_arp_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vip_arp_range")

    @vip_arp_range.setter
    def vip_arp_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip_arp_range", value)

    @property
    @pulumi.getter(name="virtualServerCount")
    def virtual_server_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "virtual_server_count")

    @virtual_server_count.setter
    def virtual_server_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_server_count", value)

    @property
    @pulumi.getter(name="virtualServerHardwareAcceleration")
    def virtual_server_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_server_hardware_acceleration")

    @virtual_server_hardware_acceleration.setter
    def virtual_server_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_server_hardware_acceleration", value)

    @property
    @pulumi.getter(name="virtualSwitchVlan")
    def virtual_switch_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_switch_vlan")

    @virtual_switch_vlan.setter
    def virtual_switch_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_switch_vlan", value)

    @property
    @pulumi.getter(name="vpnEmsSnCheck")
    def vpn_ems_sn_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_ems_sn_check")

    @vpn_ems_sn_check.setter
    def vpn_ems_sn_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_ems_sn_check", value)

    @property
    @pulumi.getter(name="wadAffinity")
    def wad_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wad_affinity")

    @wad_affinity.setter
    def wad_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wad_affinity", value)

    @property
    @pulumi.getter(name="wadCsvcCsCount")
    def wad_csvc_cs_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wad_csvc_cs_count")

    @wad_csvc_cs_count.setter
    def wad_csvc_cs_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wad_csvc_cs_count", value)

    @property
    @pulumi.getter(name="wadCsvcDbCount")
    def wad_csvc_db_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wad_csvc_db_count")

    @wad_csvc_db_count.setter
    def wad_csvc_db_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wad_csvc_db_count", value)

    @property
    @pulumi.getter(name="wadMemoryChangeGranularity")
    def wad_memory_change_granularity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wad_memory_change_granularity")

    @wad_memory_change_granularity.setter
    def wad_memory_change_granularity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wad_memory_change_granularity", value)

    @property
    @pulumi.getter(name="wadRestartEndTime")
    def wad_restart_end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wad_restart_end_time")

    @wad_restart_end_time.setter
    def wad_restart_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wad_restart_end_time", value)

    @property
    @pulumi.getter(name="wadRestartMode")
    def wad_restart_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wad_restart_mode")

    @wad_restart_mode.setter
    def wad_restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wad_restart_mode", value)

    @property
    @pulumi.getter(name="wadRestartStartTime")
    def wad_restart_start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wad_restart_start_time")

    @wad_restart_start_time.setter
    def wad_restart_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wad_restart_start_time", value)

    @property
    @pulumi.getter(name="wadSourceAffinity")
    def wad_source_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wad_source_affinity")

    @wad_source_affinity.setter
    def wad_source_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wad_source_affinity", value)

    @property
    @pulumi.getter(name="wadWorkerCount")
    def wad_worker_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wad_worker_count")

    @wad_worker_count.setter
    def wad_worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wad_worker_count", value)

    @property
    @pulumi.getter(name="wifiCaCertificate")
    def wifi_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_ca_certificate")

    @wifi_ca_certificate.setter
    def wifi_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ca_certificate", value)

    @property
    @pulumi.getter(name="wifiCertificate")
    def wifi_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_certificate")

    @wifi_certificate.setter
    def wifi_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_certificate", value)

    @property
    @pulumi.getter(name="wimax4gUsb")
    def wimax4g_usb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wimax4g_usb")

    @wimax4g_usb.setter
    def wimax4g_usb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wimax4g_usb", value)

    @property
    @pulumi.getter(name="wirelessController")
    def wireless_controller(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wireless_controller")

    @wireless_controller.setter
    def wireless_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wireless_controller", value)

    @property
    @pulumi.getter(name="wirelessControllerPort")
    def wireless_controller_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wireless_controller_port")

    @wireless_controller_port.setter
    def wireless_controller_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wireless_controller_port", value)


@pulumi.input_type
class _SystemGlobalState:
    def __init__(__self__, *,
                 admin_concurrent: Optional[pulumi.Input[str]] = None,
                 admin_console_timeout: Optional[pulumi.Input[int]] = None,
                 admin_forticloud_sso_default_profile: Optional[pulumi.Input[str]] = None,
                 admin_forticloud_sso_login: Optional[pulumi.Input[str]] = None,
                 admin_host: Optional[pulumi.Input[str]] = None,
                 admin_hsts_max_age: Optional[pulumi.Input[int]] = None,
                 admin_https_pki_required: Optional[pulumi.Input[str]] = None,
                 admin_https_redirect: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_banned_ciphers: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_ciphersuites: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_versions: Optional[pulumi.Input[str]] = None,
                 admin_lockout_duration: Optional[pulumi.Input[int]] = None,
                 admin_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 admin_login_max: Optional[pulumi.Input[int]] = None,
                 admin_maintainer: Optional[pulumi.Input[str]] = None,
                 admin_port: Optional[pulumi.Input[int]] = None,
                 admin_restrict_local: Optional[pulumi.Input[str]] = None,
                 admin_scp: Optional[pulumi.Input[str]] = None,
                 admin_server_cert: Optional[pulumi.Input[str]] = None,
                 admin_sport: Optional[pulumi.Input[int]] = None,
                 admin_ssh_grace_time: Optional[pulumi.Input[int]] = None,
                 admin_ssh_password: Optional[pulumi.Input[str]] = None,
                 admin_ssh_port: Optional[pulumi.Input[int]] = None,
                 admin_ssh_v1: Optional[pulumi.Input[str]] = None,
                 admin_telnet: Optional[pulumi.Input[str]] = None,
                 admin_telnet_port: Optional[pulumi.Input[int]] = None,
                 admintimeout: Optional[pulumi.Input[int]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 allow_traffic_redirect: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 arp_max_entry: Optional[pulumi.Input[int]] = None,
                 asymroute: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_port: Optional[pulumi.Input[int]] = None,
                 auth_https_port: Optional[pulumi.Input[int]] = None,
                 auth_ike_saml_port: Optional[pulumi.Input[int]] = None,
                 auth_keepalive: Optional[pulumi.Input[str]] = None,
                 auth_session_limit: Optional[pulumi.Input[str]] = None,
                 auto_auth_extension_device: Optional[pulumi.Input[str]] = None,
                 autorun_log_fsck: Optional[pulumi.Input[str]] = None,
                 av_affinity: Optional[pulumi.Input[str]] = None,
                 av_failopen: Optional[pulumi.Input[str]] = None,
                 av_failopen_session: Optional[pulumi.Input[str]] = None,
                 batch_cmdb: Optional[pulumi.Input[str]] = None,
                 block_session_timer: Optional[pulumi.Input[int]] = None,
                 br_fdb_max_entry: Optional[pulumi.Input[int]] = None,
                 cert_chain_max: Optional[pulumi.Input[int]] = None,
                 cfg_revert_timeout: Optional[pulumi.Input[int]] = None,
                 cfg_save: Optional[pulumi.Input[str]] = None,
                 check_protocol_header: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 cli_audit_log: Optional[pulumi.Input[str]] = None,
                 cloud_communication: Optional[pulumi.Input[str]] = None,
                 clt_cert_req: Optional[pulumi.Input[str]] = None,
                 cmdbsvr_affinity: Optional[pulumi.Input[str]] = None,
                 compliance_check: Optional[pulumi.Input[str]] = None,
                 compliance_check_time: Optional[pulumi.Input[str]] = None,
                 cpu_use_threshold: Optional[pulumi.Input[int]] = None,
                 csr_ca_attribute: Optional[pulumi.Input[str]] = None,
                 daily_restart: Optional[pulumi.Input[str]] = None,
                 default_service_source_port: Optional[pulumi.Input[str]] = None,
                 device_identification_active_scan_delay: Optional[pulumi.Input[int]] = None,
                 device_idle_timeout: Optional[pulumi.Input[int]] = None,
                 dh_params: Optional[pulumi.Input[str]] = None,
                 dnsproxy_worker_count: Optional[pulumi.Input[int]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 early_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 edit_vdom_prompt: Optional[pulumi.Input[str]] = None,
                 endpoint_control_fds_access: Optional[pulumi.Input[str]] = None,
                 endpoint_control_portal_port: Optional[pulumi.Input[int]] = None,
                 extender_controller_reserved_network: Optional[pulumi.Input[str]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 faz_disk_buffer_size: Optional[pulumi.Input[int]] = None,
                 fds_statistics: Optional[pulumi.Input[str]] = None,
                 fds_statistics_period: Optional[pulumi.Input[int]] = None,
                 fec_port: Optional[pulumi.Input[int]] = None,
                 fgd_alert_subscription: Optional[pulumi.Input[str]] = None,
                 forticonverter_config_upload: Optional[pulumi.Input[str]] = None,
                 forticonverter_integration: Optional[pulumi.Input[str]] = None,
                 fortiextender: Optional[pulumi.Input[str]] = None,
                 fortiextender_data_port: Optional[pulumi.Input[int]] = None,
                 fortiextender_discovery_lockdown: Optional[pulumi.Input[str]] = None,
                 fortiextender_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 fortiextender_vlan_mode: Optional[pulumi.Input[str]] = None,
                 fortiipam_integration: Optional[pulumi.Input[str]] = None,
                 fortiservice_port: Optional[pulumi.Input[int]] = None,
                 fortitoken_cloud: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gui_allow_default_hostname: Optional[pulumi.Input[str]] = None,
                 gui_allow_incompatible_fabric_fgt: Optional[pulumi.Input[str]] = None,
                 gui_app_detection_sdwan: Optional[pulumi.Input[str]] = None,
                 gui_cdn_domain_override: Optional[pulumi.Input[str]] = None,
                 gui_cdn_usage: Optional[pulumi.Input[str]] = None,
                 gui_certificates: Optional[pulumi.Input[str]] = None,
                 gui_custom_language: Optional[pulumi.Input[str]] = None,
                 gui_date_format: Optional[pulumi.Input[str]] = None,
                 gui_date_time_source: Optional[pulumi.Input[str]] = None,
                 gui_device_latitude: Optional[pulumi.Input[str]] = None,
                 gui_device_longitude: Optional[pulumi.Input[str]] = None,
                 gui_display_hostname: Optional[pulumi.Input[str]] = None,
                 gui_firmware_upgrade_setup_warning: Optional[pulumi.Input[str]] = None,
                 gui_firmware_upgrade_warning: Optional[pulumi.Input[str]] = None,
                 gui_forticare_registration_setup_warning: Optional[pulumi.Input[str]] = None,
                 gui_fortigate_cloud_sandbox: Optional[pulumi.Input[str]] = None,
                 gui_fortiguard_resource_fetch: Optional[pulumi.Input[str]] = None,
                 gui_fortisandbox_cloud: Optional[pulumi.Input[str]] = None,
                 gui_ipv6: Optional[pulumi.Input[str]] = None,
                 gui_lines_per_page: Optional[pulumi.Input[int]] = None,
                 gui_local_out: Optional[pulumi.Input[str]] = None,
                 gui_replacement_message_groups: Optional[pulumi.Input[str]] = None,
                 gui_rest_api_cache: Optional[pulumi.Input[str]] = None,
                 gui_theme: Optional[pulumi.Input[str]] = None,
                 gui_wireless_opensecurity: Optional[pulumi.Input[str]] = None,
                 gui_workflow_management: Optional[pulumi.Input[str]] = None,
                 ha_affinity: Optional[pulumi.Input[str]] = None,
                 honor_df: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 igmp_state_limit: Optional[pulumi.Input[int]] = None,
                 ike_embryonic_limit: Optional[pulumi.Input[int]] = None,
                 interface_subnet_usage: Optional[pulumi.Input[str]] = None,
                 internet_service_database: Optional[pulumi.Input[str]] = None,
                 internet_service_download_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemGlobalInternetServiceDownloadListArgs']]]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 ip_fragment_mem_thresholds: Optional[pulumi.Input[int]] = None,
                 ip_src_port_range: Optional[pulumi.Input[str]] = None,
                 ips_affinity: Optional[pulumi.Input[str]] = None,
                 ipsec_asic_offload: Optional[pulumi.Input[str]] = None,
                 ipsec_ha_seqjump_rate: Optional[pulumi.Input[int]] = None,
                 ipsec_hmac_offload: Optional[pulumi.Input[str]] = None,
                 ipsec_round_robin: Optional[pulumi.Input[str]] = None,
                 ipsec_soft_dec_async: Optional[pulumi.Input[str]] = None,
                 ipv6_accept_dad: Optional[pulumi.Input[int]] = None,
                 ipv6_allow_anycast_probe: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_local_in_slient_drop: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_multicast_probe: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_traffic_redirect: Optional[pulumi.Input[str]] = None,
                 irq_time_accounting: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 ldapconntimeout: Optional[pulumi.Input[int]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 log_single_cpu_high: Optional[pulumi.Input[str]] = None,
                 log_ssl_connection: Optional[pulumi.Input[str]] = None,
                 log_uuid_address: Optional[pulumi.Input[str]] = None,
                 log_uuid_policy: Optional[pulumi.Input[str]] = None,
                 login_timestamp: Optional[pulumi.Input[str]] = None,
                 long_vdom_name: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 management_port_use_admin_sport: Optional[pulumi.Input[str]] = None,
                 management_vdom: Optional[pulumi.Input[str]] = None,
                 max_dlpstat_memory: Optional[pulumi.Input[int]] = None,
                 max_route_cache_size: Optional[pulumi.Input[int]] = None,
                 mc_ttl_notchange: Optional[pulumi.Input[str]] = None,
                 memory_use_threshold_extreme: Optional[pulumi.Input[int]] = None,
                 memory_use_threshold_green: Optional[pulumi.Input[int]] = None,
                 memory_use_threshold_red: Optional[pulumi.Input[int]] = None,
                 miglog_affinity: Optional[pulumi.Input[str]] = None,
                 miglogd_children: Optional[pulumi.Input[int]] = None,
                 multi_factor_authentication: Optional[pulumi.Input[str]] = None,
                 multicast_forward: Optional[pulumi.Input[str]] = None,
                 ndp_max_entry: Optional[pulumi.Input[int]] = None,
                 per_user_bal: Optional[pulumi.Input[str]] = None,
                 per_user_bwl: Optional[pulumi.Input[str]] = None,
                 pmtu_discovery: Optional[pulumi.Input[str]] = None,
                 policy_auth_concurrent: Optional[pulumi.Input[int]] = None,
                 post_login_banner: Optional[pulumi.Input[str]] = None,
                 pre_login_banner: Optional[pulumi.Input[str]] = None,
                 private_data_encryption: Optional[pulumi.Input[str]] = None,
                 proxy_auth_lifetime: Optional[pulumi.Input[str]] = None,
                 proxy_auth_lifetime_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_auth_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_cert_use_mgmt_vdom: Optional[pulumi.Input[str]] = None,
                 proxy_cipher_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_keep_alive_mode: Optional[pulumi.Input[str]] = None,
                 proxy_kxp_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_re_authentication_mode: Optional[pulumi.Input[str]] = None,
                 proxy_re_authentication_time: Optional[pulumi.Input[int]] = None,
                 proxy_resource_mode: Optional[pulumi.Input[str]] = None,
                 proxy_worker_count: Optional[pulumi.Input[int]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 reboot_upon_config_restore: Optional[pulumi.Input[str]] = None,
                 refresh: Optional[pulumi.Input[int]] = None,
                 remoteauthtimeout: Optional[pulumi.Input[int]] = None,
                 reset_sessionless_tcp: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_logout: Optional[pulumi.Input[str]] = None,
                 revision_image_auto_backup: Optional[pulumi.Input[str]] = None,
                 scanunit_count: Optional[pulumi.Input[int]] = None,
                 security_rating_result_submission: Optional[pulumi.Input[str]] = None,
                 security_rating_run_on_schedule: Optional[pulumi.Input[str]] = None,
                 send_pmtu_icmp: Optional[pulumi.Input[str]] = None,
                 sflowd_max_children_num: Optional[pulumi.Input[int]] = None,
                 snat_route_change: Optional[pulumi.Input[str]] = None,
                 special_file23_support: Optional[pulumi.Input[str]] = None,
                 speedtest_server: Optional[pulumi.Input[str]] = None,
                 split_port: Optional[pulumi.Input[str]] = None,
                 ssd_trim_date: Optional[pulumi.Input[int]] = None,
                 ssd_trim_freq: Optional[pulumi.Input[str]] = None,
                 ssd_trim_hour: Optional[pulumi.Input[int]] = None,
                 ssd_trim_min: Optional[pulumi.Input[int]] = None,
                 ssd_trim_weekday: Optional[pulumi.Input[str]] = None,
                 ssh_cbc_cipher: Optional[pulumi.Input[str]] = None,
                 ssh_enc_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hmac_md5: Optional[pulumi.Input[str]] = None,
                 ssh_hostkey_algo: Optional[pulumi.Input[str]] = None,
                 ssh_kex_algo: Optional[pulumi.Input[str]] = None,
                 ssh_kex_sha1: Optional[pulumi.Input[str]] = None,
                 ssh_mac_algo: Optional[pulumi.Input[str]] = None,
                 ssh_mac_weak: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 ssl_static_key_ciphers: Optional[pulumi.Input[str]] = None,
                 sslvpn_cipher_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 sslvpn_ems_sn_check: Optional[pulumi.Input[str]] = None,
                 sslvpn_kxp_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 sslvpn_max_worker_count: Optional[pulumi.Input[int]] = None,
                 sslvpn_plugin_version_check: Optional[pulumi.Input[str]] = None,
                 strict_dirty_session_check: Optional[pulumi.Input[str]] = None,
                 strong_crypto: Optional[pulumi.Input[str]] = None,
                 switch_controller: Optional[pulumi.Input[str]] = None,
                 switch_controller_reserved_network: Optional[pulumi.Input[str]] = None,
                 sys_perf_log_interval: Optional[pulumi.Input[int]] = None,
                 syslog_affinity: Optional[pulumi.Input[str]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_option: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 tftp: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 tp_mc_skip_policy: Optional[pulumi.Input[str]] = None,
                 traffic_priority: Optional[pulumi.Input[str]] = None,
                 traffic_priority_level: Optional[pulumi.Input[str]] = None,
                 two_factor_email_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_fac_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_ftk_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_ftm_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_sms_expiry: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 url_filter_affinity: Optional[pulumi.Input[str]] = None,
                 url_filter_count: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_devices: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_unified_mem: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_users: Optional[pulumi.Input[int]] = None,
                 user_server_cert: Optional[pulumi.Input[str]] = None,
                 vdom_admin: Optional[pulumi.Input[str]] = None,
                 vdom_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vip_arp_range: Optional[pulumi.Input[str]] = None,
                 virtual_server_count: Optional[pulumi.Input[int]] = None,
                 virtual_server_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 vpn_ems_sn_check: Optional[pulumi.Input[str]] = None,
                 wad_affinity: Optional[pulumi.Input[str]] = None,
                 wad_csvc_cs_count: Optional[pulumi.Input[int]] = None,
                 wad_csvc_db_count: Optional[pulumi.Input[int]] = None,
                 wad_memory_change_granularity: Optional[pulumi.Input[int]] = None,
                 wad_restart_end_time: Optional[pulumi.Input[str]] = None,
                 wad_restart_mode: Optional[pulumi.Input[str]] = None,
                 wad_restart_start_time: Optional[pulumi.Input[str]] = None,
                 wad_source_affinity: Optional[pulumi.Input[str]] = None,
                 wad_worker_count: Optional[pulumi.Input[int]] = None,
                 wifi_ca_certificate: Optional[pulumi.Input[str]] = None,
                 wifi_certificate: Optional[pulumi.Input[str]] = None,
                 wimax4g_usb: Optional[pulumi.Input[str]] = None,
                 wireless_controller: Optional[pulumi.Input[str]] = None,
                 wireless_controller_port: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering SystemGlobal resources.
        """
        if admin_concurrent is not None:
            pulumi.set(__self__, "admin_concurrent", admin_concurrent)
        if admin_console_timeout is not None:
            pulumi.set(__self__, "admin_console_timeout", admin_console_timeout)
        if admin_forticloud_sso_default_profile is not None:
            pulumi.set(__self__, "admin_forticloud_sso_default_profile", admin_forticloud_sso_default_profile)
        if admin_forticloud_sso_login is not None:
            pulumi.set(__self__, "admin_forticloud_sso_login", admin_forticloud_sso_login)
        if admin_host is not None:
            pulumi.set(__self__, "admin_host", admin_host)
        if admin_hsts_max_age is not None:
            pulumi.set(__self__, "admin_hsts_max_age", admin_hsts_max_age)
        if admin_https_pki_required is not None:
            pulumi.set(__self__, "admin_https_pki_required", admin_https_pki_required)
        if admin_https_redirect is not None:
            pulumi.set(__self__, "admin_https_redirect", admin_https_redirect)
        if admin_https_ssl_banned_ciphers is not None:
            pulumi.set(__self__, "admin_https_ssl_banned_ciphers", admin_https_ssl_banned_ciphers)
        if admin_https_ssl_ciphersuites is not None:
            pulumi.set(__self__, "admin_https_ssl_ciphersuites", admin_https_ssl_ciphersuites)
        if admin_https_ssl_versions is not None:
            pulumi.set(__self__, "admin_https_ssl_versions", admin_https_ssl_versions)
        if admin_lockout_duration is not None:
            pulumi.set(__self__, "admin_lockout_duration", admin_lockout_duration)
        if admin_lockout_threshold is not None:
            pulumi.set(__self__, "admin_lockout_threshold", admin_lockout_threshold)
        if admin_login_max is not None:
            pulumi.set(__self__, "admin_login_max", admin_login_max)
        if admin_maintainer is not None:
            pulumi.set(__self__, "admin_maintainer", admin_maintainer)
        if admin_port is not None:
            pulumi.set(__self__, "admin_port", admin_port)
        if admin_restrict_local is not None:
            pulumi.set(__self__, "admin_restrict_local", admin_restrict_local)
        if admin_scp is not None:
            pulumi.set(__self__, "admin_scp", admin_scp)
        if admin_server_cert is not None:
            pulumi.set(__self__, "admin_server_cert", admin_server_cert)
        if admin_sport is not None:
            pulumi.set(__self__, "admin_sport", admin_sport)
        if admin_ssh_grace_time is not None:
            pulumi.set(__self__, "admin_ssh_grace_time", admin_ssh_grace_time)
        if admin_ssh_password is not None:
            pulumi.set(__self__, "admin_ssh_password", admin_ssh_password)
        if admin_ssh_port is not None:
            pulumi.set(__self__, "admin_ssh_port", admin_ssh_port)
        if admin_ssh_v1 is not None:
            pulumi.set(__self__, "admin_ssh_v1", admin_ssh_v1)
        if admin_telnet is not None:
            pulumi.set(__self__, "admin_telnet", admin_telnet)
        if admin_telnet_port is not None:
            pulumi.set(__self__, "admin_telnet_port", admin_telnet_port)
        if admintimeout is not None:
            pulumi.set(__self__, "admintimeout", admintimeout)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if allow_traffic_redirect is not None:
            pulumi.set(__self__, "allow_traffic_redirect", allow_traffic_redirect)
        if anti_replay is not None:
            pulumi.set(__self__, "anti_replay", anti_replay)
        if arp_max_entry is not None:
            pulumi.set(__self__, "arp_max_entry", arp_max_entry)
        if asymroute is not None:
            pulumi.set(__self__, "asymroute", asymroute)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_http_port is not None:
            pulumi.set(__self__, "auth_http_port", auth_http_port)
        if auth_https_port is not None:
            pulumi.set(__self__, "auth_https_port", auth_https_port)
        if auth_ike_saml_port is not None:
            pulumi.set(__self__, "auth_ike_saml_port", auth_ike_saml_port)
        if auth_keepalive is not None:
            pulumi.set(__self__, "auth_keepalive", auth_keepalive)
        if auth_session_limit is not None:
            pulumi.set(__self__, "auth_session_limit", auth_session_limit)
        if auto_auth_extension_device is not None:
            pulumi.set(__self__, "auto_auth_extension_device", auto_auth_extension_device)
        if autorun_log_fsck is not None:
            pulumi.set(__self__, "autorun_log_fsck", autorun_log_fsck)
        if av_affinity is not None:
            pulumi.set(__self__, "av_affinity", av_affinity)
        if av_failopen is not None:
            pulumi.set(__self__, "av_failopen", av_failopen)
        if av_failopen_session is not None:
            pulumi.set(__self__, "av_failopen_session", av_failopen_session)
        if batch_cmdb is not None:
            pulumi.set(__self__, "batch_cmdb", batch_cmdb)
        if block_session_timer is not None:
            pulumi.set(__self__, "block_session_timer", block_session_timer)
        if br_fdb_max_entry is not None:
            pulumi.set(__self__, "br_fdb_max_entry", br_fdb_max_entry)
        if cert_chain_max is not None:
            pulumi.set(__self__, "cert_chain_max", cert_chain_max)
        if cfg_revert_timeout is not None:
            pulumi.set(__self__, "cfg_revert_timeout", cfg_revert_timeout)
        if cfg_save is not None:
            pulumi.set(__self__, "cfg_save", cfg_save)
        if check_protocol_header is not None:
            pulumi.set(__self__, "check_protocol_header", check_protocol_header)
        if check_reset_range is not None:
            pulumi.set(__self__, "check_reset_range", check_reset_range)
        if cli_audit_log is not None:
            pulumi.set(__self__, "cli_audit_log", cli_audit_log)
        if cloud_communication is not None:
            pulumi.set(__self__, "cloud_communication", cloud_communication)
        if clt_cert_req is not None:
            pulumi.set(__self__, "clt_cert_req", clt_cert_req)
        if cmdbsvr_affinity is not None:
            pulumi.set(__self__, "cmdbsvr_affinity", cmdbsvr_affinity)
        if compliance_check is not None:
            pulumi.set(__self__, "compliance_check", compliance_check)
        if compliance_check_time is not None:
            pulumi.set(__self__, "compliance_check_time", compliance_check_time)
        if cpu_use_threshold is not None:
            pulumi.set(__self__, "cpu_use_threshold", cpu_use_threshold)
        if csr_ca_attribute is not None:
            pulumi.set(__self__, "csr_ca_attribute", csr_ca_attribute)
        if daily_restart is not None:
            pulumi.set(__self__, "daily_restart", daily_restart)
        if default_service_source_port is not None:
            pulumi.set(__self__, "default_service_source_port", default_service_source_port)
        if device_identification_active_scan_delay is not None:
            pulumi.set(__self__, "device_identification_active_scan_delay", device_identification_active_scan_delay)
        if device_idle_timeout is not None:
            pulumi.set(__self__, "device_idle_timeout", device_idle_timeout)
        if dh_params is not None:
            pulumi.set(__self__, "dh_params", dh_params)
        if dnsproxy_worker_count is not None:
            pulumi.set(__self__, "dnsproxy_worker_count", dnsproxy_worker_count)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if early_tcp_npu_session is not None:
            pulumi.set(__self__, "early_tcp_npu_session", early_tcp_npu_session)
        if edit_vdom_prompt is not None:
            pulumi.set(__self__, "edit_vdom_prompt", edit_vdom_prompt)
        if endpoint_control_fds_access is not None:
            pulumi.set(__self__, "endpoint_control_fds_access", endpoint_control_fds_access)
        if endpoint_control_portal_port is not None:
            pulumi.set(__self__, "endpoint_control_portal_port", endpoint_control_portal_port)
        if extender_controller_reserved_network is not None:
            pulumi.set(__self__, "extender_controller_reserved_network", extender_controller_reserved_network)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if faz_disk_buffer_size is not None:
            pulumi.set(__self__, "faz_disk_buffer_size", faz_disk_buffer_size)
        if fds_statistics is not None:
            pulumi.set(__self__, "fds_statistics", fds_statistics)
        if fds_statistics_period is not None:
            pulumi.set(__self__, "fds_statistics_period", fds_statistics_period)
        if fec_port is not None:
            pulumi.set(__self__, "fec_port", fec_port)
        if fgd_alert_subscription is not None:
            pulumi.set(__self__, "fgd_alert_subscription", fgd_alert_subscription)
        if forticonverter_config_upload is not None:
            pulumi.set(__self__, "forticonverter_config_upload", forticonverter_config_upload)
        if forticonverter_integration is not None:
            pulumi.set(__self__, "forticonverter_integration", forticonverter_integration)
        if fortiextender is not None:
            pulumi.set(__self__, "fortiextender", fortiextender)
        if fortiextender_data_port is not None:
            pulumi.set(__self__, "fortiextender_data_port", fortiextender_data_port)
        if fortiextender_discovery_lockdown is not None:
            pulumi.set(__self__, "fortiextender_discovery_lockdown", fortiextender_discovery_lockdown)
        if fortiextender_provision_on_authorization is not None:
            pulumi.set(__self__, "fortiextender_provision_on_authorization", fortiextender_provision_on_authorization)
        if fortiextender_vlan_mode is not None:
            pulumi.set(__self__, "fortiextender_vlan_mode", fortiextender_vlan_mode)
        if fortiipam_integration is not None:
            pulumi.set(__self__, "fortiipam_integration", fortiipam_integration)
        if fortiservice_port is not None:
            pulumi.set(__self__, "fortiservice_port", fortiservice_port)
        if fortitoken_cloud is not None:
            pulumi.set(__self__, "fortitoken_cloud", fortitoken_cloud)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gui_allow_default_hostname is not None:
            pulumi.set(__self__, "gui_allow_default_hostname", gui_allow_default_hostname)
        if gui_allow_incompatible_fabric_fgt is not None:
            pulumi.set(__self__, "gui_allow_incompatible_fabric_fgt", gui_allow_incompatible_fabric_fgt)
        if gui_app_detection_sdwan is not None:
            pulumi.set(__self__, "gui_app_detection_sdwan", gui_app_detection_sdwan)
        if gui_cdn_domain_override is not None:
            pulumi.set(__self__, "gui_cdn_domain_override", gui_cdn_domain_override)
        if gui_cdn_usage is not None:
            pulumi.set(__self__, "gui_cdn_usage", gui_cdn_usage)
        if gui_certificates is not None:
            pulumi.set(__self__, "gui_certificates", gui_certificates)
        if gui_custom_language is not None:
            pulumi.set(__self__, "gui_custom_language", gui_custom_language)
        if gui_date_format is not None:
            pulumi.set(__self__, "gui_date_format", gui_date_format)
        if gui_date_time_source is not None:
            pulumi.set(__self__, "gui_date_time_source", gui_date_time_source)
        if gui_device_latitude is not None:
            pulumi.set(__self__, "gui_device_latitude", gui_device_latitude)
        if gui_device_longitude is not None:
            pulumi.set(__self__, "gui_device_longitude", gui_device_longitude)
        if gui_display_hostname is not None:
            pulumi.set(__self__, "gui_display_hostname", gui_display_hostname)
        if gui_firmware_upgrade_setup_warning is not None:
            pulumi.set(__self__, "gui_firmware_upgrade_setup_warning", gui_firmware_upgrade_setup_warning)
        if gui_firmware_upgrade_warning is not None:
            pulumi.set(__self__, "gui_firmware_upgrade_warning", gui_firmware_upgrade_warning)
        if gui_forticare_registration_setup_warning is not None:
            pulumi.set(__self__, "gui_forticare_registration_setup_warning", gui_forticare_registration_setup_warning)
        if gui_fortigate_cloud_sandbox is not None:
            pulumi.set(__self__, "gui_fortigate_cloud_sandbox", gui_fortigate_cloud_sandbox)
        if gui_fortiguard_resource_fetch is not None:
            pulumi.set(__self__, "gui_fortiguard_resource_fetch", gui_fortiguard_resource_fetch)
        if gui_fortisandbox_cloud is not None:
            pulumi.set(__self__, "gui_fortisandbox_cloud", gui_fortisandbox_cloud)
        if gui_ipv6 is not None:
            pulumi.set(__self__, "gui_ipv6", gui_ipv6)
        if gui_lines_per_page is not None:
            pulumi.set(__self__, "gui_lines_per_page", gui_lines_per_page)
        if gui_local_out is not None:
            pulumi.set(__self__, "gui_local_out", gui_local_out)
        if gui_replacement_message_groups is not None:
            pulumi.set(__self__, "gui_replacement_message_groups", gui_replacement_message_groups)
        if gui_rest_api_cache is not None:
            pulumi.set(__self__, "gui_rest_api_cache", gui_rest_api_cache)
        if gui_theme is not None:
            pulumi.set(__self__, "gui_theme", gui_theme)
        if gui_wireless_opensecurity is not None:
            pulumi.set(__self__, "gui_wireless_opensecurity", gui_wireless_opensecurity)
        if gui_workflow_management is not None:
            pulumi.set(__self__, "gui_workflow_management", gui_workflow_management)
        if ha_affinity is not None:
            pulumi.set(__self__, "ha_affinity", ha_affinity)
        if honor_df is not None:
            pulumi.set(__self__, "honor_df", honor_df)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if igmp_state_limit is not None:
            pulumi.set(__self__, "igmp_state_limit", igmp_state_limit)
        if ike_embryonic_limit is not None:
            pulumi.set(__self__, "ike_embryonic_limit", ike_embryonic_limit)
        if interface_subnet_usage is not None:
            pulumi.set(__self__, "interface_subnet_usage", interface_subnet_usage)
        if internet_service_database is not None:
            pulumi.set(__self__, "internet_service_database", internet_service_database)
        if internet_service_download_lists is not None:
            pulumi.set(__self__, "internet_service_download_lists", internet_service_download_lists)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if ip_fragment_mem_thresholds is not None:
            pulumi.set(__self__, "ip_fragment_mem_thresholds", ip_fragment_mem_thresholds)
        if ip_src_port_range is not None:
            pulumi.set(__self__, "ip_src_port_range", ip_src_port_range)
        if ips_affinity is not None:
            pulumi.set(__self__, "ips_affinity", ips_affinity)
        if ipsec_asic_offload is not None:
            pulumi.set(__self__, "ipsec_asic_offload", ipsec_asic_offload)
        if ipsec_ha_seqjump_rate is not None:
            pulumi.set(__self__, "ipsec_ha_seqjump_rate", ipsec_ha_seqjump_rate)
        if ipsec_hmac_offload is not None:
            pulumi.set(__self__, "ipsec_hmac_offload", ipsec_hmac_offload)
        if ipsec_round_robin is not None:
            pulumi.set(__self__, "ipsec_round_robin", ipsec_round_robin)
        if ipsec_soft_dec_async is not None:
            pulumi.set(__self__, "ipsec_soft_dec_async", ipsec_soft_dec_async)
        if ipv6_accept_dad is not None:
            pulumi.set(__self__, "ipv6_accept_dad", ipv6_accept_dad)
        if ipv6_allow_anycast_probe is not None:
            pulumi.set(__self__, "ipv6_allow_anycast_probe", ipv6_allow_anycast_probe)
        if ipv6_allow_local_in_slient_drop is not None:
            pulumi.set(__self__, "ipv6_allow_local_in_slient_drop", ipv6_allow_local_in_slient_drop)
        if ipv6_allow_multicast_probe is not None:
            pulumi.set(__self__, "ipv6_allow_multicast_probe", ipv6_allow_multicast_probe)
        if ipv6_allow_traffic_redirect is not None:
            pulumi.set(__self__, "ipv6_allow_traffic_redirect", ipv6_allow_traffic_redirect)
        if irq_time_accounting is not None:
            pulumi.set(__self__, "irq_time_accounting", irq_time_accounting)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if ldapconntimeout is not None:
            pulumi.set(__self__, "ldapconntimeout", ldapconntimeout)
        if lldp_reception is not None:
            pulumi.set(__self__, "lldp_reception", lldp_reception)
        if lldp_transmission is not None:
            pulumi.set(__self__, "lldp_transmission", lldp_transmission)
        if log_single_cpu_high is not None:
            pulumi.set(__self__, "log_single_cpu_high", log_single_cpu_high)
        if log_ssl_connection is not None:
            pulumi.set(__self__, "log_ssl_connection", log_ssl_connection)
        if log_uuid_address is not None:
            pulumi.set(__self__, "log_uuid_address", log_uuid_address)
        if log_uuid_policy is not None:
            pulumi.set(__self__, "log_uuid_policy", log_uuid_policy)
        if login_timestamp is not None:
            pulumi.set(__self__, "login_timestamp", login_timestamp)
        if long_vdom_name is not None:
            pulumi.set(__self__, "long_vdom_name", long_vdom_name)
        if management_ip is not None:
            pulumi.set(__self__, "management_ip", management_ip)
        if management_port is not None:
            pulumi.set(__self__, "management_port", management_port)
        if management_port_use_admin_sport is not None:
            pulumi.set(__self__, "management_port_use_admin_sport", management_port_use_admin_sport)
        if management_vdom is not None:
            pulumi.set(__self__, "management_vdom", management_vdom)
        if max_dlpstat_memory is not None:
            pulumi.set(__self__, "max_dlpstat_memory", max_dlpstat_memory)
        if max_route_cache_size is not None:
            pulumi.set(__self__, "max_route_cache_size", max_route_cache_size)
        if mc_ttl_notchange is not None:
            pulumi.set(__self__, "mc_ttl_notchange", mc_ttl_notchange)
        if memory_use_threshold_extreme is not None:
            pulumi.set(__self__, "memory_use_threshold_extreme", memory_use_threshold_extreme)
        if memory_use_threshold_green is not None:
            pulumi.set(__self__, "memory_use_threshold_green", memory_use_threshold_green)
        if memory_use_threshold_red is not None:
            pulumi.set(__self__, "memory_use_threshold_red", memory_use_threshold_red)
        if miglog_affinity is not None:
            pulumi.set(__self__, "miglog_affinity", miglog_affinity)
        if miglogd_children is not None:
            pulumi.set(__self__, "miglogd_children", miglogd_children)
        if multi_factor_authentication is not None:
            pulumi.set(__self__, "multi_factor_authentication", multi_factor_authentication)
        if multicast_forward is not None:
            pulumi.set(__self__, "multicast_forward", multicast_forward)
        if ndp_max_entry is not None:
            pulumi.set(__self__, "ndp_max_entry", ndp_max_entry)
        if per_user_bal is not None:
            pulumi.set(__self__, "per_user_bal", per_user_bal)
        if per_user_bwl is not None:
            pulumi.set(__self__, "per_user_bwl", per_user_bwl)
        if pmtu_discovery is not None:
            pulumi.set(__self__, "pmtu_discovery", pmtu_discovery)
        if policy_auth_concurrent is not None:
            pulumi.set(__self__, "policy_auth_concurrent", policy_auth_concurrent)
        if post_login_banner is not None:
            pulumi.set(__self__, "post_login_banner", post_login_banner)
        if pre_login_banner is not None:
            pulumi.set(__self__, "pre_login_banner", pre_login_banner)
        if private_data_encryption is not None:
            pulumi.set(__self__, "private_data_encryption", private_data_encryption)
        if proxy_auth_lifetime is not None:
            pulumi.set(__self__, "proxy_auth_lifetime", proxy_auth_lifetime)
        if proxy_auth_lifetime_timeout is not None:
            pulumi.set(__self__, "proxy_auth_lifetime_timeout", proxy_auth_lifetime_timeout)
        if proxy_auth_timeout is not None:
            pulumi.set(__self__, "proxy_auth_timeout", proxy_auth_timeout)
        if proxy_cert_use_mgmt_vdom is not None:
            pulumi.set(__self__, "proxy_cert_use_mgmt_vdom", proxy_cert_use_mgmt_vdom)
        if proxy_cipher_hardware_acceleration is not None:
            pulumi.set(__self__, "proxy_cipher_hardware_acceleration", proxy_cipher_hardware_acceleration)
        if proxy_hardware_acceleration is not None:
            pulumi.set(__self__, "proxy_hardware_acceleration", proxy_hardware_acceleration)
        if proxy_keep_alive_mode is not None:
            pulumi.set(__self__, "proxy_keep_alive_mode", proxy_keep_alive_mode)
        if proxy_kxp_hardware_acceleration is not None:
            pulumi.set(__self__, "proxy_kxp_hardware_acceleration", proxy_kxp_hardware_acceleration)
        if proxy_re_authentication_mode is not None:
            pulumi.set(__self__, "proxy_re_authentication_mode", proxy_re_authentication_mode)
        if proxy_re_authentication_time is not None:
            pulumi.set(__self__, "proxy_re_authentication_time", proxy_re_authentication_time)
        if proxy_resource_mode is not None:
            pulumi.set(__self__, "proxy_resource_mode", proxy_resource_mode)
        if proxy_worker_count is not None:
            pulumi.set(__self__, "proxy_worker_count", proxy_worker_count)
        if radius_port is not None:
            pulumi.set(__self__, "radius_port", radius_port)
        if reboot_upon_config_restore is not None:
            pulumi.set(__self__, "reboot_upon_config_restore", reboot_upon_config_restore)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if remoteauthtimeout is not None:
            pulumi.set(__self__, "remoteauthtimeout", remoteauthtimeout)
        if reset_sessionless_tcp is not None:
            pulumi.set(__self__, "reset_sessionless_tcp", reset_sessionless_tcp)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if revision_backup_on_logout is not None:
            pulumi.set(__self__, "revision_backup_on_logout", revision_backup_on_logout)
        if revision_image_auto_backup is not None:
            pulumi.set(__self__, "revision_image_auto_backup", revision_image_auto_backup)
        if scanunit_count is not None:
            pulumi.set(__self__, "scanunit_count", scanunit_count)
        if security_rating_result_submission is not None:
            pulumi.set(__self__, "security_rating_result_submission", security_rating_result_submission)
        if security_rating_run_on_schedule is not None:
            pulumi.set(__self__, "security_rating_run_on_schedule", security_rating_run_on_schedule)
        if send_pmtu_icmp is not None:
            pulumi.set(__self__, "send_pmtu_icmp", send_pmtu_icmp)
        if sflowd_max_children_num is not None:
            pulumi.set(__self__, "sflowd_max_children_num", sflowd_max_children_num)
        if snat_route_change is not None:
            pulumi.set(__self__, "snat_route_change", snat_route_change)
        if special_file23_support is not None:
            pulumi.set(__self__, "special_file23_support", special_file23_support)
        if speedtest_server is not None:
            pulumi.set(__self__, "speedtest_server", speedtest_server)
        if split_port is not None:
            pulumi.set(__self__, "split_port", split_port)
        if ssd_trim_date is not None:
            pulumi.set(__self__, "ssd_trim_date", ssd_trim_date)
        if ssd_trim_freq is not None:
            pulumi.set(__self__, "ssd_trim_freq", ssd_trim_freq)
        if ssd_trim_hour is not None:
            pulumi.set(__self__, "ssd_trim_hour", ssd_trim_hour)
        if ssd_trim_min is not None:
            pulumi.set(__self__, "ssd_trim_min", ssd_trim_min)
        if ssd_trim_weekday is not None:
            pulumi.set(__self__, "ssd_trim_weekday", ssd_trim_weekday)
        if ssh_cbc_cipher is not None:
            pulumi.set(__self__, "ssh_cbc_cipher", ssh_cbc_cipher)
        if ssh_enc_algo is not None:
            pulumi.set(__self__, "ssh_enc_algo", ssh_enc_algo)
        if ssh_hmac_md5 is not None:
            pulumi.set(__self__, "ssh_hmac_md5", ssh_hmac_md5)
        if ssh_hostkey_algo is not None:
            pulumi.set(__self__, "ssh_hostkey_algo", ssh_hostkey_algo)
        if ssh_kex_algo is not None:
            pulumi.set(__self__, "ssh_kex_algo", ssh_kex_algo)
        if ssh_kex_sha1 is not None:
            pulumi.set(__self__, "ssh_kex_sha1", ssh_kex_sha1)
        if ssh_mac_algo is not None:
            pulumi.set(__self__, "ssh_mac_algo", ssh_mac_algo)
        if ssh_mac_weak is not None:
            pulumi.set(__self__, "ssh_mac_weak", ssh_mac_weak)
        if ssl_min_proto_version is not None:
            pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if ssl_static_key_ciphers is not None:
            pulumi.set(__self__, "ssl_static_key_ciphers", ssl_static_key_ciphers)
        if sslvpn_cipher_hardware_acceleration is not None:
            pulumi.set(__self__, "sslvpn_cipher_hardware_acceleration", sslvpn_cipher_hardware_acceleration)
        if sslvpn_ems_sn_check is not None:
            pulumi.set(__self__, "sslvpn_ems_sn_check", sslvpn_ems_sn_check)
        if sslvpn_kxp_hardware_acceleration is not None:
            pulumi.set(__self__, "sslvpn_kxp_hardware_acceleration", sslvpn_kxp_hardware_acceleration)
        if sslvpn_max_worker_count is not None:
            pulumi.set(__self__, "sslvpn_max_worker_count", sslvpn_max_worker_count)
        if sslvpn_plugin_version_check is not None:
            pulumi.set(__self__, "sslvpn_plugin_version_check", sslvpn_plugin_version_check)
        if strict_dirty_session_check is not None:
            pulumi.set(__self__, "strict_dirty_session_check", strict_dirty_session_check)
        if strong_crypto is not None:
            pulumi.set(__self__, "strong_crypto", strong_crypto)
        if switch_controller is not None:
            pulumi.set(__self__, "switch_controller", switch_controller)
        if switch_controller_reserved_network is not None:
            pulumi.set(__self__, "switch_controller_reserved_network", switch_controller_reserved_network)
        if sys_perf_log_interval is not None:
            pulumi.set(__self__, "sys_perf_log_interval", sys_perf_log_interval)
        if syslog_affinity is not None:
            pulumi.set(__self__, "syslog_affinity", syslog_affinity)
        if tcp_halfclose_timer is not None:
            pulumi.set(__self__, "tcp_halfclose_timer", tcp_halfclose_timer)
        if tcp_halfopen_timer is not None:
            pulumi.set(__self__, "tcp_halfopen_timer", tcp_halfopen_timer)
        if tcp_option is not None:
            pulumi.set(__self__, "tcp_option", tcp_option)
        if tcp_rst_timer is not None:
            pulumi.set(__self__, "tcp_rst_timer", tcp_rst_timer)
        if tcp_timewait_timer is not None:
            pulumi.set(__self__, "tcp_timewait_timer", tcp_timewait_timer)
        if tftp is not None:
            pulumi.set(__self__, "tftp", tftp)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if tp_mc_skip_policy is not None:
            pulumi.set(__self__, "tp_mc_skip_policy", tp_mc_skip_policy)
        if traffic_priority is not None:
            pulumi.set(__self__, "traffic_priority", traffic_priority)
        if traffic_priority_level is not None:
            pulumi.set(__self__, "traffic_priority_level", traffic_priority_level)
        if two_factor_email_expiry is not None:
            pulumi.set(__self__, "two_factor_email_expiry", two_factor_email_expiry)
        if two_factor_fac_expiry is not None:
            pulumi.set(__self__, "two_factor_fac_expiry", two_factor_fac_expiry)
        if two_factor_ftk_expiry is not None:
            pulumi.set(__self__, "two_factor_ftk_expiry", two_factor_ftk_expiry)
        if two_factor_ftm_expiry is not None:
            pulumi.set(__self__, "two_factor_ftm_expiry", two_factor_ftm_expiry)
        if two_factor_sms_expiry is not None:
            pulumi.set(__self__, "two_factor_sms_expiry", two_factor_sms_expiry)
        if udp_idle_timer is not None:
            pulumi.set(__self__, "udp_idle_timer", udp_idle_timer)
        if url_filter_affinity is not None:
            pulumi.set(__self__, "url_filter_affinity", url_filter_affinity)
        if url_filter_count is not None:
            pulumi.set(__self__, "url_filter_count", url_filter_count)
        if user_device_store_max_devices is not None:
            pulumi.set(__self__, "user_device_store_max_devices", user_device_store_max_devices)
        if user_device_store_max_unified_mem is not None:
            pulumi.set(__self__, "user_device_store_max_unified_mem", user_device_store_max_unified_mem)
        if user_device_store_max_users is not None:
            pulumi.set(__self__, "user_device_store_max_users", user_device_store_max_users)
        if user_server_cert is not None:
            pulumi.set(__self__, "user_server_cert", user_server_cert)
        if vdom_admin is not None:
            pulumi.set(__self__, "vdom_admin", vdom_admin)
        if vdom_mode is not None:
            pulumi.set(__self__, "vdom_mode", vdom_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vip_arp_range is not None:
            pulumi.set(__self__, "vip_arp_range", vip_arp_range)
        if virtual_server_count is not None:
            pulumi.set(__self__, "virtual_server_count", virtual_server_count)
        if virtual_server_hardware_acceleration is not None:
            pulumi.set(__self__, "virtual_server_hardware_acceleration", virtual_server_hardware_acceleration)
        if virtual_switch_vlan is not None:
            pulumi.set(__self__, "virtual_switch_vlan", virtual_switch_vlan)
        if vpn_ems_sn_check is not None:
            pulumi.set(__self__, "vpn_ems_sn_check", vpn_ems_sn_check)
        if wad_affinity is not None:
            pulumi.set(__self__, "wad_affinity", wad_affinity)
        if wad_csvc_cs_count is not None:
            pulumi.set(__self__, "wad_csvc_cs_count", wad_csvc_cs_count)
        if wad_csvc_db_count is not None:
            pulumi.set(__self__, "wad_csvc_db_count", wad_csvc_db_count)
        if wad_memory_change_granularity is not None:
            pulumi.set(__self__, "wad_memory_change_granularity", wad_memory_change_granularity)
        if wad_restart_end_time is not None:
            pulumi.set(__self__, "wad_restart_end_time", wad_restart_end_time)
        if wad_restart_mode is not None:
            pulumi.set(__self__, "wad_restart_mode", wad_restart_mode)
        if wad_restart_start_time is not None:
            pulumi.set(__self__, "wad_restart_start_time", wad_restart_start_time)
        if wad_source_affinity is not None:
            pulumi.set(__self__, "wad_source_affinity", wad_source_affinity)
        if wad_worker_count is not None:
            pulumi.set(__self__, "wad_worker_count", wad_worker_count)
        if wifi_ca_certificate is not None:
            pulumi.set(__self__, "wifi_ca_certificate", wifi_ca_certificate)
        if wifi_certificate is not None:
            pulumi.set(__self__, "wifi_certificate", wifi_certificate)
        if wimax4g_usb is not None:
            pulumi.set(__self__, "wimax4g_usb", wimax4g_usb)
        if wireless_controller is not None:
            pulumi.set(__self__, "wireless_controller", wireless_controller)
        if wireless_controller_port is not None:
            pulumi.set(__self__, "wireless_controller_port", wireless_controller_port)

    @property
    @pulumi.getter(name="adminConcurrent")
    def admin_concurrent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_concurrent")

    @admin_concurrent.setter
    def admin_concurrent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_concurrent", value)

    @property
    @pulumi.getter(name="adminConsoleTimeout")
    def admin_console_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_console_timeout")

    @admin_console_timeout.setter
    def admin_console_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_console_timeout", value)

    @property
    @pulumi.getter(name="adminForticloudSsoDefaultProfile")
    def admin_forticloud_sso_default_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_forticloud_sso_default_profile")

    @admin_forticloud_sso_default_profile.setter
    def admin_forticloud_sso_default_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_forticloud_sso_default_profile", value)

    @property
    @pulumi.getter(name="adminForticloudSsoLogin")
    def admin_forticloud_sso_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_forticloud_sso_login")

    @admin_forticloud_sso_login.setter
    def admin_forticloud_sso_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_forticloud_sso_login", value)

    @property
    @pulumi.getter(name="adminHost")
    def admin_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_host")

    @admin_host.setter
    def admin_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_host", value)

    @property
    @pulumi.getter(name="adminHstsMaxAge")
    def admin_hsts_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_hsts_max_age")

    @admin_hsts_max_age.setter
    def admin_hsts_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_hsts_max_age", value)

    @property
    @pulumi.getter(name="adminHttpsPkiRequired")
    def admin_https_pki_required(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_https_pki_required")

    @admin_https_pki_required.setter
    def admin_https_pki_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_https_pki_required", value)

    @property
    @pulumi.getter(name="adminHttpsRedirect")
    def admin_https_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_https_redirect")

    @admin_https_redirect.setter
    def admin_https_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_https_redirect", value)

    @property
    @pulumi.getter(name="adminHttpsSslBannedCiphers")
    def admin_https_ssl_banned_ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_https_ssl_banned_ciphers")

    @admin_https_ssl_banned_ciphers.setter
    def admin_https_ssl_banned_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_https_ssl_banned_ciphers", value)

    @property
    @pulumi.getter(name="adminHttpsSslCiphersuites")
    def admin_https_ssl_ciphersuites(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_https_ssl_ciphersuites")

    @admin_https_ssl_ciphersuites.setter
    def admin_https_ssl_ciphersuites(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_https_ssl_ciphersuites", value)

    @property
    @pulumi.getter(name="adminHttpsSslVersions")
    def admin_https_ssl_versions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_https_ssl_versions")

    @admin_https_ssl_versions.setter
    def admin_https_ssl_versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_https_ssl_versions", value)

    @property
    @pulumi.getter(name="adminLockoutDuration")
    def admin_lockout_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_lockout_duration")

    @admin_lockout_duration.setter
    def admin_lockout_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_lockout_duration", value)

    @property
    @pulumi.getter(name="adminLockoutThreshold")
    def admin_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_lockout_threshold")

    @admin_lockout_threshold.setter
    def admin_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_lockout_threshold", value)

    @property
    @pulumi.getter(name="adminLoginMax")
    def admin_login_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_login_max")

    @admin_login_max.setter
    def admin_login_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_login_max", value)

    @property
    @pulumi.getter(name="adminMaintainer")
    def admin_maintainer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_maintainer")

    @admin_maintainer.setter
    def admin_maintainer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_maintainer", value)

    @property
    @pulumi.getter(name="adminPort")
    def admin_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_port")

    @admin_port.setter
    def admin_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_port", value)

    @property
    @pulumi.getter(name="adminRestrictLocal")
    def admin_restrict_local(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_restrict_local")

    @admin_restrict_local.setter
    def admin_restrict_local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_restrict_local", value)

    @property
    @pulumi.getter(name="adminScp")
    def admin_scp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_scp")

    @admin_scp.setter
    def admin_scp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_scp", value)

    @property
    @pulumi.getter(name="adminServerCert")
    def admin_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_server_cert")

    @admin_server_cert.setter
    def admin_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_server_cert", value)

    @property
    @pulumi.getter(name="adminSport")
    def admin_sport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_sport")

    @admin_sport.setter
    def admin_sport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_sport", value)

    @property
    @pulumi.getter(name="adminSshGraceTime")
    def admin_ssh_grace_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_ssh_grace_time")

    @admin_ssh_grace_time.setter
    def admin_ssh_grace_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_ssh_grace_time", value)

    @property
    @pulumi.getter(name="adminSshPassword")
    def admin_ssh_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_ssh_password")

    @admin_ssh_password.setter
    def admin_ssh_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_ssh_password", value)

    @property
    @pulumi.getter(name="adminSshPort")
    def admin_ssh_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_ssh_port")

    @admin_ssh_port.setter
    def admin_ssh_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_ssh_port", value)

    @property
    @pulumi.getter(name="adminSshV1")
    def admin_ssh_v1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_ssh_v1")

    @admin_ssh_v1.setter
    def admin_ssh_v1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_ssh_v1", value)

    @property
    @pulumi.getter(name="adminTelnet")
    def admin_telnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_telnet")

    @admin_telnet.setter
    def admin_telnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_telnet", value)

    @property
    @pulumi.getter(name="adminTelnetPort")
    def admin_telnet_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_telnet_port")

    @admin_telnet_port.setter
    def admin_telnet_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_telnet_port", value)

    @property
    @pulumi.getter
    def admintimeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admintimeout")

    @admintimeout.setter
    def admintimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admintimeout", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="allowTrafficRedirect")
    def allow_traffic_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_traffic_redirect")

    @allow_traffic_redirect.setter
    def allow_traffic_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_traffic_redirect", value)

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anti_replay")

    @anti_replay.setter
    def anti_replay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anti_replay", value)

    @property
    @pulumi.getter(name="arpMaxEntry")
    def arp_max_entry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "arp_max_entry")

    @arp_max_entry.setter
    def arp_max_entry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "arp_max_entry", value)

    @property
    @pulumi.getter
    def asymroute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asymroute")

    @asymroute.setter
    def asymroute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asymroute", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authHttpPort")
    def auth_http_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_http_port")

    @auth_http_port.setter
    def auth_http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_http_port", value)

    @property
    @pulumi.getter(name="authHttpsPort")
    def auth_https_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_https_port")

    @auth_https_port.setter
    def auth_https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_https_port", value)

    @property
    @pulumi.getter(name="authIkeSamlPort")
    def auth_ike_saml_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_ike_saml_port")

    @auth_ike_saml_port.setter
    def auth_ike_saml_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_ike_saml_port", value)

    @property
    @pulumi.getter(name="authKeepalive")
    def auth_keepalive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_keepalive")

    @auth_keepalive.setter
    def auth_keepalive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keepalive", value)

    @property
    @pulumi.getter(name="authSessionLimit")
    def auth_session_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_session_limit")

    @auth_session_limit.setter
    def auth_session_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_session_limit", value)

    @property
    @pulumi.getter(name="autoAuthExtensionDevice")
    def auto_auth_extension_device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_auth_extension_device")

    @auto_auth_extension_device.setter
    def auto_auth_extension_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_auth_extension_device", value)

    @property
    @pulumi.getter(name="autorunLogFsck")
    def autorun_log_fsck(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autorun_log_fsck")

    @autorun_log_fsck.setter
    def autorun_log_fsck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autorun_log_fsck", value)

    @property
    @pulumi.getter(name="avAffinity")
    def av_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_affinity")

    @av_affinity.setter
    def av_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_affinity", value)

    @property
    @pulumi.getter(name="avFailopen")
    def av_failopen(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_failopen")

    @av_failopen.setter
    def av_failopen(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_failopen", value)

    @property
    @pulumi.getter(name="avFailopenSession")
    def av_failopen_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_failopen_session")

    @av_failopen_session.setter
    def av_failopen_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_failopen_session", value)

    @property
    @pulumi.getter(name="batchCmdb")
    def batch_cmdb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "batch_cmdb")

    @batch_cmdb.setter
    def batch_cmdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "batch_cmdb", value)

    @property
    @pulumi.getter(name="blockSessionTimer")
    def block_session_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_session_timer")

    @block_session_timer.setter
    def block_session_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_session_timer", value)

    @property
    @pulumi.getter(name="brFdbMaxEntry")
    def br_fdb_max_entry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "br_fdb_max_entry")

    @br_fdb_max_entry.setter
    def br_fdb_max_entry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "br_fdb_max_entry", value)

    @property
    @pulumi.getter(name="certChainMax")
    def cert_chain_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cert_chain_max")

    @cert_chain_max.setter
    def cert_chain_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_chain_max", value)

    @property
    @pulumi.getter(name="cfgRevertTimeout")
    def cfg_revert_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cfg_revert_timeout")

    @cfg_revert_timeout.setter
    def cfg_revert_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cfg_revert_timeout", value)

    @property
    @pulumi.getter(name="cfgSave")
    def cfg_save(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cfg_save")

    @cfg_save.setter
    def cfg_save(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cfg_save", value)

    @property
    @pulumi.getter(name="checkProtocolHeader")
    def check_protocol_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_protocol_header")

    @check_protocol_header.setter
    def check_protocol_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_protocol_header", value)

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_reset_range")

    @check_reset_range.setter
    def check_reset_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_reset_range", value)

    @property
    @pulumi.getter(name="cliAuditLog")
    def cli_audit_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cli_audit_log")

    @cli_audit_log.setter
    def cli_audit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_audit_log", value)

    @property
    @pulumi.getter(name="cloudCommunication")
    def cloud_communication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_communication")

    @cloud_communication.setter
    def cloud_communication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_communication", value)

    @property
    @pulumi.getter(name="cltCertReq")
    def clt_cert_req(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clt_cert_req")

    @clt_cert_req.setter
    def clt_cert_req(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clt_cert_req", value)

    @property
    @pulumi.getter(name="cmdbsvrAffinity")
    def cmdbsvr_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmdbsvr_affinity")

    @cmdbsvr_affinity.setter
    def cmdbsvr_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmdbsvr_affinity", value)

    @property
    @pulumi.getter(name="complianceCheck")
    def compliance_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compliance_check")

    @compliance_check.setter
    def compliance_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_check", value)

    @property
    @pulumi.getter(name="complianceCheckTime")
    def compliance_check_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compliance_check_time")

    @compliance_check_time.setter
    def compliance_check_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_check_time", value)

    @property
    @pulumi.getter(name="cpuUseThreshold")
    def cpu_use_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu_use_threshold")

    @cpu_use_threshold.setter
    def cpu_use_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_use_threshold", value)

    @property
    @pulumi.getter(name="csrCaAttribute")
    def csr_ca_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csr_ca_attribute")

    @csr_ca_attribute.setter
    def csr_ca_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_ca_attribute", value)

    @property
    @pulumi.getter(name="dailyRestart")
    def daily_restart(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "daily_restart")

    @daily_restart.setter
    def daily_restart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daily_restart", value)

    @property
    @pulumi.getter(name="defaultServiceSourcePort")
    def default_service_source_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_service_source_port")

    @default_service_source_port.setter
    def default_service_source_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_service_source_port", value)

    @property
    @pulumi.getter(name="deviceIdentificationActiveScanDelay")
    def device_identification_active_scan_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_identification_active_scan_delay")

    @device_identification_active_scan_delay.setter
    def device_identification_active_scan_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_identification_active_scan_delay", value)

    @property
    @pulumi.getter(name="deviceIdleTimeout")
    def device_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_idle_timeout")

    @device_idle_timeout.setter
    def device_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_idle_timeout", value)

    @property
    @pulumi.getter(name="dhParams")
    def dh_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dh_params")

    @dh_params.setter
    def dh_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dh_params", value)

    @property
    @pulumi.getter(name="dnsproxyWorkerCount")
    def dnsproxy_worker_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dnsproxy_worker_count")

    @dnsproxy_worker_count.setter
    def dnsproxy_worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dnsproxy_worker_count", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="earlyTcpNpuSession")
    def early_tcp_npu_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "early_tcp_npu_session")

    @early_tcp_npu_session.setter
    def early_tcp_npu_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "early_tcp_npu_session", value)

    @property
    @pulumi.getter(name="editVdomPrompt")
    def edit_vdom_prompt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "edit_vdom_prompt")

    @edit_vdom_prompt.setter
    def edit_vdom_prompt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edit_vdom_prompt", value)

    @property
    @pulumi.getter(name="endpointControlFdsAccess")
    def endpoint_control_fds_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_control_fds_access")

    @endpoint_control_fds_access.setter
    def endpoint_control_fds_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_control_fds_access", value)

    @property
    @pulumi.getter(name="endpointControlPortalPort")
    def endpoint_control_portal_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "endpoint_control_portal_port")

    @endpoint_control_portal_port.setter
    def endpoint_control_portal_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "endpoint_control_portal_port", value)

    @property
    @pulumi.getter(name="extenderControllerReservedNetwork")
    def extender_controller_reserved_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extender_controller_reserved_network")

    @extender_controller_reserved_network.setter
    def extender_controller_reserved_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extender_controller_reserved_network", value)

    @property
    @pulumi.getter
    def failtime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failtime")

    @failtime.setter
    def failtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failtime", value)

    @property
    @pulumi.getter(name="fazDiskBufferSize")
    def faz_disk_buffer_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "faz_disk_buffer_size")

    @faz_disk_buffer_size.setter
    def faz_disk_buffer_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "faz_disk_buffer_size", value)

    @property
    @pulumi.getter(name="fdsStatistics")
    def fds_statistics(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fds_statistics")

    @fds_statistics.setter
    def fds_statistics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fds_statistics", value)

    @property
    @pulumi.getter(name="fdsStatisticsPeriod")
    def fds_statistics_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fds_statistics_period")

    @fds_statistics_period.setter
    def fds_statistics_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fds_statistics_period", value)

    @property
    @pulumi.getter(name="fecPort")
    def fec_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_port")

    @fec_port.setter
    def fec_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_port", value)

    @property
    @pulumi.getter(name="fgdAlertSubscription")
    def fgd_alert_subscription(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fgd_alert_subscription")

    @fgd_alert_subscription.setter
    def fgd_alert_subscription(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgd_alert_subscription", value)

    @property
    @pulumi.getter(name="forticonverterConfigUpload")
    def forticonverter_config_upload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticonverter_config_upload")

    @forticonverter_config_upload.setter
    def forticonverter_config_upload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticonverter_config_upload", value)

    @property
    @pulumi.getter(name="forticonverterIntegration")
    def forticonverter_integration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticonverter_integration")

    @forticonverter_integration.setter
    def forticonverter_integration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticonverter_integration", value)

    @property
    @pulumi.getter
    def fortiextender(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiextender")

    @fortiextender.setter
    def fortiextender(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiextender", value)

    @property
    @pulumi.getter(name="fortiextenderDataPort")
    def fortiextender_data_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortiextender_data_port")

    @fortiextender_data_port.setter
    def fortiextender_data_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortiextender_data_port", value)

    @property
    @pulumi.getter(name="fortiextenderDiscoveryLockdown")
    def fortiextender_discovery_lockdown(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiextender_discovery_lockdown")

    @fortiextender_discovery_lockdown.setter
    def fortiextender_discovery_lockdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiextender_discovery_lockdown", value)

    @property
    @pulumi.getter(name="fortiextenderProvisionOnAuthorization")
    def fortiextender_provision_on_authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiextender_provision_on_authorization")

    @fortiextender_provision_on_authorization.setter
    def fortiextender_provision_on_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiextender_provision_on_authorization", value)

    @property
    @pulumi.getter(name="fortiextenderVlanMode")
    def fortiextender_vlan_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiextender_vlan_mode")

    @fortiextender_vlan_mode.setter
    def fortiextender_vlan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiextender_vlan_mode", value)

    @property
    @pulumi.getter(name="fortiipamIntegration")
    def fortiipam_integration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiipam_integration")

    @fortiipam_integration.setter
    def fortiipam_integration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiipam_integration", value)

    @property
    @pulumi.getter(name="fortiservicePort")
    def fortiservice_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortiservice_port")

    @fortiservice_port.setter
    def fortiservice_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortiservice_port", value)

    @property
    @pulumi.getter(name="fortitokenCloud")
    def fortitoken_cloud(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortitoken_cloud")

    @fortitoken_cloud.setter
    def fortitoken_cloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortitoken_cloud", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="guiAllowDefaultHostname")
    def gui_allow_default_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_allow_default_hostname")

    @gui_allow_default_hostname.setter
    def gui_allow_default_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_allow_default_hostname", value)

    @property
    @pulumi.getter(name="guiAllowIncompatibleFabricFgt")
    def gui_allow_incompatible_fabric_fgt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_allow_incompatible_fabric_fgt")

    @gui_allow_incompatible_fabric_fgt.setter
    def gui_allow_incompatible_fabric_fgt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_allow_incompatible_fabric_fgt", value)

    @property
    @pulumi.getter(name="guiAppDetectionSdwan")
    def gui_app_detection_sdwan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_app_detection_sdwan")

    @gui_app_detection_sdwan.setter
    def gui_app_detection_sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_app_detection_sdwan", value)

    @property
    @pulumi.getter(name="guiCdnDomainOverride")
    def gui_cdn_domain_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_cdn_domain_override")

    @gui_cdn_domain_override.setter
    def gui_cdn_domain_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_cdn_domain_override", value)

    @property
    @pulumi.getter(name="guiCdnUsage")
    def gui_cdn_usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_cdn_usage")

    @gui_cdn_usage.setter
    def gui_cdn_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_cdn_usage", value)

    @property
    @pulumi.getter(name="guiCertificates")
    def gui_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_certificates")

    @gui_certificates.setter
    def gui_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_certificates", value)

    @property
    @pulumi.getter(name="guiCustomLanguage")
    def gui_custom_language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_custom_language")

    @gui_custom_language.setter
    def gui_custom_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_custom_language", value)

    @property
    @pulumi.getter(name="guiDateFormat")
    def gui_date_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_date_format")

    @gui_date_format.setter
    def gui_date_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_date_format", value)

    @property
    @pulumi.getter(name="guiDateTimeSource")
    def gui_date_time_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_date_time_source")

    @gui_date_time_source.setter
    def gui_date_time_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_date_time_source", value)

    @property
    @pulumi.getter(name="guiDeviceLatitude")
    def gui_device_latitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_device_latitude")

    @gui_device_latitude.setter
    def gui_device_latitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_device_latitude", value)

    @property
    @pulumi.getter(name="guiDeviceLongitude")
    def gui_device_longitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_device_longitude")

    @gui_device_longitude.setter
    def gui_device_longitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_device_longitude", value)

    @property
    @pulumi.getter(name="guiDisplayHostname")
    def gui_display_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_display_hostname")

    @gui_display_hostname.setter
    def gui_display_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_display_hostname", value)

    @property
    @pulumi.getter(name="guiFirmwareUpgradeSetupWarning")
    def gui_firmware_upgrade_setup_warning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_firmware_upgrade_setup_warning")

    @gui_firmware_upgrade_setup_warning.setter
    def gui_firmware_upgrade_setup_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_firmware_upgrade_setup_warning", value)

    @property
    @pulumi.getter(name="guiFirmwareUpgradeWarning")
    def gui_firmware_upgrade_warning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_firmware_upgrade_warning")

    @gui_firmware_upgrade_warning.setter
    def gui_firmware_upgrade_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_firmware_upgrade_warning", value)

    @property
    @pulumi.getter(name="guiForticareRegistrationSetupWarning")
    def gui_forticare_registration_setup_warning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_forticare_registration_setup_warning")

    @gui_forticare_registration_setup_warning.setter
    def gui_forticare_registration_setup_warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_forticare_registration_setup_warning", value)

    @property
    @pulumi.getter(name="guiFortigateCloudSandbox")
    def gui_fortigate_cloud_sandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_fortigate_cloud_sandbox")

    @gui_fortigate_cloud_sandbox.setter
    def gui_fortigate_cloud_sandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_fortigate_cloud_sandbox", value)

    @property
    @pulumi.getter(name="guiFortiguardResourceFetch")
    def gui_fortiguard_resource_fetch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_fortiguard_resource_fetch")

    @gui_fortiguard_resource_fetch.setter
    def gui_fortiguard_resource_fetch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_fortiguard_resource_fetch", value)

    @property
    @pulumi.getter(name="guiFortisandboxCloud")
    def gui_fortisandbox_cloud(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_fortisandbox_cloud")

    @gui_fortisandbox_cloud.setter
    def gui_fortisandbox_cloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_fortisandbox_cloud", value)

    @property
    @pulumi.getter(name="guiIpv6")
    def gui_ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_ipv6")

    @gui_ipv6.setter
    def gui_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_ipv6", value)

    @property
    @pulumi.getter(name="guiLinesPerPage")
    def gui_lines_per_page(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gui_lines_per_page")

    @gui_lines_per_page.setter
    def gui_lines_per_page(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gui_lines_per_page", value)

    @property
    @pulumi.getter(name="guiLocalOut")
    def gui_local_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_local_out")

    @gui_local_out.setter
    def gui_local_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_local_out", value)

    @property
    @pulumi.getter(name="guiReplacementMessageGroups")
    def gui_replacement_message_groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_replacement_message_groups")

    @gui_replacement_message_groups.setter
    def gui_replacement_message_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_replacement_message_groups", value)

    @property
    @pulumi.getter(name="guiRestApiCache")
    def gui_rest_api_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_rest_api_cache")

    @gui_rest_api_cache.setter
    def gui_rest_api_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_rest_api_cache", value)

    @property
    @pulumi.getter(name="guiTheme")
    def gui_theme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_theme")

    @gui_theme.setter
    def gui_theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_theme", value)

    @property
    @pulumi.getter(name="guiWirelessOpensecurity")
    def gui_wireless_opensecurity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_wireless_opensecurity")

    @gui_wireless_opensecurity.setter
    def gui_wireless_opensecurity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_wireless_opensecurity", value)

    @property
    @pulumi.getter(name="guiWorkflowManagement")
    def gui_workflow_management(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gui_workflow_management")

    @gui_workflow_management.setter
    def gui_workflow_management(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_workflow_management", value)

    @property
    @pulumi.getter(name="haAffinity")
    def ha_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha_affinity")

    @ha_affinity.setter
    def ha_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_affinity", value)

    @property
    @pulumi.getter(name="honorDf")
    def honor_df(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "honor_df")

    @honor_df.setter
    def honor_df(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "honor_df", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="igmpStateLimit")
    def igmp_state_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "igmp_state_limit")

    @igmp_state_limit.setter
    def igmp_state_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "igmp_state_limit", value)

    @property
    @pulumi.getter(name="ikeEmbryonicLimit")
    def ike_embryonic_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ike_embryonic_limit")

    @ike_embryonic_limit.setter
    def ike_embryonic_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_embryonic_limit", value)

    @property
    @pulumi.getter(name="interfaceSubnetUsage")
    def interface_subnet_usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_subnet_usage")

    @interface_subnet_usage.setter
    def interface_subnet_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_subnet_usage", value)

    @property
    @pulumi.getter(name="internetServiceDatabase")
    def internet_service_database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_database")

    @internet_service_database.setter
    def internet_service_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_database", value)

    @property
    @pulumi.getter(name="internetServiceDownloadLists")
    def internet_service_download_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemGlobalInternetServiceDownloadListArgs']]]]:
        return pulumi.get(self, "internet_service_download_lists")

    @internet_service_download_lists.setter
    def internet_service_download_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemGlobalInternetServiceDownloadListArgs']]]]):
        pulumi.set(self, "internet_service_download_lists", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="ipFragmentMemThresholds")
    def ip_fragment_mem_thresholds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip_fragment_mem_thresholds")

    @ip_fragment_mem_thresholds.setter
    def ip_fragment_mem_thresholds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_fragment_mem_thresholds", value)

    @property
    @pulumi.getter(name="ipSrcPortRange")
    def ip_src_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_src_port_range")

    @ip_src_port_range.setter
    def ip_src_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_src_port_range", value)

    @property
    @pulumi.getter(name="ipsAffinity")
    def ips_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_affinity")

    @ips_affinity.setter
    def ips_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_affinity", value)

    @property
    @pulumi.getter(name="ipsecAsicOffload")
    def ipsec_asic_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_asic_offload")

    @ipsec_asic_offload.setter
    def ipsec_asic_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_asic_offload", value)

    @property
    @pulumi.getter(name="ipsecHaSeqjumpRate")
    def ipsec_ha_seqjump_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipsec_ha_seqjump_rate")

    @ipsec_ha_seqjump_rate.setter
    def ipsec_ha_seqjump_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_ha_seqjump_rate", value)

    @property
    @pulumi.getter(name="ipsecHmacOffload")
    def ipsec_hmac_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_hmac_offload")

    @ipsec_hmac_offload.setter
    def ipsec_hmac_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_hmac_offload", value)

    @property
    @pulumi.getter(name="ipsecRoundRobin")
    def ipsec_round_robin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_round_robin")

    @ipsec_round_robin.setter
    def ipsec_round_robin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_round_robin", value)

    @property
    @pulumi.getter(name="ipsecSoftDecAsync")
    def ipsec_soft_dec_async(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_soft_dec_async")

    @ipsec_soft_dec_async.setter
    def ipsec_soft_dec_async(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_soft_dec_async", value)

    @property
    @pulumi.getter(name="ipv6AcceptDad")
    def ipv6_accept_dad(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipv6_accept_dad")

    @ipv6_accept_dad.setter
    def ipv6_accept_dad(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_accept_dad", value)

    @property
    @pulumi.getter(name="ipv6AllowAnycastProbe")
    def ipv6_allow_anycast_probe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_allow_anycast_probe")

    @ipv6_allow_anycast_probe.setter
    def ipv6_allow_anycast_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_allow_anycast_probe", value)

    @property
    @pulumi.getter(name="ipv6AllowLocalInSlientDrop")
    def ipv6_allow_local_in_slient_drop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_allow_local_in_slient_drop")

    @ipv6_allow_local_in_slient_drop.setter
    def ipv6_allow_local_in_slient_drop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_allow_local_in_slient_drop", value)

    @property
    @pulumi.getter(name="ipv6AllowMulticastProbe")
    def ipv6_allow_multicast_probe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_allow_multicast_probe")

    @ipv6_allow_multicast_probe.setter
    def ipv6_allow_multicast_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_allow_multicast_probe", value)

    @property
    @pulumi.getter(name="ipv6AllowTrafficRedirect")
    def ipv6_allow_traffic_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_allow_traffic_redirect")

    @ipv6_allow_traffic_redirect.setter
    def ipv6_allow_traffic_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_allow_traffic_redirect", value)

    @property
    @pulumi.getter(name="irqTimeAccounting")
    def irq_time_accounting(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "irq_time_accounting")

    @irq_time_accounting.setter
    def irq_time_accounting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "irq_time_accounting", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def ldapconntimeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ldapconntimeout")

    @ldapconntimeout.setter
    def ldapconntimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ldapconntimeout", value)

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp_reception")

    @lldp_reception.setter
    def lldp_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_reception", value)

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp_transmission")

    @lldp_transmission.setter
    def lldp_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_transmission", value)

    @property
    @pulumi.getter(name="logSingleCpuHigh")
    def log_single_cpu_high(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_single_cpu_high")

    @log_single_cpu_high.setter
    def log_single_cpu_high(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_single_cpu_high", value)

    @property
    @pulumi.getter(name="logSslConnection")
    def log_ssl_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_ssl_connection")

    @log_ssl_connection.setter
    def log_ssl_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_ssl_connection", value)

    @property
    @pulumi.getter(name="logUuidAddress")
    def log_uuid_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_uuid_address")

    @log_uuid_address.setter
    def log_uuid_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_uuid_address", value)

    @property
    @pulumi.getter(name="logUuidPolicy")
    def log_uuid_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_uuid_policy")

    @log_uuid_policy.setter
    def log_uuid_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_uuid_policy", value)

    @property
    @pulumi.getter(name="loginTimestamp")
    def login_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_timestamp")

    @login_timestamp.setter
    def login_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_timestamp", value)

    @property
    @pulumi.getter(name="longVdomName")
    def long_vdom_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "long_vdom_name")

    @long_vdom_name.setter
    def long_vdom_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_vdom_name", value)

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_ip")

    @management_ip.setter
    def management_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_ip", value)

    @property
    @pulumi.getter(name="managementPort")
    def management_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "management_port")

    @management_port.setter
    def management_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "management_port", value)

    @property
    @pulumi.getter(name="managementPortUseAdminSport")
    def management_port_use_admin_sport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_port_use_admin_sport")

    @management_port_use_admin_sport.setter
    def management_port_use_admin_sport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_port_use_admin_sport", value)

    @property
    @pulumi.getter(name="managementVdom")
    def management_vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_vdom")

    @management_vdom.setter
    def management_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_vdom", value)

    @property
    @pulumi.getter(name="maxDlpstatMemory")
    def max_dlpstat_memory(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_dlpstat_memory")

    @max_dlpstat_memory.setter
    def max_dlpstat_memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_dlpstat_memory", value)

    @property
    @pulumi.getter(name="maxRouteCacheSize")
    def max_route_cache_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_route_cache_size")

    @max_route_cache_size.setter
    def max_route_cache_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_route_cache_size", value)

    @property
    @pulumi.getter(name="mcTtlNotchange")
    def mc_ttl_notchange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mc_ttl_notchange")

    @mc_ttl_notchange.setter
    def mc_ttl_notchange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mc_ttl_notchange", value)

    @property
    @pulumi.getter(name="memoryUseThresholdExtreme")
    def memory_use_threshold_extreme(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_use_threshold_extreme")

    @memory_use_threshold_extreme.setter
    def memory_use_threshold_extreme(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_use_threshold_extreme", value)

    @property
    @pulumi.getter(name="memoryUseThresholdGreen")
    def memory_use_threshold_green(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_use_threshold_green")

    @memory_use_threshold_green.setter
    def memory_use_threshold_green(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_use_threshold_green", value)

    @property
    @pulumi.getter(name="memoryUseThresholdRed")
    def memory_use_threshold_red(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_use_threshold_red")

    @memory_use_threshold_red.setter
    def memory_use_threshold_red(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_use_threshold_red", value)

    @property
    @pulumi.getter(name="miglogAffinity")
    def miglog_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "miglog_affinity")

    @miglog_affinity.setter
    def miglog_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "miglog_affinity", value)

    @property
    @pulumi.getter(name="miglogdChildren")
    def miglogd_children(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "miglogd_children")

    @miglogd_children.setter
    def miglogd_children(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "miglogd_children", value)

    @property
    @pulumi.getter(name="multiFactorAuthentication")
    def multi_factor_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multi_factor_authentication")

    @multi_factor_authentication.setter
    def multi_factor_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_factor_authentication", value)

    @property
    @pulumi.getter(name="multicastForward")
    def multicast_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_forward")

    @multicast_forward.setter
    def multicast_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_forward", value)

    @property
    @pulumi.getter(name="ndpMaxEntry")
    def ndp_max_entry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ndp_max_entry")

    @ndp_max_entry.setter
    def ndp_max_entry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ndp_max_entry", value)

    @property
    @pulumi.getter(name="perUserBal")
    def per_user_bal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "per_user_bal")

    @per_user_bal.setter
    def per_user_bal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_user_bal", value)

    @property
    @pulumi.getter(name="perUserBwl")
    def per_user_bwl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "per_user_bwl")

    @per_user_bwl.setter
    def per_user_bwl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_user_bwl", value)

    @property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pmtu_discovery")

    @pmtu_discovery.setter
    def pmtu_discovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pmtu_discovery", value)

    @property
    @pulumi.getter(name="policyAuthConcurrent")
    def policy_auth_concurrent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policy_auth_concurrent")

    @policy_auth_concurrent.setter
    def policy_auth_concurrent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_auth_concurrent", value)

    @property
    @pulumi.getter(name="postLoginBanner")
    def post_login_banner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_login_banner")

    @post_login_banner.setter
    def post_login_banner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_login_banner", value)

    @property
    @pulumi.getter(name="preLoginBanner")
    def pre_login_banner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_login_banner")

    @pre_login_banner.setter
    def pre_login_banner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_login_banner", value)

    @property
    @pulumi.getter(name="privateDataEncryption")
    def private_data_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_data_encryption")

    @private_data_encryption.setter
    def private_data_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_data_encryption", value)

    @property
    @pulumi.getter(name="proxyAuthLifetime")
    def proxy_auth_lifetime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_auth_lifetime")

    @proxy_auth_lifetime.setter
    def proxy_auth_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_auth_lifetime", value)

    @property
    @pulumi.getter(name="proxyAuthLifetimeTimeout")
    def proxy_auth_lifetime_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "proxy_auth_lifetime_timeout")

    @proxy_auth_lifetime_timeout.setter
    def proxy_auth_lifetime_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_auth_lifetime_timeout", value)

    @property
    @pulumi.getter(name="proxyAuthTimeout")
    def proxy_auth_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "proxy_auth_timeout")

    @proxy_auth_timeout.setter
    def proxy_auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_auth_timeout", value)

    @property
    @pulumi.getter(name="proxyCertUseMgmtVdom")
    def proxy_cert_use_mgmt_vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_cert_use_mgmt_vdom")

    @proxy_cert_use_mgmt_vdom.setter
    def proxy_cert_use_mgmt_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_cert_use_mgmt_vdom", value)

    @property
    @pulumi.getter(name="proxyCipherHardwareAcceleration")
    def proxy_cipher_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_cipher_hardware_acceleration")

    @proxy_cipher_hardware_acceleration.setter
    def proxy_cipher_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_cipher_hardware_acceleration", value)

    @property
    @pulumi.getter(name="proxyHardwareAcceleration")
    def proxy_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_hardware_acceleration")

    @proxy_hardware_acceleration.setter
    def proxy_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_hardware_acceleration", value)

    @property
    @pulumi.getter(name="proxyKeepAliveMode")
    def proxy_keep_alive_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_keep_alive_mode")

    @proxy_keep_alive_mode.setter
    def proxy_keep_alive_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_keep_alive_mode", value)

    @property
    @pulumi.getter(name="proxyKxpHardwareAcceleration")
    def proxy_kxp_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_kxp_hardware_acceleration")

    @proxy_kxp_hardware_acceleration.setter
    def proxy_kxp_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_kxp_hardware_acceleration", value)

    @property
    @pulumi.getter(name="proxyReAuthenticationMode")
    def proxy_re_authentication_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_re_authentication_mode")

    @proxy_re_authentication_mode.setter
    def proxy_re_authentication_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_re_authentication_mode", value)

    @property
    @pulumi.getter(name="proxyReAuthenticationTime")
    def proxy_re_authentication_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "proxy_re_authentication_time")

    @proxy_re_authentication_time.setter
    def proxy_re_authentication_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_re_authentication_time", value)

    @property
    @pulumi.getter(name="proxyResourceMode")
    def proxy_resource_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_resource_mode")

    @proxy_resource_mode.setter
    def proxy_resource_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_resource_mode", value)

    @property
    @pulumi.getter(name="proxyWorkerCount")
    def proxy_worker_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "proxy_worker_count")

    @proxy_worker_count.setter
    def proxy_worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_worker_count", value)

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radius_port")

    @radius_port.setter
    def radius_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_port", value)

    @property
    @pulumi.getter(name="rebootUponConfigRestore")
    def reboot_upon_config_restore(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reboot_upon_config_restore")

    @reboot_upon_config_restore.setter
    def reboot_upon_config_restore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reboot_upon_config_restore", value)

    @property
    @pulumi.getter
    def refresh(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh")

    @refresh.setter
    def refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh", value)

    @property
    @pulumi.getter
    def remoteauthtimeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remoteauthtimeout")

    @remoteauthtimeout.setter
    def remoteauthtimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remoteauthtimeout", value)

    @property
    @pulumi.getter(name="resetSessionlessTcp")
    def reset_sessionless_tcp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reset_sessionless_tcp")

    @reset_sessionless_tcp.setter
    def reset_sessionless_tcp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reset_sessionless_tcp", value)

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restart_time")

    @restart_time.setter
    def restart_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_time", value)

    @property
    @pulumi.getter(name="revisionBackupOnLogout")
    def revision_backup_on_logout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revision_backup_on_logout")

    @revision_backup_on_logout.setter
    def revision_backup_on_logout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_backup_on_logout", value)

    @property
    @pulumi.getter(name="revisionImageAutoBackup")
    def revision_image_auto_backup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revision_image_auto_backup")

    @revision_image_auto_backup.setter
    def revision_image_auto_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_image_auto_backup", value)

    @property
    @pulumi.getter(name="scanunitCount")
    def scanunit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scanunit_count")

    @scanunit_count.setter
    def scanunit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scanunit_count", value)

    @property
    @pulumi.getter(name="securityRatingResultSubmission")
    def security_rating_result_submission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_rating_result_submission")

    @security_rating_result_submission.setter
    def security_rating_result_submission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_rating_result_submission", value)

    @property
    @pulumi.getter(name="securityRatingRunOnSchedule")
    def security_rating_run_on_schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_rating_run_on_schedule")

    @security_rating_run_on_schedule.setter
    def security_rating_run_on_schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_rating_run_on_schedule", value)

    @property
    @pulumi.getter(name="sendPmtuIcmp")
    def send_pmtu_icmp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_pmtu_icmp")

    @send_pmtu_icmp.setter
    def send_pmtu_icmp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_pmtu_icmp", value)

    @property
    @pulumi.getter(name="sflowdMaxChildrenNum")
    def sflowd_max_children_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sflowd_max_children_num")

    @sflowd_max_children_num.setter
    def sflowd_max_children_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sflowd_max_children_num", value)

    @property
    @pulumi.getter(name="snatRouteChange")
    def snat_route_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_route_change")

    @snat_route_change.setter
    def snat_route_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_route_change", value)

    @property
    @pulumi.getter(name="specialFile23Support")
    def special_file23_support(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "special_file23_support")

    @special_file23_support.setter
    def special_file23_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "special_file23_support", value)

    @property
    @pulumi.getter(name="speedtestServer")
    def speedtest_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "speedtest_server")

    @speedtest_server.setter
    def speedtest_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speedtest_server", value)

    @property
    @pulumi.getter(name="splitPort")
    def split_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_port")

    @split_port.setter
    def split_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_port", value)

    @property
    @pulumi.getter(name="ssdTrimDate")
    def ssd_trim_date(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssd_trim_date")

    @ssd_trim_date.setter
    def ssd_trim_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssd_trim_date", value)

    @property
    @pulumi.getter(name="ssdTrimFreq")
    def ssd_trim_freq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssd_trim_freq")

    @ssd_trim_freq.setter
    def ssd_trim_freq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssd_trim_freq", value)

    @property
    @pulumi.getter(name="ssdTrimHour")
    def ssd_trim_hour(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssd_trim_hour")

    @ssd_trim_hour.setter
    def ssd_trim_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssd_trim_hour", value)

    @property
    @pulumi.getter(name="ssdTrimMin")
    def ssd_trim_min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssd_trim_min")

    @ssd_trim_min.setter
    def ssd_trim_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssd_trim_min", value)

    @property
    @pulumi.getter(name="ssdTrimWeekday")
    def ssd_trim_weekday(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssd_trim_weekday")

    @ssd_trim_weekday.setter
    def ssd_trim_weekday(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssd_trim_weekday", value)

    @property
    @pulumi.getter(name="sshCbcCipher")
    def ssh_cbc_cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_cbc_cipher")

    @ssh_cbc_cipher.setter
    def ssh_cbc_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_cbc_cipher", value)

    @property
    @pulumi.getter(name="sshEncAlgo")
    def ssh_enc_algo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_enc_algo")

    @ssh_enc_algo.setter
    def ssh_enc_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_enc_algo", value)

    @property
    @pulumi.getter(name="sshHmacMd5")
    def ssh_hmac_md5(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_hmac_md5")

    @ssh_hmac_md5.setter
    def ssh_hmac_md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hmac_md5", value)

    @property
    @pulumi.getter(name="sshHostkeyAlgo")
    def ssh_hostkey_algo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_hostkey_algo")

    @ssh_hostkey_algo.setter
    def ssh_hostkey_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hostkey_algo", value)

    @property
    @pulumi.getter(name="sshKexAlgo")
    def ssh_kex_algo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_kex_algo")

    @ssh_kex_algo.setter
    def ssh_kex_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_kex_algo", value)

    @property
    @pulumi.getter(name="sshKexSha1")
    def ssh_kex_sha1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_kex_sha1")

    @ssh_kex_sha1.setter
    def ssh_kex_sha1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_kex_sha1", value)

    @property
    @pulumi.getter(name="sshMacAlgo")
    def ssh_mac_algo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_mac_algo")

    @ssh_mac_algo.setter
    def ssh_mac_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_mac_algo", value)

    @property
    @pulumi.getter(name="sshMacWeak")
    def ssh_mac_weak(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_mac_weak")

    @ssh_mac_weak.setter
    def ssh_mac_weak(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_mac_weak", value)

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_proto_version")

    @ssl_min_proto_version.setter
    def ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_version", value)

    @property
    @pulumi.getter(name="sslStaticKeyCiphers")
    def ssl_static_key_ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_static_key_ciphers")

    @ssl_static_key_ciphers.setter
    def ssl_static_key_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_static_key_ciphers", value)

    @property
    @pulumi.getter(name="sslvpnCipherHardwareAcceleration")
    def sslvpn_cipher_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_cipher_hardware_acceleration")

    @sslvpn_cipher_hardware_acceleration.setter
    def sslvpn_cipher_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_cipher_hardware_acceleration", value)

    @property
    @pulumi.getter(name="sslvpnEmsSnCheck")
    def sslvpn_ems_sn_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_ems_sn_check")

    @sslvpn_ems_sn_check.setter
    def sslvpn_ems_sn_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_ems_sn_check", value)

    @property
    @pulumi.getter(name="sslvpnKxpHardwareAcceleration")
    def sslvpn_kxp_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_kxp_hardware_acceleration")

    @sslvpn_kxp_hardware_acceleration.setter
    def sslvpn_kxp_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_kxp_hardware_acceleration", value)

    @property
    @pulumi.getter(name="sslvpnMaxWorkerCount")
    def sslvpn_max_worker_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sslvpn_max_worker_count")

    @sslvpn_max_worker_count.setter
    def sslvpn_max_worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sslvpn_max_worker_count", value)

    @property
    @pulumi.getter(name="sslvpnPluginVersionCheck")
    def sslvpn_plugin_version_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_plugin_version_check")

    @sslvpn_plugin_version_check.setter
    def sslvpn_plugin_version_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_plugin_version_check", value)

    @property
    @pulumi.getter(name="strictDirtySessionCheck")
    def strict_dirty_session_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strict_dirty_session_check")

    @strict_dirty_session_check.setter
    def strict_dirty_session_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_dirty_session_check", value)

    @property
    @pulumi.getter(name="strongCrypto")
    def strong_crypto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strong_crypto")

    @strong_crypto.setter
    def strong_crypto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strong_crypto", value)

    @property
    @pulumi.getter(name="switchController")
    def switch_controller(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_controller")

    @switch_controller.setter
    def switch_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller", value)

    @property
    @pulumi.getter(name="switchControllerReservedNetwork")
    def switch_controller_reserved_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_controller_reserved_network")

    @switch_controller_reserved_network.setter
    def switch_controller_reserved_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_controller_reserved_network", value)

    @property
    @pulumi.getter(name="sysPerfLogInterval")
    def sys_perf_log_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sys_perf_log_interval")

    @sys_perf_log_interval.setter
    def sys_perf_log_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sys_perf_log_interval", value)

    @property
    @pulumi.getter(name="syslogAffinity")
    def syslog_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "syslog_affinity")

    @syslog_affinity.setter
    def syslog_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "syslog_affinity", value)

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_halfclose_timer")

    @tcp_halfclose_timer.setter
    def tcp_halfclose_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfclose_timer", value)

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_halfopen_timer")

    @tcp_halfopen_timer.setter
    def tcp_halfopen_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfopen_timer", value)

    @property
    @pulumi.getter(name="tcpOption")
    def tcp_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_option")

    @tcp_option.setter
    def tcp_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_option", value)

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_rst_timer")

    @tcp_rst_timer.setter
    def tcp_rst_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_rst_timer", value)

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_timewait_timer")

    @tcp_timewait_timer.setter
    def tcp_timewait_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_timewait_timer", value)

    @property
    @pulumi.getter
    def tftp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tftp")

    @tftp.setter
    def tftp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tftp", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="tpMcSkipPolicy")
    def tp_mc_skip_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tp_mc_skip_policy")

    @tp_mc_skip_policy.setter
    def tp_mc_skip_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tp_mc_skip_policy", value)

    @property
    @pulumi.getter(name="trafficPriority")
    def traffic_priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_priority")

    @traffic_priority.setter
    def traffic_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_priority", value)

    @property
    @pulumi.getter(name="trafficPriorityLevel")
    def traffic_priority_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_priority_level")

    @traffic_priority_level.setter
    def traffic_priority_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_priority_level", value)

    @property
    @pulumi.getter(name="twoFactorEmailExpiry")
    def two_factor_email_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "two_factor_email_expiry")

    @two_factor_email_expiry.setter
    def two_factor_email_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_email_expiry", value)

    @property
    @pulumi.getter(name="twoFactorFacExpiry")
    def two_factor_fac_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "two_factor_fac_expiry")

    @two_factor_fac_expiry.setter
    def two_factor_fac_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_fac_expiry", value)

    @property
    @pulumi.getter(name="twoFactorFtkExpiry")
    def two_factor_ftk_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "two_factor_ftk_expiry")

    @two_factor_ftk_expiry.setter
    def two_factor_ftk_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_ftk_expiry", value)

    @property
    @pulumi.getter(name="twoFactorFtmExpiry")
    def two_factor_ftm_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "two_factor_ftm_expiry")

    @two_factor_ftm_expiry.setter
    def two_factor_ftm_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_ftm_expiry", value)

    @property
    @pulumi.getter(name="twoFactorSmsExpiry")
    def two_factor_sms_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "two_factor_sms_expiry")

    @two_factor_sms_expiry.setter
    def two_factor_sms_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "two_factor_sms_expiry", value)

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "udp_idle_timer")

    @udp_idle_timer.setter
    def udp_idle_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "udp_idle_timer", value)

    @property
    @pulumi.getter(name="urlFilterAffinity")
    def url_filter_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_filter_affinity")

    @url_filter_affinity.setter
    def url_filter_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_filter_affinity", value)

    @property
    @pulumi.getter(name="urlFilterCount")
    def url_filter_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "url_filter_count")

    @url_filter_count.setter
    def url_filter_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "url_filter_count", value)

    @property
    @pulumi.getter(name="userDeviceStoreMaxDevices")
    def user_device_store_max_devices(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_device_store_max_devices")

    @user_device_store_max_devices.setter
    def user_device_store_max_devices(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_device_store_max_devices", value)

    @property
    @pulumi.getter(name="userDeviceStoreMaxUnifiedMem")
    def user_device_store_max_unified_mem(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_device_store_max_unified_mem")

    @user_device_store_max_unified_mem.setter
    def user_device_store_max_unified_mem(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_device_store_max_unified_mem", value)

    @property
    @pulumi.getter(name="userDeviceStoreMaxUsers")
    def user_device_store_max_users(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_device_store_max_users")

    @user_device_store_max_users.setter
    def user_device_store_max_users(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_device_store_max_users", value)

    @property
    @pulumi.getter(name="userServerCert")
    def user_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_server_cert")

    @user_server_cert.setter
    def user_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_server_cert", value)

    @property
    @pulumi.getter(name="vdomAdmin")
    def vdom_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdom_admin")

    @vdom_admin.setter
    def vdom_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom_admin", value)

    @property
    @pulumi.getter(name="vdomMode")
    def vdom_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdom_mode")

    @vdom_mode.setter
    def vdom_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vipArpRange")
    def vip_arp_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vip_arp_range")

    @vip_arp_range.setter
    def vip_arp_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip_arp_range", value)

    @property
    @pulumi.getter(name="virtualServerCount")
    def virtual_server_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "virtual_server_count")

    @virtual_server_count.setter
    def virtual_server_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_server_count", value)

    @property
    @pulumi.getter(name="virtualServerHardwareAcceleration")
    def virtual_server_hardware_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_server_hardware_acceleration")

    @virtual_server_hardware_acceleration.setter
    def virtual_server_hardware_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_server_hardware_acceleration", value)

    @property
    @pulumi.getter(name="virtualSwitchVlan")
    def virtual_switch_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_switch_vlan")

    @virtual_switch_vlan.setter
    def virtual_switch_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_switch_vlan", value)

    @property
    @pulumi.getter(name="vpnEmsSnCheck")
    def vpn_ems_sn_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_ems_sn_check")

    @vpn_ems_sn_check.setter
    def vpn_ems_sn_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_ems_sn_check", value)

    @property
    @pulumi.getter(name="wadAffinity")
    def wad_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wad_affinity")

    @wad_affinity.setter
    def wad_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wad_affinity", value)

    @property
    @pulumi.getter(name="wadCsvcCsCount")
    def wad_csvc_cs_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wad_csvc_cs_count")

    @wad_csvc_cs_count.setter
    def wad_csvc_cs_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wad_csvc_cs_count", value)

    @property
    @pulumi.getter(name="wadCsvcDbCount")
    def wad_csvc_db_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wad_csvc_db_count")

    @wad_csvc_db_count.setter
    def wad_csvc_db_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wad_csvc_db_count", value)

    @property
    @pulumi.getter(name="wadMemoryChangeGranularity")
    def wad_memory_change_granularity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wad_memory_change_granularity")

    @wad_memory_change_granularity.setter
    def wad_memory_change_granularity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wad_memory_change_granularity", value)

    @property
    @pulumi.getter(name="wadRestartEndTime")
    def wad_restart_end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wad_restart_end_time")

    @wad_restart_end_time.setter
    def wad_restart_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wad_restart_end_time", value)

    @property
    @pulumi.getter(name="wadRestartMode")
    def wad_restart_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wad_restart_mode")

    @wad_restart_mode.setter
    def wad_restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wad_restart_mode", value)

    @property
    @pulumi.getter(name="wadRestartStartTime")
    def wad_restart_start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wad_restart_start_time")

    @wad_restart_start_time.setter
    def wad_restart_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wad_restart_start_time", value)

    @property
    @pulumi.getter(name="wadSourceAffinity")
    def wad_source_affinity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wad_source_affinity")

    @wad_source_affinity.setter
    def wad_source_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wad_source_affinity", value)

    @property
    @pulumi.getter(name="wadWorkerCount")
    def wad_worker_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wad_worker_count")

    @wad_worker_count.setter
    def wad_worker_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wad_worker_count", value)

    @property
    @pulumi.getter(name="wifiCaCertificate")
    def wifi_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_ca_certificate")

    @wifi_ca_certificate.setter
    def wifi_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ca_certificate", value)

    @property
    @pulumi.getter(name="wifiCertificate")
    def wifi_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wifi_certificate")

    @wifi_certificate.setter
    def wifi_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_certificate", value)

    @property
    @pulumi.getter(name="wimax4gUsb")
    def wimax4g_usb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wimax4g_usb")

    @wimax4g_usb.setter
    def wimax4g_usb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wimax4g_usb", value)

    @property
    @pulumi.getter(name="wirelessController")
    def wireless_controller(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wireless_controller")

    @wireless_controller.setter
    def wireless_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wireless_controller", value)

    @property
    @pulumi.getter(name="wirelessControllerPort")
    def wireless_controller_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wireless_controller_port")

    @wireless_controller_port.setter
    def wireless_controller_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wireless_controller_port", value)


class SystemGlobal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_concurrent: Optional[pulumi.Input[str]] = None,
                 admin_console_timeout: Optional[pulumi.Input[int]] = None,
                 admin_forticloud_sso_default_profile: Optional[pulumi.Input[str]] = None,
                 admin_forticloud_sso_login: Optional[pulumi.Input[str]] = None,
                 admin_host: Optional[pulumi.Input[str]] = None,
                 admin_hsts_max_age: Optional[pulumi.Input[int]] = None,
                 admin_https_pki_required: Optional[pulumi.Input[str]] = None,
                 admin_https_redirect: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_banned_ciphers: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_ciphersuites: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_versions: Optional[pulumi.Input[str]] = None,
                 admin_lockout_duration: Optional[pulumi.Input[int]] = None,
                 admin_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 admin_login_max: Optional[pulumi.Input[int]] = None,
                 admin_maintainer: Optional[pulumi.Input[str]] = None,
                 admin_port: Optional[pulumi.Input[int]] = None,
                 admin_restrict_local: Optional[pulumi.Input[str]] = None,
                 admin_scp: Optional[pulumi.Input[str]] = None,
                 admin_server_cert: Optional[pulumi.Input[str]] = None,
                 admin_sport: Optional[pulumi.Input[int]] = None,
                 admin_ssh_grace_time: Optional[pulumi.Input[int]] = None,
                 admin_ssh_password: Optional[pulumi.Input[str]] = None,
                 admin_ssh_port: Optional[pulumi.Input[int]] = None,
                 admin_ssh_v1: Optional[pulumi.Input[str]] = None,
                 admin_telnet: Optional[pulumi.Input[str]] = None,
                 admin_telnet_port: Optional[pulumi.Input[int]] = None,
                 admintimeout: Optional[pulumi.Input[int]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 allow_traffic_redirect: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 arp_max_entry: Optional[pulumi.Input[int]] = None,
                 asymroute: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_port: Optional[pulumi.Input[int]] = None,
                 auth_https_port: Optional[pulumi.Input[int]] = None,
                 auth_ike_saml_port: Optional[pulumi.Input[int]] = None,
                 auth_keepalive: Optional[pulumi.Input[str]] = None,
                 auth_session_limit: Optional[pulumi.Input[str]] = None,
                 auto_auth_extension_device: Optional[pulumi.Input[str]] = None,
                 autorun_log_fsck: Optional[pulumi.Input[str]] = None,
                 av_affinity: Optional[pulumi.Input[str]] = None,
                 av_failopen: Optional[pulumi.Input[str]] = None,
                 av_failopen_session: Optional[pulumi.Input[str]] = None,
                 batch_cmdb: Optional[pulumi.Input[str]] = None,
                 block_session_timer: Optional[pulumi.Input[int]] = None,
                 br_fdb_max_entry: Optional[pulumi.Input[int]] = None,
                 cert_chain_max: Optional[pulumi.Input[int]] = None,
                 cfg_revert_timeout: Optional[pulumi.Input[int]] = None,
                 cfg_save: Optional[pulumi.Input[str]] = None,
                 check_protocol_header: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 cli_audit_log: Optional[pulumi.Input[str]] = None,
                 cloud_communication: Optional[pulumi.Input[str]] = None,
                 clt_cert_req: Optional[pulumi.Input[str]] = None,
                 cmdbsvr_affinity: Optional[pulumi.Input[str]] = None,
                 compliance_check: Optional[pulumi.Input[str]] = None,
                 compliance_check_time: Optional[pulumi.Input[str]] = None,
                 cpu_use_threshold: Optional[pulumi.Input[int]] = None,
                 csr_ca_attribute: Optional[pulumi.Input[str]] = None,
                 daily_restart: Optional[pulumi.Input[str]] = None,
                 default_service_source_port: Optional[pulumi.Input[str]] = None,
                 device_identification_active_scan_delay: Optional[pulumi.Input[int]] = None,
                 device_idle_timeout: Optional[pulumi.Input[int]] = None,
                 dh_params: Optional[pulumi.Input[str]] = None,
                 dnsproxy_worker_count: Optional[pulumi.Input[int]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 early_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 edit_vdom_prompt: Optional[pulumi.Input[str]] = None,
                 endpoint_control_fds_access: Optional[pulumi.Input[str]] = None,
                 endpoint_control_portal_port: Optional[pulumi.Input[int]] = None,
                 extender_controller_reserved_network: Optional[pulumi.Input[str]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 faz_disk_buffer_size: Optional[pulumi.Input[int]] = None,
                 fds_statistics: Optional[pulumi.Input[str]] = None,
                 fds_statistics_period: Optional[pulumi.Input[int]] = None,
                 fec_port: Optional[pulumi.Input[int]] = None,
                 fgd_alert_subscription: Optional[pulumi.Input[str]] = None,
                 forticonverter_config_upload: Optional[pulumi.Input[str]] = None,
                 forticonverter_integration: Optional[pulumi.Input[str]] = None,
                 fortiextender: Optional[pulumi.Input[str]] = None,
                 fortiextender_data_port: Optional[pulumi.Input[int]] = None,
                 fortiextender_discovery_lockdown: Optional[pulumi.Input[str]] = None,
                 fortiextender_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 fortiextender_vlan_mode: Optional[pulumi.Input[str]] = None,
                 fortiipam_integration: Optional[pulumi.Input[str]] = None,
                 fortiservice_port: Optional[pulumi.Input[int]] = None,
                 fortitoken_cloud: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gui_allow_default_hostname: Optional[pulumi.Input[str]] = None,
                 gui_allow_incompatible_fabric_fgt: Optional[pulumi.Input[str]] = None,
                 gui_app_detection_sdwan: Optional[pulumi.Input[str]] = None,
                 gui_cdn_domain_override: Optional[pulumi.Input[str]] = None,
                 gui_cdn_usage: Optional[pulumi.Input[str]] = None,
                 gui_certificates: Optional[pulumi.Input[str]] = None,
                 gui_custom_language: Optional[pulumi.Input[str]] = None,
                 gui_date_format: Optional[pulumi.Input[str]] = None,
                 gui_date_time_source: Optional[pulumi.Input[str]] = None,
                 gui_device_latitude: Optional[pulumi.Input[str]] = None,
                 gui_device_longitude: Optional[pulumi.Input[str]] = None,
                 gui_display_hostname: Optional[pulumi.Input[str]] = None,
                 gui_firmware_upgrade_setup_warning: Optional[pulumi.Input[str]] = None,
                 gui_firmware_upgrade_warning: Optional[pulumi.Input[str]] = None,
                 gui_forticare_registration_setup_warning: Optional[pulumi.Input[str]] = None,
                 gui_fortigate_cloud_sandbox: Optional[pulumi.Input[str]] = None,
                 gui_fortiguard_resource_fetch: Optional[pulumi.Input[str]] = None,
                 gui_fortisandbox_cloud: Optional[pulumi.Input[str]] = None,
                 gui_ipv6: Optional[pulumi.Input[str]] = None,
                 gui_lines_per_page: Optional[pulumi.Input[int]] = None,
                 gui_local_out: Optional[pulumi.Input[str]] = None,
                 gui_replacement_message_groups: Optional[pulumi.Input[str]] = None,
                 gui_rest_api_cache: Optional[pulumi.Input[str]] = None,
                 gui_theme: Optional[pulumi.Input[str]] = None,
                 gui_wireless_opensecurity: Optional[pulumi.Input[str]] = None,
                 gui_workflow_management: Optional[pulumi.Input[str]] = None,
                 ha_affinity: Optional[pulumi.Input[str]] = None,
                 honor_df: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 igmp_state_limit: Optional[pulumi.Input[int]] = None,
                 ike_embryonic_limit: Optional[pulumi.Input[int]] = None,
                 interface_subnet_usage: Optional[pulumi.Input[str]] = None,
                 internet_service_database: Optional[pulumi.Input[str]] = None,
                 internet_service_download_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemGlobalInternetServiceDownloadListArgs']]]]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 ip_fragment_mem_thresholds: Optional[pulumi.Input[int]] = None,
                 ip_src_port_range: Optional[pulumi.Input[str]] = None,
                 ips_affinity: Optional[pulumi.Input[str]] = None,
                 ipsec_asic_offload: Optional[pulumi.Input[str]] = None,
                 ipsec_ha_seqjump_rate: Optional[pulumi.Input[int]] = None,
                 ipsec_hmac_offload: Optional[pulumi.Input[str]] = None,
                 ipsec_round_robin: Optional[pulumi.Input[str]] = None,
                 ipsec_soft_dec_async: Optional[pulumi.Input[str]] = None,
                 ipv6_accept_dad: Optional[pulumi.Input[int]] = None,
                 ipv6_allow_anycast_probe: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_local_in_slient_drop: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_multicast_probe: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_traffic_redirect: Optional[pulumi.Input[str]] = None,
                 irq_time_accounting: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 ldapconntimeout: Optional[pulumi.Input[int]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 log_single_cpu_high: Optional[pulumi.Input[str]] = None,
                 log_ssl_connection: Optional[pulumi.Input[str]] = None,
                 log_uuid_address: Optional[pulumi.Input[str]] = None,
                 log_uuid_policy: Optional[pulumi.Input[str]] = None,
                 login_timestamp: Optional[pulumi.Input[str]] = None,
                 long_vdom_name: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 management_port_use_admin_sport: Optional[pulumi.Input[str]] = None,
                 management_vdom: Optional[pulumi.Input[str]] = None,
                 max_dlpstat_memory: Optional[pulumi.Input[int]] = None,
                 max_route_cache_size: Optional[pulumi.Input[int]] = None,
                 mc_ttl_notchange: Optional[pulumi.Input[str]] = None,
                 memory_use_threshold_extreme: Optional[pulumi.Input[int]] = None,
                 memory_use_threshold_green: Optional[pulumi.Input[int]] = None,
                 memory_use_threshold_red: Optional[pulumi.Input[int]] = None,
                 miglog_affinity: Optional[pulumi.Input[str]] = None,
                 miglogd_children: Optional[pulumi.Input[int]] = None,
                 multi_factor_authentication: Optional[pulumi.Input[str]] = None,
                 multicast_forward: Optional[pulumi.Input[str]] = None,
                 ndp_max_entry: Optional[pulumi.Input[int]] = None,
                 per_user_bal: Optional[pulumi.Input[str]] = None,
                 per_user_bwl: Optional[pulumi.Input[str]] = None,
                 pmtu_discovery: Optional[pulumi.Input[str]] = None,
                 policy_auth_concurrent: Optional[pulumi.Input[int]] = None,
                 post_login_banner: Optional[pulumi.Input[str]] = None,
                 pre_login_banner: Optional[pulumi.Input[str]] = None,
                 private_data_encryption: Optional[pulumi.Input[str]] = None,
                 proxy_auth_lifetime: Optional[pulumi.Input[str]] = None,
                 proxy_auth_lifetime_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_auth_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_cert_use_mgmt_vdom: Optional[pulumi.Input[str]] = None,
                 proxy_cipher_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_keep_alive_mode: Optional[pulumi.Input[str]] = None,
                 proxy_kxp_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_re_authentication_mode: Optional[pulumi.Input[str]] = None,
                 proxy_re_authentication_time: Optional[pulumi.Input[int]] = None,
                 proxy_resource_mode: Optional[pulumi.Input[str]] = None,
                 proxy_worker_count: Optional[pulumi.Input[int]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 reboot_upon_config_restore: Optional[pulumi.Input[str]] = None,
                 refresh: Optional[pulumi.Input[int]] = None,
                 remoteauthtimeout: Optional[pulumi.Input[int]] = None,
                 reset_sessionless_tcp: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_logout: Optional[pulumi.Input[str]] = None,
                 revision_image_auto_backup: Optional[pulumi.Input[str]] = None,
                 scanunit_count: Optional[pulumi.Input[int]] = None,
                 security_rating_result_submission: Optional[pulumi.Input[str]] = None,
                 security_rating_run_on_schedule: Optional[pulumi.Input[str]] = None,
                 send_pmtu_icmp: Optional[pulumi.Input[str]] = None,
                 sflowd_max_children_num: Optional[pulumi.Input[int]] = None,
                 snat_route_change: Optional[pulumi.Input[str]] = None,
                 special_file23_support: Optional[pulumi.Input[str]] = None,
                 speedtest_server: Optional[pulumi.Input[str]] = None,
                 split_port: Optional[pulumi.Input[str]] = None,
                 ssd_trim_date: Optional[pulumi.Input[int]] = None,
                 ssd_trim_freq: Optional[pulumi.Input[str]] = None,
                 ssd_trim_hour: Optional[pulumi.Input[int]] = None,
                 ssd_trim_min: Optional[pulumi.Input[int]] = None,
                 ssd_trim_weekday: Optional[pulumi.Input[str]] = None,
                 ssh_cbc_cipher: Optional[pulumi.Input[str]] = None,
                 ssh_enc_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hmac_md5: Optional[pulumi.Input[str]] = None,
                 ssh_hostkey_algo: Optional[pulumi.Input[str]] = None,
                 ssh_kex_algo: Optional[pulumi.Input[str]] = None,
                 ssh_kex_sha1: Optional[pulumi.Input[str]] = None,
                 ssh_mac_algo: Optional[pulumi.Input[str]] = None,
                 ssh_mac_weak: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 ssl_static_key_ciphers: Optional[pulumi.Input[str]] = None,
                 sslvpn_cipher_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 sslvpn_ems_sn_check: Optional[pulumi.Input[str]] = None,
                 sslvpn_kxp_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 sslvpn_max_worker_count: Optional[pulumi.Input[int]] = None,
                 sslvpn_plugin_version_check: Optional[pulumi.Input[str]] = None,
                 strict_dirty_session_check: Optional[pulumi.Input[str]] = None,
                 strong_crypto: Optional[pulumi.Input[str]] = None,
                 switch_controller: Optional[pulumi.Input[str]] = None,
                 switch_controller_reserved_network: Optional[pulumi.Input[str]] = None,
                 sys_perf_log_interval: Optional[pulumi.Input[int]] = None,
                 syslog_affinity: Optional[pulumi.Input[str]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_option: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 tftp: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 tp_mc_skip_policy: Optional[pulumi.Input[str]] = None,
                 traffic_priority: Optional[pulumi.Input[str]] = None,
                 traffic_priority_level: Optional[pulumi.Input[str]] = None,
                 two_factor_email_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_fac_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_ftk_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_ftm_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_sms_expiry: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 url_filter_affinity: Optional[pulumi.Input[str]] = None,
                 url_filter_count: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_devices: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_unified_mem: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_users: Optional[pulumi.Input[int]] = None,
                 user_server_cert: Optional[pulumi.Input[str]] = None,
                 vdom_admin: Optional[pulumi.Input[str]] = None,
                 vdom_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vip_arp_range: Optional[pulumi.Input[str]] = None,
                 virtual_server_count: Optional[pulumi.Input[int]] = None,
                 virtual_server_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 vpn_ems_sn_check: Optional[pulumi.Input[str]] = None,
                 wad_affinity: Optional[pulumi.Input[str]] = None,
                 wad_csvc_cs_count: Optional[pulumi.Input[int]] = None,
                 wad_csvc_db_count: Optional[pulumi.Input[int]] = None,
                 wad_memory_change_granularity: Optional[pulumi.Input[int]] = None,
                 wad_restart_end_time: Optional[pulumi.Input[str]] = None,
                 wad_restart_mode: Optional[pulumi.Input[str]] = None,
                 wad_restart_start_time: Optional[pulumi.Input[str]] = None,
                 wad_source_affinity: Optional[pulumi.Input[str]] = None,
                 wad_worker_count: Optional[pulumi.Input[int]] = None,
                 wifi_ca_certificate: Optional[pulumi.Input[str]] = None,
                 wifi_certificate: Optional[pulumi.Input[str]] = None,
                 wimax4g_usb: Optional[pulumi.Input[str]] = None,
                 wireless_controller: Optional[pulumi.Input[str]] = None,
                 wireless_controller_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a SystemGlobal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemGlobalArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemGlobal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemGlobalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemGlobalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_concurrent: Optional[pulumi.Input[str]] = None,
                 admin_console_timeout: Optional[pulumi.Input[int]] = None,
                 admin_forticloud_sso_default_profile: Optional[pulumi.Input[str]] = None,
                 admin_forticloud_sso_login: Optional[pulumi.Input[str]] = None,
                 admin_host: Optional[pulumi.Input[str]] = None,
                 admin_hsts_max_age: Optional[pulumi.Input[int]] = None,
                 admin_https_pki_required: Optional[pulumi.Input[str]] = None,
                 admin_https_redirect: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_banned_ciphers: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_ciphersuites: Optional[pulumi.Input[str]] = None,
                 admin_https_ssl_versions: Optional[pulumi.Input[str]] = None,
                 admin_lockout_duration: Optional[pulumi.Input[int]] = None,
                 admin_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 admin_login_max: Optional[pulumi.Input[int]] = None,
                 admin_maintainer: Optional[pulumi.Input[str]] = None,
                 admin_port: Optional[pulumi.Input[int]] = None,
                 admin_restrict_local: Optional[pulumi.Input[str]] = None,
                 admin_scp: Optional[pulumi.Input[str]] = None,
                 admin_server_cert: Optional[pulumi.Input[str]] = None,
                 admin_sport: Optional[pulumi.Input[int]] = None,
                 admin_ssh_grace_time: Optional[pulumi.Input[int]] = None,
                 admin_ssh_password: Optional[pulumi.Input[str]] = None,
                 admin_ssh_port: Optional[pulumi.Input[int]] = None,
                 admin_ssh_v1: Optional[pulumi.Input[str]] = None,
                 admin_telnet: Optional[pulumi.Input[str]] = None,
                 admin_telnet_port: Optional[pulumi.Input[int]] = None,
                 admintimeout: Optional[pulumi.Input[int]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 allow_traffic_redirect: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 arp_max_entry: Optional[pulumi.Input[int]] = None,
                 asymroute: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_port: Optional[pulumi.Input[int]] = None,
                 auth_https_port: Optional[pulumi.Input[int]] = None,
                 auth_ike_saml_port: Optional[pulumi.Input[int]] = None,
                 auth_keepalive: Optional[pulumi.Input[str]] = None,
                 auth_session_limit: Optional[pulumi.Input[str]] = None,
                 auto_auth_extension_device: Optional[pulumi.Input[str]] = None,
                 autorun_log_fsck: Optional[pulumi.Input[str]] = None,
                 av_affinity: Optional[pulumi.Input[str]] = None,
                 av_failopen: Optional[pulumi.Input[str]] = None,
                 av_failopen_session: Optional[pulumi.Input[str]] = None,
                 batch_cmdb: Optional[pulumi.Input[str]] = None,
                 block_session_timer: Optional[pulumi.Input[int]] = None,
                 br_fdb_max_entry: Optional[pulumi.Input[int]] = None,
                 cert_chain_max: Optional[pulumi.Input[int]] = None,
                 cfg_revert_timeout: Optional[pulumi.Input[int]] = None,
                 cfg_save: Optional[pulumi.Input[str]] = None,
                 check_protocol_header: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 cli_audit_log: Optional[pulumi.Input[str]] = None,
                 cloud_communication: Optional[pulumi.Input[str]] = None,
                 clt_cert_req: Optional[pulumi.Input[str]] = None,
                 cmdbsvr_affinity: Optional[pulumi.Input[str]] = None,
                 compliance_check: Optional[pulumi.Input[str]] = None,
                 compliance_check_time: Optional[pulumi.Input[str]] = None,
                 cpu_use_threshold: Optional[pulumi.Input[int]] = None,
                 csr_ca_attribute: Optional[pulumi.Input[str]] = None,
                 daily_restart: Optional[pulumi.Input[str]] = None,
                 default_service_source_port: Optional[pulumi.Input[str]] = None,
                 device_identification_active_scan_delay: Optional[pulumi.Input[int]] = None,
                 device_idle_timeout: Optional[pulumi.Input[int]] = None,
                 dh_params: Optional[pulumi.Input[str]] = None,
                 dnsproxy_worker_count: Optional[pulumi.Input[int]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 early_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 edit_vdom_prompt: Optional[pulumi.Input[str]] = None,
                 endpoint_control_fds_access: Optional[pulumi.Input[str]] = None,
                 endpoint_control_portal_port: Optional[pulumi.Input[int]] = None,
                 extender_controller_reserved_network: Optional[pulumi.Input[str]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 faz_disk_buffer_size: Optional[pulumi.Input[int]] = None,
                 fds_statistics: Optional[pulumi.Input[str]] = None,
                 fds_statistics_period: Optional[pulumi.Input[int]] = None,
                 fec_port: Optional[pulumi.Input[int]] = None,
                 fgd_alert_subscription: Optional[pulumi.Input[str]] = None,
                 forticonverter_config_upload: Optional[pulumi.Input[str]] = None,
                 forticonverter_integration: Optional[pulumi.Input[str]] = None,
                 fortiextender: Optional[pulumi.Input[str]] = None,
                 fortiextender_data_port: Optional[pulumi.Input[int]] = None,
                 fortiextender_discovery_lockdown: Optional[pulumi.Input[str]] = None,
                 fortiextender_provision_on_authorization: Optional[pulumi.Input[str]] = None,
                 fortiextender_vlan_mode: Optional[pulumi.Input[str]] = None,
                 fortiipam_integration: Optional[pulumi.Input[str]] = None,
                 fortiservice_port: Optional[pulumi.Input[int]] = None,
                 fortitoken_cloud: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gui_allow_default_hostname: Optional[pulumi.Input[str]] = None,
                 gui_allow_incompatible_fabric_fgt: Optional[pulumi.Input[str]] = None,
                 gui_app_detection_sdwan: Optional[pulumi.Input[str]] = None,
                 gui_cdn_domain_override: Optional[pulumi.Input[str]] = None,
                 gui_cdn_usage: Optional[pulumi.Input[str]] = None,
                 gui_certificates: Optional[pulumi.Input[str]] = None,
                 gui_custom_language: Optional[pulumi.Input[str]] = None,
                 gui_date_format: Optional[pulumi.Input[str]] = None,
                 gui_date_time_source: Optional[pulumi.Input[str]] = None,
                 gui_device_latitude: Optional[pulumi.Input[str]] = None,
                 gui_device_longitude: Optional[pulumi.Input[str]] = None,
                 gui_display_hostname: Optional[pulumi.Input[str]] = None,
                 gui_firmware_upgrade_setup_warning: Optional[pulumi.Input[str]] = None,
                 gui_firmware_upgrade_warning: Optional[pulumi.Input[str]] = None,
                 gui_forticare_registration_setup_warning: Optional[pulumi.Input[str]] = None,
                 gui_fortigate_cloud_sandbox: Optional[pulumi.Input[str]] = None,
                 gui_fortiguard_resource_fetch: Optional[pulumi.Input[str]] = None,
                 gui_fortisandbox_cloud: Optional[pulumi.Input[str]] = None,
                 gui_ipv6: Optional[pulumi.Input[str]] = None,
                 gui_lines_per_page: Optional[pulumi.Input[int]] = None,
                 gui_local_out: Optional[pulumi.Input[str]] = None,
                 gui_replacement_message_groups: Optional[pulumi.Input[str]] = None,
                 gui_rest_api_cache: Optional[pulumi.Input[str]] = None,
                 gui_theme: Optional[pulumi.Input[str]] = None,
                 gui_wireless_opensecurity: Optional[pulumi.Input[str]] = None,
                 gui_workflow_management: Optional[pulumi.Input[str]] = None,
                 ha_affinity: Optional[pulumi.Input[str]] = None,
                 honor_df: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 igmp_state_limit: Optional[pulumi.Input[int]] = None,
                 ike_embryonic_limit: Optional[pulumi.Input[int]] = None,
                 interface_subnet_usage: Optional[pulumi.Input[str]] = None,
                 internet_service_database: Optional[pulumi.Input[str]] = None,
                 internet_service_download_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemGlobalInternetServiceDownloadListArgs']]]]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 ip_fragment_mem_thresholds: Optional[pulumi.Input[int]] = None,
                 ip_src_port_range: Optional[pulumi.Input[str]] = None,
                 ips_affinity: Optional[pulumi.Input[str]] = None,
                 ipsec_asic_offload: Optional[pulumi.Input[str]] = None,
                 ipsec_ha_seqjump_rate: Optional[pulumi.Input[int]] = None,
                 ipsec_hmac_offload: Optional[pulumi.Input[str]] = None,
                 ipsec_round_robin: Optional[pulumi.Input[str]] = None,
                 ipsec_soft_dec_async: Optional[pulumi.Input[str]] = None,
                 ipv6_accept_dad: Optional[pulumi.Input[int]] = None,
                 ipv6_allow_anycast_probe: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_local_in_slient_drop: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_multicast_probe: Optional[pulumi.Input[str]] = None,
                 ipv6_allow_traffic_redirect: Optional[pulumi.Input[str]] = None,
                 irq_time_accounting: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 ldapconntimeout: Optional[pulumi.Input[int]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 log_single_cpu_high: Optional[pulumi.Input[str]] = None,
                 log_ssl_connection: Optional[pulumi.Input[str]] = None,
                 log_uuid_address: Optional[pulumi.Input[str]] = None,
                 log_uuid_policy: Optional[pulumi.Input[str]] = None,
                 login_timestamp: Optional[pulumi.Input[str]] = None,
                 long_vdom_name: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 management_port_use_admin_sport: Optional[pulumi.Input[str]] = None,
                 management_vdom: Optional[pulumi.Input[str]] = None,
                 max_dlpstat_memory: Optional[pulumi.Input[int]] = None,
                 max_route_cache_size: Optional[pulumi.Input[int]] = None,
                 mc_ttl_notchange: Optional[pulumi.Input[str]] = None,
                 memory_use_threshold_extreme: Optional[pulumi.Input[int]] = None,
                 memory_use_threshold_green: Optional[pulumi.Input[int]] = None,
                 memory_use_threshold_red: Optional[pulumi.Input[int]] = None,
                 miglog_affinity: Optional[pulumi.Input[str]] = None,
                 miglogd_children: Optional[pulumi.Input[int]] = None,
                 multi_factor_authentication: Optional[pulumi.Input[str]] = None,
                 multicast_forward: Optional[pulumi.Input[str]] = None,
                 ndp_max_entry: Optional[pulumi.Input[int]] = None,
                 per_user_bal: Optional[pulumi.Input[str]] = None,
                 per_user_bwl: Optional[pulumi.Input[str]] = None,
                 pmtu_discovery: Optional[pulumi.Input[str]] = None,
                 policy_auth_concurrent: Optional[pulumi.Input[int]] = None,
                 post_login_banner: Optional[pulumi.Input[str]] = None,
                 pre_login_banner: Optional[pulumi.Input[str]] = None,
                 private_data_encryption: Optional[pulumi.Input[str]] = None,
                 proxy_auth_lifetime: Optional[pulumi.Input[str]] = None,
                 proxy_auth_lifetime_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_auth_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_cert_use_mgmt_vdom: Optional[pulumi.Input[str]] = None,
                 proxy_cipher_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_keep_alive_mode: Optional[pulumi.Input[str]] = None,
                 proxy_kxp_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 proxy_re_authentication_mode: Optional[pulumi.Input[str]] = None,
                 proxy_re_authentication_time: Optional[pulumi.Input[int]] = None,
                 proxy_resource_mode: Optional[pulumi.Input[str]] = None,
                 proxy_worker_count: Optional[pulumi.Input[int]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 reboot_upon_config_restore: Optional[pulumi.Input[str]] = None,
                 refresh: Optional[pulumi.Input[int]] = None,
                 remoteauthtimeout: Optional[pulumi.Input[int]] = None,
                 reset_sessionless_tcp: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[str]] = None,
                 revision_backup_on_logout: Optional[pulumi.Input[str]] = None,
                 revision_image_auto_backup: Optional[pulumi.Input[str]] = None,
                 scanunit_count: Optional[pulumi.Input[int]] = None,
                 security_rating_result_submission: Optional[pulumi.Input[str]] = None,
                 security_rating_run_on_schedule: Optional[pulumi.Input[str]] = None,
                 send_pmtu_icmp: Optional[pulumi.Input[str]] = None,
                 sflowd_max_children_num: Optional[pulumi.Input[int]] = None,
                 snat_route_change: Optional[pulumi.Input[str]] = None,
                 special_file23_support: Optional[pulumi.Input[str]] = None,
                 speedtest_server: Optional[pulumi.Input[str]] = None,
                 split_port: Optional[pulumi.Input[str]] = None,
                 ssd_trim_date: Optional[pulumi.Input[int]] = None,
                 ssd_trim_freq: Optional[pulumi.Input[str]] = None,
                 ssd_trim_hour: Optional[pulumi.Input[int]] = None,
                 ssd_trim_min: Optional[pulumi.Input[int]] = None,
                 ssd_trim_weekday: Optional[pulumi.Input[str]] = None,
                 ssh_cbc_cipher: Optional[pulumi.Input[str]] = None,
                 ssh_enc_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hmac_md5: Optional[pulumi.Input[str]] = None,
                 ssh_hostkey_algo: Optional[pulumi.Input[str]] = None,
                 ssh_kex_algo: Optional[pulumi.Input[str]] = None,
                 ssh_kex_sha1: Optional[pulumi.Input[str]] = None,
                 ssh_mac_algo: Optional[pulumi.Input[str]] = None,
                 ssh_mac_weak: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 ssl_static_key_ciphers: Optional[pulumi.Input[str]] = None,
                 sslvpn_cipher_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 sslvpn_ems_sn_check: Optional[pulumi.Input[str]] = None,
                 sslvpn_kxp_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 sslvpn_max_worker_count: Optional[pulumi.Input[int]] = None,
                 sslvpn_plugin_version_check: Optional[pulumi.Input[str]] = None,
                 strict_dirty_session_check: Optional[pulumi.Input[str]] = None,
                 strong_crypto: Optional[pulumi.Input[str]] = None,
                 switch_controller: Optional[pulumi.Input[str]] = None,
                 switch_controller_reserved_network: Optional[pulumi.Input[str]] = None,
                 sys_perf_log_interval: Optional[pulumi.Input[int]] = None,
                 syslog_affinity: Optional[pulumi.Input[str]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_option: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 tftp: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 tp_mc_skip_policy: Optional[pulumi.Input[str]] = None,
                 traffic_priority: Optional[pulumi.Input[str]] = None,
                 traffic_priority_level: Optional[pulumi.Input[str]] = None,
                 two_factor_email_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_fac_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_ftk_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_ftm_expiry: Optional[pulumi.Input[int]] = None,
                 two_factor_sms_expiry: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 url_filter_affinity: Optional[pulumi.Input[str]] = None,
                 url_filter_count: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_devices: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_unified_mem: Optional[pulumi.Input[int]] = None,
                 user_device_store_max_users: Optional[pulumi.Input[int]] = None,
                 user_server_cert: Optional[pulumi.Input[str]] = None,
                 vdom_admin: Optional[pulumi.Input[str]] = None,
                 vdom_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vip_arp_range: Optional[pulumi.Input[str]] = None,
                 virtual_server_count: Optional[pulumi.Input[int]] = None,
                 virtual_server_hardware_acceleration: Optional[pulumi.Input[str]] = None,
                 virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
                 vpn_ems_sn_check: Optional[pulumi.Input[str]] = None,
                 wad_affinity: Optional[pulumi.Input[str]] = None,
                 wad_csvc_cs_count: Optional[pulumi.Input[int]] = None,
                 wad_csvc_db_count: Optional[pulumi.Input[int]] = None,
                 wad_memory_change_granularity: Optional[pulumi.Input[int]] = None,
                 wad_restart_end_time: Optional[pulumi.Input[str]] = None,
                 wad_restart_mode: Optional[pulumi.Input[str]] = None,
                 wad_restart_start_time: Optional[pulumi.Input[str]] = None,
                 wad_source_affinity: Optional[pulumi.Input[str]] = None,
                 wad_worker_count: Optional[pulumi.Input[int]] = None,
                 wifi_ca_certificate: Optional[pulumi.Input[str]] = None,
                 wifi_certificate: Optional[pulumi.Input[str]] = None,
                 wimax4g_usb: Optional[pulumi.Input[str]] = None,
                 wireless_controller: Optional[pulumi.Input[str]] = None,
                 wireless_controller_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemGlobalArgs.__new__(SystemGlobalArgs)

            __props__.__dict__["admin_concurrent"] = admin_concurrent
            __props__.__dict__["admin_console_timeout"] = admin_console_timeout
            __props__.__dict__["admin_forticloud_sso_default_profile"] = admin_forticloud_sso_default_profile
            __props__.__dict__["admin_forticloud_sso_login"] = admin_forticloud_sso_login
            __props__.__dict__["admin_host"] = admin_host
            __props__.__dict__["admin_hsts_max_age"] = admin_hsts_max_age
            __props__.__dict__["admin_https_pki_required"] = admin_https_pki_required
            __props__.__dict__["admin_https_redirect"] = admin_https_redirect
            __props__.__dict__["admin_https_ssl_banned_ciphers"] = admin_https_ssl_banned_ciphers
            __props__.__dict__["admin_https_ssl_ciphersuites"] = admin_https_ssl_ciphersuites
            __props__.__dict__["admin_https_ssl_versions"] = admin_https_ssl_versions
            __props__.__dict__["admin_lockout_duration"] = admin_lockout_duration
            __props__.__dict__["admin_lockout_threshold"] = admin_lockout_threshold
            __props__.__dict__["admin_login_max"] = admin_login_max
            __props__.__dict__["admin_maintainer"] = admin_maintainer
            __props__.__dict__["admin_port"] = admin_port
            __props__.__dict__["admin_restrict_local"] = admin_restrict_local
            __props__.__dict__["admin_scp"] = admin_scp
            __props__.__dict__["admin_server_cert"] = admin_server_cert
            __props__.__dict__["admin_sport"] = admin_sport
            __props__.__dict__["admin_ssh_grace_time"] = admin_ssh_grace_time
            __props__.__dict__["admin_ssh_password"] = admin_ssh_password
            __props__.__dict__["admin_ssh_port"] = admin_ssh_port
            __props__.__dict__["admin_ssh_v1"] = admin_ssh_v1
            __props__.__dict__["admin_telnet"] = admin_telnet
            __props__.__dict__["admin_telnet_port"] = admin_telnet_port
            __props__.__dict__["admintimeout"] = admintimeout
            __props__.__dict__["alias"] = alias
            __props__.__dict__["allow_traffic_redirect"] = allow_traffic_redirect
            __props__.__dict__["anti_replay"] = anti_replay
            __props__.__dict__["arp_max_entry"] = arp_max_entry
            __props__.__dict__["asymroute"] = asymroute
            __props__.__dict__["auth_cert"] = auth_cert
            __props__.__dict__["auth_http_port"] = auth_http_port
            __props__.__dict__["auth_https_port"] = auth_https_port
            __props__.__dict__["auth_ike_saml_port"] = auth_ike_saml_port
            __props__.__dict__["auth_keepalive"] = auth_keepalive
            __props__.__dict__["auth_session_limit"] = auth_session_limit
            __props__.__dict__["auto_auth_extension_device"] = auto_auth_extension_device
            __props__.__dict__["autorun_log_fsck"] = autorun_log_fsck
            __props__.__dict__["av_affinity"] = av_affinity
            __props__.__dict__["av_failopen"] = av_failopen
            __props__.__dict__["av_failopen_session"] = av_failopen_session
            __props__.__dict__["batch_cmdb"] = batch_cmdb
            __props__.__dict__["block_session_timer"] = block_session_timer
            __props__.__dict__["br_fdb_max_entry"] = br_fdb_max_entry
            __props__.__dict__["cert_chain_max"] = cert_chain_max
            __props__.__dict__["cfg_revert_timeout"] = cfg_revert_timeout
            __props__.__dict__["cfg_save"] = cfg_save
            __props__.__dict__["check_protocol_header"] = check_protocol_header
            __props__.__dict__["check_reset_range"] = check_reset_range
            __props__.__dict__["cli_audit_log"] = cli_audit_log
            __props__.__dict__["cloud_communication"] = cloud_communication
            __props__.__dict__["clt_cert_req"] = clt_cert_req
            __props__.__dict__["cmdbsvr_affinity"] = cmdbsvr_affinity
            __props__.__dict__["compliance_check"] = compliance_check
            __props__.__dict__["compliance_check_time"] = compliance_check_time
            __props__.__dict__["cpu_use_threshold"] = cpu_use_threshold
            __props__.__dict__["csr_ca_attribute"] = csr_ca_attribute
            __props__.__dict__["daily_restart"] = daily_restart
            __props__.__dict__["default_service_source_port"] = default_service_source_port
            __props__.__dict__["device_identification_active_scan_delay"] = device_identification_active_scan_delay
            __props__.__dict__["device_idle_timeout"] = device_idle_timeout
            __props__.__dict__["dh_params"] = dh_params
            __props__.__dict__["dnsproxy_worker_count"] = dnsproxy_worker_count
            __props__.__dict__["dst"] = dst
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["early_tcp_npu_session"] = early_tcp_npu_session
            __props__.__dict__["edit_vdom_prompt"] = edit_vdom_prompt
            __props__.__dict__["endpoint_control_fds_access"] = endpoint_control_fds_access
            __props__.__dict__["endpoint_control_portal_port"] = endpoint_control_portal_port
            __props__.__dict__["extender_controller_reserved_network"] = extender_controller_reserved_network
            __props__.__dict__["failtime"] = failtime
            __props__.__dict__["faz_disk_buffer_size"] = faz_disk_buffer_size
            __props__.__dict__["fds_statistics"] = fds_statistics
            __props__.__dict__["fds_statistics_period"] = fds_statistics_period
            __props__.__dict__["fec_port"] = fec_port
            __props__.__dict__["fgd_alert_subscription"] = fgd_alert_subscription
            __props__.__dict__["forticonverter_config_upload"] = forticonverter_config_upload
            __props__.__dict__["forticonverter_integration"] = forticonverter_integration
            __props__.__dict__["fortiextender"] = fortiextender
            __props__.__dict__["fortiextender_data_port"] = fortiextender_data_port
            __props__.__dict__["fortiextender_discovery_lockdown"] = fortiextender_discovery_lockdown
            __props__.__dict__["fortiextender_provision_on_authorization"] = fortiextender_provision_on_authorization
            __props__.__dict__["fortiextender_vlan_mode"] = fortiextender_vlan_mode
            __props__.__dict__["fortiipam_integration"] = fortiipam_integration
            __props__.__dict__["fortiservice_port"] = fortiservice_port
            __props__.__dict__["fortitoken_cloud"] = fortitoken_cloud
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["gui_allow_default_hostname"] = gui_allow_default_hostname
            __props__.__dict__["gui_allow_incompatible_fabric_fgt"] = gui_allow_incompatible_fabric_fgt
            __props__.__dict__["gui_app_detection_sdwan"] = gui_app_detection_sdwan
            __props__.__dict__["gui_cdn_domain_override"] = gui_cdn_domain_override
            __props__.__dict__["gui_cdn_usage"] = gui_cdn_usage
            __props__.__dict__["gui_certificates"] = gui_certificates
            __props__.__dict__["gui_custom_language"] = gui_custom_language
            __props__.__dict__["gui_date_format"] = gui_date_format
            __props__.__dict__["gui_date_time_source"] = gui_date_time_source
            __props__.__dict__["gui_device_latitude"] = gui_device_latitude
            __props__.__dict__["gui_device_longitude"] = gui_device_longitude
            __props__.__dict__["gui_display_hostname"] = gui_display_hostname
            __props__.__dict__["gui_firmware_upgrade_setup_warning"] = gui_firmware_upgrade_setup_warning
            __props__.__dict__["gui_firmware_upgrade_warning"] = gui_firmware_upgrade_warning
            __props__.__dict__["gui_forticare_registration_setup_warning"] = gui_forticare_registration_setup_warning
            __props__.__dict__["gui_fortigate_cloud_sandbox"] = gui_fortigate_cloud_sandbox
            __props__.__dict__["gui_fortiguard_resource_fetch"] = gui_fortiguard_resource_fetch
            __props__.__dict__["gui_fortisandbox_cloud"] = gui_fortisandbox_cloud
            __props__.__dict__["gui_ipv6"] = gui_ipv6
            __props__.__dict__["gui_lines_per_page"] = gui_lines_per_page
            __props__.__dict__["gui_local_out"] = gui_local_out
            __props__.__dict__["gui_replacement_message_groups"] = gui_replacement_message_groups
            __props__.__dict__["gui_rest_api_cache"] = gui_rest_api_cache
            __props__.__dict__["gui_theme"] = gui_theme
            __props__.__dict__["gui_wireless_opensecurity"] = gui_wireless_opensecurity
            __props__.__dict__["gui_workflow_management"] = gui_workflow_management
            __props__.__dict__["ha_affinity"] = ha_affinity
            __props__.__dict__["honor_df"] = honor_df
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["igmp_state_limit"] = igmp_state_limit
            __props__.__dict__["ike_embryonic_limit"] = ike_embryonic_limit
            __props__.__dict__["interface_subnet_usage"] = interface_subnet_usage
            __props__.__dict__["internet_service_database"] = internet_service_database
            __props__.__dict__["internet_service_download_lists"] = internet_service_download_lists
            __props__.__dict__["interval"] = interval
            __props__.__dict__["ip_fragment_mem_thresholds"] = ip_fragment_mem_thresholds
            __props__.__dict__["ip_src_port_range"] = ip_src_port_range
            __props__.__dict__["ips_affinity"] = ips_affinity
            __props__.__dict__["ipsec_asic_offload"] = ipsec_asic_offload
            __props__.__dict__["ipsec_ha_seqjump_rate"] = ipsec_ha_seqjump_rate
            __props__.__dict__["ipsec_hmac_offload"] = ipsec_hmac_offload
            __props__.__dict__["ipsec_round_robin"] = ipsec_round_robin
            __props__.__dict__["ipsec_soft_dec_async"] = ipsec_soft_dec_async
            __props__.__dict__["ipv6_accept_dad"] = ipv6_accept_dad
            __props__.__dict__["ipv6_allow_anycast_probe"] = ipv6_allow_anycast_probe
            __props__.__dict__["ipv6_allow_local_in_slient_drop"] = ipv6_allow_local_in_slient_drop
            __props__.__dict__["ipv6_allow_multicast_probe"] = ipv6_allow_multicast_probe
            __props__.__dict__["ipv6_allow_traffic_redirect"] = ipv6_allow_traffic_redirect
            __props__.__dict__["irq_time_accounting"] = irq_time_accounting
            __props__.__dict__["language"] = language
            __props__.__dict__["ldapconntimeout"] = ldapconntimeout
            __props__.__dict__["lldp_reception"] = lldp_reception
            __props__.__dict__["lldp_transmission"] = lldp_transmission
            __props__.__dict__["log_single_cpu_high"] = log_single_cpu_high
            __props__.__dict__["log_ssl_connection"] = log_ssl_connection
            __props__.__dict__["log_uuid_address"] = log_uuid_address
            __props__.__dict__["log_uuid_policy"] = log_uuid_policy
            __props__.__dict__["login_timestamp"] = login_timestamp
            __props__.__dict__["long_vdom_name"] = long_vdom_name
            __props__.__dict__["management_ip"] = management_ip
            __props__.__dict__["management_port"] = management_port
            __props__.__dict__["management_port_use_admin_sport"] = management_port_use_admin_sport
            __props__.__dict__["management_vdom"] = management_vdom
            __props__.__dict__["max_dlpstat_memory"] = max_dlpstat_memory
            __props__.__dict__["max_route_cache_size"] = max_route_cache_size
            __props__.__dict__["mc_ttl_notchange"] = mc_ttl_notchange
            __props__.__dict__["memory_use_threshold_extreme"] = memory_use_threshold_extreme
            __props__.__dict__["memory_use_threshold_green"] = memory_use_threshold_green
            __props__.__dict__["memory_use_threshold_red"] = memory_use_threshold_red
            __props__.__dict__["miglog_affinity"] = miglog_affinity
            __props__.__dict__["miglogd_children"] = miglogd_children
            __props__.__dict__["multi_factor_authentication"] = multi_factor_authentication
            __props__.__dict__["multicast_forward"] = multicast_forward
            __props__.__dict__["ndp_max_entry"] = ndp_max_entry
            __props__.__dict__["per_user_bal"] = per_user_bal
            __props__.__dict__["per_user_bwl"] = per_user_bwl
            __props__.__dict__["pmtu_discovery"] = pmtu_discovery
            __props__.__dict__["policy_auth_concurrent"] = policy_auth_concurrent
            __props__.__dict__["post_login_banner"] = post_login_banner
            __props__.__dict__["pre_login_banner"] = pre_login_banner
            __props__.__dict__["private_data_encryption"] = private_data_encryption
            __props__.__dict__["proxy_auth_lifetime"] = proxy_auth_lifetime
            __props__.__dict__["proxy_auth_lifetime_timeout"] = proxy_auth_lifetime_timeout
            __props__.__dict__["proxy_auth_timeout"] = proxy_auth_timeout
            __props__.__dict__["proxy_cert_use_mgmt_vdom"] = proxy_cert_use_mgmt_vdom
            __props__.__dict__["proxy_cipher_hardware_acceleration"] = proxy_cipher_hardware_acceleration
            __props__.__dict__["proxy_hardware_acceleration"] = proxy_hardware_acceleration
            __props__.__dict__["proxy_keep_alive_mode"] = proxy_keep_alive_mode
            __props__.__dict__["proxy_kxp_hardware_acceleration"] = proxy_kxp_hardware_acceleration
            __props__.__dict__["proxy_re_authentication_mode"] = proxy_re_authentication_mode
            __props__.__dict__["proxy_re_authentication_time"] = proxy_re_authentication_time
            __props__.__dict__["proxy_resource_mode"] = proxy_resource_mode
            __props__.__dict__["proxy_worker_count"] = proxy_worker_count
            __props__.__dict__["radius_port"] = radius_port
            __props__.__dict__["reboot_upon_config_restore"] = reboot_upon_config_restore
            __props__.__dict__["refresh"] = refresh
            __props__.__dict__["remoteauthtimeout"] = remoteauthtimeout
            __props__.__dict__["reset_sessionless_tcp"] = reset_sessionless_tcp
            __props__.__dict__["restart_time"] = restart_time
            __props__.__dict__["revision_backup_on_logout"] = revision_backup_on_logout
            __props__.__dict__["revision_image_auto_backup"] = revision_image_auto_backup
            __props__.__dict__["scanunit_count"] = scanunit_count
            __props__.__dict__["security_rating_result_submission"] = security_rating_result_submission
            __props__.__dict__["security_rating_run_on_schedule"] = security_rating_run_on_schedule
            __props__.__dict__["send_pmtu_icmp"] = send_pmtu_icmp
            __props__.__dict__["sflowd_max_children_num"] = sflowd_max_children_num
            __props__.__dict__["snat_route_change"] = snat_route_change
            __props__.__dict__["special_file23_support"] = special_file23_support
            __props__.__dict__["speedtest_server"] = speedtest_server
            __props__.__dict__["split_port"] = split_port
            __props__.__dict__["ssd_trim_date"] = ssd_trim_date
            __props__.__dict__["ssd_trim_freq"] = ssd_trim_freq
            __props__.__dict__["ssd_trim_hour"] = ssd_trim_hour
            __props__.__dict__["ssd_trim_min"] = ssd_trim_min
            __props__.__dict__["ssd_trim_weekday"] = ssd_trim_weekday
            __props__.__dict__["ssh_cbc_cipher"] = ssh_cbc_cipher
            __props__.__dict__["ssh_enc_algo"] = ssh_enc_algo
            __props__.__dict__["ssh_hmac_md5"] = ssh_hmac_md5
            __props__.__dict__["ssh_hostkey_algo"] = ssh_hostkey_algo
            __props__.__dict__["ssh_kex_algo"] = ssh_kex_algo
            __props__.__dict__["ssh_kex_sha1"] = ssh_kex_sha1
            __props__.__dict__["ssh_mac_algo"] = ssh_mac_algo
            __props__.__dict__["ssh_mac_weak"] = ssh_mac_weak
            __props__.__dict__["ssl_min_proto_version"] = ssl_min_proto_version
            __props__.__dict__["ssl_static_key_ciphers"] = ssl_static_key_ciphers
            __props__.__dict__["sslvpn_cipher_hardware_acceleration"] = sslvpn_cipher_hardware_acceleration
            __props__.__dict__["sslvpn_ems_sn_check"] = sslvpn_ems_sn_check
            __props__.__dict__["sslvpn_kxp_hardware_acceleration"] = sslvpn_kxp_hardware_acceleration
            __props__.__dict__["sslvpn_max_worker_count"] = sslvpn_max_worker_count
            __props__.__dict__["sslvpn_plugin_version_check"] = sslvpn_plugin_version_check
            __props__.__dict__["strict_dirty_session_check"] = strict_dirty_session_check
            __props__.__dict__["strong_crypto"] = strong_crypto
            __props__.__dict__["switch_controller"] = switch_controller
            __props__.__dict__["switch_controller_reserved_network"] = switch_controller_reserved_network
            __props__.__dict__["sys_perf_log_interval"] = sys_perf_log_interval
            __props__.__dict__["syslog_affinity"] = syslog_affinity
            __props__.__dict__["tcp_halfclose_timer"] = tcp_halfclose_timer
            __props__.__dict__["tcp_halfopen_timer"] = tcp_halfopen_timer
            __props__.__dict__["tcp_option"] = tcp_option
            __props__.__dict__["tcp_rst_timer"] = tcp_rst_timer
            __props__.__dict__["tcp_timewait_timer"] = tcp_timewait_timer
            __props__.__dict__["tftp"] = tftp
            __props__.__dict__["timezone"] = timezone
            __props__.__dict__["tp_mc_skip_policy"] = tp_mc_skip_policy
            __props__.__dict__["traffic_priority"] = traffic_priority
            __props__.__dict__["traffic_priority_level"] = traffic_priority_level
            __props__.__dict__["two_factor_email_expiry"] = two_factor_email_expiry
            __props__.__dict__["two_factor_fac_expiry"] = two_factor_fac_expiry
            __props__.__dict__["two_factor_ftk_expiry"] = two_factor_ftk_expiry
            __props__.__dict__["two_factor_ftm_expiry"] = two_factor_ftm_expiry
            __props__.__dict__["two_factor_sms_expiry"] = two_factor_sms_expiry
            __props__.__dict__["udp_idle_timer"] = udp_idle_timer
            __props__.__dict__["url_filter_affinity"] = url_filter_affinity
            __props__.__dict__["url_filter_count"] = url_filter_count
            __props__.__dict__["user_device_store_max_devices"] = user_device_store_max_devices
            __props__.__dict__["user_device_store_max_unified_mem"] = user_device_store_max_unified_mem
            __props__.__dict__["user_device_store_max_users"] = user_device_store_max_users
            __props__.__dict__["user_server_cert"] = user_server_cert
            __props__.__dict__["vdom_admin"] = vdom_admin
            __props__.__dict__["vdom_mode"] = vdom_mode
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vip_arp_range"] = vip_arp_range
            __props__.__dict__["virtual_server_count"] = virtual_server_count
            __props__.__dict__["virtual_server_hardware_acceleration"] = virtual_server_hardware_acceleration
            __props__.__dict__["virtual_switch_vlan"] = virtual_switch_vlan
            __props__.__dict__["vpn_ems_sn_check"] = vpn_ems_sn_check
            __props__.__dict__["wad_affinity"] = wad_affinity
            __props__.__dict__["wad_csvc_cs_count"] = wad_csvc_cs_count
            __props__.__dict__["wad_csvc_db_count"] = wad_csvc_db_count
            __props__.__dict__["wad_memory_change_granularity"] = wad_memory_change_granularity
            __props__.__dict__["wad_restart_end_time"] = wad_restart_end_time
            __props__.__dict__["wad_restart_mode"] = wad_restart_mode
            __props__.__dict__["wad_restart_start_time"] = wad_restart_start_time
            __props__.__dict__["wad_source_affinity"] = wad_source_affinity
            __props__.__dict__["wad_worker_count"] = wad_worker_count
            __props__.__dict__["wifi_ca_certificate"] = wifi_ca_certificate
            __props__.__dict__["wifi_certificate"] = wifi_certificate
            __props__.__dict__["wimax4g_usb"] = wimax4g_usb
            __props__.__dict__["wireless_controller"] = wireless_controller
            __props__.__dict__["wireless_controller_port"] = wireless_controller_port
        super(SystemGlobal, __self__).__init__(
            'fortios:index/systemGlobal:SystemGlobal',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_concurrent: Optional[pulumi.Input[str]] = None,
            admin_console_timeout: Optional[pulumi.Input[int]] = None,
            admin_forticloud_sso_default_profile: Optional[pulumi.Input[str]] = None,
            admin_forticloud_sso_login: Optional[pulumi.Input[str]] = None,
            admin_host: Optional[pulumi.Input[str]] = None,
            admin_hsts_max_age: Optional[pulumi.Input[int]] = None,
            admin_https_pki_required: Optional[pulumi.Input[str]] = None,
            admin_https_redirect: Optional[pulumi.Input[str]] = None,
            admin_https_ssl_banned_ciphers: Optional[pulumi.Input[str]] = None,
            admin_https_ssl_ciphersuites: Optional[pulumi.Input[str]] = None,
            admin_https_ssl_versions: Optional[pulumi.Input[str]] = None,
            admin_lockout_duration: Optional[pulumi.Input[int]] = None,
            admin_lockout_threshold: Optional[pulumi.Input[int]] = None,
            admin_login_max: Optional[pulumi.Input[int]] = None,
            admin_maintainer: Optional[pulumi.Input[str]] = None,
            admin_port: Optional[pulumi.Input[int]] = None,
            admin_restrict_local: Optional[pulumi.Input[str]] = None,
            admin_scp: Optional[pulumi.Input[str]] = None,
            admin_server_cert: Optional[pulumi.Input[str]] = None,
            admin_sport: Optional[pulumi.Input[int]] = None,
            admin_ssh_grace_time: Optional[pulumi.Input[int]] = None,
            admin_ssh_password: Optional[pulumi.Input[str]] = None,
            admin_ssh_port: Optional[pulumi.Input[int]] = None,
            admin_ssh_v1: Optional[pulumi.Input[str]] = None,
            admin_telnet: Optional[pulumi.Input[str]] = None,
            admin_telnet_port: Optional[pulumi.Input[int]] = None,
            admintimeout: Optional[pulumi.Input[int]] = None,
            alias: Optional[pulumi.Input[str]] = None,
            allow_traffic_redirect: Optional[pulumi.Input[str]] = None,
            anti_replay: Optional[pulumi.Input[str]] = None,
            arp_max_entry: Optional[pulumi.Input[int]] = None,
            asymroute: Optional[pulumi.Input[str]] = None,
            auth_cert: Optional[pulumi.Input[str]] = None,
            auth_http_port: Optional[pulumi.Input[int]] = None,
            auth_https_port: Optional[pulumi.Input[int]] = None,
            auth_ike_saml_port: Optional[pulumi.Input[int]] = None,
            auth_keepalive: Optional[pulumi.Input[str]] = None,
            auth_session_limit: Optional[pulumi.Input[str]] = None,
            auto_auth_extension_device: Optional[pulumi.Input[str]] = None,
            autorun_log_fsck: Optional[pulumi.Input[str]] = None,
            av_affinity: Optional[pulumi.Input[str]] = None,
            av_failopen: Optional[pulumi.Input[str]] = None,
            av_failopen_session: Optional[pulumi.Input[str]] = None,
            batch_cmdb: Optional[pulumi.Input[str]] = None,
            block_session_timer: Optional[pulumi.Input[int]] = None,
            br_fdb_max_entry: Optional[pulumi.Input[int]] = None,
            cert_chain_max: Optional[pulumi.Input[int]] = None,
            cfg_revert_timeout: Optional[pulumi.Input[int]] = None,
            cfg_save: Optional[pulumi.Input[str]] = None,
            check_protocol_header: Optional[pulumi.Input[str]] = None,
            check_reset_range: Optional[pulumi.Input[str]] = None,
            cli_audit_log: Optional[pulumi.Input[str]] = None,
            cloud_communication: Optional[pulumi.Input[str]] = None,
            clt_cert_req: Optional[pulumi.Input[str]] = None,
            cmdbsvr_affinity: Optional[pulumi.Input[str]] = None,
            compliance_check: Optional[pulumi.Input[str]] = None,
            compliance_check_time: Optional[pulumi.Input[str]] = None,
            cpu_use_threshold: Optional[pulumi.Input[int]] = None,
            csr_ca_attribute: Optional[pulumi.Input[str]] = None,
            daily_restart: Optional[pulumi.Input[str]] = None,
            default_service_source_port: Optional[pulumi.Input[str]] = None,
            device_identification_active_scan_delay: Optional[pulumi.Input[int]] = None,
            device_idle_timeout: Optional[pulumi.Input[int]] = None,
            dh_params: Optional[pulumi.Input[str]] = None,
            dnsproxy_worker_count: Optional[pulumi.Input[int]] = None,
            dst: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            early_tcp_npu_session: Optional[pulumi.Input[str]] = None,
            edit_vdom_prompt: Optional[pulumi.Input[str]] = None,
            endpoint_control_fds_access: Optional[pulumi.Input[str]] = None,
            endpoint_control_portal_port: Optional[pulumi.Input[int]] = None,
            extender_controller_reserved_network: Optional[pulumi.Input[str]] = None,
            failtime: Optional[pulumi.Input[int]] = None,
            faz_disk_buffer_size: Optional[pulumi.Input[int]] = None,
            fds_statistics: Optional[pulumi.Input[str]] = None,
            fds_statistics_period: Optional[pulumi.Input[int]] = None,
            fec_port: Optional[pulumi.Input[int]] = None,
            fgd_alert_subscription: Optional[pulumi.Input[str]] = None,
            forticonverter_config_upload: Optional[pulumi.Input[str]] = None,
            forticonverter_integration: Optional[pulumi.Input[str]] = None,
            fortiextender: Optional[pulumi.Input[str]] = None,
            fortiextender_data_port: Optional[pulumi.Input[int]] = None,
            fortiextender_discovery_lockdown: Optional[pulumi.Input[str]] = None,
            fortiextender_provision_on_authorization: Optional[pulumi.Input[str]] = None,
            fortiextender_vlan_mode: Optional[pulumi.Input[str]] = None,
            fortiipam_integration: Optional[pulumi.Input[str]] = None,
            fortiservice_port: Optional[pulumi.Input[int]] = None,
            fortitoken_cloud: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            gui_allow_default_hostname: Optional[pulumi.Input[str]] = None,
            gui_allow_incompatible_fabric_fgt: Optional[pulumi.Input[str]] = None,
            gui_app_detection_sdwan: Optional[pulumi.Input[str]] = None,
            gui_cdn_domain_override: Optional[pulumi.Input[str]] = None,
            gui_cdn_usage: Optional[pulumi.Input[str]] = None,
            gui_certificates: Optional[pulumi.Input[str]] = None,
            gui_custom_language: Optional[pulumi.Input[str]] = None,
            gui_date_format: Optional[pulumi.Input[str]] = None,
            gui_date_time_source: Optional[pulumi.Input[str]] = None,
            gui_device_latitude: Optional[pulumi.Input[str]] = None,
            gui_device_longitude: Optional[pulumi.Input[str]] = None,
            gui_display_hostname: Optional[pulumi.Input[str]] = None,
            gui_firmware_upgrade_setup_warning: Optional[pulumi.Input[str]] = None,
            gui_firmware_upgrade_warning: Optional[pulumi.Input[str]] = None,
            gui_forticare_registration_setup_warning: Optional[pulumi.Input[str]] = None,
            gui_fortigate_cloud_sandbox: Optional[pulumi.Input[str]] = None,
            gui_fortiguard_resource_fetch: Optional[pulumi.Input[str]] = None,
            gui_fortisandbox_cloud: Optional[pulumi.Input[str]] = None,
            gui_ipv6: Optional[pulumi.Input[str]] = None,
            gui_lines_per_page: Optional[pulumi.Input[int]] = None,
            gui_local_out: Optional[pulumi.Input[str]] = None,
            gui_replacement_message_groups: Optional[pulumi.Input[str]] = None,
            gui_rest_api_cache: Optional[pulumi.Input[str]] = None,
            gui_theme: Optional[pulumi.Input[str]] = None,
            gui_wireless_opensecurity: Optional[pulumi.Input[str]] = None,
            gui_workflow_management: Optional[pulumi.Input[str]] = None,
            ha_affinity: Optional[pulumi.Input[str]] = None,
            honor_df: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            igmp_state_limit: Optional[pulumi.Input[int]] = None,
            ike_embryonic_limit: Optional[pulumi.Input[int]] = None,
            interface_subnet_usage: Optional[pulumi.Input[str]] = None,
            internet_service_database: Optional[pulumi.Input[str]] = None,
            internet_service_download_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemGlobalInternetServiceDownloadListArgs']]]]] = None,
            interval: Optional[pulumi.Input[int]] = None,
            ip_fragment_mem_thresholds: Optional[pulumi.Input[int]] = None,
            ip_src_port_range: Optional[pulumi.Input[str]] = None,
            ips_affinity: Optional[pulumi.Input[str]] = None,
            ipsec_asic_offload: Optional[pulumi.Input[str]] = None,
            ipsec_ha_seqjump_rate: Optional[pulumi.Input[int]] = None,
            ipsec_hmac_offload: Optional[pulumi.Input[str]] = None,
            ipsec_round_robin: Optional[pulumi.Input[str]] = None,
            ipsec_soft_dec_async: Optional[pulumi.Input[str]] = None,
            ipv6_accept_dad: Optional[pulumi.Input[int]] = None,
            ipv6_allow_anycast_probe: Optional[pulumi.Input[str]] = None,
            ipv6_allow_local_in_slient_drop: Optional[pulumi.Input[str]] = None,
            ipv6_allow_multicast_probe: Optional[pulumi.Input[str]] = None,
            ipv6_allow_traffic_redirect: Optional[pulumi.Input[str]] = None,
            irq_time_accounting: Optional[pulumi.Input[str]] = None,
            language: Optional[pulumi.Input[str]] = None,
            ldapconntimeout: Optional[pulumi.Input[int]] = None,
            lldp_reception: Optional[pulumi.Input[str]] = None,
            lldp_transmission: Optional[pulumi.Input[str]] = None,
            log_single_cpu_high: Optional[pulumi.Input[str]] = None,
            log_ssl_connection: Optional[pulumi.Input[str]] = None,
            log_uuid_address: Optional[pulumi.Input[str]] = None,
            log_uuid_policy: Optional[pulumi.Input[str]] = None,
            login_timestamp: Optional[pulumi.Input[str]] = None,
            long_vdom_name: Optional[pulumi.Input[str]] = None,
            management_ip: Optional[pulumi.Input[str]] = None,
            management_port: Optional[pulumi.Input[int]] = None,
            management_port_use_admin_sport: Optional[pulumi.Input[str]] = None,
            management_vdom: Optional[pulumi.Input[str]] = None,
            max_dlpstat_memory: Optional[pulumi.Input[int]] = None,
            max_route_cache_size: Optional[pulumi.Input[int]] = None,
            mc_ttl_notchange: Optional[pulumi.Input[str]] = None,
            memory_use_threshold_extreme: Optional[pulumi.Input[int]] = None,
            memory_use_threshold_green: Optional[pulumi.Input[int]] = None,
            memory_use_threshold_red: Optional[pulumi.Input[int]] = None,
            miglog_affinity: Optional[pulumi.Input[str]] = None,
            miglogd_children: Optional[pulumi.Input[int]] = None,
            multi_factor_authentication: Optional[pulumi.Input[str]] = None,
            multicast_forward: Optional[pulumi.Input[str]] = None,
            ndp_max_entry: Optional[pulumi.Input[int]] = None,
            per_user_bal: Optional[pulumi.Input[str]] = None,
            per_user_bwl: Optional[pulumi.Input[str]] = None,
            pmtu_discovery: Optional[pulumi.Input[str]] = None,
            policy_auth_concurrent: Optional[pulumi.Input[int]] = None,
            post_login_banner: Optional[pulumi.Input[str]] = None,
            pre_login_banner: Optional[pulumi.Input[str]] = None,
            private_data_encryption: Optional[pulumi.Input[str]] = None,
            proxy_auth_lifetime: Optional[pulumi.Input[str]] = None,
            proxy_auth_lifetime_timeout: Optional[pulumi.Input[int]] = None,
            proxy_auth_timeout: Optional[pulumi.Input[int]] = None,
            proxy_cert_use_mgmt_vdom: Optional[pulumi.Input[str]] = None,
            proxy_cipher_hardware_acceleration: Optional[pulumi.Input[str]] = None,
            proxy_hardware_acceleration: Optional[pulumi.Input[str]] = None,
            proxy_keep_alive_mode: Optional[pulumi.Input[str]] = None,
            proxy_kxp_hardware_acceleration: Optional[pulumi.Input[str]] = None,
            proxy_re_authentication_mode: Optional[pulumi.Input[str]] = None,
            proxy_re_authentication_time: Optional[pulumi.Input[int]] = None,
            proxy_resource_mode: Optional[pulumi.Input[str]] = None,
            proxy_worker_count: Optional[pulumi.Input[int]] = None,
            radius_port: Optional[pulumi.Input[int]] = None,
            reboot_upon_config_restore: Optional[pulumi.Input[str]] = None,
            refresh: Optional[pulumi.Input[int]] = None,
            remoteauthtimeout: Optional[pulumi.Input[int]] = None,
            reset_sessionless_tcp: Optional[pulumi.Input[str]] = None,
            restart_time: Optional[pulumi.Input[str]] = None,
            revision_backup_on_logout: Optional[pulumi.Input[str]] = None,
            revision_image_auto_backup: Optional[pulumi.Input[str]] = None,
            scanunit_count: Optional[pulumi.Input[int]] = None,
            security_rating_result_submission: Optional[pulumi.Input[str]] = None,
            security_rating_run_on_schedule: Optional[pulumi.Input[str]] = None,
            send_pmtu_icmp: Optional[pulumi.Input[str]] = None,
            sflowd_max_children_num: Optional[pulumi.Input[int]] = None,
            snat_route_change: Optional[pulumi.Input[str]] = None,
            special_file23_support: Optional[pulumi.Input[str]] = None,
            speedtest_server: Optional[pulumi.Input[str]] = None,
            split_port: Optional[pulumi.Input[str]] = None,
            ssd_trim_date: Optional[pulumi.Input[int]] = None,
            ssd_trim_freq: Optional[pulumi.Input[str]] = None,
            ssd_trim_hour: Optional[pulumi.Input[int]] = None,
            ssd_trim_min: Optional[pulumi.Input[int]] = None,
            ssd_trim_weekday: Optional[pulumi.Input[str]] = None,
            ssh_cbc_cipher: Optional[pulumi.Input[str]] = None,
            ssh_enc_algo: Optional[pulumi.Input[str]] = None,
            ssh_hmac_md5: Optional[pulumi.Input[str]] = None,
            ssh_hostkey_algo: Optional[pulumi.Input[str]] = None,
            ssh_kex_algo: Optional[pulumi.Input[str]] = None,
            ssh_kex_sha1: Optional[pulumi.Input[str]] = None,
            ssh_mac_algo: Optional[pulumi.Input[str]] = None,
            ssh_mac_weak: Optional[pulumi.Input[str]] = None,
            ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
            ssl_static_key_ciphers: Optional[pulumi.Input[str]] = None,
            sslvpn_cipher_hardware_acceleration: Optional[pulumi.Input[str]] = None,
            sslvpn_ems_sn_check: Optional[pulumi.Input[str]] = None,
            sslvpn_kxp_hardware_acceleration: Optional[pulumi.Input[str]] = None,
            sslvpn_max_worker_count: Optional[pulumi.Input[int]] = None,
            sslvpn_plugin_version_check: Optional[pulumi.Input[str]] = None,
            strict_dirty_session_check: Optional[pulumi.Input[str]] = None,
            strong_crypto: Optional[pulumi.Input[str]] = None,
            switch_controller: Optional[pulumi.Input[str]] = None,
            switch_controller_reserved_network: Optional[pulumi.Input[str]] = None,
            sys_perf_log_interval: Optional[pulumi.Input[int]] = None,
            syslog_affinity: Optional[pulumi.Input[str]] = None,
            tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
            tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
            tcp_option: Optional[pulumi.Input[str]] = None,
            tcp_rst_timer: Optional[pulumi.Input[int]] = None,
            tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
            tftp: Optional[pulumi.Input[str]] = None,
            timezone: Optional[pulumi.Input[str]] = None,
            tp_mc_skip_policy: Optional[pulumi.Input[str]] = None,
            traffic_priority: Optional[pulumi.Input[str]] = None,
            traffic_priority_level: Optional[pulumi.Input[str]] = None,
            two_factor_email_expiry: Optional[pulumi.Input[int]] = None,
            two_factor_fac_expiry: Optional[pulumi.Input[int]] = None,
            two_factor_ftk_expiry: Optional[pulumi.Input[int]] = None,
            two_factor_ftm_expiry: Optional[pulumi.Input[int]] = None,
            two_factor_sms_expiry: Optional[pulumi.Input[int]] = None,
            udp_idle_timer: Optional[pulumi.Input[int]] = None,
            url_filter_affinity: Optional[pulumi.Input[str]] = None,
            url_filter_count: Optional[pulumi.Input[int]] = None,
            user_device_store_max_devices: Optional[pulumi.Input[int]] = None,
            user_device_store_max_unified_mem: Optional[pulumi.Input[int]] = None,
            user_device_store_max_users: Optional[pulumi.Input[int]] = None,
            user_server_cert: Optional[pulumi.Input[str]] = None,
            vdom_admin: Optional[pulumi.Input[str]] = None,
            vdom_mode: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vip_arp_range: Optional[pulumi.Input[str]] = None,
            virtual_server_count: Optional[pulumi.Input[int]] = None,
            virtual_server_hardware_acceleration: Optional[pulumi.Input[str]] = None,
            virtual_switch_vlan: Optional[pulumi.Input[str]] = None,
            vpn_ems_sn_check: Optional[pulumi.Input[str]] = None,
            wad_affinity: Optional[pulumi.Input[str]] = None,
            wad_csvc_cs_count: Optional[pulumi.Input[int]] = None,
            wad_csvc_db_count: Optional[pulumi.Input[int]] = None,
            wad_memory_change_granularity: Optional[pulumi.Input[int]] = None,
            wad_restart_end_time: Optional[pulumi.Input[str]] = None,
            wad_restart_mode: Optional[pulumi.Input[str]] = None,
            wad_restart_start_time: Optional[pulumi.Input[str]] = None,
            wad_source_affinity: Optional[pulumi.Input[str]] = None,
            wad_worker_count: Optional[pulumi.Input[int]] = None,
            wifi_ca_certificate: Optional[pulumi.Input[str]] = None,
            wifi_certificate: Optional[pulumi.Input[str]] = None,
            wimax4g_usb: Optional[pulumi.Input[str]] = None,
            wireless_controller: Optional[pulumi.Input[str]] = None,
            wireless_controller_port: Optional[pulumi.Input[int]] = None) -> 'SystemGlobal':
        """
        Get an existing SystemGlobal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemGlobalState.__new__(_SystemGlobalState)

        __props__.__dict__["admin_concurrent"] = admin_concurrent
        __props__.__dict__["admin_console_timeout"] = admin_console_timeout
        __props__.__dict__["admin_forticloud_sso_default_profile"] = admin_forticloud_sso_default_profile
        __props__.__dict__["admin_forticloud_sso_login"] = admin_forticloud_sso_login
        __props__.__dict__["admin_host"] = admin_host
        __props__.__dict__["admin_hsts_max_age"] = admin_hsts_max_age
        __props__.__dict__["admin_https_pki_required"] = admin_https_pki_required
        __props__.__dict__["admin_https_redirect"] = admin_https_redirect
        __props__.__dict__["admin_https_ssl_banned_ciphers"] = admin_https_ssl_banned_ciphers
        __props__.__dict__["admin_https_ssl_ciphersuites"] = admin_https_ssl_ciphersuites
        __props__.__dict__["admin_https_ssl_versions"] = admin_https_ssl_versions
        __props__.__dict__["admin_lockout_duration"] = admin_lockout_duration
        __props__.__dict__["admin_lockout_threshold"] = admin_lockout_threshold
        __props__.__dict__["admin_login_max"] = admin_login_max
        __props__.__dict__["admin_maintainer"] = admin_maintainer
        __props__.__dict__["admin_port"] = admin_port
        __props__.__dict__["admin_restrict_local"] = admin_restrict_local
        __props__.__dict__["admin_scp"] = admin_scp
        __props__.__dict__["admin_server_cert"] = admin_server_cert
        __props__.__dict__["admin_sport"] = admin_sport
        __props__.__dict__["admin_ssh_grace_time"] = admin_ssh_grace_time
        __props__.__dict__["admin_ssh_password"] = admin_ssh_password
        __props__.__dict__["admin_ssh_port"] = admin_ssh_port
        __props__.__dict__["admin_ssh_v1"] = admin_ssh_v1
        __props__.__dict__["admin_telnet"] = admin_telnet
        __props__.__dict__["admin_telnet_port"] = admin_telnet_port
        __props__.__dict__["admintimeout"] = admintimeout
        __props__.__dict__["alias"] = alias
        __props__.__dict__["allow_traffic_redirect"] = allow_traffic_redirect
        __props__.__dict__["anti_replay"] = anti_replay
        __props__.__dict__["arp_max_entry"] = arp_max_entry
        __props__.__dict__["asymroute"] = asymroute
        __props__.__dict__["auth_cert"] = auth_cert
        __props__.__dict__["auth_http_port"] = auth_http_port
        __props__.__dict__["auth_https_port"] = auth_https_port
        __props__.__dict__["auth_ike_saml_port"] = auth_ike_saml_port
        __props__.__dict__["auth_keepalive"] = auth_keepalive
        __props__.__dict__["auth_session_limit"] = auth_session_limit
        __props__.__dict__["auto_auth_extension_device"] = auto_auth_extension_device
        __props__.__dict__["autorun_log_fsck"] = autorun_log_fsck
        __props__.__dict__["av_affinity"] = av_affinity
        __props__.__dict__["av_failopen"] = av_failopen
        __props__.__dict__["av_failopen_session"] = av_failopen_session
        __props__.__dict__["batch_cmdb"] = batch_cmdb
        __props__.__dict__["block_session_timer"] = block_session_timer
        __props__.__dict__["br_fdb_max_entry"] = br_fdb_max_entry
        __props__.__dict__["cert_chain_max"] = cert_chain_max
        __props__.__dict__["cfg_revert_timeout"] = cfg_revert_timeout
        __props__.__dict__["cfg_save"] = cfg_save
        __props__.__dict__["check_protocol_header"] = check_protocol_header
        __props__.__dict__["check_reset_range"] = check_reset_range
        __props__.__dict__["cli_audit_log"] = cli_audit_log
        __props__.__dict__["cloud_communication"] = cloud_communication
        __props__.__dict__["clt_cert_req"] = clt_cert_req
        __props__.__dict__["cmdbsvr_affinity"] = cmdbsvr_affinity
        __props__.__dict__["compliance_check"] = compliance_check
        __props__.__dict__["compliance_check_time"] = compliance_check_time
        __props__.__dict__["cpu_use_threshold"] = cpu_use_threshold
        __props__.__dict__["csr_ca_attribute"] = csr_ca_attribute
        __props__.__dict__["daily_restart"] = daily_restart
        __props__.__dict__["default_service_source_port"] = default_service_source_port
        __props__.__dict__["device_identification_active_scan_delay"] = device_identification_active_scan_delay
        __props__.__dict__["device_idle_timeout"] = device_idle_timeout
        __props__.__dict__["dh_params"] = dh_params
        __props__.__dict__["dnsproxy_worker_count"] = dnsproxy_worker_count
        __props__.__dict__["dst"] = dst
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["early_tcp_npu_session"] = early_tcp_npu_session
        __props__.__dict__["edit_vdom_prompt"] = edit_vdom_prompt
        __props__.__dict__["endpoint_control_fds_access"] = endpoint_control_fds_access
        __props__.__dict__["endpoint_control_portal_port"] = endpoint_control_portal_port
        __props__.__dict__["extender_controller_reserved_network"] = extender_controller_reserved_network
        __props__.__dict__["failtime"] = failtime
        __props__.__dict__["faz_disk_buffer_size"] = faz_disk_buffer_size
        __props__.__dict__["fds_statistics"] = fds_statistics
        __props__.__dict__["fds_statistics_period"] = fds_statistics_period
        __props__.__dict__["fec_port"] = fec_port
        __props__.__dict__["fgd_alert_subscription"] = fgd_alert_subscription
        __props__.__dict__["forticonverter_config_upload"] = forticonverter_config_upload
        __props__.__dict__["forticonverter_integration"] = forticonverter_integration
        __props__.__dict__["fortiextender"] = fortiextender
        __props__.__dict__["fortiextender_data_port"] = fortiextender_data_port
        __props__.__dict__["fortiextender_discovery_lockdown"] = fortiextender_discovery_lockdown
        __props__.__dict__["fortiextender_provision_on_authorization"] = fortiextender_provision_on_authorization
        __props__.__dict__["fortiextender_vlan_mode"] = fortiextender_vlan_mode
        __props__.__dict__["fortiipam_integration"] = fortiipam_integration
        __props__.__dict__["fortiservice_port"] = fortiservice_port
        __props__.__dict__["fortitoken_cloud"] = fortitoken_cloud
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["gui_allow_default_hostname"] = gui_allow_default_hostname
        __props__.__dict__["gui_allow_incompatible_fabric_fgt"] = gui_allow_incompatible_fabric_fgt
        __props__.__dict__["gui_app_detection_sdwan"] = gui_app_detection_sdwan
        __props__.__dict__["gui_cdn_domain_override"] = gui_cdn_domain_override
        __props__.__dict__["gui_cdn_usage"] = gui_cdn_usage
        __props__.__dict__["gui_certificates"] = gui_certificates
        __props__.__dict__["gui_custom_language"] = gui_custom_language
        __props__.__dict__["gui_date_format"] = gui_date_format
        __props__.__dict__["gui_date_time_source"] = gui_date_time_source
        __props__.__dict__["gui_device_latitude"] = gui_device_latitude
        __props__.__dict__["gui_device_longitude"] = gui_device_longitude
        __props__.__dict__["gui_display_hostname"] = gui_display_hostname
        __props__.__dict__["gui_firmware_upgrade_setup_warning"] = gui_firmware_upgrade_setup_warning
        __props__.__dict__["gui_firmware_upgrade_warning"] = gui_firmware_upgrade_warning
        __props__.__dict__["gui_forticare_registration_setup_warning"] = gui_forticare_registration_setup_warning
        __props__.__dict__["gui_fortigate_cloud_sandbox"] = gui_fortigate_cloud_sandbox
        __props__.__dict__["gui_fortiguard_resource_fetch"] = gui_fortiguard_resource_fetch
        __props__.__dict__["gui_fortisandbox_cloud"] = gui_fortisandbox_cloud
        __props__.__dict__["gui_ipv6"] = gui_ipv6
        __props__.__dict__["gui_lines_per_page"] = gui_lines_per_page
        __props__.__dict__["gui_local_out"] = gui_local_out
        __props__.__dict__["gui_replacement_message_groups"] = gui_replacement_message_groups
        __props__.__dict__["gui_rest_api_cache"] = gui_rest_api_cache
        __props__.__dict__["gui_theme"] = gui_theme
        __props__.__dict__["gui_wireless_opensecurity"] = gui_wireless_opensecurity
        __props__.__dict__["gui_workflow_management"] = gui_workflow_management
        __props__.__dict__["ha_affinity"] = ha_affinity
        __props__.__dict__["honor_df"] = honor_df
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["igmp_state_limit"] = igmp_state_limit
        __props__.__dict__["ike_embryonic_limit"] = ike_embryonic_limit
        __props__.__dict__["interface_subnet_usage"] = interface_subnet_usage
        __props__.__dict__["internet_service_database"] = internet_service_database
        __props__.__dict__["internet_service_download_lists"] = internet_service_download_lists
        __props__.__dict__["interval"] = interval
        __props__.__dict__["ip_fragment_mem_thresholds"] = ip_fragment_mem_thresholds
        __props__.__dict__["ip_src_port_range"] = ip_src_port_range
        __props__.__dict__["ips_affinity"] = ips_affinity
        __props__.__dict__["ipsec_asic_offload"] = ipsec_asic_offload
        __props__.__dict__["ipsec_ha_seqjump_rate"] = ipsec_ha_seqjump_rate
        __props__.__dict__["ipsec_hmac_offload"] = ipsec_hmac_offload
        __props__.__dict__["ipsec_round_robin"] = ipsec_round_robin
        __props__.__dict__["ipsec_soft_dec_async"] = ipsec_soft_dec_async
        __props__.__dict__["ipv6_accept_dad"] = ipv6_accept_dad
        __props__.__dict__["ipv6_allow_anycast_probe"] = ipv6_allow_anycast_probe
        __props__.__dict__["ipv6_allow_local_in_slient_drop"] = ipv6_allow_local_in_slient_drop
        __props__.__dict__["ipv6_allow_multicast_probe"] = ipv6_allow_multicast_probe
        __props__.__dict__["ipv6_allow_traffic_redirect"] = ipv6_allow_traffic_redirect
        __props__.__dict__["irq_time_accounting"] = irq_time_accounting
        __props__.__dict__["language"] = language
        __props__.__dict__["ldapconntimeout"] = ldapconntimeout
        __props__.__dict__["lldp_reception"] = lldp_reception
        __props__.__dict__["lldp_transmission"] = lldp_transmission
        __props__.__dict__["log_single_cpu_high"] = log_single_cpu_high
        __props__.__dict__["log_ssl_connection"] = log_ssl_connection
        __props__.__dict__["log_uuid_address"] = log_uuid_address
        __props__.__dict__["log_uuid_policy"] = log_uuid_policy
        __props__.__dict__["login_timestamp"] = login_timestamp
        __props__.__dict__["long_vdom_name"] = long_vdom_name
        __props__.__dict__["management_ip"] = management_ip
        __props__.__dict__["management_port"] = management_port
        __props__.__dict__["management_port_use_admin_sport"] = management_port_use_admin_sport
        __props__.__dict__["management_vdom"] = management_vdom
        __props__.__dict__["max_dlpstat_memory"] = max_dlpstat_memory
        __props__.__dict__["max_route_cache_size"] = max_route_cache_size
        __props__.__dict__["mc_ttl_notchange"] = mc_ttl_notchange
        __props__.__dict__["memory_use_threshold_extreme"] = memory_use_threshold_extreme
        __props__.__dict__["memory_use_threshold_green"] = memory_use_threshold_green
        __props__.__dict__["memory_use_threshold_red"] = memory_use_threshold_red
        __props__.__dict__["miglog_affinity"] = miglog_affinity
        __props__.__dict__["miglogd_children"] = miglogd_children
        __props__.__dict__["multi_factor_authentication"] = multi_factor_authentication
        __props__.__dict__["multicast_forward"] = multicast_forward
        __props__.__dict__["ndp_max_entry"] = ndp_max_entry
        __props__.__dict__["per_user_bal"] = per_user_bal
        __props__.__dict__["per_user_bwl"] = per_user_bwl
        __props__.__dict__["pmtu_discovery"] = pmtu_discovery
        __props__.__dict__["policy_auth_concurrent"] = policy_auth_concurrent
        __props__.__dict__["post_login_banner"] = post_login_banner
        __props__.__dict__["pre_login_banner"] = pre_login_banner
        __props__.__dict__["private_data_encryption"] = private_data_encryption
        __props__.__dict__["proxy_auth_lifetime"] = proxy_auth_lifetime
        __props__.__dict__["proxy_auth_lifetime_timeout"] = proxy_auth_lifetime_timeout
        __props__.__dict__["proxy_auth_timeout"] = proxy_auth_timeout
        __props__.__dict__["proxy_cert_use_mgmt_vdom"] = proxy_cert_use_mgmt_vdom
        __props__.__dict__["proxy_cipher_hardware_acceleration"] = proxy_cipher_hardware_acceleration
        __props__.__dict__["proxy_hardware_acceleration"] = proxy_hardware_acceleration
        __props__.__dict__["proxy_keep_alive_mode"] = proxy_keep_alive_mode
        __props__.__dict__["proxy_kxp_hardware_acceleration"] = proxy_kxp_hardware_acceleration
        __props__.__dict__["proxy_re_authentication_mode"] = proxy_re_authentication_mode
        __props__.__dict__["proxy_re_authentication_time"] = proxy_re_authentication_time
        __props__.__dict__["proxy_resource_mode"] = proxy_resource_mode
        __props__.__dict__["proxy_worker_count"] = proxy_worker_count
        __props__.__dict__["radius_port"] = radius_port
        __props__.__dict__["reboot_upon_config_restore"] = reboot_upon_config_restore
        __props__.__dict__["refresh"] = refresh
        __props__.__dict__["remoteauthtimeout"] = remoteauthtimeout
        __props__.__dict__["reset_sessionless_tcp"] = reset_sessionless_tcp
        __props__.__dict__["restart_time"] = restart_time
        __props__.__dict__["revision_backup_on_logout"] = revision_backup_on_logout
        __props__.__dict__["revision_image_auto_backup"] = revision_image_auto_backup
        __props__.__dict__["scanunit_count"] = scanunit_count
        __props__.__dict__["security_rating_result_submission"] = security_rating_result_submission
        __props__.__dict__["security_rating_run_on_schedule"] = security_rating_run_on_schedule
        __props__.__dict__["send_pmtu_icmp"] = send_pmtu_icmp
        __props__.__dict__["sflowd_max_children_num"] = sflowd_max_children_num
        __props__.__dict__["snat_route_change"] = snat_route_change
        __props__.__dict__["special_file23_support"] = special_file23_support
        __props__.__dict__["speedtest_server"] = speedtest_server
        __props__.__dict__["split_port"] = split_port
        __props__.__dict__["ssd_trim_date"] = ssd_trim_date
        __props__.__dict__["ssd_trim_freq"] = ssd_trim_freq
        __props__.__dict__["ssd_trim_hour"] = ssd_trim_hour
        __props__.__dict__["ssd_trim_min"] = ssd_trim_min
        __props__.__dict__["ssd_trim_weekday"] = ssd_trim_weekday
        __props__.__dict__["ssh_cbc_cipher"] = ssh_cbc_cipher
        __props__.__dict__["ssh_enc_algo"] = ssh_enc_algo
        __props__.__dict__["ssh_hmac_md5"] = ssh_hmac_md5
        __props__.__dict__["ssh_hostkey_algo"] = ssh_hostkey_algo
        __props__.__dict__["ssh_kex_algo"] = ssh_kex_algo
        __props__.__dict__["ssh_kex_sha1"] = ssh_kex_sha1
        __props__.__dict__["ssh_mac_algo"] = ssh_mac_algo
        __props__.__dict__["ssh_mac_weak"] = ssh_mac_weak
        __props__.__dict__["ssl_min_proto_version"] = ssl_min_proto_version
        __props__.__dict__["ssl_static_key_ciphers"] = ssl_static_key_ciphers
        __props__.__dict__["sslvpn_cipher_hardware_acceleration"] = sslvpn_cipher_hardware_acceleration
        __props__.__dict__["sslvpn_ems_sn_check"] = sslvpn_ems_sn_check
        __props__.__dict__["sslvpn_kxp_hardware_acceleration"] = sslvpn_kxp_hardware_acceleration
        __props__.__dict__["sslvpn_max_worker_count"] = sslvpn_max_worker_count
        __props__.__dict__["sslvpn_plugin_version_check"] = sslvpn_plugin_version_check
        __props__.__dict__["strict_dirty_session_check"] = strict_dirty_session_check
        __props__.__dict__["strong_crypto"] = strong_crypto
        __props__.__dict__["switch_controller"] = switch_controller
        __props__.__dict__["switch_controller_reserved_network"] = switch_controller_reserved_network
        __props__.__dict__["sys_perf_log_interval"] = sys_perf_log_interval
        __props__.__dict__["syslog_affinity"] = syslog_affinity
        __props__.__dict__["tcp_halfclose_timer"] = tcp_halfclose_timer
        __props__.__dict__["tcp_halfopen_timer"] = tcp_halfopen_timer
        __props__.__dict__["tcp_option"] = tcp_option
        __props__.__dict__["tcp_rst_timer"] = tcp_rst_timer
        __props__.__dict__["tcp_timewait_timer"] = tcp_timewait_timer
        __props__.__dict__["tftp"] = tftp
        __props__.__dict__["timezone"] = timezone
        __props__.__dict__["tp_mc_skip_policy"] = tp_mc_skip_policy
        __props__.__dict__["traffic_priority"] = traffic_priority
        __props__.__dict__["traffic_priority_level"] = traffic_priority_level
        __props__.__dict__["two_factor_email_expiry"] = two_factor_email_expiry
        __props__.__dict__["two_factor_fac_expiry"] = two_factor_fac_expiry
        __props__.__dict__["two_factor_ftk_expiry"] = two_factor_ftk_expiry
        __props__.__dict__["two_factor_ftm_expiry"] = two_factor_ftm_expiry
        __props__.__dict__["two_factor_sms_expiry"] = two_factor_sms_expiry
        __props__.__dict__["udp_idle_timer"] = udp_idle_timer
        __props__.__dict__["url_filter_affinity"] = url_filter_affinity
        __props__.__dict__["url_filter_count"] = url_filter_count
        __props__.__dict__["user_device_store_max_devices"] = user_device_store_max_devices
        __props__.__dict__["user_device_store_max_unified_mem"] = user_device_store_max_unified_mem
        __props__.__dict__["user_device_store_max_users"] = user_device_store_max_users
        __props__.__dict__["user_server_cert"] = user_server_cert
        __props__.__dict__["vdom_admin"] = vdom_admin
        __props__.__dict__["vdom_mode"] = vdom_mode
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vip_arp_range"] = vip_arp_range
        __props__.__dict__["virtual_server_count"] = virtual_server_count
        __props__.__dict__["virtual_server_hardware_acceleration"] = virtual_server_hardware_acceleration
        __props__.__dict__["virtual_switch_vlan"] = virtual_switch_vlan
        __props__.__dict__["vpn_ems_sn_check"] = vpn_ems_sn_check
        __props__.__dict__["wad_affinity"] = wad_affinity
        __props__.__dict__["wad_csvc_cs_count"] = wad_csvc_cs_count
        __props__.__dict__["wad_csvc_db_count"] = wad_csvc_db_count
        __props__.__dict__["wad_memory_change_granularity"] = wad_memory_change_granularity
        __props__.__dict__["wad_restart_end_time"] = wad_restart_end_time
        __props__.__dict__["wad_restart_mode"] = wad_restart_mode
        __props__.__dict__["wad_restart_start_time"] = wad_restart_start_time
        __props__.__dict__["wad_source_affinity"] = wad_source_affinity
        __props__.__dict__["wad_worker_count"] = wad_worker_count
        __props__.__dict__["wifi_ca_certificate"] = wifi_ca_certificate
        __props__.__dict__["wifi_certificate"] = wifi_certificate
        __props__.__dict__["wimax4g_usb"] = wimax4g_usb
        __props__.__dict__["wireless_controller"] = wireless_controller
        __props__.__dict__["wireless_controller_port"] = wireless_controller_port
        return SystemGlobal(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminConcurrent")
    def admin_concurrent(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_concurrent")

    @property
    @pulumi.getter(name="adminConsoleTimeout")
    def admin_console_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_console_timeout")

    @property
    @pulumi.getter(name="adminForticloudSsoDefaultProfile")
    def admin_forticloud_sso_default_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_forticloud_sso_default_profile")

    @property
    @pulumi.getter(name="adminForticloudSsoLogin")
    def admin_forticloud_sso_login(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_forticloud_sso_login")

    @property
    @pulumi.getter(name="adminHost")
    def admin_host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_host")

    @property
    @pulumi.getter(name="adminHstsMaxAge")
    def admin_hsts_max_age(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_hsts_max_age")

    @property
    @pulumi.getter(name="adminHttpsPkiRequired")
    def admin_https_pki_required(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_https_pki_required")

    @property
    @pulumi.getter(name="adminHttpsRedirect")
    def admin_https_redirect(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_https_redirect")

    @property
    @pulumi.getter(name="adminHttpsSslBannedCiphers")
    def admin_https_ssl_banned_ciphers(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_https_ssl_banned_ciphers")

    @property
    @pulumi.getter(name="adminHttpsSslCiphersuites")
    def admin_https_ssl_ciphersuites(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_https_ssl_ciphersuites")

    @property
    @pulumi.getter(name="adminHttpsSslVersions")
    def admin_https_ssl_versions(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_https_ssl_versions")

    @property
    @pulumi.getter(name="adminLockoutDuration")
    def admin_lockout_duration(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_lockout_duration")

    @property
    @pulumi.getter(name="adminLockoutThreshold")
    def admin_lockout_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_lockout_threshold")

    @property
    @pulumi.getter(name="adminLoginMax")
    def admin_login_max(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_login_max")

    @property
    @pulumi.getter(name="adminMaintainer")
    def admin_maintainer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_maintainer")

    @property
    @pulumi.getter(name="adminPort")
    def admin_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_port")

    @property
    @pulumi.getter(name="adminRestrictLocal")
    def admin_restrict_local(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_restrict_local")

    @property
    @pulumi.getter(name="adminScp")
    def admin_scp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_scp")

    @property
    @pulumi.getter(name="adminServerCert")
    def admin_server_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_server_cert")

    @property
    @pulumi.getter(name="adminSport")
    def admin_sport(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_sport")

    @property
    @pulumi.getter(name="adminSshGraceTime")
    def admin_ssh_grace_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_ssh_grace_time")

    @property
    @pulumi.getter(name="adminSshPassword")
    def admin_ssh_password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_ssh_password")

    @property
    @pulumi.getter(name="adminSshPort")
    def admin_ssh_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_ssh_port")

    @property
    @pulumi.getter(name="adminSshV1")
    def admin_ssh_v1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_ssh_v1")

    @property
    @pulumi.getter(name="adminTelnet")
    def admin_telnet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_telnet")

    @property
    @pulumi.getter(name="adminTelnetPort")
    def admin_telnet_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_telnet_port")

    @property
    @pulumi.getter
    def admintimeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admintimeout")

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="allowTrafficRedirect")
    def allow_traffic_redirect(self) -> pulumi.Output[str]:
        return pulumi.get(self, "allow_traffic_redirect")

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> pulumi.Output[str]:
        return pulumi.get(self, "anti_replay")

    @property
    @pulumi.getter(name="arpMaxEntry")
    def arp_max_entry(self) -> pulumi.Output[int]:
        return pulumi.get(self, "arp_max_entry")

    @property
    @pulumi.getter
    def asymroute(self) -> pulumi.Output[str]:
        return pulumi.get(self, "asymroute")

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_cert")

    @property
    @pulumi.getter(name="authHttpPort")
    def auth_http_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auth_http_port")

    @property
    @pulumi.getter(name="authHttpsPort")
    def auth_https_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auth_https_port")

    @property
    @pulumi.getter(name="authIkeSamlPort")
    def auth_ike_saml_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auth_ike_saml_port")

    @property
    @pulumi.getter(name="authKeepalive")
    def auth_keepalive(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_keepalive")

    @property
    @pulumi.getter(name="authSessionLimit")
    def auth_session_limit(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_session_limit")

    @property
    @pulumi.getter(name="autoAuthExtensionDevice")
    def auto_auth_extension_device(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_auth_extension_device")

    @property
    @pulumi.getter(name="autorunLogFsck")
    def autorun_log_fsck(self) -> pulumi.Output[str]:
        return pulumi.get(self, "autorun_log_fsck")

    @property
    @pulumi.getter(name="avAffinity")
    def av_affinity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "av_affinity")

    @property
    @pulumi.getter(name="avFailopen")
    def av_failopen(self) -> pulumi.Output[str]:
        return pulumi.get(self, "av_failopen")

    @property
    @pulumi.getter(name="avFailopenSession")
    def av_failopen_session(self) -> pulumi.Output[str]:
        return pulumi.get(self, "av_failopen_session")

    @property
    @pulumi.getter(name="batchCmdb")
    def batch_cmdb(self) -> pulumi.Output[str]:
        return pulumi.get(self, "batch_cmdb")

    @property
    @pulumi.getter(name="blockSessionTimer")
    def block_session_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "block_session_timer")

    @property
    @pulumi.getter(name="brFdbMaxEntry")
    def br_fdb_max_entry(self) -> pulumi.Output[int]:
        return pulumi.get(self, "br_fdb_max_entry")

    @property
    @pulumi.getter(name="certChainMax")
    def cert_chain_max(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cert_chain_max")

    @property
    @pulumi.getter(name="cfgRevertTimeout")
    def cfg_revert_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cfg_revert_timeout")

    @property
    @pulumi.getter(name="cfgSave")
    def cfg_save(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cfg_save")

    @property
    @pulumi.getter(name="checkProtocolHeader")
    def check_protocol_header(self) -> pulumi.Output[str]:
        return pulumi.get(self, "check_protocol_header")

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> pulumi.Output[str]:
        return pulumi.get(self, "check_reset_range")

    @property
    @pulumi.getter(name="cliAuditLog")
    def cli_audit_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cli_audit_log")

    @property
    @pulumi.getter(name="cloudCommunication")
    def cloud_communication(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cloud_communication")

    @property
    @pulumi.getter(name="cltCertReq")
    def clt_cert_req(self) -> pulumi.Output[str]:
        return pulumi.get(self, "clt_cert_req")

    @property
    @pulumi.getter(name="cmdbsvrAffinity")
    def cmdbsvr_affinity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cmdbsvr_affinity")

    @property
    @pulumi.getter(name="complianceCheck")
    def compliance_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compliance_check")

    @property
    @pulumi.getter(name="complianceCheckTime")
    def compliance_check_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compliance_check_time")

    @property
    @pulumi.getter(name="cpuUseThreshold")
    def cpu_use_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cpu_use_threshold")

    @property
    @pulumi.getter(name="csrCaAttribute")
    def csr_ca_attribute(self) -> pulumi.Output[str]:
        return pulumi.get(self, "csr_ca_attribute")

    @property
    @pulumi.getter(name="dailyRestart")
    def daily_restart(self) -> pulumi.Output[str]:
        return pulumi.get(self, "daily_restart")

    @property
    @pulumi.getter(name="defaultServiceSourcePort")
    def default_service_source_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_service_source_port")

    @property
    @pulumi.getter(name="deviceIdentificationActiveScanDelay")
    def device_identification_active_scan_delay(self) -> pulumi.Output[int]:
        return pulumi.get(self, "device_identification_active_scan_delay")

    @property
    @pulumi.getter(name="deviceIdleTimeout")
    def device_idle_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "device_idle_timeout")

    @property
    @pulumi.getter(name="dhParams")
    def dh_params(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dh_params")

    @property
    @pulumi.getter(name="dnsproxyWorkerCount")
    def dnsproxy_worker_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dnsproxy_worker_count")

    @property
    @pulumi.getter
    def dst(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="earlyTcpNpuSession")
    def early_tcp_npu_session(self) -> pulumi.Output[str]:
        return pulumi.get(self, "early_tcp_npu_session")

    @property
    @pulumi.getter(name="editVdomPrompt")
    def edit_vdom_prompt(self) -> pulumi.Output[str]:
        return pulumi.get(self, "edit_vdom_prompt")

    @property
    @pulumi.getter(name="endpointControlFdsAccess")
    def endpoint_control_fds_access(self) -> pulumi.Output[str]:
        return pulumi.get(self, "endpoint_control_fds_access")

    @property
    @pulumi.getter(name="endpointControlPortalPort")
    def endpoint_control_portal_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "endpoint_control_portal_port")

    @property
    @pulumi.getter(name="extenderControllerReservedNetwork")
    def extender_controller_reserved_network(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extender_controller_reserved_network")

    @property
    @pulumi.getter
    def failtime(self) -> pulumi.Output[int]:
        return pulumi.get(self, "failtime")

    @property
    @pulumi.getter(name="fazDiskBufferSize")
    def faz_disk_buffer_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "faz_disk_buffer_size")

    @property
    @pulumi.getter(name="fdsStatistics")
    def fds_statistics(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fds_statistics")

    @property
    @pulumi.getter(name="fdsStatisticsPeriod")
    def fds_statistics_period(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fds_statistics_period")

    @property
    @pulumi.getter(name="fecPort")
    def fec_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fec_port")

    @property
    @pulumi.getter(name="fgdAlertSubscription")
    def fgd_alert_subscription(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fgd_alert_subscription")

    @property
    @pulumi.getter(name="forticonverterConfigUpload")
    def forticonverter_config_upload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forticonverter_config_upload")

    @property
    @pulumi.getter(name="forticonverterIntegration")
    def forticonverter_integration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forticonverter_integration")

    @property
    @pulumi.getter
    def fortiextender(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortiextender")

    @property
    @pulumi.getter(name="fortiextenderDataPort")
    def fortiextender_data_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fortiextender_data_port")

    @property
    @pulumi.getter(name="fortiextenderDiscoveryLockdown")
    def fortiextender_discovery_lockdown(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortiextender_discovery_lockdown")

    @property
    @pulumi.getter(name="fortiextenderProvisionOnAuthorization")
    def fortiextender_provision_on_authorization(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortiextender_provision_on_authorization")

    @property
    @pulumi.getter(name="fortiextenderVlanMode")
    def fortiextender_vlan_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortiextender_vlan_mode")

    @property
    @pulumi.getter(name="fortiipamIntegration")
    def fortiipam_integration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortiipam_integration")

    @property
    @pulumi.getter(name="fortiservicePort")
    def fortiservice_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fortiservice_port")

    @property
    @pulumi.getter(name="fortitokenCloud")
    def fortitoken_cloud(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortitoken_cloud")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="guiAllowDefaultHostname")
    def gui_allow_default_hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_allow_default_hostname")

    @property
    @pulumi.getter(name="guiAllowIncompatibleFabricFgt")
    def gui_allow_incompatible_fabric_fgt(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_allow_incompatible_fabric_fgt")

    @property
    @pulumi.getter(name="guiAppDetectionSdwan")
    def gui_app_detection_sdwan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_app_detection_sdwan")

    @property
    @pulumi.getter(name="guiCdnDomainOverride")
    def gui_cdn_domain_override(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_cdn_domain_override")

    @property
    @pulumi.getter(name="guiCdnUsage")
    def gui_cdn_usage(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_cdn_usage")

    @property
    @pulumi.getter(name="guiCertificates")
    def gui_certificates(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_certificates")

    @property
    @pulumi.getter(name="guiCustomLanguage")
    def gui_custom_language(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_custom_language")

    @property
    @pulumi.getter(name="guiDateFormat")
    def gui_date_format(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_date_format")

    @property
    @pulumi.getter(name="guiDateTimeSource")
    def gui_date_time_source(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_date_time_source")

    @property
    @pulumi.getter(name="guiDeviceLatitude")
    def gui_device_latitude(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_device_latitude")

    @property
    @pulumi.getter(name="guiDeviceLongitude")
    def gui_device_longitude(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_device_longitude")

    @property
    @pulumi.getter(name="guiDisplayHostname")
    def gui_display_hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_display_hostname")

    @property
    @pulumi.getter(name="guiFirmwareUpgradeSetupWarning")
    def gui_firmware_upgrade_setup_warning(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_firmware_upgrade_setup_warning")

    @property
    @pulumi.getter(name="guiFirmwareUpgradeWarning")
    def gui_firmware_upgrade_warning(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_firmware_upgrade_warning")

    @property
    @pulumi.getter(name="guiForticareRegistrationSetupWarning")
    def gui_forticare_registration_setup_warning(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_forticare_registration_setup_warning")

    @property
    @pulumi.getter(name="guiFortigateCloudSandbox")
    def gui_fortigate_cloud_sandbox(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_fortigate_cloud_sandbox")

    @property
    @pulumi.getter(name="guiFortiguardResourceFetch")
    def gui_fortiguard_resource_fetch(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_fortiguard_resource_fetch")

    @property
    @pulumi.getter(name="guiFortisandboxCloud")
    def gui_fortisandbox_cloud(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_fortisandbox_cloud")

    @property
    @pulumi.getter(name="guiIpv6")
    def gui_ipv6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_ipv6")

    @property
    @pulumi.getter(name="guiLinesPerPage")
    def gui_lines_per_page(self) -> pulumi.Output[int]:
        return pulumi.get(self, "gui_lines_per_page")

    @property
    @pulumi.getter(name="guiLocalOut")
    def gui_local_out(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_local_out")

    @property
    @pulumi.getter(name="guiReplacementMessageGroups")
    def gui_replacement_message_groups(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_replacement_message_groups")

    @property
    @pulumi.getter(name="guiRestApiCache")
    def gui_rest_api_cache(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_rest_api_cache")

    @property
    @pulumi.getter(name="guiTheme")
    def gui_theme(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_theme")

    @property
    @pulumi.getter(name="guiWirelessOpensecurity")
    def gui_wireless_opensecurity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_wireless_opensecurity")

    @property
    @pulumi.getter(name="guiWorkflowManagement")
    def gui_workflow_management(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gui_workflow_management")

    @property
    @pulumi.getter(name="haAffinity")
    def ha_affinity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ha_affinity")

    @property
    @pulumi.getter(name="honorDf")
    def honor_df(self) -> pulumi.Output[str]:
        return pulumi.get(self, "honor_df")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="igmpStateLimit")
    def igmp_state_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "igmp_state_limit")

    @property
    @pulumi.getter(name="ikeEmbryonicLimit")
    def ike_embryonic_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ike_embryonic_limit")

    @property
    @pulumi.getter(name="interfaceSubnetUsage")
    def interface_subnet_usage(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface_subnet_usage")

    @property
    @pulumi.getter(name="internetServiceDatabase")
    def internet_service_database(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service_database")

    @property
    @pulumi.getter(name="internetServiceDownloadLists")
    def internet_service_download_lists(self) -> pulumi.Output[Optional[Sequence['outputs.SystemGlobalInternetServiceDownloadList']]]:
        return pulumi.get(self, "internet_service_download_lists")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="ipFragmentMemThresholds")
    def ip_fragment_mem_thresholds(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ip_fragment_mem_thresholds")

    @property
    @pulumi.getter(name="ipSrcPortRange")
    def ip_src_port_range(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_src_port_range")

    @property
    @pulumi.getter(name="ipsAffinity")
    def ips_affinity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ips_affinity")

    @property
    @pulumi.getter(name="ipsecAsicOffload")
    def ipsec_asic_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_asic_offload")

    @property
    @pulumi.getter(name="ipsecHaSeqjumpRate")
    def ipsec_ha_seqjump_rate(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ipsec_ha_seqjump_rate")

    @property
    @pulumi.getter(name="ipsecHmacOffload")
    def ipsec_hmac_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_hmac_offload")

    @property
    @pulumi.getter(name="ipsecRoundRobin")
    def ipsec_round_robin(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_round_robin")

    @property
    @pulumi.getter(name="ipsecSoftDecAsync")
    def ipsec_soft_dec_async(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipsec_soft_dec_async")

    @property
    @pulumi.getter(name="ipv6AcceptDad")
    def ipv6_accept_dad(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ipv6_accept_dad")

    @property
    @pulumi.getter(name="ipv6AllowAnycastProbe")
    def ipv6_allow_anycast_probe(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_allow_anycast_probe")

    @property
    @pulumi.getter(name="ipv6AllowLocalInSlientDrop")
    def ipv6_allow_local_in_slient_drop(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_allow_local_in_slient_drop")

    @property
    @pulumi.getter(name="ipv6AllowMulticastProbe")
    def ipv6_allow_multicast_probe(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_allow_multicast_probe")

    @property
    @pulumi.getter(name="ipv6AllowTrafficRedirect")
    def ipv6_allow_traffic_redirect(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_allow_traffic_redirect")

    @property
    @pulumi.getter(name="irqTimeAccounting")
    def irq_time_accounting(self) -> pulumi.Output[str]:
        return pulumi.get(self, "irq_time_accounting")

    @property
    @pulumi.getter
    def language(self) -> pulumi.Output[str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def ldapconntimeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ldapconntimeout")

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> pulumi.Output[str]:
        return pulumi.get(self, "lldp_reception")

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> pulumi.Output[str]:
        return pulumi.get(self, "lldp_transmission")

    @property
    @pulumi.getter(name="logSingleCpuHigh")
    def log_single_cpu_high(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_single_cpu_high")

    @property
    @pulumi.getter(name="logSslConnection")
    def log_ssl_connection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_ssl_connection")

    @property
    @pulumi.getter(name="logUuidAddress")
    def log_uuid_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_uuid_address")

    @property
    @pulumi.getter(name="logUuidPolicy")
    def log_uuid_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_uuid_policy")

    @property
    @pulumi.getter(name="loginTimestamp")
    def login_timestamp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "login_timestamp")

    @property
    @pulumi.getter(name="longVdomName")
    def long_vdom_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "long_vdom_name")

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "management_ip")

    @property
    @pulumi.getter(name="managementPort")
    def management_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "management_port")

    @property
    @pulumi.getter(name="managementPortUseAdminSport")
    def management_port_use_admin_sport(self) -> pulumi.Output[str]:
        return pulumi.get(self, "management_port_use_admin_sport")

    @property
    @pulumi.getter(name="managementVdom")
    def management_vdom(self) -> pulumi.Output[str]:
        return pulumi.get(self, "management_vdom")

    @property
    @pulumi.getter(name="maxDlpstatMemory")
    def max_dlpstat_memory(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_dlpstat_memory")

    @property
    @pulumi.getter(name="maxRouteCacheSize")
    def max_route_cache_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_route_cache_size")

    @property
    @pulumi.getter(name="mcTtlNotchange")
    def mc_ttl_notchange(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mc_ttl_notchange")

    @property
    @pulumi.getter(name="memoryUseThresholdExtreme")
    def memory_use_threshold_extreme(self) -> pulumi.Output[int]:
        return pulumi.get(self, "memory_use_threshold_extreme")

    @property
    @pulumi.getter(name="memoryUseThresholdGreen")
    def memory_use_threshold_green(self) -> pulumi.Output[int]:
        return pulumi.get(self, "memory_use_threshold_green")

    @property
    @pulumi.getter(name="memoryUseThresholdRed")
    def memory_use_threshold_red(self) -> pulumi.Output[int]:
        return pulumi.get(self, "memory_use_threshold_red")

    @property
    @pulumi.getter(name="miglogAffinity")
    def miglog_affinity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "miglog_affinity")

    @property
    @pulumi.getter(name="miglogdChildren")
    def miglogd_children(self) -> pulumi.Output[int]:
        return pulumi.get(self, "miglogd_children")

    @property
    @pulumi.getter(name="multiFactorAuthentication")
    def multi_factor_authentication(self) -> pulumi.Output[str]:
        return pulumi.get(self, "multi_factor_authentication")

    @property
    @pulumi.getter(name="multicastForward")
    def multicast_forward(self) -> pulumi.Output[str]:
        return pulumi.get(self, "multicast_forward")

    @property
    @pulumi.getter(name="ndpMaxEntry")
    def ndp_max_entry(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ndp_max_entry")

    @property
    @pulumi.getter(name="perUserBal")
    def per_user_bal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "per_user_bal")

    @property
    @pulumi.getter(name="perUserBwl")
    def per_user_bwl(self) -> pulumi.Output[str]:
        return pulumi.get(self, "per_user_bwl")

    @property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pmtu_discovery")

    @property
    @pulumi.getter(name="policyAuthConcurrent")
    def policy_auth_concurrent(self) -> pulumi.Output[int]:
        return pulumi.get(self, "policy_auth_concurrent")

    @property
    @pulumi.getter(name="postLoginBanner")
    def post_login_banner(self) -> pulumi.Output[str]:
        return pulumi.get(self, "post_login_banner")

    @property
    @pulumi.getter(name="preLoginBanner")
    def pre_login_banner(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pre_login_banner")

    @property
    @pulumi.getter(name="privateDataEncryption")
    def private_data_encryption(self) -> pulumi.Output[str]:
        return pulumi.get(self, "private_data_encryption")

    @property
    @pulumi.getter(name="proxyAuthLifetime")
    def proxy_auth_lifetime(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proxy_auth_lifetime")

    @property
    @pulumi.getter(name="proxyAuthLifetimeTimeout")
    def proxy_auth_lifetime_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "proxy_auth_lifetime_timeout")

    @property
    @pulumi.getter(name="proxyAuthTimeout")
    def proxy_auth_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "proxy_auth_timeout")

    @property
    @pulumi.getter(name="proxyCertUseMgmtVdom")
    def proxy_cert_use_mgmt_vdom(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proxy_cert_use_mgmt_vdom")

    @property
    @pulumi.getter(name="proxyCipherHardwareAcceleration")
    def proxy_cipher_hardware_acceleration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proxy_cipher_hardware_acceleration")

    @property
    @pulumi.getter(name="proxyHardwareAcceleration")
    def proxy_hardware_acceleration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proxy_hardware_acceleration")

    @property
    @pulumi.getter(name="proxyKeepAliveMode")
    def proxy_keep_alive_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proxy_keep_alive_mode")

    @property
    @pulumi.getter(name="proxyKxpHardwareAcceleration")
    def proxy_kxp_hardware_acceleration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proxy_kxp_hardware_acceleration")

    @property
    @pulumi.getter(name="proxyReAuthenticationMode")
    def proxy_re_authentication_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proxy_re_authentication_mode")

    @property
    @pulumi.getter(name="proxyReAuthenticationTime")
    def proxy_re_authentication_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "proxy_re_authentication_time")

    @property
    @pulumi.getter(name="proxyResourceMode")
    def proxy_resource_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proxy_resource_mode")

    @property
    @pulumi.getter(name="proxyWorkerCount")
    def proxy_worker_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "proxy_worker_count")

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "radius_port")

    @property
    @pulumi.getter(name="rebootUponConfigRestore")
    def reboot_upon_config_restore(self) -> pulumi.Output[str]:
        return pulumi.get(self, "reboot_upon_config_restore")

    @property
    @pulumi.getter
    def refresh(self) -> pulumi.Output[int]:
        return pulumi.get(self, "refresh")

    @property
    @pulumi.getter
    def remoteauthtimeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "remoteauthtimeout")

    @property
    @pulumi.getter(name="resetSessionlessTcp")
    def reset_sessionless_tcp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "reset_sessionless_tcp")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="revisionBackupOnLogout")
    def revision_backup_on_logout(self) -> pulumi.Output[str]:
        return pulumi.get(self, "revision_backup_on_logout")

    @property
    @pulumi.getter(name="revisionImageAutoBackup")
    def revision_image_auto_backup(self) -> pulumi.Output[str]:
        return pulumi.get(self, "revision_image_auto_backup")

    @property
    @pulumi.getter(name="scanunitCount")
    def scanunit_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "scanunit_count")

    @property
    @pulumi.getter(name="securityRatingResultSubmission")
    def security_rating_result_submission(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_rating_result_submission")

    @property
    @pulumi.getter(name="securityRatingRunOnSchedule")
    def security_rating_run_on_schedule(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_rating_run_on_schedule")

    @property
    @pulumi.getter(name="sendPmtuIcmp")
    def send_pmtu_icmp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "send_pmtu_icmp")

    @property
    @pulumi.getter(name="sflowdMaxChildrenNum")
    def sflowd_max_children_num(self) -> pulumi.Output[int]:
        return pulumi.get(self, "sflowd_max_children_num")

    @property
    @pulumi.getter(name="snatRouteChange")
    def snat_route_change(self) -> pulumi.Output[str]:
        return pulumi.get(self, "snat_route_change")

    @property
    @pulumi.getter(name="specialFile23Support")
    def special_file23_support(self) -> pulumi.Output[str]:
        return pulumi.get(self, "special_file23_support")

    @property
    @pulumi.getter(name="speedtestServer")
    def speedtest_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "speedtest_server")

    @property
    @pulumi.getter(name="splitPort")
    def split_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "split_port")

    @property
    @pulumi.getter(name="ssdTrimDate")
    def ssd_trim_date(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssd_trim_date")

    @property
    @pulumi.getter(name="ssdTrimFreq")
    def ssd_trim_freq(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssd_trim_freq")

    @property
    @pulumi.getter(name="ssdTrimHour")
    def ssd_trim_hour(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssd_trim_hour")

    @property
    @pulumi.getter(name="ssdTrimMin")
    def ssd_trim_min(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssd_trim_min")

    @property
    @pulumi.getter(name="ssdTrimWeekday")
    def ssd_trim_weekday(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssd_trim_weekday")

    @property
    @pulumi.getter(name="sshCbcCipher")
    def ssh_cbc_cipher(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_cbc_cipher")

    @property
    @pulumi.getter(name="sshEncAlgo")
    def ssh_enc_algo(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_enc_algo")

    @property
    @pulumi.getter(name="sshHmacMd5")
    def ssh_hmac_md5(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_hmac_md5")

    @property
    @pulumi.getter(name="sshHostkeyAlgo")
    def ssh_hostkey_algo(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_hostkey_algo")

    @property
    @pulumi.getter(name="sshKexAlgo")
    def ssh_kex_algo(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_kex_algo")

    @property
    @pulumi.getter(name="sshKexSha1")
    def ssh_kex_sha1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_kex_sha1")

    @property
    @pulumi.getter(name="sshMacAlgo")
    def ssh_mac_algo(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_mac_algo")

    @property
    @pulumi.getter(name="sshMacWeak")
    def ssh_mac_weak(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_mac_weak")

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_min_proto_version")

    @property
    @pulumi.getter(name="sslStaticKeyCiphers")
    def ssl_static_key_ciphers(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_static_key_ciphers")

    @property
    @pulumi.getter(name="sslvpnCipherHardwareAcceleration")
    def sslvpn_cipher_hardware_acceleration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sslvpn_cipher_hardware_acceleration")

    @property
    @pulumi.getter(name="sslvpnEmsSnCheck")
    def sslvpn_ems_sn_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sslvpn_ems_sn_check")

    @property
    @pulumi.getter(name="sslvpnKxpHardwareAcceleration")
    def sslvpn_kxp_hardware_acceleration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sslvpn_kxp_hardware_acceleration")

    @property
    @pulumi.getter(name="sslvpnMaxWorkerCount")
    def sslvpn_max_worker_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "sslvpn_max_worker_count")

    @property
    @pulumi.getter(name="sslvpnPluginVersionCheck")
    def sslvpn_plugin_version_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sslvpn_plugin_version_check")

    @property
    @pulumi.getter(name="strictDirtySessionCheck")
    def strict_dirty_session_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "strict_dirty_session_check")

    @property
    @pulumi.getter(name="strongCrypto")
    def strong_crypto(self) -> pulumi.Output[str]:
        return pulumi.get(self, "strong_crypto")

    @property
    @pulumi.getter(name="switchController")
    def switch_controller(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_controller")

    @property
    @pulumi.getter(name="switchControllerReservedNetwork")
    def switch_controller_reserved_network(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_controller_reserved_network")

    @property
    @pulumi.getter(name="sysPerfLogInterval")
    def sys_perf_log_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "sys_perf_log_interval")

    @property
    @pulumi.getter(name="syslogAffinity")
    def syslog_affinity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "syslog_affinity")

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tcp_halfclose_timer")

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tcp_halfopen_timer")

    @property
    @pulumi.getter(name="tcpOption")
    def tcp_option(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tcp_option")

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tcp_rst_timer")

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tcp_timewait_timer")

    @property
    @pulumi.getter
    def tftp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tftp")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="tpMcSkipPolicy")
    def tp_mc_skip_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tp_mc_skip_policy")

    @property
    @pulumi.getter(name="trafficPriority")
    def traffic_priority(self) -> pulumi.Output[str]:
        return pulumi.get(self, "traffic_priority")

    @property
    @pulumi.getter(name="trafficPriorityLevel")
    def traffic_priority_level(self) -> pulumi.Output[str]:
        return pulumi.get(self, "traffic_priority_level")

    @property
    @pulumi.getter(name="twoFactorEmailExpiry")
    def two_factor_email_expiry(self) -> pulumi.Output[int]:
        return pulumi.get(self, "two_factor_email_expiry")

    @property
    @pulumi.getter(name="twoFactorFacExpiry")
    def two_factor_fac_expiry(self) -> pulumi.Output[int]:
        return pulumi.get(self, "two_factor_fac_expiry")

    @property
    @pulumi.getter(name="twoFactorFtkExpiry")
    def two_factor_ftk_expiry(self) -> pulumi.Output[int]:
        return pulumi.get(self, "two_factor_ftk_expiry")

    @property
    @pulumi.getter(name="twoFactorFtmExpiry")
    def two_factor_ftm_expiry(self) -> pulumi.Output[int]:
        return pulumi.get(self, "two_factor_ftm_expiry")

    @property
    @pulumi.getter(name="twoFactorSmsExpiry")
    def two_factor_sms_expiry(self) -> pulumi.Output[int]:
        return pulumi.get(self, "two_factor_sms_expiry")

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "udp_idle_timer")

    @property
    @pulumi.getter(name="urlFilterAffinity")
    def url_filter_affinity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url_filter_affinity")

    @property
    @pulumi.getter(name="urlFilterCount")
    def url_filter_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "url_filter_count")

    @property
    @pulumi.getter(name="userDeviceStoreMaxDevices")
    def user_device_store_max_devices(self) -> pulumi.Output[int]:
        return pulumi.get(self, "user_device_store_max_devices")

    @property
    @pulumi.getter(name="userDeviceStoreMaxUnifiedMem")
    def user_device_store_max_unified_mem(self) -> pulumi.Output[int]:
        return pulumi.get(self, "user_device_store_max_unified_mem")

    @property
    @pulumi.getter(name="userDeviceStoreMaxUsers")
    def user_device_store_max_users(self) -> pulumi.Output[int]:
        return pulumi.get(self, "user_device_store_max_users")

    @property
    @pulumi.getter(name="userServerCert")
    def user_server_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_server_cert")

    @property
    @pulumi.getter(name="vdomAdmin")
    def vdom_admin(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vdom_admin")

    @property
    @pulumi.getter(name="vdomMode")
    def vdom_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vdom_mode")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vipArpRange")
    def vip_arp_range(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vip_arp_range")

    @property
    @pulumi.getter(name="virtualServerCount")
    def virtual_server_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "virtual_server_count")

    @property
    @pulumi.getter(name="virtualServerHardwareAcceleration")
    def virtual_server_hardware_acceleration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "virtual_server_hardware_acceleration")

    @property
    @pulumi.getter(name="virtualSwitchVlan")
    def virtual_switch_vlan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "virtual_switch_vlan")

    @property
    @pulumi.getter(name="vpnEmsSnCheck")
    def vpn_ems_sn_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vpn_ems_sn_check")

    @property
    @pulumi.getter(name="wadAffinity")
    def wad_affinity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wad_affinity")

    @property
    @pulumi.getter(name="wadCsvcCsCount")
    def wad_csvc_cs_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "wad_csvc_cs_count")

    @property
    @pulumi.getter(name="wadCsvcDbCount")
    def wad_csvc_db_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "wad_csvc_db_count")

    @property
    @pulumi.getter(name="wadMemoryChangeGranularity")
    def wad_memory_change_granularity(self) -> pulumi.Output[int]:
        return pulumi.get(self, "wad_memory_change_granularity")

    @property
    @pulumi.getter(name="wadRestartEndTime")
    def wad_restart_end_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wad_restart_end_time")

    @property
    @pulumi.getter(name="wadRestartMode")
    def wad_restart_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wad_restart_mode")

    @property
    @pulumi.getter(name="wadRestartStartTime")
    def wad_restart_start_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wad_restart_start_time")

    @property
    @pulumi.getter(name="wadSourceAffinity")
    def wad_source_affinity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wad_source_affinity")

    @property
    @pulumi.getter(name="wadWorkerCount")
    def wad_worker_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "wad_worker_count")

    @property
    @pulumi.getter(name="wifiCaCertificate")
    def wifi_ca_certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wifi_ca_certificate")

    @property
    @pulumi.getter(name="wifiCertificate")
    def wifi_certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wifi_certificate")

    @property
    @pulumi.getter(name="wimax4gUsb")
    def wimax4g_usb(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wimax4g_usb")

    @property
    @pulumi.getter(name="wirelessController")
    def wireless_controller(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wireless_controller")

    @property
    @pulumi.getter(name="wirelessControllerPort")
    def wireless_controller_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "wireless_controller_port")

