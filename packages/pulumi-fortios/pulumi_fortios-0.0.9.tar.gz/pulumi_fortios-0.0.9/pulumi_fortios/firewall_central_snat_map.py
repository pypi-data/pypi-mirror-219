# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallCentralSnatMapArgs', 'FirewallCentralSnatMap']

@pulumi.input_type
class FirewallCentralSnatMapArgs:
    def __init__(__self__, *,
                 dst_addrs: pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddrArgs']]],
                 dstintfs: pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstintfArgs']]],
                 nat: pulumi.Input[str],
                 orig_addrs: pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddrArgs']]],
                 orig_port: pulumi.Input[str],
                 protocol: pulumi.Input[int],
                 srcintfs: pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapSrcintfArgs']]],
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddr6Args']]]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat_ippool6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppool6Args']]]] = None,
                 nat_ippools: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppoolArgs']]]] = None,
                 nat_port: Optional[pulumi.Input[str]] = None,
                 orig_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddr6Args']]]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallCentralSnatMap resource.
        """
        pulumi.set(__self__, "dst_addrs", dst_addrs)
        pulumi.set(__self__, "dstintfs", dstintfs)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "orig_addrs", orig_addrs)
        pulumi.set(__self__, "orig_port", orig_port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "srcintfs", srcintfs)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dst_addr6s is not None:
            pulumi.set(__self__, "dst_addr6s", dst_addr6s)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if nat46 is not None:
            pulumi.set(__self__, "nat46", nat46)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if nat_ippool6s is not None:
            pulumi.set(__self__, "nat_ippool6s", nat_ippool6s)
        if nat_ippools is not None:
            pulumi.set(__self__, "nat_ippools", nat_ippools)
        if nat_port is not None:
            pulumi.set(__self__, "nat_port", nat_port)
        if orig_addr6s is not None:
            pulumi.set(__self__, "orig_addr6s", orig_addr6s)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dstAddrs")
    def dst_addrs(self) -> pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddrArgs']]]:
        return pulumi.get(self, "dst_addrs")

    @dst_addrs.setter
    def dst_addrs(self, value: pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddrArgs']]]):
        pulumi.set(self, "dst_addrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstintfArgs']]]:
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstintfArgs']]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def nat(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: pulumi.Input[str]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter(name="origAddrs")
    def orig_addrs(self) -> pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddrArgs']]]:
        return pulumi.get(self, "orig_addrs")

    @orig_addrs.setter
    def orig_addrs(self, value: pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddrArgs']]]):
        pulumi.set(self, "orig_addrs", value)

    @property
    @pulumi.getter(name="origPort")
    def orig_port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "orig_port")

    @orig_port.setter
    def orig_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "orig_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[int]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[int]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapSrcintfArgs']]]:
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapSrcintfArgs']]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dstAddr6s")
    def dst_addr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddr6Args']]]]:
        return pulumi.get(self, "dst_addr6s")

    @dst_addr6s.setter
    def dst_addr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddr6Args']]]]):
        pulumi.set(self, "dst_addr6s", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def nat46(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat46")

    @nat46.setter
    def nat46(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46", value)

    @property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64", value)

    @property
    @pulumi.getter(name="natIppool6s")
    def nat_ippool6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppool6Args']]]]:
        return pulumi.get(self, "nat_ippool6s")

    @nat_ippool6s.setter
    def nat_ippool6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppool6Args']]]]):
        pulumi.set(self, "nat_ippool6s", value)

    @property
    @pulumi.getter(name="natIppools")
    def nat_ippools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppoolArgs']]]]:
        return pulumi.get(self, "nat_ippools")

    @nat_ippools.setter
    def nat_ippools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppoolArgs']]]]):
        pulumi.set(self, "nat_ippools", value)

    @property
    @pulumi.getter(name="natPort")
    def nat_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat_port")

    @nat_port.setter
    def nat_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_port", value)

    @property
    @pulumi.getter(name="origAddr6s")
    def orig_addr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddr6Args']]]]:
        return pulumi.get(self, "orig_addr6s")

    @orig_addr6s.setter
    def orig_addr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddr6Args']]]]):
        pulumi.set(self, "orig_addr6s", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FirewallCentralSnatMapState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddr6Args']]]] = None,
                 dst_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddrArgs']]]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstintfArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat_ippool6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppool6Args']]]] = None,
                 nat_ippools: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppoolArgs']]]] = None,
                 nat_port: Optional[pulumi.Input[str]] = None,
                 orig_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddr6Args']]]] = None,
                 orig_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddrArgs']]]] = None,
                 orig_port: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapSrcintfArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallCentralSnatMap resources.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dst_addr6s is not None:
            pulumi.set(__self__, "dst_addr6s", dst_addr6s)
        if dst_addrs is not None:
            pulumi.set(__self__, "dst_addrs", dst_addrs)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat46 is not None:
            pulumi.set(__self__, "nat46", nat46)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if nat_ippool6s is not None:
            pulumi.set(__self__, "nat_ippool6s", nat_ippool6s)
        if nat_ippools is not None:
            pulumi.set(__self__, "nat_ippools", nat_ippools)
        if nat_port is not None:
            pulumi.set(__self__, "nat_port", nat_port)
        if orig_addr6s is not None:
            pulumi.set(__self__, "orig_addr6s", orig_addr6s)
        if orig_addrs is not None:
            pulumi.set(__self__, "orig_addrs", orig_addrs)
        if orig_port is not None:
            pulumi.set(__self__, "orig_port", orig_port)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dstAddr6s")
    def dst_addr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddr6Args']]]]:
        return pulumi.get(self, "dst_addr6s")

    @dst_addr6s.setter
    def dst_addr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddr6Args']]]]):
        pulumi.set(self, "dst_addr6s", value)

    @property
    @pulumi.getter(name="dstAddrs")
    def dst_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddrArgs']]]]:
        return pulumi.get(self, "dst_addrs")

    @dst_addrs.setter
    def dst_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstAddrArgs']]]]):
        pulumi.set(self, "dst_addrs", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstintfArgs']]]]:
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter
    def nat46(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat46")

    @nat46.setter
    def nat46(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46", value)

    @property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64", value)

    @property
    @pulumi.getter(name="natIppool6s")
    def nat_ippool6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppool6Args']]]]:
        return pulumi.get(self, "nat_ippool6s")

    @nat_ippool6s.setter
    def nat_ippool6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppool6Args']]]]):
        pulumi.set(self, "nat_ippool6s", value)

    @property
    @pulumi.getter(name="natIppools")
    def nat_ippools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppoolArgs']]]]:
        return pulumi.get(self, "nat_ippools")

    @nat_ippools.setter
    def nat_ippools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapNatIppoolArgs']]]]):
        pulumi.set(self, "nat_ippools", value)

    @property
    @pulumi.getter(name="natPort")
    def nat_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat_port")

    @nat_port.setter
    def nat_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_port", value)

    @property
    @pulumi.getter(name="origAddr6s")
    def orig_addr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddr6Args']]]]:
        return pulumi.get(self, "orig_addr6s")

    @orig_addr6s.setter
    def orig_addr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddr6Args']]]]):
        pulumi.set(self, "orig_addr6s", value)

    @property
    @pulumi.getter(name="origAddrs")
    def orig_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddrArgs']]]]:
        return pulumi.get(self, "orig_addrs")

    @orig_addrs.setter
    def orig_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapOrigAddrArgs']]]]):
        pulumi.set(self, "orig_addrs", value)

    @property
    @pulumi.getter(name="origPort")
    def orig_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "orig_port")

    @orig_port.setter
    def orig_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "orig_port", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapSrcintfArgs']]]]:
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallCentralSnatMapSrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class FirewallCentralSnatMap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapDstAddr6Args']]]]] = None,
                 dst_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapDstAddrArgs']]]]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapDstintfArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat_ippool6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapNatIppool6Args']]]]] = None,
                 nat_ippools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapNatIppoolArgs']]]]] = None,
                 nat_port: Optional[pulumi.Input[str]] = None,
                 orig_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapOrigAddr6Args']]]]] = None,
                 orig_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapOrigAddrArgs']]]]] = None,
                 orig_port: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapSrcintfArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallCentralSnatMap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallCentralSnatMapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallCentralSnatMap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallCentralSnatMapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallCentralSnatMapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapDstAddr6Args']]]]] = None,
                 dst_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapDstAddrArgs']]]]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapDstintfArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 nat_ippool6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapNatIppool6Args']]]]] = None,
                 nat_ippools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapNatIppoolArgs']]]]] = None,
                 nat_port: Optional[pulumi.Input[str]] = None,
                 orig_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapOrigAddr6Args']]]]] = None,
                 orig_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapOrigAddrArgs']]]]] = None,
                 orig_port: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapSrcintfArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallCentralSnatMapArgs.__new__(FirewallCentralSnatMapArgs)

            __props__.__dict__["comments"] = comments
            __props__.__dict__["dst_addr6s"] = dst_addr6s
            if dst_addrs is None and not opts.urn:
                raise TypeError("Missing required property 'dst_addrs'")
            __props__.__dict__["dst_addrs"] = dst_addrs
            __props__.__dict__["dst_port"] = dst_port
            if dstintfs is None and not opts.urn:
                raise TypeError("Missing required property 'dstintfs'")
            __props__.__dict__["dstintfs"] = dstintfs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            if nat is None and not opts.urn:
                raise TypeError("Missing required property 'nat'")
            __props__.__dict__["nat"] = nat
            __props__.__dict__["nat46"] = nat46
            __props__.__dict__["nat64"] = nat64
            __props__.__dict__["nat_ippool6s"] = nat_ippool6s
            __props__.__dict__["nat_ippools"] = nat_ippools
            __props__.__dict__["nat_port"] = nat_port
            __props__.__dict__["orig_addr6s"] = orig_addr6s
            if orig_addrs is None and not opts.urn:
                raise TypeError("Missing required property 'orig_addrs'")
            __props__.__dict__["orig_addrs"] = orig_addrs
            if orig_port is None and not opts.urn:
                raise TypeError("Missing required property 'orig_port'")
            __props__.__dict__["orig_port"] = orig_port
            __props__.__dict__["policyid"] = policyid
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if srcintfs is None and not opts.urn:
                raise TypeError("Missing required property 'srcintfs'")
            __props__.__dict__["srcintfs"] = srcintfs
            __props__.__dict__["status"] = status
            __props__.__dict__["type"] = type
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
        super(FirewallCentralSnatMap, __self__).__init__(
            'fortios:index/firewallCentralSnatMap:FirewallCentralSnatMap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dst_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapDstAddr6Args']]]]] = None,
            dst_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapDstAddrArgs']]]]] = None,
            dst_port: Optional[pulumi.Input[str]] = None,
            dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapDstintfArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            nat: Optional[pulumi.Input[str]] = None,
            nat46: Optional[pulumi.Input[str]] = None,
            nat64: Optional[pulumi.Input[str]] = None,
            nat_ippool6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapNatIppool6Args']]]]] = None,
            nat_ippools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapNatIppoolArgs']]]]] = None,
            nat_port: Optional[pulumi.Input[str]] = None,
            orig_addr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapOrigAddr6Args']]]]] = None,
            orig_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapOrigAddrArgs']]]]] = None,
            orig_port: Optional[pulumi.Input[str]] = None,
            policyid: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[int]] = None,
            srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallCentralSnatMapSrcintfArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'FirewallCentralSnatMap':
        """
        Get an existing FirewallCentralSnatMap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallCentralSnatMapState.__new__(_FirewallCentralSnatMapState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["dst_addr6s"] = dst_addr6s
        __props__.__dict__["dst_addrs"] = dst_addrs
        __props__.__dict__["dst_port"] = dst_port
        __props__.__dict__["dstintfs"] = dstintfs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["nat"] = nat
        __props__.__dict__["nat46"] = nat46
        __props__.__dict__["nat64"] = nat64
        __props__.__dict__["nat_ippool6s"] = nat_ippool6s
        __props__.__dict__["nat_ippools"] = nat_ippools
        __props__.__dict__["nat_port"] = nat_port
        __props__.__dict__["orig_addr6s"] = orig_addr6s
        __props__.__dict__["orig_addrs"] = orig_addrs
        __props__.__dict__["orig_port"] = orig_port
        __props__.__dict__["policyid"] = policyid
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["srcintfs"] = srcintfs
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        return FirewallCentralSnatMap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dstAddr6s")
    def dst_addr6s(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallCentralSnatMapDstAddr6']]]:
        return pulumi.get(self, "dst_addr6s")

    @property
    @pulumi.getter(name="dstAddrs")
    def dst_addrs(self) -> pulumi.Output[Sequence['outputs.FirewallCentralSnatMapDstAddr']]:
        return pulumi.get(self, "dst_addrs")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Output[Sequence['outputs.FirewallCentralSnatMapDstintf']]:
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def nat(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def nat46(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat46")

    @property
    @pulumi.getter
    def nat64(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat64")

    @property
    @pulumi.getter(name="natIppool6s")
    def nat_ippool6s(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallCentralSnatMapNatIppool6']]]:
        return pulumi.get(self, "nat_ippool6s")

    @property
    @pulumi.getter(name="natIppools")
    def nat_ippools(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallCentralSnatMapNatIppool']]]:
        return pulumi.get(self, "nat_ippools")

    @property
    @pulumi.getter(name="natPort")
    def nat_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat_port")

    @property
    @pulumi.getter(name="origAddr6s")
    def orig_addr6s(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallCentralSnatMapOrigAddr6']]]:
        return pulumi.get(self, "orig_addr6s")

    @property
    @pulumi.getter(name="origAddrs")
    def orig_addrs(self) -> pulumi.Output[Sequence['outputs.FirewallCentralSnatMapOrigAddr']]:
        return pulumi.get(self, "orig_addrs")

    @property
    @pulumi.getter(name="origPort")
    def orig_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "orig_port")

    @property
    @pulumi.getter
    def policyid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Output[Sequence['outputs.FirewallCentralSnatMapSrcintf']]:
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

