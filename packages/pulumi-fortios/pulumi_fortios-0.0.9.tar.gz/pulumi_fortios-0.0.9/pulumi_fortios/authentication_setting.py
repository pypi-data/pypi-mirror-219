# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AuthenticationSettingArgs', 'AuthenticationSetting']

@pulumi.input_type
class AuthenticationSettingArgs:
    def __init__(__self__, *,
                 active_auth_scheme: Optional[pulumi.Input[str]] = None,
                 auth_https: Optional[pulumi.Input[str]] = None,
                 captive_portal: Optional[pulumi.Input[str]] = None,
                 captive_portal6: Optional[pulumi.Input[str]] = None,
                 captive_portal_ip: Optional[pulumi.Input[str]] = None,
                 captive_portal_ip6: Optional[pulumi.Input[str]] = None,
                 captive_portal_port: Optional[pulumi.Input[int]] = None,
                 captive_portal_ssl_port: Optional[pulumi.Input[int]] = None,
                 captive_portal_type: Optional[pulumi.Input[str]] = None,
                 cert_auth: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal_ip: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal_port: Optional[pulumi.Input[int]] = None,
                 cookie_max_age: Optional[pulumi.Input[int]] = None,
                 cookie_refresh_div: Optional[pulumi.Input[int]] = None,
                 dev_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingDevRangeArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_auth_cookie: Optional[pulumi.Input[str]] = None,
                 persistent_cookie: Optional[pulumi.Input[str]] = None,
                 sso_auth_scheme: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 user_cert_cas: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingUserCertCaArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AuthenticationSetting resource.
        """
        if active_auth_scheme is not None:
            pulumi.set(__self__, "active_auth_scheme", active_auth_scheme)
        if auth_https is not None:
            pulumi.set(__self__, "auth_https", auth_https)
        if captive_portal is not None:
            pulumi.set(__self__, "captive_portal", captive_portal)
        if captive_portal6 is not None:
            pulumi.set(__self__, "captive_portal6", captive_portal6)
        if captive_portal_ip is not None:
            pulumi.set(__self__, "captive_portal_ip", captive_portal_ip)
        if captive_portal_ip6 is not None:
            pulumi.set(__self__, "captive_portal_ip6", captive_portal_ip6)
        if captive_portal_port is not None:
            pulumi.set(__self__, "captive_portal_port", captive_portal_port)
        if captive_portal_ssl_port is not None:
            pulumi.set(__self__, "captive_portal_ssl_port", captive_portal_ssl_port)
        if captive_portal_type is not None:
            pulumi.set(__self__, "captive_portal_type", captive_portal_type)
        if cert_auth is not None:
            pulumi.set(__self__, "cert_auth", cert_auth)
        if cert_captive_portal is not None:
            pulumi.set(__self__, "cert_captive_portal", cert_captive_portal)
        if cert_captive_portal_ip is not None:
            pulumi.set(__self__, "cert_captive_portal_ip", cert_captive_portal_ip)
        if cert_captive_portal_port is not None:
            pulumi.set(__self__, "cert_captive_portal_port", cert_captive_portal_port)
        if cookie_max_age is not None:
            pulumi.set(__self__, "cookie_max_age", cookie_max_age)
        if cookie_refresh_div is not None:
            pulumi.set(__self__, "cookie_refresh_div", cookie_refresh_div)
        if dev_ranges is not None:
            pulumi.set(__self__, "dev_ranges", dev_ranges)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_auth_cookie is not None:
            pulumi.set(__self__, "ip_auth_cookie", ip_auth_cookie)
        if persistent_cookie is not None:
            pulumi.set(__self__, "persistent_cookie", persistent_cookie)
        if sso_auth_scheme is not None:
            pulumi.set(__self__, "sso_auth_scheme", sso_auth_scheme)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if user_cert_cas is not None:
            pulumi.set(__self__, "user_cert_cas", user_cert_cas)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="activeAuthScheme")
    def active_auth_scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "active_auth_scheme")

    @active_auth_scheme.setter
    def active_auth_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_auth_scheme", value)

    @property
    @pulumi.getter(name="authHttps")
    def auth_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_https")

    @auth_https.setter
    def auth_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_https", value)

    @property
    @pulumi.getter(name="captivePortal")
    def captive_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal")

    @captive_portal.setter
    def captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal", value)

    @property
    @pulumi.getter(name="captivePortal6")
    def captive_portal6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal6")

    @captive_portal6.setter
    def captive_portal6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal6", value)

    @property
    @pulumi.getter(name="captivePortalIp")
    def captive_portal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_ip")

    @captive_portal_ip.setter
    def captive_portal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_ip", value)

    @property
    @pulumi.getter(name="captivePortalIp6")
    def captive_portal_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_ip6")

    @captive_portal_ip6.setter
    def captive_portal_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_ip6", value)

    @property
    @pulumi.getter(name="captivePortalPort")
    def captive_portal_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "captive_portal_port")

    @captive_portal_port.setter
    def captive_portal_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "captive_portal_port", value)

    @property
    @pulumi.getter(name="captivePortalSslPort")
    def captive_portal_ssl_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "captive_portal_ssl_port")

    @captive_portal_ssl_port.setter
    def captive_portal_ssl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "captive_portal_ssl_port", value)

    @property
    @pulumi.getter(name="captivePortalType")
    def captive_portal_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_type")

    @captive_portal_type.setter
    def captive_portal_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_type", value)

    @property
    @pulumi.getter(name="certAuth")
    def cert_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_auth")

    @cert_auth.setter
    def cert_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_auth", value)

    @property
    @pulumi.getter(name="certCaptivePortal")
    def cert_captive_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_captive_portal")

    @cert_captive_portal.setter
    def cert_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_captive_portal", value)

    @property
    @pulumi.getter(name="certCaptivePortalIp")
    def cert_captive_portal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_captive_portal_ip")

    @cert_captive_portal_ip.setter
    def cert_captive_portal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_captive_portal_ip", value)

    @property
    @pulumi.getter(name="certCaptivePortalPort")
    def cert_captive_portal_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cert_captive_portal_port")

    @cert_captive_portal_port.setter
    def cert_captive_portal_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_captive_portal_port", value)

    @property
    @pulumi.getter(name="cookieMaxAge")
    def cookie_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cookie_max_age")

    @cookie_max_age.setter
    def cookie_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cookie_max_age", value)

    @property
    @pulumi.getter(name="cookieRefreshDiv")
    def cookie_refresh_div(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cookie_refresh_div")

    @cookie_refresh_div.setter
    def cookie_refresh_div(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cookie_refresh_div", value)

    @property
    @pulumi.getter(name="devRanges")
    def dev_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingDevRangeArgs']]]]:
        return pulumi.get(self, "dev_ranges")

    @dev_ranges.setter
    def dev_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingDevRangeArgs']]]]):
        pulumi.set(self, "dev_ranges", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipAuthCookie")
    def ip_auth_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_auth_cookie")

    @ip_auth_cookie.setter
    def ip_auth_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_auth_cookie", value)

    @property
    @pulumi.getter(name="persistentCookie")
    def persistent_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "persistent_cookie")

    @persistent_cookie.setter
    def persistent_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_cookie", value)

    @property
    @pulumi.getter(name="ssoAuthScheme")
    def sso_auth_scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_auth_scheme")

    @sso_auth_scheme.setter
    def sso_auth_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_auth_scheme", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="userCertCas")
    def user_cert_cas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingUserCertCaArgs']]]]:
        return pulumi.get(self, "user_cert_cas")

    @user_cert_cas.setter
    def user_cert_cas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingUserCertCaArgs']]]]):
        pulumi.set(self, "user_cert_cas", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _AuthenticationSettingState:
    def __init__(__self__, *,
                 active_auth_scheme: Optional[pulumi.Input[str]] = None,
                 auth_https: Optional[pulumi.Input[str]] = None,
                 captive_portal: Optional[pulumi.Input[str]] = None,
                 captive_portal6: Optional[pulumi.Input[str]] = None,
                 captive_portal_ip: Optional[pulumi.Input[str]] = None,
                 captive_portal_ip6: Optional[pulumi.Input[str]] = None,
                 captive_portal_port: Optional[pulumi.Input[int]] = None,
                 captive_portal_ssl_port: Optional[pulumi.Input[int]] = None,
                 captive_portal_type: Optional[pulumi.Input[str]] = None,
                 cert_auth: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal_ip: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal_port: Optional[pulumi.Input[int]] = None,
                 cookie_max_age: Optional[pulumi.Input[int]] = None,
                 cookie_refresh_div: Optional[pulumi.Input[int]] = None,
                 dev_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingDevRangeArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_auth_cookie: Optional[pulumi.Input[str]] = None,
                 persistent_cookie: Optional[pulumi.Input[str]] = None,
                 sso_auth_scheme: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 user_cert_cas: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingUserCertCaArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AuthenticationSetting resources.
        """
        if active_auth_scheme is not None:
            pulumi.set(__self__, "active_auth_scheme", active_auth_scheme)
        if auth_https is not None:
            pulumi.set(__self__, "auth_https", auth_https)
        if captive_portal is not None:
            pulumi.set(__self__, "captive_portal", captive_portal)
        if captive_portal6 is not None:
            pulumi.set(__self__, "captive_portal6", captive_portal6)
        if captive_portal_ip is not None:
            pulumi.set(__self__, "captive_portal_ip", captive_portal_ip)
        if captive_portal_ip6 is not None:
            pulumi.set(__self__, "captive_portal_ip6", captive_portal_ip6)
        if captive_portal_port is not None:
            pulumi.set(__self__, "captive_portal_port", captive_portal_port)
        if captive_portal_ssl_port is not None:
            pulumi.set(__self__, "captive_portal_ssl_port", captive_portal_ssl_port)
        if captive_portal_type is not None:
            pulumi.set(__self__, "captive_portal_type", captive_portal_type)
        if cert_auth is not None:
            pulumi.set(__self__, "cert_auth", cert_auth)
        if cert_captive_portal is not None:
            pulumi.set(__self__, "cert_captive_portal", cert_captive_portal)
        if cert_captive_portal_ip is not None:
            pulumi.set(__self__, "cert_captive_portal_ip", cert_captive_portal_ip)
        if cert_captive_portal_port is not None:
            pulumi.set(__self__, "cert_captive_portal_port", cert_captive_portal_port)
        if cookie_max_age is not None:
            pulumi.set(__self__, "cookie_max_age", cookie_max_age)
        if cookie_refresh_div is not None:
            pulumi.set(__self__, "cookie_refresh_div", cookie_refresh_div)
        if dev_ranges is not None:
            pulumi.set(__self__, "dev_ranges", dev_ranges)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_auth_cookie is not None:
            pulumi.set(__self__, "ip_auth_cookie", ip_auth_cookie)
        if persistent_cookie is not None:
            pulumi.set(__self__, "persistent_cookie", persistent_cookie)
        if sso_auth_scheme is not None:
            pulumi.set(__self__, "sso_auth_scheme", sso_auth_scheme)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if user_cert_cas is not None:
            pulumi.set(__self__, "user_cert_cas", user_cert_cas)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="activeAuthScheme")
    def active_auth_scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "active_auth_scheme")

    @active_auth_scheme.setter
    def active_auth_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_auth_scheme", value)

    @property
    @pulumi.getter(name="authHttps")
    def auth_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_https")

    @auth_https.setter
    def auth_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_https", value)

    @property
    @pulumi.getter(name="captivePortal")
    def captive_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal")

    @captive_portal.setter
    def captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal", value)

    @property
    @pulumi.getter(name="captivePortal6")
    def captive_portal6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal6")

    @captive_portal6.setter
    def captive_portal6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal6", value)

    @property
    @pulumi.getter(name="captivePortalIp")
    def captive_portal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_ip")

    @captive_portal_ip.setter
    def captive_portal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_ip", value)

    @property
    @pulumi.getter(name="captivePortalIp6")
    def captive_portal_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_ip6")

    @captive_portal_ip6.setter
    def captive_portal_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_ip6", value)

    @property
    @pulumi.getter(name="captivePortalPort")
    def captive_portal_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "captive_portal_port")

    @captive_portal_port.setter
    def captive_portal_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "captive_portal_port", value)

    @property
    @pulumi.getter(name="captivePortalSslPort")
    def captive_portal_ssl_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "captive_portal_ssl_port")

    @captive_portal_ssl_port.setter
    def captive_portal_ssl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "captive_portal_ssl_port", value)

    @property
    @pulumi.getter(name="captivePortalType")
    def captive_portal_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_type")

    @captive_portal_type.setter
    def captive_portal_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_type", value)

    @property
    @pulumi.getter(name="certAuth")
    def cert_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_auth")

    @cert_auth.setter
    def cert_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_auth", value)

    @property
    @pulumi.getter(name="certCaptivePortal")
    def cert_captive_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_captive_portal")

    @cert_captive_portal.setter
    def cert_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_captive_portal", value)

    @property
    @pulumi.getter(name="certCaptivePortalIp")
    def cert_captive_portal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_captive_portal_ip")

    @cert_captive_portal_ip.setter
    def cert_captive_portal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_captive_portal_ip", value)

    @property
    @pulumi.getter(name="certCaptivePortalPort")
    def cert_captive_portal_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cert_captive_portal_port")

    @cert_captive_portal_port.setter
    def cert_captive_portal_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_captive_portal_port", value)

    @property
    @pulumi.getter(name="cookieMaxAge")
    def cookie_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cookie_max_age")

    @cookie_max_age.setter
    def cookie_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cookie_max_age", value)

    @property
    @pulumi.getter(name="cookieRefreshDiv")
    def cookie_refresh_div(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cookie_refresh_div")

    @cookie_refresh_div.setter
    def cookie_refresh_div(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cookie_refresh_div", value)

    @property
    @pulumi.getter(name="devRanges")
    def dev_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingDevRangeArgs']]]]:
        return pulumi.get(self, "dev_ranges")

    @dev_ranges.setter
    def dev_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingDevRangeArgs']]]]):
        pulumi.set(self, "dev_ranges", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipAuthCookie")
    def ip_auth_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_auth_cookie")

    @ip_auth_cookie.setter
    def ip_auth_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_auth_cookie", value)

    @property
    @pulumi.getter(name="persistentCookie")
    def persistent_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "persistent_cookie")

    @persistent_cookie.setter
    def persistent_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_cookie", value)

    @property
    @pulumi.getter(name="ssoAuthScheme")
    def sso_auth_scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_auth_scheme")

    @sso_auth_scheme.setter
    def sso_auth_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_auth_scheme", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="userCertCas")
    def user_cert_cas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingUserCertCaArgs']]]]:
        return pulumi.get(self, "user_cert_cas")

    @user_cert_cas.setter
    def user_cert_cas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationSettingUserCertCaArgs']]]]):
        pulumi.set(self, "user_cert_cas", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class AuthenticationSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_auth_scheme: Optional[pulumi.Input[str]] = None,
                 auth_https: Optional[pulumi.Input[str]] = None,
                 captive_portal: Optional[pulumi.Input[str]] = None,
                 captive_portal6: Optional[pulumi.Input[str]] = None,
                 captive_portal_ip: Optional[pulumi.Input[str]] = None,
                 captive_portal_ip6: Optional[pulumi.Input[str]] = None,
                 captive_portal_port: Optional[pulumi.Input[int]] = None,
                 captive_portal_ssl_port: Optional[pulumi.Input[int]] = None,
                 captive_portal_type: Optional[pulumi.Input[str]] = None,
                 cert_auth: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal_ip: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal_port: Optional[pulumi.Input[int]] = None,
                 cookie_max_age: Optional[pulumi.Input[int]] = None,
                 cookie_refresh_div: Optional[pulumi.Input[int]] = None,
                 dev_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationSettingDevRangeArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_auth_cookie: Optional[pulumi.Input[str]] = None,
                 persistent_cookie: Optional[pulumi.Input[str]] = None,
                 sso_auth_scheme: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 user_cert_cas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationSettingUserCertCaArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AuthenticationSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AuthenticationSettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AuthenticationSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AuthenticationSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthenticationSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_auth_scheme: Optional[pulumi.Input[str]] = None,
                 auth_https: Optional[pulumi.Input[str]] = None,
                 captive_portal: Optional[pulumi.Input[str]] = None,
                 captive_portal6: Optional[pulumi.Input[str]] = None,
                 captive_portal_ip: Optional[pulumi.Input[str]] = None,
                 captive_portal_ip6: Optional[pulumi.Input[str]] = None,
                 captive_portal_port: Optional[pulumi.Input[int]] = None,
                 captive_portal_ssl_port: Optional[pulumi.Input[int]] = None,
                 captive_portal_type: Optional[pulumi.Input[str]] = None,
                 cert_auth: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal_ip: Optional[pulumi.Input[str]] = None,
                 cert_captive_portal_port: Optional[pulumi.Input[int]] = None,
                 cookie_max_age: Optional[pulumi.Input[int]] = None,
                 cookie_refresh_div: Optional[pulumi.Input[int]] = None,
                 dev_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationSettingDevRangeArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_auth_cookie: Optional[pulumi.Input[str]] = None,
                 persistent_cookie: Optional[pulumi.Input[str]] = None,
                 sso_auth_scheme: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 user_cert_cas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationSettingUserCertCaArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthenticationSettingArgs.__new__(AuthenticationSettingArgs)

            __props__.__dict__["active_auth_scheme"] = active_auth_scheme
            __props__.__dict__["auth_https"] = auth_https
            __props__.__dict__["captive_portal"] = captive_portal
            __props__.__dict__["captive_portal6"] = captive_portal6
            __props__.__dict__["captive_portal_ip"] = captive_portal_ip
            __props__.__dict__["captive_portal_ip6"] = captive_portal_ip6
            __props__.__dict__["captive_portal_port"] = captive_portal_port
            __props__.__dict__["captive_portal_ssl_port"] = captive_portal_ssl_port
            __props__.__dict__["captive_portal_type"] = captive_portal_type
            __props__.__dict__["cert_auth"] = cert_auth
            __props__.__dict__["cert_captive_portal"] = cert_captive_portal
            __props__.__dict__["cert_captive_portal_ip"] = cert_captive_portal_ip
            __props__.__dict__["cert_captive_portal_port"] = cert_captive_portal_port
            __props__.__dict__["cookie_max_age"] = cookie_max_age
            __props__.__dict__["cookie_refresh_div"] = cookie_refresh_div
            __props__.__dict__["dev_ranges"] = dev_ranges
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ip_auth_cookie"] = ip_auth_cookie
            __props__.__dict__["persistent_cookie"] = persistent_cookie
            __props__.__dict__["sso_auth_scheme"] = sso_auth_scheme
            __props__.__dict__["update_time"] = update_time
            __props__.__dict__["user_cert_cas"] = user_cert_cas
            __props__.__dict__["vdomparam"] = vdomparam
        super(AuthenticationSetting, __self__).__init__(
            'fortios:index/authenticationSetting:AuthenticationSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_auth_scheme: Optional[pulumi.Input[str]] = None,
            auth_https: Optional[pulumi.Input[str]] = None,
            captive_portal: Optional[pulumi.Input[str]] = None,
            captive_portal6: Optional[pulumi.Input[str]] = None,
            captive_portal_ip: Optional[pulumi.Input[str]] = None,
            captive_portal_ip6: Optional[pulumi.Input[str]] = None,
            captive_portal_port: Optional[pulumi.Input[int]] = None,
            captive_portal_ssl_port: Optional[pulumi.Input[int]] = None,
            captive_portal_type: Optional[pulumi.Input[str]] = None,
            cert_auth: Optional[pulumi.Input[str]] = None,
            cert_captive_portal: Optional[pulumi.Input[str]] = None,
            cert_captive_portal_ip: Optional[pulumi.Input[str]] = None,
            cert_captive_portal_port: Optional[pulumi.Input[int]] = None,
            cookie_max_age: Optional[pulumi.Input[int]] = None,
            cookie_refresh_div: Optional[pulumi.Input[int]] = None,
            dev_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationSettingDevRangeArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ip_auth_cookie: Optional[pulumi.Input[str]] = None,
            persistent_cookie: Optional[pulumi.Input[str]] = None,
            sso_auth_scheme: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            user_cert_cas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationSettingUserCertCaArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'AuthenticationSetting':
        """
        Get an existing AuthenticationSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthenticationSettingState.__new__(_AuthenticationSettingState)

        __props__.__dict__["active_auth_scheme"] = active_auth_scheme
        __props__.__dict__["auth_https"] = auth_https
        __props__.__dict__["captive_portal"] = captive_portal
        __props__.__dict__["captive_portal6"] = captive_portal6
        __props__.__dict__["captive_portal_ip"] = captive_portal_ip
        __props__.__dict__["captive_portal_ip6"] = captive_portal_ip6
        __props__.__dict__["captive_portal_port"] = captive_portal_port
        __props__.__dict__["captive_portal_ssl_port"] = captive_portal_ssl_port
        __props__.__dict__["captive_portal_type"] = captive_portal_type
        __props__.__dict__["cert_auth"] = cert_auth
        __props__.__dict__["cert_captive_portal"] = cert_captive_portal
        __props__.__dict__["cert_captive_portal_ip"] = cert_captive_portal_ip
        __props__.__dict__["cert_captive_portal_port"] = cert_captive_portal_port
        __props__.__dict__["cookie_max_age"] = cookie_max_age
        __props__.__dict__["cookie_refresh_div"] = cookie_refresh_div
        __props__.__dict__["dev_ranges"] = dev_ranges
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ip_auth_cookie"] = ip_auth_cookie
        __props__.__dict__["persistent_cookie"] = persistent_cookie
        __props__.__dict__["sso_auth_scheme"] = sso_auth_scheme
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["user_cert_cas"] = user_cert_cas
        __props__.__dict__["vdomparam"] = vdomparam
        return AuthenticationSetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeAuthScheme")
    def active_auth_scheme(self) -> pulumi.Output[str]:
        return pulumi.get(self, "active_auth_scheme")

    @property
    @pulumi.getter(name="authHttps")
    def auth_https(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_https")

    @property
    @pulumi.getter(name="captivePortal")
    def captive_portal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "captive_portal")

    @property
    @pulumi.getter(name="captivePortal6")
    def captive_portal6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "captive_portal6")

    @property
    @pulumi.getter(name="captivePortalIp")
    def captive_portal_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "captive_portal_ip")

    @property
    @pulumi.getter(name="captivePortalIp6")
    def captive_portal_ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "captive_portal_ip6")

    @property
    @pulumi.getter(name="captivePortalPort")
    def captive_portal_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "captive_portal_port")

    @property
    @pulumi.getter(name="captivePortalSslPort")
    def captive_portal_ssl_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "captive_portal_ssl_port")

    @property
    @pulumi.getter(name="captivePortalType")
    def captive_portal_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "captive_portal_type")

    @property
    @pulumi.getter(name="certAuth")
    def cert_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cert_auth")

    @property
    @pulumi.getter(name="certCaptivePortal")
    def cert_captive_portal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cert_captive_portal")

    @property
    @pulumi.getter(name="certCaptivePortalIp")
    def cert_captive_portal_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cert_captive_portal_ip")

    @property
    @pulumi.getter(name="certCaptivePortalPort")
    def cert_captive_portal_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cert_captive_portal_port")

    @property
    @pulumi.getter(name="cookieMaxAge")
    def cookie_max_age(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cookie_max_age")

    @property
    @pulumi.getter(name="cookieRefreshDiv")
    def cookie_refresh_div(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cookie_refresh_div")

    @property
    @pulumi.getter(name="devRanges")
    def dev_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.AuthenticationSettingDevRange']]]:
        return pulumi.get(self, "dev_ranges")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ipAuthCookie")
    def ip_auth_cookie(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_auth_cookie")

    @property
    @pulumi.getter(name="persistentCookie")
    def persistent_cookie(self) -> pulumi.Output[str]:
        return pulumi.get(self, "persistent_cookie")

    @property
    @pulumi.getter(name="ssoAuthScheme")
    def sso_auth_scheme(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sso_auth_scheme")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userCertCas")
    def user_cert_cas(self) -> pulumi.Output[Optional[Sequence['outputs.AuthenticationSettingUserCertCa']]]:
        return pulumi.get(self, "user_cert_cas")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

