# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AntivirusProfileCifsArgs',
    'AntivirusProfileContentDisarmArgs',
    'AntivirusProfileExternalBlocklistArgs',
    'AntivirusProfileFtpArgs',
    'AntivirusProfileHttpArgs',
    'AntivirusProfileImapArgs',
    'AntivirusProfileMapiArgs',
    'AntivirusProfileNacQuarArgs',
    'AntivirusProfileNntpArgs',
    'AntivirusProfileOutbreakPreventionArgs',
    'AntivirusProfilePop3Args',
    'AntivirusProfileSmbArgs',
    'AntivirusProfileSmtpArgs',
    'AntivirusProfileSshArgs',
    'ApplicationGroupApplicationArgs',
    'ApplicationGroupCategoryArgs',
    'ApplicationGroupRiskArgs',
    'ApplicationListDefaultNetworkServiceArgs',
    'ApplicationListEntryArgs',
    'ApplicationListEntryApplicationArgs',
    'ApplicationListEntryCategoryArgs',
    'ApplicationListEntryExclusionArgs',
    'ApplicationListEntryParameterArgs',
    'ApplicationListEntryParameterMemberArgs',
    'ApplicationListEntryRiskArgs',
    'ApplicationListEntrySubCategoryArgs',
    'ApplicationNameMetadataArgs',
    'ApplicationNameParameterArgs',
    'AuthenticationRuleDstaddr6Args',
    'AuthenticationRuleDstaddrArgs',
    'AuthenticationRuleSrcaddr6Args',
    'AuthenticationRuleSrcaddrArgs',
    'AuthenticationRuleSrcintfArgs',
    'AuthenticationSchemeUserDatabaseArgs',
    'AuthenticationSettingDevRangeArgs',
    'AuthenticationSettingUserCertCaArgs',
    'CifsProfileFileFilterArgs',
    'CifsProfileFileFilterEntryArgs',
    'CifsProfileFileFilterEntryFileTypeArgs',
    'CifsProfileServerKeytabArgs',
    'DlpDictionaryEntryArgs',
    'DlpFilepatternEntryArgs',
    'DlpProfileRuleArgs',
    'DlpProfileRuleSensitivityArgs',
    'DlpProfileRuleSensorArgs',
    'DlpSensorEntryArgs',
    'DlpSensorFilterArgs',
    'DlpSensorFilterFpSensitivityArgs',
    'DlpSensorFilterSensitivityArgs',
    'DnsfilterDomainFilterEntryArgs',
    'DnsfilterProfileDnsTranslationArgs',
    'DnsfilterProfileDomainFilterArgs',
    'DnsfilterProfileExternalIpBlocklistArgs',
    'DnsfilterProfileFtgdDnsArgs',
    'DnsfilterProfileFtgdDnsFilterArgs',
    'DpdkGlobalInterfaceArgs',
    'EmailfilterBlockAllowListEntryArgs',
    'EmailfilterBwlEntryArgs',
    'EmailfilterBwordEntryArgs',
    'EmailfilterDnsblEntryArgs',
    'EmailfilterIptrustEntryArgs',
    'EmailfilterMheaderEntryArgs',
    'EmailfilterProfileFileFilterArgs',
    'EmailfilterProfileFileFilterEntryArgs',
    'EmailfilterProfileFileFilterEntryFileTypeArgs',
    'EmailfilterProfileGmailArgs',
    'EmailfilterProfileImapArgs',
    'EmailfilterProfileMapiArgs',
    'EmailfilterProfileMsnHotmailArgs',
    'EmailfilterProfileOtherWebmailsArgs',
    'EmailfilterProfilePop3Args',
    'EmailfilterProfileSmtpArgs',
    'EmailfilterProfileYahooMailArgs',
    'EndpointControlProfileDeviceGroupArgs',
    'EndpointControlProfileForticlientAndroidSettingsArgs',
    'EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs',
    'EndpointControlProfileForticlientIosSettingsArgs',
    'EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs',
    'EndpointControlProfileForticlientWinmacSettingsArgs',
    'EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs',
    'EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs',
    'EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs',
    'EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs',
    'EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs',
    'EndpointControlProfileOnNetAddrArgs',
    'EndpointControlProfileSrcAddrArgs',
    'EndpointControlProfileUserArgs',
    'EndpointControlProfileUserGroupArgs',
    'ExtenderControllerExtender1ControllerReportArgs',
    'ExtenderControllerExtender1Modem1Args',
    'ExtenderControllerExtender1Modem1AutoSwitchArgs',
    'ExtenderControllerExtender1Modem2Args',
    'ExtenderControllerExtender1Modem2AutoSwitchArgs',
    'ExtenderControllerExtenderControllerReportArgs',
    'ExtenderControllerExtenderModem1Args',
    'ExtenderControllerExtenderModem1AutoSwitchArgs',
    'ExtenderControllerExtenderModem2Args',
    'ExtenderControllerExtenderModem2AutoSwitchArgs',
    'ExtenderControllerExtenderProfileCellularArgs',
    'ExtenderControllerExtenderProfileCellularControllerReportArgs',
    'ExtenderControllerExtenderProfileCellularDataplanArgs',
    'ExtenderControllerExtenderProfileCellularModem1Args',
    'ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs',
    'ExtenderControllerExtenderProfileCellularModem2Args',
    'ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs',
    'ExtenderControllerExtenderProfileCellularSmsNotificationArgs',
    'ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs',
    'ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs',
    'ExtenderControllerExtenderProfileLanExtensionArgs',
    'ExtenderControllerExtenderProfileLanExtensionBackhaulArgs',
    'ExtenderControllerExtenderWanExtensionArgs',
    'ExtensionControllerExtenderProfileCellularArgs',
    'ExtensionControllerExtenderProfileCellularControllerReportArgs',
    'ExtensionControllerExtenderProfileCellularDataplanArgs',
    'ExtensionControllerExtenderProfileCellularModem1Args',
    'ExtensionControllerExtenderProfileCellularModem1AutoSwitchArgs',
    'ExtensionControllerExtenderProfileCellularModem2Args',
    'ExtensionControllerExtenderProfileCellularModem2AutoSwitchArgs',
    'ExtensionControllerExtenderProfileCellularSmsNotificationArgs',
    'ExtensionControllerExtenderProfileCellularSmsNotificationAlertArgs',
    'ExtensionControllerExtenderProfileCellularSmsNotificationReceiverArgs',
    'ExtensionControllerExtenderProfileLanExtensionArgs',
    'ExtensionControllerExtenderProfileLanExtensionBackhaulArgs',
    'ExtensionControllerExtenderWanExtensionArgs',
    'ExtensionControllerFortigateProfileLanExtensionArgs',
    'FileFilterProfileRuleArgs',
    'FileFilterProfileRuleFileTypeArgs',
    'FirewallAccessProxy6ApiGateway6Args',
    'FirewallAccessProxy6ApiGateway6ApplicationArgs',
    'FirewallAccessProxy6ApiGateway6RealserverArgs',
    'FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs',
    'FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs',
    'FirewallAccessProxy6ApiGatewayArgs',
    'FirewallAccessProxy6ApiGatewayApplicationArgs',
    'FirewallAccessProxy6ApiGatewayRealserverArgs',
    'FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs',
    'FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs',
    'FirewallAccessProxyApiGateway6Args',
    'FirewallAccessProxyApiGateway6ApplicationArgs',
    'FirewallAccessProxyApiGateway6RealserverArgs',
    'FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs',
    'FirewallAccessProxyApiGateway6SslCipherSuiteArgs',
    'FirewallAccessProxyApiGatewayArgs',
    'FirewallAccessProxyApiGatewayApplicationArgs',
    'FirewallAccessProxyApiGatewayRealserverArgs',
    'FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs',
    'FirewallAccessProxyApiGatewaySslCipherSuiteArgs',
    'FirewallAccessProxySshClientCertCertExtensionArgs',
    'FirewallAddress6ListArgs',
    'FirewallAddress6MacaddrArgs',
    'FirewallAddress6SubnetSegmentArgs',
    'FirewallAddress6TaggingArgs',
    'FirewallAddress6TaggingTagArgs',
    'FirewallAddress6TemplateSubnetSegmentArgs',
    'FirewallAddress6TemplateSubnetSegmentValueArgs',
    'FirewallAddressFssoGroupArgs',
    'FirewallAddressListArgs',
    'FirewallAddressMacaddrArgs',
    'FirewallAddressTaggingArgs',
    'FirewallAddressTaggingTagArgs',
    'FirewallAddrgrp6ExcludeMemberArgs',
    'FirewallAddrgrp6MemberArgs',
    'FirewallAddrgrp6TaggingArgs',
    'FirewallAddrgrp6TaggingTagArgs',
    'FirewallAddrgrpExcludeMemberArgs',
    'FirewallAddrgrpMemberArgs',
    'FirewallAddrgrpTaggingArgs',
    'FirewallAddrgrpTaggingTagArgs',
    'FirewallAuthPortalGroupArgs',
    'FirewallCentralSnatMapDstAddr6Args',
    'FirewallCentralSnatMapDstAddrArgs',
    'FirewallCentralSnatMapDstintfArgs',
    'FirewallCentralSnatMapNatIppool6Args',
    'FirewallCentralSnatMapNatIppoolArgs',
    'FirewallCentralSnatMapOrigAddr6Args',
    'FirewallCentralSnatMapOrigAddrArgs',
    'FirewallCentralSnatMapSrcintfArgs',
    'FirewallConsolidatedPolicyAppCategoryArgs',
    'FirewallConsolidatedPolicyAppGroupArgs',
    'FirewallConsolidatedPolicyApplicationArgs',
    'FirewallConsolidatedPolicyDstaddr4Args',
    'FirewallConsolidatedPolicyDstaddr6Args',
    'FirewallConsolidatedPolicyDstintfArgs',
    'FirewallConsolidatedPolicyFssoGroupArgs',
    'FirewallConsolidatedPolicyGroupArgs',
    'FirewallConsolidatedPolicyInternetServiceCustomArgs',
    'FirewallConsolidatedPolicyInternetServiceCustomGroupArgs',
    'FirewallConsolidatedPolicyInternetServiceGroupArgs',
    'FirewallConsolidatedPolicyInternetServiceIdArgs',
    'FirewallConsolidatedPolicyInternetServiceNameArgs',
    'FirewallConsolidatedPolicyInternetServiceSrcCustomArgs',
    'FirewallConsolidatedPolicyInternetServiceSrcCustomGroupArgs',
    'FirewallConsolidatedPolicyInternetServiceSrcGroupArgs',
    'FirewallConsolidatedPolicyInternetServiceSrcIdArgs',
    'FirewallConsolidatedPolicyInternetServiceSrcNameArgs',
    'FirewallConsolidatedPolicyPoolname4Args',
    'FirewallConsolidatedPolicyPoolname6Args',
    'FirewallConsolidatedPolicyServiceArgs',
    'FirewallConsolidatedPolicySrcaddr4Args',
    'FirewallConsolidatedPolicySrcaddr6Args',
    'FirewallConsolidatedPolicySrcintfArgs',
    'FirewallConsolidatedPolicyUrlCategoryArgs',
    'FirewallConsolidatedPolicyUserArgs',
    'FirewallCountryRegionArgs',
    'FirewallDecryptedTrafficMirrorInterfaceArgs',
    'FirewallDosPolicy6AnomalyArgs',
    'FirewallDosPolicy6DstaddrArgs',
    'FirewallDosPolicy6ServiceArgs',
    'FirewallDosPolicy6SrcaddrArgs',
    'FirewallDosPolicyAnomalyArgs',
    'FirewallDosPolicyDstaddrArgs',
    'FirewallDosPolicyServiceArgs',
    'FirewallDosPolicySrcaddrArgs',
    'FirewallIdentityBasedRouteRuleArgs',
    'FirewallIdentityBasedRouteRuleGroupArgs',
    'FirewallInterfacePolicy6Dstaddr6Args',
    'FirewallInterfacePolicy6Service6Args',
    'FirewallInterfacePolicy6Srcaddr6Args',
    'FirewallInterfacePolicyDstaddrArgs',
    'FirewallInterfacePolicyServiceArgs',
    'FirewallInterfacePolicySrcaddrArgs',
    'FirewallInternetServiceAdditionEntryArgs',
    'FirewallInternetServiceAdditionEntryPortRangeArgs',
    'FirewallInternetServiceCustomEntryArgs',
    'FirewallInternetServiceCustomEntryDst6Args',
    'FirewallInternetServiceCustomEntryDstArgs',
    'FirewallInternetServiceCustomEntryPortRangeArgs',
    'FirewallInternetServiceCustomGroupMemberArgs',
    'FirewallInternetServiceDefinitionEntryArgs',
    'FirewallInternetServiceDefinitionEntryPortRangeArgs',
    'FirewallInternetServiceExtensionDisableEntryArgs',
    'FirewallInternetServiceExtensionDisableEntryIp6RangeArgs',
    'FirewallInternetServiceExtensionDisableEntryIpRangeArgs',
    'FirewallInternetServiceExtensionDisableEntryPortRangeArgs',
    'FirewallInternetServiceExtensionEntryArgs',
    'FirewallInternetServiceExtensionEntryDst6Args',
    'FirewallInternetServiceExtensionEntryDstArgs',
    'FirewallInternetServiceExtensionEntryPortRangeArgs',
    'FirewallInternetServiceGroupMemberArgs',
    'FirewallInternetServiceSubappSubAppArgs',
    'FirewallLocalInPolicy6DstaddrArgs',
    'FirewallLocalInPolicy6ServiceArgs',
    'FirewallLocalInPolicy6SrcaddrArgs',
    'FirewallLocalInPolicyDstaddrArgs',
    'FirewallLocalInPolicyServiceArgs',
    'FirewallLocalInPolicySrcaddrArgs',
    'FirewallMulticastAddress6TaggingArgs',
    'FirewallMulticastAddress6TaggingTagArgs',
    'FirewallMulticastAddressTaggingArgs',
    'FirewallMulticastAddressTaggingTagArgs',
    'FirewallMulticastPolicy6DstaddrArgs',
    'FirewallMulticastPolicy6SrcaddrArgs',
    'FirewallMulticastPolicyDstaddrArgs',
    'FirewallMulticastPolicySrcaddrArgs',
    'FirewallPolicy46DstaddrArgs',
    'FirewallPolicy46PoolnameArgs',
    'FirewallPolicy46ServiceArgs',
    'FirewallPolicy46SrcaddrArgs',
    'FirewallPolicy64DstaddrArgs',
    'FirewallPolicy64PoolnameArgs',
    'FirewallPolicy64ServiceArgs',
    'FirewallPolicy64SrcaddrArgs',
    'FirewallPolicy6AppCategoryArgs',
    'FirewallPolicy6AppGroupArgs',
    'FirewallPolicy6ApplicationArgs',
    'FirewallPolicy6CustomLogFieldArgs',
    'FirewallPolicy6DeviceArgs',
    'FirewallPolicy6DstaddrArgs',
    'FirewallPolicy6DstintfArgs',
    'FirewallPolicy6FssoGroupArgs',
    'FirewallPolicy6GroupArgs',
    'FirewallPolicy6PoolnameArgs',
    'FirewallPolicy6ServiceArgs',
    'FirewallPolicy6SrcaddrArgs',
    'FirewallPolicy6SrcintfArgs',
    'FirewallPolicy6SslMirrorIntfArgs',
    'FirewallPolicy6UrlCategoryArgs',
    'FirewallPolicy6UserArgs',
    'FirewallPolicyAppCategoryArgs',
    'FirewallPolicyAppGroupArgs',
    'FirewallPolicyApplicationArgs',
    'FirewallPolicyCustomLogFieldArgs',
    'FirewallPolicyDeviceArgs',
    'FirewallPolicyDstaddr6Args',
    'FirewallPolicyDstaddrArgs',
    'FirewallPolicyDstintfArgs',
    'FirewallPolicyFssoGroupArgs',
    'FirewallPolicyGroupArgs',
    'FirewallPolicyInternetService6CustomArgs',
    'FirewallPolicyInternetService6CustomGroupArgs',
    'FirewallPolicyInternetService6GroupArgs',
    'FirewallPolicyInternetService6NameArgs',
    'FirewallPolicyInternetService6SrcCustomArgs',
    'FirewallPolicyInternetService6SrcCustomGroupArgs',
    'FirewallPolicyInternetService6SrcGroupArgs',
    'FirewallPolicyInternetService6SrcNameArgs',
    'FirewallPolicyInternetServiceCustomArgs',
    'FirewallPolicyInternetServiceCustomGroupArgs',
    'FirewallPolicyInternetServiceGroupArgs',
    'FirewallPolicyInternetServiceIdArgs',
    'FirewallPolicyInternetServiceNameArgs',
    'FirewallPolicyInternetServiceSrcCustomArgs',
    'FirewallPolicyInternetServiceSrcCustomGroupArgs',
    'FirewallPolicyInternetServiceSrcGroupArgs',
    'FirewallPolicyInternetServiceSrcIdArgs',
    'FirewallPolicyInternetServiceSrcNameArgs',
    'FirewallPolicyNetworkServiceDynamicArgs',
    'FirewallPolicyNetworkServiceSrcDynamicArgs',
    'FirewallPolicyNtlmEnabledBrowserArgs',
    'FirewallPolicyPcpPoolnameArgs',
    'FirewallPolicyPoolname6Args',
    'FirewallPolicyPoolnameArgs',
    'FirewallPolicyRtpAddrArgs',
    'FirewallPolicyServiceArgs',
    'FirewallPolicySgtArgs',
    'FirewallPolicySrcVendorMacArgs',
    'FirewallPolicySrcaddr6Args',
    'FirewallPolicySrcaddrArgs',
    'FirewallPolicySrcintfArgs',
    'FirewallPolicySslMirrorIntfArgs',
    'FirewallPolicyUrlCategoryArgs',
    'FirewallPolicyUserArgs',
    'FirewallPolicyZtnaEmsTagArgs',
    'FirewallPolicyZtnaEmsTagSecondaryArgs',
    'FirewallPolicyZtnaGeoTagArgs',
    'FirewallProfileProtocolOptionsCifsArgs',
    'FirewallProfileProtocolOptionsCifsServerKeytabArgs',
    'FirewallProfileProtocolOptionsDnsArgs',
    'FirewallProfileProtocolOptionsFtpArgs',
    'FirewallProfileProtocolOptionsHttpArgs',
    'FirewallProfileProtocolOptionsImapArgs',
    'FirewallProfileProtocolOptionsMailSignatureArgs',
    'FirewallProfileProtocolOptionsMapiArgs',
    'FirewallProfileProtocolOptionsNntpArgs',
    'FirewallProfileProtocolOptionsPop3Args',
    'FirewallProfileProtocolOptionsSmtpArgs',
    'FirewallProfileProtocolOptionsSshArgs',
    'FirewallProxyAddressApplicationArgs',
    'FirewallProxyAddressCategoryArgs',
    'FirewallProxyAddressHeaderGroupArgs',
    'FirewallProxyAddressTaggingArgs',
    'FirewallProxyAddressTaggingTagArgs',
    'FirewallProxyAddrgrpMemberArgs',
    'FirewallProxyAddrgrpTaggingArgs',
    'FirewallProxyAddrgrpTaggingTagArgs',
    'FirewallProxyPolicyAccessProxy6Args',
    'FirewallProxyPolicyAccessProxyArgs',
    'FirewallProxyPolicyDstaddr6Args',
    'FirewallProxyPolicyDstaddrArgs',
    'FirewallProxyPolicyDstintfArgs',
    'FirewallProxyPolicyGroupArgs',
    'FirewallProxyPolicyInternetService6CustomArgs',
    'FirewallProxyPolicyInternetService6CustomGroupArgs',
    'FirewallProxyPolicyInternetService6GroupArgs',
    'FirewallProxyPolicyInternetService6NameArgs',
    'FirewallProxyPolicyInternetServiceCustomArgs',
    'FirewallProxyPolicyInternetServiceCustomGroupArgs',
    'FirewallProxyPolicyInternetServiceGroupArgs',
    'FirewallProxyPolicyInternetServiceIdArgs',
    'FirewallProxyPolicyInternetServiceNameArgs',
    'FirewallProxyPolicyPoolnameArgs',
    'FirewallProxyPolicyServiceArgs',
    'FirewallProxyPolicySrcaddr6Args',
    'FirewallProxyPolicySrcaddrArgs',
    'FirewallProxyPolicySrcintfArgs',
    'FirewallProxyPolicyUserArgs',
    'FirewallProxyPolicyZtnaEmsTagArgs',
    'FirewallRegionCityArgs',
    'FirewallScheduleGroupMemberArgs',
    'FirewallSecurityPolicyAppCategoryArgs',
    'FirewallSecurityPolicyAppGroupArgs',
    'FirewallSecurityPolicyApplicationArgs',
    'FirewallSecurityPolicyDstaddr4Args',
    'FirewallSecurityPolicyDstaddr6Args',
    'FirewallSecurityPolicyDstaddrArgs',
    'FirewallSecurityPolicyDstintfArgs',
    'FirewallSecurityPolicyFssoGroupArgs',
    'FirewallSecurityPolicyGroupArgs',
    'FirewallSecurityPolicyInternetService6CustomArgs',
    'FirewallSecurityPolicyInternetService6CustomGroupArgs',
    'FirewallSecurityPolicyInternetService6GroupArgs',
    'FirewallSecurityPolicyInternetService6NameArgs',
    'FirewallSecurityPolicyInternetService6SrcCustomArgs',
    'FirewallSecurityPolicyInternetService6SrcCustomGroupArgs',
    'FirewallSecurityPolicyInternetService6SrcGroupArgs',
    'FirewallSecurityPolicyInternetService6SrcNameArgs',
    'FirewallSecurityPolicyInternetServiceCustomArgs',
    'FirewallSecurityPolicyInternetServiceCustomGroupArgs',
    'FirewallSecurityPolicyInternetServiceGroupArgs',
    'FirewallSecurityPolicyInternetServiceIdArgs',
    'FirewallSecurityPolicyInternetServiceNameArgs',
    'FirewallSecurityPolicyInternetServiceSrcCustomArgs',
    'FirewallSecurityPolicyInternetServiceSrcCustomGroupArgs',
    'FirewallSecurityPolicyInternetServiceSrcGroupArgs',
    'FirewallSecurityPolicyInternetServiceSrcIdArgs',
    'FirewallSecurityPolicyInternetServiceSrcNameArgs',
    'FirewallSecurityPolicySeqStatePolicyListArgs',
    'FirewallSecurityPolicyServiceArgs',
    'FirewallSecurityPolicySortStatePolicyListArgs',
    'FirewallSecurityPolicySrcaddr4Args',
    'FirewallSecurityPolicySrcaddr6Args',
    'FirewallSecurityPolicySrcaddrArgs',
    'FirewallSecurityPolicySrcintfArgs',
    'FirewallSecurityPolicyUrlCategoryArgs',
    'FirewallSecurityPolicyUserArgs',
    'FirewallServiceCustomAppCategoryArgs',
    'FirewallServiceCustomApplicationArgs',
    'FirewallServiceGroupMemberArgs',
    'FirewallShapingPolicyAppCategoryArgs',
    'FirewallShapingPolicyAppGroupArgs',
    'FirewallShapingPolicyApplicationArgs',
    'FirewallShapingPolicyDstaddr6Args',
    'FirewallShapingPolicyDstaddrArgs',
    'FirewallShapingPolicyDstintfArgs',
    'FirewallShapingPolicyGroupArgs',
    'FirewallShapingPolicyInternetServiceCustomArgs',
    'FirewallShapingPolicyInternetServiceCustomGroupArgs',
    'FirewallShapingPolicyInternetServiceGroupArgs',
    'FirewallShapingPolicyInternetServiceIdArgs',
    'FirewallShapingPolicyInternetServiceNameArgs',
    'FirewallShapingPolicyInternetServiceSrcCustomArgs',
    'FirewallShapingPolicyInternetServiceSrcCustomGroupArgs',
    'FirewallShapingPolicyInternetServiceSrcGroupArgs',
    'FirewallShapingPolicyInternetServiceSrcIdArgs',
    'FirewallShapingPolicyInternetServiceSrcNameArgs',
    'FirewallShapingPolicyServiceArgs',
    'FirewallShapingPolicySrcaddr6Args',
    'FirewallShapingPolicySrcaddrArgs',
    'FirewallShapingPolicySrcintfArgs',
    'FirewallShapingPolicyUrlCategoryArgs',
    'FirewallShapingPolicyUserArgs',
    'FirewallShapingProfileShapingEntryArgs',
    'FirewallSnifferAnomalyArgs',
    'FirewallSnifferIpThreatfeedArgs',
    'FirewallSslSshProfileDotArgs',
    'FirewallSslSshProfileFtpsArgs',
    'FirewallSslSshProfileHttpsArgs',
    'FirewallSslSshProfileImapsArgs',
    'FirewallSslSshProfilePop3sArgs',
    'FirewallSslSshProfileSmtpsArgs',
    'FirewallSslSshProfileSshArgs',
    'FirewallSslSshProfileSslArgs',
    'FirewallSslSshProfileSslExemptArgs',
    'FirewallSslSshProfileSslServerArgs',
    'FirewallTtlPolicyServiceArgs',
    'FirewallTtlPolicySrcaddrArgs',
    'FirewallVip46MonitorArgs',
    'FirewallVip46RealserverArgs',
    'FirewallVip46SrcFilterArgs',
    'FirewallVip46SrcintfFilterArgs',
    'FirewallVip64MonitorArgs',
    'FirewallVip64RealserverArgs',
    'FirewallVip64SrcFilterArgs',
    'FirewallVip6MonitorArgs',
    'FirewallVip6RealserverArgs',
    'FirewallVip6SrcFilterArgs',
    'FirewallVip6SslCipherSuiteArgs',
    'FirewallVip6SslServerCipherSuiteArgs',
    'FirewallVipExtaddrArgs',
    'FirewallVipMappedipArgs',
    'FirewallVipMonitorArgs',
    'FirewallVipRealserverArgs',
    'FirewallVipServiceArgs',
    'FirewallVipSrcFilterArgs',
    'FirewallVipSrcintfFilterArgs',
    'FirewallVipSslCipherSuiteArgs',
    'FirewallVipSslServerCipherSuiteArgs',
    'FirewallVipgrp46MemberArgs',
    'FirewallVipgrp64MemberArgs',
    'FirewallVipgrp6MemberArgs',
    'FirewallVipgrpMemberArgs',
    'FirewallWildcardFqdnGroupMemberArgs',
    'IcapProfileIcapHeaderArgs',
    'IcapProfileRespmodForwardRuleArgs',
    'IcapProfileRespmodForwardRuleHeaderGroupArgs',
    'IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs',
    'IcapServerGroupServerListArgs',
    'IpsDecoderParameterArgs',
    'IpsGlobalTlsActiveProbeArgs',
    'IpsRuleMetadataArgs',
    'IpsSensorEntryArgs',
    'IpsSensorEntryCfeArgs',
    'IpsSensorEntryExemptIpArgs',
    'IpsSensorEntryRuleArgs',
    'IpsSensorEntryVulnTypeArgs',
    'IpsSensorFilterArgs',
    'IpsSensorOverrideArgs',
    'IpsSensorOverrideExemptIpArgs',
    'LogDiskFilterFreeStyleArgs',
    'LogFortianalyzer2FilterFreeStyleArgs',
    'LogFortianalyzer2OverrideFilterFreeStyleArgs',
    'LogFortianalyzer2OverrideSettingSerialArgs',
    'LogFortianalyzer2SettingSerialArgs',
    'LogFortianalyzer3FilterFreeStyleArgs',
    'LogFortianalyzer3OverrideFilterFreeStyleArgs',
    'LogFortianalyzer3OverrideSettingSerialArgs',
    'LogFortianalyzer3SettingSerialArgs',
    'LogFortianalyzerCloudFilterFreeStyleArgs',
    'LogFortianalyzerCloudOverrideFilterFreeStyleArgs',
    'LogFortianalyzerCloudSettingSerialArgs',
    'LogFortianalyzerFilterFreeStyleArgs',
    'LogFortianalyzerOverrideFilterFreeStyleArgs',
    'LogFortianalyzerOverrideSettingSerialArgs',
    'LogFortianalyzerSettingSerialArgs',
    'LogFortiguardFilterFreeStyleArgs',
    'LogFortiguardOverrideFilterFreeStyleArgs',
    'LogMemoryFilterFreeStyleArgs',
    'LogNullDeviceFilterFreeStyleArgs',
    'LogSettingCustomLogFieldArgs',
    'LogSyslogd2FilterFreeStyleArgs',
    'LogSyslogd2OverrideFilterFreeStyleArgs',
    'LogSyslogd2OverrideSettingCustomFieldNameArgs',
    'LogSyslogd2SettingCustomFieldNameArgs',
    'LogSyslogd3FilterFreeStyleArgs',
    'LogSyslogd3OverrideFilterFreeStyleArgs',
    'LogSyslogd3OverrideSettingCustomFieldNameArgs',
    'LogSyslogd3SettingCustomFieldNameArgs',
    'LogSyslogd4FilterFreeStyleArgs',
    'LogSyslogd4OverrideFilterFreeStyleArgs',
    'LogSyslogd4OverrideSettingCustomFieldNameArgs',
    'LogSyslogd4SettingCustomFieldNameArgs',
    'LogSyslogdFilterFreeStyleArgs',
    'LogSyslogdOverrideFilterFreeStyleArgs',
    'LogSyslogdOverrideSettingCustomFieldNameArgs',
    'LogSyslogdSettingCustomFieldNameArgs',
    'LogThreatWeightApplicationArgs',
    'LogThreatWeightGeolocationArgs',
    'LogThreatWeightIpsArgs',
    'LogThreatWeightLevelArgs',
    'LogThreatWeightMalwareArgs',
    'LogThreatWeightWebArgs',
    'LogWebtrendsFilterFreeStyleArgs',
    'NsxtServiceChainServiceIndexArgs',
    'ReportChartCategorySeriesArgs',
    'ReportChartColumnArgs',
    'ReportChartColumnMappingArgs',
    'ReportChartDrillDownChartArgs',
    'ReportChartValueSeriesArgs',
    'ReportChartXSeriesArgs',
    'ReportChartYSeriesArgs',
    'ReportDatasetFieldArgs',
    'ReportDatasetParameterArgs',
    'ReportLayoutBodyItemArgs',
    'ReportLayoutBodyItemListArgs',
    'ReportLayoutBodyItemParameterArgs',
    'ReportLayoutPageArgs',
    'ReportLayoutPageFooterArgs',
    'ReportLayoutPageFooterFooterItemArgs',
    'ReportLayoutPageHeaderArgs',
    'ReportLayoutPageHeaderHeaderItemArgs',
    'RouterAccessList6RuleArgs',
    'RouterAccessListRuleArgs',
    'RouterAspathListRuleArgs',
    'RouterBfd6MultihopTemplateArgs',
    'RouterBfd6NeighborArgs',
    'RouterBfdMultihopTemplateArgs',
    'RouterBfdNeighborArgs',
    'RouterBgpAdminDistanceArgs',
    'RouterBgpAggregateAddress6Args',
    'RouterBgpAggregateAddressArgs',
    'RouterBgpConfederationPeerArgs',
    'RouterBgpNeighborArgs',
    'RouterBgpNeighborConditionalAdvertise6Args',
    'RouterBgpNeighborConditionalAdvertiseArgs',
    'RouterBgpNeighborGroupArgs',
    'RouterBgpNeighborRange6Args',
    'RouterBgpNeighborRangeArgs',
    'RouterBgpNetwork6Args',
    'RouterBgpNetworkArgs',
    'RouterBgpRedistribute6Args',
    'RouterBgpRedistributeArgs',
    'RouterBgpVrf6Args',
    'RouterBgpVrf6LeakTargetArgs',
    'RouterBgpVrfArgs',
    'RouterBgpVrfExportRtArgs',
    'RouterBgpVrfImportRtArgs',
    'RouterBgpVrfLeak6Args',
    'RouterBgpVrfLeak6TargetArgs',
    'RouterBgpVrfLeakArgs',
    'RouterBgpVrfLeakTargetArgs',
    'RouterCommunityListRuleArgs',
    'RouterExtcommunityListRuleArgs',
    'RouterIsisIsisInterfaceArgs',
    'RouterIsisIsisNetArgs',
    'RouterIsisRedistribute6Args',
    'RouterIsisRedistributeArgs',
    'RouterIsisSummaryAddress6Args',
    'RouterIsisSummaryAddressArgs',
    'RouterKeyChainKeyArgs',
    'RouterMulticast6InterfaceArgs',
    'RouterMulticast6PimSmGlobalArgs',
    'RouterMulticast6PimSmGlobalRpAddressArgs',
    'RouterMulticastFlowFlowArgs',
    'RouterMulticastInterfaceArgs',
    'RouterMulticastInterfaceIgmpArgs',
    'RouterMulticastInterfaceJoinGroupArgs',
    'RouterMulticastPimSmGlobalArgs',
    'RouterMulticastPimSmGlobalRpAddressArgs',
    'RouterOspf6AreaArgs',
    'RouterOspf6AreaIpsecKeyArgs',
    'RouterOspf6AreaRangeArgs',
    'RouterOspf6AreaVirtualLinkArgs',
    'RouterOspf6AreaVirtualLinkIpsecKeyArgs',
    'RouterOspf6Ospf6InterfaceArgs',
    'RouterOspf6Ospf6InterfaceIpsecKeyArgs',
    'RouterOspf6Ospf6InterfaceNeighborArgs',
    'RouterOspf6PassiveInterfaceArgs',
    'RouterOspf6RedistributeArgs',
    'RouterOspf6SummaryAddressArgs',
    'RouterOspfAreaArgs',
    'RouterOspfAreaFilterListArgs',
    'RouterOspfAreaRangeArgs',
    'RouterOspfAreaVirtualLinkArgs',
    'RouterOspfAreaVirtualLinkMd5KeyArgs',
    'RouterOspfDistributeListArgs',
    'RouterOspfNeighborArgs',
    'RouterOspfNetworkArgs',
    'RouterOspfOspfInterfaceArgs',
    'RouterOspfOspfInterfaceMd5KeyArgs',
    'RouterOspfPassiveInterfaceArgs',
    'RouterOspfRedistributeArgs',
    'RouterOspfSummaryAddressArgs',
    'RouterPolicy6DstaddrArgs',
    'RouterPolicy6InternetServiceCustomArgs',
    'RouterPolicy6InternetServiceIdArgs',
    'RouterPolicy6SrcaddrArgs',
    'RouterPolicyDstArgs',
    'RouterPolicyDstaddrArgs',
    'RouterPolicyInputDeviceArgs',
    'RouterPolicyInternetServiceCustomArgs',
    'RouterPolicyInternetServiceIdArgs',
    'RouterPolicySrcArgs',
    'RouterPolicySrcaddrArgs',
    'RouterPrefixList6RuleArgs',
    'RouterPrefixListRuleArgs',
    'RouterRipDistanceArgs',
    'RouterRipDistributeListArgs',
    'RouterRipInterfaceArgs',
    'RouterRipNeighborArgs',
    'RouterRipNetworkArgs',
    'RouterRipOffsetListArgs',
    'RouterRipPassiveInterfaceArgs',
    'RouterRipRedistributeArgs',
    'RouterRipngAggregateAddressArgs',
    'RouterRipngDistanceArgs',
    'RouterRipngDistributeListArgs',
    'RouterRipngInterfaceArgs',
    'RouterRipngNeighborArgs',
    'RouterRipngNetworkArgs',
    'RouterRipngOffsetListArgs',
    'RouterRipngPassiveInterfaceArgs',
    'RouterRipngRedistributeArgs',
    'RouterRouteMapRuleArgs',
    'RouterRouteMapRuleSetAspathArgs',
    'RouterRouteMapRuleSetCommunityArgs',
    'RouterRouteMapRuleSetExtcommunityRtArgs',
    'RouterRouteMapRuleSetExtcommunitySooArgs',
    'RouterStatic6SdwanZoneArgs',
    'RouterStaticSdwanZoneArgs',
    'RouterbgpNeighborConditionalAdvertise6Args',
    'RouterbgpNeighborConditionalAdvertiseArgs',
    'Routerospf6Ospf6InterfaceIpsecKeyArgs',
    'Routerospf6Ospf6InterfaceNeighborArgs',
    'RouterospfOspfInterfaceMd5KeyArgs',
    'SctpFilterProfilePpidFilterArgs',
    'SpamfilterBwlEntryArgs',
    'SpamfilterBwordEntryArgs',
    'SpamfilterDnsblEntryArgs',
    'SpamfilterIptrustEntryArgs',
    'SpamfilterMheaderEntryArgs',
    'SpamfilterProfileGmailArgs',
    'SpamfilterProfileImapArgs',
    'SpamfilterProfileMapiArgs',
    'SpamfilterProfileMsnHotmailArgs',
    'SpamfilterProfilePop3Args',
    'SpamfilterProfileSmtpArgs',
    'SpamfilterProfileYahooMailArgs',
    'SshFilterProfileFileFilterArgs',
    'SshFilterProfileFileFilterEntryArgs',
    'SshFilterProfileFileFilterEntryFileTypeArgs',
    'SshFilterProfileShellCommandArgs',
    'SwitchControllerAclGroupIngressArgs',
    'SwitchControllerAclIngressActionArgs',
    'SwitchControllerAclIngressClassifierArgs',
    'SwitchControllerAutoConfigCustomSwitchBindingArgs',
    'SwitchControllerDynamicPortPolicyPolicyArgs',
    'SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs',
    'SwitchControllerFlowTrackingAggregateArgs',
    'SwitchControllerFlowTrackingCollectorArgs',
    'SwitchControllerFortilinkSettingsNacPortsArgs',
    'SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs',
    'SwitchControllerGlobalCustomCommandArgs',
    'SwitchControllerGlobalDisableDiscoveryArgs',
    'SwitchControllerLldpProfileCustomTlvArgs',
    'SwitchControllerLldpProfileMedLocationServiceArgs',
    'SwitchControllerLldpProfileMedNetworkPolicyArgs',
    'SwitchControllerLocationAddressCivicArgs',
    'SwitchControllerLocationCoordinatesArgs',
    'SwitchControllerLocationElinNumberArgs',
    'SwitchControllerManagedSwitchCustomCommandArgs',
    'SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs',
    'SwitchControllerManagedSwitchIgmpSnoopingArgs',
    'SwitchControllerManagedSwitchIgmpSnoopingVlanArgs',
    'SwitchControllerManagedSwitchIpSourceGuardArgs',
    'SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs',
    'SwitchControllerManagedSwitchMirrorArgs',
    'SwitchControllerManagedSwitchMirrorSrcEgressArgs',
    'SwitchControllerManagedSwitchMirrorSrcIngressArgs',
    'SwitchControllerManagedSwitchN8021xSettingsArgs',
    'SwitchControllerManagedSwitchPortArgs',
    'SwitchControllerManagedSwitchPortAclGroupArgs',
    'SwitchControllerManagedSwitchPortAllowedVlanArgs',
    'SwitchControllerManagedSwitchPortDhcpSnoopOption82OverrideArgs',
    'SwitchControllerManagedSwitchPortExportTagArgs',
    'SwitchControllerManagedSwitchPortFortiswitchAclArgs',
    'SwitchControllerManagedSwitchPortInterfaceTagArgs',
    'SwitchControllerManagedSwitchPortMemberArgs',
    'SwitchControllerManagedSwitchPortUntaggedVlanArgs',
    'SwitchControllerManagedSwitchRemoteLogArgs',
    'SwitchControllerManagedSwitchSnmpCommunityArgs',
    'SwitchControllerManagedSwitchSnmpCommunityHostArgs',
    'SwitchControllerManagedSwitchSnmpSysinfoArgs',
    'SwitchControllerManagedSwitchSnmpTrapThresholdArgs',
    'SwitchControllerManagedSwitchSnmpUserArgs',
    'SwitchControllerManagedSwitchStaticMacArgs',
    'SwitchControllerManagedSwitchStormControlArgs',
    'SwitchControllerManagedSwitchStpInstanceArgs',
    'SwitchControllerManagedSwitchStpSettingsArgs',
    'SwitchControllerManagedSwitchSwitchLogArgs',
    'SwitchControllerManagedSwitchSwitchStpSettingsArgs',
    'SwitchControllerQosIpDscpMapMapArgs',
    'SwitchControllerQosQueuePolicyCosQueueArgs',
    'SwitchControllerQuarantineTargetArgs',
    'SwitchControllerQuarantineTargetTagArgs',
    'SwitchControllerSecurityPolicy8021XUserGroupArgs',
    'SwitchControllerSnmpCommunityHostArgs',
    'SwitchControllerStpInstanceVlanRangeArgs',
    'SwitchControllerSwitchGroupMemberArgs',
    'SwitchControllerTrafficSnifferTargetIpArgs',
    'SwitchControllerTrafficSnifferTargetMacArgs',
    'SwitchControllerTrafficSnifferTargetPortArgs',
    'SwitchControllerTrafficSnifferTargetPortInPortArgs',
    'SwitchControllerTrafficSnifferTargetPortOutPortArgs',
    'SwitchControllerVlanPolicyAllowedVlanArgs',
    'SwitchControllerVlanPolicyUntaggedVlanArgs',
    'SwitchControllerVlanPortalMessageOverridesArgs',
    'SwitchControllerVlanSelectedUsergroupArgs',
    'SystemAPIUserSettingTrusthostArgs',
    'SystemAccprofileFwgrpPermissionArgs',
    'SystemAccprofileLoggrpPermissionArgs',
    'SystemAccprofileNetgrpPermissionArgs',
    'SystemAccprofileSysgrpPermissionArgs',
    'SystemAccprofileUtmgrpPermissionArgs',
    'SystemAcmeAccountArgs',
    'SystemAcmeInterfaceArgs',
    'SystemAdminGuestUsergroupArgs',
    'SystemAdminGuiDashboardArgs',
    'SystemAdminGuiDashboardWidgetArgs',
    'SystemAdminGuiDashboardWidgetFilterArgs',
    'SystemAdminGuiGlobalMenuFavoriteArgs',
    'SystemAdminGuiNewFeatureAcknowledgeArgs',
    'SystemAdminGuiVdomMenuFavoriteArgs',
    'SystemAdminLoginTimeArgs',
    'SystemAdminVdomArgs',
    'SystemAlarmGroupArgs',
    'SystemAlarmGroupFwPolicyViolationArgs',
    'SystemApiUserTrusthostArgs',
    'SystemApiUserVdomArgs',
    'SystemAutomationActionEmailToArgs',
    'SystemAutomationActionHeaderArgs',
    'SystemAutomationActionHttpHeaderArgs',
    'SystemAutomationActionSdnConnectorArgs',
    'SystemAutomationDestinationDestinationArgs',
    'SystemAutomationStitchActionArgs',
    'SystemAutomationStitchDestinationArgs',
    'SystemAutomationTriggerFieldArgs',
    'SystemAutomationTriggerLogidBlockArgs',
    'SystemAutomationTriggerVdomArgs',
    'SystemCentralManagementServerListArgs',
    'SystemClusterSyncDownIntfsBeforeSessSyncArgs',
    'SystemClusterSyncSessionSyncFilterArgs',
    'SystemClusterSyncSessionSyncFilterCustomServiceArgs',
    'SystemClusterSyncSyncvdArgs',
    'SystemCsfFabricConnectorArgs',
    'SystemCsfFabricConnectorVdomArgs',
    'SystemCsfFabricDeviceArgs',
    'SystemCsfTrustedListArgs',
    'SystemDdnsDdnsServerAddrArgs',
    'SystemDdnsMonitorInterfaceArgs',
    'SystemDhcp6ServerIpRangeArgs',
    'SystemDhcp6ServerPrefixRangeArgs',
    'SystemDhcpServerExcludeRangeArgs',
    'SystemDhcpServerExcludeRangeUciStringArgs',
    'SystemDhcpServerExcludeRangeVciStringArgs',
    'SystemDhcpServerIpRangeArgs',
    'SystemDhcpServerIpRangeUciStringArgs',
    'SystemDhcpServerIpRangeVciStringArgs',
    'SystemDhcpServerOptionArgs',
    'SystemDhcpServerOptionUciStringArgs',
    'SystemDhcpServerOptionVciStringArgs',
    'SystemDhcpServerReservedAddressArgs',
    'SystemDhcpServerTftpServerArgs',
    'SystemDhcpServerVciStringArgs',
    'SystemDnsDatabaseDnsEntryArgs',
    'SystemDnsDomainArgs',
    'SystemDnsServerHostnameArgs',
    'SystemEvpnExportRtArgs',
    'SystemEvpnImportRtArgs',
    'SystemFabricVpnAdvertisedSubnetArgs',
    'SystemFabricVpnOverlayArgs',
    'SystemFederatedUpgradeNodeListArgs',
    'SystemGeoipOverrideIp6RangeArgs',
    'SystemGeoipOverrideIpRangeArgs',
    'SystemGlobalInternetServiceDownloadListArgs',
    'SystemHaHaMgmtInterfaceArgs',
    'SystemHaSecondaryVclusterArgs',
    'SystemHaUnicastPeerArgs',
    'SystemHaVclusterArgs',
    'SystemHaVclusterVdomArgs',
    'SystemIkeDhGroup14Args',
    'SystemIkeDhGroup15Args',
    'SystemIkeDhGroup16Args',
    'SystemIkeDhGroup17Args',
    'SystemIkeDhGroup18Args',
    'SystemIkeDhGroup19Args',
    'SystemIkeDhGroup1Args',
    'SystemIkeDhGroup20Args',
    'SystemIkeDhGroup21Args',
    'SystemIkeDhGroup27Args',
    'SystemIkeDhGroup28Args',
    'SystemIkeDhGroup29Args',
    'SystemIkeDhGroup2Args',
    'SystemIkeDhGroup30Args',
    'SystemIkeDhGroup31Args',
    'SystemIkeDhGroup32Args',
    'SystemIkeDhGroup5Args',
    'SystemInterfaceClientOptionArgs',
    'SystemInterfaceDhcpSnoopingServerListArgs',
    'SystemInterfaceFailAlertInterfaceArgs',
    'SystemInterfaceIpv6Args',
    'SystemInterfaceIpv6Dhcp6IapdListArgs',
    'SystemInterfaceIpv6Ip6DelegatedPrefixListArgs',
    'SystemInterfaceIpv6Ip6ExtraAddrArgs',
    'SystemInterfaceIpv6Ip6PrefixListArgs',
    'SystemInterfaceIpv6Ip6PrefixListDnsslArgs',
    'SystemInterfaceIpv6Vrrp6Args',
    'SystemInterfaceManagedDeviceArgs',
    'SystemInterfaceMemberArgs',
    'SystemInterfaceSecondaryipArgs',
    'SystemInterfaceSecurityGroupArgs',
    'SystemInterfaceTaggingArgs',
    'SystemInterfaceTaggingTagArgs',
    'SystemInterfaceVrrpArgs',
    'SystemInterfaceVrrpProxyArpArgs',
    'SystemIpamPoolArgs',
    'SystemIpamRuleArgs',
    'SystemIpamRuleDeviceArgs',
    'SystemIpamRuleInterfaceArgs',
    'SystemIpamRulePoolArgs',
    'SystemIpsecAggregateMemberArgs',
    'SystemLinkMonitorRouteArgs',
    'SystemLinkMonitorServerArgs',
    'SystemLinkMonitorServerListArgs',
    'SystemLldpNetworkPolicyGuestArgs',
    'SystemLldpNetworkPolicyGuestVoiceSignalingArgs',
    'SystemLldpNetworkPolicySoftphoneArgs',
    'SystemLldpNetworkPolicyStreamingVideoArgs',
    'SystemLldpNetworkPolicyVideoConferencingArgs',
    'SystemLldpNetworkPolicyVideoSignalingArgs',
    'SystemLldpNetworkPolicyVoiceArgs',
    'SystemLldpNetworkPolicyVoiceSignalingArgs',
    'SystemMobileTunnelNetworkArgs',
    'SystemNat64SecondaryPrefixArgs',
    'SystemNdProxyMemberArgs',
    'SystemNpuPriorityProtocolArgs',
    'SystemNtpInterfaceArgs',
    'SystemNtpNtpserverArgs',
    'SystemObjectTaggingTagArgs',
    'SystemPcpServerPoolArgs',
    'SystemPcpServerPoolClientSubnetArgs',
    'SystemPcpServerPoolIntlIntfArgs',
    'SystemPcpServerPoolThirdPartySubnetArgs',
    'SystemPtpServerInterfaceArgs',
    'SystemReplacemsgGroupAdminArgs',
    'SystemReplacemsgGroupAlertmailArgs',
    'SystemReplacemsgGroupAuthArgs',
    'SystemReplacemsgGroupAutomationArgs',
    'SystemReplacemsgGroupCustomMessageArgs',
    'SystemReplacemsgGroupDeviceDetectionPortalArgs',
    'SystemReplacemsgGroupEcArgs',
    'SystemReplacemsgGroupFortiguardWfArgs',
    'SystemReplacemsgGroupFtpArgs',
    'SystemReplacemsgGroupHttpArgs',
    'SystemReplacemsgGroupIcapArgs',
    'SystemReplacemsgGroupMailArgs',
    'SystemReplacemsgGroupNacQuarArgs',
    'SystemReplacemsgGroupNntpArgs',
    'SystemReplacemsgGroupSpamArgs',
    'SystemReplacemsgGroupSslvpnArgs',
    'SystemReplacemsgGroupTrafficQuotaArgs',
    'SystemReplacemsgGroupUtmArgs',
    'SystemReplacemsgGroupWebproxyArgs',
    'SystemSamlServiceProviderArgs',
    'SystemSamlServiceProviderAssertionAttributeArgs',
    'SystemSdnConnectorCompartmentListArgs',
    'SystemSdnConnectorExternalAccountListArgs',
    'SystemSdnConnectorExternalAccountListRegionListArgs',
    'SystemSdnConnectorExternalIpArgs',
    'SystemSdnConnectorForwardingRuleArgs',
    'SystemSdnConnectorGcpProjectListArgs',
    'SystemSdnConnectorGcpProjectListGcpZoneListArgs',
    'SystemSdnConnectorNicArgs',
    'SystemSdnConnectorNicIpArgs',
    'SystemSdnConnectorOciRegionListArgs',
    'SystemSdnConnectorRouteArgs',
    'SystemSdnConnectorRouteTableArgs',
    'SystemSdnConnectorRouteTableRouteArgs',
    'SystemSdnConnectorServerListArgs',
    'SystemSdwanDuplicationArgs',
    'SystemSdwanDuplicationDstaddr6Args',
    'SystemSdwanDuplicationDstaddrArgs',
    'SystemSdwanDuplicationDstintfArgs',
    'SystemSdwanDuplicationServiceArgs',
    'SystemSdwanDuplicationServiceIdArgs',
    'SystemSdwanDuplicationSrcaddr6Args',
    'SystemSdwanDuplicationSrcaddrArgs',
    'SystemSdwanDuplicationSrcintfArgs',
    'SystemSdwanFailAlertInterfaceArgs',
    'SystemSdwanHealthCheckArgs',
    'SystemSdwanHealthCheckMemberArgs',
    'SystemSdwanHealthCheckSlaArgs',
    'SystemSdwanMemberArgs',
    'SystemSdwanNeighborArgs',
    'SystemSdwanNeighborMemberBlockArgs',
    'SystemSdwanServiceArgs',
    'SystemSdwanServiceDst6Args',
    'SystemSdwanServiceDstArgs',
    'SystemSdwanServiceGroupArgs',
    'SystemSdwanServiceHealthCheckArgs',
    'SystemSdwanServiceInputDeviceArgs',
    'SystemSdwanServiceInputZoneArgs',
    'SystemSdwanServiceInternetServiceAppCtrlArgs',
    'SystemSdwanServiceInternetServiceAppCtrlCategoryArgs',
    'SystemSdwanServiceInternetServiceAppCtrlGroupArgs',
    'SystemSdwanServiceInternetServiceCustomArgs',
    'SystemSdwanServiceInternetServiceCustomGroupArgs',
    'SystemSdwanServiceInternetServiceGroupArgs',
    'SystemSdwanServiceInternetServiceNameArgs',
    'SystemSdwanServicePriorityMemberArgs',
    'SystemSdwanServicePriorityZoneArgs',
    'SystemSdwanServiceSlaArgs',
    'SystemSdwanServiceSrc6Args',
    'SystemSdwanServiceSrcArgs',
    'SystemSdwanServiceUserArgs',
    'SystemSdwanZoneArgs',
    'SystemSessionTtlPortArgs',
    'SystemSettingsGuiDefaultPolicyColumnArgs',
    'SystemSnmpCommunityHostArgs',
    'SystemSnmpCommunityHosts6Args',
    'SystemSnmpCommunityVdomArgs',
    'SystemSnmpUserVdomArgs',
    'SystemSpeedTestScheduleScheduleArgs',
    'SystemSpeedTestServerHostArgs',
    'SystemSsoAdminVdomArgs',
    'SystemSsoForticloudAdminVdomArgs',
    'SystemSsoFortigateCloudAdminVdomArgs',
    'SystemStandaloneClusterClusterPeerArgs',
    'SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSyncArgs',
    'SystemStandaloneClusterClusterPeerSessionSyncFilterArgs',
    'SystemStandaloneClusterClusterPeerSessionSyncFilterCustomServiceArgs',
    'SystemStandaloneClusterClusterPeerSyncvdArgs',
    'SystemSwitchInterfaceMemberArgs',
    'SystemSwitchInterfaceSpanSourcePortArgs',
    'SystemVdomDnsServerHostnameArgs',
    'SystemVdomExceptionVdomArgs',
    'SystemVirtualSwitchPortArgs',
    'SystemVirtualWanLinkFailAlertInterfaceArgs',
    'SystemVirtualWanLinkHealthCheckArgs',
    'SystemVirtualWanLinkHealthCheckMemberArgs',
    'SystemVirtualWanLinkHealthCheckSlaArgs',
    'SystemVirtualWanLinkMemberArgs',
    'SystemVirtualWanLinkNeighborArgs',
    'SystemVirtualWanLinkServiceArgs',
    'SystemVirtualWanLinkServiceDst6Args',
    'SystemVirtualWanLinkServiceDstArgs',
    'SystemVirtualWanLinkServiceGroupArgs',
    'SystemVirtualWanLinkServiceInputDeviceArgs',
    'SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs',
    'SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs',
    'SystemVirtualWanLinkServiceInternetServiceCtrlArgs',
    'SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs',
    'SystemVirtualWanLinkServiceInternetServiceCustomArgs',
    'SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs',
    'SystemVirtualWanLinkServiceInternetServiceGroupArgs',
    'SystemVirtualWanLinkServiceInternetServiceIdArgs',
    'SystemVirtualWanLinkServiceInternetServiceNameArgs',
    'SystemVirtualWanLinkServicePriorityMemberArgs',
    'SystemVirtualWanLinkServiceSlaArgs',
    'SystemVirtualWanLinkServiceSrc6Args',
    'SystemVirtualWanLinkServiceSrcArgs',
    'SystemVirtualWanLinkServiceUserArgs',
    'SystemVirtualWanLinkZoneArgs',
    'SystemVirtualWirePairMemberArgs',
    'SystemVxlanRemoteIp6Args',
    'SystemVxlanRemoteIpArgs',
    'SystemZoneInterfaceArgs',
    'SystemZoneTaggingArgs',
    'SystemZoneTaggingTagArgs',
    'UserDeviceAccessListDeviceListArgs',
    'UserDeviceGroupMemberArgs',
    'UserDeviceGroupTaggingArgs',
    'UserDeviceGroupTaggingTagArgs',
    'UserDeviceTaggingArgs',
    'UserDeviceTaggingTagArgs',
    'UserDomainControllerExtraServerArgs',
    'UserExchangeKdcIpArgs',
    'UserFssoPollingAdgrpArgs',
    'UserGroupGuestArgs',
    'UserGroupMatchArgs',
    'UserGroupMemberArgs',
    'UserNacPolicySeverityArgs',
    'UserNacPolicySwitchGroupArgs',
    'UserNacPolicySwitchScopeArgs',
    'UserPeergrpMemberArgs',
    'UserQuarantineTargetArgs',
    'UserQuarantineTargetMacArgs',
    'UserRadiusAccountingServerArgs',
    'UserRadiusClassArgs',
    'UserSecurityExemptListRuleArgs',
    'UserSecurityExemptListRuleDeviceArgs',
    'UserSecurityExemptListRuleDstaddrArgs',
    'UserSecurityExemptListRuleServiceArgs',
    'UserSecurityExemptListRuleSrcaddrArgs',
    'UserSettingAuthPortArgs',
    'VideofilterProfileFortiguardCategoryArgs',
    'VideofilterProfileFortiguardCategoryFilterArgs',
    'VideofilterYoutubeChannelFilterEntryArgs',
    'VoipProfileMsrpArgs',
    'VoipProfileSccpArgs',
    'VoipProfileSipArgs',
    'VpnCertificateSettingCrlVerificationArgs',
    'VpnIpsecConcentratorMemberArgs',
    'VpnIpsecFecMappingArgs',
    'VpnIpsecPhase1BackupGatewayArgs',
    'VpnIpsecPhase1CertificateArgs',
    'VpnIpsecPhase1InterfaceBackupGatewayArgs',
    'VpnIpsecPhase1InterfaceCertificateArgs',
    'VpnIpsecPhase1InterfaceIpv4ExcludeRangeArgs',
    'VpnIpsecPhase1InterfaceIpv6ExcludeRangeArgs',
    'VpnIpsecPhase1Ipv4ExcludeRangeArgs',
    'VpnIpsecPhase1Ipv6ExcludeRangeArgs',
    'VpnKmipServerServerListArgs',
    'VpnOcvpnForticlientAccessArgs',
    'VpnOcvpnForticlientAccessAuthGroupArgs',
    'VpnOcvpnForticlientAccessAuthGroupOverlayArgs',
    'VpnOcvpnOverlayArgs',
    'VpnOcvpnOverlaySubnetArgs',
    'VpnOcvpnWanInterfaceArgs',
    'VpnSslSettingsAuthenticationRuleArgs',
    'VpnSslSettingsAuthenticationRuleGroupArgs',
    'VpnSslSettingsAuthenticationRuleSourceAddress6Args',
    'VpnSslSettingsAuthenticationRuleSourceAddressArgs',
    'VpnSslSettingsAuthenticationRuleSourceInterfaceArgs',
    'VpnSslSettingsAuthenticationRuleUserArgs',
    'VpnSslSettingsSourceAddress6Args',
    'VpnSslSettingsSourceAddressArgs',
    'VpnSslSettingsSourceInterfaceArgs',
    'VpnSslSettingsTunnelIpPoolArgs',
    'VpnSslSettingsTunnelIpv6PoolArgs',
    'VpnSslWebHostCheckSoftwareCheckItemListArgs',
    'VpnSslWebHostCheckSoftwareCheckItemListMd5Args',
    'VpnSslWebPortalBookmarkGroupArgs',
    'VpnSslWebPortalBookmarkGroupBookmarkArgs',
    'VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs',
    'VpnSslWebPortalHostCheckPolicyArgs',
    'VpnSslWebPortalIpPoolArgs',
    'VpnSslWebPortalIpv6PoolArgs',
    'VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs',
    'VpnSslWebPortalLandingPageArgs',
    'VpnSslWebPortalLandingPageFormDataArgs',
    'VpnSslWebPortalMacAddrCheckRuleArgs',
    'VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs',
    'VpnSslWebPortalOsCheckListArgs',
    'VpnSslWebPortalSplitDnArgs',
    'VpnSslWebPortalSplitTunnelingRoutingAddressArgs',
    'VpnSslWebUserBookmarkBookmarkArgs',
    'VpnSslWebUserBookmarkBookmarkFormDataArgs',
    'VpnSslWebUserGroupBookmarkBookmarkArgs',
    'VpnSslWebUserGroupBookmarkBookmarkFormDataArgs',
    'WafProfileAddressListArgs',
    'WafProfileAddressListBlockedAddressArgs',
    'WafProfileAddressListTrustedAddressArgs',
    'WafProfileConstraintArgs',
    'WafProfileConstraintContentLengthArgs',
    'WafProfileConstraintExceptionArgs',
    'WafProfileConstraintHeaderLengthArgs',
    'WafProfileConstraintHostnameArgs',
    'WafProfileConstraintLineLengthArgs',
    'WafProfileConstraintMalformedArgs',
    'WafProfileConstraintMaxCookieArgs',
    'WafProfileConstraintMaxHeaderLineArgs',
    'WafProfileConstraintMaxRangeSegmentArgs',
    'WafProfileConstraintMaxUrlParamArgs',
    'WafProfileConstraintMethodArgs',
    'WafProfileConstraintParamLengthArgs',
    'WafProfileConstraintUrlParamLengthArgs',
    'WafProfileConstraintVersionArgs',
    'WafProfileMethodArgs',
    'WafProfileMethodMethodPolicyArgs',
    'WafProfileSignatureArgs',
    'WafProfileSignatureCustomSignatureArgs',
    'WafProfileSignatureDisabledSignatureArgs',
    'WafProfileSignatureDisabledSubClassArgs',
    'WafProfileSignatureMainClassArgs',
    'WafProfileUrlAccessArgs',
    'WafProfileUrlAccessAccessPatternArgs',
    'WanoptCacheServiceDstPeerArgs',
    'WanoptCacheServiceSrcPeerArgs',
    'WanoptContentDeliveryNetworkRuleHostDomainNameSuffixArgs',
    'WanoptContentDeliveryNetworkRuleRuleArgs',
    'WanoptContentDeliveryNetworkRuleRuleContentIdArgs',
    'WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs',
    'WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs',
    'WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs',
    'WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs',
    'WanoptProfileCifsArgs',
    'WanoptProfileFtpArgs',
    'WanoptProfileHttpArgs',
    'WanoptProfileMapiArgs',
    'WanoptProfileTcpArgs',
    'WebProxyExplicitPacPolicyArgs',
    'WebProxyExplicitPacPolicyDstaddrArgs',
    'WebProxyExplicitPacPolicySrcaddr6Args',
    'WebProxyExplicitPacPolicySrcaddrArgs',
    'WebProxyExplicitSecureWebProxyCertArgs',
    'WebProxyForwardServerGroupServerListArgs',
    'WebProxyGlobalLearnClientIpSrcaddr6Args',
    'WebProxyGlobalLearnClientIpSrcaddrArgs',
    'WebProxyProfileHeaderArgs',
    'WebProxyProfileHeaderDstaddr6Args',
    'WebProxyProfileHeaderDstaddrArgs',
    'WebfilterContentEntryArgs',
    'WebfilterContentHeaderEntryArgs',
    'WebfilterProfileAntiphishArgs',
    'WebfilterProfileAntiphishCustomPatternArgs',
    'WebfilterProfileAntiphishInspectionEntryArgs',
    'WebfilterProfileFileFilterArgs',
    'WebfilterProfileFileFilterEntryArgs',
    'WebfilterProfileFileFilterEntryFileTypeArgs',
    'WebfilterProfileFtgdWfArgs',
    'WebfilterProfileFtgdWfFilterArgs',
    'WebfilterProfileFtgdWfFilterAuthUsrGrpArgs',
    'WebfilterProfileFtgdWfQuotaArgs',
    'WebfilterProfileOverrideArgs',
    'WebfilterProfileOverrideOvrdUserGroupArgs',
    'WebfilterProfileOverrideProfileArgs',
    'WebfilterProfileWebArgs',
    'WebfilterProfileWebKeywordMatchArgs',
    'WebfilterProfileWispServerArgs',
    'WebfilterProfileYoutubeChannelFilterArgs',
    'WebfilterUrlfilterEntryArgs',
    'WirelessControllerAccessControlListLayer3Ipv4RuleArgs',
    'WirelessControllerAccessControlListLayer3Ipv6RuleArgs',
    'WirelessControllerAddrgrpAddressArgs',
    'WirelessControllerApcfgProfileCommandListArgs',
    'WirelessControllerArrpProfileDarrpOptimizeScheduleArgs',
    'WirelessControllerBonjourProfilePolicyListArgs',
    'WirelessControllerHotspot20Anqp3GppCellularMccMncListArgs',
    'WirelessControllerHotspot20AnqpNaiRealmNaiListArgs',
    'WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs',
    'WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs',
    'WirelessControllerHotspot20AnqpRoamingConsortiumOiListArgs',
    'WirelessControllerHotspot20AnqpVenueNameValueListArgs',
    'WirelessControllerHotspot20AnqpVenueUrlValueListArgs',
    'WirelessControllerHotspot20H2QpAdviceOfChargeAocListArgs',
    'WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs',
    'WirelessControllerHotspot20H2QpOperatorNameValueListArgs',
    'WirelessControllerHotspot20H2QpOsuProviderFriendlyNameArgs',
    'WirelessControllerHotspot20H2QpOsuProviderNaiNaiListArgs',
    'WirelessControllerHotspot20H2QpOsuProviderServiceDescriptionArgs',
    'WirelessControllerHotspot20HsProfileOsuProviderArgs',
    'WirelessControllerHotspot20IconIconListArgs',
    'WirelessControllerHotspot20QosMapDscpExceptArgs',
    'WirelessControllerHotspot20QosMapDscpRangeArgs',
    'WirelessControllerInterControllerInterControllerPeerArgs',
    'WirelessControllerMpskProfileMpskGroupArgs',
    'WirelessControllerMpskProfileMpskGroupMpskKeyArgs',
    'WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs',
    'WirelessControllerQosProfileDscpWmmBeArgs',
    'WirelessControllerQosProfileDscpWmmBkArgs',
    'WirelessControllerQosProfileDscpWmmViArgs',
    'WirelessControllerQosProfileDscpWmmVoArgs',
    'WirelessControllerSettingDarrpOptimizeScheduleArgs',
    'WirelessControllerSettingOffendingSsidArgs',
    'WirelessControllerSnmpCommunityArgs',
    'WirelessControllerSnmpCommunityHostArgs',
    'WirelessControllerSnmpUserArgs',
    'WirelessControllerTimersDarrpTimeArgs',
    'WirelessControllerVapGroupVapArgs',
    'WirelessControllerVapMacFilterListArgs',
    'WirelessControllerVapMpskKeyArgs',
    'WirelessControllerVapMpskKeyMpskScheduleArgs',
    'WirelessControllerVapPortalMessageOverridesArgs',
    'WirelessControllerVapRadiusMacAuthUsergroupArgs',
    'WirelessControllerVapSelectedUsergroupArgs',
    'WirelessControllerVapUsergroupArgs',
    'WirelessControllerVapVlanNameArgs',
    'WirelessControllerVapVlanPoolArgs',
    'WirelessControllerWidsProfileApBgscanDisableScheduleArgs',
    'WirelessControllerWtpGroupWtpArgs',
    'WirelessControllerWtpLanArgs',
    'WirelessControllerWtpProfileDenyMacListArgs',
    'WirelessControllerWtpProfileEslSesDongleArgs',
    'WirelessControllerWtpProfileLanArgs',
    'WirelessControllerWtpProfileLbsArgs',
    'WirelessControllerWtpProfileLedScheduleArgs',
    'WirelessControllerWtpProfilePlatformArgs',
    'WirelessControllerWtpProfileRadio1Args',
    'WirelessControllerWtpProfileRadio1ChannelArgs',
    'WirelessControllerWtpProfileRadio1VapArgs',
    'WirelessControllerWtpProfileRadio2Args',
    'WirelessControllerWtpProfileRadio2ChannelArgs',
    'WirelessControllerWtpProfileRadio2VapArgs',
    'WirelessControllerWtpProfileRadio3Args',
    'WirelessControllerWtpProfileRadio3ChannelArgs',
    'WirelessControllerWtpProfileRadio3VapArgs',
    'WirelessControllerWtpProfileRadio4Args',
    'WirelessControllerWtpProfileRadio4ChannelArgs',
    'WirelessControllerWtpProfileRadio4VapArgs',
    'WirelessControllerWtpProfileSplitTunnelingAclArgs',
    'WirelessControllerWtpRadio1Args',
    'WirelessControllerWtpRadio1ChannelArgs',
    'WirelessControllerWtpRadio1VapArgs',
    'WirelessControllerWtpRadio2Args',
    'WirelessControllerWtpRadio2ChannelArgs',
    'WirelessControllerWtpRadio2VapArgs',
    'WirelessControllerWtpRadio3Args',
    'WirelessControllerWtpRadio3ChannelArgs',
    'WirelessControllerWtpRadio3VapArgs',
    'WirelessControllerWtpRadio4Args',
    'WirelessControllerWtpRadio4ChannelArgs',
    'WirelessControllerWtpRadio4VapArgs',
    'WirelessControllerWtpSplitTunnelingAclArgs',
]

@pulumi.input_type
class AntivirusProfileCifsArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileContentDisarmArgs:
    def __init__(__self__, *,
                 cover_page: Optional[pulumi.Input[str]] = None,
                 detect_only: Optional[pulumi.Input[str]] = None,
                 error_action: Optional[pulumi.Input[str]] = None,
                 office_action: Optional[pulumi.Input[str]] = None,
                 office_dde: Optional[pulumi.Input[str]] = None,
                 office_embed: Optional[pulumi.Input[str]] = None,
                 office_hylink: Optional[pulumi.Input[str]] = None,
                 office_linked: Optional[pulumi.Input[str]] = None,
                 office_macro: Optional[pulumi.Input[str]] = None,
                 original_file_destination: Optional[pulumi.Input[str]] = None,
                 pdf_act_form: Optional[pulumi.Input[str]] = None,
                 pdf_act_gotor: Optional[pulumi.Input[str]] = None,
                 pdf_act_java: Optional[pulumi.Input[str]] = None,
                 pdf_act_launch: Optional[pulumi.Input[str]] = None,
                 pdf_act_movie: Optional[pulumi.Input[str]] = None,
                 pdf_act_sound: Optional[pulumi.Input[str]] = None,
                 pdf_embedfile: Optional[pulumi.Input[str]] = None,
                 pdf_hyperlink: Optional[pulumi.Input[str]] = None,
                 pdf_javacode: Optional[pulumi.Input[str]] = None):
        if cover_page is not None:
            pulumi.set(__self__, "cover_page", cover_page)
        if detect_only is not None:
            pulumi.set(__self__, "detect_only", detect_only)
        if error_action is not None:
            pulumi.set(__self__, "error_action", error_action)
        if office_action is not None:
            pulumi.set(__self__, "office_action", office_action)
        if office_dde is not None:
            pulumi.set(__self__, "office_dde", office_dde)
        if office_embed is not None:
            pulumi.set(__self__, "office_embed", office_embed)
        if office_hylink is not None:
            pulumi.set(__self__, "office_hylink", office_hylink)
        if office_linked is not None:
            pulumi.set(__self__, "office_linked", office_linked)
        if office_macro is not None:
            pulumi.set(__self__, "office_macro", office_macro)
        if original_file_destination is not None:
            pulumi.set(__self__, "original_file_destination", original_file_destination)
        if pdf_act_form is not None:
            pulumi.set(__self__, "pdf_act_form", pdf_act_form)
        if pdf_act_gotor is not None:
            pulumi.set(__self__, "pdf_act_gotor", pdf_act_gotor)
        if pdf_act_java is not None:
            pulumi.set(__self__, "pdf_act_java", pdf_act_java)
        if pdf_act_launch is not None:
            pulumi.set(__self__, "pdf_act_launch", pdf_act_launch)
        if pdf_act_movie is not None:
            pulumi.set(__self__, "pdf_act_movie", pdf_act_movie)
        if pdf_act_sound is not None:
            pulumi.set(__self__, "pdf_act_sound", pdf_act_sound)
        if pdf_embedfile is not None:
            pulumi.set(__self__, "pdf_embedfile", pdf_embedfile)
        if pdf_hyperlink is not None:
            pulumi.set(__self__, "pdf_hyperlink", pdf_hyperlink)
        if pdf_javacode is not None:
            pulumi.set(__self__, "pdf_javacode", pdf_javacode)

    @property
    @pulumi.getter(name="coverPage")
    def cover_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cover_page")

    @cover_page.setter
    def cover_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cover_page", value)

    @property
    @pulumi.getter(name="detectOnly")
    def detect_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detect_only")

    @detect_only.setter
    def detect_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detect_only", value)

    @property
    @pulumi.getter(name="errorAction")
    def error_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_action")

    @error_action.setter
    def error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_action", value)

    @property
    @pulumi.getter(name="officeAction")
    def office_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_action")

    @office_action.setter
    def office_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_action", value)

    @property
    @pulumi.getter(name="officeDde")
    def office_dde(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_dde")

    @office_dde.setter
    def office_dde(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_dde", value)

    @property
    @pulumi.getter(name="officeEmbed")
    def office_embed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_embed")

    @office_embed.setter
    def office_embed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_embed", value)

    @property
    @pulumi.getter(name="officeHylink")
    def office_hylink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_hylink")

    @office_hylink.setter
    def office_hylink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_hylink", value)

    @property
    @pulumi.getter(name="officeLinked")
    def office_linked(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_linked")

    @office_linked.setter
    def office_linked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_linked", value)

    @property
    @pulumi.getter(name="officeMacro")
    def office_macro(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_macro")

    @office_macro.setter
    def office_macro(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_macro", value)

    @property
    @pulumi.getter(name="originalFileDestination")
    def original_file_destination(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "original_file_destination")

    @original_file_destination.setter
    def original_file_destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_file_destination", value)

    @property
    @pulumi.getter(name="pdfActForm")
    def pdf_act_form(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_form")

    @pdf_act_form.setter
    def pdf_act_form(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_form", value)

    @property
    @pulumi.getter(name="pdfActGotor")
    def pdf_act_gotor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_gotor")

    @pdf_act_gotor.setter
    def pdf_act_gotor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_gotor", value)

    @property
    @pulumi.getter(name="pdfActJava")
    def pdf_act_java(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_java")

    @pdf_act_java.setter
    def pdf_act_java(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_java", value)

    @property
    @pulumi.getter(name="pdfActLaunch")
    def pdf_act_launch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_launch")

    @pdf_act_launch.setter
    def pdf_act_launch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_launch", value)

    @property
    @pulumi.getter(name="pdfActMovie")
    def pdf_act_movie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_movie")

    @pdf_act_movie.setter
    def pdf_act_movie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_movie", value)

    @property
    @pulumi.getter(name="pdfActSound")
    def pdf_act_sound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_sound")

    @pdf_act_sound.setter
    def pdf_act_sound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_sound", value)

    @property
    @pulumi.getter(name="pdfEmbedfile")
    def pdf_embedfile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_embedfile")

    @pdf_embedfile.setter
    def pdf_embedfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_embedfile", value)

    @property
    @pulumi.getter(name="pdfHyperlink")
    def pdf_hyperlink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_hyperlink")

    @pdf_hyperlink.setter
    def pdf_hyperlink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_hyperlink", value)

    @property
    @pulumi.getter(name="pdfJavacode")
    def pdf_javacode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_javacode")

    @pdf_javacode.setter
    def pdf_javacode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_javacode", value)


@pulumi.input_type
class AntivirusProfileExternalBlocklistArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AntivirusProfileFtpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileHttpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 unknown_content_encoding: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if unknown_content_encoding is not None:
            pulumi.set(__self__, "unknown_content_encoding", unknown_content_encoding)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="unknownContentEncoding")
    def unknown_content_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_content_encoding")

    @unknown_content_encoding.setter
    def unknown_content_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_content_encoding", value)


@pulumi.input_type
class AntivirusProfileImapArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileMapiArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileNacQuarArgs:
    def __init__(__self__, *,
                 expiry: Optional[pulumi.Input[str]] = None,
                 infected: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None):
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if infected is not None:
            pulumi.set(__self__, "infected", infected)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter
    def infected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "infected")

    @infected.setter
    def infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "infected", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class AntivirusProfileNntpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileOutbreakPreventionArgs:
    def __init__(__self__, *,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 ftgd_service: Optional[pulumi.Input[str]] = None):
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if ftgd_service is not None:
            pulumi.set(__self__, "ftgd_service", ftgd_service)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter(name="ftgdService")
    def ftgd_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftgd_service")

    @ftgd_service.setter
    def ftgd_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftgd_service", value)


@pulumi.input_type
class AntivirusProfilePop3Args:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileSmbArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)


@pulumi.input_type
class AntivirusProfileSmtpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileSshArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class ApplicationGroupApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationGroupCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationGroupRiskArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[int]] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class ApplicationListDefaultNetworkServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 services: Optional[pulumi.Input[str]] = None,
                 violation_action: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if violation_action is not None:
            pulumi.set(__self__, "violation_action", violation_action)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "violation_action")

    @violation_action.setter
    def violation_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "violation_action", value)


@pulumi.input_type
class ApplicationListEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryApplicationArgs']]]] = None,
                 behavior: Optional[pulumi.Input[str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryCategoryArgs']]]] = None,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryExclusionArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterArgs']]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 popularity: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 rate_count: Optional[pulumi.Input[int]] = None,
                 rate_duration: Optional[pulumi.Input[int]] = None,
                 rate_mode: Optional[pulumi.Input[str]] = None,
                 rate_track: Optional[pulumi.Input[str]] = None,
                 risks: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryRiskArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 shaper: Optional[pulumi.Input[str]] = None,
                 shaper_reverse: Optional[pulumi.Input[str]] = None,
                 sub_categories: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntrySubCategoryArgs']]]] = None,
                 technology: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if popularity is not None:
            pulumi.set(__self__, "popularity", popularity)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rate_count is not None:
            pulumi.set(__self__, "rate_count", rate_count)
        if rate_duration is not None:
            pulumi.set(__self__, "rate_duration", rate_duration)
        if rate_mode is not None:
            pulumi.set(__self__, "rate_mode", rate_mode)
        if rate_track is not None:
            pulumi.set(__self__, "rate_track", rate_track)
        if risks is not None:
            pulumi.set(__self__, "risks", risks)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if shaper is not None:
            pulumi.set(__self__, "shaper", shaper)
        if shaper_reverse is not None:
            pulumi.set(__self__, "shaper_reverse", shaper_reverse)
        if sub_categories is not None:
            pulumi.set(__self__, "sub_categories", sub_categories)
        if technology is not None:
            pulumi.set(__self__, "technology", technology)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryCategoryArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryCategoryArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryExclusionArgs']]]]:
        return pulumi.get(self, "exclusions")

    @exclusions.setter
    def exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryExclusionArgs']]]]):
        pulumi.set(self, "exclusions", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterArgs']]]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter
    def popularity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "popularity")

    @popularity.setter
    def popularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "popularity", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter(name="rateCount")
    def rate_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rate_count")

    @rate_count.setter
    def rate_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_count", value)

    @property
    @pulumi.getter(name="rateDuration")
    def rate_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rate_duration")

    @rate_duration.setter
    def rate_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_duration", value)

    @property
    @pulumi.getter(name="rateMode")
    def rate_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rate_mode")

    @rate_mode.setter
    def rate_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_mode", value)

    @property
    @pulumi.getter(name="rateTrack")
    def rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rate_track")

    @rate_track.setter
    def rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_track", value)

    @property
    @pulumi.getter
    def risks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryRiskArgs']]]]:
        return pulumi.get(self, "risks")

    @risks.setter
    def risks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryRiskArgs']]]]):
        pulumi.set(self, "risks", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter
    def shaper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shaper")

    @shaper.setter
    def shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shaper", value)

    @property
    @pulumi.getter(name="shaperReverse")
    def shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shaper_reverse")

    @shaper_reverse.setter
    def shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shaper_reverse", value)

    @property
    @pulumi.getter(name="subCategories")
    def sub_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntrySubCategoryArgs']]]]:
        return pulumi.get(self, "sub_categories")

    @sub_categories.setter
    def sub_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntrySubCategoryArgs']]]]):
        pulumi.set(self, "sub_categories", value)

    @property
    @pulumi.getter
    def technology(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "technology")

    @technology.setter
    def technology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "technology", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)


@pulumi.input_type
class ApplicationListEntryApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationListEntryCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationListEntryExclusionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationListEntryParameterArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterMemberArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterMemberArgs']]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationListEntryParameterMemberArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationListEntryRiskArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[int]] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class ApplicationListEntrySubCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationNameMetadataArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 metaid: Optional[pulumi.Input[int]] = None,
                 valueid: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metaid is not None:
            pulumi.set(__self__, "metaid", metaid)
        if valueid is not None:
            pulumi.set(__self__, "valueid", valueid)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metaid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metaid")

    @metaid.setter
    def metaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metaid", value)

    @property
    @pulumi.getter
    def valueid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "valueid")

    @valueid.setter
    def valueid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "valueid", value)


@pulumi.input_type
class ApplicationNameParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationRuleDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationRuleDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationRuleSrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationRuleSrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationRuleSrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationSchemeUserDatabaseArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationSettingDevRangeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationSettingUserCertCaArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CifsProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryArgs']]]]:
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class CifsProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryFileTypeArgs']]]]:
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class CifsProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CifsProfileServerKeytabArgs:
    def __init__(__self__, *,
                 keytab: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None):
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def keytab(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keytab")

    @keytab.setter
    def keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keytab", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal", value)


@pulumi.input_type
class DlpDictionaryEntryArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ignore_case: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 repeat: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def repeat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat")

    @repeat.setter
    def repeat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DlpFilepatternEntryArgs:
    def __init__(__self__, *,
                 file_type: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class DlpProfileRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 archive: Optional[pulumi.Input[str]] = None,
                 expiry: Optional[pulumi.Input[str]] = None,
                 file_size: Optional[pulumi.Input[int]] = None,
                 file_type: Optional[pulumi.Input[int]] = None,
                 filter_by: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 match_percentage: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proto: Optional[pulumi.Input[str]] = None,
                 sensitivities: Optional[pulumi.Input[Sequence[pulumi.Input['DlpProfileRuleSensitivityArgs']]]] = None,
                 sensors: Optional[pulumi.Input[Sequence[pulumi.Input['DlpProfileRuleSensorArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if file_size is not None:
            pulumi.set(__self__, "file_size", file_size)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_by is not None:
            pulumi.set(__self__, "filter_by", filter_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if match_percentage is not None:
            pulumi.set(__self__, "match_percentage", match_percentage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if sensitivities is not None:
            pulumi.set(__self__, "sensitivities", sensitivities)
        if sensors is not None:
            pulumi.set(__self__, "sensors", sensors)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def archive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive")

    @archive.setter
    def archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive", value)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_size")

    @file_size.setter
    def file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_size", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter(name="filterBy")
    def filter_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_by")

    @filter_by.setter
    def filter_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_by", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="matchPercentage")
    def match_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "match_percentage")

    @match_percentage.setter
    def match_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_percentage", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter
    def sensitivities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlpProfileRuleSensitivityArgs']]]]:
        return pulumi.get(self, "sensitivities")

    @sensitivities.setter
    def sensitivities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlpProfileRuleSensitivityArgs']]]]):
        pulumi.set(self, "sensitivities", value)

    @property
    @pulumi.getter
    def sensors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlpProfileRuleSensorArgs']]]]:
        return pulumi.get(self, "sensors")

    @sensors.setter
    def sensors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlpProfileRuleSensorArgs']]]]):
        pulumi.set(self, "sensors", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DlpProfileRuleSensitivityArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DlpProfileRuleSensorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DlpSensorEntryArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 dictionary: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dictionary is not None:
            pulumi.set(__self__, "dictionary", dictionary)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def dictionary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dictionary")

    @dictionary.setter
    def dictionary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dictionary", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DlpSensorFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 archive: Optional[pulumi.Input[str]] = None,
                 company_identifier: Optional[pulumi.Input[str]] = None,
                 expiry: Optional[pulumi.Input[str]] = None,
                 file_size: Optional[pulumi.Input[int]] = None,
                 file_type: Optional[pulumi.Input[int]] = None,
                 filter_by: Optional[pulumi.Input[str]] = None,
                 fp_sensitivities: Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterFpSensitivityArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 match_percentage: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proto: Optional[pulumi.Input[str]] = None,
                 regexp: Optional[pulumi.Input[str]] = None,
                 sensitivities: Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterSensitivityArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if company_identifier is not None:
            pulumi.set(__self__, "company_identifier", company_identifier)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if file_size is not None:
            pulumi.set(__self__, "file_size", file_size)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_by is not None:
            pulumi.set(__self__, "filter_by", filter_by)
        if fp_sensitivities is not None:
            pulumi.set(__self__, "fp_sensitivities", fp_sensitivities)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_percentage is not None:
            pulumi.set(__self__, "match_percentage", match_percentage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if sensitivities is not None:
            pulumi.set(__self__, "sensitivities", sensitivities)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def archive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive")

    @archive.setter
    def archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive", value)

    @property
    @pulumi.getter(name="companyIdentifier")
    def company_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "company_identifier")

    @company_identifier.setter
    def company_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_identifier", value)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_size")

    @file_size.setter
    def file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_size", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter(name="filterBy")
    def filter_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_by")

    @filter_by.setter
    def filter_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_by", value)

    @property
    @pulumi.getter(name="fpSensitivities")
    def fp_sensitivities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterFpSensitivityArgs']]]]:
        return pulumi.get(self, "fp_sensitivities")

    @fp_sensitivities.setter
    def fp_sensitivities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterFpSensitivityArgs']]]]):
        pulumi.set(self, "fp_sensitivities", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="matchPercentage")
    def match_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "match_percentage")

    @match_percentage.setter
    def match_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_percentage", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter
    def regexp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def sensitivities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterSensitivityArgs']]]]:
        return pulumi.get(self, "sensitivities")

    @sensitivities.setter
    def sensitivities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterSensitivityArgs']]]]):
        pulumi.set(self, "sensitivities", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DlpSensorFilterFpSensitivityArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DlpSensorFilterSensitivityArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DnsfilterDomainFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DnsfilterProfileDnsTranslationArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dst6: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[int]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 src6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if dst6 is not None:
            pulumi.set(__self__, "dst6", dst6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if src6 is not None:
            pulumi.set(__self__, "src6", src6)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def dst6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst6")

    @dst6.setter
    def dst6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst6", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter
    def src6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src6")

    @src6.setter
    def src6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src6", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DnsfilterProfileDomainFilterArgs:
    def __init__(__self__, *,
                 domain_filter_table: Optional[pulumi.Input[int]] = None):
        if domain_filter_table is not None:
            pulumi.set(__self__, "domain_filter_table", domain_filter_table)

    @property
    @pulumi.getter(name="domainFilterTable")
    def domain_filter_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "domain_filter_table")

    @domain_filter_table.setter
    def domain_filter_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "domain_filter_table", value)


@pulumi.input_type
class DnsfilterProfileExternalIpBlocklistArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DnsfilterProfileFtgdDnsArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileFtgdDnsFilterArgs']]]] = None,
                 options: Optional[pulumi.Input[str]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileFtgdDnsFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileFtgdDnsFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)


@pulumi.input_type
class DnsfilterProfileFtgdDnsFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class DpdkGlobalInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class EmailfilterBlockAllowListEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 email_pattern: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_pattern")

    @email_pattern.setter
    def email_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_pattern", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class EmailfilterBwlEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 email_pattern: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_pattern")

    @email_pattern.setter
    def email_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_pattern", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class EmailfilterBwordEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 where: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if where is not None:
            pulumi.set(__self__, "where", where)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def where(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "where")

    @where.setter
    def where(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "where", value)


@pulumi.input_type
class EmailfilterDnsblEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EmailfilterIptrustEntryArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EmailfilterMheaderEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 fieldbody: Optional[pulumi.Input[str]] = None,
                 fieldname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fieldbody is not None:
            pulumi.set(__self__, "fieldbody", fieldbody)
        if fieldname is not None:
            pulumi.set(__self__, "fieldname", fieldname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def fieldbody(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fieldbody")

    @fieldbody.setter
    def fieldbody(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fieldbody", value)

    @property
    @pulumi.getter
    def fieldname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fieldname")

    @fieldname.setter
    def fieldname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fieldname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EmailfilterProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 scan_archive_contents: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryArgs']]]]:
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_archive_contents")

    @scan_archive_contents.setter
    def scan_archive_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_archive_contents", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EmailfilterProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 password_protected: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryFileTypeArgs']]]]:
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_protected")

    @password_protected.setter
    def password_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_protected", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class EmailfilterProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EmailfilterProfileGmailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class EmailfilterProfileImapArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class EmailfilterProfileMapiArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class EmailfilterProfileMsnHotmailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class EmailfilterProfileOtherWebmailsArgs:
    def __init__(__self__, *,
                 log_all: Optional[pulumi.Input[str]] = None):
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class EmailfilterProfilePop3Args:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class EmailfilterProfileSmtpArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 hdrip: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if hdrip is not None:
            pulumi.set(__self__, "hdrip", hdrip)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def hdrip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hdrip")

    @hdrip.setter
    def hdrip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hdrip", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class EmailfilterProfileYahooMailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class EndpointControlProfileDeviceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EndpointControlProfileForticlientAndroidSettingsArgs:
    def __init__(__self__, *,
                 disable_wf_when_protected: Optional[pulumi.Input[str]] = None,
                 forticlient_advanced_vpn: Optional[pulumi.Input[str]] = None,
                 forticlient_advanced_vpn_buffer: Optional[pulumi.Input[str]] = None,
                 forticlient_vpn_provisioning: Optional[pulumi.Input[str]] = None,
                 forticlient_vpn_settings: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs']]]] = None,
                 forticlient_wf: Optional[pulumi.Input[str]] = None,
                 forticlient_wf_profile: Optional[pulumi.Input[str]] = None):
        if disable_wf_when_protected is not None:
            pulumi.set(__self__, "disable_wf_when_protected", disable_wf_when_protected)
        if forticlient_advanced_vpn is not None:
            pulumi.set(__self__, "forticlient_advanced_vpn", forticlient_advanced_vpn)
        if forticlient_advanced_vpn_buffer is not None:
            pulumi.set(__self__, "forticlient_advanced_vpn_buffer", forticlient_advanced_vpn_buffer)
        if forticlient_vpn_provisioning is not None:
            pulumi.set(__self__, "forticlient_vpn_provisioning", forticlient_vpn_provisioning)
        if forticlient_vpn_settings is not None:
            pulumi.set(__self__, "forticlient_vpn_settings", forticlient_vpn_settings)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)

    @property
    @pulumi.getter(name="disableWfWhenProtected")
    def disable_wf_when_protected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_wf_when_protected")

    @disable_wf_when_protected.setter
    def disable_wf_when_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_wf_when_protected", value)

    @property
    @pulumi.getter(name="forticlientAdvancedVpn")
    def forticlient_advanced_vpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_advanced_vpn")

    @forticlient_advanced_vpn.setter
    def forticlient_advanced_vpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_advanced_vpn", value)

    @property
    @pulumi.getter(name="forticlientAdvancedVpnBuffer")
    def forticlient_advanced_vpn_buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_advanced_vpn_buffer")

    @forticlient_advanced_vpn_buffer.setter
    def forticlient_advanced_vpn_buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_advanced_vpn_buffer", value)

    @property
    @pulumi.getter(name="forticlientVpnProvisioning")
    def forticlient_vpn_provisioning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_vpn_provisioning")

    @forticlient_vpn_provisioning.setter
    def forticlient_vpn_provisioning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_vpn_provisioning", value)

    @property
    @pulumi.getter(name="forticlientVpnSettings")
    def forticlient_vpn_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs']]]]:
        return pulumi.get(self, "forticlient_vpn_settings")

    @forticlient_vpn_settings.setter
    def forticlient_vpn_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs']]]]):
        pulumi.set(self, "forticlient_vpn_settings", value)

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_wf")

    @forticlient_wf.setter
    def forticlient_wf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf", value)

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_wf_profile")

    @forticlient_wf_profile.setter
    def forticlient_wf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf_profile", value)


@pulumi.input_type
class EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs:
    def __init__(__self__, *,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preshared_key: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 sslvpn_access_port: Optional[pulumi.Input[int]] = None,
                 sslvpn_require_certificate: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if sslvpn_access_port is not None:
            pulumi.set(__self__, "sslvpn_access_port", sslvpn_access_port)
        if sslvpn_require_certificate is not None:
            pulumi.set(__self__, "sslvpn_require_certificate", sslvpn_require_certificate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preshared_key", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="sslvpnAccessPort")
    def sslvpn_access_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sslvpn_access_port")

    @sslvpn_access_port.setter
    def sslvpn_access_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sslvpn_access_port", value)

    @property
    @pulumi.getter(name="sslvpnRequireCertificate")
    def sslvpn_require_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_require_certificate")

    @sslvpn_require_certificate.setter
    def sslvpn_require_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_require_certificate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class EndpointControlProfileForticlientIosSettingsArgs:
    def __init__(__self__, *,
                 client_vpn_provisioning: Optional[pulumi.Input[str]] = None,
                 client_vpn_settings: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs']]]] = None,
                 configuration_content: Optional[pulumi.Input[str]] = None,
                 configuration_name: Optional[pulumi.Input[str]] = None,
                 disable_wf_when_protected: Optional[pulumi.Input[str]] = None,
                 distribute_configuration_profile: Optional[pulumi.Input[str]] = None,
                 forticlient_wf: Optional[pulumi.Input[str]] = None,
                 forticlient_wf_profile: Optional[pulumi.Input[str]] = None):
        if client_vpn_provisioning is not None:
            pulumi.set(__self__, "client_vpn_provisioning", client_vpn_provisioning)
        if client_vpn_settings is not None:
            pulumi.set(__self__, "client_vpn_settings", client_vpn_settings)
        if configuration_content is not None:
            pulumi.set(__self__, "configuration_content", configuration_content)
        if configuration_name is not None:
            pulumi.set(__self__, "configuration_name", configuration_name)
        if disable_wf_when_protected is not None:
            pulumi.set(__self__, "disable_wf_when_protected", disable_wf_when_protected)
        if distribute_configuration_profile is not None:
            pulumi.set(__self__, "distribute_configuration_profile", distribute_configuration_profile)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)

    @property
    @pulumi.getter(name="clientVpnProvisioning")
    def client_vpn_provisioning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_vpn_provisioning")

    @client_vpn_provisioning.setter
    def client_vpn_provisioning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_vpn_provisioning", value)

    @property
    @pulumi.getter(name="clientVpnSettings")
    def client_vpn_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs']]]]:
        return pulumi.get(self, "client_vpn_settings")

    @client_vpn_settings.setter
    def client_vpn_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs']]]]):
        pulumi.set(self, "client_vpn_settings", value)

    @property
    @pulumi.getter(name="configurationContent")
    def configuration_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configuration_content")

    @configuration_content.setter
    def configuration_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_content", value)

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configuration_name")

    @configuration_name.setter
    def configuration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_name", value)

    @property
    @pulumi.getter(name="disableWfWhenProtected")
    def disable_wf_when_protected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_wf_when_protected")

    @disable_wf_when_protected.setter
    def disable_wf_when_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_wf_when_protected", value)

    @property
    @pulumi.getter(name="distributeConfigurationProfile")
    def distribute_configuration_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_configuration_profile")

    @distribute_configuration_profile.setter
    def distribute_configuration_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_configuration_profile", value)

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_wf")

    @forticlient_wf.setter
    def forticlient_wf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf", value)

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_wf_profile")

    @forticlient_wf_profile.setter
    def forticlient_wf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf_profile", value)


@pulumi.input_type
class EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs:
    def __init__(__self__, *,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preshared_key: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 sslvpn_access_port: Optional[pulumi.Input[int]] = None,
                 sslvpn_require_certificate: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpn_configuration_content: Optional[pulumi.Input[str]] = None,
                 vpn_configuration_name: Optional[pulumi.Input[str]] = None):
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if sslvpn_access_port is not None:
            pulumi.set(__self__, "sslvpn_access_port", sslvpn_access_port)
        if sslvpn_require_certificate is not None:
            pulumi.set(__self__, "sslvpn_require_certificate", sslvpn_require_certificate)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpn_configuration_content is not None:
            pulumi.set(__self__, "vpn_configuration_content", vpn_configuration_content)
        if vpn_configuration_name is not None:
            pulumi.set(__self__, "vpn_configuration_name", vpn_configuration_name)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preshared_key", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="sslvpnAccessPort")
    def sslvpn_access_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sslvpn_access_port")

    @sslvpn_access_port.setter
    def sslvpn_access_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sslvpn_access_port", value)

    @property
    @pulumi.getter(name="sslvpnRequireCertificate")
    def sslvpn_require_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sslvpn_require_certificate")

    @sslvpn_require_certificate.setter
    def sslvpn_require_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_require_certificate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vpnConfigurationContent")
    def vpn_configuration_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_configuration_content")

    @vpn_configuration_content.setter
    def vpn_configuration_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_configuration_content", value)

    @property
    @pulumi.getter(name="vpnConfigurationName")
    def vpn_configuration_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_configuration_name")

    @vpn_configuration_name.setter
    def vpn_configuration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_configuration_name", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsArgs:
    def __init__(__self__, *,
                 av_realtime_protection: Optional[pulumi.Input[str]] = None,
                 av_signature_up_to_date: Optional[pulumi.Input[str]] = None,
                 forticlient_application_firewall: Optional[pulumi.Input[str]] = None,
                 forticlient_application_firewall_list: Optional[pulumi.Input[str]] = None,
                 forticlient_av: Optional[pulumi.Input[str]] = None,
                 forticlient_ems_compliance: Optional[pulumi.Input[str]] = None,
                 forticlient_ems_compliance_action: Optional[pulumi.Input[str]] = None,
                 forticlient_ems_entries: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs']]]] = None,
                 forticlient_linux_ver: Optional[pulumi.Input[str]] = None,
                 forticlient_log_upload: Optional[pulumi.Input[str]] = None,
                 forticlient_log_upload_level: Optional[pulumi.Input[str]] = None,
                 forticlient_log_upload_server: Optional[pulumi.Input[str]] = None,
                 forticlient_mac_ver: Optional[pulumi.Input[str]] = None,
                 forticlient_minimum_software_version: Optional[pulumi.Input[str]] = None,
                 forticlient_operating_systems: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs']]]] = None,
                 forticlient_own_files: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs']]]] = None,
                 forticlient_registration_compliance_action: Optional[pulumi.Input[str]] = None,
                 forticlient_registry_entries: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs']]]] = None,
                 forticlient_running_apps: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs']]]] = None,
                 forticlient_security_posture: Optional[pulumi.Input[str]] = None,
                 forticlient_security_posture_compliance_action: Optional[pulumi.Input[str]] = None,
                 forticlient_system_compliance: Optional[pulumi.Input[str]] = None,
                 forticlient_system_compliance_action: Optional[pulumi.Input[str]] = None,
                 forticlient_vuln_scan: Optional[pulumi.Input[str]] = None,
                 forticlient_vuln_scan_compliance_action: Optional[pulumi.Input[str]] = None,
                 forticlient_vuln_scan_enforce: Optional[pulumi.Input[str]] = None,
                 forticlient_vuln_scan_enforce_grace: Optional[pulumi.Input[int]] = None,
                 forticlient_vuln_scan_exempt: Optional[pulumi.Input[str]] = None,
                 forticlient_wf: Optional[pulumi.Input[str]] = None,
                 forticlient_wf_profile: Optional[pulumi.Input[str]] = None,
                 forticlient_win_ver: Optional[pulumi.Input[str]] = None,
                 os_av_software_installed: Optional[pulumi.Input[str]] = None,
                 sandbox_address: Optional[pulumi.Input[str]] = None,
                 sandbox_analysis: Optional[pulumi.Input[str]] = None):
        if av_realtime_protection is not None:
            pulumi.set(__self__, "av_realtime_protection", av_realtime_protection)
        if av_signature_up_to_date is not None:
            pulumi.set(__self__, "av_signature_up_to_date", av_signature_up_to_date)
        if forticlient_application_firewall is not None:
            pulumi.set(__self__, "forticlient_application_firewall", forticlient_application_firewall)
        if forticlient_application_firewall_list is not None:
            pulumi.set(__self__, "forticlient_application_firewall_list", forticlient_application_firewall_list)
        if forticlient_av is not None:
            pulumi.set(__self__, "forticlient_av", forticlient_av)
        if forticlient_ems_compliance is not None:
            pulumi.set(__self__, "forticlient_ems_compliance", forticlient_ems_compliance)
        if forticlient_ems_compliance_action is not None:
            pulumi.set(__self__, "forticlient_ems_compliance_action", forticlient_ems_compliance_action)
        if forticlient_ems_entries is not None:
            pulumi.set(__self__, "forticlient_ems_entries", forticlient_ems_entries)
        if forticlient_linux_ver is not None:
            pulumi.set(__self__, "forticlient_linux_ver", forticlient_linux_ver)
        if forticlient_log_upload is not None:
            pulumi.set(__self__, "forticlient_log_upload", forticlient_log_upload)
        if forticlient_log_upload_level is not None:
            pulumi.set(__self__, "forticlient_log_upload_level", forticlient_log_upload_level)
        if forticlient_log_upload_server is not None:
            pulumi.set(__self__, "forticlient_log_upload_server", forticlient_log_upload_server)
        if forticlient_mac_ver is not None:
            pulumi.set(__self__, "forticlient_mac_ver", forticlient_mac_ver)
        if forticlient_minimum_software_version is not None:
            pulumi.set(__self__, "forticlient_minimum_software_version", forticlient_minimum_software_version)
        if forticlient_operating_systems is not None:
            pulumi.set(__self__, "forticlient_operating_systems", forticlient_operating_systems)
        if forticlient_own_files is not None:
            pulumi.set(__self__, "forticlient_own_files", forticlient_own_files)
        if forticlient_registration_compliance_action is not None:
            pulumi.set(__self__, "forticlient_registration_compliance_action", forticlient_registration_compliance_action)
        if forticlient_registry_entries is not None:
            pulumi.set(__self__, "forticlient_registry_entries", forticlient_registry_entries)
        if forticlient_running_apps is not None:
            pulumi.set(__self__, "forticlient_running_apps", forticlient_running_apps)
        if forticlient_security_posture is not None:
            pulumi.set(__self__, "forticlient_security_posture", forticlient_security_posture)
        if forticlient_security_posture_compliance_action is not None:
            pulumi.set(__self__, "forticlient_security_posture_compliance_action", forticlient_security_posture_compliance_action)
        if forticlient_system_compliance is not None:
            pulumi.set(__self__, "forticlient_system_compliance", forticlient_system_compliance)
        if forticlient_system_compliance_action is not None:
            pulumi.set(__self__, "forticlient_system_compliance_action", forticlient_system_compliance_action)
        if forticlient_vuln_scan is not None:
            pulumi.set(__self__, "forticlient_vuln_scan", forticlient_vuln_scan)
        if forticlient_vuln_scan_compliance_action is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_compliance_action", forticlient_vuln_scan_compliance_action)
        if forticlient_vuln_scan_enforce is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_enforce", forticlient_vuln_scan_enforce)
        if forticlient_vuln_scan_enforce_grace is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_enforce_grace", forticlient_vuln_scan_enforce_grace)
        if forticlient_vuln_scan_exempt is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_exempt", forticlient_vuln_scan_exempt)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)
        if forticlient_win_ver is not None:
            pulumi.set(__self__, "forticlient_win_ver", forticlient_win_ver)
        if os_av_software_installed is not None:
            pulumi.set(__self__, "os_av_software_installed", os_av_software_installed)
        if sandbox_address is not None:
            pulumi.set(__self__, "sandbox_address", sandbox_address)
        if sandbox_analysis is not None:
            pulumi.set(__self__, "sandbox_analysis", sandbox_analysis)

    @property
    @pulumi.getter(name="avRealtimeProtection")
    def av_realtime_protection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_realtime_protection")

    @av_realtime_protection.setter
    def av_realtime_protection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_realtime_protection", value)

    @property
    @pulumi.getter(name="avSignatureUpToDate")
    def av_signature_up_to_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_signature_up_to_date")

    @av_signature_up_to_date.setter
    def av_signature_up_to_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_signature_up_to_date", value)

    @property
    @pulumi.getter(name="forticlientApplicationFirewall")
    def forticlient_application_firewall(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_application_firewall")

    @forticlient_application_firewall.setter
    def forticlient_application_firewall(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_application_firewall", value)

    @property
    @pulumi.getter(name="forticlientApplicationFirewallList")
    def forticlient_application_firewall_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_application_firewall_list")

    @forticlient_application_firewall_list.setter
    def forticlient_application_firewall_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_application_firewall_list", value)

    @property
    @pulumi.getter(name="forticlientAv")
    def forticlient_av(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_av")

    @forticlient_av.setter
    def forticlient_av(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_av", value)

    @property
    @pulumi.getter(name="forticlientEmsCompliance")
    def forticlient_ems_compliance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_ems_compliance")

    @forticlient_ems_compliance.setter
    def forticlient_ems_compliance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_ems_compliance", value)

    @property
    @pulumi.getter(name="forticlientEmsComplianceAction")
    def forticlient_ems_compliance_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_ems_compliance_action")

    @forticlient_ems_compliance_action.setter
    def forticlient_ems_compliance_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_ems_compliance_action", value)

    @property
    @pulumi.getter(name="forticlientEmsEntries")
    def forticlient_ems_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs']]]]:
        return pulumi.get(self, "forticlient_ems_entries")

    @forticlient_ems_entries.setter
    def forticlient_ems_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs']]]]):
        pulumi.set(self, "forticlient_ems_entries", value)

    @property
    @pulumi.getter(name="forticlientLinuxVer")
    def forticlient_linux_ver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_linux_ver")

    @forticlient_linux_ver.setter
    def forticlient_linux_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_linux_ver", value)

    @property
    @pulumi.getter(name="forticlientLogUpload")
    def forticlient_log_upload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_log_upload")

    @forticlient_log_upload.setter
    def forticlient_log_upload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_log_upload", value)

    @property
    @pulumi.getter(name="forticlientLogUploadLevel")
    def forticlient_log_upload_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_log_upload_level")

    @forticlient_log_upload_level.setter
    def forticlient_log_upload_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_log_upload_level", value)

    @property
    @pulumi.getter(name="forticlientLogUploadServer")
    def forticlient_log_upload_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_log_upload_server")

    @forticlient_log_upload_server.setter
    def forticlient_log_upload_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_log_upload_server", value)

    @property
    @pulumi.getter(name="forticlientMacVer")
    def forticlient_mac_ver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_mac_ver")

    @forticlient_mac_ver.setter
    def forticlient_mac_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_mac_ver", value)

    @property
    @pulumi.getter(name="forticlientMinimumSoftwareVersion")
    def forticlient_minimum_software_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_minimum_software_version")

    @forticlient_minimum_software_version.setter
    def forticlient_minimum_software_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_minimum_software_version", value)

    @property
    @pulumi.getter(name="forticlientOperatingSystems")
    def forticlient_operating_systems(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs']]]]:
        return pulumi.get(self, "forticlient_operating_systems")

    @forticlient_operating_systems.setter
    def forticlient_operating_systems(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs']]]]):
        pulumi.set(self, "forticlient_operating_systems", value)

    @property
    @pulumi.getter(name="forticlientOwnFiles")
    def forticlient_own_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs']]]]:
        return pulumi.get(self, "forticlient_own_files")

    @forticlient_own_files.setter
    def forticlient_own_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs']]]]):
        pulumi.set(self, "forticlient_own_files", value)

    @property
    @pulumi.getter(name="forticlientRegistrationComplianceAction")
    def forticlient_registration_compliance_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_registration_compliance_action")

    @forticlient_registration_compliance_action.setter
    def forticlient_registration_compliance_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_registration_compliance_action", value)

    @property
    @pulumi.getter(name="forticlientRegistryEntries")
    def forticlient_registry_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs']]]]:
        return pulumi.get(self, "forticlient_registry_entries")

    @forticlient_registry_entries.setter
    def forticlient_registry_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs']]]]):
        pulumi.set(self, "forticlient_registry_entries", value)

    @property
    @pulumi.getter(name="forticlientRunningApps")
    def forticlient_running_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs']]]]:
        return pulumi.get(self, "forticlient_running_apps")

    @forticlient_running_apps.setter
    def forticlient_running_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs']]]]):
        pulumi.set(self, "forticlient_running_apps", value)

    @property
    @pulumi.getter(name="forticlientSecurityPosture")
    def forticlient_security_posture(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_security_posture")

    @forticlient_security_posture.setter
    def forticlient_security_posture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_security_posture", value)

    @property
    @pulumi.getter(name="forticlientSecurityPostureComplianceAction")
    def forticlient_security_posture_compliance_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_security_posture_compliance_action")

    @forticlient_security_posture_compliance_action.setter
    def forticlient_security_posture_compliance_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_security_posture_compliance_action", value)

    @property
    @pulumi.getter(name="forticlientSystemCompliance")
    def forticlient_system_compliance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_system_compliance")

    @forticlient_system_compliance.setter
    def forticlient_system_compliance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_system_compliance", value)

    @property
    @pulumi.getter(name="forticlientSystemComplianceAction")
    def forticlient_system_compliance_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_system_compliance_action")

    @forticlient_system_compliance_action.setter
    def forticlient_system_compliance_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_system_compliance_action", value)

    @property
    @pulumi.getter(name="forticlientVulnScan")
    def forticlient_vuln_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_vuln_scan")

    @forticlient_vuln_scan.setter
    def forticlient_vuln_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_vuln_scan", value)

    @property
    @pulumi.getter(name="forticlientVulnScanComplianceAction")
    def forticlient_vuln_scan_compliance_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_vuln_scan_compliance_action")

    @forticlient_vuln_scan_compliance_action.setter
    def forticlient_vuln_scan_compliance_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_vuln_scan_compliance_action", value)

    @property
    @pulumi.getter(name="forticlientVulnScanEnforce")
    def forticlient_vuln_scan_enforce(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_vuln_scan_enforce")

    @forticlient_vuln_scan_enforce.setter
    def forticlient_vuln_scan_enforce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_vuln_scan_enforce", value)

    @property
    @pulumi.getter(name="forticlientVulnScanEnforceGrace")
    def forticlient_vuln_scan_enforce_grace(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "forticlient_vuln_scan_enforce_grace")

    @forticlient_vuln_scan_enforce_grace.setter
    def forticlient_vuln_scan_enforce_grace(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forticlient_vuln_scan_enforce_grace", value)

    @property
    @pulumi.getter(name="forticlientVulnScanExempt")
    def forticlient_vuln_scan_exempt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_vuln_scan_exempt")

    @forticlient_vuln_scan_exempt.setter
    def forticlient_vuln_scan_exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_vuln_scan_exempt", value)

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_wf")

    @forticlient_wf.setter
    def forticlient_wf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf", value)

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_wf_profile")

    @forticlient_wf_profile.setter
    def forticlient_wf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf_profile", value)

    @property
    @pulumi.getter(name="forticlientWinVer")
    def forticlient_win_ver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_win_ver")

    @forticlient_win_ver.setter
    def forticlient_win_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_win_ver", value)

    @property
    @pulumi.getter(name="osAvSoftwareInstalled")
    def os_av_software_installed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_av_software_installed")

    @os_av_software_installed.setter
    def os_av_software_installed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_av_software_installed", value)

    @property
    @pulumi.getter(name="sandboxAddress")
    def sandbox_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sandbox_address")

    @sandbox_address.setter
    def sandbox_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sandbox_address", value)

    @property
    @pulumi.getter(name="sandboxAnalysis")
    def sandbox_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sandbox_analysis")

    @sandbox_analysis.setter
    def sandbox_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sandbox_analysis", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs:
    def __init__(__self__, *,
                 file: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if file is not None:
            pulumi.set(__self__, "file", file)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 registry_entry: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if registry_entry is not None:
            pulumi.set(__self__, "registry_entry", registry_entry)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="registryEntry")
    def registry_entry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry_entry")

    @registry_entry.setter
    def registry_entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_entry", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs:
    def __init__(__self__, *,
                 app_name: Optional[pulumi.Input[str]] = None,
                 app_sha256_signature: Optional[pulumi.Input[str]] = None,
                 app_sha256_signature2: Optional[pulumi.Input[str]] = None,
                 app_sha256_signature3: Optional[pulumi.Input[str]] = None,
                 app_sha256_signature4: Optional[pulumi.Input[str]] = None,
                 application_check_rule: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 process_name: Optional[pulumi.Input[str]] = None,
                 process_name2: Optional[pulumi.Input[str]] = None,
                 process_name3: Optional[pulumi.Input[str]] = None,
                 process_name4: Optional[pulumi.Input[str]] = None):
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if app_sha256_signature is not None:
            pulumi.set(__self__, "app_sha256_signature", app_sha256_signature)
        if app_sha256_signature2 is not None:
            pulumi.set(__self__, "app_sha256_signature2", app_sha256_signature2)
        if app_sha256_signature3 is not None:
            pulumi.set(__self__, "app_sha256_signature3", app_sha256_signature3)
        if app_sha256_signature4 is not None:
            pulumi.set(__self__, "app_sha256_signature4", app_sha256_signature4)
        if application_check_rule is not None:
            pulumi.set(__self__, "application_check_rule", application_check_rule)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if process_name is not None:
            pulumi.set(__self__, "process_name", process_name)
        if process_name2 is not None:
            pulumi.set(__self__, "process_name2", process_name2)
        if process_name3 is not None:
            pulumi.set(__self__, "process_name3", process_name3)
        if process_name4 is not None:
            pulumi.set(__self__, "process_name4", process_name4)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter(name="appSha256Signature")
    def app_sha256_signature(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_sha256_signature")

    @app_sha256_signature.setter
    def app_sha256_signature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_sha256_signature", value)

    @property
    @pulumi.getter(name="appSha256Signature2")
    def app_sha256_signature2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_sha256_signature2")

    @app_sha256_signature2.setter
    def app_sha256_signature2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_sha256_signature2", value)

    @property
    @pulumi.getter(name="appSha256Signature3")
    def app_sha256_signature3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_sha256_signature3")

    @app_sha256_signature3.setter
    def app_sha256_signature3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_sha256_signature3", value)

    @property
    @pulumi.getter(name="appSha256Signature4")
    def app_sha256_signature4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_sha256_signature4")

    @app_sha256_signature4.setter
    def app_sha256_signature4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_sha256_signature4", value)

    @property
    @pulumi.getter(name="applicationCheckRule")
    def application_check_rule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_check_rule")

    @application_check_rule.setter
    def application_check_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_check_rule", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="processName")
    def process_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "process_name")

    @process_name.setter
    def process_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_name", value)

    @property
    @pulumi.getter(name="processName2")
    def process_name2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "process_name2")

    @process_name2.setter
    def process_name2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_name2", value)

    @property
    @pulumi.getter(name="processName3")
    def process_name3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "process_name3")

    @process_name3.setter
    def process_name3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_name3", value)

    @property
    @pulumi.getter(name="processName4")
    def process_name4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "process_name4")

    @process_name4.setter
    def process_name4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_name4", value)


@pulumi.input_type
class EndpointControlProfileOnNetAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EndpointControlProfileSrcAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EndpointControlProfileUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EndpointControlProfileUserGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ExtenderControllerExtender1ControllerReportArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderControllerExtender1Modem1Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtender1Modem1AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtender1Modem1AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtender1Modem1AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtender1Modem1AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtender1Modem2Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtender1Modem2AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtender1Modem2AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtender1Modem2AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtender1Modem2AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtenderControllerReportArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderControllerExtenderModem1Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtenderModem1AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtenderModem1AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtenderModem1AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtenderModem1AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtenderModem2Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtenderModem2AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtenderModem2AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtenderModem2AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtenderModem2AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularArgs:
    def __init__(__self__, *,
                 controller_report: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularControllerReportArgs']] = None,
                 dataplans: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularDataplanArgs']]]] = None,
                 modem1: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1Args']] = None,
                 modem2: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2Args']] = None,
                 sms_notification: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationArgs']] = None):
        if controller_report is not None:
            pulumi.set(__self__, "controller_report", controller_report)
        if dataplans is not None:
            pulumi.set(__self__, "dataplans", dataplans)
        if modem1 is not None:
            pulumi.set(__self__, "modem1", modem1)
        if modem2 is not None:
            pulumi.set(__self__, "modem2", modem2)
        if sms_notification is not None:
            pulumi.set(__self__, "sms_notification", sms_notification)

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularControllerReportArgs']]:
        return pulumi.get(self, "controller_report")

    @controller_report.setter
    def controller_report(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularControllerReportArgs']]):
        pulumi.set(self, "controller_report", value)

    @property
    @pulumi.getter
    def dataplans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularDataplanArgs']]]]:
        return pulumi.get(self, "dataplans")

    @dataplans.setter
    def dataplans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularDataplanArgs']]]]):
        pulumi.set(self, "dataplans", value)

    @property
    @pulumi.getter
    def modem1(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1Args']]:
        return pulumi.get(self, "modem1")

    @modem1.setter
    def modem1(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1Args']]):
        pulumi.set(self, "modem1", value)

    @property
    @pulumi.getter
    def modem2(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2Args']]:
        return pulumi.get(self, "modem2")

    @modem2.setter
    def modem2(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2Args']]):
        pulumi.set(self, "modem2", value)

    @property
    @pulumi.getter(name="smsNotification")
    def sms_notification(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationArgs']]:
        return pulumi.get(self, "sms_notification")

    @sms_notification.setter
    def sms_notification(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationArgs']]):
        pulumi.set(self, "sms_notification", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularControllerReportArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularDataplanArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularModem1Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularModem2Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularSmsNotificationArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs']] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs']]:
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs']]):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs']]]]:
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs']]]]):
        pulumi.set(self, "receivers", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs:
    def __init__(__self__, *,
                 data_exhausted: Optional[pulumi.Input[str]] = None,
                 fgt_backup_mode_switch: Optional[pulumi.Input[str]] = None,
                 low_signal_strength: Optional[pulumi.Input[str]] = None,
                 mode_switch: Optional[pulumi.Input[str]] = None,
                 os_image_fallback: Optional[pulumi.Input[str]] = None,
                 session_disconnect: Optional[pulumi.Input[str]] = None,
                 system_reboot: Optional[pulumi.Input[str]] = None):
        if data_exhausted is not None:
            pulumi.set(__self__, "data_exhausted", data_exhausted)
        if fgt_backup_mode_switch is not None:
            pulumi.set(__self__, "fgt_backup_mode_switch", fgt_backup_mode_switch)
        if low_signal_strength is not None:
            pulumi.set(__self__, "low_signal_strength", low_signal_strength)
        if mode_switch is not None:
            pulumi.set(__self__, "mode_switch", mode_switch)
        if os_image_fallback is not None:
            pulumi.set(__self__, "os_image_fallback", os_image_fallback)
        if session_disconnect is not None:
            pulumi.set(__self__, "session_disconnect", session_disconnect)
        if system_reboot is not None:
            pulumi.set(__self__, "system_reboot", system_reboot)

    @property
    @pulumi.getter(name="dataExhausted")
    def data_exhausted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_exhausted")

    @data_exhausted.setter
    def data_exhausted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_exhausted", value)

    @property
    @pulumi.getter(name="fgtBackupModeSwitch")
    def fgt_backup_mode_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fgt_backup_mode_switch")

    @fgt_backup_mode_switch.setter
    def fgt_backup_mode_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgt_backup_mode_switch", value)

    @property
    @pulumi.getter(name="lowSignalStrength")
    def low_signal_strength(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "low_signal_strength")

    @low_signal_strength.setter
    def low_signal_strength(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "low_signal_strength", value)

    @property
    @pulumi.getter(name="modeSwitch")
    def mode_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode_switch")

    @mode_switch.setter
    def mode_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_switch", value)

    @property
    @pulumi.getter(name="osImageFallback")
    def os_image_fallback(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_image_fallback")

    @os_image_fallback.setter
    def os_image_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_image_fallback", value)

    @property
    @pulumi.getter(name="sessionDisconnect")
    def session_disconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_disconnect")

    @session_disconnect.setter
    def session_disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_disconnect", value)

    @property
    @pulumi.getter(name="systemReboot")
    def system_reboot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_reboot")

    @system_reboot.setter
    def system_reboot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_reboot", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileLanExtensionArgs:
    def __init__(__self__, *,
                 backhaul_interface: Optional[pulumi.Input[str]] = None,
                 backhaul_ip: Optional[pulumi.Input[str]] = None,
                 backhauls: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionBackhaulArgs']]]] = None,
                 ipsec_tunnel: Optional[pulumi.Input[str]] = None,
                 link_loadbalance: Optional[pulumi.Input[str]] = None):
        if backhaul_interface is not None:
            pulumi.set(__self__, "backhaul_interface", backhaul_interface)
        if backhaul_ip is not None:
            pulumi.set(__self__, "backhaul_ip", backhaul_ip)
        if backhauls is not None:
            pulumi.set(__self__, "backhauls", backhauls)
        if ipsec_tunnel is not None:
            pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)
        if link_loadbalance is not None:
            pulumi.set(__self__, "link_loadbalance", link_loadbalance)

    @property
    @pulumi.getter(name="backhaulInterface")
    def backhaul_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backhaul_interface")

    @backhaul_interface.setter
    def backhaul_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backhaul_interface", value)

    @property
    @pulumi.getter(name="backhaulIp")
    def backhaul_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backhaul_ip")

    @backhaul_ip.setter
    def backhaul_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backhaul_ip", value)

    @property
    @pulumi.getter
    def backhauls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionBackhaulArgs']]]]:
        return pulumi.get(self, "backhauls")

    @backhauls.setter
    def backhauls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionBackhaulArgs']]]]):
        pulumi.set(self, "backhauls", value)

    @property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_tunnel")

    @ipsec_tunnel.setter
    def ipsec_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_tunnel", value)

    @property
    @pulumi.getter(name="linkLoadbalance")
    def link_loadbalance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_loadbalance")

    @link_loadbalance.setter
    def link_loadbalance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_loadbalance", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileLanExtensionBackhaulArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ExtenderControllerExtenderWanExtensionArgs:
    def __init__(__self__, *,
                 modem1_extension: Optional[pulumi.Input[str]] = None,
                 modem2_extension: Optional[pulumi.Input[str]] = None):
        if modem1_extension is not None:
            pulumi.set(__self__, "modem1_extension", modem1_extension)
        if modem2_extension is not None:
            pulumi.set(__self__, "modem2_extension", modem2_extension)

    @property
    @pulumi.getter(name="modem1Extension")
    def modem1_extension(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modem1_extension")

    @modem1_extension.setter
    def modem1_extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem1_extension", value)

    @property
    @pulumi.getter(name="modem2Extension")
    def modem2_extension(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modem2_extension")

    @modem2_extension.setter
    def modem2_extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem2_extension", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileCellularArgs:
    def __init__(__self__, *,
                 controller_report: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularControllerReportArgs']] = None,
                 dataplans: Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionControllerExtenderProfileCellularDataplanArgs']]]] = None,
                 modem1: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem1Args']] = None,
                 modem2: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem2Args']] = None,
                 sms_notification: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularSmsNotificationArgs']] = None):
        if controller_report is not None:
            pulumi.set(__self__, "controller_report", controller_report)
        if dataplans is not None:
            pulumi.set(__self__, "dataplans", dataplans)
        if modem1 is not None:
            pulumi.set(__self__, "modem1", modem1)
        if modem2 is not None:
            pulumi.set(__self__, "modem2", modem2)
        if sms_notification is not None:
            pulumi.set(__self__, "sms_notification", sms_notification)

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularControllerReportArgs']]:
        return pulumi.get(self, "controller_report")

    @controller_report.setter
    def controller_report(self, value: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularControllerReportArgs']]):
        pulumi.set(self, "controller_report", value)

    @property
    @pulumi.getter
    def dataplans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionControllerExtenderProfileCellularDataplanArgs']]]]:
        return pulumi.get(self, "dataplans")

    @dataplans.setter
    def dataplans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionControllerExtenderProfileCellularDataplanArgs']]]]):
        pulumi.set(self, "dataplans", value)

    @property
    @pulumi.getter
    def modem1(self) -> Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem1Args']]:
        return pulumi.get(self, "modem1")

    @modem1.setter
    def modem1(self, value: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem1Args']]):
        pulumi.set(self, "modem1", value)

    @property
    @pulumi.getter
    def modem2(self) -> Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem2Args']]:
        return pulumi.get(self, "modem2")

    @modem2.setter
    def modem2(self, value: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem2Args']]):
        pulumi.set(self, "modem2", value)

    @property
    @pulumi.getter(name="smsNotification")
    def sms_notification(self) -> Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularSmsNotificationArgs']]:
        return pulumi.get(self, "sms_notification")

    @sms_notification.setter
    def sms_notification(self, value: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularSmsNotificationArgs']]):
        pulumi.set(self, "sms_notification", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileCellularControllerReportArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileCellularDataplanArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileCellularModem1Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem1AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem1AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem1AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileCellularModem1AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileCellularModem2Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem2AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem2AutoSwitchArgs']]:
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularModem2AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileCellularModem2AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileCellularSmsNotificationArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularSmsNotificationAlertArgs']] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionControllerExtenderProfileCellularSmsNotificationReceiverArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularSmsNotificationAlertArgs']]:
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input['ExtensionControllerExtenderProfileCellularSmsNotificationAlertArgs']]):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionControllerExtenderProfileCellularSmsNotificationReceiverArgs']]]]:
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionControllerExtenderProfileCellularSmsNotificationReceiverArgs']]]]):
        pulumi.set(self, "receivers", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileCellularSmsNotificationAlertArgs:
    def __init__(__self__, *,
                 data_exhausted: Optional[pulumi.Input[str]] = None,
                 fgt_backup_mode_switch: Optional[pulumi.Input[str]] = None,
                 low_signal_strength: Optional[pulumi.Input[str]] = None,
                 mode_switch: Optional[pulumi.Input[str]] = None,
                 os_image_fallback: Optional[pulumi.Input[str]] = None,
                 session_disconnect: Optional[pulumi.Input[str]] = None,
                 system_reboot: Optional[pulumi.Input[str]] = None):
        if data_exhausted is not None:
            pulumi.set(__self__, "data_exhausted", data_exhausted)
        if fgt_backup_mode_switch is not None:
            pulumi.set(__self__, "fgt_backup_mode_switch", fgt_backup_mode_switch)
        if low_signal_strength is not None:
            pulumi.set(__self__, "low_signal_strength", low_signal_strength)
        if mode_switch is not None:
            pulumi.set(__self__, "mode_switch", mode_switch)
        if os_image_fallback is not None:
            pulumi.set(__self__, "os_image_fallback", os_image_fallback)
        if session_disconnect is not None:
            pulumi.set(__self__, "session_disconnect", session_disconnect)
        if system_reboot is not None:
            pulumi.set(__self__, "system_reboot", system_reboot)

    @property
    @pulumi.getter(name="dataExhausted")
    def data_exhausted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_exhausted")

    @data_exhausted.setter
    def data_exhausted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_exhausted", value)

    @property
    @pulumi.getter(name="fgtBackupModeSwitch")
    def fgt_backup_mode_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fgt_backup_mode_switch")

    @fgt_backup_mode_switch.setter
    def fgt_backup_mode_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgt_backup_mode_switch", value)

    @property
    @pulumi.getter(name="lowSignalStrength")
    def low_signal_strength(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "low_signal_strength")

    @low_signal_strength.setter
    def low_signal_strength(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "low_signal_strength", value)

    @property
    @pulumi.getter(name="modeSwitch")
    def mode_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode_switch")

    @mode_switch.setter
    def mode_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_switch", value)

    @property
    @pulumi.getter(name="osImageFallback")
    def os_image_fallback(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_image_fallback")

    @os_image_fallback.setter
    def os_image_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_image_fallback", value)

    @property
    @pulumi.getter(name="sessionDisconnect")
    def session_disconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_disconnect")

    @session_disconnect.setter
    def session_disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_disconnect", value)

    @property
    @pulumi.getter(name="systemReboot")
    def system_reboot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_reboot")

    @system_reboot.setter
    def system_reboot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_reboot", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileCellularSmsNotificationReceiverArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileLanExtensionArgs:
    def __init__(__self__, *,
                 backhaul_interface: Optional[pulumi.Input[str]] = None,
                 backhaul_ip: Optional[pulumi.Input[str]] = None,
                 backhauls: Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionControllerExtenderProfileLanExtensionBackhaulArgs']]]] = None,
                 ipsec_tunnel: Optional[pulumi.Input[str]] = None,
                 link_loadbalance: Optional[pulumi.Input[str]] = None):
        if backhaul_interface is not None:
            pulumi.set(__self__, "backhaul_interface", backhaul_interface)
        if backhaul_ip is not None:
            pulumi.set(__self__, "backhaul_ip", backhaul_ip)
        if backhauls is not None:
            pulumi.set(__self__, "backhauls", backhauls)
        if ipsec_tunnel is not None:
            pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)
        if link_loadbalance is not None:
            pulumi.set(__self__, "link_loadbalance", link_loadbalance)

    @property
    @pulumi.getter(name="backhaulInterface")
    def backhaul_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backhaul_interface")

    @backhaul_interface.setter
    def backhaul_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backhaul_interface", value)

    @property
    @pulumi.getter(name="backhaulIp")
    def backhaul_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backhaul_ip")

    @backhaul_ip.setter
    def backhaul_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backhaul_ip", value)

    @property
    @pulumi.getter
    def backhauls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionControllerExtenderProfileLanExtensionBackhaulArgs']]]]:
        return pulumi.get(self, "backhauls")

    @backhauls.setter
    def backhauls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtensionControllerExtenderProfileLanExtensionBackhaulArgs']]]]):
        pulumi.set(self, "backhauls", value)

    @property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_tunnel")

    @ipsec_tunnel.setter
    def ipsec_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_tunnel", value)

    @property
    @pulumi.getter(name="linkLoadbalance")
    def link_loadbalance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_loadbalance")

    @link_loadbalance.setter
    def link_loadbalance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_loadbalance", value)


@pulumi.input_type
class ExtensionControllerExtenderProfileLanExtensionBackhaulArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ExtensionControllerExtenderWanExtensionArgs:
    def __init__(__self__, *,
                 modem1_extension: Optional[pulumi.Input[str]] = None,
                 modem2_extension: Optional[pulumi.Input[str]] = None):
        if modem1_extension is not None:
            pulumi.set(__self__, "modem1_extension", modem1_extension)
        if modem2_extension is not None:
            pulumi.set(__self__, "modem2_extension", modem2_extension)

    @property
    @pulumi.getter(name="modem1Extension")
    def modem1_extension(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modem1_extension")

    @modem1_extension.setter
    def modem1_extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem1_extension", value)

    @property
    @pulumi.getter(name="modem2Extension")
    def modem2_extension(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modem2_extension")

    @modem2_extension.setter
    def modem2_extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem2_extension", value)


@pulumi.input_type
class ExtensionControllerFortigateProfileLanExtensionArgs:
    def __init__(__self__, *,
                 backhaul_interface: Optional[pulumi.Input[str]] = None,
                 backhaul_ip: Optional[pulumi.Input[str]] = None,
                 ipsec_tunnel: Optional[pulumi.Input[str]] = None):
        if backhaul_interface is not None:
            pulumi.set(__self__, "backhaul_interface", backhaul_interface)
        if backhaul_ip is not None:
            pulumi.set(__self__, "backhaul_ip", backhaul_ip)
        if ipsec_tunnel is not None:
            pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)

    @property
    @pulumi.getter(name="backhaulInterface")
    def backhaul_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backhaul_interface")

    @backhaul_interface.setter
    def backhaul_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backhaul_interface", value)

    @property
    @pulumi.getter(name="backhaulIp")
    def backhaul_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backhaul_ip")

    @backhaul_ip.setter
    def backhaul_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backhaul_ip", value)

    @property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_tunnel")

    @ipsec_tunnel.setter
    def ipsec_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_tunnel", value)


@pulumi.input_type
class FileFilterProfileRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['FileFilterProfileRuleFileTypeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_protected: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileFilterProfileRuleFileTypeArgs']]]]:
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileFilterProfileRuleFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_protected")

    @password_protected.setter
    def password_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_protected", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class FileFilterProfileRuleFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGateway6Args:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6ApplicationArgs']]]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6ApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6ApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverArgs']]]]:
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs']]]]:
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_renegotiation")

    @ssl_renegotiation.setter
    def ssl_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_renegotiation", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGateway6ApplicationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGateway6RealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_auth: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 tunnel_encryption: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_auth")

    @external_auth.setter
    def external_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs']]]]:
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_encryption")

    @tunnel_encryption.setter
    def tunnel_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_encryption", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGatewayArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayApplicationArgs']]]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverArgs']]]]:
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs']]]]:
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_renegotiation")

    @ssl_renegotiation.setter
    def ssl_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_renegotiation", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGatewayApplicationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGatewayRealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_auth: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 tunnel_encryption: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_auth")

    @external_auth.setter
    def external_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs']]]]:
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_encryption")

    @tunnel_encryption.setter
    def tunnel_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_encryption", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallAccessProxyApiGateway6Args:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6ApplicationArgs']]]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6SslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6ApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6ApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverArgs']]]]:
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6SslCipherSuiteArgs']]]]:
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6SslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_renegotiation")

    @ssl_renegotiation.setter
    def ssl_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_renegotiation", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class FirewallAccessProxyApiGateway6ApplicationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxyApiGateway6RealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_auth: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 tunnel_encryption: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_auth")

    @external_auth.setter
    def external_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs']]]]:
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_encryption")

    @tunnel_encryption.setter
    def tunnel_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_encryption", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxyApiGateway6SslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallAccessProxyApiGatewayArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayApplicationArgs']]]] = None,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewaySslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_renegotiation is not None:
            pulumi.set(__self__, "ssl_renegotiation", ssl_renegotiation)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverArgs']]]]:
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewaySslCipherSuiteArgs']]]]:
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewaySslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslRenegotiation")
    def ssl_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_renegotiation")

    @ssl_renegotiation.setter
    def ssl_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_renegotiation", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class FirewallAccessProxyApiGatewayApplicationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxyApiGatewayRealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_auth: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 tunnel_encryption: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_auth is not None:
            pulumi.set(__self__, "external_auth", external_auth)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if tunnel_encryption is not None:
            pulumi.set(__self__, "tunnel_encryption", tunnel_encryption)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="externalAuth")
    def external_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_auth")

    @external_auth.setter
    def external_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auth", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs']]]]:
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter(name="tunnelEncryption")
    def tunnel_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_encryption")

    @tunnel_encryption.setter
    def tunnel_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_encryption", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxyApiGatewaySslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallAccessProxySshClientCertCertExtensionArgs:
    def __init__(__self__, *,
                 critical: Optional[pulumi.Input[str]] = None,
                 data: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FirewallAddress6ListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class FirewallAddress6MacaddrArgs:
    def __init__(__self__, *,
                 macaddr: Optional[pulumi.Input[str]] = None):
        if macaddr is not None:
            pulumi.set(__self__, "macaddr", macaddr)

    @property
    @pulumi.getter
    def macaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "macaddr")

    @macaddr.setter
    def macaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macaddr", value)


@pulumi.input_type
class FirewallAddress6SubnetSegmentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FirewallAddress6TaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallAddress6TaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddress6TemplateSubnetSegmentArgs:
    def __init__(__self__, *,
                 bits: Optional[pulumi.Input[int]] = None,
                 exclusive: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TemplateSubnetSegmentValueArgs']]]] = None):
        if bits is not None:
            pulumi.set(__self__, "bits", bits)
        if exclusive is not None:
            pulumi.set(__self__, "exclusive", exclusive)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def bits(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bits")

    @bits.setter
    def bits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bits", value)

    @property
    @pulumi.getter
    def exclusive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclusive")

    @exclusive.setter
    def exclusive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclusive", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TemplateSubnetSegmentValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TemplateSubnetSegmentValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class FirewallAddress6TemplateSubnetSegmentValueArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FirewallAddressFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddressListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class FirewallAddressMacaddrArgs:
    def __init__(__self__, *,
                 macaddr: Optional[pulumi.Input[str]] = None):
        if macaddr is not None:
            pulumi.set(__self__, "macaddr", macaddr)

    @property
    @pulumi.getter
    def macaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "macaddr")

    @macaddr.setter
    def macaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macaddr", value)


@pulumi.input_type
class FirewallAddressTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddressTaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddressTaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddressTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallAddressTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrp6ExcludeMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrp6MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrp6TaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrp6TaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrp6TaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrp6TaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallAddrgrp6TaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrpExcludeMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrpTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrpTaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrpTaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrpTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallAddrgrpTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAuthPortalGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapDstAddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapDstAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapNatIppool6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapNatIppoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapOrigAddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapOrigAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapSrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallConsolidatedPolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallConsolidatedPolicyDstaddr4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyPoolname4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyPoolname6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicySrcaddr4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallConsolidatedPolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCountryRegionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallDecryptedTrafficMirrorInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicy6AnomalyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 thresholddefault: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "thresholddefault")

    @thresholddefault.setter
    def thresholddefault(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thresholddefault", value)


@pulumi.input_type
class FirewallDosPolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicy6ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicyAnomalyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 thresholddefault: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "thresholddefault")

    @thresholddefault.setter
    def thresholddefault(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thresholddefault", value)


@pulumi.input_type
class FirewallDosPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallIdentityBasedRouteRuleArgs:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIdentityBasedRouteRuleGroupArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if device is not None:
            pulumi.set(__self__, "device", device)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIdentityBasedRouteRuleGroupArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIdentityBasedRouteRuleGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallIdentityBasedRouteRuleGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicy6Dstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicy6Service6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicy6Srcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceAdditionEntryArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceAdditionEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceAdditionEntryPortRangeArgs']]]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceAdditionEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class FirewallInternetServiceAdditionEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class FirewallInternetServiceCustomEntryArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 dst6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryDst6Args']]]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryDstArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryDst6Args']]]]:
        return pulumi.get(self, "dst6s")

    @dst6s.setter
    def dst6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryDst6Args']]]]):
        pulumi.set(self, "dst6s", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryDstArgs']]]]:
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryPortRangeArgs']]]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class FirewallInternetServiceCustomEntryDst6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceCustomEntryDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceCustomEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class FirewallInternetServiceCustomGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceDefinitionEntryArgs:
    def __init__(__self__, *,
                 category_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceDefinitionEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None):
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "category_id")

    @category_id.setter
    def category_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceDefinitionEntryPortRangeArgs']]]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceDefinitionEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class FirewallInternetServiceDefinitionEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class FirewallInternetServiceExtensionDisableEntryArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip6_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryIp6RangeArgs']]]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryIpRangeArgs']]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip6_ranges is not None:
            pulumi.set(__self__, "ip6_ranges", ip6_ranges)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip6Ranges")
    def ip6_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryIp6RangeArgs']]]]:
        return pulumi.get(self, "ip6_ranges")

    @ip6_ranges.setter
    def ip6_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryIp6RangeArgs']]]]):
        pulumi.set(self, "ip6_ranges", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryIpRangeArgs']]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryPortRangeArgs']]]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class FirewallInternetServiceExtensionDisableEntryIp6RangeArgs:
    def __init__(__self__, *,
                 end_ip6: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip6: Optional[pulumi.Input[str]] = None):
        if end_ip6 is not None:
            pulumi.set(__self__, "end_ip6", end_ip6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip6 is not None:
            pulumi.set(__self__, "start_ip6", start_ip6)

    @property
    @pulumi.getter(name="endIp6")
    def end_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip6")

    @end_ip6.setter
    def end_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip6", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp6")
    def start_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip6")

    @start_ip6.setter
    def start_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip6", value)


@pulumi.input_type
class FirewallInternetServiceExtensionDisableEntryIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class FirewallInternetServiceExtensionDisableEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class FirewallInternetServiceExtensionEntryArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 dst6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryDst6Args']]]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryDstArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryDst6Args']]]]:
        return pulumi.get(self, "dst6s")

    @dst6s.setter
    def dst6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryDst6Args']]]]):
        pulumi.set(self, "dst6s", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryDstArgs']]]]:
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryPortRangeArgs']]]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class FirewallInternetServiceExtensionEntryDst6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceExtensionEntryDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceExtensionEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class FirewallInternetServiceGroupMemberArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceSubappSubAppArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallLocalInPolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicy6ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastAddress6TaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddress6TaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddress6TaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddress6TaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallMulticastAddress6TaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastAddressTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddressTaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddressTaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddressTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallMulticastAddressTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastPolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastPolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy46DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy46PoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy46ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy46SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy64DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy64PoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy64ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy64SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6AppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicy6AppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6ApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicy6CustomLogFieldArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class FirewallPolicy6DeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6DstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6FssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6GroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6PoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6SrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6SslMirrorIntfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6UrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicy6UserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicyCustomLogFieldArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class FirewallPolicyDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetService6CustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetService6CustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetService6GroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetService6NameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetService6SrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetService6SrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetService6SrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetService6SrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyNetworkServiceDynamicArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyNetworkServiceSrcDynamicArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyNtlmEnabledBrowserArgs:
    def __init__(__self__, *,
                 user_agent_string: Optional[pulumi.Input[str]] = None):
        if user_agent_string is not None:
            pulumi.set(__self__, "user_agent_string", user_agent_string)

    @property
    @pulumi.getter(name="userAgentString")
    def user_agent_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent_string")

    @user_agent_string.setter
    def user_agent_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent_string", value)


@pulumi.input_type
class FirewallPolicyPcpPoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyPoolname6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyPoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyRtpAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicySgtArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicySrcVendorMacArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicySslMirrorIntfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyZtnaEmsTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyZtnaEmsTagSecondaryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyZtnaGeoTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsCifsArgs:
    def __init__(__self__, *,
                 domain_controller: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 server_credential_type: Optional[pulumi.Input[str]] = None,
                 server_keytabs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProfileProtocolOptionsCifsServerKeytabArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if server_credential_type is not None:
            pulumi.set(__self__, "server_credential_type", server_credential_type)
        if server_keytabs is not None:
            pulumi.set(__self__, "server_keytabs", server_keytabs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_controller")

    @domain_controller.setter
    def domain_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_controller", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="serverCredentialType")
    def server_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_credential_type")

    @server_credential_type.setter
    def server_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_credential_type", value)

    @property
    @pulumi.getter(name="serverKeytabs")
    def server_keytabs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProfileProtocolOptionsCifsServerKeytabArgs']]]]:
        return pulumi.get(self, "server_keytabs")

    @server_keytabs.setter
    def server_keytabs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProfileProtocolOptionsCifsServerKeytabArgs']]]]):
        pulumi.set(self, "server_keytabs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsCifsServerKeytabArgs:
    def __init__(__self__, *,
                 keytab: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None):
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def keytab(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keytab")

    @keytab.setter
    def keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keytab", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsDnsArgs:
    def __init__(__self__, *,
                 ports: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsFtpArgs:
    def __init__(__self__, *,
                 comfort_amount: Optional[pulumi.Input[int]] = None,
                 comfort_interval: Optional[pulumi.Input[int]] = None,
                 explicit_ftp_tls: Optional[pulumi.Input[str]] = None,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stream_based_uncompressed_limit: Optional[pulumi.Input[int]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if explicit_ftp_tls is not None:
            pulumi.set(__self__, "explicit_ftp_tls", explicit_ftp_tls)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "comfort_amount")

    @comfort_amount.setter
    def comfort_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_amount", value)

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "comfort_interval")

    @comfort_interval.setter
    def comfort_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_interval", value)

    @property
    @pulumi.getter(name="explicitFtpTls")
    def explicit_ftp_tls(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "explicit_ftp_tls")

    @explicit_ftp_tls.setter
    def explicit_ftp_tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "explicit_ftp_tls", value)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @stream_based_uncompressed_limit.setter
    def stream_based_uncompressed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_based_uncompressed_limit", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsHttpArgs:
    def __init__(__self__, *,
                 address_ip_rating: Optional[pulumi.Input[str]] = None,
                 block_page_status_code: Optional[pulumi.Input[int]] = None,
                 comfort_amount: Optional[pulumi.Input[int]] = None,
                 comfort_interval: Optional[pulumi.Input[int]] = None,
                 fortinet_bar: Optional[pulumi.Input[str]] = None,
                 fortinet_bar_port: Optional[pulumi.Input[int]] = None,
                 h2c: Optional[pulumi.Input[str]] = None,
                 http_policy: Optional[pulumi.Input[str]] = None,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 post_lang: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 range_block: Optional[pulumi.Input[str]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stream_based_uncompressed_limit: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 strip_x_forwarded_for: Optional[pulumi.Input[str]] = None,
                 switching_protocols: Optional[pulumi.Input[str]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 tunnel_non_http: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None,
                 unknown_content_encoding: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 verify_dns_for_policy_matching: Optional[pulumi.Input[str]] = None):
        if address_ip_rating is not None:
            pulumi.set(__self__, "address_ip_rating", address_ip_rating)
        if block_page_status_code is not None:
            pulumi.set(__self__, "block_page_status_code", block_page_status_code)
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if fortinet_bar is not None:
            pulumi.set(__self__, "fortinet_bar", fortinet_bar)
        if fortinet_bar_port is not None:
            pulumi.set(__self__, "fortinet_bar_port", fortinet_bar_port)
        if h2c is not None:
            pulumi.set(__self__, "h2c", h2c)
        if http_policy is not None:
            pulumi.set(__self__, "http_policy", http_policy)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if post_lang is not None:
            pulumi.set(__self__, "post_lang", post_lang)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if range_block is not None:
            pulumi.set(__self__, "range_block", range_block)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if streaming_content_bypass is not None:
            pulumi.set(__self__, "streaming_content_bypass", streaming_content_bypass)
        if strip_x_forwarded_for is not None:
            pulumi.set(__self__, "strip_x_forwarded_for", strip_x_forwarded_for)
        if switching_protocols is not None:
            pulumi.set(__self__, "switching_protocols", switching_protocols)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if tunnel_non_http is not None:
            pulumi.set(__self__, "tunnel_non_http", tunnel_non_http)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)
        if unknown_content_encoding is not None:
            pulumi.set(__self__, "unknown_content_encoding", unknown_content_encoding)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)
        if verify_dns_for_policy_matching is not None:
            pulumi.set(__self__, "verify_dns_for_policy_matching", verify_dns_for_policy_matching)

    @property
    @pulumi.getter(name="addressIpRating")
    def address_ip_rating(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_ip_rating")

    @address_ip_rating.setter
    def address_ip_rating(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_ip_rating", value)

    @property
    @pulumi.getter(name="blockPageStatusCode")
    def block_page_status_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_page_status_code")

    @block_page_status_code.setter
    def block_page_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_page_status_code", value)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "comfort_amount")

    @comfort_amount.setter
    def comfort_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_amount", value)

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "comfort_interval")

    @comfort_interval.setter
    def comfort_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_interval", value)

    @property
    @pulumi.getter(name="fortinetBar")
    def fortinet_bar(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortinet_bar")

    @fortinet_bar.setter
    def fortinet_bar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortinet_bar", value)

    @property
    @pulumi.getter(name="fortinetBarPort")
    def fortinet_bar_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortinet_bar_port")

    @fortinet_bar_port.setter
    def fortinet_bar_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortinet_bar_port", value)

    @property
    @pulumi.getter
    def h2c(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "h2c")

    @h2c.setter
    def h2c(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h2c", value)

    @property
    @pulumi.getter(name="httpPolicy")
    def http_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_policy")

    @http_policy.setter
    def http_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_policy", value)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="postLang")
    def post_lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_lang")

    @post_lang.setter
    def post_lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_lang", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="rangeBlock")
    def range_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "range_block")

    @range_block.setter
    def range_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range_block", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @stream_based_uncompressed_limit.setter
    def stream_based_uncompressed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_based_uncompressed_limit", value)

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "streaming_content_bypass")

    @streaming_content_bypass.setter
    def streaming_content_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "streaming_content_bypass", value)

    @property
    @pulumi.getter(name="stripXForwardedFor")
    def strip_x_forwarded_for(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strip_x_forwarded_for")

    @strip_x_forwarded_for.setter
    def strip_x_forwarded_for(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strip_x_forwarded_for", value)

    @property
    @pulumi.getter(name="switchingProtocols")
    def switching_protocols(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switching_protocols")

    @switching_protocols.setter
    def switching_protocols(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switching_protocols", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_non_http")

    @tunnel_non_http.setter
    def tunnel_non_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_non_http", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)

    @property
    @pulumi.getter(name="unknownContentEncoding")
    def unknown_content_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_content_encoding")

    @unknown_content_encoding.setter
    def unknown_content_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_content_encoding", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)

    @property
    @pulumi.getter(name="verifyDnsForPolicyMatching")
    def verify_dns_for_policy_matching(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verify_dns_for_policy_matching")

    @verify_dns_for_policy_matching.setter
    def verify_dns_for_policy_matching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_dns_for_policy_matching", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsImapArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsMailSignatureArgs:
    def __init__(__self__, *,
                 signature: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsMapiArgs:
    def __init__(__self__, *,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsNntpArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsPop3Args:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsSmtpArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 server_busy: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if server_busy is not None:
            pulumi.set(__self__, "server_busy", server_busy)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="serverBusy")
    def server_busy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_busy")

    @server_busy.setter
    def server_busy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_busy", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsSshArgs:
    def __init__(__self__, *,
                 comfort_amount: Optional[pulumi.Input[int]] = None,
                 comfort_interval: Optional[pulumi.Input[int]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 stream_based_uncompressed_limit: Optional[pulumi.Input[int]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "comfort_amount")

    @comfort_amount.setter
    def comfort_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_amount", value)

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "comfort_interval")

    @comfort_interval.setter
    def comfort_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_interval", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @stream_based_uncompressed_limit.setter
    def stream_based_uncompressed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_based_uncompressed_limit", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProxyAddressApplicationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyAddressCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallProxyAddressHeaderGroupArgs:
    def __init__(__self__, *,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallProxyAddressTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddressTaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddressTaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddressTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallProxyAddressTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyAddrgrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyAddrgrpTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddrgrpTaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddrgrpTaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddrgrpTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallProxyAddrgrpTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyAccessProxy6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyAccessProxyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetService6CustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetService6CustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetService6GroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetService6NameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallProxyPolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyPoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyZtnaEmsTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallRegionCityArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallScheduleGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallSecurityPolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallSecurityPolicyDstaddr4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetService6CustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetService6CustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetService6GroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetService6NameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetService6SrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetService6SrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetService6SrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetService6SrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicySeqStatePolicyListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policyid", value)


@pulumi.input_type
class FirewallSecurityPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicySortStatePolicyListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policyid", value)


@pulumi.input_type
class FirewallSecurityPolicySrcaddr4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallSecurityPolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallServiceCustomAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallServiceCustomApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallServiceGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallShapingPolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallShapingPolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallShapingPolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingProfileShapingEntryArgs:
    def __init__(__self__, *,
                 burst_in_msec: Optional[pulumi.Input[int]] = None,
                 cburst_in_msec: Optional[pulumi.Input[int]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 guaranteed_bandwidth_percentage: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 max: Optional[pulumi.Input[int]] = None,
                 maximum_bandwidth_percentage: Optional[pulumi.Input[int]] = None,
                 min: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 red_probability: Optional[pulumi.Input[int]] = None):
        if burst_in_msec is not None:
            pulumi.set(__self__, "burst_in_msec", burst_in_msec)
        if cburst_in_msec is not None:
            pulumi.set(__self__, "cburst_in_msec", cburst_in_msec)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if guaranteed_bandwidth_percentage is not None:
            pulumi.set(__self__, "guaranteed_bandwidth_percentage", guaranteed_bandwidth_percentage)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if maximum_bandwidth_percentage is not None:
            pulumi.set(__self__, "maximum_bandwidth_percentage", maximum_bandwidth_percentage)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if red_probability is not None:
            pulumi.set(__self__, "red_probability", red_probability)

    @property
    @pulumi.getter(name="burstInMsec")
    def burst_in_msec(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "burst_in_msec")

    @burst_in_msec.setter
    def burst_in_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "burst_in_msec", value)

    @property
    @pulumi.getter(name="cburstInMsec")
    def cburst_in_msec(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cburst_in_msec")

    @cburst_in_msec.setter
    def cburst_in_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cburst_in_msec", value)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter(name="guaranteedBandwidthPercentage")
    def guaranteed_bandwidth_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "guaranteed_bandwidth_percentage")

    @guaranteed_bandwidth_percentage.setter
    def guaranteed_bandwidth_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "guaranteed_bandwidth_percentage", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter(name="maximumBandwidthPercentage")
    def maximum_bandwidth_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_bandwidth_percentage")

    @maximum_bandwidth_percentage.setter
    def maximum_bandwidth_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bandwidth_percentage", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="redProbability")
    def red_probability(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "red_probability")

    @red_probability.setter
    def red_probability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "red_probability", value)


@pulumi.input_type
class FirewallSnifferAnomalyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 thresholddefault: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "thresholddefault")

    @thresholddefault.setter
    def thresholddefault(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thresholddefault", value)


@pulumi.input_type
class FirewallSnifferIpThreatfeedArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSslSshProfileDotArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileFtpsArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 min_allowed_ssl_version: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_allowed_ssl_version")

    @min_allowed_ssl_version.setter
    def min_allowed_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_allowed_ssl_version", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileHttpsArgs:
    def __init__(__self__, *,
                 cert_probe_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 min_allowed_ssl_version: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        if cert_probe_failure is not None:
            pulumi.set(__self__, "cert_probe_failure", cert_probe_failure)
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certProbeFailure")
    def cert_probe_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_probe_failure")

    @cert_probe_failure.setter
    def cert_probe_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_probe_failure", value)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_allowed_ssl_version")

    @min_allowed_ssl_version.setter
    def min_allowed_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_allowed_ssl_version", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileImapsArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfilePop3sArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileSmtpsArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileSshArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 ssh_algorithm: Optional[pulumi.Input[str]] = None,
                 ssh_policy_check: Optional[pulumi.Input[str]] = None,
                 ssh_tun_policy_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_version: Optional[pulumi.Input[str]] = None):
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if ssh_algorithm is not None:
            pulumi.set(__self__, "ssh_algorithm", ssh_algorithm)
        if ssh_policy_check is not None:
            pulumi.set(__self__, "ssh_policy_check", ssh_policy_check)
        if ssh_tun_policy_check is not None:
            pulumi.set(__self__, "ssh_tun_policy_check", ssh_tun_policy_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_version is not None:
            pulumi.set(__self__, "unsupported_version", unsupported_version)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="sshAlgorithm")
    def ssh_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_algorithm")

    @ssh_algorithm.setter
    def ssh_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_algorithm", value)

    @property
    @pulumi.getter(name="sshPolicyCheck")
    def ssh_policy_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_policy_check")

    @ssh_policy_check.setter
    def ssh_policy_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_check", value)

    @property
    @pulumi.getter(name="sshTunPolicyCheck")
    def ssh_tun_policy_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_tun_policy_check")

    @ssh_tun_policy_check.setter
    def ssh_tun_policy_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_tun_policy_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedVersion")
    def unsupported_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_version")

    @unsupported_version.setter
    def unsupported_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_version", value)


@pulumi.input_type
class FirewallSslSshProfileSslArgs:
    def __init__(__self__, *,
                 cert_probe_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 min_allowed_ssl_version: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        if cert_probe_failure is not None:
            pulumi.set(__self__, "cert_probe_failure", cert_probe_failure)
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certProbeFailure")
    def cert_probe_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_probe_failure")

    @cert_probe_failure.setter
    def cert_probe_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_probe_failure", value)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_allowed_ssl_version")

    @min_allowed_ssl_version.setter
    def min_allowed_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_allowed_ssl_version", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileSslExemptArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 address6: Optional[pulumi.Input[str]] = None,
                 fortiguard_category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 wildcard_fqdn: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address6 is not None:
            pulumi.set(__self__, "address6", address6)
        if fortiguard_category is not None:
            pulumi.set(__self__, "fortiguard_category", fortiguard_category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wildcard_fqdn is not None:
            pulumi.set(__self__, "wildcard_fqdn", wildcard_fqdn)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def address6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address6")

    @address6.setter
    def address6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address6", value)

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortiguard_category")

    @fortiguard_category.setter
    def fortiguard_category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortiguard_category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="wildcardFqdn")
    def wildcard_fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wildcard_fqdn")

    @wildcard_fqdn.setter
    def wildcard_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard_fqdn", value)


@pulumi.input_type
class FirewallSslSshProfileSslServerArgs:
    def __init__(__self__, *,
                 ftps_client_cert_request: Optional[pulumi.Input[str]] = None,
                 ftps_client_certificate: Optional[pulumi.Input[str]] = None,
                 https_client_cert_request: Optional[pulumi.Input[str]] = None,
                 https_client_certificate: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 imaps_client_cert_request: Optional[pulumi.Input[str]] = None,
                 imaps_client_certificate: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 pop3s_client_cert_request: Optional[pulumi.Input[str]] = None,
                 pop3s_client_certificate: Optional[pulumi.Input[str]] = None,
                 smtps_client_cert_request: Optional[pulumi.Input[str]] = None,
                 smtps_client_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_other_client_cert_request: Optional[pulumi.Input[str]] = None,
                 ssl_other_client_certificate: Optional[pulumi.Input[str]] = None):
        if ftps_client_cert_request is not None:
            pulumi.set(__self__, "ftps_client_cert_request", ftps_client_cert_request)
        if ftps_client_certificate is not None:
            pulumi.set(__self__, "ftps_client_certificate", ftps_client_certificate)
        if https_client_cert_request is not None:
            pulumi.set(__self__, "https_client_cert_request", https_client_cert_request)
        if https_client_certificate is not None:
            pulumi.set(__self__, "https_client_certificate", https_client_certificate)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if imaps_client_cert_request is not None:
            pulumi.set(__self__, "imaps_client_cert_request", imaps_client_cert_request)
        if imaps_client_certificate is not None:
            pulumi.set(__self__, "imaps_client_certificate", imaps_client_certificate)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if pop3s_client_cert_request is not None:
            pulumi.set(__self__, "pop3s_client_cert_request", pop3s_client_cert_request)
        if pop3s_client_certificate is not None:
            pulumi.set(__self__, "pop3s_client_certificate", pop3s_client_certificate)
        if smtps_client_cert_request is not None:
            pulumi.set(__self__, "smtps_client_cert_request", smtps_client_cert_request)
        if smtps_client_certificate is not None:
            pulumi.set(__self__, "smtps_client_certificate", smtps_client_certificate)
        if ssl_other_client_cert_request is not None:
            pulumi.set(__self__, "ssl_other_client_cert_request", ssl_other_client_cert_request)
        if ssl_other_client_certificate is not None:
            pulumi.set(__self__, "ssl_other_client_certificate", ssl_other_client_certificate)

    @property
    @pulumi.getter(name="ftpsClientCertRequest")
    def ftps_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftps_client_cert_request")

    @ftps_client_cert_request.setter
    def ftps_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftps_client_cert_request", value)

    @property
    @pulumi.getter(name="ftpsClientCertificate")
    def ftps_client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftps_client_certificate")

    @ftps_client_certificate.setter
    def ftps_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftps_client_certificate", value)

    @property
    @pulumi.getter(name="httpsClientCertRequest")
    def https_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_client_cert_request")

    @https_client_cert_request.setter
    def https_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_client_cert_request", value)

    @property
    @pulumi.getter(name="httpsClientCertificate")
    def https_client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_client_certificate")

    @https_client_certificate.setter
    def https_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_client_certificate", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imapsClientCertRequest")
    def imaps_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imaps_client_cert_request")

    @imaps_client_cert_request.setter
    def imaps_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imaps_client_cert_request", value)

    @property
    @pulumi.getter(name="imapsClientCertificate")
    def imaps_client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imaps_client_certificate")

    @imaps_client_certificate.setter
    def imaps_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imaps_client_certificate", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="pop3sClientCertRequest")
    def pop3s_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pop3s_client_cert_request")

    @pop3s_client_cert_request.setter
    def pop3s_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pop3s_client_cert_request", value)

    @property
    @pulumi.getter(name="pop3sClientCertificate")
    def pop3s_client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pop3s_client_certificate")

    @pop3s_client_certificate.setter
    def pop3s_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pop3s_client_certificate", value)

    @property
    @pulumi.getter(name="smtpsClientCertRequest")
    def smtps_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smtps_client_cert_request")

    @smtps_client_cert_request.setter
    def smtps_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smtps_client_cert_request", value)

    @property
    @pulumi.getter(name="smtpsClientCertificate")
    def smtps_client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smtps_client_certificate")

    @smtps_client_certificate.setter
    def smtps_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smtps_client_certificate", value)

    @property
    @pulumi.getter(name="sslOtherClientCertRequest")
    def ssl_other_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_other_client_cert_request")

    @ssl_other_client_cert_request.setter
    def ssl_other_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_other_client_cert_request", value)

    @property
    @pulumi.getter(name="sslOtherClientCertificate")
    def ssl_other_client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_other_client_certificate")

    @ssl_other_client_certificate.setter
    def ssl_other_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_other_client_certificate", value)


@pulumi.input_type
class FirewallTtlPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallTtlPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVip46MonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVip46RealserverArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallVip46SrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class FirewallVip46SrcintfFilterArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class FirewallVip64MonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVip64RealserverArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallVip64SrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class FirewallVip6MonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVip6RealserverArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallVip6SrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class FirewallVip6SslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallVip6SslServerCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallVipExtaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipMappedipArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class FirewallVipMonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipRealserverArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 translate_host: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if translate_host is not None:
            pulumi.set(__self__, "translate_host", translate_host)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="translateHost")
    def translate_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "translate_host")

    @translate_host.setter
    def translate_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "translate_host", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallVipServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipSrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class FirewallVipSrcintfFilterArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class FirewallVipSslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallVipSslServerCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallVipgrp46MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipgrp64MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipgrp6MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipgrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallWildcardFqdnGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IcapProfileIcapHeaderArgs:
    def __init__(__self__, *,
                 base64_encoding: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if base64_encoding is not None:
            pulumi.set(__self__, "base64_encoding", base64_encoding)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="base64Encoding")
    def base64_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base64_encoding")

    @base64_encoding.setter
    def base64_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base64_encoding", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IcapProfileRespmodForwardRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 header_groups: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHeaderGroupArgs']]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 http_resp_status_codes: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if header_groups is not None:
            pulumi.set(__self__, "header_groups", header_groups)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_resp_status_codes is not None:
            pulumi.set(__self__, "http_resp_status_codes", http_resp_status_codes)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="headerGroups")
    def header_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHeaderGroupArgs']]]]:
        return pulumi.get(self, "header_groups")

    @header_groups.setter
    def header_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHeaderGroupArgs']]]]):
        pulumi.set(self, "header_groups", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpRespStatusCodes")
    def http_resp_status_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs']]]]:
        return pulumi.get(self, "http_resp_status_codes")

    @http_resp_status_codes.setter
    def http_resp_status_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs']]]]):
        pulumi.set(self, "http_resp_status_codes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IcapProfileRespmodForwardRuleHeaderGroupArgs:
    def __init__(__self__, *,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class IcapServerGroupServerListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class IpsDecoderParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IpsGlobalTlsActiveProbeArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)


@pulumi.input_type
class IpsRuleMetadataArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 metaid: Optional[pulumi.Input[int]] = None,
                 valueid: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metaid is not None:
            pulumi.set(__self__, "metaid", metaid)
        if valueid is not None:
            pulumi.set(__self__, "valueid", valueid)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metaid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metaid")

    @metaid.setter
    def metaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metaid", value)

    @property
    @pulumi.getter
    def valueid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "valueid")

    @valueid.setter
    def valueid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "valueid", value)


@pulumi.input_type
class IpsSensorEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 application: Optional[pulumi.Input[str]] = None,
                 cves: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryCfeArgs']]]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 default_status: Optional[pulumi.Input[str]] = None,
                 exempt_ips: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryExemptIpArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 last_modified: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_attack_context: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 rate_count: Optional[pulumi.Input[int]] = None,
                 rate_duration: Optional[pulumi.Input[int]] = None,
                 rate_mode: Optional[pulumi.Input[str]] = None,
                 rate_track: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryRuleArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vuln_types: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryVulnTypeArgs']]]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if cves is not None:
            pulumi.set(__self__, "cves", cves)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if default_status is not None:
            pulumi.set(__self__, "default_status", default_status)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_attack_context is not None:
            pulumi.set(__self__, "log_attack_context", log_attack_context)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rate_count is not None:
            pulumi.set(__self__, "rate_count", rate_count)
        if rate_duration is not None:
            pulumi.set(__self__, "rate_duration", rate_duration)
        if rate_mode is not None:
            pulumi.set(__self__, "rate_mode", rate_mode)
        if rate_track is not None:
            pulumi.set(__self__, "rate_track", rate_track)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vuln_types is not None:
            pulumi.set(__self__, "vuln_types", vuln_types)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter
    def cves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryCfeArgs']]]]:
        return pulumi.get(self, "cves")

    @cves.setter
    def cves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryCfeArgs']]]]):
        pulumi.set(self, "cves", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="defaultStatus")
    def default_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_status")

    @default_status.setter
    def default_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_status", value)

    @property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryExemptIpArgs']]]]:
        return pulumi.get(self, "exempt_ips")

    @exempt_ips.setter
    def exempt_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryExemptIpArgs']]]]):
        pulumi.set(self, "exempt_ips", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAttackContext")
    def log_attack_context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_attack_context")

    @log_attack_context.setter
    def log_attack_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_attack_context", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter(name="rateCount")
    def rate_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rate_count")

    @rate_count.setter
    def rate_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_count", value)

    @property
    @pulumi.getter(name="rateDuration")
    def rate_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rate_duration")

    @rate_duration.setter
    def rate_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_duration", value)

    @property
    @pulumi.getter(name="rateMode")
    def rate_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rate_mode")

    @rate_mode.setter
    def rate_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_mode", value)

    @property
    @pulumi.getter(name="rateTrack")
    def rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rate_track")

    @rate_track.setter
    def rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_track", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="vulnTypes")
    def vuln_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryVulnTypeArgs']]]]:
        return pulumi.get(self, "vuln_types")

    @vuln_types.setter
    def vuln_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryVulnTypeArgs']]]]):
        pulumi.set(self, "vuln_types", value)


@pulumi.input_type
class IpsSensorEntryCfeArgs:
    def __init__(__self__, *,
                 cve_entry: Optional[pulumi.Input[str]] = None):
        if cve_entry is not None:
            pulumi.set(__self__, "cve_entry", cve_entry)

    @property
    @pulumi.getter(name="cveEntry")
    def cve_entry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cve_entry")

    @cve_entry.setter
    def cve_entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cve_entry", value)


@pulumi.input_type
class IpsSensorEntryExemptIpArgs:
    def __init__(__self__, *,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_ip: Optional[pulumi.Input[str]] = None):
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip", value)


@pulumi.input_type
class IpsSensorEntryRuleArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class IpsSensorEntryVulnTypeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class IpsSensorFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 application: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[int]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class IpsSensorOverrideArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 exempt_ips: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorOverrideExemptIpArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[int]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorOverrideExemptIpArgs']]]]:
        return pulumi.get(self, "exempt_ips")

    @exempt_ips.setter
    def exempt_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorOverrideExemptIpArgs']]]]):
        pulumi.set(self, "exempt_ips", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class IpsSensorOverrideExemptIpArgs:
    def __init__(__self__, *,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_ip: Optional[pulumi.Input[str]] = None):
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip", value)


@pulumi.input_type
class LogDiskFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzer2FilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzer2OverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzer2OverrideSettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzer2SettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzer3FilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzer3OverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzer3OverrideSettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzer3SettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzerCloudFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzerCloudOverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzerCloudSettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzerFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzerOverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzerOverrideSettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzerSettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortiguardFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortiguardOverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogMemoryFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogNullDeviceFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSettingCustomLogFieldArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class LogSyslogd2FilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd2OverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd2OverrideSettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogd2SettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogd3FilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd3OverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd3OverrideSettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogd3SettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogd4FilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd4OverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd4OverrideSettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogd4SettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogdFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogdOverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogdOverrideSettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogdSettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogThreatWeightApplicationArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class LogThreatWeightGeolocationArgs:
    def __init__(__self__, *,
                 country: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None):
        if country is not None:
            pulumi.set(__self__, "country", country)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class LogThreatWeightIpsArgs:
    def __init__(__self__, *,
                 critical_severity: Optional[pulumi.Input[str]] = None,
                 high_severity: Optional[pulumi.Input[str]] = None,
                 info_severity: Optional[pulumi.Input[str]] = None,
                 low_severity: Optional[pulumi.Input[str]] = None,
                 medium_severity: Optional[pulumi.Input[str]] = None):
        if critical_severity is not None:
            pulumi.set(__self__, "critical_severity", critical_severity)
        if high_severity is not None:
            pulumi.set(__self__, "high_severity", high_severity)
        if info_severity is not None:
            pulumi.set(__self__, "info_severity", info_severity)
        if low_severity is not None:
            pulumi.set(__self__, "low_severity", low_severity)
        if medium_severity is not None:
            pulumi.set(__self__, "medium_severity", medium_severity)

    @property
    @pulumi.getter(name="criticalSeverity")
    def critical_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "critical_severity")

    @critical_severity.setter
    def critical_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "critical_severity", value)

    @property
    @pulumi.getter(name="highSeverity")
    def high_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "high_severity")

    @high_severity.setter
    def high_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "high_severity", value)

    @property
    @pulumi.getter(name="infoSeverity")
    def info_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "info_severity")

    @info_severity.setter
    def info_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "info_severity", value)

    @property
    @pulumi.getter(name="lowSeverity")
    def low_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "low_severity")

    @low_severity.setter
    def low_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "low_severity", value)

    @property
    @pulumi.getter(name="mediumSeverity")
    def medium_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "medium_severity")

    @medium_severity.setter
    def medium_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium_severity", value)


@pulumi.input_type
class LogThreatWeightLevelArgs:
    def __init__(__self__, *,
                 critical: Optional[pulumi.Input[int]] = None,
                 high: Optional[pulumi.Input[int]] = None,
                 low: Optional[pulumi.Input[int]] = None,
                 medium: Optional[pulumi.Input[int]] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if medium is not None:
            pulumi.set(__self__, "medium", medium)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def high(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "high")

    @high.setter
    def high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "high", value)

    @property
    @pulumi.getter
    def low(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "low")

    @low.setter
    def low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "low", value)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "medium", value)


@pulumi.input_type
class LogThreatWeightMalwareArgs:
    def __init__(__self__, *,
                 botnet_connection: Optional[pulumi.Input[str]] = None,
                 command_blocked: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 ems_threat_feed: Optional[pulumi.Input[str]] = None,
                 file_blocked: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 fsa_high_risk: Optional[pulumi.Input[str]] = None,
                 fsa_malicious: Optional[pulumi.Input[str]] = None,
                 fsa_medium_risk: Optional[pulumi.Input[str]] = None,
                 inline_block: Optional[pulumi.Input[str]] = None,
                 malware_list: Optional[pulumi.Input[str]] = None,
                 mimefragmented: Optional[pulumi.Input[str]] = None,
                 oversized: Optional[pulumi.Input[str]] = None,
                 switch_proto: Optional[pulumi.Input[str]] = None,
                 virus_file_type_executable: Optional[pulumi.Input[str]] = None,
                 virus_infected: Optional[pulumi.Input[str]] = None,
                 virus_outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 virus_scan_error: Optional[pulumi.Input[str]] = None):
        if botnet_connection is not None:
            pulumi.set(__self__, "botnet_connection", botnet_connection)
        if command_blocked is not None:
            pulumi.set(__self__, "command_blocked", command_blocked)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if ems_threat_feed is not None:
            pulumi.set(__self__, "ems_threat_feed", ems_threat_feed)
        if file_blocked is not None:
            pulumi.set(__self__, "file_blocked", file_blocked)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if fsa_high_risk is not None:
            pulumi.set(__self__, "fsa_high_risk", fsa_high_risk)
        if fsa_malicious is not None:
            pulumi.set(__self__, "fsa_malicious", fsa_malicious)
        if fsa_medium_risk is not None:
            pulumi.set(__self__, "fsa_medium_risk", fsa_medium_risk)
        if inline_block is not None:
            pulumi.set(__self__, "inline_block", inline_block)
        if malware_list is not None:
            pulumi.set(__self__, "malware_list", malware_list)
        if mimefragmented is not None:
            pulumi.set(__self__, "mimefragmented", mimefragmented)
        if oversized is not None:
            pulumi.set(__self__, "oversized", oversized)
        if switch_proto is not None:
            pulumi.set(__self__, "switch_proto", switch_proto)
        if virus_file_type_executable is not None:
            pulumi.set(__self__, "virus_file_type_executable", virus_file_type_executable)
        if virus_infected is not None:
            pulumi.set(__self__, "virus_infected", virus_infected)
        if virus_outbreak_prevention is not None:
            pulumi.set(__self__, "virus_outbreak_prevention", virus_outbreak_prevention)
        if virus_scan_error is not None:
            pulumi.set(__self__, "virus_scan_error", virus_scan_error)

    @property
    @pulumi.getter(name="botnetConnection")
    def botnet_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "botnet_connection")

    @botnet_connection.setter
    def botnet_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "botnet_connection", value)

    @property
    @pulumi.getter(name="commandBlocked")
    def command_blocked(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command_blocked")

    @command_blocked.setter
    def command_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_blocked", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter(name="emsThreatFeed")
    def ems_threat_feed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ems_threat_feed")

    @ems_threat_feed.setter
    def ems_threat_feed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_threat_feed", value)

    @property
    @pulumi.getter(name="fileBlocked")
    def file_blocked(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_blocked")

    @file_blocked.setter
    def file_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_blocked", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter(name="fsaHighRisk")
    def fsa_high_risk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsa_high_risk")

    @fsa_high_risk.setter
    def fsa_high_risk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsa_high_risk", value)

    @property
    @pulumi.getter(name="fsaMalicious")
    def fsa_malicious(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsa_malicious")

    @fsa_malicious.setter
    def fsa_malicious(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsa_malicious", value)

    @property
    @pulumi.getter(name="fsaMediumRisk")
    def fsa_medium_risk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsa_medium_risk")

    @fsa_medium_risk.setter
    def fsa_medium_risk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsa_medium_risk", value)

    @property
    @pulumi.getter(name="inlineBlock")
    def inline_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inline_block")

    @inline_block.setter
    def inline_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inline_block", value)

    @property
    @pulumi.getter(name="malwareList")
    def malware_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malware_list")

    @malware_list.setter
    def malware_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malware_list", value)

    @property
    @pulumi.getter
    def mimefragmented(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mimefragmented")

    @mimefragmented.setter
    def mimefragmented(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mimefragmented", value)

    @property
    @pulumi.getter
    def oversized(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oversized")

    @oversized.setter
    def oversized(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oversized", value)

    @property
    @pulumi.getter(name="switchProto")
    def switch_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_proto")

    @switch_proto.setter
    def switch_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_proto", value)

    @property
    @pulumi.getter(name="virusFileTypeExecutable")
    def virus_file_type_executable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virus_file_type_executable")

    @virus_file_type_executable.setter
    def virus_file_type_executable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virus_file_type_executable", value)

    @property
    @pulumi.getter(name="virusInfected")
    def virus_infected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virus_infected")

    @virus_infected.setter
    def virus_infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virus_infected", value)

    @property
    @pulumi.getter(name="virusOutbreakPrevention")
    def virus_outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virus_outbreak_prevention")

    @virus_outbreak_prevention.setter
    def virus_outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virus_outbreak_prevention", value)

    @property
    @pulumi.getter(name="virusScanError")
    def virus_scan_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virus_scan_error")

    @virus_scan_error.setter
    def virus_scan_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virus_scan_error", value)


@pulumi.input_type
class LogThreatWeightWebArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class LogWebtrendsFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class NsxtServiceChainServiceIndexArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reverse_index: Optional[pulumi.Input[int]] = None,
                 vd: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reverse_index is not None:
            pulumi.set(__self__, "reverse_index", reverse_index)
        if vd is not None:
            pulumi.set(__self__, "vd", vd)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reverseIndex")
    def reverse_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reverse_index")

    @reverse_index.setter
    def reverse_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reverse_index", value)

    @property
    @pulumi.getter
    def vd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vd")

    @vd.setter
    def vd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vd", value)


@pulumi.input_type
class ReportChartCategorySeriesArgs:
    def __init__(__self__, *,
                 databind: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[int]] = None):
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "font_size", value)


@pulumi.input_type
class ReportChartColumnArgs:
    def __init__(__self__, *,
                 detail_unit: Optional[pulumi.Input[str]] = None,
                 detail_value: Optional[pulumi.Input[str]] = None,
                 footer_unit: Optional[pulumi.Input[str]] = None,
                 footer_value: Optional[pulumi.Input[str]] = None,
                 header_value: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnMappingArgs']]]] = None):
        if detail_unit is not None:
            pulumi.set(__self__, "detail_unit", detail_unit)
        if detail_value is not None:
            pulumi.set(__self__, "detail_value", detail_value)
        if footer_unit is not None:
            pulumi.set(__self__, "footer_unit", footer_unit)
        if footer_value is not None:
            pulumi.set(__self__, "footer_value", footer_value)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)

    @property
    @pulumi.getter(name="detailUnit")
    def detail_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detail_unit")

    @detail_unit.setter
    def detail_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail_unit", value)

    @property
    @pulumi.getter(name="detailValue")
    def detail_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detail_value")

    @detail_value.setter
    def detail_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail_value", value)

    @property
    @pulumi.getter(name="footerUnit")
    def footer_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "footer_unit")

    @footer_unit.setter
    def footer_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer_unit", value)

    @property
    @pulumi.getter(name="footerValue")
    def footer_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "footer_value")

    @footer_value.setter
    def footer_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer_value", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnMappingArgs']]]]:
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnMappingArgs']]]]):
        pulumi.set(self, "mappings", value)


@pulumi.input_type
class ReportChartColumnMappingArgs:
    def __init__(__self__, *,
                 displayname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 op: Optional[pulumi.Input[str]] = None,
                 value1: Optional[pulumi.Input[str]] = None,
                 value2: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input[str]] = None):
        if displayname is not None:
            pulumi.set(__self__, "displayname", displayname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if op is not None:
            pulumi.set(__self__, "op", op)
        if value1 is not None:
            pulumi.set(__self__, "value1", value1)
        if value2 is not None:
            pulumi.set(__self__, "value2", value2)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def displayname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "displayname")

    @displayname.setter
    def displayname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "displayname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def value1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value1")

    @value1.setter
    def value1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value1", value)

    @property
    @pulumi.getter
    def value2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value2")

    @value2.setter
    def value2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value2", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_type", value)


@pulumi.input_type
class ReportChartDrillDownChartArgs:
    def __init__(__self__, *,
                 chart_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if chart_name is not None:
            pulumi.set(__self__, "chart_name", chart_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="chartName")
    def chart_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chart_name")

    @chart_name.setter
    def chart_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ReportChartValueSeriesArgs:
    def __init__(__self__, *,
                 databind: Optional[pulumi.Input[str]] = None):
        if databind is not None:
            pulumi.set(__self__, "databind", databind)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)


@pulumi.input_type
class ReportChartXSeriesArgs:
    def __init__(__self__, *,
                 caption: Optional[pulumi.Input[str]] = None,
                 caption_font_size: Optional[pulumi.Input[int]] = None,
                 databind: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[int]] = None,
                 is_category: Optional[pulumi.Input[str]] = None,
                 label_angle: Optional[pulumi.Input[str]] = None,
                 scale_direction: Optional[pulumi.Input[str]] = None,
                 scale_format: Optional[pulumi.Input[str]] = None,
                 scale_step: Optional[pulumi.Input[int]] = None,
                 scale_unit: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        if caption is not None:
            pulumi.set(__self__, "caption", caption)
        if caption_font_size is not None:
            pulumi.set(__self__, "caption_font_size", caption_font_size)
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if is_category is not None:
            pulumi.set(__self__, "is_category", is_category)
        if label_angle is not None:
            pulumi.set(__self__, "label_angle", label_angle)
        if scale_direction is not None:
            pulumi.set(__self__, "scale_direction", scale_direction)
        if scale_format is not None:
            pulumi.set(__self__, "scale_format", scale_format)
        if scale_step is not None:
            pulumi.set(__self__, "scale_step", scale_step)
        if scale_unit is not None:
            pulumi.set(__self__, "scale_unit", scale_unit)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def caption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "caption")

    @caption.setter
    def caption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caption", value)

    @property
    @pulumi.getter(name="captionFontSize")
    def caption_font_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "caption_font_size")

    @caption_font_size.setter
    def caption_font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "caption_font_size", value)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="isCategory")
    def is_category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_category")

    @is_category.setter
    def is_category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_category", value)

    @property
    @pulumi.getter(name="labelAngle")
    def label_angle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_angle")

    @label_angle.setter
    def label_angle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_angle", value)

    @property
    @pulumi.getter(name="scaleDirection")
    def scale_direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale_direction")

    @scale_direction.setter
    def scale_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_direction", value)

    @property
    @pulumi.getter(name="scaleFormat")
    def scale_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale_format")

    @scale_format.setter
    def scale_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_format", value)

    @property
    @pulumi.getter(name="scaleStep")
    def scale_step(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scale_step")

    @scale_step.setter
    def scale_step(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_step", value)

    @property
    @pulumi.getter(name="scaleUnit")
    def scale_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scale_unit")

    @scale_unit.setter
    def scale_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_unit", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class ReportChartYSeriesArgs:
    def __init__(__self__, *,
                 caption: Optional[pulumi.Input[str]] = None,
                 caption_font_size: Optional[pulumi.Input[int]] = None,
                 databind: Optional[pulumi.Input[str]] = None,
                 extra_databind: Optional[pulumi.Input[str]] = None,
                 extra_y: Optional[pulumi.Input[str]] = None,
                 extra_y_legend: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[int]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 label_angle: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 y_legend: Optional[pulumi.Input[str]] = None):
        if caption is not None:
            pulumi.set(__self__, "caption", caption)
        if caption_font_size is not None:
            pulumi.set(__self__, "caption_font_size", caption_font_size)
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if extra_databind is not None:
            pulumi.set(__self__, "extra_databind", extra_databind)
        if extra_y is not None:
            pulumi.set(__self__, "extra_y", extra_y)
        if extra_y_legend is not None:
            pulumi.set(__self__, "extra_y_legend", extra_y_legend)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if label_angle is not None:
            pulumi.set(__self__, "label_angle", label_angle)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if y_legend is not None:
            pulumi.set(__self__, "y_legend", y_legend)

    @property
    @pulumi.getter
    def caption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "caption")

    @caption.setter
    def caption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caption", value)

    @property
    @pulumi.getter(name="captionFontSize")
    def caption_font_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "caption_font_size")

    @caption_font_size.setter
    def caption_font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "caption_font_size", value)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)

    @property
    @pulumi.getter(name="extraDatabind")
    def extra_databind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_databind")

    @extra_databind.setter
    def extra_databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_databind", value)

    @property
    @pulumi.getter(name="extraY")
    def extra_y(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_y")

    @extra_y.setter
    def extra_y(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_y", value)

    @property
    @pulumi.getter(name="extraYLegend")
    def extra_y_legend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_y_legend")

    @extra_y_legend.setter
    def extra_y_legend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_y_legend", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="labelAngle")
    def label_angle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_angle")

    @label_angle.setter
    def label_angle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_angle", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter(name="yLegend")
    def y_legend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_legend")

    @y_legend.setter
    def y_legend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_legend", value)


@pulumi.input_type
class ReportDatasetFieldArgs:
    def __init__(__self__, *,
                 displayname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if displayname is not None:
            pulumi.set(__self__, "displayname", displayname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def displayname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "displayname")

    @displayname.setter
    def displayname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "displayname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ReportDatasetParameterArgs:
    def __init__(__self__, *,
                 data_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ReportLayoutBodyItemArgs:
    def __init__(__self__, *,
                 chart: Optional[pulumi.Input[str]] = None,
                 chart_options: Optional[pulumi.Input[str]] = None,
                 column: Optional[pulumi.Input[int]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 drill_down_items: Optional[pulumi.Input[str]] = None,
                 drill_down_types: Optional[pulumi.Input[str]] = None,
                 hide: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 img_src: Optional[pulumi.Input[str]] = None,
                 list_component: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemListArgs']]]] = None,
                 misc_component: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemParameterArgs']]]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 table_caption_style: Optional[pulumi.Input[str]] = None,
                 table_column_widths: Optional[pulumi.Input[str]] = None,
                 table_even_row_style: Optional[pulumi.Input[str]] = None,
                 table_head_style: Optional[pulumi.Input[str]] = None,
                 table_odd_row_style: Optional[pulumi.Input[str]] = None,
                 text_component: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 top_n: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if chart_options is not None:
            pulumi.set(__self__, "chart_options", chart_options)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drill_down_items is not None:
            pulumi.set(__self__, "drill_down_items", drill_down_items)
        if drill_down_types is not None:
            pulumi.set(__self__, "drill_down_types", drill_down_types)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if list_component is not None:
            pulumi.set(__self__, "list_component", list_component)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if misc_component is not None:
            pulumi.set(__self__, "misc_component", misc_component)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if table_caption_style is not None:
            pulumi.set(__self__, "table_caption_style", table_caption_style)
        if table_column_widths is not None:
            pulumi.set(__self__, "table_column_widths", table_column_widths)
        if table_even_row_style is not None:
            pulumi.set(__self__, "table_even_row_style", table_even_row_style)
        if table_head_style is not None:
            pulumi.set(__self__, "table_head_style", table_head_style)
        if table_odd_row_style is not None:
            pulumi.set(__self__, "table_odd_row_style", table_odd_row_style)
        if text_component is not None:
            pulumi.set(__self__, "text_component", text_component)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if top_n is not None:
            pulumi.set(__self__, "top_n", top_n)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter(name="chartOptions")
    def chart_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chart_options")

    @chart_options.setter
    def chart_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_options", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="drillDownItems")
    def drill_down_items(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drill_down_items")

    @drill_down_items.setter
    def drill_down_items(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drill_down_items", value)

    @property
    @pulumi.getter(name="drillDownTypes")
    def drill_down_types(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drill_down_types")

    @drill_down_types.setter
    def drill_down_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drill_down_types", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "img_src")

    @img_src.setter
    def img_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_src", value)

    @property
    @pulumi.getter(name="listComponent")
    def list_component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "list_component")

    @list_component.setter
    def list_component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "list_component", value)

    @property
    @pulumi.getter
    def lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemListArgs']]]]:
        return pulumi.get(self, "lists")

    @lists.setter
    def lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemListArgs']]]]):
        pulumi.set(self, "lists", value)

    @property
    @pulumi.getter(name="miscComponent")
    def misc_component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "misc_component")

    @misc_component.setter
    def misc_component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "misc_component", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemParameterArgs']]]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="tableCaptionStyle")
    def table_caption_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_caption_style")

    @table_caption_style.setter
    def table_caption_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_caption_style", value)

    @property
    @pulumi.getter(name="tableColumnWidths")
    def table_column_widths(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_column_widths")

    @table_column_widths.setter
    def table_column_widths(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_column_widths", value)

    @property
    @pulumi.getter(name="tableEvenRowStyle")
    def table_even_row_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_even_row_style")

    @table_even_row_style.setter
    def table_even_row_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_even_row_style", value)

    @property
    @pulumi.getter(name="tableHeadStyle")
    def table_head_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_head_style")

    @table_head_style.setter
    def table_head_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_head_style", value)

    @property
    @pulumi.getter(name="tableOddRowStyle")
    def table_odd_row_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_odd_row_style")

    @table_odd_row_style.setter
    def table_odd_row_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_odd_row_style", value)

    @property
    @pulumi.getter(name="textComponent")
    def text_component(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_component")

    @text_component.setter
    def text_component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_component", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="topN")
    def top_n(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "top_n")

    @top_n.setter
    def top_n(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "top_n", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ReportLayoutBodyItemListArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ReportLayoutBodyItemParameterArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ReportLayoutPageArgs:
    def __init__(__self__, *,
                 column_break_before: Optional[pulumi.Input[str]] = None,
                 footer: Optional[pulumi.Input['ReportLayoutPageFooterArgs']] = None,
                 header: Optional[pulumi.Input['ReportLayoutPageHeaderArgs']] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page_break_before: Optional[pulumi.Input[str]] = None,
                 paper: Optional[pulumi.Input[str]] = None):
        if column_break_before is not None:
            pulumi.set(__self__, "column_break_before", column_break_before)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if page_break_before is not None:
            pulumi.set(__self__, "page_break_before", page_break_before)
        if paper is not None:
            pulumi.set(__self__, "paper", paper)

    @property
    @pulumi.getter(name="columnBreakBefore")
    def column_break_before(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_break_before")

    @column_break_before.setter
    def column_break_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_break_before", value)

    @property
    @pulumi.getter
    def footer(self) -> Optional[pulumi.Input['ReportLayoutPageFooterArgs']]:
        return pulumi.get(self, "footer")

    @footer.setter
    def footer(self, value: Optional[pulumi.Input['ReportLayoutPageFooterArgs']]):
        pulumi.set(self, "footer", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input['ReportLayoutPageHeaderArgs']]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input['ReportLayoutPageHeaderArgs']]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="pageBreakBefore")
    def page_break_before(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "page_break_before")

    @page_break_before.setter
    def page_break_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_break_before", value)

    @property
    @pulumi.getter
    def paper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "paper")

    @paper.setter
    def paper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper", value)


@pulumi.input_type
class ReportLayoutPageFooterArgs:
    def __init__(__self__, *,
                 footer_items: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageFooterFooterItemArgs']]]] = None,
                 style: Optional[pulumi.Input[str]] = None):
        if footer_items is not None:
            pulumi.set(__self__, "footer_items", footer_items)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="footerItems")
    def footer_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageFooterFooterItemArgs']]]]:
        return pulumi.get(self, "footer_items")

    @footer_items.setter
    def footer_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageFooterFooterItemArgs']]]]):
        pulumi.set(self, "footer_items", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class ReportLayoutPageFooterFooterItemArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 img_src: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "img_src")

    @img_src.setter
    def img_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_src", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ReportLayoutPageHeaderArgs:
    def __init__(__self__, *,
                 header_items: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageHeaderHeaderItemArgs']]]] = None,
                 style: Optional[pulumi.Input[str]] = None):
        if header_items is not None:
            pulumi.set(__self__, "header_items", header_items)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="headerItems")
    def header_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageHeaderHeaderItemArgs']]]]:
        return pulumi.get(self, "header_items")

    @header_items.setter
    def header_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageHeaderHeaderItemArgs']]]]):
        pulumi.set(self, "header_items", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class ReportLayoutPageHeaderHeaderItemArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 img_src: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "img_src")

    @img_src.setter
    def img_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_src", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class RouterAccessList6RuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 exact_match: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact_match")

    @exact_match.setter
    def exact_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact_match", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterAccessListRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 exact_match: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact_match")

    @exact_match.setter
    def exact_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact_match", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard", value)


@pulumi.input_type
class RouterAspathListRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 regexp: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def regexp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regexp", value)


@pulumi.input_type
class RouterBfd6MultihopTemplateArgs:
    def __init__(__self__, *,
                 auth_mode: Optional[pulumi.Input[str]] = None,
                 bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
                 bfd_detect_mult: Optional[pulumi.Input[int]] = None,
                 bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 src: Optional[pulumi.Input[str]] = None):
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if bfd_desired_min_tx is not None:
            pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult is not None:
            pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_required_min_rx is not None:
            pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if src is not None:
            pulumi.set(__self__, "src", src)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode")

    @auth_mode.setter
    def auth_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode", value)

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bfd_desired_min_tx")

    @bfd_desired_min_tx.setter
    def bfd_desired_min_tx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_desired_min_tx", value)

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bfd_detect_mult")

    @bfd_detect_mult.setter
    def bfd_detect_mult(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_detect_mult", value)

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bfd_required_min_rx")

    @bfd_required_min_rx.setter
    def bfd_required_min_rx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_required_min_rx", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "md5_key")

    @md5_key.setter
    def md5_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_key", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)


@pulumi.input_type
class RouterBfd6NeighborArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip6_address: Optional[pulumi.Input[str]] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_address")

    @ip6_address.setter
    def ip6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_address", value)


@pulumi.input_type
class RouterBfdMultihopTemplateArgs:
    def __init__(__self__, *,
                 auth_mode: Optional[pulumi.Input[str]] = None,
                 bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
                 bfd_detect_mult: Optional[pulumi.Input[int]] = None,
                 bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 src: Optional[pulumi.Input[str]] = None):
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if bfd_desired_min_tx is not None:
            pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult is not None:
            pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_required_min_rx is not None:
            pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if src is not None:
            pulumi.set(__self__, "src", src)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode")

    @auth_mode.setter
    def auth_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode", value)

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bfd_desired_min_tx")

    @bfd_desired_min_tx.setter
    def bfd_desired_min_tx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_desired_min_tx", value)

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bfd_detect_mult")

    @bfd_detect_mult.setter
    def bfd_detect_mult(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_detect_mult", value)

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bfd_required_min_rx")

    @bfd_required_min_rx.setter
    def bfd_required_min_rx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_required_min_rx", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "md5_key")

    @md5_key.setter
    def md5_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_key", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)


@pulumi.input_type
class RouterBfdNeighborArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class RouterBgpAdminDistanceArgs:
    def __init__(__self__, *,
                 distance: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 neighbour_prefix: Optional[pulumi.Input[str]] = None,
                 route_list: Optional[pulumi.Input[str]] = None):
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if neighbour_prefix is not None:
            pulumi.set(__self__, "neighbour_prefix", neighbour_prefix)
        if route_list is not None:
            pulumi.set(__self__, "route_list", route_list)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="neighbourPrefix")
    def neighbour_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neighbour_prefix")

    @neighbour_prefix.setter
    def neighbour_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbour_prefix", value)

    @property
    @pulumi.getter(name="routeList")
    def route_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_list")

    @route_list.setter
    def route_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_list", value)


@pulumi.input_type
class RouterBgpAggregateAddress6Args:
    def __init__(__self__, *,
                 as_set: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None,
                 summary_only: Optional[pulumi.Input[str]] = None):
        if as_set is not None:
            pulumi.set(__self__, "as_set", as_set)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "as_set")

    @as_set.setter
    def as_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_set", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "summary_only")

    @summary_only.setter
    def summary_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_only", value)


@pulumi.input_type
class RouterBgpAggregateAddressArgs:
    def __init__(__self__, *,
                 as_set: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 summary_only: Optional[pulumi.Input[str]] = None):
        if as_set is not None:
            pulumi.set(__self__, "as_set", as_set)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "as_set")

    @as_set.setter
    def as_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_set", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "summary_only")

    @summary_only.setter
    def summary_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_only", value)


@pulumi.input_type
class RouterBgpConfederationPeerArgs:
    def __init__(__self__, *,
                 peer: Optional[pulumi.Input[str]] = None):
        if peer is not None:
            pulumi.set(__self__, "peer", peer)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)


@pulumi.input_type
class RouterBgpNeighborArgs:
    def __init__(__self__, *,
                 activate: Optional[pulumi.Input[str]] = None,
                 activate6: Optional[pulumi.Input[str]] = None,
                 activate_evpn: Optional[pulumi.Input[str]] = None,
                 activate_vpnv4: Optional[pulumi.Input[str]] = None,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
                 adv_additional_path: Optional[pulumi.Input[int]] = None,
                 adv_additional_path6: Optional[pulumi.Input[int]] = None,
                 adv_additional_path_vpnv4: Optional[pulumi.Input[int]] = None,
                 advertisement_interval: Optional[pulumi.Input[int]] = None,
                 allowas_in: Optional[pulumi.Input[int]] = None,
                 allowas_in6: Optional[pulumi.Input[int]] = None,
                 allowas_in_enable: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable6: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_evpn: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_vpnv4: Optional[pulumi.Input[str]] = None,
                 allowas_in_evpn: Optional[pulumi.Input[int]] = None,
                 allowas_in_vpnv4: Optional[pulumi.Input[int]] = None,
                 as_override: Optional[pulumi.Input[str]] = None,
                 as_override6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged_vpnv4: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 capability_default_originate: Optional[pulumi.Input[str]] = None,
                 capability_default_originate6: Optional[pulumi.Input[str]] = None,
                 capability_dynamic: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart6: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_evpn: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_vpnv4: Optional[pulumi.Input[str]] = None,
                 capability_orf: Optional[pulumi.Input[str]] = None,
                 capability_orf6: Optional[pulumi.Input[str]] = None,
                 capability_route_refresh: Optional[pulumi.Input[str]] = None,
                 conditional_advertise6s: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertise6Args']]]] = None,
                 conditional_advertises: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertiseArgs']]]] = None,
                 connect_timer: Optional[pulumi.Input[int]] = None,
                 default_originate_routemap: Optional[pulumi.Input[str]] = None,
                 default_originate_routemap6: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_list_in6: Optional[pulumi.Input[str]] = None,
                 distribute_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 distribute_list_out: Optional[pulumi.Input[str]] = None,
                 distribute_list_out6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 dont_capability_negotiate: Optional[pulumi.Input[str]] = None,
                 ebgp_enforce_multihop: Optional[pulumi.Input[str]] = None,
                 ebgp_multihop_ttl: Optional[pulumi.Input[int]] = None,
                 filter_list_in: Optional[pulumi.Input[str]] = None,
                 filter_list_in6: Optional[pulumi.Input[str]] = None,
                 filter_list_out: Optional[pulumi.Input[str]] = None,
                 filter_list_out6: Optional[pulumi.Input[str]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_failover: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[int]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[str]] = None,
                 local_as_replace_as: Optional[pulumi.Input[str]] = None,
                 maximum_prefix: Optional[pulumi.Input[int]] = None,
                 maximum_prefix6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_warning_only: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only6: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_evpn: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_vpnv4: Optional[pulumi.Input[str]] = None,
                 next_hop_self: Optional[pulumi.Input[str]] = None,
                 next_hop_self6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_vpnv4: Optional[pulumi.Input[str]] = None,
                 override_capability: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix_list_in: Optional[pulumi.Input[str]] = None,
                 prefix_list_in6: Optional[pulumi.Input[str]] = None,
                 prefix_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 prefix_list_out: Optional[pulumi.Input[str]] = None,
                 prefix_list_out6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 remote_as: Optional[pulumi.Input[int]] = None,
                 remove_private_as: Optional[pulumi.Input[str]] = None,
                 remove_private_as6: Optional[pulumi.Input[str]] = None,
                 remove_private_as_evpn: Optional[pulumi.Input[str]] = None,
                 remove_private_as_vpnv4: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[int]] = None,
                 retain_stale_time: Optional[pulumi.Input[int]] = None,
                 route_map_in: Optional[pulumi.Input[str]] = None,
                 route_map_in6: Optional[pulumi.Input[str]] = None,
                 route_map_in_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_out: Optional[pulumi.Input[str]] = None,
                 route_map_out6: Optional[pulumi.Input[str]] = None,
                 route_map_out6_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_out_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4_preferable: Optional[pulumi.Input[str]] = None,
                 route_reflector_client: Optional[pulumi.Input[str]] = None,
                 route_reflector_client6: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_server_client: Optional[pulumi.Input[str]] = None,
                 route_server_client6: Optional[pulumi.Input[str]] = None,
                 route_server_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_server_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 send_community: Optional[pulumi.Input[str]] = None,
                 send_community6: Optional[pulumi.Input[str]] = None,
                 send_community_evpn: Optional[pulumi.Input[str]] = None,
                 send_community_vpnv4: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration6: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_evpn: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_vpnv4: Optional[pulumi.Input[str]] = None,
                 stale_route: Optional[pulumi.Input[str]] = None,
                 strict_capability_match: Optional[pulumi.Input[str]] = None,
                 unsuppress_map: Optional[pulumi.Input[str]] = None,
                 unsuppress_map6: Optional[pulumi.Input[str]] = None,
                 update_source: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if activate6 is not None:
            pulumi.set(__self__, "activate6", activate6)
        if activate_evpn is not None:
            pulumi.set(__self__, "activate_evpn", activate_evpn)
        if activate_vpnv4 is not None:
            pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if adv_additional_path is not None:
            pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 is not None:
            pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if adv_additional_path_vpnv4 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        if advertisement_interval is not None:
            pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in is not None:
            pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 is not None:
            pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable is not None:
            pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 is not None:
            pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if allowas_in_enable_evpn is not None:
            pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        if allowas_in_enable_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        if allowas_in_evpn is not None:
            pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        if allowas_in_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override6 is not None:
            pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged is not None:
            pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 is not None:
            pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if attribute_unchanged_vpnv4 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate is not None:
            pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 is not None:
            pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic is not None:
            pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart is not None:
            pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 is not None:
            pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_graceful_restart_evpn is not None:
            pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        if capability_graceful_restart_vpnv4 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        if capability_orf is not None:
            pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 is not None:
            pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh is not None:
            pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if conditional_advertise6s is not None:
            pulumi.set(__self__, "conditional_advertise6s", conditional_advertise6s)
        if conditional_advertises is not None:
            pulumi.set(__self__, "conditional_advertises", conditional_advertises)
        if connect_timer is not None:
            pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap is not None:
            pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 is not None:
            pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 is not None:
            pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_in_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        if distribute_list_out is not None:
            pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 is not None:
            pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if distribute_list_out_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        if dont_capability_negotiate is not None:
            pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if ebgp_enforce_multihop is not None:
            pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl is not None:
            pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in is not None:
            pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 is not None:
            pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_out is not None:
            pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 is not None:
            pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover is not None:
            pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix is not None:
            pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 is not None:
            pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        if maximum_prefix_threshold is not None:
            pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_threshold_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        if maximum_prefix_threshold_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        if maximum_prefix_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        if maximum_prefix_warning_only is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if maximum_prefix_warning_only_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        if maximum_prefix_warning_only_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 is not None:
            pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr is not None:
            pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 is not None:
            pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if next_hop_self_vpnv4 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        if override_capability is not None:
            pulumi.set(__self__, "override_capability", override_capability)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix_list_in is not None:
            pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 is not None:
            pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_in_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        if prefix_list_out is not None:
            pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 is not None:
            pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if prefix_list_out_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as is not None:
            pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 is not None:
            pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if remove_private_as_evpn is not None:
            pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        if remove_private_as_vpnv4 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time is not None:
            pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in is not None:
            pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 is not None:
            pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_in_evpn is not None:
            pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        if route_map_in_vpnv4 is not None:
            pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        if route_map_out is not None:
            pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 is not None:
            pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable is not None:
            pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_evpn is not None:
            pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        if route_map_out_preferable is not None:
            pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_map_out_vpnv4 is not None:
            pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        if route_map_out_vpnv4_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        if route_reflector_client is not None:
            pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 is not None:
            pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_reflector_client_evpn is not None:
            pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        if route_reflector_client_vpnv4 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        if route_server_client is not None:
            pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 is not None:
            pulumi.set(__self__, "route_server_client6", route_server_client6)
        if route_server_client_evpn is not None:
            pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        if route_server_client_vpnv4 is not None:
            pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community6 is not None:
            pulumi.set(__self__, "send_community6", send_community6)
        if send_community_evpn is not None:
            pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        if send_community_vpnv4 is not None:
            pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration is not None:
            pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 is not None:
            pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if soft_reconfiguration_evpn is not None:
            pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        if soft_reconfiguration_vpnv4 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        if stale_route is not None:
            pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match is not None:
            pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map is not None:
            pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 is not None:
            pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source is not None:
            pulumi.set(__self__, "update_source", update_source)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def activate6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activate6")

    @activate6.setter
    def activate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate6", value)

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activate_evpn")

    @activate_evpn.setter
    def activate_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_evpn", value)

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activate_vpnv4")

    @activate_vpnv4.setter
    def activate_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_vpnv4", value)

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_path")

    @additional_path.setter
    def additional_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path", value)

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_path6")

    @additional_path6.setter
    def additional_path6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path6", value)

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_path_vpnv4")

    @additional_path_vpnv4.setter
    def additional_path_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path_vpnv4", value)

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "adv_additional_path")

    @adv_additional_path.setter
    def adv_additional_path(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path", value)

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "adv_additional_path6")

    @adv_additional_path6.setter
    def adv_additional_path6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path6", value)

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @adv_additional_path_vpnv4.setter
    def adv_additional_path_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path_vpnv4", value)

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "advertisement_interval")

    @advertisement_interval.setter
    def advertisement_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advertisement_interval", value)

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allowas_in")

    @allowas_in.setter
    def allowas_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in", value)

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allowas_in6")

    @allowas_in6.setter
    def allowas_in6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in6", value)

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowas_in_enable")

    @allowas_in_enable.setter
    def allowas_in_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable", value)

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowas_in_enable6")

    @allowas_in_enable6.setter
    def allowas_in_enable6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable6", value)

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowas_in_enable_evpn")

    @allowas_in_enable_evpn.setter
    def allowas_in_enable_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable_evpn", value)

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @allowas_in_enable_vpnv4.setter
    def allowas_in_enable_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable_vpnv4", value)

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allowas_in_evpn")

    @allowas_in_evpn.setter
    def allowas_in_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in_evpn", value)

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allowas_in_vpnv4")

    @allowas_in_vpnv4.setter
    def allowas_in_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in_vpnv4", value)

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override", value)

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "as_override6")

    @as_override6.setter
    def as_override6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override6", value)

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_unchanged")

    @attribute_unchanged.setter
    def attribute_unchanged(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged", value)

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_unchanged6")

    @attribute_unchanged6.setter
    def attribute_unchanged6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged6", value)

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @attribute_unchanged_vpnv4.setter
    def attribute_unchanged_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged_vpnv4", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_default_originate")

    @capability_default_originate.setter
    def capability_default_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_default_originate6")

    @capability_default_originate6.setter
    def capability_default_originate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate6", value)

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_dynamic")

    @capability_dynamic.setter
    def capability_dynamic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_dynamic", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_graceful_restart")

    @capability_graceful_restart.setter
    def capability_graceful_restart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_graceful_restart6")

    @capability_graceful_restart6.setter
    def capability_graceful_restart6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart6", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @capability_graceful_restart_evpn.setter
    def capability_graceful_restart_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart_evpn", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @capability_graceful_restart_vpnv4.setter
    def capability_graceful_restart_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart_vpnv4", value)

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_orf")

    @capability_orf.setter
    def capability_orf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf", value)

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_orf6")

    @capability_orf6.setter
    def capability_orf6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf6", value)

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_route_refresh")

    @capability_route_refresh.setter
    def capability_route_refresh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_route_refresh", value)

    @property
    @pulumi.getter(name="conditionalAdvertise6s")
    def conditional_advertise6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertise6Args']]]]:
        return pulumi.get(self, "conditional_advertise6s")

    @conditional_advertise6s.setter
    def conditional_advertise6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertise6Args']]]]):
        pulumi.set(self, "conditional_advertise6s", value)

    @property
    @pulumi.getter(name="conditionalAdvertises")
    def conditional_advertises(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertiseArgs']]]]:
        return pulumi.get(self, "conditional_advertises")

    @conditional_advertises.setter
    def conditional_advertises(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertiseArgs']]]]):
        pulumi.set(self, "conditional_advertises", value)

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connect_timer")

    @connect_timer.setter
    def connect_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timer", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_originate_routemap")

    @default_originate_routemap.setter
    def default_originate_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_originate_routemap6")

    @default_originate_routemap6.setter
    def default_originate_routemap6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap6", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_in")

    @distribute_list_in.setter
    def distribute_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in", value)

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_in6")

    @distribute_list_in6.setter
    def distribute_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in6", value)

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @distribute_list_in_vpnv4.setter
    def distribute_list_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in_vpnv4", value)

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_out")

    @distribute_list_out.setter
    def distribute_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out", value)

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_out6")

    @distribute_list_out6.setter
    def distribute_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out6", value)

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @distribute_list_out_vpnv4.setter
    def distribute_list_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out_vpnv4", value)

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dont_capability_negotiate")

    @dont_capability_negotiate.setter
    def dont_capability_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_capability_negotiate", value)

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ebgp_enforce_multihop")

    @ebgp_enforce_multihop.setter
    def ebgp_enforce_multihop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ebgp_enforce_multihop", value)

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ebgp_multihop_ttl")

    @ebgp_multihop_ttl.setter
    def ebgp_multihop_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ebgp_multihop_ttl", value)

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_list_in")

    @filter_list_in.setter
    def filter_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in", value)

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_list_in6")

    @filter_list_in6.setter
    def filter_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in6", value)

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_list_out")

    @filter_list_out.setter
    def filter_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out", value)

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_list_out6")

    @filter_list_out6.setter
    def filter_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out6", value)

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "holdtime_timer")

    @holdtime_timer.setter
    def holdtime_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holdtime_timer", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keep_alive_timer")

    @keep_alive_timer.setter
    def keep_alive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_timer", value)

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_down_failover")

    @link_down_failover.setter
    def link_down_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_failover", value)

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_as", value)

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_as_no_prepend")

    @local_as_no_prepend.setter
    def local_as_no_prepend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_no_prepend", value)

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_as_replace_as")

    @local_as_replace_as.setter
    def local_as_replace_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_replace_as", value)

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix")

    @maximum_prefix.setter
    def maximum_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix", value)

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix6")

    @maximum_prefix6.setter
    def maximum_prefix6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix6", value)

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_evpn")

    @maximum_prefix_evpn.setter
    def maximum_prefix_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_threshold")

    @maximum_prefix_threshold.setter
    def maximum_prefix_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_threshold6")

    @maximum_prefix_threshold6.setter
    def maximum_prefix_threshold6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold6", value)

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @maximum_prefix_threshold_evpn.setter
    def maximum_prefix_threshold_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @maximum_prefix_threshold_vpnv4.setter
    def maximum_prefix_threshold_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold_vpnv4", value)

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @maximum_prefix_vpnv4.setter
    def maximum_prefix_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_vpnv4", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_prefix_warning_only")

    @maximum_prefix_warning_only.setter
    def maximum_prefix_warning_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @maximum_prefix_warning_only6.setter
    def maximum_prefix_warning_only6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only6", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @maximum_prefix_warning_only_evpn.setter
    def maximum_prefix_warning_only_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @maximum_prefix_warning_only_vpnv4.setter
    def maximum_prefix_warning_only_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only_vpnv4", value)

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self", value)

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop_self6")

    @next_hop_self6.setter
    def next_hop_self6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self6", value)

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop_self_rr")

    @next_hop_self_rr.setter
    def next_hop_self_rr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr", value)

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop_self_rr6")

    @next_hop_self_rr6.setter
    def next_hop_self_rr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr6", value)

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop_self_vpnv4")

    @next_hop_self_vpnv4.setter
    def next_hop_self_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_vpnv4", value)

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_capability")

    @override_capability.setter
    def override_capability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_capability", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_in")

    @prefix_list_in.setter
    def prefix_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in", value)

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_in6")

    @prefix_list_in6.setter
    def prefix_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in6", value)

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @prefix_list_in_vpnv4.setter
    def prefix_list_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in_vpnv4", value)

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_out")

    @prefix_list_out.setter
    def prefix_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out", value)

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_out6")

    @prefix_list_out6.setter
    def prefix_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out6", value)

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @prefix_list_out_vpnv4.setter
    def prefix_list_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out_vpnv4", value)

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_as", value)

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_private_as")

    @remove_private_as.setter
    def remove_private_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as", value)

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_private_as6")

    @remove_private_as6.setter
    def remove_private_as6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as6", value)

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_private_as_evpn")

    @remove_private_as_evpn.setter
    def remove_private_as_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as_evpn", value)

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_private_as_vpnv4")

    @remove_private_as_vpnv4.setter
    def remove_private_as_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as_vpnv4", value)

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "restart_time")

    @restart_time.setter
    def restart_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_time", value)

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retain_stale_time")

    @retain_stale_time.setter
    def retain_stale_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retain_stale_time", value)

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_in")

    @route_map_in.setter
    def route_map_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in", value)

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_in6")

    @route_map_in6.setter
    def route_map_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in6", value)

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_in_evpn")

    @route_map_in_evpn.setter
    def route_map_in_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in_evpn", value)

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_in_vpnv4")

    @route_map_in_vpnv4.setter
    def route_map_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in_vpnv4", value)

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out")

    @route_map_out.setter
    def route_map_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out", value)

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out6")

    @route_map_out6.setter
    def route_map_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6", value)

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out6_preferable")

    @route_map_out6_preferable.setter
    def route_map_out6_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out_evpn")

    @route_map_out_evpn.setter
    def route_map_out_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_evpn", value)

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out_preferable")

    @route_map_out_preferable.setter
    def route_map_out_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out_vpnv4")

    @route_map_out_vpnv4.setter
    def route_map_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv4", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @route_map_out_vpnv4_preferable.setter
    def route_map_out_vpnv4_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv4_preferable", value)

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_reflector_client")

    @route_reflector_client.setter
    def route_reflector_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client", value)

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_reflector_client6")

    @route_reflector_client6.setter
    def route_reflector_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client6", value)

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_reflector_client_evpn")

    @route_reflector_client_evpn.setter
    def route_reflector_client_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client_evpn", value)

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @route_reflector_client_vpnv4.setter
    def route_reflector_client_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client_vpnv4", value)

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_server_client")

    @route_server_client.setter
    def route_server_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client", value)

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_server_client6")

    @route_server_client6.setter
    def route_server_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client6", value)

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_server_client_evpn")

    @route_server_client_evpn.setter
    def route_server_client_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client_evpn", value)

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_server_client_vpnv4")

    @route_server_client_vpnv4.setter
    def route_server_client_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client_vpnv4", value)

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community", value)

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_community6")

    @send_community6.setter
    def send_community6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community6", value)

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_community_evpn")

    @send_community_evpn.setter
    def send_community_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community_evpn", value)

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_community_vpnv4")

    @send_community_vpnv4.setter
    def send_community_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community_vpnv4", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "soft_reconfiguration")

    @soft_reconfiguration.setter
    def soft_reconfiguration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration", value)

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "soft_reconfiguration6")

    @soft_reconfiguration6.setter
    def soft_reconfiguration6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration6", value)

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @soft_reconfiguration_evpn.setter
    def soft_reconfiguration_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration_evpn", value)

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @soft_reconfiguration_vpnv4.setter
    def soft_reconfiguration_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration_vpnv4", value)

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stale_route")

    @stale_route.setter
    def stale_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_route", value)

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strict_capability_match")

    @strict_capability_match.setter
    def strict_capability_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_capability_match", value)

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsuppress_map")

    @unsuppress_map.setter
    def unsuppress_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map", value)

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsuppress_map6")

    @unsuppress_map6.setter
    def unsuppress_map6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map6", value)

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_source")

    @update_source.setter
    def update_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_source", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class RouterBgpNeighborConditionalAdvertise6Args:
    def __init__(__self__, *,
                 advertise_routemap: Optional[pulumi.Input[str]] = None,
                 condition_routemap: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[str]] = None):
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertise_routemap")

    @advertise_routemap.setter
    def advertise_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise_routemap", value)

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition_routemap")

    @condition_routemap.setter
    def condition_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_routemap", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_type", value)


@pulumi.input_type
class RouterBgpNeighborConditionalAdvertiseArgs:
    def __init__(__self__, *,
                 advertise_routemap: Optional[pulumi.Input[str]] = None,
                 condition_routemap: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[str]] = None):
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertise_routemap")

    @advertise_routemap.setter
    def advertise_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise_routemap", value)

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition_routemap")

    @condition_routemap.setter
    def condition_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_routemap", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_type", value)


@pulumi.input_type
class RouterBgpNeighborGroupArgs:
    def __init__(__self__, *,
                 activate: Optional[pulumi.Input[str]] = None,
                 activate6: Optional[pulumi.Input[str]] = None,
                 activate_evpn: Optional[pulumi.Input[str]] = None,
                 activate_vpnv4: Optional[pulumi.Input[str]] = None,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
                 adv_additional_path: Optional[pulumi.Input[int]] = None,
                 adv_additional_path6: Optional[pulumi.Input[int]] = None,
                 adv_additional_path_vpnv4: Optional[pulumi.Input[int]] = None,
                 advertisement_interval: Optional[pulumi.Input[int]] = None,
                 allowas_in: Optional[pulumi.Input[int]] = None,
                 allowas_in6: Optional[pulumi.Input[int]] = None,
                 allowas_in_enable: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable6: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_evpn: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_vpnv4: Optional[pulumi.Input[str]] = None,
                 allowas_in_evpn: Optional[pulumi.Input[int]] = None,
                 allowas_in_vpnv4: Optional[pulumi.Input[int]] = None,
                 as_override: Optional[pulumi.Input[str]] = None,
                 as_override6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged_vpnv4: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 capability_default_originate: Optional[pulumi.Input[str]] = None,
                 capability_default_originate6: Optional[pulumi.Input[str]] = None,
                 capability_dynamic: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart6: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_evpn: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_vpnv4: Optional[pulumi.Input[str]] = None,
                 capability_orf: Optional[pulumi.Input[str]] = None,
                 capability_orf6: Optional[pulumi.Input[str]] = None,
                 capability_route_refresh: Optional[pulumi.Input[str]] = None,
                 connect_timer: Optional[pulumi.Input[int]] = None,
                 default_originate_routemap: Optional[pulumi.Input[str]] = None,
                 default_originate_routemap6: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_list_in6: Optional[pulumi.Input[str]] = None,
                 distribute_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 distribute_list_out: Optional[pulumi.Input[str]] = None,
                 distribute_list_out6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 dont_capability_negotiate: Optional[pulumi.Input[str]] = None,
                 ebgp_enforce_multihop: Optional[pulumi.Input[str]] = None,
                 ebgp_multihop_ttl: Optional[pulumi.Input[int]] = None,
                 filter_list_in: Optional[pulumi.Input[str]] = None,
                 filter_list_in6: Optional[pulumi.Input[str]] = None,
                 filter_list_out: Optional[pulumi.Input[str]] = None,
                 filter_list_out6: Optional[pulumi.Input[str]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_failover: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[int]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[str]] = None,
                 local_as_replace_as: Optional[pulumi.Input[str]] = None,
                 maximum_prefix: Optional[pulumi.Input[int]] = None,
                 maximum_prefix6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_warning_only: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only6: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_evpn: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_vpnv4: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 next_hop_self: Optional[pulumi.Input[str]] = None,
                 next_hop_self6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_vpnv4: Optional[pulumi.Input[str]] = None,
                 override_capability: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix_list_in: Optional[pulumi.Input[str]] = None,
                 prefix_list_in6: Optional[pulumi.Input[str]] = None,
                 prefix_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 prefix_list_out: Optional[pulumi.Input[str]] = None,
                 prefix_list_out6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 remote_as: Optional[pulumi.Input[int]] = None,
                 remove_private_as: Optional[pulumi.Input[str]] = None,
                 remove_private_as6: Optional[pulumi.Input[str]] = None,
                 remove_private_as_evpn: Optional[pulumi.Input[str]] = None,
                 remove_private_as_vpnv4: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[int]] = None,
                 retain_stale_time: Optional[pulumi.Input[int]] = None,
                 route_map_in: Optional[pulumi.Input[str]] = None,
                 route_map_in6: Optional[pulumi.Input[str]] = None,
                 route_map_in_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_out: Optional[pulumi.Input[str]] = None,
                 route_map_out6: Optional[pulumi.Input[str]] = None,
                 route_map_out6_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_out_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4_preferable: Optional[pulumi.Input[str]] = None,
                 route_reflector_client: Optional[pulumi.Input[str]] = None,
                 route_reflector_client6: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_server_client: Optional[pulumi.Input[str]] = None,
                 route_server_client6: Optional[pulumi.Input[str]] = None,
                 route_server_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_server_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 send_community: Optional[pulumi.Input[str]] = None,
                 send_community6: Optional[pulumi.Input[str]] = None,
                 send_community_evpn: Optional[pulumi.Input[str]] = None,
                 send_community_vpnv4: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration6: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_evpn: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_vpnv4: Optional[pulumi.Input[str]] = None,
                 stale_route: Optional[pulumi.Input[str]] = None,
                 strict_capability_match: Optional[pulumi.Input[str]] = None,
                 unsuppress_map: Optional[pulumi.Input[str]] = None,
                 unsuppress_map6: Optional[pulumi.Input[str]] = None,
                 update_source: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if activate6 is not None:
            pulumi.set(__self__, "activate6", activate6)
        if activate_evpn is not None:
            pulumi.set(__self__, "activate_evpn", activate_evpn)
        if activate_vpnv4 is not None:
            pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if adv_additional_path is not None:
            pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 is not None:
            pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if adv_additional_path_vpnv4 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        if advertisement_interval is not None:
            pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in is not None:
            pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 is not None:
            pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable is not None:
            pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 is not None:
            pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if allowas_in_enable_evpn is not None:
            pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        if allowas_in_enable_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        if allowas_in_evpn is not None:
            pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        if allowas_in_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override6 is not None:
            pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged is not None:
            pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 is not None:
            pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if attribute_unchanged_vpnv4 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate is not None:
            pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 is not None:
            pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic is not None:
            pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart is not None:
            pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 is not None:
            pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_graceful_restart_evpn is not None:
            pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        if capability_graceful_restart_vpnv4 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        if capability_orf is not None:
            pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 is not None:
            pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh is not None:
            pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if connect_timer is not None:
            pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap is not None:
            pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 is not None:
            pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 is not None:
            pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_in_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        if distribute_list_out is not None:
            pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 is not None:
            pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if distribute_list_out_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        if dont_capability_negotiate is not None:
            pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if ebgp_enforce_multihop is not None:
            pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl is not None:
            pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in is not None:
            pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 is not None:
            pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_out is not None:
            pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 is not None:
            pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover is not None:
            pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix is not None:
            pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 is not None:
            pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        if maximum_prefix_threshold is not None:
            pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_threshold_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        if maximum_prefix_threshold_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        if maximum_prefix_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        if maximum_prefix_warning_only is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if maximum_prefix_warning_only_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        if maximum_prefix_warning_only_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 is not None:
            pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr is not None:
            pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 is not None:
            pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if next_hop_self_vpnv4 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        if override_capability is not None:
            pulumi.set(__self__, "override_capability", override_capability)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix_list_in is not None:
            pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 is not None:
            pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_in_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        if prefix_list_out is not None:
            pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 is not None:
            pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if prefix_list_out_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as is not None:
            pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 is not None:
            pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if remove_private_as_evpn is not None:
            pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        if remove_private_as_vpnv4 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time is not None:
            pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in is not None:
            pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 is not None:
            pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_in_evpn is not None:
            pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        if route_map_in_vpnv4 is not None:
            pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        if route_map_out is not None:
            pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 is not None:
            pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable is not None:
            pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_evpn is not None:
            pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        if route_map_out_preferable is not None:
            pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_map_out_vpnv4 is not None:
            pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        if route_map_out_vpnv4_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        if route_reflector_client is not None:
            pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 is not None:
            pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_reflector_client_evpn is not None:
            pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        if route_reflector_client_vpnv4 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        if route_server_client is not None:
            pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 is not None:
            pulumi.set(__self__, "route_server_client6", route_server_client6)
        if route_server_client_evpn is not None:
            pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        if route_server_client_vpnv4 is not None:
            pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community6 is not None:
            pulumi.set(__self__, "send_community6", send_community6)
        if send_community_evpn is not None:
            pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        if send_community_vpnv4 is not None:
            pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration is not None:
            pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 is not None:
            pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if soft_reconfiguration_evpn is not None:
            pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        if soft_reconfiguration_vpnv4 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        if stale_route is not None:
            pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match is not None:
            pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map is not None:
            pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 is not None:
            pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source is not None:
            pulumi.set(__self__, "update_source", update_source)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def activate6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activate6")

    @activate6.setter
    def activate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate6", value)

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activate_evpn")

    @activate_evpn.setter
    def activate_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_evpn", value)

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activate_vpnv4")

    @activate_vpnv4.setter
    def activate_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_vpnv4", value)

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_path")

    @additional_path.setter
    def additional_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path", value)

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_path6")

    @additional_path6.setter
    def additional_path6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path6", value)

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_path_vpnv4")

    @additional_path_vpnv4.setter
    def additional_path_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path_vpnv4", value)

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "adv_additional_path")

    @adv_additional_path.setter
    def adv_additional_path(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path", value)

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "adv_additional_path6")

    @adv_additional_path6.setter
    def adv_additional_path6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path6", value)

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @adv_additional_path_vpnv4.setter
    def adv_additional_path_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path_vpnv4", value)

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "advertisement_interval")

    @advertisement_interval.setter
    def advertisement_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advertisement_interval", value)

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allowas_in")

    @allowas_in.setter
    def allowas_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in", value)

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allowas_in6")

    @allowas_in6.setter
    def allowas_in6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in6", value)

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowas_in_enable")

    @allowas_in_enable.setter
    def allowas_in_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable", value)

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowas_in_enable6")

    @allowas_in_enable6.setter
    def allowas_in_enable6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable6", value)

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowas_in_enable_evpn")

    @allowas_in_enable_evpn.setter
    def allowas_in_enable_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable_evpn", value)

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @allowas_in_enable_vpnv4.setter
    def allowas_in_enable_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable_vpnv4", value)

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allowas_in_evpn")

    @allowas_in_evpn.setter
    def allowas_in_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in_evpn", value)

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allowas_in_vpnv4")

    @allowas_in_vpnv4.setter
    def allowas_in_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in_vpnv4", value)

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override", value)

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "as_override6")

    @as_override6.setter
    def as_override6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override6", value)

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_unchanged")

    @attribute_unchanged.setter
    def attribute_unchanged(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged", value)

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_unchanged6")

    @attribute_unchanged6.setter
    def attribute_unchanged6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged6", value)

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @attribute_unchanged_vpnv4.setter
    def attribute_unchanged_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged_vpnv4", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_default_originate")

    @capability_default_originate.setter
    def capability_default_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_default_originate6")

    @capability_default_originate6.setter
    def capability_default_originate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate6", value)

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_dynamic")

    @capability_dynamic.setter
    def capability_dynamic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_dynamic", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_graceful_restart")

    @capability_graceful_restart.setter
    def capability_graceful_restart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_graceful_restart6")

    @capability_graceful_restart6.setter
    def capability_graceful_restart6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart6", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @capability_graceful_restart_evpn.setter
    def capability_graceful_restart_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart_evpn", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @capability_graceful_restart_vpnv4.setter
    def capability_graceful_restart_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart_vpnv4", value)

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_orf")

    @capability_orf.setter
    def capability_orf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf", value)

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_orf6")

    @capability_orf6.setter
    def capability_orf6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf6", value)

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capability_route_refresh")

    @capability_route_refresh.setter
    def capability_route_refresh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_route_refresh", value)

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connect_timer")

    @connect_timer.setter
    def connect_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timer", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_originate_routemap")

    @default_originate_routemap.setter
    def default_originate_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_originate_routemap6")

    @default_originate_routemap6.setter
    def default_originate_routemap6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap6", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_in")

    @distribute_list_in.setter
    def distribute_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in", value)

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_in6")

    @distribute_list_in6.setter
    def distribute_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in6", value)

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @distribute_list_in_vpnv4.setter
    def distribute_list_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in_vpnv4", value)

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_out")

    @distribute_list_out.setter
    def distribute_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out", value)

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_out6")

    @distribute_list_out6.setter
    def distribute_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out6", value)

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @distribute_list_out_vpnv4.setter
    def distribute_list_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out_vpnv4", value)

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dont_capability_negotiate")

    @dont_capability_negotiate.setter
    def dont_capability_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_capability_negotiate", value)

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ebgp_enforce_multihop")

    @ebgp_enforce_multihop.setter
    def ebgp_enforce_multihop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ebgp_enforce_multihop", value)

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ebgp_multihop_ttl")

    @ebgp_multihop_ttl.setter
    def ebgp_multihop_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ebgp_multihop_ttl", value)

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_list_in")

    @filter_list_in.setter
    def filter_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in", value)

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_list_in6")

    @filter_list_in6.setter
    def filter_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in6", value)

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_list_out")

    @filter_list_out.setter
    def filter_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out", value)

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_list_out6")

    @filter_list_out6.setter
    def filter_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out6", value)

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "holdtime_timer")

    @holdtime_timer.setter
    def holdtime_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holdtime_timer", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keep_alive_timer")

    @keep_alive_timer.setter
    def keep_alive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_timer", value)

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_down_failover")

    @link_down_failover.setter
    def link_down_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_failover", value)

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_as", value)

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_as_no_prepend")

    @local_as_no_prepend.setter
    def local_as_no_prepend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_no_prepend", value)

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_as_replace_as")

    @local_as_replace_as.setter
    def local_as_replace_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_replace_as", value)

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix")

    @maximum_prefix.setter
    def maximum_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix", value)

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix6")

    @maximum_prefix6.setter
    def maximum_prefix6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix6", value)

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_evpn")

    @maximum_prefix_evpn.setter
    def maximum_prefix_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_threshold")

    @maximum_prefix_threshold.setter
    def maximum_prefix_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_threshold6")

    @maximum_prefix_threshold6.setter
    def maximum_prefix_threshold6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold6", value)

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @maximum_prefix_threshold_evpn.setter
    def maximum_prefix_threshold_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @maximum_prefix_threshold_vpnv4.setter
    def maximum_prefix_threshold_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold_vpnv4", value)

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @maximum_prefix_vpnv4.setter
    def maximum_prefix_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_vpnv4", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_prefix_warning_only")

    @maximum_prefix_warning_only.setter
    def maximum_prefix_warning_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @maximum_prefix_warning_only6.setter
    def maximum_prefix_warning_only6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only6", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @maximum_prefix_warning_only_evpn.setter
    def maximum_prefix_warning_only_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @maximum_prefix_warning_only_vpnv4.setter
    def maximum_prefix_warning_only_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only_vpnv4", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self", value)

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop_self6")

    @next_hop_self6.setter
    def next_hop_self6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self6", value)

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop_self_rr")

    @next_hop_self_rr.setter
    def next_hop_self_rr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr", value)

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop_self_rr6")

    @next_hop_self_rr6.setter
    def next_hop_self_rr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr6", value)

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop_self_vpnv4")

    @next_hop_self_vpnv4.setter
    def next_hop_self_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_vpnv4", value)

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_capability")

    @override_capability.setter
    def override_capability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_capability", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_in")

    @prefix_list_in.setter
    def prefix_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in", value)

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_in6")

    @prefix_list_in6.setter
    def prefix_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in6", value)

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @prefix_list_in_vpnv4.setter
    def prefix_list_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in_vpnv4", value)

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_out")

    @prefix_list_out.setter
    def prefix_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out", value)

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_out6")

    @prefix_list_out6.setter
    def prefix_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out6", value)

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @prefix_list_out_vpnv4.setter
    def prefix_list_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out_vpnv4", value)

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_as", value)

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_private_as")

    @remove_private_as.setter
    def remove_private_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as", value)

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_private_as6")

    @remove_private_as6.setter
    def remove_private_as6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as6", value)

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_private_as_evpn")

    @remove_private_as_evpn.setter
    def remove_private_as_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as_evpn", value)

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_private_as_vpnv4")

    @remove_private_as_vpnv4.setter
    def remove_private_as_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as_vpnv4", value)

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "restart_time")

    @restart_time.setter
    def restart_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_time", value)

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retain_stale_time")

    @retain_stale_time.setter
    def retain_stale_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retain_stale_time", value)

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_in")

    @route_map_in.setter
    def route_map_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in", value)

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_in6")

    @route_map_in6.setter
    def route_map_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in6", value)

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_in_evpn")

    @route_map_in_evpn.setter
    def route_map_in_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in_evpn", value)

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_in_vpnv4")

    @route_map_in_vpnv4.setter
    def route_map_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in_vpnv4", value)

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out")

    @route_map_out.setter
    def route_map_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out", value)

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out6")

    @route_map_out6.setter
    def route_map_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6", value)

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out6_preferable")

    @route_map_out6_preferable.setter
    def route_map_out6_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out_evpn")

    @route_map_out_evpn.setter
    def route_map_out_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_evpn", value)

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out_preferable")

    @route_map_out_preferable.setter
    def route_map_out_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out_vpnv4")

    @route_map_out_vpnv4.setter
    def route_map_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv4", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @route_map_out_vpnv4_preferable.setter
    def route_map_out_vpnv4_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv4_preferable", value)

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_reflector_client")

    @route_reflector_client.setter
    def route_reflector_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client", value)

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_reflector_client6")

    @route_reflector_client6.setter
    def route_reflector_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client6", value)

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_reflector_client_evpn")

    @route_reflector_client_evpn.setter
    def route_reflector_client_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client_evpn", value)

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @route_reflector_client_vpnv4.setter
    def route_reflector_client_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client_vpnv4", value)

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_server_client")

    @route_server_client.setter
    def route_server_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client", value)

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_server_client6")

    @route_server_client6.setter
    def route_server_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client6", value)

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_server_client_evpn")

    @route_server_client_evpn.setter
    def route_server_client_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client_evpn", value)

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_server_client_vpnv4")

    @route_server_client_vpnv4.setter
    def route_server_client_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client_vpnv4", value)

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community", value)

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_community6")

    @send_community6.setter
    def send_community6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community6", value)

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_community_evpn")

    @send_community_evpn.setter
    def send_community_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community_evpn", value)

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_community_vpnv4")

    @send_community_vpnv4.setter
    def send_community_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community_vpnv4", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "soft_reconfiguration")

    @soft_reconfiguration.setter
    def soft_reconfiguration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration", value)

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "soft_reconfiguration6")

    @soft_reconfiguration6.setter
    def soft_reconfiguration6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration6", value)

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @soft_reconfiguration_evpn.setter
    def soft_reconfiguration_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration_evpn", value)

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @soft_reconfiguration_vpnv4.setter
    def soft_reconfiguration_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration_vpnv4", value)

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stale_route")

    @stale_route.setter
    def stale_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_route", value)

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strict_capability_match")

    @strict_capability_match.setter
    def strict_capability_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_capability_match", value)

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsuppress_map")

    @unsuppress_map.setter
    def unsuppress_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map", value)

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unsuppress_map6")

    @unsuppress_map6.setter
    def unsuppress_map6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map6", value)

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_source")

    @update_source.setter
    def update_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_source", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class RouterBgpNeighborRange6Args:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 max_neighbor_num: Optional[pulumi.Input[int]] = None,
                 neighbor_group: Optional[pulumi.Input[str]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_neighbor_num is not None:
            pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        if neighbor_group is not None:
            pulumi.set(__self__, "neighbor_group", neighbor_group)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_neighbor_num")

    @max_neighbor_num.setter
    def max_neighbor_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_neighbor_num", value)

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neighbor_group")

    @neighbor_group.setter
    def neighbor_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_group", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterBgpNeighborRangeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 max_neighbor_num: Optional[pulumi.Input[int]] = None,
                 neighbor_group: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_neighbor_num is not None:
            pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        if neighbor_group is not None:
            pulumi.set(__self__, "neighbor_group", neighbor_group)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_neighbor_num")

    @max_neighbor_num.setter
    def max_neighbor_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_neighbor_num", value)

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neighbor_group")

    @neighbor_group.setter
    def neighbor_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_group", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterBgpNetwork6Args:
    def __init__(__self__, *,
                 backdoor: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 network_import_check: Optional[pulumi.Input[str]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None):
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if network_import_check is not None:
            pulumi.set(__self__, "network_import_check", network_import_check)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backdoor")

    @backdoor.setter
    def backdoor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backdoor", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_import_check")

    @network_import_check.setter
    def network_import_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_import_check", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)


@pulumi.input_type
class RouterBgpNetworkArgs:
    def __init__(__self__, *,
                 backdoor: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 network_import_check: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None):
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if network_import_check is not None:
            pulumi.set(__self__, "network_import_check", network_import_check)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backdoor")

    @backdoor.setter
    def backdoor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backdoor", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_import_check")

    @network_import_check.setter
    def network_import_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_import_check", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)


@pulumi.input_type
class RouterBgpRedistribute6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterBgpRedistributeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterBgpVrf6Args:
    def __init__(__self__, *,
                 leak_targets: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrf6LeakTargetArgs']]]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        if leak_targets is not None:
            pulumi.set(__self__, "leak_targets", leak_targets)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="leakTargets")
    def leak_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrf6LeakTargetArgs']]]]:
        return pulumi.get(self, "leak_targets")

    @leak_targets.setter
    def leak_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrf6LeakTargetArgs']]]]):
        pulumi.set(self, "leak_targets", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterBgpVrf6LeakTargetArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterBgpVrfArgs:
    def __init__(__self__, *,
                 export_rts: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfExportRtArgs']]]] = None,
                 import_route_map: Optional[pulumi.Input[str]] = None,
                 import_rts: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfImportRtArgs']]]] = None,
                 leak_targets: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeakTargetArgs']]]] = None,
                 rd: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        if export_rts is not None:
            pulumi.set(__self__, "export_rts", export_rts)
        if import_route_map is not None:
            pulumi.set(__self__, "import_route_map", import_route_map)
        if import_rts is not None:
            pulumi.set(__self__, "import_rts", import_rts)
        if leak_targets is not None:
            pulumi.set(__self__, "leak_targets", leak_targets)
        if rd is not None:
            pulumi.set(__self__, "rd", rd)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="exportRts")
    def export_rts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfExportRtArgs']]]]:
        return pulumi.get(self, "export_rts")

    @export_rts.setter
    def export_rts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfExportRtArgs']]]]):
        pulumi.set(self, "export_rts", value)

    @property
    @pulumi.getter(name="importRouteMap")
    def import_route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "import_route_map")

    @import_route_map.setter
    def import_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_route_map", value)

    @property
    @pulumi.getter(name="importRts")
    def import_rts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfImportRtArgs']]]]:
        return pulumi.get(self, "import_rts")

    @import_rts.setter
    def import_rts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfImportRtArgs']]]]):
        pulumi.set(self, "import_rts", value)

    @property
    @pulumi.getter(name="leakTargets")
    def leak_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeakTargetArgs']]]]:
        return pulumi.get(self, "leak_targets")

    @leak_targets.setter
    def leak_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeakTargetArgs']]]]):
        pulumi.set(self, "leak_targets", value)

    @property
    @pulumi.getter
    def rd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rd")

    @rd.setter
    def rd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rd", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterBgpVrfExportRtArgs:
    def __init__(__self__, *,
                 route_target: Optional[pulumi.Input[str]] = None):
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_target")

    @route_target.setter
    def route_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_target", value)


@pulumi.input_type
class RouterBgpVrfImportRtArgs:
    def __init__(__self__, *,
                 route_target: Optional[pulumi.Input[str]] = None):
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_target")

    @route_target.setter
    def route_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_target", value)


@pulumi.input_type
class RouterBgpVrfLeak6Args:
    def __init__(__self__, *,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeak6TargetArgs']]]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeak6TargetArgs']]]]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeak6TargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterBgpVrfLeak6TargetArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterBgpVrfLeakArgs:
    def __init__(__self__, *,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeakTargetArgs']]]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeakTargetArgs']]]]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeakTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterBgpVrfLeakTargetArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterCommunityListRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regexp: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regexp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regexp", value)


@pulumi.input_type
class RouterExtcommunityListRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regexp: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regexp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class RouterIsisIsisInterfaceArgs:
    def __init__(__self__, *,
                 auth_keychain_l1: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l2: Optional[pulumi.Input[str]] = None,
                 auth_mode_l1: Optional[pulumi.Input[str]] = None,
                 auth_mode_l2: Optional[pulumi.Input[str]] = None,
                 auth_password_l1: Optional[pulumi.Input[str]] = None,
                 auth_password_l2: Optional[pulumi.Input[str]] = None,
                 auth_send_only_l1: Optional[pulumi.Input[str]] = None,
                 auth_send_only_l2: Optional[pulumi.Input[str]] = None,
                 circuit_type: Optional[pulumi.Input[str]] = None,
                 csnp_interval_l1: Optional[pulumi.Input[int]] = None,
                 csnp_interval_l2: Optional[pulumi.Input[int]] = None,
                 hello_interval_l1: Optional[pulumi.Input[int]] = None,
                 hello_interval_l2: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l1: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l2: Optional[pulumi.Input[int]] = None,
                 hello_padding: Optional[pulumi.Input[str]] = None,
                 lsp_interval: Optional[pulumi.Input[int]] = None,
                 lsp_retransmit_interval: Optional[pulumi.Input[int]] = None,
                 mesh_group: Optional[pulumi.Input[str]] = None,
                 mesh_group_id: Optional[pulumi.Input[int]] = None,
                 metric_l1: Optional[pulumi.Input[int]] = None,
                 metric_l2: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 priority_l1: Optional[pulumi.Input[int]] = None,
                 priority_l2: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status6: Optional[pulumi.Input[str]] = None,
                 wide_metric_l1: Optional[pulumi.Input[int]] = None,
                 wide_metric_l2: Optional[pulumi.Input[int]] = None):
        if auth_keychain_l1 is not None:
            pulumi.set(__self__, "auth_keychain_l1", auth_keychain_l1)
        if auth_keychain_l2 is not None:
            pulumi.set(__self__, "auth_keychain_l2", auth_keychain_l2)
        if auth_mode_l1 is not None:
            pulumi.set(__self__, "auth_mode_l1", auth_mode_l1)
        if auth_mode_l2 is not None:
            pulumi.set(__self__, "auth_mode_l2", auth_mode_l2)
        if auth_password_l1 is not None:
            pulumi.set(__self__, "auth_password_l1", auth_password_l1)
        if auth_password_l2 is not None:
            pulumi.set(__self__, "auth_password_l2", auth_password_l2)
        if auth_send_only_l1 is not None:
            pulumi.set(__self__, "auth_send_only_l1", auth_send_only_l1)
        if auth_send_only_l2 is not None:
            pulumi.set(__self__, "auth_send_only_l2", auth_send_only_l2)
        if circuit_type is not None:
            pulumi.set(__self__, "circuit_type", circuit_type)
        if csnp_interval_l1 is not None:
            pulumi.set(__self__, "csnp_interval_l1", csnp_interval_l1)
        if csnp_interval_l2 is not None:
            pulumi.set(__self__, "csnp_interval_l2", csnp_interval_l2)
        if hello_interval_l1 is not None:
            pulumi.set(__self__, "hello_interval_l1", hello_interval_l1)
        if hello_interval_l2 is not None:
            pulumi.set(__self__, "hello_interval_l2", hello_interval_l2)
        if hello_multiplier_l1 is not None:
            pulumi.set(__self__, "hello_multiplier_l1", hello_multiplier_l1)
        if hello_multiplier_l2 is not None:
            pulumi.set(__self__, "hello_multiplier_l2", hello_multiplier_l2)
        if hello_padding is not None:
            pulumi.set(__self__, "hello_padding", hello_padding)
        if lsp_interval is not None:
            pulumi.set(__self__, "lsp_interval", lsp_interval)
        if lsp_retransmit_interval is not None:
            pulumi.set(__self__, "lsp_retransmit_interval", lsp_retransmit_interval)
        if mesh_group is not None:
            pulumi.set(__self__, "mesh_group", mesh_group)
        if mesh_group_id is not None:
            pulumi.set(__self__, "mesh_group_id", mesh_group_id)
        if metric_l1 is not None:
            pulumi.set(__self__, "metric_l1", metric_l1)
        if metric_l2 is not None:
            pulumi.set(__self__, "metric_l2", metric_l2)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if priority_l1 is not None:
            pulumi.set(__self__, "priority_l1", priority_l1)
        if priority_l2 is not None:
            pulumi.set(__self__, "priority_l2", priority_l2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status6 is not None:
            pulumi.set(__self__, "status6", status6)
        if wide_metric_l1 is not None:
            pulumi.set(__self__, "wide_metric_l1", wide_metric_l1)
        if wide_metric_l2 is not None:
            pulumi.set(__self__, "wide_metric_l2", wide_metric_l2)

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_keychain_l1")

    @auth_keychain_l1.setter
    def auth_keychain_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l1", value)

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_keychain_l2")

    @auth_keychain_l2.setter
    def auth_keychain_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l2", value)

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode_l1")

    @auth_mode_l1.setter
    def auth_mode_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l1", value)

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode_l2")

    @auth_mode_l2.setter
    def auth_mode_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l2", value)

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_password_l1")

    @auth_password_l1.setter
    def auth_password_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l1", value)

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_password_l2")

    @auth_password_l2.setter
    def auth_password_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l2", value)

    @property
    @pulumi.getter(name="authSendOnlyL1")
    def auth_send_only_l1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_send_only_l1")

    @auth_send_only_l1.setter
    def auth_send_only_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_send_only_l1", value)

    @property
    @pulumi.getter(name="authSendOnlyL2")
    def auth_send_only_l2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_send_only_l2")

    @auth_send_only_l2.setter
    def auth_send_only_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_send_only_l2", value)

    @property
    @pulumi.getter(name="circuitType")
    def circuit_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "circuit_type")

    @circuit_type.setter
    def circuit_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_type", value)

    @property
    @pulumi.getter(name="csnpIntervalL1")
    def csnp_interval_l1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "csnp_interval_l1")

    @csnp_interval_l1.setter
    def csnp_interval_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "csnp_interval_l1", value)

    @property
    @pulumi.getter(name="csnpIntervalL2")
    def csnp_interval_l2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "csnp_interval_l2")

    @csnp_interval_l2.setter
    def csnp_interval_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "csnp_interval_l2", value)

    @property
    @pulumi.getter(name="helloIntervalL1")
    def hello_interval_l1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval_l1")

    @hello_interval_l1.setter
    def hello_interval_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval_l1", value)

    @property
    @pulumi.getter(name="helloIntervalL2")
    def hello_interval_l2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval_l2")

    @hello_interval_l2.setter
    def hello_interval_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval_l2", value)

    @property
    @pulumi.getter(name="helloMultiplierL1")
    def hello_multiplier_l1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_multiplier_l1")

    @hello_multiplier_l1.setter
    def hello_multiplier_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier_l1", value)

    @property
    @pulumi.getter(name="helloMultiplierL2")
    def hello_multiplier_l2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_multiplier_l2")

    @hello_multiplier_l2.setter
    def hello_multiplier_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier_l2", value)

    @property
    @pulumi.getter(name="helloPadding")
    def hello_padding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hello_padding")

    @hello_padding.setter
    def hello_padding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hello_padding", value)

    @property
    @pulumi.getter(name="lspInterval")
    def lsp_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lsp_interval")

    @lsp_interval.setter
    def lsp_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_interval", value)

    @property
    @pulumi.getter(name="lspRetransmitInterval")
    def lsp_retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lsp_retransmit_interval")

    @lsp_retransmit_interval.setter
    def lsp_retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_retransmit_interval", value)

    @property
    @pulumi.getter(name="meshGroup")
    def mesh_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mesh_group")

    @mesh_group.setter
    def mesh_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_group", value)

    @property
    @pulumi.getter(name="meshGroupId")
    def mesh_group_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mesh_group_id")

    @mesh_group_id.setter
    def mesh_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mesh_group_id", value)

    @property
    @pulumi.getter(name="metricL1")
    def metric_l1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric_l1")

    @metric_l1.setter
    def metric_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric_l1", value)

    @property
    @pulumi.getter(name="metricL2")
    def metric_l2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric_l2")

    @metric_l2.setter
    def metric_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric_l2", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="priorityL1")
    def priority_l1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority_l1")

    @priority_l1.setter
    def priority_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_l1", value)

    @property
    @pulumi.getter(name="priorityL2")
    def priority_l2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority_l2")

    @priority_l2.setter
    def priority_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_l2", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def status6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status6")

    @status6.setter
    def status6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status6", value)

    @property
    @pulumi.getter(name="wideMetricL1")
    def wide_metric_l1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wide_metric_l1")

    @wide_metric_l1.setter
    def wide_metric_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wide_metric_l1", value)

    @property
    @pulumi.getter(name="wideMetricL2")
    def wide_metric_l2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wide_metric_l2")

    @wide_metric_l2.setter
    def wide_metric_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wide_metric_l2", value)


@pulumi.input_type
class RouterIsisIsisNetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 net: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if net is not None:
            pulumi.set(__self__, "net", net)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def net(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net")

    @net.setter
    def net(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net", value)


@pulumi.input_type
class RouterIsisRedistribute6Args:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterIsisRedistributeArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterIsisSummaryAddress6Args:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterIsisSummaryAddressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterKeyChainKeyArgs:
    def __init__(__self__, *,
                 accept_lifetime: Optional[pulumi.Input[str]] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 key_string: Optional[pulumi.Input[str]] = None,
                 send_lifetime: Optional[pulumi.Input[str]] = None):
        if accept_lifetime is not None:
            pulumi.set(__self__, "accept_lifetime", accept_lifetime)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if send_lifetime is not None:
            pulumi.set(__self__, "send_lifetime", send_lifetime)

    @property
    @pulumi.getter(name="acceptLifetime")
    def accept_lifetime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accept_lifetime")

    @accept_lifetime.setter
    def accept_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_lifetime", value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_string", value)

    @property
    @pulumi.getter(name="sendLifetime")
    def send_lifetime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_lifetime")

    @send_lifetime.setter
    def send_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_lifetime", value)


@pulumi.input_type
class RouterMulticast6InterfaceArgs:
    def __init__(__self__, *,
                 hello_holdtime: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if hello_holdtime is not None:
            pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_holdtime")

    @hello_holdtime.setter
    def hello_holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_holdtime", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterMulticast6PimSmGlobalArgs:
    def __init__(__self__, *,
                 register_rate_limit: Optional[pulumi.Input[int]] = None,
                 rp_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticast6PimSmGlobalRpAddressArgs']]]] = None):
        if register_rate_limit is not None:
            pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        if rp_addresses is not None:
            pulumi.set(__self__, "rp_addresses", rp_addresses)

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "register_rate_limit")

    @register_rate_limit.setter
    def register_rate_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "register_rate_limit", value)

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticast6PimSmGlobalRpAddressArgs']]]]:
        return pulumi.get(self, "rp_addresses")

    @rp_addresses.setter
    def rp_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticast6PimSmGlobalRpAddressArgs']]]]):
        pulumi.set(self, "rp_addresses", value)


@pulumi.input_type
class RouterMulticast6PimSmGlobalRpAddressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip6_address: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_address")

    @ip6_address.setter
    def ip6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_address", value)


@pulumi.input_type
class RouterMulticastFlowFlowArgs:
    def __init__(__self__, *,
                 group_addr: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 source_addr: Optional[pulumi.Input[str]] = None):
        if group_addr is not None:
            pulumi.set(__self__, "group_addr", group_addr)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source_addr is not None:
            pulumi.set(__self__, "source_addr", source_addr)

    @property
    @pulumi.getter(name="groupAddr")
    def group_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_addr")

    @group_addr.setter
    def group_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_addr", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="sourceAddr")
    def source_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_addr")

    @source_addr.setter
    def source_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_addr", value)


@pulumi.input_type
class RouterMulticastInterfaceArgs:
    def __init__(__self__, *,
                 bfd: Optional[pulumi.Input[str]] = None,
                 cisco_exclude_genid: Optional[pulumi.Input[str]] = None,
                 dr_priority: Optional[pulumi.Input[int]] = None,
                 hello_holdtime: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 igmp: Optional[pulumi.Input['RouterMulticastInterfaceIgmpArgs']] = None,
                 join_groups: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastInterfaceJoinGroupArgs']]]] = None,
                 multicast_flow: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbour_filter: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 pim_mode: Optional[pulumi.Input[str]] = None,
                 propagation_delay: Optional[pulumi.Input[int]] = None,
                 rp_candidate: Optional[pulumi.Input[str]] = None,
                 rp_candidate_group: Optional[pulumi.Input[str]] = None,
                 rp_candidate_interval: Optional[pulumi.Input[int]] = None,
                 rp_candidate_priority: Optional[pulumi.Input[int]] = None,
                 rpf_nbr_fail_back: Optional[pulumi.Input[str]] = None,
                 rpf_nbr_fail_back_filter: Optional[pulumi.Input[str]] = None,
                 state_refresh_interval: Optional[pulumi.Input[int]] = None,
                 static_group: Optional[pulumi.Input[str]] = None,
                 ttl_threshold: Optional[pulumi.Input[int]] = None):
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if cisco_exclude_genid is not None:
            pulumi.set(__self__, "cisco_exclude_genid", cisco_exclude_genid)
        if dr_priority is not None:
            pulumi.set(__self__, "dr_priority", dr_priority)
        if hello_holdtime is not None:
            pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if igmp is not None:
            pulumi.set(__self__, "igmp", igmp)
        if join_groups is not None:
            pulumi.set(__self__, "join_groups", join_groups)
        if multicast_flow is not None:
            pulumi.set(__self__, "multicast_flow", multicast_flow)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbour_filter is not None:
            pulumi.set(__self__, "neighbour_filter", neighbour_filter)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if pim_mode is not None:
            pulumi.set(__self__, "pim_mode", pim_mode)
        if propagation_delay is not None:
            pulumi.set(__self__, "propagation_delay", propagation_delay)
        if rp_candidate is not None:
            pulumi.set(__self__, "rp_candidate", rp_candidate)
        if rp_candidate_group is not None:
            pulumi.set(__self__, "rp_candidate_group", rp_candidate_group)
        if rp_candidate_interval is not None:
            pulumi.set(__self__, "rp_candidate_interval", rp_candidate_interval)
        if rp_candidate_priority is not None:
            pulumi.set(__self__, "rp_candidate_priority", rp_candidate_priority)
        if rpf_nbr_fail_back is not None:
            pulumi.set(__self__, "rpf_nbr_fail_back", rpf_nbr_fail_back)
        if rpf_nbr_fail_back_filter is not None:
            pulumi.set(__self__, "rpf_nbr_fail_back_filter", rpf_nbr_fail_back_filter)
        if state_refresh_interval is not None:
            pulumi.set(__self__, "state_refresh_interval", state_refresh_interval)
        if static_group is not None:
            pulumi.set(__self__, "static_group", static_group)
        if ttl_threshold is not None:
            pulumi.set(__self__, "ttl_threshold", ttl_threshold)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="ciscoExcludeGenid")
    def cisco_exclude_genid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cisco_exclude_genid")

    @cisco_exclude_genid.setter
    def cisco_exclude_genid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cisco_exclude_genid", value)

    @property
    @pulumi.getter(name="drPriority")
    def dr_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dr_priority")

    @dr_priority.setter
    def dr_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dr_priority", value)

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_holdtime")

    @hello_holdtime.setter
    def hello_holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_holdtime", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter
    def igmp(self) -> Optional[pulumi.Input['RouterMulticastInterfaceIgmpArgs']]:
        return pulumi.get(self, "igmp")

    @igmp.setter
    def igmp(self, value: Optional[pulumi.Input['RouterMulticastInterfaceIgmpArgs']]):
        pulumi.set(self, "igmp", value)

    @property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastInterfaceJoinGroupArgs']]]]:
        return pulumi.get(self, "join_groups")

    @join_groups.setter
    def join_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastInterfaceJoinGroupArgs']]]]):
        pulumi.set(self, "join_groups", value)

    @property
    @pulumi.getter(name="multicastFlow")
    def multicast_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_flow")

    @multicast_flow.setter
    def multicast_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_flow", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="neighbourFilter")
    def neighbour_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neighbour_filter")

    @neighbour_filter.setter
    def neighbour_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbour_filter", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter(name="pimMode")
    def pim_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pim_mode")

    @pim_mode.setter
    def pim_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pim_mode", value)

    @property
    @pulumi.getter(name="propagationDelay")
    def propagation_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "propagation_delay")

    @propagation_delay.setter
    def propagation_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "propagation_delay", value)

    @property
    @pulumi.getter(name="rpCandidate")
    def rp_candidate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rp_candidate")

    @rp_candidate.setter
    def rp_candidate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rp_candidate", value)

    @property
    @pulumi.getter(name="rpCandidateGroup")
    def rp_candidate_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rp_candidate_group")

    @rp_candidate_group.setter
    def rp_candidate_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rp_candidate_group", value)

    @property
    @pulumi.getter(name="rpCandidateInterval")
    def rp_candidate_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rp_candidate_interval")

    @rp_candidate_interval.setter
    def rp_candidate_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rp_candidate_interval", value)

    @property
    @pulumi.getter(name="rpCandidatePriority")
    def rp_candidate_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rp_candidate_priority")

    @rp_candidate_priority.setter
    def rp_candidate_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rp_candidate_priority", value)

    @property
    @pulumi.getter(name="rpfNbrFailBack")
    def rpf_nbr_fail_back(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rpf_nbr_fail_back")

    @rpf_nbr_fail_back.setter
    def rpf_nbr_fail_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpf_nbr_fail_back", value)

    @property
    @pulumi.getter(name="rpfNbrFailBackFilter")
    def rpf_nbr_fail_back_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rpf_nbr_fail_back_filter")

    @rpf_nbr_fail_back_filter.setter
    def rpf_nbr_fail_back_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpf_nbr_fail_back_filter", value)

    @property
    @pulumi.getter(name="stateRefreshInterval")
    def state_refresh_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "state_refresh_interval")

    @state_refresh_interval.setter
    def state_refresh_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state_refresh_interval", value)

    @property
    @pulumi.getter(name="staticGroup")
    def static_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "static_group")

    @static_group.setter
    def static_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "static_group", value)

    @property
    @pulumi.getter(name="ttlThreshold")
    def ttl_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ttl_threshold")

    @ttl_threshold.setter
    def ttl_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl_threshold", value)


@pulumi.input_type
class RouterMulticastInterfaceIgmpArgs:
    def __init__(__self__, *,
                 access_group: Optional[pulumi.Input[str]] = None,
                 immediate_leave_group: Optional[pulumi.Input[str]] = None,
                 last_member_query_count: Optional[pulumi.Input[int]] = None,
                 last_member_query_interval: Optional[pulumi.Input[int]] = None,
                 query_interval: Optional[pulumi.Input[int]] = None,
                 query_max_response_time: Optional[pulumi.Input[int]] = None,
                 query_timeout: Optional[pulumi.Input[int]] = None,
                 router_alert_check: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if access_group is not None:
            pulumi.set(__self__, "access_group", access_group)
        if immediate_leave_group is not None:
            pulumi.set(__self__, "immediate_leave_group", immediate_leave_group)
        if last_member_query_count is not None:
            pulumi.set(__self__, "last_member_query_count", last_member_query_count)
        if last_member_query_interval is not None:
            pulumi.set(__self__, "last_member_query_interval", last_member_query_interval)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if query_max_response_time is not None:
            pulumi.set(__self__, "query_max_response_time", query_max_response_time)
        if query_timeout is not None:
            pulumi.set(__self__, "query_timeout", query_timeout)
        if router_alert_check is not None:
            pulumi.set(__self__, "router_alert_check", router_alert_check)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessGroup")
    def access_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group")

    @access_group.setter
    def access_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group", value)

    @property
    @pulumi.getter(name="immediateLeaveGroup")
    def immediate_leave_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "immediate_leave_group")

    @immediate_leave_group.setter
    def immediate_leave_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "immediate_leave_group", value)

    @property
    @pulumi.getter(name="lastMemberQueryCount")
    def last_member_query_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_member_query_count")

    @last_member_query_count.setter
    def last_member_query_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_member_query_count", value)

    @property
    @pulumi.getter(name="lastMemberQueryInterval")
    def last_member_query_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_member_query_interval")

    @last_member_query_interval.setter
    def last_member_query_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_member_query_interval", value)

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_interval")

    @query_interval.setter
    def query_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_interval", value)

    @property
    @pulumi.getter(name="queryMaxResponseTime")
    def query_max_response_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_max_response_time")

    @query_max_response_time.setter
    def query_max_response_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_max_response_time", value)

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_timeout")

    @query_timeout.setter
    def query_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_timeout", value)

    @property
    @pulumi.getter(name="routerAlertCheck")
    def router_alert_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_alert_check")

    @router_alert_check.setter
    def router_alert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_alert_check", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RouterMulticastInterfaceJoinGroupArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class RouterMulticastPimSmGlobalArgs:
    def __init__(__self__, *,
                 accept_register_list: Optional[pulumi.Input[str]] = None,
                 accept_source_list: Optional[pulumi.Input[str]] = None,
                 bsr_allow_quick_refresh: Optional[pulumi.Input[str]] = None,
                 bsr_candidate: Optional[pulumi.Input[str]] = None,
                 bsr_hash: Optional[pulumi.Input[int]] = None,
                 bsr_interface: Optional[pulumi.Input[str]] = None,
                 bsr_priority: Optional[pulumi.Input[int]] = None,
                 cisco_crp_prefix: Optional[pulumi.Input[str]] = None,
                 cisco_ignore_rp_set_priority: Optional[pulumi.Input[str]] = None,
                 cisco_register_checksum: Optional[pulumi.Input[str]] = None,
                 cisco_register_checksum_group: Optional[pulumi.Input[str]] = None,
                 join_prune_holdtime: Optional[pulumi.Input[int]] = None,
                 message_interval: Optional[pulumi.Input[int]] = None,
                 null_register_retries: Optional[pulumi.Input[int]] = None,
                 pim_use_sdwan: Optional[pulumi.Input[str]] = None,
                 register_rate_limit: Optional[pulumi.Input[int]] = None,
                 register_rp_reachability: Optional[pulumi.Input[str]] = None,
                 register_source: Optional[pulumi.Input[str]] = None,
                 register_source_interface: Optional[pulumi.Input[str]] = None,
                 register_source_ip: Optional[pulumi.Input[str]] = None,
                 register_supression: Optional[pulumi.Input[int]] = None,
                 rp_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastPimSmGlobalRpAddressArgs']]]] = None,
                 rp_register_keepalive: Optional[pulumi.Input[int]] = None,
                 spt_threshold: Optional[pulumi.Input[str]] = None,
                 spt_threshold_group: Optional[pulumi.Input[str]] = None,
                 ssm: Optional[pulumi.Input[str]] = None,
                 ssm_range: Optional[pulumi.Input[str]] = None):
        if accept_register_list is not None:
            pulumi.set(__self__, "accept_register_list", accept_register_list)
        if accept_source_list is not None:
            pulumi.set(__self__, "accept_source_list", accept_source_list)
        if bsr_allow_quick_refresh is not None:
            pulumi.set(__self__, "bsr_allow_quick_refresh", bsr_allow_quick_refresh)
        if bsr_candidate is not None:
            pulumi.set(__self__, "bsr_candidate", bsr_candidate)
        if bsr_hash is not None:
            pulumi.set(__self__, "bsr_hash", bsr_hash)
        if bsr_interface is not None:
            pulumi.set(__self__, "bsr_interface", bsr_interface)
        if bsr_priority is not None:
            pulumi.set(__self__, "bsr_priority", bsr_priority)
        if cisco_crp_prefix is not None:
            pulumi.set(__self__, "cisco_crp_prefix", cisco_crp_prefix)
        if cisco_ignore_rp_set_priority is not None:
            pulumi.set(__self__, "cisco_ignore_rp_set_priority", cisco_ignore_rp_set_priority)
        if cisco_register_checksum is not None:
            pulumi.set(__self__, "cisco_register_checksum", cisco_register_checksum)
        if cisco_register_checksum_group is not None:
            pulumi.set(__self__, "cisco_register_checksum_group", cisco_register_checksum_group)
        if join_prune_holdtime is not None:
            pulumi.set(__self__, "join_prune_holdtime", join_prune_holdtime)
        if message_interval is not None:
            pulumi.set(__self__, "message_interval", message_interval)
        if null_register_retries is not None:
            pulumi.set(__self__, "null_register_retries", null_register_retries)
        if pim_use_sdwan is not None:
            pulumi.set(__self__, "pim_use_sdwan", pim_use_sdwan)
        if register_rate_limit is not None:
            pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        if register_rp_reachability is not None:
            pulumi.set(__self__, "register_rp_reachability", register_rp_reachability)
        if register_source is not None:
            pulumi.set(__self__, "register_source", register_source)
        if register_source_interface is not None:
            pulumi.set(__self__, "register_source_interface", register_source_interface)
        if register_source_ip is not None:
            pulumi.set(__self__, "register_source_ip", register_source_ip)
        if register_supression is not None:
            pulumi.set(__self__, "register_supression", register_supression)
        if rp_addresses is not None:
            pulumi.set(__self__, "rp_addresses", rp_addresses)
        if rp_register_keepalive is not None:
            pulumi.set(__self__, "rp_register_keepalive", rp_register_keepalive)
        if spt_threshold is not None:
            pulumi.set(__self__, "spt_threshold", spt_threshold)
        if spt_threshold_group is not None:
            pulumi.set(__self__, "spt_threshold_group", spt_threshold_group)
        if ssm is not None:
            pulumi.set(__self__, "ssm", ssm)
        if ssm_range is not None:
            pulumi.set(__self__, "ssm_range", ssm_range)

    @property
    @pulumi.getter(name="acceptRegisterList")
    def accept_register_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accept_register_list")

    @accept_register_list.setter
    def accept_register_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_register_list", value)

    @property
    @pulumi.getter(name="acceptSourceList")
    def accept_source_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accept_source_list")

    @accept_source_list.setter
    def accept_source_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_source_list", value)

    @property
    @pulumi.getter(name="bsrAllowQuickRefresh")
    def bsr_allow_quick_refresh(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bsr_allow_quick_refresh")

    @bsr_allow_quick_refresh.setter
    def bsr_allow_quick_refresh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bsr_allow_quick_refresh", value)

    @property
    @pulumi.getter(name="bsrCandidate")
    def bsr_candidate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bsr_candidate")

    @bsr_candidate.setter
    def bsr_candidate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bsr_candidate", value)

    @property
    @pulumi.getter(name="bsrHash")
    def bsr_hash(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bsr_hash")

    @bsr_hash.setter
    def bsr_hash(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bsr_hash", value)

    @property
    @pulumi.getter(name="bsrInterface")
    def bsr_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bsr_interface")

    @bsr_interface.setter
    def bsr_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bsr_interface", value)

    @property
    @pulumi.getter(name="bsrPriority")
    def bsr_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bsr_priority")

    @bsr_priority.setter
    def bsr_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bsr_priority", value)

    @property
    @pulumi.getter(name="ciscoCrpPrefix")
    def cisco_crp_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cisco_crp_prefix")

    @cisco_crp_prefix.setter
    def cisco_crp_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cisco_crp_prefix", value)

    @property
    @pulumi.getter(name="ciscoIgnoreRpSetPriority")
    def cisco_ignore_rp_set_priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cisco_ignore_rp_set_priority")

    @cisco_ignore_rp_set_priority.setter
    def cisco_ignore_rp_set_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cisco_ignore_rp_set_priority", value)

    @property
    @pulumi.getter(name="ciscoRegisterChecksum")
    def cisco_register_checksum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cisco_register_checksum")

    @cisco_register_checksum.setter
    def cisco_register_checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cisco_register_checksum", value)

    @property
    @pulumi.getter(name="ciscoRegisterChecksumGroup")
    def cisco_register_checksum_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cisco_register_checksum_group")

    @cisco_register_checksum_group.setter
    def cisco_register_checksum_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cisco_register_checksum_group", value)

    @property
    @pulumi.getter(name="joinPruneHoldtime")
    def join_prune_holdtime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "join_prune_holdtime")

    @join_prune_holdtime.setter
    def join_prune_holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "join_prune_holdtime", value)

    @property
    @pulumi.getter(name="messageInterval")
    def message_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "message_interval")

    @message_interval.setter
    def message_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_interval", value)

    @property
    @pulumi.getter(name="nullRegisterRetries")
    def null_register_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "null_register_retries")

    @null_register_retries.setter
    def null_register_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "null_register_retries", value)

    @property
    @pulumi.getter(name="pimUseSdwan")
    def pim_use_sdwan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pim_use_sdwan")

    @pim_use_sdwan.setter
    def pim_use_sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pim_use_sdwan", value)

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "register_rate_limit")

    @register_rate_limit.setter
    def register_rate_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "register_rate_limit", value)

    @property
    @pulumi.getter(name="registerRpReachability")
    def register_rp_reachability(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "register_rp_reachability")

    @register_rp_reachability.setter
    def register_rp_reachability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_rp_reachability", value)

    @property
    @pulumi.getter(name="registerSource")
    def register_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "register_source")

    @register_source.setter
    def register_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_source", value)

    @property
    @pulumi.getter(name="registerSourceInterface")
    def register_source_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "register_source_interface")

    @register_source_interface.setter
    def register_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_source_interface", value)

    @property
    @pulumi.getter(name="registerSourceIp")
    def register_source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "register_source_ip")

    @register_source_ip.setter
    def register_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_source_ip", value)

    @property
    @pulumi.getter(name="registerSupression")
    def register_supression(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "register_supression")

    @register_supression.setter
    def register_supression(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "register_supression", value)

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastPimSmGlobalRpAddressArgs']]]]:
        return pulumi.get(self, "rp_addresses")

    @rp_addresses.setter
    def rp_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastPimSmGlobalRpAddressArgs']]]]):
        pulumi.set(self, "rp_addresses", value)

    @property
    @pulumi.getter(name="rpRegisterKeepalive")
    def rp_register_keepalive(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rp_register_keepalive")

    @rp_register_keepalive.setter
    def rp_register_keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rp_register_keepalive", value)

    @property
    @pulumi.getter(name="sptThreshold")
    def spt_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spt_threshold")

    @spt_threshold.setter
    def spt_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spt_threshold", value)

    @property
    @pulumi.getter(name="sptThresholdGroup")
    def spt_threshold_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spt_threshold_group")

    @spt_threshold_group.setter
    def spt_threshold_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spt_threshold_group", value)

    @property
    @pulumi.getter
    def ssm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssm")

    @ssm.setter
    def ssm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssm", value)

    @property
    @pulumi.getter(name="ssmRange")
    def ssm_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssm_range")

    @ssm_range.setter
    def ssm_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssm_range", value)


@pulumi.input_type
class RouterMulticastPimSmGlobalRpAddressArgs:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None):
        if group is not None:
            pulumi.set(__self__, "group", group)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)


@pulumi.input_type
class RouterOspf6AreaArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 default_cost: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaIpsecKeyArgs']]]] = None,
                 key_rollover_interval: Optional[pulumi.Input[int]] = None,
                 nssa_default_information_originate: Optional[pulumi.Input[str]] = None,
                 nssa_default_information_originate_metric: Optional[pulumi.Input[int]] = None,
                 nssa_default_information_originate_metric_type: Optional[pulumi.Input[str]] = None,
                 nssa_redistribution: Optional[pulumi.Input[str]] = None,
                 nssa_translator_role: Optional[pulumi.Input[str]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaRangeArgs']]]] = None,
                 stub_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 virtual_links: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkArgs']]]] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if default_cost is not None:
            pulumi.set(__self__, "default_cost", default_cost)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_redistribution is not None:
            pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        if nssa_translator_role is not None:
            pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if stub_type is not None:
            pulumi.set(__self__, "stub_type", stub_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_links is not None:
            pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_cost")

    @default_cost.setter
    def default_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_cost", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_auth_alg")

    @ipsec_auth_alg.setter
    def ipsec_auth_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_auth_alg", value)

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_enc_alg")

    @ipsec_enc_alg.setter
    def ipsec_enc_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_enc_alg", value)

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaIpsecKeyArgs']]]]:
        return pulumi.get(self, "ipsec_keys")

    @ipsec_keys.setter
    def ipsec_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaIpsecKeyArgs']]]]):
        pulumi.set(self, "ipsec_keys", value)

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_rollover_interval")

    @key_rollover_interval.setter
    def key_rollover_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_rollover_interval", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nssa_default_information_originate")

    @nssa_default_information_originate.setter
    def nssa_default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_default_information_originate", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @nssa_default_information_originate_metric.setter
    def nssa_default_information_originate_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nssa_default_information_originate_metric", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @nssa_default_information_originate_metric_type.setter
    def nssa_default_information_originate_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_default_information_originate_metric_type", value)

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nssa_redistribution")

    @nssa_redistribution.setter
    def nssa_redistribution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_redistribution", value)

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nssa_translator_role")

    @nssa_translator_role.setter
    def nssa_translator_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_translator_role", value)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaRangeArgs']]]]:
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stub_type")

    @stub_type.setter
    def stub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stub_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkArgs']]]]:
        return pulumi.get(self, "virtual_links")

    @virtual_links.setter
    def virtual_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkArgs']]]]):
        pulumi.set(self, "virtual_links", value)


@pulumi.input_type
class RouterOspf6AreaIpsecKeyArgs:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 spi: Optional[pulumi.Input[int]] = None):
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter
    def spi(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spi")

    @spi.setter
    def spi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spi", value)


@pulumi.input_type
class RouterOspf6AreaRangeArgs:
    def __init__(__self__, *,
                 advertise: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterOspf6AreaVirtualLinkArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkIpsecKeyArgs']]]] = None,
                 key_rollover_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_auth_alg")

    @ipsec_auth_alg.setter
    def ipsec_auth_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_auth_alg", value)

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_enc_alg")

    @ipsec_enc_alg.setter
    def ipsec_enc_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_enc_alg", value)

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkIpsecKeyArgs']]]]:
        return pulumi.get(self, "ipsec_keys")

    @ipsec_keys.setter
    def ipsec_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkIpsecKeyArgs']]]]):
        pulumi.set(self, "ipsec_keys", value)

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_rollover_interval")

    @key_rollover_interval.setter
    def key_rollover_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_rollover_interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)


@pulumi.input_type
class RouterOspf6AreaVirtualLinkIpsecKeyArgs:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 spi: Optional[pulumi.Input[int]] = None):
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter
    def spi(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spi")

    @spi.setter
    def spi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spi", value)


@pulumi.input_type
class RouterOspf6Ospf6InterfaceArgs:
    def __init__(__self__, *,
                 area_id: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceIpsecKeyArgs']]]] = None,
                 key_rollover_interval: Optional[pulumi.Input[int]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceNeighborArgs']]]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None):
        if area_id is not None:
            pulumi.set(__self__, "area_id", area_id)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_auth_alg")

    @ipsec_auth_alg.setter
    def ipsec_auth_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_auth_alg", value)

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_enc_alg")

    @ipsec_enc_alg.setter
    def ipsec_enc_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_enc_alg", value)

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceIpsecKeyArgs']]]]:
        return pulumi.get(self, "ipsec_keys")

    @ipsec_keys.setter
    def ipsec_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceIpsecKeyArgs']]]]):
        pulumi.set(self, "ipsec_keys", value)

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_rollover_interval")

    @key_rollover_interval.setter
    def key_rollover_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_rollover_interval", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mtu_ignore")

    @mtu_ignore.setter
    def mtu_ignore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_ignore", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceNeighborArgs']]]]:
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)


@pulumi.input_type
class RouterOspf6Ospf6InterfaceIpsecKeyArgs:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 spi: Optional[pulumi.Input[int]] = None):
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter
    def spi(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spi")

    @spi.setter
    def spi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spi", value)


@pulumi.input_type
class RouterOspf6Ospf6InterfaceNeighborArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[int]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 poll_interval: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "poll_interval")

    @poll_interval.setter
    def poll_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poll_interval", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class RouterOspf6PassiveInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterOspf6RedistributeArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterOspf6SummaryAddressArgs:
    def __init__(__self__, *,
                 advertise: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[int]] = None):
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class RouterOspfAreaArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 default_cost: Optional[pulumi.Input[int]] = None,
                 filter_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaFilterListArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 nssa_default_information_originate: Optional[pulumi.Input[str]] = None,
                 nssa_default_information_originate_metric: Optional[pulumi.Input[int]] = None,
                 nssa_default_information_originate_metric_type: Optional[pulumi.Input[str]] = None,
                 nssa_redistribution: Optional[pulumi.Input[str]] = None,
                 nssa_translator_role: Optional[pulumi.Input[str]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaRangeArgs']]]] = None,
                 shortcut: Optional[pulumi.Input[str]] = None,
                 stub_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 virtual_links: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkArgs']]]] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if default_cost is not None:
            pulumi.set(__self__, "default_cost", default_cost)
        if filter_lists is not None:
            pulumi.set(__self__, "filter_lists", filter_lists)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_redistribution is not None:
            pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        if nssa_translator_role is not None:
            pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if shortcut is not None:
            pulumi.set(__self__, "shortcut", shortcut)
        if stub_type is not None:
            pulumi.set(__self__, "stub_type", stub_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_links is not None:
            pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_cost")

    @default_cost.setter
    def default_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_cost", value)

    @property
    @pulumi.getter(name="filterLists")
    def filter_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaFilterListArgs']]]]:
        return pulumi.get(self, "filter_lists")

    @filter_lists.setter
    def filter_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaFilterListArgs']]]]):
        pulumi.set(self, "filter_lists", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nssa_default_information_originate")

    @nssa_default_information_originate.setter
    def nssa_default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_default_information_originate", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @nssa_default_information_originate_metric.setter
    def nssa_default_information_originate_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nssa_default_information_originate_metric", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @nssa_default_information_originate_metric_type.setter
    def nssa_default_information_originate_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_default_information_originate_metric_type", value)

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nssa_redistribution")

    @nssa_redistribution.setter
    def nssa_redistribution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_redistribution", value)

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nssa_translator_role")

    @nssa_translator_role.setter
    def nssa_translator_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_translator_role", value)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaRangeArgs']]]]:
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)

    @property
    @pulumi.getter
    def shortcut(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shortcut")

    @shortcut.setter
    def shortcut(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shortcut", value)

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stub_type")

    @stub_type.setter
    def stub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stub_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkArgs']]]]:
        return pulumi.get(self, "virtual_links")

    @virtual_links.setter
    def virtual_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkArgs']]]]):
        pulumi.set(self, "virtual_links", value)


@pulumi.input_type
class RouterOspfAreaFilterListArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 list: Optional[pulumi.Input[str]] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if list is not None:
            pulumi.set(__self__, "list", list)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "list", value)


@pulumi.input_type
class RouterOspfAreaRangeArgs:
    def __init__(__self__, *,
                 advertise: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 substitute: Optional[pulumi.Input[str]] = None,
                 substitute_status: Optional[pulumi.Input[str]] = None):
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if substitute is not None:
            pulumi.set(__self__, "substitute", substitute)
        if substitute_status is not None:
            pulumi.set(__self__, "substitute_status", substitute_status)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def substitute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "substitute")

    @substitute.setter
    def substitute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "substitute", value)

    @property
    @pulumi.getter(name="substituteStatus")
    def substitute_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "substitute_status")

    @substitute_status.setter
    def substitute_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "substitute_status", value)


@pulumi.input_type
class RouterOspfAreaVirtualLinkArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_keychain: Optional[pulumi.Input[str]] = None,
                 md5_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkMd5KeyArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_keychain is not None:
            pulumi.set(__self__, "md5_keychain", md5_keychain)
        if md5_keys is not None:
            pulumi.set(__self__, "md5_keys", md5_keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter
    def keychain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keychain")

    @keychain.setter
    def keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keychain", value)

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "md5_key")

    @md5_key.setter
    def md5_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_key", value)

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "md5_keychain")

    @md5_keychain.setter
    def md5_keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_keychain", value)

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkMd5KeyArgs']]]]:
        return pulumi.get(self, "md5_keys")

    @md5_keys.setter
    def md5_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkMd5KeyArgs']]]]):
        pulumi.set(self, "md5_keys", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)


@pulumi.input_type
class RouterOspfAreaVirtualLinkMd5KeyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key_string: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_string", value)


@pulumi.input_type
class RouterOspfDistributeListArgs:
    def __init__(__self__, *,
                 access_list: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class RouterOspfNeighborArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 poll_interval: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "poll_interval")

    @poll_interval.setter
    def poll_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poll_interval", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class RouterOspfNetworkArgs:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        if area is not None:
            pulumi.set(__self__, "area", area)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterOspfOspfInterfaceArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 database_filter_out: Optional[pulumi.Input[str]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 hello_multiplier: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_keychain: Optional[pulumi.Input[str]] = None,
                 md5_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfOspfInterfaceMd5KeyArgs']]]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resync_timeout: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if database_filter_out is not None:
            pulumi.set(__self__, "database_filter_out", database_filter_out)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_multiplier is not None:
            pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_keychain is not None:
            pulumi.set(__self__, "md5_keychain", md5_keychain)
        if md5_keys is not None:
            pulumi.set(__self__, "md5_keys", md5_keys)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if resync_timeout is not None:
            pulumi.set(__self__, "resync_timeout", resync_timeout)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter(name="databaseFilterOut")
    def database_filter_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_filter_out")

    @database_filter_out.setter
    def database_filter_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_filter_out", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_multiplier")

    @hello_multiplier.setter
    def hello_multiplier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def keychain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keychain")

    @keychain.setter
    def keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keychain", value)

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "md5_key")

    @md5_key.setter
    def md5_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_key", value)

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "md5_keychain")

    @md5_keychain.setter
    def md5_keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_keychain", value)

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfOspfInterfaceMd5KeyArgs']]]]:
        return pulumi.get(self, "md5_keys")

    @md5_keys.setter
    def md5_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfOspfInterfaceMd5KeyArgs']]]]):
        pulumi.set(self, "md5_keys", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mtu_ignore")

    @mtu_ignore.setter
    def mtu_ignore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_ignore", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="resyncTimeout")
    def resync_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "resync_timeout")

    @resync_timeout.setter
    def resync_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resync_timeout", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)


@pulumi.input_type
class RouterOspfOspfInterfaceMd5KeyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key_string: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_string", value)


@pulumi.input_type
class RouterOspfPassiveInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterOspfRedistributeArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[int]] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class RouterOspfSummaryAddressArgs:
    def __init__(__self__, *,
                 advertise: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[int]] = None):
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class RouterPolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPolicy6InternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPolicy6InternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class RouterPolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPolicyDstArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class RouterPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPolicyInputDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class RouterPolicySrcArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class RouterPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPrefixList6RuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 ge: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 le: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if le is not None:
            pulumi.set(__self__, "le", le)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ge", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "le", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterPrefixListRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 ge: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 le: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if le is not None:
            pulumi.set(__self__, "le", le)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ge", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "le", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterRipDistanceArgs:
    def __init__(__self__, *,
                 access_list: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterRipDistributeListArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 listname: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if listname is not None:
            pulumi.set(__self__, "listname", listname)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def listname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "listname")

    @listname.setter
    def listname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listname", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRipInterfaceArgs:
    def __init__(__self__, *,
                 auth_keychain: Optional[pulumi.Input[str]] = None,
                 auth_mode: Optional[pulumi.Input[str]] = None,
                 auth_string: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 receive_version: Optional[pulumi.Input[str]] = None,
                 send_version: Optional[pulumi.Input[str]] = None,
                 send_version2_broadcast: Optional[pulumi.Input[str]] = None,
                 split_horizon: Optional[pulumi.Input[str]] = None,
                 split_horizon_status: Optional[pulumi.Input[str]] = None):
        if auth_keychain is not None:
            pulumi.set(__self__, "auth_keychain", auth_keychain)
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if auth_string is not None:
            pulumi.set(__self__, "auth_string", auth_string)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if receive_version is not None:
            pulumi.set(__self__, "receive_version", receive_version)
        if send_version is not None:
            pulumi.set(__self__, "send_version", send_version)
        if send_version2_broadcast is not None:
            pulumi.set(__self__, "send_version2_broadcast", send_version2_broadcast)
        if split_horizon is not None:
            pulumi.set(__self__, "split_horizon", split_horizon)
        if split_horizon_status is not None:
            pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter(name="authKeychain")
    def auth_keychain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_keychain")

    @auth_keychain.setter
    def auth_keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain", value)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode")

    @auth_mode.setter
    def auth_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode", value)

    @property
    @pulumi.getter(name="authString")
    def auth_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_string")

    @auth_string.setter
    def auth_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_string", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="receiveVersion")
    def receive_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "receive_version")

    @receive_version.setter
    def receive_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receive_version", value)

    @property
    @pulumi.getter(name="sendVersion")
    def send_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_version")

    @send_version.setter
    def send_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_version", value)

    @property
    @pulumi.getter(name="sendVersion2Broadcast")
    def send_version2_broadcast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_version2_broadcast")

    @send_version2_broadcast.setter
    def send_version2_broadcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_version2_broadcast", value)

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_horizon")

    @split_horizon.setter
    def split_horizon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_horizon", value)

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_horizon_status")

    @split_horizon_status.setter
    def split_horizon_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_horizon_status", value)


@pulumi.input_type
class RouterRipNeighborArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class RouterRipNetworkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterRipOffsetListArgs:
    def __init__(__self__, *,
                 access_list: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 offset: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRipPassiveInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterRipRedistributeArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRipngAggregateAddressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterRipngDistanceArgs:
    def __init__(__self__, *,
                 access_list6: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        if access_list6 is not None:
            pulumi.set(__self__, "access_list6", access_list6)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_list6")

    @access_list6.setter
    def access_list6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list6", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterRipngDistributeListArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 listname: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if listname is not None:
            pulumi.set(__self__, "listname", listname)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def listname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "listname")

    @listname.setter
    def listname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listname", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRipngInterfaceArgs:
    def __init__(__self__, *,
                 flags: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 split_horizon: Optional[pulumi.Input[str]] = None,
                 split_horizon_status: Optional[pulumi.Input[str]] = None):
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if split_horizon is not None:
            pulumi.set(__self__, "split_horizon", split_horizon)
        if split_horizon_status is not None:
            pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_horizon")

    @split_horizon.setter
    def split_horizon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_horizon", value)

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_horizon_status")

    @split_horizon_status.setter
    def split_horizon_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_horizon_status", value)


@pulumi.input_type
class RouterRipngNeighborArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)


@pulumi.input_type
class RouterRipngNetworkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterRipngOffsetListArgs:
    def __init__(__self__, *,
                 access_list6: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 offset: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if access_list6 is not None:
            pulumi.set(__self__, "access_list6", access_list6)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_list6")

    @access_list6.setter
    def access_list6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list6", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRipngPassiveInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterRipngRedistributeArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRouteMapRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 match_as_path: Optional[pulumi.Input[str]] = None,
                 match_community: Optional[pulumi.Input[str]] = None,
                 match_community_exact: Optional[pulumi.Input[str]] = None,
                 match_extcommunity: Optional[pulumi.Input[str]] = None,
                 match_extcommunity_exact: Optional[pulumi.Input[str]] = None,
                 match_flags: Optional[pulumi.Input[int]] = None,
                 match_interface: Optional[pulumi.Input[str]] = None,
                 match_ip6_address: Optional[pulumi.Input[str]] = None,
                 match_ip6_nexthop: Optional[pulumi.Input[str]] = None,
                 match_ip_address: Optional[pulumi.Input[str]] = None,
                 match_ip_nexthop: Optional[pulumi.Input[str]] = None,
                 match_metric: Optional[pulumi.Input[int]] = None,
                 match_origin: Optional[pulumi.Input[str]] = None,
                 match_route_type: Optional[pulumi.Input[str]] = None,
                 match_tag: Optional[pulumi.Input[int]] = None,
                 match_vrf: Optional[pulumi.Input[int]] = None,
                 set_aggregator_as: Optional[pulumi.Input[int]] = None,
                 set_aggregator_ip: Optional[pulumi.Input[str]] = None,
                 set_aspath_action: Optional[pulumi.Input[str]] = None,
                 set_aspaths: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetAspathArgs']]]] = None,
                 set_atomic_aggregate: Optional[pulumi.Input[str]] = None,
                 set_communities: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetCommunityArgs']]]] = None,
                 set_community_additive: Optional[pulumi.Input[str]] = None,
                 set_community_delete: Optional[pulumi.Input[str]] = None,
                 set_dampening_max_suppress: Optional[pulumi.Input[int]] = None,
                 set_dampening_reachability_half_life: Optional[pulumi.Input[int]] = None,
                 set_dampening_reuse: Optional[pulumi.Input[int]] = None,
                 set_dampening_suppress: Optional[pulumi.Input[int]] = None,
                 set_dampening_unreachability_half_life: Optional[pulumi.Input[int]] = None,
                 set_extcommunity_rts: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunityRtArgs']]]] = None,
                 set_extcommunity_soos: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunitySooArgs']]]] = None,
                 set_flags: Optional[pulumi.Input[int]] = None,
                 set_ip6_nexthop: Optional[pulumi.Input[str]] = None,
                 set_ip6_nexthop_local: Optional[pulumi.Input[str]] = None,
                 set_ip_nexthop: Optional[pulumi.Input[str]] = None,
                 set_ip_prefsrc: Optional[pulumi.Input[str]] = None,
                 set_local_preference: Optional[pulumi.Input[int]] = None,
                 set_metric: Optional[pulumi.Input[int]] = None,
                 set_metric_type: Optional[pulumi.Input[str]] = None,
                 set_origin: Optional[pulumi.Input[str]] = None,
                 set_originator_id: Optional[pulumi.Input[str]] = None,
                 set_priority: Optional[pulumi.Input[int]] = None,
                 set_route_tag: Optional[pulumi.Input[int]] = None,
                 set_tag: Optional[pulumi.Input[int]] = None,
                 set_weight: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_as_path is not None:
            pulumi.set(__self__, "match_as_path", match_as_path)
        if match_community is not None:
            pulumi.set(__self__, "match_community", match_community)
        if match_community_exact is not None:
            pulumi.set(__self__, "match_community_exact", match_community_exact)
        if match_extcommunity is not None:
            pulumi.set(__self__, "match_extcommunity", match_extcommunity)
        if match_extcommunity_exact is not None:
            pulumi.set(__self__, "match_extcommunity_exact", match_extcommunity_exact)
        if match_flags is not None:
            pulumi.set(__self__, "match_flags", match_flags)
        if match_interface is not None:
            pulumi.set(__self__, "match_interface", match_interface)
        if match_ip6_address is not None:
            pulumi.set(__self__, "match_ip6_address", match_ip6_address)
        if match_ip6_nexthop is not None:
            pulumi.set(__self__, "match_ip6_nexthop", match_ip6_nexthop)
        if match_ip_address is not None:
            pulumi.set(__self__, "match_ip_address", match_ip_address)
        if match_ip_nexthop is not None:
            pulumi.set(__self__, "match_ip_nexthop", match_ip_nexthop)
        if match_metric is not None:
            pulumi.set(__self__, "match_metric", match_metric)
        if match_origin is not None:
            pulumi.set(__self__, "match_origin", match_origin)
        if match_route_type is not None:
            pulumi.set(__self__, "match_route_type", match_route_type)
        if match_tag is not None:
            pulumi.set(__self__, "match_tag", match_tag)
        if match_vrf is not None:
            pulumi.set(__self__, "match_vrf", match_vrf)
        if set_aggregator_as is not None:
            pulumi.set(__self__, "set_aggregator_as", set_aggregator_as)
        if set_aggregator_ip is not None:
            pulumi.set(__self__, "set_aggregator_ip", set_aggregator_ip)
        if set_aspath_action is not None:
            pulumi.set(__self__, "set_aspath_action", set_aspath_action)
        if set_aspaths is not None:
            pulumi.set(__self__, "set_aspaths", set_aspaths)
        if set_atomic_aggregate is not None:
            pulumi.set(__self__, "set_atomic_aggregate", set_atomic_aggregate)
        if set_communities is not None:
            pulumi.set(__self__, "set_communities", set_communities)
        if set_community_additive is not None:
            pulumi.set(__self__, "set_community_additive", set_community_additive)
        if set_community_delete is not None:
            pulumi.set(__self__, "set_community_delete", set_community_delete)
        if set_dampening_max_suppress is not None:
            pulumi.set(__self__, "set_dampening_max_suppress", set_dampening_max_suppress)
        if set_dampening_reachability_half_life is not None:
            pulumi.set(__self__, "set_dampening_reachability_half_life", set_dampening_reachability_half_life)
        if set_dampening_reuse is not None:
            pulumi.set(__self__, "set_dampening_reuse", set_dampening_reuse)
        if set_dampening_suppress is not None:
            pulumi.set(__self__, "set_dampening_suppress", set_dampening_suppress)
        if set_dampening_unreachability_half_life is not None:
            pulumi.set(__self__, "set_dampening_unreachability_half_life", set_dampening_unreachability_half_life)
        if set_extcommunity_rts is not None:
            pulumi.set(__self__, "set_extcommunity_rts", set_extcommunity_rts)
        if set_extcommunity_soos is not None:
            pulumi.set(__self__, "set_extcommunity_soos", set_extcommunity_soos)
        if set_flags is not None:
            pulumi.set(__self__, "set_flags", set_flags)
        if set_ip6_nexthop is not None:
            pulumi.set(__self__, "set_ip6_nexthop", set_ip6_nexthop)
        if set_ip6_nexthop_local is not None:
            pulumi.set(__self__, "set_ip6_nexthop_local", set_ip6_nexthop_local)
        if set_ip_nexthop is not None:
            pulumi.set(__self__, "set_ip_nexthop", set_ip_nexthop)
        if set_ip_prefsrc is not None:
            pulumi.set(__self__, "set_ip_prefsrc", set_ip_prefsrc)
        if set_local_preference is not None:
            pulumi.set(__self__, "set_local_preference", set_local_preference)
        if set_metric is not None:
            pulumi.set(__self__, "set_metric", set_metric)
        if set_metric_type is not None:
            pulumi.set(__self__, "set_metric_type", set_metric_type)
        if set_origin is not None:
            pulumi.set(__self__, "set_origin", set_origin)
        if set_originator_id is not None:
            pulumi.set(__self__, "set_originator_id", set_originator_id)
        if set_priority is not None:
            pulumi.set(__self__, "set_priority", set_priority)
        if set_route_tag is not None:
            pulumi.set(__self__, "set_route_tag", set_route_tag)
        if set_tag is not None:
            pulumi.set(__self__, "set_tag", set_tag)
        if set_weight is not None:
            pulumi.set(__self__, "set_weight", set_weight)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="matchAsPath")
    def match_as_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_as_path")

    @match_as_path.setter
    def match_as_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_as_path", value)

    @property
    @pulumi.getter(name="matchCommunity")
    def match_community(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_community")

    @match_community.setter
    def match_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_community", value)

    @property
    @pulumi.getter(name="matchCommunityExact")
    def match_community_exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_community_exact")

    @match_community_exact.setter
    def match_community_exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_community_exact", value)

    @property
    @pulumi.getter(name="matchExtcommunity")
    def match_extcommunity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_extcommunity")

    @match_extcommunity.setter
    def match_extcommunity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_extcommunity", value)

    @property
    @pulumi.getter(name="matchExtcommunityExact")
    def match_extcommunity_exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_extcommunity_exact")

    @match_extcommunity_exact.setter
    def match_extcommunity_exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_extcommunity_exact", value)

    @property
    @pulumi.getter(name="matchFlags")
    def match_flags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "match_flags")

    @match_flags.setter
    def match_flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_flags", value)

    @property
    @pulumi.getter(name="matchInterface")
    def match_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_interface")

    @match_interface.setter
    def match_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_interface", value)

    @property
    @pulumi.getter(name="matchIp6Address")
    def match_ip6_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_ip6_address")

    @match_ip6_address.setter
    def match_ip6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ip6_address", value)

    @property
    @pulumi.getter(name="matchIp6Nexthop")
    def match_ip6_nexthop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_ip6_nexthop")

    @match_ip6_nexthop.setter
    def match_ip6_nexthop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ip6_nexthop", value)

    @property
    @pulumi.getter(name="matchIpAddress")
    def match_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_ip_address")

    @match_ip_address.setter
    def match_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ip_address", value)

    @property
    @pulumi.getter(name="matchIpNexthop")
    def match_ip_nexthop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_ip_nexthop")

    @match_ip_nexthop.setter
    def match_ip_nexthop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ip_nexthop", value)

    @property
    @pulumi.getter(name="matchMetric")
    def match_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "match_metric")

    @match_metric.setter
    def match_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_metric", value)

    @property
    @pulumi.getter(name="matchOrigin")
    def match_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_origin")

    @match_origin.setter
    def match_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_origin", value)

    @property
    @pulumi.getter(name="matchRouteType")
    def match_route_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_route_type")

    @match_route_type.setter
    def match_route_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_route_type", value)

    @property
    @pulumi.getter(name="matchTag")
    def match_tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "match_tag")

    @match_tag.setter
    def match_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_tag", value)

    @property
    @pulumi.getter(name="matchVrf")
    def match_vrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "match_vrf")

    @match_vrf.setter
    def match_vrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_vrf", value)

    @property
    @pulumi.getter(name="setAggregatorAs")
    def set_aggregator_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_aggregator_as")

    @set_aggregator_as.setter
    def set_aggregator_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_aggregator_as", value)

    @property
    @pulumi.getter(name="setAggregatorIp")
    def set_aggregator_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_aggregator_ip")

    @set_aggregator_ip.setter
    def set_aggregator_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_aggregator_ip", value)

    @property
    @pulumi.getter(name="setAspathAction")
    def set_aspath_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_aspath_action")

    @set_aspath_action.setter
    def set_aspath_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_aspath_action", value)

    @property
    @pulumi.getter(name="setAspaths")
    def set_aspaths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetAspathArgs']]]]:
        return pulumi.get(self, "set_aspaths")

    @set_aspaths.setter
    def set_aspaths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetAspathArgs']]]]):
        pulumi.set(self, "set_aspaths", value)

    @property
    @pulumi.getter(name="setAtomicAggregate")
    def set_atomic_aggregate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_atomic_aggregate")

    @set_atomic_aggregate.setter
    def set_atomic_aggregate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_atomic_aggregate", value)

    @property
    @pulumi.getter(name="setCommunities")
    def set_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetCommunityArgs']]]]:
        return pulumi.get(self, "set_communities")

    @set_communities.setter
    def set_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetCommunityArgs']]]]):
        pulumi.set(self, "set_communities", value)

    @property
    @pulumi.getter(name="setCommunityAdditive")
    def set_community_additive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_community_additive")

    @set_community_additive.setter
    def set_community_additive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_community_additive", value)

    @property
    @pulumi.getter(name="setCommunityDelete")
    def set_community_delete(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_community_delete")

    @set_community_delete.setter
    def set_community_delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_community_delete", value)

    @property
    @pulumi.getter(name="setDampeningMaxSuppress")
    def set_dampening_max_suppress(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_dampening_max_suppress")

    @set_dampening_max_suppress.setter
    def set_dampening_max_suppress(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_dampening_max_suppress", value)

    @property
    @pulumi.getter(name="setDampeningReachabilityHalfLife")
    def set_dampening_reachability_half_life(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_dampening_reachability_half_life")

    @set_dampening_reachability_half_life.setter
    def set_dampening_reachability_half_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_dampening_reachability_half_life", value)

    @property
    @pulumi.getter(name="setDampeningReuse")
    def set_dampening_reuse(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_dampening_reuse")

    @set_dampening_reuse.setter
    def set_dampening_reuse(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_dampening_reuse", value)

    @property
    @pulumi.getter(name="setDampeningSuppress")
    def set_dampening_suppress(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_dampening_suppress")

    @set_dampening_suppress.setter
    def set_dampening_suppress(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_dampening_suppress", value)

    @property
    @pulumi.getter(name="setDampeningUnreachabilityHalfLife")
    def set_dampening_unreachability_half_life(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_dampening_unreachability_half_life")

    @set_dampening_unreachability_half_life.setter
    def set_dampening_unreachability_half_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_dampening_unreachability_half_life", value)

    @property
    @pulumi.getter(name="setExtcommunityRts")
    def set_extcommunity_rts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunityRtArgs']]]]:
        return pulumi.get(self, "set_extcommunity_rts")

    @set_extcommunity_rts.setter
    def set_extcommunity_rts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunityRtArgs']]]]):
        pulumi.set(self, "set_extcommunity_rts", value)

    @property
    @pulumi.getter(name="setExtcommunitySoos")
    def set_extcommunity_soos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunitySooArgs']]]]:
        return pulumi.get(self, "set_extcommunity_soos")

    @set_extcommunity_soos.setter
    def set_extcommunity_soos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunitySooArgs']]]]):
        pulumi.set(self, "set_extcommunity_soos", value)

    @property
    @pulumi.getter(name="setFlags")
    def set_flags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_flags")

    @set_flags.setter
    def set_flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_flags", value)

    @property
    @pulumi.getter(name="setIp6Nexthop")
    def set_ip6_nexthop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_ip6_nexthop")

    @set_ip6_nexthop.setter
    def set_ip6_nexthop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_ip6_nexthop", value)

    @property
    @pulumi.getter(name="setIp6NexthopLocal")
    def set_ip6_nexthop_local(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_ip6_nexthop_local")

    @set_ip6_nexthop_local.setter
    def set_ip6_nexthop_local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_ip6_nexthop_local", value)

    @property
    @pulumi.getter(name="setIpNexthop")
    def set_ip_nexthop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_ip_nexthop")

    @set_ip_nexthop.setter
    def set_ip_nexthop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_ip_nexthop", value)

    @property
    @pulumi.getter(name="setIpPrefsrc")
    def set_ip_prefsrc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_ip_prefsrc")

    @set_ip_prefsrc.setter
    def set_ip_prefsrc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_ip_prefsrc", value)

    @property
    @pulumi.getter(name="setLocalPreference")
    def set_local_preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_local_preference")

    @set_local_preference.setter
    def set_local_preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_local_preference", value)

    @property
    @pulumi.getter(name="setMetric")
    def set_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_metric")

    @set_metric.setter
    def set_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_metric", value)

    @property
    @pulumi.getter(name="setMetricType")
    def set_metric_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_metric_type")

    @set_metric_type.setter
    def set_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_metric_type", value)

    @property
    @pulumi.getter(name="setOrigin")
    def set_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_origin")

    @set_origin.setter
    def set_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_origin", value)

    @property
    @pulumi.getter(name="setOriginatorId")
    def set_originator_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_originator_id")

    @set_originator_id.setter
    def set_originator_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_originator_id", value)

    @property
    @pulumi.getter(name="setPriority")
    def set_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_priority")

    @set_priority.setter
    def set_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_priority", value)

    @property
    @pulumi.getter(name="setRouteTag")
    def set_route_tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_route_tag")

    @set_route_tag.setter
    def set_route_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_route_tag", value)

    @property
    @pulumi.getter(name="setTag")
    def set_tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_tag")

    @set_tag.setter
    def set_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_tag", value)

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_weight")

    @set_weight.setter
    def set_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_weight", value)


@pulumi.input_type
class RouterRouteMapRuleSetAspathArgs:
    def __init__(__self__, *,
                 as_: Optional[pulumi.Input[str]] = None):
        if as_ is not None:
            pulumi.set(__self__, "as_", as_)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "as_")

    @as_.setter
    def as_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_", value)


@pulumi.input_type
class RouterRouteMapRuleSetCommunityArgs:
    def __init__(__self__, *,
                 community: Optional[pulumi.Input[str]] = None):
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community", value)


@pulumi.input_type
class RouterRouteMapRuleSetExtcommunityRtArgs:
    def __init__(__self__, *,
                 community: Optional[pulumi.Input[str]] = None):
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community", value)


@pulumi.input_type
class RouterRouteMapRuleSetExtcommunitySooArgs:
    def __init__(__self__, *,
                 community: Optional[pulumi.Input[str]] = None):
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community", value)


@pulumi.input_type
class RouterStatic6SdwanZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterStaticSdwanZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterbgpNeighborConditionalAdvertise6Args:
    def __init__(__self__, *,
                 advertise_routemap: Optional[pulumi.Input[str]] = None,
                 condition_routemap: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[str]] = None):
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertise_routemap")

    @advertise_routemap.setter
    def advertise_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise_routemap", value)

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition_routemap")

    @condition_routemap.setter
    def condition_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_routemap", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_type", value)


@pulumi.input_type
class RouterbgpNeighborConditionalAdvertiseArgs:
    def __init__(__self__, *,
                 advertise_routemap: Optional[pulumi.Input[str]] = None,
                 condition_routemap: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[str]] = None):
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertise_routemap")

    @advertise_routemap.setter
    def advertise_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise_routemap", value)

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition_routemap")

    @condition_routemap.setter
    def condition_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_routemap", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_type", value)


@pulumi.input_type
class Routerospf6Ospf6InterfaceIpsecKeyArgs:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 spi: Optional[pulumi.Input[int]] = None):
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter
    def spi(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spi")

    @spi.setter
    def spi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spi", value)


@pulumi.input_type
class Routerospf6Ospf6InterfaceNeighborArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[int]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 poll_interval: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "poll_interval")

    @poll_interval.setter
    def poll_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poll_interval", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class RouterospfOspfInterfaceMd5KeyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key_string: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_string", value)


@pulumi.input_type
class SctpFilterProfilePpidFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ppid: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ppid is not None:
            pulumi.set(__self__, "ppid", ppid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ppid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ppid")

    @ppid.setter
    def ppid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ppid", value)


@pulumi.input_type
class SpamfilterBwlEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 email_pattern: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_pattern")

    @email_pattern.setter
    def email_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_pattern", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SpamfilterBwordEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 where: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if where is not None:
            pulumi.set(__self__, "where", where)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def where(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "where")

    @where.setter
    def where(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "where", value)


@pulumi.input_type
class SpamfilterDnsblEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SpamfilterIptrustEntryArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SpamfilterMheaderEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 fieldbody: Optional[pulumi.Input[str]] = None,
                 fieldname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fieldbody is not None:
            pulumi.set(__self__, "fieldbody", fieldbody)
        if fieldname is not None:
            pulumi.set(__self__, "fieldname", fieldname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def fieldbody(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fieldbody")

    @fieldbody.setter
    def fieldbody(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fieldbody", value)

    @property
    @pulumi.getter
    def fieldname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fieldname")

    @fieldname.setter
    def fieldname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fieldname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SpamfilterProfileGmailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class SpamfilterProfileImapArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class SpamfilterProfileMapiArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class SpamfilterProfileMsnHotmailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class SpamfilterProfilePop3Args:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class SpamfilterProfileSmtpArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 hdrip: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if hdrip is not None:
            pulumi.set(__self__, "hdrip", hdrip)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def hdrip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hdrip")

    @hdrip.setter
    def hdrip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hdrip", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class SpamfilterProfileYahooMailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None):
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class SshFilterProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 scan_archive_contents: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryArgs']]]]:
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_archive_contents")

    @scan_archive_contents.setter
    def scan_archive_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_archive_contents", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SshFilterProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 password_protected: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryFileTypeArgs']]]]:
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_protected")

    @password_protected.setter
    def password_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_protected", value)


@pulumi.input_type
class SshFilterProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SshFilterProfileShellCommandArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 alert: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SwitchControllerAclGroupIngressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SwitchControllerAclIngressActionArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[str]] = None,
                 drop: Optional[pulumi.Input[str]] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop", value)


@pulumi.input_type
class SwitchControllerAclIngressClassifierArgs:
    def __init__(__self__, *,
                 dst_ip_prefix: Optional[pulumi.Input[str]] = None,
                 dst_mac: Optional[pulumi.Input[str]] = None,
                 src_ip_prefix: Optional[pulumi.Input[str]] = None,
                 src_mac: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        if dst_ip_prefix is not None:
            pulumi.set(__self__, "dst_ip_prefix", dst_ip_prefix)
        if dst_mac is not None:
            pulumi.set(__self__, "dst_mac", dst_mac)
        if src_ip_prefix is not None:
            pulumi.set(__self__, "src_ip_prefix", src_ip_prefix)
        if src_mac is not None:
            pulumi.set(__self__, "src_mac", src_mac)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="dstIpPrefix")
    def dst_ip_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_ip_prefix")

    @dst_ip_prefix.setter
    def dst_ip_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip_prefix", value)

    @property
    @pulumi.getter(name="dstMac")
    def dst_mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_mac")

    @dst_mac.setter
    def dst_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_mac", value)

    @property
    @pulumi.getter(name="srcIpPrefix")
    def src_ip_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_ip_prefix")

    @src_ip_prefix.setter
    def src_ip_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip_prefix", value)

    @property
    @pulumi.getter(name="srcMac")
    def src_mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_mac")

    @src_mac.setter
    def src_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_mac", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SwitchControllerAutoConfigCustomSwitchBindingArgs:
    def __init__(__self__, *,
                 policy: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None):
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)


@pulumi.input_type
class SwitchControllerDynamicPortPolicyPolicyArgs:
    def __init__(__self__, *,
                 bounce_port_link: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 interface_tags: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs']]]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 n8021x: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vlan_policy: Optional[pulumi.Input[str]] = None):
        if bounce_port_link is not None:
            pulumi.set(__self__, "bounce_port_link", bounce_port_link)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hw_vendor is not None:
            pulumi.set(__self__, "hw_vendor", hw_vendor)
        if interface_tags is not None:
            pulumi.set(__self__, "interface_tags", interface_tags)
        if lldp_profile is not None:
            pulumi.set(__self__, "lldp_profile", lldp_profile)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if n8021x is not None:
            pulumi.set(__self__, "n8021x", n8021x)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_policy is not None:
            pulumi.set(__self__, "vlan_policy", vlan_policy)

    @property
    @pulumi.getter(name="bouncePortLink")
    def bounce_port_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bounce_port_link")

    @bounce_port_link.setter
    def bounce_port_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_port_link", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hw_vendor")

    @hw_vendor.setter
    def hw_vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_vendor", value)

    @property
    @pulumi.getter(name="interfaceTags")
    def interface_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs']]]]:
        return pulumi.get(self, "interface_tags")

    @interface_tags.setter
    def interface_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs']]]]):
        pulumi.set(self, "interface_tags", value)

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp_profile")

    @lldp_profile.setter
    def lldp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_profile", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def n8021x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "n8021x")

    @n8021x.setter
    def n8021x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n8021x", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_policy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vlanPolicy")
    def vlan_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_policy")

    @vlan_policy.setter
    def vlan_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_policy", value)


@pulumi.input_type
class SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs:
    def __init__(__self__, *,
                 tag_name: Optional[pulumi.Input[str]] = None):
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)


@pulumi.input_type
class SwitchControllerFlowTrackingAggregateArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SwitchControllerFlowTrackingCollectorArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 transport: Optional[pulumi.Input[str]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport", value)


@pulumi.input_type
class SwitchControllerFortilinkSettingsNacPortsArgs:
    def __init__(__self__, *,
                 bounce_nac_port: Optional[pulumi.Input[str]] = None,
                 lan_segment: Optional[pulumi.Input[str]] = None,
                 member_change: Optional[pulumi.Input[int]] = None,
                 nac_lan_interface: Optional[pulumi.Input[str]] = None,
                 nac_segment_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs']]]] = None,
                 onboarding_vlan: Optional[pulumi.Input[str]] = None,
                 parent_key: Optional[pulumi.Input[str]] = None):
        if bounce_nac_port is not None:
            pulumi.set(__self__, "bounce_nac_port", bounce_nac_port)
        if lan_segment is not None:
            pulumi.set(__self__, "lan_segment", lan_segment)
        if member_change is not None:
            pulumi.set(__self__, "member_change", member_change)
        if nac_lan_interface is not None:
            pulumi.set(__self__, "nac_lan_interface", nac_lan_interface)
        if nac_segment_vlans is not None:
            pulumi.set(__self__, "nac_segment_vlans", nac_segment_vlans)
        if onboarding_vlan is not None:
            pulumi.set(__self__, "onboarding_vlan", onboarding_vlan)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)

    @property
    @pulumi.getter(name="bounceNacPort")
    def bounce_nac_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bounce_nac_port")

    @bounce_nac_port.setter
    def bounce_nac_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_nac_port", value)

    @property
    @pulumi.getter(name="lanSegment")
    def lan_segment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lan_segment")

    @lan_segment.setter
    def lan_segment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_segment", value)

    @property
    @pulumi.getter(name="memberChange")
    def member_change(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "member_change")

    @member_change.setter
    def member_change(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member_change", value)

    @property
    @pulumi.getter(name="nacLanInterface")
    def nac_lan_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nac_lan_interface")

    @nac_lan_interface.setter
    def nac_lan_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nac_lan_interface", value)

    @property
    @pulumi.getter(name="nacSegmentVlans")
    def nac_segment_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs']]]]:
        return pulumi.get(self, "nac_segment_vlans")

    @nac_segment_vlans.setter
    def nac_segment_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs']]]]):
        pulumi.set(self, "nac_segment_vlans", value)

    @property
    @pulumi.getter(name="onboardingVlan")
    def onboarding_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "onboarding_vlan")

    @onboarding_vlan.setter
    def onboarding_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onboarding_vlan", value)

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_key")

    @parent_key.setter
    def parent_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_key", value)


@pulumi.input_type
class SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerGlobalCustomCommandArgs:
    def __init__(__self__, *,
                 command_entry: Optional[pulumi.Input[str]] = None,
                 command_name: Optional[pulumi.Input[str]] = None):
        if command_entry is not None:
            pulumi.set(__self__, "command_entry", command_entry)
        if command_name is not None:
            pulumi.set(__self__, "command_name", command_name)

    @property
    @pulumi.getter(name="commandEntry")
    def command_entry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command_entry")

    @command_entry.setter
    def command_entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_entry", value)

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command_name")

    @command_name.setter
    def command_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_name", value)


@pulumi.input_type
class SwitchControllerGlobalDisableDiscoveryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerLldpProfileCustomTlvArgs:
    def __init__(__self__, *,
                 information_string: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oui: Optional[pulumi.Input[str]] = None,
                 subtype: Optional[pulumi.Input[int]] = None):
        if information_string is not None:
            pulumi.set(__self__, "information_string", information_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oui is not None:
            pulumi.set(__self__, "oui", oui)
        if subtype is not None:
            pulumi.set(__self__, "subtype", subtype)

    @property
    @pulumi.getter(name="informationString")
    def information_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "information_string")

    @information_string.setter
    def information_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "information_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def oui(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oui")

    @oui.setter
    def oui(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oui", value)

    @property
    @pulumi.getter
    def subtype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "subtype")

    @subtype.setter
    def subtype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subtype", value)


@pulumi.input_type
class SwitchControllerLldpProfileMedLocationServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sys_location_id: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sys_location_id is not None:
            pulumi.set(__self__, "sys_location_id", sys_location_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="sysLocationId")
    def sys_location_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sys_location_id")

    @sys_location_id.setter
    def sys_location_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sys_location_id", value)


@pulumi.input_type
class SwitchControllerLldpProfileMedNetworkPolicyArgs:
    def __init__(__self__, *,
                 assign_vlan: Optional[pulumi.Input[str]] = None,
                 dscp: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vlan_intf: Optional[pulumi.Input[str]] = None):
        if assign_vlan is not None:
            pulumi.set(__self__, "assign_vlan", assign_vlan)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_intf is not None:
            pulumi.set(__self__, "vlan_intf", vlan_intf)

    @property
    @pulumi.getter(name="assignVlan")
    def assign_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assign_vlan")

    @assign_vlan.setter
    def assign_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_vlan", value)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="vlanIntf")
    def vlan_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_intf")

    @vlan_intf.setter
    def vlan_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_intf", value)


@pulumi.input_type
class SwitchControllerLocationAddressCivicArgs:
    def __init__(__self__, *,
                 additional: Optional[pulumi.Input[str]] = None,
                 additional_code: Optional[pulumi.Input[str]] = None,
                 block: Optional[pulumi.Input[str]] = None,
                 branch_road: Optional[pulumi.Input[str]] = None,
                 building: Optional[pulumi.Input[str]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 city_division: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 country_subdivision: Optional[pulumi.Input[str]] = None,
                 county: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 floor: Optional[pulumi.Input[str]] = None,
                 landmark: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number: Optional[pulumi.Input[str]] = None,
                 number_suffix: Optional[pulumi.Input[str]] = None,
                 parent_key: Optional[pulumi.Input[str]] = None,
                 place_type: Optional[pulumi.Input[str]] = None,
                 post_office_box: Optional[pulumi.Input[str]] = None,
                 postal_community: Optional[pulumi.Input[str]] = None,
                 primary_road: Optional[pulumi.Input[str]] = None,
                 road_section: Optional[pulumi.Input[str]] = None,
                 room: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 seat: Optional[pulumi.Input[str]] = None,
                 street: Optional[pulumi.Input[str]] = None,
                 street_name_post_mod: Optional[pulumi.Input[str]] = None,
                 street_name_pre_mod: Optional[pulumi.Input[str]] = None,
                 street_suffix: Optional[pulumi.Input[str]] = None,
                 sub_branch_road: Optional[pulumi.Input[str]] = None,
                 trailing_str_suffix: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 zip: Optional[pulumi.Input[str]] = None):
        if additional is not None:
            pulumi.set(__self__, "additional", additional)
        if additional_code is not None:
            pulumi.set(__self__, "additional_code", additional_code)
        if block is not None:
            pulumi.set(__self__, "block", block)
        if branch_road is not None:
            pulumi.set(__self__, "branch_road", branch_road)
        if building is not None:
            pulumi.set(__self__, "building", building)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if city_division is not None:
            pulumi.set(__self__, "city_division", city_division)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if country_subdivision is not None:
            pulumi.set(__self__, "country_subdivision", country_subdivision)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if floor is not None:
            pulumi.set(__self__, "floor", floor)
        if landmark is not None:
            pulumi.set(__self__, "landmark", landmark)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if number_suffix is not None:
            pulumi.set(__self__, "number_suffix", number_suffix)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)
        if place_type is not None:
            pulumi.set(__self__, "place_type", place_type)
        if post_office_box is not None:
            pulumi.set(__self__, "post_office_box", post_office_box)
        if postal_community is not None:
            pulumi.set(__self__, "postal_community", postal_community)
        if primary_road is not None:
            pulumi.set(__self__, "primary_road", primary_road)
        if road_section is not None:
            pulumi.set(__self__, "road_section", road_section)
        if room is not None:
            pulumi.set(__self__, "room", room)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if seat is not None:
            pulumi.set(__self__, "seat", seat)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if street_name_post_mod is not None:
            pulumi.set(__self__, "street_name_post_mod", street_name_post_mod)
        if street_name_pre_mod is not None:
            pulumi.set(__self__, "street_name_pre_mod", street_name_pre_mod)
        if street_suffix is not None:
            pulumi.set(__self__, "street_suffix", street_suffix)
        if sub_branch_road is not None:
            pulumi.set(__self__, "sub_branch_road", sub_branch_road)
        if trailing_str_suffix is not None:
            pulumi.set(__self__, "trailing_str_suffix", trailing_str_suffix)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if zip is not None:
            pulumi.set(__self__, "zip", zip)

    @property
    @pulumi.getter
    def additional(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional")

    @additional.setter
    def additional(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional", value)

    @property
    @pulumi.getter(name="additionalCode")
    def additional_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_code")

    @additional_code.setter
    def additional_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_code", value)

    @property
    @pulumi.getter
    def block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block")

    @block.setter
    def block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block", value)

    @property
    @pulumi.getter(name="branchRoad")
    def branch_road(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branch_road")

    @branch_road.setter
    def branch_road(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_road", value)

    @property
    @pulumi.getter
    def building(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "building")

    @building.setter
    def building(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "building", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="cityDivision")
    def city_division(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "city_division")

    @city_division.setter
    def city_division(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city_division", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="countrySubdivision")
    def country_subdivision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country_subdivision")

    @country_subdivision.setter
    def country_subdivision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country_subdivision", value)

    @property
    @pulumi.getter
    def county(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "county")

    @county.setter
    def county(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "county", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def floor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "floor")

    @floor.setter
    def floor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floor", value)

    @property
    @pulumi.getter
    def landmark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "landmark")

    @landmark.setter
    def landmark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "landmark", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter(name="numberSuffix")
    def number_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "number_suffix")

    @number_suffix.setter
    def number_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "number_suffix", value)

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_key")

    @parent_key.setter
    def parent_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_key", value)

    @property
    @pulumi.getter(name="placeType")
    def place_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_type")

    @place_type.setter
    def place_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_type", value)

    @property
    @pulumi.getter(name="postOfficeBox")
    def post_office_box(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_office_box")

    @post_office_box.setter
    def post_office_box(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_office_box", value)

    @property
    @pulumi.getter(name="postalCommunity")
    def postal_community(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "postal_community")

    @postal_community.setter
    def postal_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_community", value)

    @property
    @pulumi.getter(name="primaryRoad")
    def primary_road(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_road")

    @primary_road.setter
    def primary_road(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_road", value)

    @property
    @pulumi.getter(name="roadSection")
    def road_section(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "road_section")

    @road_section.setter
    def road_section(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "road_section", value)

    @property
    @pulumi.getter
    def room(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "room")

    @room.setter
    def room(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "room", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter
    def seat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "seat")

    @seat.setter
    def seat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seat", value)

    @property
    @pulumi.getter
    def street(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "street")

    @street.setter
    def street(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street", value)

    @property
    @pulumi.getter(name="streetNamePostMod")
    def street_name_post_mod(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "street_name_post_mod")

    @street_name_post_mod.setter
    def street_name_post_mod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_name_post_mod", value)

    @property
    @pulumi.getter(name="streetNamePreMod")
    def street_name_pre_mod(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "street_name_pre_mod")

    @street_name_pre_mod.setter
    def street_name_pre_mod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_name_pre_mod", value)

    @property
    @pulumi.getter(name="streetSuffix")
    def street_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "street_suffix")

    @street_suffix.setter
    def street_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_suffix", value)

    @property
    @pulumi.getter(name="subBranchRoad")
    def sub_branch_road(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_branch_road")

    @sub_branch_road.setter
    def sub_branch_road(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_branch_road", value)

    @property
    @pulumi.getter(name="trailingStrSuffix")
    def trailing_str_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trailing_str_suffix")

    @trailing_str_suffix.setter
    def trailing_str_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trailing_str_suffix", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def zip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zip")

    @zip.setter
    def zip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zip", value)


@pulumi.input_type
class SwitchControllerLocationCoordinatesArgs:
    def __init__(__self__, *,
                 altitude: Optional[pulumi.Input[str]] = None,
                 altitude_unit: Optional[pulumi.Input[str]] = None,
                 datum: Optional[pulumi.Input[str]] = None,
                 latitude: Optional[pulumi.Input[str]] = None,
                 longitude: Optional[pulumi.Input[str]] = None,
                 parent_key: Optional[pulumi.Input[str]] = None):
        if altitude is not None:
            pulumi.set(__self__, "altitude", altitude)
        if altitude_unit is not None:
            pulumi.set(__self__, "altitude_unit", altitude_unit)
        if datum is not None:
            pulumi.set(__self__, "datum", datum)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)

    @property
    @pulumi.getter
    def altitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "altitude")

    @altitude.setter
    def altitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "altitude", value)

    @property
    @pulumi.getter(name="altitudeUnit")
    def altitude_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "altitude_unit")

    @altitude_unit.setter
    def altitude_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "altitude_unit", value)

    @property
    @pulumi.getter
    def datum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datum")

    @datum.setter
    def datum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datum", value)

    @property
    @pulumi.getter
    def latitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_key")

    @parent_key.setter
    def parent_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_key", value)


@pulumi.input_type
class SwitchControllerLocationElinNumberArgs:
    def __init__(__self__, *,
                 elin_num: Optional[pulumi.Input[str]] = None,
                 parent_key: Optional[pulumi.Input[str]] = None):
        if elin_num is not None:
            pulumi.set(__self__, "elin_num", elin_num)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)

    @property
    @pulumi.getter(name="elinNum")
    def elin_num(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elin_num")

    @elin_num.setter
    def elin_num(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elin_num", value)

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_key")

    @parent_key.setter
    def parent_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_key", value)


@pulumi.input_type
class SwitchControllerManagedSwitchCustomCommandArgs:
    def __init__(__self__, *,
                 command_entry: Optional[pulumi.Input[str]] = None,
                 command_name: Optional[pulumi.Input[str]] = None):
        if command_entry is not None:
            pulumi.set(__self__, "command_entry", command_entry)
        if command_name is not None:
            pulumi.set(__self__, "command_name", command_name)

    @property
    @pulumi.getter(name="commandEntry")
    def command_entry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command_entry")

    @command_entry.setter
    def command_entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_entry", value)

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command_name")

    @command_name.setter
    def command_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchDhcpSnoopingStaticClientArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SwitchControllerManagedSwitchIgmpSnoopingArgs:
    def __init__(__self__, *,
                 aging_time: Optional[pulumi.Input[int]] = None,
                 flood_unknown_multicast: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingVlanArgs']]]] = None):
        if aging_time is not None:
            pulumi.set(__self__, "aging_time", aging_time)
        if flood_unknown_multicast is not None:
            pulumi.set(__self__, "flood_unknown_multicast", flood_unknown_multicast)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="agingTime")
    def aging_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "aging_time")

    @aging_time.setter
    def aging_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aging_time", value)

    @property
    @pulumi.getter(name="floodUnknownMulticast")
    def flood_unknown_multicast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flood_unknown_multicast")

    @flood_unknown_multicast.setter
    def flood_unknown_multicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flood_unknown_multicast", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingVlanArgs']]]]:
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingVlanArgs']]]]):
        pulumi.set(self, "vlans", value)


@pulumi.input_type
class SwitchControllerManagedSwitchIgmpSnoopingVlanArgs:
    def __init__(__self__, *,
                 proxy: Optional[pulumi.Input[str]] = None,
                 querier: Optional[pulumi.Input[str]] = None,
                 querier_addr: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if querier is not None:
            pulumi.set(__self__, "querier", querier)
        if querier_addr is not None:
            pulumi.set(__self__, "querier_addr", querier_addr)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def querier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "querier")

    @querier.setter
    def querier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "querier", value)

    @property
    @pulumi.getter(name="querierAddr")
    def querier_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "querier_addr")

    @querier_addr.setter
    def querier_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "querier_addr", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchIpSourceGuardArgs:
    def __init__(__self__, *,
                 binding_entries: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None):
        if binding_entries is not None:
            pulumi.set(__self__, "binding_entries", binding_entries)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="bindingEntries")
    def binding_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs']]]]:
        return pulumi.get(self, "binding_entries")

    @binding_entries.setter
    def binding_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs']]]]):
        pulumi.set(self, "binding_entries", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs:
    def __init__(__self__, *,
                 entry_name: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None):
        if entry_name is not None:
            pulumi.set(__self__, "entry_name", entry_name)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entry_name")

    @entry_name.setter
    def entry_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entry_name", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)


@pulumi.input_type
class SwitchControllerManagedSwitchMirrorArgs:
    def __init__(__self__, *,
                 dst: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 src_egresses: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcEgressArgs']]]] = None,
                 src_ingresses: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcIngressArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 switching_packet: Optional[pulumi.Input[str]] = None):
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if src_egresses is not None:
            pulumi.set(__self__, "src_egresses", src_egresses)
        if src_ingresses is not None:
            pulumi.set(__self__, "src_ingresses", src_ingresses)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if switching_packet is not None:
            pulumi.set(__self__, "switching_packet", switching_packet)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="srcEgresses")
    def src_egresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcEgressArgs']]]]:
        return pulumi.get(self, "src_egresses")

    @src_egresses.setter
    def src_egresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcEgressArgs']]]]):
        pulumi.set(self, "src_egresses", value)

    @property
    @pulumi.getter(name="srcIngresses")
    def src_ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcIngressArgs']]]]:
        return pulumi.get(self, "src_ingresses")

    @src_ingresses.setter
    def src_ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcIngressArgs']]]]):
        pulumi.set(self, "src_ingresses", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="switchingPacket")
    def switching_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switching_packet")

    @switching_packet.setter
    def switching_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switching_packet", value)


@pulumi.input_type
class SwitchControllerManagedSwitchMirrorSrcEgressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchMirrorSrcIngressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchN8021xSettingsArgs:
    def __init__(__self__, *,
                 link_down_auth: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 mab_reauth: Optional[pulumi.Input[str]] = None,
                 max_reauth_attempt: Optional[pulumi.Input[int]] = None,
                 reauth_period: Optional[pulumi.Input[int]] = None,
                 tx_period: Optional[pulumi.Input[int]] = None):
        if link_down_auth is not None:
            pulumi.set(__self__, "link_down_auth", link_down_auth)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if mab_reauth is not None:
            pulumi.set(__self__, "mab_reauth", mab_reauth)
        if max_reauth_attempt is not None:
            pulumi.set(__self__, "max_reauth_attempt", max_reauth_attempt)
        if reauth_period is not None:
            pulumi.set(__self__, "reauth_period", reauth_period)
        if tx_period is not None:
            pulumi.set(__self__, "tx_period", tx_period)

    @property
    @pulumi.getter(name="linkDownAuth")
    def link_down_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_down_auth")

    @link_down_auth.setter
    def link_down_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_auth", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter(name="mabReauth")
    def mab_reauth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mab_reauth")

    @mab_reauth.setter
    def mab_reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mab_reauth", value)

    @property
    @pulumi.getter(name="maxReauthAttempt")
    def max_reauth_attempt(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_reauth_attempt")

    @max_reauth_attempt.setter
    def max_reauth_attempt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_reauth_attempt", value)

    @property
    @pulumi.getter(name="reauthPeriod")
    def reauth_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reauth_period")

    @reauth_period.setter
    def reauth_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reauth_period", value)

    @property
    @pulumi.getter(name="txPeriod")
    def tx_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tx_period")

    @tx_period.setter
    def tx_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tx_period", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortArgs:
    def __init__(__self__, *,
                 access_mode: Optional[pulumi.Input[str]] = None,
                 acl_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortAclGroupArgs']]]] = None,
                 aggregator_mode: Optional[pulumi.Input[str]] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortAllowedVlanArgs']]]] = None,
                 allowed_vlans_all: Optional[pulumi.Input[str]] = None,
                 arp_inspection_trust: Optional[pulumi.Input[str]] = None,
                 bundle: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_option82_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortDhcpSnoopOption82OverrideArgs']]]] = None,
                 dhcp_snoop_option82_trust: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping: Optional[pulumi.Input[str]] = None,
                 discard_mode: Optional[pulumi.Input[str]] = None,
                 edge_port: Optional[pulumi.Input[str]] = None,
                 export_tags: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortExportTagArgs']]]] = None,
                 export_to: Optional[pulumi.Input[str]] = None,
                 export_to_pool: Optional[pulumi.Input[str]] = None,
                 export_to_pool_flag: Optional[pulumi.Input[int]] = None,
                 fec_capable: Optional[pulumi.Input[int]] = None,
                 fec_state: Optional[pulumi.Input[str]] = None,
                 fgt_peer_device_name: Optional[pulumi.Input[str]] = None,
                 fgt_peer_port_name: Optional[pulumi.Input[str]] = None,
                 fiber_port: Optional[pulumi.Input[int]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 flap_duration: Optional[pulumi.Input[int]] = None,
                 flap_rate: Optional[pulumi.Input[int]] = None,
                 flap_timeout: Optional[pulumi.Input[int]] = None,
                 flapguard: Optional[pulumi.Input[str]] = None,
                 flow_control: Optional[pulumi.Input[str]] = None,
                 fortilink_port: Optional[pulumi.Input[int]] = None,
                 fortiswitch_acls: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortFortiswitchAclArgs']]]] = None,
                 igmp_snooping: Optional[pulumi.Input[str]] = None,
                 igmp_snooping_flood_reports: Optional[pulumi.Input[str]] = None,
                 igmps_flood_reports: Optional[pulumi.Input[str]] = None,
                 igmps_flood_traffic: Optional[pulumi.Input[str]] = None,
                 interface_tags: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortInterfaceTagArgs']]]] = None,
                 ip_source_guard: Optional[pulumi.Input[str]] = None,
                 isl_local_trunk_name: Optional[pulumi.Input[str]] = None,
                 isl_peer_device_name: Optional[pulumi.Input[str]] = None,
                 isl_peer_device_sn: Optional[pulumi.Input[str]] = None,
                 isl_peer_port_name: Optional[pulumi.Input[str]] = None,
                 lacp_speed: Optional[pulumi.Input[str]] = None,
                 learning_limit: Optional[pulumi.Input[int]] = None,
                 link_status: Optional[pulumi.Input[str]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 lldp_status: Optional[pulumi.Input[str]] = None,
                 loop_guard: Optional[pulumi.Input[str]] = None,
                 loop_guard_timeout: Optional[pulumi.Input[int]] = None,
                 mac_addr: Optional[pulumi.Input[str]] = None,
                 matched_dpp_intf_tags: Optional[pulumi.Input[str]] = None,
                 matched_dpp_policy: Optional[pulumi.Input[str]] = None,
                 max_bundle: Optional[pulumi.Input[int]] = None,
                 mcast_snooping_flood_traffic: Optional[pulumi.Input[str]] = None,
                 mclag: Optional[pulumi.Input[str]] = None,
                 mclag_icl_port: Optional[pulumi.Input[int]] = None,
                 media_type: Optional[pulumi.Input[str]] = None,
                 member_withdrawal_behavior: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortMemberArgs']]]] = None,
                 min_bundle: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 p2p_port: Optional[pulumi.Input[int]] = None,
                 packet_sample_rate: Optional[pulumi.Input[int]] = None,
                 packet_sampler: Optional[pulumi.Input[str]] = None,
                 pause_meter: Optional[pulumi.Input[int]] = None,
                 pause_meter_resume: Optional[pulumi.Input[str]] = None,
                 poe_capable: Optional[pulumi.Input[int]] = None,
                 poe_max_power: Optional[pulumi.Input[str]] = None,
                 poe_mode_bt_cabable: Optional[pulumi.Input[int]] = None,
                 poe_port_mode: Optional[pulumi.Input[str]] = None,
                 poe_port_power: Optional[pulumi.Input[str]] = None,
                 poe_port_priority: Optional[pulumi.Input[str]] = None,
                 poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
                 poe_standard: Optional[pulumi.Input[str]] = None,
                 poe_status: Optional[pulumi.Input[str]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_number: Optional[pulumi.Input[int]] = None,
                 port_owner: Optional[pulumi.Input[str]] = None,
                 port_policy: Optional[pulumi.Input[str]] = None,
                 port_prefix_type: Optional[pulumi.Input[int]] = None,
                 port_security_policy: Optional[pulumi.Input[str]] = None,
                 port_selection_criteria: Optional[pulumi.Input[str]] = None,
                 ptp_policy: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 rpvst_port: Optional[pulumi.Input[str]] = None,
                 sample_direction: Optional[pulumi.Input[str]] = None,
                 sflow_counter_interval: Optional[pulumi.Input[int]] = None,
                 sflow_sample_rate: Optional[pulumi.Input[int]] = None,
                 sflow_sampler: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 speed_mask: Optional[pulumi.Input[int]] = None,
                 stacking_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sticky_mac: Optional[pulumi.Input[str]] = None,
                 storm_control_policy: Optional[pulumi.Input[str]] = None,
                 stp_bpdu_guard: Optional[pulumi.Input[str]] = None,
                 stp_bpdu_guard_timeout: Optional[pulumi.Input[int]] = None,
                 stp_root_guard: Optional[pulumi.Input[str]] = None,
                 stp_state: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 untagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortUntaggedVlanArgs']]]] = None,
                 virtual_port: Optional[pulumi.Input[int]] = None,
                 vlan: Optional[pulumi.Input[str]] = None):
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if acl_groups is not None:
            pulumi.set(__self__, "acl_groups", acl_groups)
        if aggregator_mode is not None:
            pulumi.set(__self__, "aggregator_mode", aggregator_mode)
        if allowed_vlans is not None:
            pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if allowed_vlans_all is not None:
            pulumi.set(__self__, "allowed_vlans_all", allowed_vlans_all)
        if arp_inspection_trust is not None:
            pulumi.set(__self__, "arp_inspection_trust", arp_inspection_trust)
        if bundle is not None:
            pulumi.set(__self__, "bundle", bundle)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_snoop_option82_overrides is not None:
            pulumi.set(__self__, "dhcp_snoop_option82_overrides", dhcp_snoop_option82_overrides)
        if dhcp_snoop_option82_trust is not None:
            pulumi.set(__self__, "dhcp_snoop_option82_trust", dhcp_snoop_option82_trust)
        if dhcp_snooping is not None:
            pulumi.set(__self__, "dhcp_snooping", dhcp_snooping)
        if discard_mode is not None:
            pulumi.set(__self__, "discard_mode", discard_mode)
        if edge_port is not None:
            pulumi.set(__self__, "edge_port", edge_port)
        if export_tags is not None:
            pulumi.set(__self__, "export_tags", export_tags)
        if export_to is not None:
            pulumi.set(__self__, "export_to", export_to)
        if export_to_pool is not None:
            pulumi.set(__self__, "export_to_pool", export_to_pool)
        if export_to_pool_flag is not None:
            pulumi.set(__self__, "export_to_pool_flag", export_to_pool_flag)
        if fec_capable is not None:
            pulumi.set(__self__, "fec_capable", fec_capable)
        if fec_state is not None:
            pulumi.set(__self__, "fec_state", fec_state)
        if fgt_peer_device_name is not None:
            pulumi.set(__self__, "fgt_peer_device_name", fgt_peer_device_name)
        if fgt_peer_port_name is not None:
            pulumi.set(__self__, "fgt_peer_port_name", fgt_peer_port_name)
        if fiber_port is not None:
            pulumi.set(__self__, "fiber_port", fiber_port)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if flap_duration is not None:
            pulumi.set(__self__, "flap_duration", flap_duration)
        if flap_rate is not None:
            pulumi.set(__self__, "flap_rate", flap_rate)
        if flap_timeout is not None:
            pulumi.set(__self__, "flap_timeout", flap_timeout)
        if flapguard is not None:
            pulumi.set(__self__, "flapguard", flapguard)
        if flow_control is not None:
            pulumi.set(__self__, "flow_control", flow_control)
        if fortilink_port is not None:
            pulumi.set(__self__, "fortilink_port", fortilink_port)
        if fortiswitch_acls is not None:
            pulumi.set(__self__, "fortiswitch_acls", fortiswitch_acls)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if igmp_snooping_flood_reports is not None:
            pulumi.set(__self__, "igmp_snooping_flood_reports", igmp_snooping_flood_reports)
        if igmps_flood_reports is not None:
            pulumi.set(__self__, "igmps_flood_reports", igmps_flood_reports)
        if igmps_flood_traffic is not None:
            pulumi.set(__self__, "igmps_flood_traffic", igmps_flood_traffic)
        if interface_tags is not None:
            pulumi.set(__self__, "interface_tags", interface_tags)
        if ip_source_guard is not None:
            pulumi.set(__self__, "ip_source_guard", ip_source_guard)
        if isl_local_trunk_name is not None:
            pulumi.set(__self__, "isl_local_trunk_name", isl_local_trunk_name)
        if isl_peer_device_name is not None:
            pulumi.set(__self__, "isl_peer_device_name", isl_peer_device_name)
        if isl_peer_device_sn is not None:
            pulumi.set(__self__, "isl_peer_device_sn", isl_peer_device_sn)
        if isl_peer_port_name is not None:
            pulumi.set(__self__, "isl_peer_port_name", isl_peer_port_name)
        if lacp_speed is not None:
            pulumi.set(__self__, "lacp_speed", lacp_speed)
        if learning_limit is not None:
            pulumi.set(__self__, "learning_limit", learning_limit)
        if link_status is not None:
            pulumi.set(__self__, "link_status", link_status)
        if lldp_profile is not None:
            pulumi.set(__self__, "lldp_profile", lldp_profile)
        if lldp_status is not None:
            pulumi.set(__self__, "lldp_status", lldp_status)
        if loop_guard is not None:
            pulumi.set(__self__, "loop_guard", loop_guard)
        if loop_guard_timeout is not None:
            pulumi.set(__self__, "loop_guard_timeout", loop_guard_timeout)
        if mac_addr is not None:
            pulumi.set(__self__, "mac_addr", mac_addr)
        if matched_dpp_intf_tags is not None:
            pulumi.set(__self__, "matched_dpp_intf_tags", matched_dpp_intf_tags)
        if matched_dpp_policy is not None:
            pulumi.set(__self__, "matched_dpp_policy", matched_dpp_policy)
        if max_bundle is not None:
            pulumi.set(__self__, "max_bundle", max_bundle)
        if mcast_snooping_flood_traffic is not None:
            pulumi.set(__self__, "mcast_snooping_flood_traffic", mcast_snooping_flood_traffic)
        if mclag is not None:
            pulumi.set(__self__, "mclag", mclag)
        if mclag_icl_port is not None:
            pulumi.set(__self__, "mclag_icl_port", mclag_icl_port)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if member_withdrawal_behavior is not None:
            pulumi.set(__self__, "member_withdrawal_behavior", member_withdrawal_behavior)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if min_bundle is not None:
            pulumi.set(__self__, "min_bundle", min_bundle)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if p2p_port is not None:
            pulumi.set(__self__, "p2p_port", p2p_port)
        if packet_sample_rate is not None:
            pulumi.set(__self__, "packet_sample_rate", packet_sample_rate)
        if packet_sampler is not None:
            pulumi.set(__self__, "packet_sampler", packet_sampler)
        if pause_meter is not None:
            pulumi.set(__self__, "pause_meter", pause_meter)
        if pause_meter_resume is not None:
            pulumi.set(__self__, "pause_meter_resume", pause_meter_resume)
        if poe_capable is not None:
            pulumi.set(__self__, "poe_capable", poe_capable)
        if poe_max_power is not None:
            pulumi.set(__self__, "poe_max_power", poe_max_power)
        if poe_mode_bt_cabable is not None:
            pulumi.set(__self__, "poe_mode_bt_cabable", poe_mode_bt_cabable)
        if poe_port_mode is not None:
            pulumi.set(__self__, "poe_port_mode", poe_port_mode)
        if poe_port_power is not None:
            pulumi.set(__self__, "poe_port_power", poe_port_power)
        if poe_port_priority is not None:
            pulumi.set(__self__, "poe_port_priority", poe_port_priority)
        if poe_pre_standard_detection is not None:
            pulumi.set(__self__, "poe_pre_standard_detection", poe_pre_standard_detection)
        if poe_standard is not None:
            pulumi.set(__self__, "poe_standard", poe_standard)
        if poe_status is not None:
            pulumi.set(__self__, "poe_status", poe_status)
        if port_name is not None:
            pulumi.set(__self__, "port_name", port_name)
        if port_number is not None:
            pulumi.set(__self__, "port_number", port_number)
        if port_owner is not None:
            pulumi.set(__self__, "port_owner", port_owner)
        if port_policy is not None:
            pulumi.set(__self__, "port_policy", port_policy)
        if port_prefix_type is not None:
            pulumi.set(__self__, "port_prefix_type", port_prefix_type)
        if port_security_policy is not None:
            pulumi.set(__self__, "port_security_policy", port_security_policy)
        if port_selection_criteria is not None:
            pulumi.set(__self__, "port_selection_criteria", port_selection_criteria)
        if ptp_policy is not None:
            pulumi.set(__self__, "ptp_policy", ptp_policy)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if rpvst_port is not None:
            pulumi.set(__self__, "rpvst_port", rpvst_port)
        if sample_direction is not None:
            pulumi.set(__self__, "sample_direction", sample_direction)
        if sflow_counter_interval is not None:
            pulumi.set(__self__, "sflow_counter_interval", sflow_counter_interval)
        if sflow_sample_rate is not None:
            pulumi.set(__self__, "sflow_sample_rate", sflow_sample_rate)
        if sflow_sampler is not None:
            pulumi.set(__self__, "sflow_sampler", sflow_sampler)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_mask is not None:
            pulumi.set(__self__, "speed_mask", speed_mask)
        if stacking_port is not None:
            pulumi.set(__self__, "stacking_port", stacking_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sticky_mac is not None:
            pulumi.set(__self__, "sticky_mac", sticky_mac)
        if storm_control_policy is not None:
            pulumi.set(__self__, "storm_control_policy", storm_control_policy)
        if stp_bpdu_guard is not None:
            pulumi.set(__self__, "stp_bpdu_guard", stp_bpdu_guard)
        if stp_bpdu_guard_timeout is not None:
            pulumi.set(__self__, "stp_bpdu_guard_timeout", stp_bpdu_guard_timeout)
        if stp_root_guard is not None:
            pulumi.set(__self__, "stp_root_guard", stp_root_guard)
        if stp_state is not None:
            pulumi.set(__self__, "stp_state", stp_state)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if untagged_vlans is not None:
            pulumi.set(__self__, "untagged_vlans", untagged_vlans)
        if virtual_port is not None:
            pulumi.set(__self__, "virtual_port", virtual_port)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter(name="aclGroups")
    def acl_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortAclGroupArgs']]]]:
        return pulumi.get(self, "acl_groups")

    @acl_groups.setter
    def acl_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortAclGroupArgs']]]]):
        pulumi.set(self, "acl_groups", value)

    @property
    @pulumi.getter(name="aggregatorMode")
    def aggregator_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregator_mode")

    @aggregator_mode.setter
    def aggregator_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_mode", value)

    @property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortAllowedVlanArgs']]]]:
        return pulumi.get(self, "allowed_vlans")

    @allowed_vlans.setter
    def allowed_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortAllowedVlanArgs']]]]):
        pulumi.set(self, "allowed_vlans", value)

    @property
    @pulumi.getter(name="allowedVlansAll")
    def allowed_vlans_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowed_vlans_all")

    @allowed_vlans_all.setter
    def allowed_vlans_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_vlans_all", value)

    @property
    @pulumi.getter(name="arpInspectionTrust")
    def arp_inspection_trust(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arp_inspection_trust")

    @arp_inspection_trust.setter
    def arp_inspection_trust(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_inspection_trust", value)

    @property
    @pulumi.getter
    def bundle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bundle")

    @bundle.setter
    def bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bundle", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpSnoopOption82Overrides")
    def dhcp_snoop_option82_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortDhcpSnoopOption82OverrideArgs']]]]:
        return pulumi.get(self, "dhcp_snoop_option82_overrides")

    @dhcp_snoop_option82_overrides.setter
    def dhcp_snoop_option82_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortDhcpSnoopOption82OverrideArgs']]]]):
        pulumi.set(self, "dhcp_snoop_option82_overrides", value)

    @property
    @pulumi.getter(name="dhcpSnoopOption82Trust")
    def dhcp_snoop_option82_trust(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_snoop_option82_trust")

    @dhcp_snoop_option82_trust.setter
    def dhcp_snoop_option82_trust(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_snoop_option82_trust", value)

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_snooping")

    @dhcp_snooping.setter
    def dhcp_snooping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_snooping", value)

    @property
    @pulumi.getter(name="discardMode")
    def discard_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discard_mode")

    @discard_mode.setter
    def discard_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discard_mode", value)

    @property
    @pulumi.getter(name="edgePort")
    def edge_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "edge_port")

    @edge_port.setter
    def edge_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_port", value)

    @property
    @pulumi.getter(name="exportTags")
    def export_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortExportTagArgs']]]]:
        return pulumi.get(self, "export_tags")

    @export_tags.setter
    def export_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortExportTagArgs']]]]):
        pulumi.set(self, "export_tags", value)

    @property
    @pulumi.getter(name="exportTo")
    def export_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "export_to")

    @export_to.setter
    def export_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_to", value)

    @property
    @pulumi.getter(name="exportToPool")
    def export_to_pool(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "export_to_pool")

    @export_to_pool.setter
    def export_to_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_to_pool", value)

    @property
    @pulumi.getter(name="exportToPoolFlag")
    def export_to_pool_flag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "export_to_pool_flag")

    @export_to_pool_flag.setter
    def export_to_pool_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "export_to_pool_flag", value)

    @property
    @pulumi.getter(name="fecCapable")
    def fec_capable(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_capable")

    @fec_capable.setter
    def fec_capable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_capable", value)

    @property
    @pulumi.getter(name="fecState")
    def fec_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_state")

    @fec_state.setter
    def fec_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_state", value)

    @property
    @pulumi.getter(name="fgtPeerDeviceName")
    def fgt_peer_device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fgt_peer_device_name")

    @fgt_peer_device_name.setter
    def fgt_peer_device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgt_peer_device_name", value)

    @property
    @pulumi.getter(name="fgtPeerPortName")
    def fgt_peer_port_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fgt_peer_port_name")

    @fgt_peer_port_name.setter
    def fgt_peer_port_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgt_peer_port_name", value)

    @property
    @pulumi.getter(name="fiberPort")
    def fiber_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fiber_port")

    @fiber_port.setter
    def fiber_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fiber_port", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter(name="flapDuration")
    def flap_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flap_duration")

    @flap_duration.setter
    def flap_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_duration", value)

    @property
    @pulumi.getter(name="flapRate")
    def flap_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flap_rate")

    @flap_rate.setter
    def flap_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_rate", value)

    @property
    @pulumi.getter(name="flapTimeout")
    def flap_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flap_timeout")

    @flap_timeout.setter
    def flap_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_timeout", value)

    @property
    @pulumi.getter
    def flapguard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flapguard")

    @flapguard.setter
    def flapguard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flapguard", value)

    @property
    @pulumi.getter(name="flowControl")
    def flow_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_control")

    @flow_control.setter
    def flow_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_control", value)

    @property
    @pulumi.getter(name="fortilinkPort")
    def fortilink_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortilink_port")

    @fortilink_port.setter
    def fortilink_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortilink_port", value)

    @property
    @pulumi.getter(name="fortiswitchAcls")
    def fortiswitch_acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortFortiswitchAclArgs']]]]:
        return pulumi.get(self, "fortiswitch_acls")

    @fortiswitch_acls.setter
    def fortiswitch_acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortFortiswitchAclArgs']]]]):
        pulumi.set(self, "fortiswitch_acls", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="igmpSnoopingFloodReports")
    def igmp_snooping_flood_reports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "igmp_snooping_flood_reports")

    @igmp_snooping_flood_reports.setter
    def igmp_snooping_flood_reports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmp_snooping_flood_reports", value)

    @property
    @pulumi.getter(name="igmpsFloodReports")
    def igmps_flood_reports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "igmps_flood_reports")

    @igmps_flood_reports.setter
    def igmps_flood_reports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmps_flood_reports", value)

    @property
    @pulumi.getter(name="igmpsFloodTraffic")
    def igmps_flood_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "igmps_flood_traffic")

    @igmps_flood_traffic.setter
    def igmps_flood_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmps_flood_traffic", value)

    @property
    @pulumi.getter(name="interfaceTags")
    def interface_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortInterfaceTagArgs']]]]:
        return pulumi.get(self, "interface_tags")

    @interface_tags.setter
    def interface_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortInterfaceTagArgs']]]]):
        pulumi.set(self, "interface_tags", value)

    @property
    @pulumi.getter(name="ipSourceGuard")
    def ip_source_guard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_source_guard")

    @ip_source_guard.setter
    def ip_source_guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_source_guard", value)

    @property
    @pulumi.getter(name="islLocalTrunkName")
    def isl_local_trunk_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "isl_local_trunk_name")

    @isl_local_trunk_name.setter
    def isl_local_trunk_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isl_local_trunk_name", value)

    @property
    @pulumi.getter(name="islPeerDeviceName")
    def isl_peer_device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "isl_peer_device_name")

    @isl_peer_device_name.setter
    def isl_peer_device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isl_peer_device_name", value)

    @property
    @pulumi.getter(name="islPeerDeviceSn")
    def isl_peer_device_sn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "isl_peer_device_sn")

    @isl_peer_device_sn.setter
    def isl_peer_device_sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isl_peer_device_sn", value)

    @property
    @pulumi.getter(name="islPeerPortName")
    def isl_peer_port_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "isl_peer_port_name")

    @isl_peer_port_name.setter
    def isl_peer_port_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isl_peer_port_name", value)

    @property
    @pulumi.getter(name="lacpSpeed")
    def lacp_speed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lacp_speed")

    @lacp_speed.setter
    def lacp_speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp_speed", value)

    @property
    @pulumi.getter(name="learningLimit")
    def learning_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "learning_limit")

    @learning_limit.setter
    def learning_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "learning_limit", value)

    @property
    @pulumi.getter(name="linkStatus")
    def link_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_status")

    @link_status.setter
    def link_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_status", value)

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp_profile")

    @lldp_profile.setter
    def lldp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_profile", value)

    @property
    @pulumi.getter(name="lldpStatus")
    def lldp_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lldp_status")

    @lldp_status.setter
    def lldp_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_status", value)

    @property
    @pulumi.getter(name="loopGuard")
    def loop_guard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loop_guard")

    @loop_guard.setter
    def loop_guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loop_guard", value)

    @property
    @pulumi.getter(name="loopGuardTimeout")
    def loop_guard_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "loop_guard_timeout")

    @loop_guard_timeout.setter
    def loop_guard_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "loop_guard_timeout", value)

    @property
    @pulumi.getter(name="macAddr")
    def mac_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_addr")

    @mac_addr.setter
    def mac_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_addr", value)

    @property
    @pulumi.getter(name="matchedDppIntfTags")
    def matched_dpp_intf_tags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "matched_dpp_intf_tags")

    @matched_dpp_intf_tags.setter
    def matched_dpp_intf_tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matched_dpp_intf_tags", value)

    @property
    @pulumi.getter(name="matchedDppPolicy")
    def matched_dpp_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "matched_dpp_policy")

    @matched_dpp_policy.setter
    def matched_dpp_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matched_dpp_policy", value)

    @property
    @pulumi.getter(name="maxBundle")
    def max_bundle(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_bundle")

    @max_bundle.setter
    def max_bundle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bundle", value)

    @property
    @pulumi.getter(name="mcastSnoopingFloodTraffic")
    def mcast_snooping_flood_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mcast_snooping_flood_traffic")

    @mcast_snooping_flood_traffic.setter
    def mcast_snooping_flood_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mcast_snooping_flood_traffic", value)

    @property
    @pulumi.getter
    def mclag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mclag")

    @mclag.setter
    def mclag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mclag", value)

    @property
    @pulumi.getter(name="mclagIclPort")
    def mclag_icl_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mclag_icl_port")

    @mclag_icl_port.setter
    def mclag_icl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mclag_icl_port", value)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_type", value)

    @property
    @pulumi.getter(name="memberWithdrawalBehavior")
    def member_withdrawal_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "member_withdrawal_behavior")

    @member_withdrawal_behavior.setter
    def member_withdrawal_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_withdrawal_behavior", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortMemberArgs']]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="minBundle")
    def min_bundle(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_bundle")

    @min_bundle.setter
    def min_bundle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_bundle", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="p2pPort")
    def p2p_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "p2p_port")

    @p2p_port.setter
    def p2p_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "p2p_port", value)

    @property
    @pulumi.getter(name="packetSampleRate")
    def packet_sample_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "packet_sample_rate")

    @packet_sample_rate.setter
    def packet_sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_sample_rate", value)

    @property
    @pulumi.getter(name="packetSampler")
    def packet_sampler(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "packet_sampler")

    @packet_sampler.setter
    def packet_sampler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_sampler", value)

    @property
    @pulumi.getter(name="pauseMeter")
    def pause_meter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pause_meter")

    @pause_meter.setter
    def pause_meter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pause_meter", value)

    @property
    @pulumi.getter(name="pauseMeterResume")
    def pause_meter_resume(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pause_meter_resume")

    @pause_meter_resume.setter
    def pause_meter_resume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pause_meter_resume", value)

    @property
    @pulumi.getter(name="poeCapable")
    def poe_capable(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "poe_capable")

    @poe_capable.setter
    def poe_capable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poe_capable", value)

    @property
    @pulumi.getter(name="poeMaxPower")
    def poe_max_power(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_max_power")

    @poe_max_power.setter
    def poe_max_power(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_max_power", value)

    @property
    @pulumi.getter(name="poeModeBtCabable")
    def poe_mode_bt_cabable(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "poe_mode_bt_cabable")

    @poe_mode_bt_cabable.setter
    def poe_mode_bt_cabable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poe_mode_bt_cabable", value)

    @property
    @pulumi.getter(name="poePortMode")
    def poe_port_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_port_mode")

    @poe_port_mode.setter
    def poe_port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_port_mode", value)

    @property
    @pulumi.getter(name="poePortPower")
    def poe_port_power(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_port_power")

    @poe_port_power.setter
    def poe_port_power(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_port_power", value)

    @property
    @pulumi.getter(name="poePortPriority")
    def poe_port_priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_port_priority")

    @poe_port_priority.setter
    def poe_port_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_port_priority", value)

    @property
    @pulumi.getter(name="poePreStandardDetection")
    def poe_pre_standard_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_pre_standard_detection")

    @poe_pre_standard_detection.setter
    def poe_pre_standard_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_pre_standard_detection", value)

    @property
    @pulumi.getter(name="poeStandard")
    def poe_standard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_standard")

    @poe_standard.setter
    def poe_standard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_standard", value)

    @property
    @pulumi.getter(name="poeStatus")
    def poe_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "poe_status")

    @poe_status.setter
    def poe_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_status", value)

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_name")

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_name", value)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_number", value)

    @property
    @pulumi.getter(name="portOwner")
    def port_owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_owner")

    @port_owner.setter
    def port_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_owner", value)

    @property
    @pulumi.getter(name="portPolicy")
    def port_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_policy")

    @port_policy.setter
    def port_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_policy", value)

    @property
    @pulumi.getter(name="portPrefixType")
    def port_prefix_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_prefix_type")

    @port_prefix_type.setter
    def port_prefix_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_prefix_type", value)

    @property
    @pulumi.getter(name="portSecurityPolicy")
    def port_security_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_security_policy")

    @port_security_policy.setter
    def port_security_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_security_policy", value)

    @property
    @pulumi.getter(name="portSelectionCriteria")
    def port_selection_criteria(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_selection_criteria")

    @port_selection_criteria.setter
    def port_selection_criteria(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_selection_criteria", value)

    @property
    @pulumi.getter(name="ptpPolicy")
    def ptp_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ptp_policy")

    @ptp_policy.setter
    def ptp_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ptp_policy", value)

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_policy", value)

    @property
    @pulumi.getter(name="rpvstPort")
    def rpvst_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rpvst_port")

    @rpvst_port.setter
    def rpvst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpvst_port", value)

    @property
    @pulumi.getter(name="sampleDirection")
    def sample_direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sample_direction")

    @sample_direction.setter
    def sample_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sample_direction", value)

    @property
    @pulumi.getter(name="sflowCounterInterval")
    def sflow_counter_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sflow_counter_interval")

    @sflow_counter_interval.setter
    def sflow_counter_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sflow_counter_interval", value)

    @property
    @pulumi.getter(name="sflowSampleRate")
    def sflow_sample_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sflow_sample_rate")

    @sflow_sample_rate.setter
    def sflow_sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sflow_sample_rate", value)

    @property
    @pulumi.getter(name="sflowSampler")
    def sflow_sampler(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sflow_sampler")

    @sflow_sampler.setter
    def sflow_sampler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sflow_sampler", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="speedMask")
    def speed_mask(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "speed_mask")

    @speed_mask.setter
    def speed_mask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "speed_mask", value)

    @property
    @pulumi.getter(name="stackingPort")
    def stacking_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stacking_port")

    @stacking_port.setter
    def stacking_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stacking_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="stickyMac")
    def sticky_mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sticky_mac")

    @sticky_mac.setter
    def sticky_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sticky_mac", value)

    @property
    @pulumi.getter(name="stormControlPolicy")
    def storm_control_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storm_control_policy")

    @storm_control_policy.setter
    def storm_control_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storm_control_policy", value)

    @property
    @pulumi.getter(name="stpBpduGuard")
    def stp_bpdu_guard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stp_bpdu_guard")

    @stp_bpdu_guard.setter
    def stp_bpdu_guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stp_bpdu_guard", value)

    @property
    @pulumi.getter(name="stpBpduGuardTimeout")
    def stp_bpdu_guard_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stp_bpdu_guard_timeout")

    @stp_bpdu_guard_timeout.setter
    def stp_bpdu_guard_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stp_bpdu_guard_timeout", value)

    @property
    @pulumi.getter(name="stpRootGuard")
    def stp_root_guard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stp_root_guard")

    @stp_root_guard.setter
    def stp_root_guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stp_root_guard", value)

    @property
    @pulumi.getter(name="stpState")
    def stp_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stp_state")

    @stp_state.setter
    def stp_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stp_state", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="untaggedVlans")
    def untagged_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortUntaggedVlanArgs']]]]:
        return pulumi.get(self, "untagged_vlans")

    @untagged_vlans.setter
    def untagged_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortUntaggedVlanArgs']]]]):
        pulumi.set(self, "untagged_vlans", value)

    @property
    @pulumi.getter(name="virtualPort")
    def virtual_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "virtual_port")

    @virtual_port.setter
    def virtual_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_port", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortAclGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortAllowedVlanArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortDhcpSnoopOption82OverrideArgs:
    def __init__(__self__, *,
                 circuit_id: Optional[pulumi.Input[str]] = None,
                 remote_id: Optional[pulumi.Input[str]] = None,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if remote_id is not None:
            pulumi.set(__self__, "remote_id", remote_id)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "circuit_id")

    @circuit_id.setter
    def circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_id", value)

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_id")

    @remote_id.setter
    def remote_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_id", value)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortExportTagArgs:
    def __init__(__self__, *,
                 tag_name: Optional[pulumi.Input[str]] = None):
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortFortiswitchAclArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortInterfaceTagArgs:
    def __init__(__self__, *,
                 tag_name: Optional[pulumi.Input[str]] = None):
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortMemberArgs:
    def __init__(__self__, *,
                 member_name: Optional[pulumi.Input[str]] = None):
        if member_name is not None:
            pulumi.set(__self__, "member_name", member_name)

    @property
    @pulumi.getter(name="memberName")
    def member_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "member_name")

    @member_name.setter
    def member_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortUntaggedVlanArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchRemoteLogArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input[str]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSnmpCommunityArgs:
    def __init__(__self__, *,
                 events: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityHostArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_port: Optional[pulumi.Input[int]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_port: Optional[pulumi.Input[int]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_lport: Optional[pulumi.Input[int]] = None,
                 trap_v1_rport: Optional[pulumi.Input[int]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_lport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_rport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None):
        if events is not None:
            pulumi.set(__self__, "events", events)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_port is not None:
            pulumi.set(__self__, "query_v1_port", query_v1_port)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_port is not None:
            pulumi.set(__self__, "query_v2c_port", query_v2c_port)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_lport is not None:
            pulumi.set(__self__, "trap_v1_lport", trap_v1_lport)
        if trap_v1_rport is not None:
            pulumi.set(__self__, "trap_v1_rport", trap_v1_rport)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_lport is not None:
            pulumi.set(__self__, "trap_v2c_lport", trap_v2c_lport)
        if trap_v2c_rport is not None:
            pulumi.set(__self__, "trap_v2c_rport", trap_v2c_rport)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityHostArgs']]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryV1Port")
    def query_v1_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_v1_port")

    @query_v1_port.setter
    def query_v1_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v1_port", value)

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_v1_status")

    @query_v1_status.setter
    def query_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v1_status", value)

    @property
    @pulumi.getter(name="queryV2cPort")
    def query_v2c_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_v2c_port")

    @query_v2c_port.setter
    def query_v2c_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v2c_port", value)

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_v2c_status")

    @query_v2c_status.setter
    def query_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v2c_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapV1Lport")
    def trap_v1_lport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v1_lport")

    @trap_v1_lport.setter
    def trap_v1_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_lport", value)

    @property
    @pulumi.getter(name="trapV1Rport")
    def trap_v1_rport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v1_rport")

    @trap_v1_rport.setter
    def trap_v1_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_rport", value)

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_v1_status")

    @trap_v1_status.setter
    def trap_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v1_status", value)

    @property
    @pulumi.getter(name="trapV2cLport")
    def trap_v2c_lport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v2c_lport")

    @trap_v2c_lport.setter
    def trap_v2c_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_lport", value)

    @property
    @pulumi.getter(name="trapV2cRport")
    def trap_v2c_rport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v2c_rport")

    @trap_v2c_rport.setter
    def trap_v2c_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_rport", value)

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_v2c_status")

    @trap_v2c_status.setter
    def trap_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v2c_status", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSnmpCommunityHostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSnmpSysinfoArgs:
    def __init__(__self__, *,
                 contact_info: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if contact_info is not None:
            pulumi.set(__self__, "contact_info", contact_info)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="contactInfo")
    def contact_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "contact_info")

    @contact_info.setter
    def contact_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_info", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSnmpTrapThresholdArgs:
    def __init__(__self__, *,
                 trap_high_cpu_threshold: Optional[pulumi.Input[int]] = None,
                 trap_log_full_threshold: Optional[pulumi.Input[int]] = None,
                 trap_low_memory_threshold: Optional[pulumi.Input[int]] = None):
        if trap_high_cpu_threshold is not None:
            pulumi.set(__self__, "trap_high_cpu_threshold", trap_high_cpu_threshold)
        if trap_log_full_threshold is not None:
            pulumi.set(__self__, "trap_log_full_threshold", trap_log_full_threshold)
        if trap_low_memory_threshold is not None:
            pulumi.set(__self__, "trap_low_memory_threshold", trap_low_memory_threshold)

    @property
    @pulumi.getter(name="trapHighCpuThreshold")
    def trap_high_cpu_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_high_cpu_threshold")

    @trap_high_cpu_threshold.setter
    def trap_high_cpu_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_high_cpu_threshold", value)

    @property
    @pulumi.getter(name="trapLogFullThreshold")
    def trap_log_full_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_log_full_threshold")

    @trap_log_full_threshold.setter
    def trap_log_full_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_log_full_threshold", value)

    @property
    @pulumi.getter(name="trapLowMemoryThreshold")
    def trap_low_memory_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_low_memory_threshold")

    @trap_low_memory_threshold.setter
    def trap_low_memory_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_low_memory_threshold", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSnmpUserArgs:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None):
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query_port is not None:
            pulumi.set(__self__, "query_port", query_port)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_port")

    @query_port.setter
    def query_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_port", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)


@pulumi.input_type
class SwitchControllerManagedSwitchStaticMacArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SwitchControllerManagedSwitchStormControlArgs:
    def __init__(__self__, *,
                 broadcast: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 rate: Optional[pulumi.Input[int]] = None,
                 unknown_multicast: Optional[pulumi.Input[str]] = None,
                 unknown_unicast: Optional[pulumi.Input[str]] = None):
        if broadcast is not None:
            pulumi.set(__self__, "broadcast", broadcast)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if unknown_multicast is not None:
            pulumi.set(__self__, "unknown_multicast", unknown_multicast)
        if unknown_unicast is not None:
            pulumi.set(__self__, "unknown_unicast", unknown_unicast)

    @property
    @pulumi.getter
    def broadcast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "broadcast")

    @broadcast.setter
    def broadcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rate")

    @rate.setter
    def rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate", value)

    @property
    @pulumi.getter(name="unknownMulticast")
    def unknown_multicast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_multicast")

    @unknown_multicast.setter
    def unknown_multicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_multicast", value)

    @property
    @pulumi.getter(name="unknownUnicast")
    def unknown_unicast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_unicast")

    @unknown_unicast.setter
    def unknown_unicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_unicast", value)


@pulumi.input_type
class SwitchControllerManagedSwitchStpInstanceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class SwitchControllerManagedSwitchStpSettingsArgs:
    def __init__(__self__, *,
                 forward_time: Optional[pulumi.Input[int]] = None,
                 hello_time: Optional[pulumi.Input[int]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 max_hops: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pending_timer: Optional[pulumi.Input[int]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if forward_time is not None:
            pulumi.set(__self__, "forward_time", forward_time)
        if hello_time is not None:
            pulumi.set(__self__, "hello_time", hello_time)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if max_hops is not None:
            pulumi.set(__self__, "max_hops", max_hops)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pending_timer is not None:
            pulumi.set(__self__, "pending_timer", pending_timer)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="forwardTime")
    def forward_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "forward_time")

    @forward_time.setter
    def forward_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_time", value)

    @property
    @pulumi.getter(name="helloTime")
    def hello_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_time")

    @hello_time.setter
    def hello_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_time", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="maxHops")
    def max_hops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_hops")

    @max_hops.setter
    def max_hops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_hops", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pendingTimer")
    def pending_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pending_timer")

    @pending_timer.setter
    def pending_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pending_timer", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSwitchLogArgs:
    def __init__(__self__, *,
                 local_override: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSwitchStpSettingsArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input[str]] = None):
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SwitchControllerQosIpDscpMapMapArgs:
    def __init__(__self__, *,
                 cos_queue: Optional[pulumi.Input[int]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 ip_precedence: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if cos_queue is not None:
            pulumi.set(__self__, "cos_queue", cos_queue)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if ip_precedence is not None:
            pulumi.set(__self__, "ip_precedence", ip_precedence)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cosQueue")
    def cos_queue(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cos_queue")

    @cos_queue.setter
    def cos_queue(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cos_queue", value)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter(name="ipPrecedence")
    def ip_precedence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_precedence")

    @ip_precedence.setter
    def ip_precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_precedence", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SwitchControllerQosQueuePolicyCosQueueArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 drop_policy: Optional[pulumi.Input[str]] = None,
                 ecn: Optional[pulumi.Input[str]] = None,
                 max_rate: Optional[pulumi.Input[int]] = None,
                 max_rate_percent: Optional[pulumi.Input[int]] = None,
                 min_rate: Optional[pulumi.Input[int]] = None,
                 min_rate_percent: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drop_policy is not None:
            pulumi.set(__self__, "drop_policy", drop_policy)
        if ecn is not None:
            pulumi.set(__self__, "ecn", ecn)
        if max_rate is not None:
            pulumi.set(__self__, "max_rate", max_rate)
        if max_rate_percent is not None:
            pulumi.set(__self__, "max_rate_percent", max_rate_percent)
        if min_rate is not None:
            pulumi.set(__self__, "min_rate", min_rate)
        if min_rate_percent is not None:
            pulumi.set(__self__, "min_rate_percent", min_rate_percent)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dropPolicy")
    def drop_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_policy")

    @drop_policy.setter
    def drop_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_policy", value)

    @property
    @pulumi.getter
    def ecn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ecn")

    @ecn.setter
    def ecn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ecn", value)

    @property
    @pulumi.getter(name="maxRate")
    def max_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_rate")

    @max_rate.setter
    def max_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_rate", value)

    @property
    @pulumi.getter(name="maxRatePercent")
    def max_rate_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_rate_percent")

    @max_rate_percent.setter
    def max_rate_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_rate_percent", value)

    @property
    @pulumi.getter(name="minRate")
    def min_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_rate")

    @min_rate.setter
    def min_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_rate", value)

    @property
    @pulumi.getter(name="minRatePercent")
    def min_rate_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_rate_percent")

    @min_rate_percent.setter
    def min_rate_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_rate_percent", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class SwitchControllerQuarantineTargetArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 entry_id: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerQuarantineTargetTagArgs']]]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entry_id is not None:
            pulumi.set(__self__, "entry_id", entry_id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "entry_id")

    @entry_id.setter
    def entry_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "entry_id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerQuarantineTargetTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerQuarantineTargetTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SwitchControllerQuarantineTargetTagArgs:
    def __init__(__self__, *,
                 tags: Optional[pulumi.Input[str]] = None):
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SwitchControllerSecurityPolicy8021XUserGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerSnmpCommunityHostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SwitchControllerStpInstanceVlanRangeArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerSwitchGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)


@pulumi.input_type
class SwitchControllerTrafficSnifferTargetIpArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SwitchControllerTrafficSnifferTargetMacArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)


@pulumi.input_type
class SwitchControllerTrafficSnifferTargetPortArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 in_ports: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortInPortArgs']]]] = None,
                 out_ports: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortOutPortArgs']]]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if in_ports is not None:
            pulumi.set(__self__, "in_ports", in_ports)
        if out_ports is not None:
            pulumi.set(__self__, "out_ports", out_ports)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inPorts")
    def in_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortInPortArgs']]]]:
        return pulumi.get(self, "in_ports")

    @in_ports.setter
    def in_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortInPortArgs']]]]):
        pulumi.set(self, "in_ports", value)

    @property
    @pulumi.getter(name="outPorts")
    def out_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortOutPortArgs']]]]:
        return pulumi.get(self, "out_ports")

    @out_ports.setter
    def out_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortOutPortArgs']]]]):
        pulumi.set(self, "out_ports", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)


@pulumi.input_type
class SwitchControllerTrafficSnifferTargetPortInPortArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerTrafficSnifferTargetPortOutPortArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerVlanPolicyAllowedVlanArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerVlanPolicyUntaggedVlanArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerVlanPortalMessageOverridesArgs:
    def __init__(__self__, *,
                 auth_disclaimer_page: Optional[pulumi.Input[str]] = None,
                 auth_login_failed_page: Optional[pulumi.Input[str]] = None,
                 auth_login_page: Optional[pulumi.Input[str]] = None,
                 auth_reject_page: Optional[pulumi.Input[str]] = None):
        if auth_disclaimer_page is not None:
            pulumi.set(__self__, "auth_disclaimer_page", auth_disclaimer_page)
        if auth_login_failed_page is not None:
            pulumi.set(__self__, "auth_login_failed_page", auth_login_failed_page)
        if auth_login_page is not None:
            pulumi.set(__self__, "auth_login_page", auth_login_page)
        if auth_reject_page is not None:
            pulumi.set(__self__, "auth_reject_page", auth_reject_page)

    @property
    @pulumi.getter(name="authDisclaimerPage")
    def auth_disclaimer_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_disclaimer_page")

    @auth_disclaimer_page.setter
    def auth_disclaimer_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_disclaimer_page", value)

    @property
    @pulumi.getter(name="authLoginFailedPage")
    def auth_login_failed_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_login_failed_page")

    @auth_login_failed_page.setter
    def auth_login_failed_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_login_failed_page", value)

    @property
    @pulumi.getter(name="authLoginPage")
    def auth_login_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_login_page")

    @auth_login_page.setter
    def auth_login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_login_page", value)

    @property
    @pulumi.getter(name="authRejectPage")
    def auth_reject_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_reject_page")

    @auth_reject_page.setter
    def auth_reject_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_reject_page", value)


@pulumi.input_type
class SwitchControllerVlanSelectedUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAPIUserSettingTrusthostArgs:
    def __init__(__self__, *,
                 ipv4_trusthost: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ipv4_trusthost")

    @ipv4_trusthost.setter
    def ipv4_trusthost(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipv4_trusthost", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemAccprofileFwgrpPermissionArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 others: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if others is not None:
            pulumi.set(__self__, "others", others)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def others(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "others")

    @others.setter
    def others(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "others", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class SystemAccprofileLoggrpPermissionArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[str]] = None,
                 data_access: Optional[pulumi.Input[str]] = None,
                 report_access: Optional[pulumi.Input[str]] = None,
                 threat_weight: Optional[pulumi.Input[str]] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if data_access is not None:
            pulumi.set(__self__, "data_access", data_access)
        if report_access is not None:
            pulumi.set(__self__, "report_access", report_access)
        if threat_weight is not None:
            pulumi.set(__self__, "threat_weight", threat_weight)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="dataAccess")
    def data_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_access")

    @data_access.setter
    def data_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_access", value)

    @property
    @pulumi.getter(name="reportAccess")
    def report_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "report_access")

    @report_access.setter
    def report_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_access", value)

    @property
    @pulumi.getter(name="threatWeight")
    def threat_weight(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "threat_weight")

    @threat_weight.setter
    def threat_weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threat_weight", value)


@pulumi.input_type
class SystemAccprofileNetgrpPermissionArgs:
    def __init__(__self__, *,
                 cfg: Optional[pulumi.Input[str]] = None,
                 packet_capture: Optional[pulumi.Input[str]] = None,
                 route_cfg: Optional[pulumi.Input[str]] = None):
        if cfg is not None:
            pulumi.set(__self__, "cfg", cfg)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)
        if route_cfg is not None:
            pulumi.set(__self__, "route_cfg", route_cfg)

    @property
    @pulumi.getter
    def cfg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cfg")

    @cfg.setter
    def cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cfg", value)

    @property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "packet_capture")

    @packet_capture.setter
    def packet_capture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_capture", value)

    @property
    @pulumi.getter(name="routeCfg")
    def route_cfg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_cfg")

    @route_cfg.setter
    def route_cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_cfg", value)


@pulumi.input_type
class SystemAccprofileSysgrpPermissionArgs:
    def __init__(__self__, *,
                 admin: Optional[pulumi.Input[str]] = None,
                 cfg: Optional[pulumi.Input[str]] = None,
                 mnt: Optional[pulumi.Input[str]] = None,
                 upd: Optional[pulumi.Input[str]] = None):
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if cfg is not None:
            pulumi.set(__self__, "cfg", cfg)
        if mnt is not None:
            pulumi.set(__self__, "mnt", mnt)
        if upd is not None:
            pulumi.set(__self__, "upd", upd)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def cfg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cfg")

    @cfg.setter
    def cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cfg", value)

    @property
    @pulumi.getter
    def mnt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mnt")

    @mnt.setter
    def mnt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mnt", value)

    @property
    @pulumi.getter
    def upd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upd")

    @upd.setter
    def upd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upd", value)


@pulumi.input_type
class SystemAccprofileUtmgrpPermissionArgs:
    def __init__(__self__, *,
                 antivirus: Optional[pulumi.Input[str]] = None,
                 application_control: Optional[pulumi.Input[str]] = None,
                 data_leak_prevention: Optional[pulumi.Input[str]] = None,
                 data_loss_prevention: Optional[pulumi.Input[str]] = None,
                 dnsfilter: Optional[pulumi.Input[str]] = None,
                 emailfilter: Optional[pulumi.Input[str]] = None,
                 endpoint_control: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[str]] = None,
                 icap: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[str]] = None,
                 spamfilter: Optional[pulumi.Input[str]] = None,
                 videofilter: Optional[pulumi.Input[str]] = None,
                 voip: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[str]] = None,
                 webfilter: Optional[pulumi.Input[str]] = None):
        if antivirus is not None:
            pulumi.set(__self__, "antivirus", antivirus)
        if application_control is not None:
            pulumi.set(__self__, "application_control", application_control)
        if data_leak_prevention is not None:
            pulumi.set(__self__, "data_leak_prevention", data_leak_prevention)
        if data_loss_prevention is not None:
            pulumi.set(__self__, "data_loss_prevention", data_loss_prevention)
        if dnsfilter is not None:
            pulumi.set(__self__, "dnsfilter", dnsfilter)
        if emailfilter is not None:
            pulumi.set(__self__, "emailfilter", emailfilter)
        if endpoint_control is not None:
            pulumi.set(__self__, "endpoint_control", endpoint_control)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if icap is not None:
            pulumi.set(__self__, "icap", icap)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if spamfilter is not None:
            pulumi.set(__self__, "spamfilter", spamfilter)
        if videofilter is not None:
            pulumi.set(__self__, "videofilter", videofilter)
        if voip is not None:
            pulumi.set(__self__, "voip", voip)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if webfilter is not None:
            pulumi.set(__self__, "webfilter", webfilter)

    @property
    @pulumi.getter
    def antivirus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "antivirus")

    @antivirus.setter
    def antivirus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antivirus", value)

    @property
    @pulumi.getter(name="applicationControl")
    def application_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_control")

    @application_control.setter
    def application_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_control", value)

    @property
    @pulumi.getter(name="dataLeakPrevention")
    def data_leak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_leak_prevention")

    @data_leak_prevention.setter
    def data_leak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_leak_prevention", value)

    @property
    @pulumi.getter(name="dataLossPrevention")
    def data_loss_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_loss_prevention")

    @data_loss_prevention.setter
    def data_loss_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_loss_prevention", value)

    @property
    @pulumi.getter
    def dnsfilter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnsfilter")

    @dnsfilter.setter
    def dnsfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter", value)

    @property
    @pulumi.getter
    def emailfilter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emailfilter")

    @emailfilter.setter
    def emailfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter", value)

    @property
    @pulumi.getter(name="endpointControl")
    def endpoint_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_control")

    @endpoint_control.setter
    def endpoint_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_control", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter
    def icap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icap")

    @icap.setter
    def icap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def spamfilter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spamfilter")

    @spamfilter.setter
    def spamfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter", value)

    @property
    @pulumi.getter
    def videofilter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "videofilter")

    @videofilter.setter
    def videofilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "videofilter", value)

    @property
    @pulumi.getter
    def voip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voip")

    @voip.setter
    def voip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf", value)

    @property
    @pulumi.getter
    def webfilter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter")

    @webfilter.setter
    def webfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter", value)


@pulumi.input_type
class SystemAcmeAccountArgs:
    def __init__(__self__, *,
                 ca_url: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 privatekey: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if ca_url is not None:
            pulumi.set(__self__, "ca_url", ca_url)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if privatekey is not None:
            pulumi.set(__self__, "privatekey", privatekey)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="caUrl")
    def ca_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_url")

    @ca_url.setter
    def ca_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_url", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def privatekey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "privatekey")

    @privatekey.setter
    def privatekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privatekey", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SystemAcmeInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemAdminGuestUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAdminGuiDashboardArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 layout_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 widgets: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetArgs']]]] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if layout_type is not None:
            pulumi.set(__self__, "layout_type", layout_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if widgets is not None:
            pulumi.set(__self__, "widgets", widgets)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="layoutType")
    def layout_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "layout_type")

    @layout_type.setter
    def layout_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layout_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def widgets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetArgs']]]]:
        return pulumi.get(self, "widgets")

    @widgets.setter
    def widgets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetArgs']]]]):
        pulumi.set(self, "widgets", value)


@pulumi.input_type
class SystemAdminGuiDashboardWidgetArgs:
    def __init__(__self__, *,
                 fabric_device: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetFilterArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 industry: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 report_by: Optional[pulumi.Input[str]] = None,
                 sort_by: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 visualization: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 x_pos: Optional[pulumi.Input[int]] = None,
                 y_pos: Optional[pulumi.Input[int]] = None):
        if fabric_device is not None:
            pulumi.set(__self__, "fabric_device", fabric_device)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if industry is not None:
            pulumi.set(__self__, "industry", industry)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if report_by is not None:
            pulumi.set(__self__, "report_by", report_by)
        if sort_by is not None:
            pulumi.set(__self__, "sort_by", sort_by)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if visualization is not None:
            pulumi.set(__self__, "visualization", visualization)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="fabricDevice")
    def fabric_device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fabric_device")

    @fabric_device.setter
    def fabric_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_device", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def industry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "industry")

    @industry.setter
    def industry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "industry", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="reportBy")
    def report_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "report_by")

    @report_by.setter
    def report_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_by", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_by", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def visualization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visualization")

    @visualization.setter
    def visualization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visualization", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class SystemAdminGuiDashboardWidgetFilterArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SystemAdminGuiGlobalMenuFavoriteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemAdminGuiNewFeatureAcknowledgeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemAdminGuiVdomMenuFavoriteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemAdminLoginTimeArgs:
    def __init__(__self__, *,
                 last_failed_login: Optional[pulumi.Input[str]] = None,
                 last_login: Optional[pulumi.Input[str]] = None,
                 usr_name: Optional[pulumi.Input[str]] = None):
        if last_failed_login is not None:
            pulumi.set(__self__, "last_failed_login", last_failed_login)
        if last_login is not None:
            pulumi.set(__self__, "last_login", last_login)
        if usr_name is not None:
            pulumi.set(__self__, "usr_name", usr_name)

    @property
    @pulumi.getter(name="lastFailedLogin")
    def last_failed_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_failed_login")

    @last_failed_login.setter
    def last_failed_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_failed_login", value)

    @property
    @pulumi.getter(name="lastLogin")
    def last_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_login")

    @last_login.setter
    def last_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_login", value)

    @property
    @pulumi.getter(name="usrName")
    def usr_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usr_name")

    @usr_name.setter
    def usr_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usr_name", value)


@pulumi.input_type
class SystemAdminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAlarmGroupArgs:
    def __init__(__self__, *,
                 admin_auth_failure_threshold: Optional[pulumi.Input[int]] = None,
                 admin_auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 decryption_failure_threshold: Optional[pulumi.Input[int]] = None,
                 encryption_failure_threshold: Optional[pulumi.Input[int]] = None,
                 fw_policy_id: Optional[pulumi.Input[int]] = None,
                 fw_policy_id_threshold: Optional[pulumi.Input[int]] = None,
                 fw_policy_violations: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAlarmGroupFwPolicyViolationArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log_full_warning_threshold: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 replay_attempt_threshold: Optional[pulumi.Input[int]] = None,
                 self_test_failure_threshold: Optional[pulumi.Input[int]] = None,
                 user_auth_failure_threshold: Optional[pulumi.Input[int]] = None,
                 user_auth_lockout_threshold: Optional[pulumi.Input[int]] = None):
        if admin_auth_failure_threshold is not None:
            pulumi.set(__self__, "admin_auth_failure_threshold", admin_auth_failure_threshold)
        if admin_auth_lockout_threshold is not None:
            pulumi.set(__self__, "admin_auth_lockout_threshold", admin_auth_lockout_threshold)
        if decryption_failure_threshold is not None:
            pulumi.set(__self__, "decryption_failure_threshold", decryption_failure_threshold)
        if encryption_failure_threshold is not None:
            pulumi.set(__self__, "encryption_failure_threshold", encryption_failure_threshold)
        if fw_policy_id is not None:
            pulumi.set(__self__, "fw_policy_id", fw_policy_id)
        if fw_policy_id_threshold is not None:
            pulumi.set(__self__, "fw_policy_id_threshold", fw_policy_id_threshold)
        if fw_policy_violations is not None:
            pulumi.set(__self__, "fw_policy_violations", fw_policy_violations)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log_full_warning_threshold is not None:
            pulumi.set(__self__, "log_full_warning_threshold", log_full_warning_threshold)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if replay_attempt_threshold is not None:
            pulumi.set(__self__, "replay_attempt_threshold", replay_attempt_threshold)
        if self_test_failure_threshold is not None:
            pulumi.set(__self__, "self_test_failure_threshold", self_test_failure_threshold)
        if user_auth_failure_threshold is not None:
            pulumi.set(__self__, "user_auth_failure_threshold", user_auth_failure_threshold)
        if user_auth_lockout_threshold is not None:
            pulumi.set(__self__, "user_auth_lockout_threshold", user_auth_lockout_threshold)

    @property
    @pulumi.getter(name="adminAuthFailureThreshold")
    def admin_auth_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_auth_failure_threshold")

    @admin_auth_failure_threshold.setter
    def admin_auth_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_auth_failure_threshold", value)

    @property
    @pulumi.getter(name="adminAuthLockoutThreshold")
    def admin_auth_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_auth_lockout_threshold")

    @admin_auth_lockout_threshold.setter
    def admin_auth_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_auth_lockout_threshold", value)

    @property
    @pulumi.getter(name="decryptionFailureThreshold")
    def decryption_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "decryption_failure_threshold")

    @decryption_failure_threshold.setter
    def decryption_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "decryption_failure_threshold", value)

    @property
    @pulumi.getter(name="encryptionFailureThreshold")
    def encryption_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "encryption_failure_threshold")

    @encryption_failure_threshold.setter
    def encryption_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encryption_failure_threshold", value)

    @property
    @pulumi.getter(name="fwPolicyId")
    def fw_policy_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fw_policy_id")

    @fw_policy_id.setter
    def fw_policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fw_policy_id", value)

    @property
    @pulumi.getter(name="fwPolicyIdThreshold")
    def fw_policy_id_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fw_policy_id_threshold")

    @fw_policy_id_threshold.setter
    def fw_policy_id_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fw_policy_id_threshold", value)

    @property
    @pulumi.getter(name="fwPolicyViolations")
    def fw_policy_violations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAlarmGroupFwPolicyViolationArgs']]]]:
        return pulumi.get(self, "fw_policy_violations")

    @fw_policy_violations.setter
    def fw_policy_violations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAlarmGroupFwPolicyViolationArgs']]]]):
        pulumi.set(self, "fw_policy_violations", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="logFullWarningThreshold")
    def log_full_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_full_warning_threshold")

    @log_full_warning_threshold.setter
    def log_full_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_full_warning_threshold", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="replayAttemptThreshold")
    def replay_attempt_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replay_attempt_threshold")

    @replay_attempt_threshold.setter
    def replay_attempt_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replay_attempt_threshold", value)

    @property
    @pulumi.getter(name="selfTestFailureThreshold")
    def self_test_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "self_test_failure_threshold")

    @self_test_failure_threshold.setter
    def self_test_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "self_test_failure_threshold", value)

    @property
    @pulumi.getter(name="userAuthFailureThreshold")
    def user_auth_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_auth_failure_threshold")

    @user_auth_failure_threshold.setter
    def user_auth_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_auth_failure_threshold", value)

    @property
    @pulumi.getter(name="userAuthLockoutThreshold")
    def user_auth_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_auth_lockout_threshold")

    @user_auth_lockout_threshold.setter
    def user_auth_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_auth_lockout_threshold", value)


@pulumi.input_type
class SystemAlarmGroupFwPolicyViolationArgs:
    def __init__(__self__, *,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_ip: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None):
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class SystemApiUserTrusthostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ipv4_trusthost: Optional[pulumi.Input[str]] = None,
                 ipv6_trusthost: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv4_trusthost is not None:
            pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        if ipv6_trusthost is not None:
            pulumi.set(__self__, "ipv6_trusthost", ipv6_trusthost)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_trusthost")

    @ipv4_trusthost.setter
    def ipv4_trusthost(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_trusthost", value)

    @property
    @pulumi.getter(name="ipv6Trusthost")
    def ipv6_trusthost(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_trusthost")

    @ipv6_trusthost.setter
    def ipv6_trusthost(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_trusthost", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemApiUserVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAutomationActionEmailToArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAutomationActionHeaderArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[str]] = None):
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)


@pulumi.input_type
class SystemAutomationActionHttpHeaderArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SystemAutomationActionSdnConnectorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAutomationDestinationDestinationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAutomationStitchActionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 required: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class SystemAutomationStitchDestinationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAutomationTriggerFieldArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SystemAutomationTriggerLogidBlockArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemAutomationTriggerVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemCentralManagementServerListArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 server_address6: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None):
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_address is not None:
            pulumi.set(__self__, "server_address", server_address)
        if server_address6 is not None:
            pulumi.set(__self__, "server_address6", server_address6)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_address")

    @server_address.setter
    def server_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_address", value)

    @property
    @pulumi.getter(name="serverAddress6")
    def server_address6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_address6")

    @server_address6.setter
    def server_address6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_address6", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)


@pulumi.input_type
class SystemClusterSyncDownIntfsBeforeSessSyncArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemClusterSyncSessionSyncFilterArgs:
    def __init__(__self__, *,
                 custom_services: Optional[pulumi.Input[Sequence[pulumi.Input['SystemClusterSyncSessionSyncFilterCustomServiceArgs']]]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstaddr6: Optional[pulumi.Input[str]] = None,
                 dstintf: Optional[pulumi.Input[str]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcaddr6: Optional[pulumi.Input[str]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None):
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstaddr6 is not None:
            pulumi.set(__self__, "dstaddr6", dstaddr6)
        if dstintf is not None:
            pulumi.set(__self__, "dstintf", dstintf)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcaddr6 is not None:
            pulumi.set(__self__, "srcaddr6", srcaddr6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemClusterSyncSessionSyncFilterCustomServiceArgs']]]]:
        return pulumi.get(self, "custom_services")

    @custom_services.setter
    def custom_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemClusterSyncSessionSyncFilterCustomServiceArgs']]]]):
        pulumi.set(self, "custom_services", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstaddr6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstaddr6")

    @dstaddr6.setter
    def dstaddr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr6", value)

    @property
    @pulumi.getter
    def dstintf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstintf")

    @dstintf.setter
    def dstintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstintf", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcaddr6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr6")

    @srcaddr6.setter
    def srcaddr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr6", value)

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcintf")

    @srcintf.setter
    def srcintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcintf", value)


@pulumi.input_type
class SystemClusterSyncSessionSyncFilterCustomServiceArgs:
    def __init__(__self__, *,
                 dst_port_range: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_port_range: Optional[pulumi.Input[str]] = None):
        if dst_port_range is not None:
            pulumi.set(__self__, "dst_port_range", dst_port_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_port_range is not None:
            pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_port_range")

    @dst_port_range.setter
    def dst_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port_range", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_port_range")

    @src_port_range.setter
    def src_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port_range", value)


@pulumi.input_type
class SystemClusterSyncSyncvdArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemCsfFabricConnectorArgs:
    def __init__(__self__, *,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 configuration_write_access: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricConnectorVdomArgs']]]] = None):
        if accprofile is not None:
            pulumi.set(__self__, "accprofile", accprofile)
        if configuration_write_access is not None:
            pulumi.set(__self__, "configuration_write_access", configuration_write_access)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def accprofile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accprofile")

    @accprofile.setter
    def accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accprofile", value)

    @property
    @pulumi.getter(name="configurationWriteAccess")
    def configuration_write_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configuration_write_access")

    @configuration_write_access.setter
    def configuration_write_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_write_access", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricConnectorVdomArgs']]]]:
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricConnectorVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


@pulumi.input_type
class SystemCsfFabricConnectorVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemCsfFabricDeviceArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 device_ip: Optional[pulumi.Input[str]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 https_port: Optional[pulumi.Input[int]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if device_ip is not None:
            pulumi.set(__self__, "device_ip", device_ip)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="deviceIp")
    def device_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_ip")

    @device_ip.setter
    def device_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_ip", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class SystemCsfTrustedListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 authorization_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 downstream_authorization: Optional[pulumi.Input[str]] = None,
                 ha_members: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if authorization_type is not None:
            pulumi.set(__self__, "authorization_type", authorization_type)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if downstream_authorization is not None:
            pulumi.set(__self__, "downstream_authorization", downstream_authorization)
        if ha_members is not None:
            pulumi.set(__self__, "ha_members", ha_members)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_type")

    @authorization_type.setter
    def authorization_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_type", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="downstreamAuthorization")
    def downstream_authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "downstream_authorization")

    @downstream_authorization.setter
    def downstream_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_authorization", value)

    @property
    @pulumi.getter(name="haMembers")
    def ha_members(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha_members")

    @ha_members.setter
    def ha_members(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_members", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)


@pulumi.input_type
class SystemDdnsDdnsServerAddrArgs:
    def __init__(__self__, *,
                 addr: Optional[pulumi.Input[str]] = None):
        if addr is not None:
            pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr", value)


@pulumi.input_type
class SystemDdnsMonitorInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemDhcp6ServerIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class SystemDhcp6ServerPrefixRangeArgs:
    def __init__(__self__, *,
                 end_prefix: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 start_prefix: Optional[pulumi.Input[str]] = None):
        if end_prefix is not None:
            pulumi.set(__self__, "end_prefix", end_prefix)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if start_prefix is not None:
            pulumi.set(__self__, "start_prefix", start_prefix)

    @property
    @pulumi.getter(name="endPrefix")
    def end_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_prefix")

    @end_prefix.setter
    def end_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_prefix", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="startPrefix")
    def start_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_prefix")

    @start_prefix.setter
    def start_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_prefix", value)


@pulumi.input_type
class SystemDhcpServerExcludeRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 uci_match: Optional[pulumi.Input[str]] = None,
                 uci_strings: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeUciStringArgs']]]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeVciStringArgs']]]] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if uci_match is not None:
            pulumi.set(__self__, "uci_match", uci_match)
        if uci_strings is not None:
            pulumi.set(__self__, "uci_strings", uci_strings)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uci_match")

    @uci_match.setter
    def uci_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uci_match", value)

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeUciStringArgs']]]]:
        return pulumi.get(self, "uci_strings")

    @uci_strings.setter
    def uci_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeUciStringArgs']]]]):
        pulumi.set(self, "uci_strings", value)

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vci_match")

    @vci_match.setter
    def vci_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_match", value)

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeVciStringArgs']]]]:
        return pulumi.get(self, "vci_strings")

    @vci_strings.setter
    def vci_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerExcludeRangeVciStringArgs']]]]):
        pulumi.set(self, "vci_strings", value)


@pulumi.input_type
class SystemDhcpServerExcludeRangeUciStringArgs:
    def __init__(__self__, *,
                 uci_string: Optional[pulumi.Input[str]] = None):
        if uci_string is not None:
            pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uci_string")

    @uci_string.setter
    def uci_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uci_string", value)


@pulumi.input_type
class SystemDhcpServerExcludeRangeVciStringArgs:
    def __init__(__self__, *,
                 vci_string: Optional[pulumi.Input[str]] = None):
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vci_string")

    @vci_string.setter
    def vci_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_string", value)


@pulumi.input_type
class SystemDhcpServerIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 uci_match: Optional[pulumi.Input[str]] = None,
                 uci_strings: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeUciStringArgs']]]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeVciStringArgs']]]] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if uci_match is not None:
            pulumi.set(__self__, "uci_match", uci_match)
        if uci_strings is not None:
            pulumi.set(__self__, "uci_strings", uci_strings)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uci_match")

    @uci_match.setter
    def uci_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uci_match", value)

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeUciStringArgs']]]]:
        return pulumi.get(self, "uci_strings")

    @uci_strings.setter
    def uci_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeUciStringArgs']]]]):
        pulumi.set(self, "uci_strings", value)

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vci_match")

    @vci_match.setter
    def vci_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_match", value)

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeVciStringArgs']]]]:
        return pulumi.get(self, "vci_strings")

    @vci_strings.setter
    def vci_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerIpRangeVciStringArgs']]]]):
        pulumi.set(self, "vci_strings", value)


@pulumi.input_type
class SystemDhcpServerIpRangeUciStringArgs:
    def __init__(__self__, *,
                 uci_string: Optional[pulumi.Input[str]] = None):
        if uci_string is not None:
            pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uci_string")

    @uci_string.setter
    def uci_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uci_string", value)


@pulumi.input_type
class SystemDhcpServerIpRangeVciStringArgs:
    def __init__(__self__, *,
                 vci_string: Optional[pulumi.Input[str]] = None):
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vci_string")

    @vci_string.setter
    def vci_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_string", value)


@pulumi.input_type
class SystemDhcpServerOptionArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uci_match: Optional[pulumi.Input[str]] = None,
                 uci_strings: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionUciStringArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionVciStringArgs']]]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uci_match is not None:
            pulumi.set(__self__, "uci_match", uci_match)
        if uci_strings is not None:
            pulumi.set(__self__, "uci_strings", uci_strings)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uci_match")

    @uci_match.setter
    def uci_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uci_match", value)

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionUciStringArgs']]]]:
        return pulumi.get(self, "uci_strings")

    @uci_strings.setter
    def uci_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionUciStringArgs']]]]):
        pulumi.set(self, "uci_strings", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vci_match")

    @vci_match.setter
    def vci_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_match", value)

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionVciStringArgs']]]]:
        return pulumi.get(self, "vci_strings")

    @vci_strings.setter
    def vci_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemDhcpServerOptionVciStringArgs']]]]):
        pulumi.set(self, "vci_strings", value)


@pulumi.input_type
class SystemDhcpServerOptionUciStringArgs:
    def __init__(__self__, *,
                 uci_string: Optional[pulumi.Input[str]] = None):
        if uci_string is not None:
            pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uci_string")

    @uci_string.setter
    def uci_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uci_string", value)


@pulumi.input_type
class SystemDhcpServerOptionVciStringArgs:
    def __init__(__self__, *,
                 vci_string: Optional[pulumi.Input[str]] = None):
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vci_string")

    @vci_string.setter
    def vci_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_string", value)


@pulumi.input_type
class SystemDhcpServerReservedAddressArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 circuit_id: Optional[pulumi.Input[str]] = None,
                 circuit_id_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 remote_id: Optional[pulumi.Input[str]] = None,
                 remote_id_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if circuit_id_type is not None:
            pulumi.set(__self__, "circuit_id_type", circuit_id_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if remote_id is not None:
            pulumi.set(__self__, "remote_id", remote_id)
        if remote_id_type is not None:
            pulumi.set(__self__, "remote_id_type", remote_id_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "circuit_id")

    @circuit_id.setter
    def circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_id", value)

    @property
    @pulumi.getter(name="circuitIdType")
    def circuit_id_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "circuit_id_type")

    @circuit_id_type.setter
    def circuit_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_id_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_id")

    @remote_id.setter
    def remote_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_id", value)

    @property
    @pulumi.getter(name="remoteIdType")
    def remote_id_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_id_type")

    @remote_id_type.setter
    def remote_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_id_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemDhcpServerTftpServerArgs:
    def __init__(__self__, *,
                 tftp_server: Optional[pulumi.Input[str]] = None):
        if tftp_server is not None:
            pulumi.set(__self__, "tftp_server", tftp_server)

    @property
    @pulumi.getter(name="tftpServer")
    def tftp_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tftp_server")

    @tftp_server.setter
    def tftp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tftp_server", value)


@pulumi.input_type
class SystemDhcpServerVciStringArgs:
    def __init__(__self__, *,
                 vci_string: Optional[pulumi.Input[str]] = None):
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vci_string")

    @vci_string.setter
    def vci_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_string", value)


@pulumi.input_type
class SystemDnsDatabaseDnsEntryArgs:
    def __init__(__self__, *,
                 canonical_name: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 preference: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if canonical_name is not None:
            pulumi.set(__self__, "canonical_name", canonical_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="canonicalName")
    def canonical_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "canonical_name")

    @canonical_name.setter
    def canonical_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "canonical_name", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemDnsDomainArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class SystemDnsServerHostnameArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class SystemEvpnExportRtArgs:
    def __init__(__self__, *,
                 route_target: Optional[pulumi.Input[str]] = None):
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_target")

    @route_target.setter
    def route_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_target", value)


@pulumi.input_type
class SystemEvpnImportRtArgs:
    def __init__(__self__, *,
                 route_target: Optional[pulumi.Input[str]] = None):
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_target")

    @route_target.setter
    def route_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_target", value)


@pulumi.input_type
class SystemFabricVpnAdvertisedSubnetArgs:
    def __init__(__self__, *,
                 access: Optional[pulumi.Input[str]] = None,
                 bgp_network: Optional[pulumi.Input[int]] = None,
                 firewall_address: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 policies: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        if access is not None:
            pulumi.set(__self__, "access", access)
        if bgp_network is not None:
            pulumi.set(__self__, "bgp_network", bgp_network)
        if firewall_address is not None:
            pulumi.set(__self__, "firewall_address", firewall_address)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access")

    @access.setter
    def access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access", value)

    @property
    @pulumi.getter(name="bgpNetwork")
    def bgp_network(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bgp_network")

    @bgp_network.setter
    def bgp_network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_network", value)

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_address")

    @firewall_address.setter
    def firewall_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_address", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class SystemFabricVpnOverlayArgs:
    def __init__(__self__, *,
                 bgp_neighbor: Optional[pulumi.Input[str]] = None,
                 bgp_neighbor_group: Optional[pulumi.Input[str]] = None,
                 bgp_neighbor_range: Optional[pulumi.Input[int]] = None,
                 bgp_network: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipsec_phase1: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overlay_policy: Optional[pulumi.Input[int]] = None,
                 overlay_tunnel_block: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 route_policy: Optional[pulumi.Input[int]] = None,
                 sdwan_member: Optional[pulumi.Input[int]] = None):
        if bgp_neighbor is not None:
            pulumi.set(__self__, "bgp_neighbor", bgp_neighbor)
        if bgp_neighbor_group is not None:
            pulumi.set(__self__, "bgp_neighbor_group", bgp_neighbor_group)
        if bgp_neighbor_range is not None:
            pulumi.set(__self__, "bgp_neighbor_range", bgp_neighbor_range)
        if bgp_network is not None:
            pulumi.set(__self__, "bgp_network", bgp_network)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipsec_phase1 is not None:
            pulumi.set(__self__, "ipsec_phase1", ipsec_phase1)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlay_policy is not None:
            pulumi.set(__self__, "overlay_policy", overlay_policy)
        if overlay_tunnel_block is not None:
            pulumi.set(__self__, "overlay_tunnel_block", overlay_tunnel_block)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if sdwan_member is not None:
            pulumi.set(__self__, "sdwan_member", sdwan_member)

    @property
    @pulumi.getter(name="bgpNeighbor")
    def bgp_neighbor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgp_neighbor")

    @bgp_neighbor.setter
    def bgp_neighbor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_neighbor", value)

    @property
    @pulumi.getter(name="bgpNeighborGroup")
    def bgp_neighbor_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgp_neighbor_group")

    @bgp_neighbor_group.setter
    def bgp_neighbor_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_neighbor_group", value)

    @property
    @pulumi.getter(name="bgpNeighborRange")
    def bgp_neighbor_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bgp_neighbor_range")

    @bgp_neighbor_range.setter
    def bgp_neighbor_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_neighbor_range", value)

    @property
    @pulumi.getter(name="bgpNetwork")
    def bgp_network(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bgp_network")

    @bgp_network.setter
    def bgp_network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_network", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipsecPhase1")
    def ipsec_phase1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_phase1")

    @ipsec_phase1.setter
    def ipsec_phase1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_phase1", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overlayPolicy")
    def overlay_policy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "overlay_policy")

    @overlay_policy.setter
    def overlay_policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "overlay_policy", value)

    @property
    @pulumi.getter(name="overlayTunnelBlock")
    def overlay_tunnel_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overlay_tunnel_block")

    @overlay_tunnel_block.setter
    def overlay_tunnel_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay_tunnel_block", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_policy", value)

    @property
    @pulumi.getter(name="sdwanMember")
    def sdwan_member(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sdwan_member")

    @sdwan_member.setter
    def sdwan_member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sdwan_member", value)


@pulumi.input_type
class SystemFederatedUpgradeNodeListArgs:
    def __init__(__self__, *,
                 coordinating_fortigate: Optional[pulumi.Input[str]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 maximum_minutes: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None):
        if coordinating_fortigate is not None:
            pulumi.set(__self__, "coordinating_fortigate", coordinating_fortigate)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if maximum_minutes is not None:
            pulumi.set(__self__, "maximum_minutes", maximum_minutes)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if setup_time is not None:
            pulumi.set(__self__, "setup_time", setup_time)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timing is not None:
            pulumi.set(__self__, "timing", timing)
        if upgrade_path is not None:
            pulumi.set(__self__, "upgrade_path", upgrade_path)

    @property
    @pulumi.getter(name="coordinatingFortigate")
    def coordinating_fortigate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinating_fortigate")

    @coordinating_fortigate.setter
    def coordinating_fortigate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinating_fortigate", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="maximumMinutes")
    def maximum_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_minutes")

    @maximum_minutes.setter
    def maximum_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_minutes", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "setup_time")

    @setup_time.setter
    def setup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setup_time", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def timing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timing")

    @timing.setter
    def timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timing", value)

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upgrade_path")

    @upgrade_path.setter
    def upgrade_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_path", value)


@pulumi.input_type
class SystemGeoipOverrideIp6RangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class SystemGeoipOverrideIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class SystemGlobalInternetServiceDownloadListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemHaHaMgmtInterfaceArgs:
    def __init__(__self__, *,
                 dst: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None):
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)


@pulumi.input_type
class SystemHaSecondaryVclusterArgs:
    def __init__(__self__, *,
                 monitor: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 override_wait_time: Optional[pulumi.Input[int]] = None,
                 pingserver_failover_threshold: Optional[pulumi.Input[int]] = None,
                 pingserver_monitor_interface: Optional[pulumi.Input[str]] = None,
                 pingserver_secondary_force_reset: Optional[pulumi.Input[str]] = None,
                 pingserver_slave_force_reset: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 vcluster_id: Optional[pulumi.Input[int]] = None,
                 vdom: Optional[pulumi.Input[str]] = None):
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "override_wait_time")

    @override_wait_time.setter
    def override_wait_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_wait_time", value)

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pingserver_failover_threshold")

    @pingserver_failover_threshold.setter
    def pingserver_failover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pingserver_failover_threshold", value)

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pingserver_monitor_interface")

    @pingserver_monitor_interface.setter
    def pingserver_monitor_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_monitor_interface", value)

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @pingserver_secondary_force_reset.setter
    def pingserver_secondary_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_secondary_force_reset", value)

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pingserver_slave_force_reset")

    @pingserver_slave_force_reset.setter
    def pingserver_slave_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_slave_force_reset", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcluster_id")

    @vcluster_id.setter
    def vcluster_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcluster_id", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)


@pulumi.input_type
class SystemHaUnicastPeerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 peer_ip: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_ip")

    @peer_ip.setter
    def peer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_ip", value)


@pulumi.input_type
class SystemHaVclusterArgs:
    def __init__(__self__, *,
                 monitor: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 override_wait_time: Optional[pulumi.Input[int]] = None,
                 pingserver_failover_threshold: Optional[pulumi.Input[int]] = None,
                 pingserver_monitor_interface: Optional[pulumi.Input[str]] = None,
                 pingserver_secondary_force_reset: Optional[pulumi.Input[str]] = None,
                 pingserver_slave_force_reset: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 vcluster_id: Optional[pulumi.Input[int]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SystemHaVclusterVdomArgs']]]] = None):
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "override_wait_time")

    @override_wait_time.setter
    def override_wait_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_wait_time", value)

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pingserver_failover_threshold")

    @pingserver_failover_threshold.setter
    def pingserver_failover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pingserver_failover_threshold", value)

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pingserver_monitor_interface")

    @pingserver_monitor_interface.setter
    def pingserver_monitor_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_monitor_interface", value)

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @pingserver_secondary_force_reset.setter
    def pingserver_secondary_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_secondary_force_reset", value)

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pingserver_slave_force_reset")

    @pingserver_slave_force_reset.setter
    def pingserver_slave_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_slave_force_reset", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcluster_id")

    @vcluster_id.setter
    def vcluster_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcluster_id", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemHaVclusterVdomArgs']]]]:
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemHaVclusterVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


@pulumi.input_type
class SystemHaVclusterVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemIkeDhGroup14Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup15Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup16Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup17Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup18Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup19Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup1Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup20Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup21Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup27Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup28Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup29Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup2Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup30Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup31Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup32Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup5Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemInterfaceClientOptionArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SystemInterfaceDhcpSnoopingServerListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 server_ip: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_ip is not None:
            pulumi.set(__self__, "server_ip", server_ip)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_ip")

    @server_ip.setter
    def server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_ip", value)


@pulumi.input_type
class SystemInterfaceFailAlertInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemInterfaceIpv6Args:
    def __init__(__self__, *,
                 autoconf: Optional[pulumi.Input[str]] = None,
                 cli_conn6_status: Optional[pulumi.Input[int]] = None,
                 dhcp6_client_options: Optional[pulumi.Input[str]] = None,
                 dhcp6_iapd_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Dhcp6IapdListArgs']]]] = None,
                 dhcp6_information_request: Optional[pulumi.Input[str]] = None,
                 dhcp6_prefix_delegation: Optional[pulumi.Input[str]] = None,
                 dhcp6_prefix_hint: Optional[pulumi.Input[str]] = None,
                 dhcp6_prefix_hint_plt: Optional[pulumi.Input[int]] = None,
                 dhcp6_prefix_hint_vlt: Optional[pulumi.Input[int]] = None,
                 dhcp6_relay_ip: Optional[pulumi.Input[str]] = None,
                 dhcp6_relay_service: Optional[pulumi.Input[str]] = None,
                 dhcp6_relay_source_interface: Optional[pulumi.Input[str]] = None,
                 dhcp6_relay_type: Optional[pulumi.Input[str]] = None,
                 icmp6_send_redirect: Optional[pulumi.Input[str]] = None,
                 interface_identifier: Optional[pulumi.Input[str]] = None,
                 ip6_address: Optional[pulumi.Input[str]] = None,
                 ip6_allowaccess: Optional[pulumi.Input[str]] = None,
                 ip6_default_life: Optional[pulumi.Input[int]] = None,
                 ip6_delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
                 ip6_delegated_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6DelegatedPrefixListArgs']]]] = None,
                 ip6_dns_server_override: Optional[pulumi.Input[str]] = None,
                 ip6_extra_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6ExtraAddrArgs']]]] = None,
                 ip6_hop_limit: Optional[pulumi.Input[int]] = None,
                 ip6_link_mtu: Optional[pulumi.Input[int]] = None,
                 ip6_manage_flag: Optional[pulumi.Input[str]] = None,
                 ip6_max_interval: Optional[pulumi.Input[int]] = None,
                 ip6_min_interval: Optional[pulumi.Input[int]] = None,
                 ip6_mode: Optional[pulumi.Input[str]] = None,
                 ip6_other_flag: Optional[pulumi.Input[str]] = None,
                 ip6_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListArgs']]]] = None,
                 ip6_prefix_mode: Optional[pulumi.Input[str]] = None,
                 ip6_reachable_time: Optional[pulumi.Input[int]] = None,
                 ip6_retrans_time: Optional[pulumi.Input[int]] = None,
                 ip6_send_adv: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_upstream_interface: Optional[pulumi.Input[str]] = None,
                 nd_cert: Optional[pulumi.Input[str]] = None,
                 nd_cga_modifier: Optional[pulumi.Input[str]] = None,
                 nd_mode: Optional[pulumi.Input[str]] = None,
                 nd_security_level: Optional[pulumi.Input[int]] = None,
                 nd_timestamp_delta: Optional[pulumi.Input[int]] = None,
                 nd_timestamp_fuzz: Optional[pulumi.Input[int]] = None,
                 ra_send_mtu: Optional[pulumi.Input[str]] = None,
                 unique_autoconf_addr: Optional[pulumi.Input[str]] = None,
                 vrip6_link_local: Optional[pulumi.Input[str]] = None,
                 vrrp6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Vrrp6Args']]]] = None,
                 vrrp_virtual_mac6: Optional[pulumi.Input[str]] = None):
        if autoconf is not None:
            pulumi.set(__self__, "autoconf", autoconf)
        if cli_conn6_status is not None:
            pulumi.set(__self__, "cli_conn6_status", cli_conn6_status)
        if dhcp6_client_options is not None:
            pulumi.set(__self__, "dhcp6_client_options", dhcp6_client_options)
        if dhcp6_iapd_lists is not None:
            pulumi.set(__self__, "dhcp6_iapd_lists", dhcp6_iapd_lists)
        if dhcp6_information_request is not None:
            pulumi.set(__self__, "dhcp6_information_request", dhcp6_information_request)
        if dhcp6_prefix_delegation is not None:
            pulumi.set(__self__, "dhcp6_prefix_delegation", dhcp6_prefix_delegation)
        if dhcp6_prefix_hint is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint", dhcp6_prefix_hint)
        if dhcp6_prefix_hint_plt is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint_plt", dhcp6_prefix_hint_plt)
        if dhcp6_prefix_hint_vlt is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint_vlt", dhcp6_prefix_hint_vlt)
        if dhcp6_relay_ip is not None:
            pulumi.set(__self__, "dhcp6_relay_ip", dhcp6_relay_ip)
        if dhcp6_relay_service is not None:
            pulumi.set(__self__, "dhcp6_relay_service", dhcp6_relay_service)
        if dhcp6_relay_source_interface is not None:
            pulumi.set(__self__, "dhcp6_relay_source_interface", dhcp6_relay_source_interface)
        if dhcp6_relay_type is not None:
            pulumi.set(__self__, "dhcp6_relay_type", dhcp6_relay_type)
        if icmp6_send_redirect is not None:
            pulumi.set(__self__, "icmp6_send_redirect", icmp6_send_redirect)
        if interface_identifier is not None:
            pulumi.set(__self__, "interface_identifier", interface_identifier)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)
        if ip6_allowaccess is not None:
            pulumi.set(__self__, "ip6_allowaccess", ip6_allowaccess)
        if ip6_default_life is not None:
            pulumi.set(__self__, "ip6_default_life", ip6_default_life)
        if ip6_delegated_prefix_iaid is not None:
            pulumi.set(__self__, "ip6_delegated_prefix_iaid", ip6_delegated_prefix_iaid)
        if ip6_delegated_prefix_lists is not None:
            pulumi.set(__self__, "ip6_delegated_prefix_lists", ip6_delegated_prefix_lists)
        if ip6_dns_server_override is not None:
            pulumi.set(__self__, "ip6_dns_server_override", ip6_dns_server_override)
        if ip6_extra_addrs is not None:
            pulumi.set(__self__, "ip6_extra_addrs", ip6_extra_addrs)
        if ip6_hop_limit is not None:
            pulumi.set(__self__, "ip6_hop_limit", ip6_hop_limit)
        if ip6_link_mtu is not None:
            pulumi.set(__self__, "ip6_link_mtu", ip6_link_mtu)
        if ip6_manage_flag is not None:
            pulumi.set(__self__, "ip6_manage_flag", ip6_manage_flag)
        if ip6_max_interval is not None:
            pulumi.set(__self__, "ip6_max_interval", ip6_max_interval)
        if ip6_min_interval is not None:
            pulumi.set(__self__, "ip6_min_interval", ip6_min_interval)
        if ip6_mode is not None:
            pulumi.set(__self__, "ip6_mode", ip6_mode)
        if ip6_other_flag is not None:
            pulumi.set(__self__, "ip6_other_flag", ip6_other_flag)
        if ip6_prefix_lists is not None:
            pulumi.set(__self__, "ip6_prefix_lists", ip6_prefix_lists)
        if ip6_prefix_mode is not None:
            pulumi.set(__self__, "ip6_prefix_mode", ip6_prefix_mode)
        if ip6_reachable_time is not None:
            pulumi.set(__self__, "ip6_reachable_time", ip6_reachable_time)
        if ip6_retrans_time is not None:
            pulumi.set(__self__, "ip6_retrans_time", ip6_retrans_time)
        if ip6_send_adv is not None:
            pulumi.set(__self__, "ip6_send_adv", ip6_send_adv)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if ip6_upstream_interface is not None:
            pulumi.set(__self__, "ip6_upstream_interface", ip6_upstream_interface)
        if nd_cert is not None:
            pulumi.set(__self__, "nd_cert", nd_cert)
        if nd_cga_modifier is not None:
            pulumi.set(__self__, "nd_cga_modifier", nd_cga_modifier)
        if nd_mode is not None:
            pulumi.set(__self__, "nd_mode", nd_mode)
        if nd_security_level is not None:
            pulumi.set(__self__, "nd_security_level", nd_security_level)
        if nd_timestamp_delta is not None:
            pulumi.set(__self__, "nd_timestamp_delta", nd_timestamp_delta)
        if nd_timestamp_fuzz is not None:
            pulumi.set(__self__, "nd_timestamp_fuzz", nd_timestamp_fuzz)
        if ra_send_mtu is not None:
            pulumi.set(__self__, "ra_send_mtu", ra_send_mtu)
        if unique_autoconf_addr is not None:
            pulumi.set(__self__, "unique_autoconf_addr", unique_autoconf_addr)
        if vrip6_link_local is not None:
            pulumi.set(__self__, "vrip6_link_local", vrip6_link_local)
        if vrrp6s is not None:
            pulumi.set(__self__, "vrrp6s", vrrp6s)
        if vrrp_virtual_mac6 is not None:
            pulumi.set(__self__, "vrrp_virtual_mac6", vrrp_virtual_mac6)

    @property
    @pulumi.getter
    def autoconf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autoconf")

    @autoconf.setter
    def autoconf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autoconf", value)

    @property
    @pulumi.getter(name="cliConn6Status")
    def cli_conn6_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cli_conn6_status")

    @cli_conn6_status.setter
    def cli_conn6_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cli_conn6_status", value)

    @property
    @pulumi.getter(name="dhcp6ClientOptions")
    def dhcp6_client_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_client_options")

    @dhcp6_client_options.setter
    def dhcp6_client_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_client_options", value)

    @property
    @pulumi.getter(name="dhcp6IapdLists")
    def dhcp6_iapd_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Dhcp6IapdListArgs']]]]:
        return pulumi.get(self, "dhcp6_iapd_lists")

    @dhcp6_iapd_lists.setter
    def dhcp6_iapd_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Dhcp6IapdListArgs']]]]):
        pulumi.set(self, "dhcp6_iapd_lists", value)

    @property
    @pulumi.getter(name="dhcp6InformationRequest")
    def dhcp6_information_request(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_information_request")

    @dhcp6_information_request.setter
    def dhcp6_information_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_information_request", value)

    @property
    @pulumi.getter(name="dhcp6PrefixDelegation")
    def dhcp6_prefix_delegation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_prefix_delegation")

    @dhcp6_prefix_delegation.setter
    def dhcp6_prefix_delegation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_prefix_delegation", value)

    @property
    @pulumi.getter(name="dhcp6PrefixHint")
    def dhcp6_prefix_hint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_prefix_hint")

    @dhcp6_prefix_hint.setter
    def dhcp6_prefix_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_prefix_hint", value)

    @property
    @pulumi.getter(name="dhcp6PrefixHintPlt")
    def dhcp6_prefix_hint_plt(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dhcp6_prefix_hint_plt")

    @dhcp6_prefix_hint_plt.setter
    def dhcp6_prefix_hint_plt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp6_prefix_hint_plt", value)

    @property
    @pulumi.getter(name="dhcp6PrefixHintVlt")
    def dhcp6_prefix_hint_vlt(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dhcp6_prefix_hint_vlt")

    @dhcp6_prefix_hint_vlt.setter
    def dhcp6_prefix_hint_vlt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp6_prefix_hint_vlt", value)

    @property
    @pulumi.getter(name="dhcp6RelayIp")
    def dhcp6_relay_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_relay_ip")

    @dhcp6_relay_ip.setter
    def dhcp6_relay_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_ip", value)

    @property
    @pulumi.getter(name="dhcp6RelayService")
    def dhcp6_relay_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_relay_service")

    @dhcp6_relay_service.setter
    def dhcp6_relay_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_service", value)

    @property
    @pulumi.getter(name="dhcp6RelaySourceInterface")
    def dhcp6_relay_source_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_relay_source_interface")

    @dhcp6_relay_source_interface.setter
    def dhcp6_relay_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_source_interface", value)

    @property
    @pulumi.getter(name="dhcp6RelayType")
    def dhcp6_relay_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_relay_type")

    @dhcp6_relay_type.setter
    def dhcp6_relay_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_type", value)

    @property
    @pulumi.getter(name="icmp6SendRedirect")
    def icmp6_send_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icmp6_send_redirect")

    @icmp6_send_redirect.setter
    def icmp6_send_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmp6_send_redirect", value)

    @property
    @pulumi.getter(name="interfaceIdentifier")
    def interface_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_identifier")

    @interface_identifier.setter
    def interface_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_identifier", value)

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_address")

    @ip6_address.setter
    def ip6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_address", value)

    @property
    @pulumi.getter(name="ip6Allowaccess")
    def ip6_allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_allowaccess")

    @ip6_allowaccess.setter
    def ip6_allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_allowaccess", value)

    @property
    @pulumi.getter(name="ip6DefaultLife")
    def ip6_default_life(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip6_default_life")

    @ip6_default_life.setter
    def ip6_default_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_default_life", value)

    @property
    @pulumi.getter(name="ip6DelegatedPrefixIaid")
    def ip6_delegated_prefix_iaid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip6_delegated_prefix_iaid")

    @ip6_delegated_prefix_iaid.setter
    def ip6_delegated_prefix_iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_delegated_prefix_iaid", value)

    @property
    @pulumi.getter(name="ip6DelegatedPrefixLists")
    def ip6_delegated_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6DelegatedPrefixListArgs']]]]:
        return pulumi.get(self, "ip6_delegated_prefix_lists")

    @ip6_delegated_prefix_lists.setter
    def ip6_delegated_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6DelegatedPrefixListArgs']]]]):
        pulumi.set(self, "ip6_delegated_prefix_lists", value)

    @property
    @pulumi.getter(name="ip6DnsServerOverride")
    def ip6_dns_server_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_dns_server_override")

    @ip6_dns_server_override.setter
    def ip6_dns_server_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_dns_server_override", value)

    @property
    @pulumi.getter(name="ip6ExtraAddrs")
    def ip6_extra_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6ExtraAddrArgs']]]]:
        return pulumi.get(self, "ip6_extra_addrs")

    @ip6_extra_addrs.setter
    def ip6_extra_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6ExtraAddrArgs']]]]):
        pulumi.set(self, "ip6_extra_addrs", value)

    @property
    @pulumi.getter(name="ip6HopLimit")
    def ip6_hop_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip6_hop_limit")

    @ip6_hop_limit.setter
    def ip6_hop_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_hop_limit", value)

    @property
    @pulumi.getter(name="ip6LinkMtu")
    def ip6_link_mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip6_link_mtu")

    @ip6_link_mtu.setter
    def ip6_link_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_link_mtu", value)

    @property
    @pulumi.getter(name="ip6ManageFlag")
    def ip6_manage_flag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_manage_flag")

    @ip6_manage_flag.setter
    def ip6_manage_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_manage_flag", value)

    @property
    @pulumi.getter(name="ip6MaxInterval")
    def ip6_max_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip6_max_interval")

    @ip6_max_interval.setter
    def ip6_max_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_max_interval", value)

    @property
    @pulumi.getter(name="ip6MinInterval")
    def ip6_min_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip6_min_interval")

    @ip6_min_interval.setter
    def ip6_min_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_min_interval", value)

    @property
    @pulumi.getter(name="ip6Mode")
    def ip6_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_mode")

    @ip6_mode.setter
    def ip6_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_mode", value)

    @property
    @pulumi.getter(name="ip6OtherFlag")
    def ip6_other_flag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_other_flag")

    @ip6_other_flag.setter
    def ip6_other_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_other_flag", value)

    @property
    @pulumi.getter(name="ip6PrefixLists")
    def ip6_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListArgs']]]]:
        return pulumi.get(self, "ip6_prefix_lists")

    @ip6_prefix_lists.setter
    def ip6_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListArgs']]]]):
        pulumi.set(self, "ip6_prefix_lists", value)

    @property
    @pulumi.getter(name="ip6PrefixMode")
    def ip6_prefix_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_prefix_mode")

    @ip6_prefix_mode.setter
    def ip6_prefix_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_prefix_mode", value)

    @property
    @pulumi.getter(name="ip6ReachableTime")
    def ip6_reachable_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip6_reachable_time")

    @ip6_reachable_time.setter
    def ip6_reachable_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_reachable_time", value)

    @property
    @pulumi.getter(name="ip6RetransTime")
    def ip6_retrans_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip6_retrans_time")

    @ip6_retrans_time.setter
    def ip6_retrans_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_retrans_time", value)

    @property
    @pulumi.getter(name="ip6SendAdv")
    def ip6_send_adv(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_send_adv")

    @ip6_send_adv.setter
    def ip6_send_adv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_send_adv", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter(name="ip6UpstreamInterface")
    def ip6_upstream_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6_upstream_interface")

    @ip6_upstream_interface.setter
    def ip6_upstream_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_upstream_interface", value)

    @property
    @pulumi.getter(name="ndCert")
    def nd_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nd_cert")

    @nd_cert.setter
    def nd_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nd_cert", value)

    @property
    @pulumi.getter(name="ndCgaModifier")
    def nd_cga_modifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nd_cga_modifier")

    @nd_cga_modifier.setter
    def nd_cga_modifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nd_cga_modifier", value)

    @property
    @pulumi.getter(name="ndMode")
    def nd_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nd_mode")

    @nd_mode.setter
    def nd_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nd_mode", value)

    @property
    @pulumi.getter(name="ndSecurityLevel")
    def nd_security_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nd_security_level")

    @nd_security_level.setter
    def nd_security_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nd_security_level", value)

    @property
    @pulumi.getter(name="ndTimestampDelta")
    def nd_timestamp_delta(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nd_timestamp_delta")

    @nd_timestamp_delta.setter
    def nd_timestamp_delta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nd_timestamp_delta", value)

    @property
    @pulumi.getter(name="ndTimestampFuzz")
    def nd_timestamp_fuzz(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nd_timestamp_fuzz")

    @nd_timestamp_fuzz.setter
    def nd_timestamp_fuzz(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nd_timestamp_fuzz", value)

    @property
    @pulumi.getter(name="raSendMtu")
    def ra_send_mtu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ra_send_mtu")

    @ra_send_mtu.setter
    def ra_send_mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ra_send_mtu", value)

    @property
    @pulumi.getter(name="uniqueAutoconfAddr")
    def unique_autoconf_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_autoconf_addr")

    @unique_autoconf_addr.setter
    def unique_autoconf_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_autoconf_addr", value)

    @property
    @pulumi.getter(name="vrip6LinkLocal")
    def vrip6_link_local(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrip6_link_local")

    @vrip6_link_local.setter
    def vrip6_link_local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrip6_link_local", value)

    @property
    @pulumi.getter
    def vrrp6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Vrrp6Args']]]]:
        return pulumi.get(self, "vrrp6s")

    @vrrp6s.setter
    def vrrp6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Vrrp6Args']]]]):
        pulumi.set(self, "vrrp6s", value)

    @property
    @pulumi.getter(name="vrrpVirtualMac6")
    def vrrp_virtual_mac6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrrp_virtual_mac6")

    @vrrp_virtual_mac6.setter
    def vrrp_virtual_mac6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrrp_virtual_mac6", value)


@pulumi.input_type
class SystemInterfaceIpv6Dhcp6IapdListArgs:
    def __init__(__self__, *,
                 iaid: Optional[pulumi.Input[int]] = None,
                 prefix_hint: Optional[pulumi.Input[str]] = None,
                 prefix_hint_plt: Optional[pulumi.Input[int]] = None,
                 prefix_hint_vlt: Optional[pulumi.Input[int]] = None):
        if iaid is not None:
            pulumi.set(__self__, "iaid", iaid)
        if prefix_hint is not None:
            pulumi.set(__self__, "prefix_hint", prefix_hint)
        if prefix_hint_plt is not None:
            pulumi.set(__self__, "prefix_hint_plt", prefix_hint_plt)
        if prefix_hint_vlt is not None:
            pulumi.set(__self__, "prefix_hint_vlt", prefix_hint_vlt)

    @property
    @pulumi.getter
    def iaid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iaid")

    @iaid.setter
    def iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iaid", value)

    @property
    @pulumi.getter(name="prefixHint")
    def prefix_hint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_hint")

    @prefix_hint.setter
    def prefix_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_hint", value)

    @property
    @pulumi.getter(name="prefixHintPlt")
    def prefix_hint_plt(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prefix_hint_plt")

    @prefix_hint_plt.setter
    def prefix_hint_plt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_hint_plt", value)

    @property
    @pulumi.getter(name="prefixHintVlt")
    def prefix_hint_vlt(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prefix_hint_vlt")

    @prefix_hint_vlt.setter
    def prefix_hint_vlt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_hint_vlt", value)


@pulumi.input_type
class SystemInterfaceIpv6Ip6DelegatedPrefixListArgs:
    def __init__(__self__, *,
                 autonomous_flag: Optional[pulumi.Input[str]] = None,
                 delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
                 onlink_flag: Optional[pulumi.Input[str]] = None,
                 prefix_id: Optional[pulumi.Input[int]] = None,
                 rdnss: Optional[pulumi.Input[str]] = None,
                 rdnss_service: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 upstream_interface: Optional[pulumi.Input[str]] = None):
        if autonomous_flag is not None:
            pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        if delegated_prefix_iaid is not None:
            pulumi.set(__self__, "delegated_prefix_iaid", delegated_prefix_iaid)
        if onlink_flag is not None:
            pulumi.set(__self__, "onlink_flag", onlink_flag)
        if prefix_id is not None:
            pulumi.set(__self__, "prefix_id", prefix_id)
        if rdnss is not None:
            pulumi.set(__self__, "rdnss", rdnss)
        if rdnss_service is not None:
            pulumi.set(__self__, "rdnss_service", rdnss_service)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if upstream_interface is not None:
            pulumi.set(__self__, "upstream_interface", upstream_interface)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autonomous_flag")

    @autonomous_flag.setter
    def autonomous_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autonomous_flag", value)

    @property
    @pulumi.getter(name="delegatedPrefixIaid")
    def delegated_prefix_iaid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delegated_prefix_iaid")

    @delegated_prefix_iaid.setter
    def delegated_prefix_iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delegated_prefix_iaid", value)

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "onlink_flag")

    @onlink_flag.setter
    def onlink_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onlink_flag", value)

    @property
    @pulumi.getter(name="prefixId")
    def prefix_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prefix_id")

    @prefix_id.setter
    def prefix_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_id", value)

    @property
    @pulumi.getter
    def rdnss(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rdnss")

    @rdnss.setter
    def rdnss(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdnss", value)

    @property
    @pulumi.getter(name="rdnssService")
    def rdnss_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rdnss_service")

    @rdnss_service.setter
    def rdnss_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdnss_service", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="upstreamInterface")
    def upstream_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream_interface")

    @upstream_interface.setter
    def upstream_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_interface", value)


@pulumi.input_type
class SystemInterfaceIpv6Ip6ExtraAddrArgs:
    def __init__(__self__, *,
                 prefix: Optional[pulumi.Input[str]] = None):
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class SystemInterfaceIpv6Ip6PrefixListArgs:
    def __init__(__self__, *,
                 autonomous_flag: Optional[pulumi.Input[str]] = None,
                 dnssls: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListDnsslArgs']]]] = None,
                 onlink_flag: Optional[pulumi.Input[str]] = None,
                 preferred_life_time: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 rdnss: Optional[pulumi.Input[str]] = None,
                 valid_life_time: Optional[pulumi.Input[int]] = None):
        if autonomous_flag is not None:
            pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        if dnssls is not None:
            pulumi.set(__self__, "dnssls", dnssls)
        if onlink_flag is not None:
            pulumi.set(__self__, "onlink_flag", onlink_flag)
        if preferred_life_time is not None:
            pulumi.set(__self__, "preferred_life_time", preferred_life_time)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if rdnss is not None:
            pulumi.set(__self__, "rdnss", rdnss)
        if valid_life_time is not None:
            pulumi.set(__self__, "valid_life_time", valid_life_time)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autonomous_flag")

    @autonomous_flag.setter
    def autonomous_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autonomous_flag", value)

    @property
    @pulumi.getter
    def dnssls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListDnsslArgs']]]]:
        return pulumi.get(self, "dnssls")

    @dnssls.setter
    def dnssls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListDnsslArgs']]]]):
        pulumi.set(self, "dnssls", value)

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "onlink_flag")

    @onlink_flag.setter
    def onlink_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onlink_flag", value)

    @property
    @pulumi.getter(name="preferredLifeTime")
    def preferred_life_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preferred_life_time")

    @preferred_life_time.setter
    def preferred_life_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preferred_life_time", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def rdnss(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rdnss")

    @rdnss.setter
    def rdnss(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdnss", value)

    @property
    @pulumi.getter(name="validLifeTime")
    def valid_life_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "valid_life_time")

    @valid_life_time.setter
    def valid_life_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "valid_life_time", value)


@pulumi.input_type
class SystemInterfaceIpv6Ip6PrefixListDnsslArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class SystemInterfaceIpv6Vrrp6Args:
    def __init__(__self__, *,
                 accept_mode: Optional[pulumi.Input[str]] = None,
                 adv_interval: Optional[pulumi.Input[int]] = None,
                 preempt: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vrdst6: Optional[pulumi.Input[str]] = None,
                 vrgrp: Optional[pulumi.Input[int]] = None,
                 vrid: Optional[pulumi.Input[int]] = None,
                 vrip6: Optional[pulumi.Input[str]] = None):
        if accept_mode is not None:
            pulumi.set(__self__, "accept_mode", accept_mode)
        if adv_interval is not None:
            pulumi.set(__self__, "adv_interval", adv_interval)
        if preempt is not None:
            pulumi.set(__self__, "preempt", preempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vrdst6 is not None:
            pulumi.set(__self__, "vrdst6", vrdst6)
        if vrgrp is not None:
            pulumi.set(__self__, "vrgrp", vrgrp)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)
        if vrip6 is not None:
            pulumi.set(__self__, "vrip6", vrip6)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accept_mode")

    @accept_mode.setter
    def accept_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_mode", value)

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "adv_interval")

    @adv_interval.setter
    def adv_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_interval", value)

    @property
    @pulumi.getter
    def preempt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preempt")

    @preempt.setter
    def preempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preempt", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vrdst6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrdst6")

    @vrdst6.setter
    def vrdst6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrdst6", value)

    @property
    @pulumi.getter
    def vrgrp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrgrp")

    @vrgrp.setter
    def vrgrp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrgrp", value)

    @property
    @pulumi.getter
    def vrid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrid")

    @vrid.setter
    def vrid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrid", value)

    @property
    @pulumi.getter
    def vrip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrip6")

    @vrip6.setter
    def vrip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrip6", value)


@pulumi.input_type
class SystemInterfaceManagedDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemInterfaceMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemInterfaceSecondaryipArgs:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 detectprotocol: Optional[pulumi.Input[str]] = None,
                 detectserver: Optional[pulumi.Input[str]] = None,
                 gwdetect: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ping_serv_status: Optional[pulumi.Input[int]] = None,
                 secip_relay_ip: Optional[pulumi.Input[str]] = None):
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if detectprotocol is not None:
            pulumi.set(__self__, "detectprotocol", detectprotocol)
        if detectserver is not None:
            pulumi.set(__self__, "detectserver", detectserver)
        if gwdetect is not None:
            pulumi.set(__self__, "gwdetect", gwdetect)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ping_serv_status is not None:
            pulumi.set(__self__, "ping_serv_status", ping_serv_status)
        if secip_relay_ip is not None:
            pulumi.set(__self__, "secip_relay_ip", secip_relay_ip)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter
    def detectprotocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detectprotocol")

    @detectprotocol.setter
    def detectprotocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detectprotocol", value)

    @property
    @pulumi.getter
    def detectserver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detectserver")

    @detectserver.setter
    def detectserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detectserver", value)

    @property
    @pulumi.getter
    def gwdetect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gwdetect")

    @gwdetect.setter
    def gwdetect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gwdetect", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ping_serv_status")

    @ping_serv_status.setter
    def ping_serv_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_serv_status", value)

    @property
    @pulumi.getter(name="secipRelayIp")
    def secip_relay_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secip_relay_ip")

    @secip_relay_ip.setter
    def secip_relay_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secip_relay_ip", value)


@pulumi.input_type
class SystemInterfaceSecurityGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemInterfaceTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceTaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceTaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SystemInterfaceTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemInterfaceVrrpArgs:
    def __init__(__self__, *,
                 accept_mode: Optional[pulumi.Input[str]] = None,
                 adv_interval: Optional[pulumi.Input[int]] = None,
                 ignore_default_route: Optional[pulumi.Input[str]] = None,
                 preempt: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proxy_arps: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceVrrpProxyArpArgs']]]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 vrdst: Optional[pulumi.Input[str]] = None,
                 vrdst_priority: Optional[pulumi.Input[int]] = None,
                 vrgrp: Optional[pulumi.Input[int]] = None,
                 vrid: Optional[pulumi.Input[int]] = None,
                 vrip: Optional[pulumi.Input[str]] = None):
        if accept_mode is not None:
            pulumi.set(__self__, "accept_mode", accept_mode)
        if adv_interval is not None:
            pulumi.set(__self__, "adv_interval", adv_interval)
        if ignore_default_route is not None:
            pulumi.set(__self__, "ignore_default_route", ignore_default_route)
        if preempt is not None:
            pulumi.set(__self__, "preempt", preempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if proxy_arps is not None:
            pulumi.set(__self__, "proxy_arps", proxy_arps)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vrdst is not None:
            pulumi.set(__self__, "vrdst", vrdst)
        if vrdst_priority is not None:
            pulumi.set(__self__, "vrdst_priority", vrdst_priority)
        if vrgrp is not None:
            pulumi.set(__self__, "vrgrp", vrgrp)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)
        if vrip is not None:
            pulumi.set(__self__, "vrip", vrip)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accept_mode")

    @accept_mode.setter
    def accept_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_mode", value)

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "adv_interval")

    @adv_interval.setter
    def adv_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_interval", value)

    @property
    @pulumi.getter(name="ignoreDefaultRoute")
    def ignore_default_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_default_route")

    @ignore_default_route.setter
    def ignore_default_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_default_route", value)

    @property
    @pulumi.getter
    def preempt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preempt")

    @preempt.setter
    def preempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preempt", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="proxyArps")
    def proxy_arps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceVrrpProxyArpArgs']]]]:
        return pulumi.get(self, "proxy_arps")

    @proxy_arps.setter
    def proxy_arps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceVrrpProxyArpArgs']]]]):
        pulumi.set(self, "proxy_arps", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def vrdst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrdst")

    @vrdst.setter
    def vrdst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrdst", value)

    @property
    @pulumi.getter(name="vrdstPriority")
    def vrdst_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrdst_priority")

    @vrdst_priority.setter
    def vrdst_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrdst_priority", value)

    @property
    @pulumi.getter
    def vrgrp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrgrp")

    @vrgrp.setter
    def vrgrp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrgrp", value)

    @property
    @pulumi.getter
    def vrid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrid")

    @vrid.setter
    def vrid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrid", value)

    @property
    @pulumi.getter
    def vrip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrip")

    @vrip.setter
    def vrip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrip", value)


@pulumi.input_type
class SystemInterfaceVrrpProxyArpArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SystemIpamPoolArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class SystemIpamRuleArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['SystemIpamRuleDeviceArgs']]]] = None,
                 dhcp: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['SystemIpamRuleInterfaceArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pools: Optional[pulumi.Input[Sequence[pulumi.Input['SystemIpamRulePoolArgs']]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pools is not None:
            pulumi.set(__self__, "pools", pools)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemIpamRuleDeviceArgs']]]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemIpamRuleDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemIpamRuleInterfaceArgs']]]]:
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemIpamRuleInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemIpamRulePoolArgs']]]]:
        return pulumi.get(self, "pools")

    @pools.setter
    def pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemIpamRulePoolArgs']]]]):
        pulumi.set(self, "pools", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class SystemIpamRuleDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemIpamRuleInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemIpamRulePoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemIpsecAggregateMemberArgs:
    def __init__(__self__, *,
                 tunnel_name: Optional[pulumi.Input[str]] = None):
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_name")

    @tunnel_name.setter
    def tunnel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_name", value)


@pulumi.input_type
class SystemLinkMonitorRouteArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class SystemLinkMonitorServerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class SystemLinkMonitorServerListArgs:
    def __init__(__self__, *,
                 dst: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class SystemLldpNetworkPolicyGuestArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyGuestVoiceSignalingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicySoftphoneArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyStreamingVideoArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyVideoConferencingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyVideoSignalingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyVoiceArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyVoiceSignalingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemMobileTunnelNetworkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class SystemNat64SecondaryPrefixArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 nat64_prefix: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat64_prefix is not None:
            pulumi.set(__self__, "nat64_prefix", nat64_prefix)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nat64Prefix")
    def nat64_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat64_prefix")

    @nat64_prefix.setter
    def nat64_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64_prefix", value)


@pulumi.input_type
class SystemNdProxyMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemNpuPriorityProtocolArgs:
    def __init__(__self__, *,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bgp: Optional[pulumi.Input[str]] = None,
                 slbc: Optional[pulumi.Input[str]] = None):
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if bgp is not None:
            pulumi.set(__self__, "bgp", bgp)
        if slbc is not None:
            pulumi.set(__self__, "slbc", slbc)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def bgp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgp")

    @bgp.setter
    def bgp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp", value)

    @property
    @pulumi.getter
    def slbc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slbc")

    @slbc.setter
    def slbc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slbc", value)


@pulumi.input_type
class SystemNtpInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemNtpNtpserverArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 ntpv3: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if ntpv3 is not None:
            pulumi.set(__self__, "ntpv3", ntpv3)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter
    def ntpv3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntpv3")

    @ntpv3.setter
    def ntpv3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntpv3", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class SystemObjectTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemPcpServerPoolArgs:
    def __init__(__self__, *,
                 allow_opcode: Optional[pulumi.Input[str]] = None,
                 announcement_count: Optional[pulumi.Input[int]] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 client_mapping_limit: Optional[pulumi.Input[int]] = None,
                 client_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['SystemPcpServerPoolClientSubnetArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ext_intf: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 intl_intfs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemPcpServerPoolIntlIntfArgs']]]] = None,
                 mapping_filter_limit: Optional[pulumi.Input[int]] = None,
                 maximal_lifetime: Optional[pulumi.Input[int]] = None,
                 minimal_lifetime: Optional[pulumi.Input[int]] = None,
                 multicast_announcement: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 recycle_delay: Optional[pulumi.Input[int]] = None,
                 third_party: Optional[pulumi.Input[str]] = None,
                 third_party_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['SystemPcpServerPoolThirdPartySubnetArgs']]]] = None):
        if allow_opcode is not None:
            pulumi.set(__self__, "allow_opcode", allow_opcode)
        if announcement_count is not None:
            pulumi.set(__self__, "announcement_count", announcement_count)
        if arp_reply is not None:
            pulumi.set(__self__, "arp_reply", arp_reply)
        if client_mapping_limit is not None:
            pulumi.set(__self__, "client_mapping_limit", client_mapping_limit)
        if client_subnets is not None:
            pulumi.set(__self__, "client_subnets", client_subnets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ext_intf is not None:
            pulumi.set(__self__, "ext_intf", ext_intf)
        if extip is not None:
            pulumi.set(__self__, "extip", extip)
        if extport is not None:
            pulumi.set(__self__, "extport", extport)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if intl_intfs is not None:
            pulumi.set(__self__, "intl_intfs", intl_intfs)
        if mapping_filter_limit is not None:
            pulumi.set(__self__, "mapping_filter_limit", mapping_filter_limit)
        if maximal_lifetime is not None:
            pulumi.set(__self__, "maximal_lifetime", maximal_lifetime)
        if minimal_lifetime is not None:
            pulumi.set(__self__, "minimal_lifetime", minimal_lifetime)
        if multicast_announcement is not None:
            pulumi.set(__self__, "multicast_announcement", multicast_announcement)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recycle_delay is not None:
            pulumi.set(__self__, "recycle_delay", recycle_delay)
        if third_party is not None:
            pulumi.set(__self__, "third_party", third_party)
        if third_party_subnets is not None:
            pulumi.set(__self__, "third_party_subnets", third_party_subnets)

    @property
    @pulumi.getter(name="allowOpcode")
    def allow_opcode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allow_opcode")

    @allow_opcode.setter
    def allow_opcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_opcode", value)

    @property
    @pulumi.getter(name="announcementCount")
    def announcement_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "announcement_count")

    @announcement_count.setter
    def announcement_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "announcement_count", value)

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arp_reply")

    @arp_reply.setter
    def arp_reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_reply", value)

    @property
    @pulumi.getter(name="clientMappingLimit")
    def client_mapping_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "client_mapping_limit")

    @client_mapping_limit.setter
    def client_mapping_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_mapping_limit", value)

    @property
    @pulumi.getter(name="clientSubnets")
    def client_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemPcpServerPoolClientSubnetArgs']]]]:
        return pulumi.get(self, "client_subnets")

    @client_subnets.setter
    def client_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemPcpServerPoolClientSubnetArgs']]]]):
        pulumi.set(self, "client_subnets", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="extIntf")
    def ext_intf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ext_intf")

    @ext_intf.setter
    def ext_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_intf", value)

    @property
    @pulumi.getter
    def extip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extip")

    @extip.setter
    def extip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extip", value)

    @property
    @pulumi.getter
    def extport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extport")

    @extport.setter
    def extport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extport", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="intlIntfs")
    def intl_intfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemPcpServerPoolIntlIntfArgs']]]]:
        return pulumi.get(self, "intl_intfs")

    @intl_intfs.setter
    def intl_intfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemPcpServerPoolIntlIntfArgs']]]]):
        pulumi.set(self, "intl_intfs", value)

    @property
    @pulumi.getter(name="mappingFilterLimit")
    def mapping_filter_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mapping_filter_limit")

    @mapping_filter_limit.setter
    def mapping_filter_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mapping_filter_limit", value)

    @property
    @pulumi.getter(name="maximalLifetime")
    def maximal_lifetime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximal_lifetime")

    @maximal_lifetime.setter
    def maximal_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximal_lifetime", value)

    @property
    @pulumi.getter(name="minimalLifetime")
    def minimal_lifetime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minimal_lifetime")

    @minimal_lifetime.setter
    def minimal_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimal_lifetime", value)

    @property
    @pulumi.getter(name="multicastAnnouncement")
    def multicast_announcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_announcement")

    @multicast_announcement.setter
    def multicast_announcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_announcement", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="recycleDelay")
    def recycle_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "recycle_delay")

    @recycle_delay.setter
    def recycle_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recycle_delay", value)

    @property
    @pulumi.getter(name="thirdParty")
    def third_party(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "third_party")

    @third_party.setter
    def third_party(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "third_party", value)

    @property
    @pulumi.getter(name="thirdPartySubnets")
    def third_party_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemPcpServerPoolThirdPartySubnetArgs']]]]:
        return pulumi.get(self, "third_party_subnets")

    @third_party_subnets.setter
    def third_party_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemPcpServerPoolThirdPartySubnetArgs']]]]):
        pulumi.set(self, "third_party_subnets", value)


@pulumi.input_type
class SystemPcpServerPoolClientSubnetArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class SystemPcpServerPoolIntlIntfArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemPcpServerPoolThirdPartySubnetArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class SystemPtpServerInterfaceArgs:
    def __init__(__self__, *,
                 delay_mechanism: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server_interface_name: Optional[pulumi.Input[str]] = None):
        if delay_mechanism is not None:
            pulumi.set(__self__, "delay_mechanism", delay_mechanism)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_interface_name is not None:
            pulumi.set(__self__, "server_interface_name", server_interface_name)

    @property
    @pulumi.getter(name="delayMechanism")
    def delay_mechanism(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delay_mechanism")

    @delay_mechanism.setter
    def delay_mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delay_mechanism", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="serverInterfaceName")
    def server_interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_interface_name")

    @server_interface_name.setter
    def server_interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_interface_name", value)


@pulumi.input_type
class SystemReplacemsgGroupAdminArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupAlertmailArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupAuthArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupAutomationArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupCustomMessageArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupDeviceDetectionPortalArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupEcArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupFortiguardWfArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupFtpArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupHttpArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupIcapArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupMailArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupNacQuarArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupNntpArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupSpamArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupSslvpnArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupTrafficQuotaArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupUtmArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupWebproxyArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemSamlServiceProviderArgs:
    def __init__(__self__, *,
                 assertion_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderAssertionAttributeArgs']]]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 sp_binding_protocol: Optional[pulumi.Input[str]] = None,
                 sp_cert: Optional[pulumi.Input[str]] = None,
                 sp_entity_id: Optional[pulumi.Input[str]] = None,
                 sp_portal_url: Optional[pulumi.Input[str]] = None,
                 sp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 sp_single_sign_on_url: Optional[pulumi.Input[str]] = None):
        if assertion_attributes is not None:
            pulumi.set(__self__, "assertion_attributes", assertion_attributes)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url is not None:
            pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if sp_binding_protocol is not None:
            pulumi.set(__self__, "sp_binding_protocol", sp_binding_protocol)
        if sp_cert is not None:
            pulumi.set(__self__, "sp_cert", sp_cert)
        if sp_entity_id is not None:
            pulumi.set(__self__, "sp_entity_id", sp_entity_id)
        if sp_portal_url is not None:
            pulumi.set(__self__, "sp_portal_url", sp_portal_url)
        if sp_single_logout_url is not None:
            pulumi.set(__self__, "sp_single_logout_url", sp_single_logout_url)
        if sp_single_sign_on_url is not None:
            pulumi.set(__self__, "sp_single_sign_on_url", sp_single_sign_on_url)

    @property
    @pulumi.getter(name="assertionAttributes")
    def assertion_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderAssertionAttributeArgs']]]]:
        return pulumi.get(self, "assertion_attributes")

    @assertion_attributes.setter
    def assertion_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderAssertionAttributeArgs']]]]):
        pulumi.set(self, "assertion_attributes", value)

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_entity_id")

    @idp_entity_id.setter
    def idp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_entity_id", value)

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_single_logout_url")

    @idp_single_logout_url.setter
    def idp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_logout_url", value)

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_single_sign_on_url")

    @idp_single_sign_on_url.setter
    def idp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_sign_on_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="spBindingProtocol")
    def sp_binding_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sp_binding_protocol")

    @sp_binding_protocol.setter
    def sp_binding_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_binding_protocol", value)

    @property
    @pulumi.getter(name="spCert")
    def sp_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sp_cert")

    @sp_cert.setter
    def sp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_cert", value)

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sp_entity_id")

    @sp_entity_id.setter
    def sp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_entity_id", value)

    @property
    @pulumi.getter(name="spPortalUrl")
    def sp_portal_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sp_portal_url")

    @sp_portal_url.setter
    def sp_portal_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_portal_url", value)

    @property
    @pulumi.getter(name="spSingleLogoutUrl")
    def sp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sp_single_logout_url")

    @sp_single_logout_url.setter
    def sp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_single_logout_url", value)

    @property
    @pulumi.getter(name="spSingleSignOnUrl")
    def sp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sp_single_sign_on_url")

    @sp_single_sign_on_url.setter
    def sp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_single_sign_on_url", value)


@pulumi.input_type
class SystemSamlServiceProviderAssertionAttributeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemSdnConnectorCompartmentListArgs:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)


@pulumi.input_type
class SystemSdnConnectorExternalAccountListArgs:
    def __init__(__self__, *,
                 external_id: Optional[pulumi.Input[str]] = None,
                 region_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorExternalAccountListRegionListArgs']]]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if region_lists is not None:
            pulumi.set(__self__, "region_lists", region_lists)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="regionLists")
    def region_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorExternalAccountListRegionListArgs']]]]:
        return pulumi.get(self, "region_lists")

    @region_lists.setter
    def region_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorExternalAccountListRegionListArgs']]]]):
        pulumi.set(self, "region_lists", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class SystemSdnConnectorExternalAccountListRegionListArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class SystemSdnConnectorExternalIpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdnConnectorForwardingRuleArgs:
    def __init__(__self__, *,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class SystemSdnConnectorGcpProjectListArgs:
    def __init__(__self__, *,
                 gcp_zone_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorGcpProjectListGcpZoneListArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        if gcp_zone_lists is not None:
            pulumi.set(__self__, "gcp_zone_lists", gcp_zone_lists)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="gcpZoneLists")
    def gcp_zone_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorGcpProjectListGcpZoneListArgs']]]]:
        return pulumi.get(self, "gcp_zone_lists")

    @gcp_zone_lists.setter
    def gcp_zone_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorGcpProjectListGcpZoneListArgs']]]]):
        pulumi.set(self, "gcp_zone_lists", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemSdnConnectorGcpProjectListGcpZoneListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdnConnectorNicArgs:
    def __init__(__self__, *,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorNicIpArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorNicIpArgs']]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorNicIpArgs']]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdnConnectorNicIpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)


@pulumi.input_type
class SystemSdnConnectorOciRegionListArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class SystemSdnConnectorRouteArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdnConnectorRouteTableArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorRouteTableRouteArgs']]]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorRouteTableRouteArgs']]]]:
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorRouteTableRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class SystemSdnConnectorRouteTableRouteArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 next_hop: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop", value)


@pulumi.input_type
class SystemSdnConnectorServerListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SystemSdwanDuplicationArgs:
    def __init__(__self__, *,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddr6Args']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddrArgs']]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstintfArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 packet_de_duplication: Optional[pulumi.Input[str]] = None,
                 packet_duplication: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceIdArgs']]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceArgs']]]] = None,
                 sla_match_service: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddr6Args']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddrArgs']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcintfArgs']]]] = None):
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if packet_de_duplication is not None:
            pulumi.set(__self__, "packet_de_duplication", packet_de_duplication)
        if packet_duplication is not None:
            pulumi.set(__self__, "packet_duplication", packet_duplication)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if sla_match_service is not None:
            pulumi.set(__self__, "sla_match_service", sla_match_service)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddr6Args']]]]:
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddrArgs']]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstintfArgs']]]]:
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="packetDeDuplication")
    def packet_de_duplication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "packet_de_duplication")

    @packet_de_duplication.setter
    def packet_de_duplication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_de_duplication", value)

    @property
    @pulumi.getter(name="packetDuplication")
    def packet_duplication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "packet_duplication")

    @packet_duplication.setter
    def packet_duplication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_duplication", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceIdArgs']]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceIdArgs']]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceArgs']]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="slaMatchService")
    def sla_match_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_match_service")

    @sla_match_service.setter
    def sla_match_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_match_service", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddr6Args']]]]:
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddrArgs']]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcintfArgs']]]]:
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)


@pulumi.input_type
class SystemSdwanDuplicationDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemSdwanDuplicationSrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationSrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationSrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanFailAlertInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanHealthCheckArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 detect_mode: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dns_match_ip: Optional[pulumi.Input[str]] = None,
                 dns_request_domain: Optional[pulumi.Input[str]] = None,
                 embed_measured_health: Optional[pulumi.Input[str]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 ftp_file: Optional[pulumi.Input[str]] = None,
                 ftp_mode: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 http_agent: Optional[pulumi.Input[str]] = None,
                 http_get: Optional[pulumi.Input[str]] = None,
                 http_match: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckMemberArgs']]]] = None,
                 mos_codec: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 probe_count: Optional[pulumi.Input[int]] = None,
                 probe_packets: Optional[pulumi.Input[str]] = None,
                 probe_timeout: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quality_measured_method: Optional[pulumi.Input[str]] = None,
                 recoverytime: Optional[pulumi.Input[int]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 sla_fail_log_period: Optional[pulumi.Input[int]] = None,
                 sla_id_redistribute: Optional[pulumi.Input[int]] = None,
                 sla_pass_log_period: Optional[pulumi.Input[int]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckSlaArgs']]]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source6: Optional[pulumi.Input[str]] = None,
                 system_dns: Optional[pulumi.Input[str]] = None,
                 threshold_alert_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_alert_latency: Optional[pulumi.Input[int]] = None,
                 threshold_alert_packetloss: Optional[pulumi.Input[int]] = None,
                 threshold_warning_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_warning_latency: Optional[pulumi.Input[int]] = None,
                 threshold_warning_packetloss: Optional[pulumi.Input[int]] = None,
                 update_cascade_interface: Optional[pulumi.Input[str]] = None,
                 update_static_route: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[int]] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if detect_mode is not None:
            pulumi.set(__self__, "detect_mode", detect_mode)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dns_match_ip is not None:
            pulumi.set(__self__, "dns_match_ip", dns_match_ip)
        if dns_request_domain is not None:
            pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        if embed_measured_health is not None:
            pulumi.set(__self__, "embed_measured_health", embed_measured_health)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if ftp_file is not None:
            pulumi.set(__self__, "ftp_file", ftp_file)
        if ftp_mode is not None:
            pulumi.set(__self__, "ftp_mode", ftp_mode)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if mos_codec is not None:
            pulumi.set(__self__, "mos_codec", mos_codec)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_packets is not None:
            pulumi.set(__self__, "probe_packets", probe_packets)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_measured_method is not None:
            pulumi.set(__self__, "quality_measured_method", quality_measured_method)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if sla_fail_log_period is not None:
            pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        if sla_id_redistribute is not None:
            pulumi.set(__self__, "sla_id_redistribute", sla_id_redistribute)
        if sla_pass_log_period is not None:
            pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if system_dns is not None:
            pulumi.set(__self__, "system_dns", system_dns)
        if threshold_alert_jitter is not None:
            pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        if threshold_alert_latency is not None:
            pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        if threshold_alert_packetloss is not None:
            pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        if threshold_warning_jitter is not None:
            pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        if threshold_warning_latency is not None:
            pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        if threshold_warning_packetloss is not None:
            pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter(name="detectMode")
    def detect_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detect_mode")

    @detect_mode.setter
    def detect_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detect_mode", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dnsMatchIp")
    def dns_match_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_match_ip")

    @dns_match_ip.setter
    def dns_match_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_match_ip", value)

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_request_domain")

    @dns_request_domain.setter
    def dns_request_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_request_domain", value)

    @property
    @pulumi.getter(name="embedMeasuredHealth")
    def embed_measured_health(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "embed_measured_health")

    @embed_measured_health.setter
    def embed_measured_health(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "embed_measured_health", value)

    @property
    @pulumi.getter
    def failtime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failtime")

    @failtime.setter
    def failtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failtime", value)

    @property
    @pulumi.getter(name="ftpFile")
    def ftp_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftp_file")

    @ftp_file.setter
    def ftp_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_file", value)

    @property
    @pulumi.getter(name="ftpMode")
    def ftp_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftp_mode")

    @ftp_mode.setter
    def ftp_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_mode", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_agent")

    @http_agent.setter
    def http_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_agent", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_match")

    @http_match.setter
    def http_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_match", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckMemberArgs']]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="mosCodec")
    def mos_codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mos_codec")

    @mos_codec.setter
    def mos_codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mos_codec", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "probe_count")

    @probe_count.setter
    def probe_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_count", value)

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "probe_packets")

    @probe_packets.setter
    def probe_packets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_packets", value)

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "probe_timeout")

    @probe_timeout.setter
    def probe_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_timeout", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="qualityMeasuredMethod")
    def quality_measured_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quality_measured_method")

    @quality_measured_method.setter
    def quality_measured_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quality_measured_method", value)

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "recoverytime")

    @recoverytime.setter
    def recoverytime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recoverytime", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sla_fail_log_period")

    @sla_fail_log_period.setter
    def sla_fail_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_fail_log_period", value)

    @property
    @pulumi.getter(name="slaIdRedistribute")
    def sla_id_redistribute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sla_id_redistribute")

    @sla_id_redistribute.setter
    def sla_id_redistribute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_id_redistribute", value)

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sla_pass_log_period")

    @sla_pass_log_period.setter
    def sla_pass_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_pass_log_period", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckSlaArgs']]]]:
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def source6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source6")

    @source6.setter
    def source6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source6", value)

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_dns")

    @system_dns.setter
    def system_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_dns", value)

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_alert_jitter")

    @threshold_alert_jitter.setter
    def threshold_alert_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_jitter", value)

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_alert_latency")

    @threshold_alert_latency.setter
    def threshold_alert_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_latency", value)

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_alert_packetloss")

    @threshold_alert_packetloss.setter
    def threshold_alert_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_packetloss", value)

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_warning_jitter")

    @threshold_warning_jitter.setter
    def threshold_warning_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_jitter", value)

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_warning_latency")

    @threshold_warning_latency.setter
    def threshold_warning_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_latency", value)

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_warning_packetloss")

    @threshold_warning_packetloss.setter
    def threshold_warning_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_packetloss", value)

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_cascade_interface")

    @update_cascade_interface.setter
    def update_cascade_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_cascade_interface", value)

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_static_route")

    @update_static_route.setter
    def update_static_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_static_route", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class SystemSdwanHealthCheckMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SystemSdwanHealthCheckSlaArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 jitter_threshold: Optional[pulumi.Input[int]] = None,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 mos_threshold: Optional[pulumi.Input[str]] = None,
                 packetloss_threshold: Optional[pulumi.Input[int]] = None,
                 priority_in_sla: Optional[pulumi.Input[int]] = None,
                 priority_out_sla: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if mos_threshold is not None:
            pulumi.set(__self__, "mos_threshold", mos_threshold)
        if packetloss_threshold is not None:
            pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)
        if priority_in_sla is not None:
            pulumi.set(__self__, "priority_in_sla", priority_in_sla)
        if priority_out_sla is not None:
            pulumi.set(__self__, "priority_out_sla", priority_out_sla)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "jitter_threshold")

    @jitter_threshold.setter
    def jitter_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_threshold", value)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="mosThreshold")
    def mos_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mos_threshold")

    @mos_threshold.setter
    def mos_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mos_threshold", value)

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "packetloss_threshold")

    @packetloss_threshold.setter
    def packetloss_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packetloss_threshold", value)

    @property
    @pulumi.getter(name="priorityInSla")
    def priority_in_sla(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority_in_sla")

    @priority_in_sla.setter
    def priority_in_sla(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_in_sla", value)

    @property
    @pulumi.getter(name="priorityOutSla")
    def priority_out_sla(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority_out_sla")

    @priority_out_sla.setter
    def priority_out_sla(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_out_sla", value)


@pulumi.input_type
class SystemSdwanMemberArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 preferred_source: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 priority6: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source6: Optional[pulumi.Input[str]] = None,
                 spillover_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 volume_ratio: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if preferred_source is not None:
            pulumi.set(__self__, "preferred_source", preferred_source)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority6 is not None:
            pulumi.set(__self__, "priority6", priority6)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if volume_ratio is not None:
            pulumi.set(__self__, "volume_ratio", volume_ratio)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ingress_spillover_threshold")

    @ingress_spillover_threshold.setter
    def ingress_spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ingress_spillover_threshold", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="preferredSource")
    def preferred_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_source")

    @preferred_source.setter
    def preferred_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_source", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def priority6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority6")

    @priority6.setter
    def priority6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority6", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def source6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source6")

    @source6.setter
    def source6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source6", value)

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spillover_threshold")

    @spillover_threshold.setter
    def spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spillover_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_ratio")

    @volume_ratio.setter
    def volume_ratio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_ratio", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class SystemSdwanNeighborArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 member: Optional[pulumi.Input[int]] = None,
                 member_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanNeighborMemberBlockArgs']]]] = None,
                 minimum_sla_meet_members: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[int]] = None):
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if member_blocks is not None:
            pulumi.set(__self__, "member_blocks", member_blocks)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def member(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "member")

    @member.setter
    def member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member", value)

    @property
    @pulumi.getter(name="memberBlocks")
    def member_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanNeighborMemberBlockArgs']]]]:
        return pulumi.get(self, "member_blocks")

    @member_blocks.setter
    def member_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanNeighborMemberBlockArgs']]]]):
        pulumi.set(self, "member_blocks", value)

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minimum_sla_meet_members")

    @minimum_sla_meet_members.setter
    def minimum_sla_meet_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_sla_meet_members", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_id", value)


@pulumi.input_type
class SystemSdwanNeighborMemberBlockArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SystemSdwanServiceArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 agent_exclusive: Optional[pulumi.Input[str]] = None,
                 bandwidth_weight: Optional[pulumi.Input[int]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 dscp_forward: Optional[pulumi.Input[str]] = None,
                 dscp_forward_tag: Optional[pulumi.Input[str]] = None,
                 dscp_reverse: Optional[pulumi.Input[str]] = None,
                 dscp_reverse_tag: Optional[pulumi.Input[str]] = None,
                 dst6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDst6Args']]]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDstArgs']]]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceGroupArgs']]]] = None,
                 hash_mode: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceHealthCheckArgs']]]] = None,
                 hold_down_time: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 input_devices: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInputDeviceArgs']]]] = None,
                 input_zones: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInputZoneArgs']]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_app_ctrl_categories: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlCategoryArgs']]]] = None,
                 internet_service_app_ctrl_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlGroupArgs']]]] = None,
                 internet_service_app_ctrls: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlArgs']]]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceGroupArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceNameArgs']]]] = None,
                 jitter_weight: Optional[pulumi.Input[int]] = None,
                 latency_weight: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 link_cost_threshold: Optional[pulumi.Input[int]] = None,
                 minimum_sla_meet_members: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_loss_weight: Optional[pulumi.Input[int]] = None,
                 passive_measurement: Optional[pulumi.Input[str]] = None,
                 priority_members: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityMemberArgs']]]] = None,
                 priority_zones: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityZoneArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 quality_link: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 route_tag: Optional[pulumi.Input[int]] = None,
                 shortcut: Optional[pulumi.Input[str]] = None,
                 shortcut_stickiness: Optional[pulumi.Input[str]] = None,
                 sla_compare_method: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSlaArgs']]]] = None,
                 src6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrc6Args']]]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrcArgs']]]] = None,
                 standalone_action: Optional[pulumi.Input[str]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tie_break: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 use_shortcut_sla: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceUserArgs']]]] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if agent_exclusive is not None:
            pulumi.set(__self__, "agent_exclusive", agent_exclusive)
        if bandwidth_weight is not None:
            pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dscp_forward is not None:
            pulumi.set(__self__, "dscp_forward", dscp_forward)
        if dscp_forward_tag is not None:
            pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        if dscp_reverse is not None:
            pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        if dscp_reverse_tag is not None:
            pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if hash_mode is not None:
            pulumi.set(__self__, "hash_mode", hash_mode)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if input_zones is not None:
            pulumi.set(__self__, "input_zones", input_zones)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_app_ctrl_categories is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_categories", internet_service_app_ctrl_categories)
        if internet_service_app_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        if internet_service_app_ctrls is not None:
            pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if jitter_weight is not None:
            pulumi.set(__self__, "jitter_weight", jitter_weight)
        if latency_weight is not None:
            pulumi.set(__self__, "latency_weight", latency_weight)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if link_cost_threshold is not None:
            pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_loss_weight is not None:
            pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        if passive_measurement is not None:
            pulumi.set(__self__, "passive_measurement", passive_measurement)
        if priority_members is not None:
            pulumi.set(__self__, "priority_members", priority_members)
        if priority_zones is not None:
            pulumi.set(__self__, "priority_zones", priority_zones)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_link is not None:
            pulumi.set(__self__, "quality_link", quality_link)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if shortcut is not None:
            pulumi.set(__self__, "shortcut", shortcut)
        if shortcut_stickiness is not None:
            pulumi.set(__self__, "shortcut_stickiness", shortcut_stickiness)
        if sla_compare_method is not None:
            pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if src6s is not None:
            pulumi.set(__self__, "src6s", src6s)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if standalone_action is not None:
            pulumi.set(__self__, "standalone_action", standalone_action)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tie_break is not None:
            pulumi.set(__self__, "tie_break", tie_break)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if use_shortcut_sla is not None:
            pulumi.set(__self__, "use_shortcut_sla", use_shortcut_sla)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="agentExclusive")
    def agent_exclusive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agent_exclusive")

    @agent_exclusive.setter
    def agent_exclusive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_exclusive", value)

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_weight")

    @bandwidth_weight.setter
    def bandwidth_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_weight", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_forward")

    @dscp_forward.setter
    def dscp_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward", value)

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_forward_tag")

    @dscp_forward_tag.setter
    def dscp_forward_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward_tag", value)

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_reverse")

    @dscp_reverse.setter
    def dscp_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse", value)

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_reverse_tag")

    @dscp_reverse_tag.setter
    def dscp_reverse_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse_tag", value)

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDst6Args']]]]:
        return pulumi.get(self, "dst6s")

    @dst6s.setter
    def dst6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDst6Args']]]]):
        pulumi.set(self, "dst6s", value)

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_negate")

    @dst_negate.setter
    def dst_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_negate", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDstArgs']]]]:
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceGroupArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="hashMode")
    def hash_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash_mode")

    @hash_mode.setter
    def hash_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_mode", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceHealthCheckArgs']]]]:
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceHealthCheckArgs']]]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hold_down_time")

    @hold_down_time.setter
    def hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_down_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_device_negate")

    @input_device_negate.setter
    def input_device_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device_negate", value)

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInputDeviceArgs']]]]:
        return pulumi.get(self, "input_devices")

    @input_devices.setter
    def input_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInputDeviceArgs']]]]):
        pulumi.set(self, "input_devices", value)

    @property
    @pulumi.getter(name="inputZones")
    def input_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInputZoneArgs']]]]:
        return pulumi.get(self, "input_zones")

    @input_zones.setter
    def input_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInputZoneArgs']]]]):
        pulumi.set(self, "input_zones", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrlCategories")
    def internet_service_app_ctrl_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlCategoryArgs']]]]:
        return pulumi.get(self, "internet_service_app_ctrl_categories")

    @internet_service_app_ctrl_categories.setter
    def internet_service_app_ctrl_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlCategoryArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrl_categories", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlGroupArgs']]]]:
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @internet_service_app_ctrl_groups.setter
    def internet_service_app_ctrl_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlGroupArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrl_groups", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlArgs']]]]:
        return pulumi.get(self, "internet_service_app_ctrls")

    @internet_service_app_ctrls.setter
    def internet_service_app_ctrls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrls", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomGroupArgs']]]]:
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomArgs']]]]:
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceGroupArgs']]]]:
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceNameArgs']]]]:
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "jitter_weight")

    @jitter_weight.setter
    def jitter_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_weight", value)

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency_weight")

    @latency_weight.setter
    def latency_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_weight", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "link_cost_threshold")

    @link_cost_threshold.setter
    def link_cost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_cost_threshold", value)

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minimum_sla_meet_members")

    @minimum_sla_meet_members.setter
    def minimum_sla_meet_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_sla_meet_members", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "packet_loss_weight")

    @packet_loss_weight.setter
    def packet_loss_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_loss_weight", value)

    @property
    @pulumi.getter(name="passiveMeasurement")
    def passive_measurement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passive_measurement")

    @passive_measurement.setter
    def passive_measurement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_measurement", value)

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityMemberArgs']]]]:
        return pulumi.get(self, "priority_members")

    @priority_members.setter
    def priority_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityMemberArgs']]]]):
        pulumi.set(self, "priority_members", value)

    @property
    @pulumi.getter(name="priorityZones")
    def priority_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityZoneArgs']]]]:
        return pulumi.get(self, "priority_zones")

    @priority_zones.setter
    def priority_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityZoneArgs']]]]):
        pulumi.set(self, "priority_zones", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quality_link")

    @quality_link.setter
    def quality_link(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_link", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "route_tag")

    @route_tag.setter
    def route_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_tag", value)

    @property
    @pulumi.getter
    def shortcut(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shortcut")

    @shortcut.setter
    def shortcut(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shortcut", value)

    @property
    @pulumi.getter(name="shortcutStickiness")
    def shortcut_stickiness(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shortcut_stickiness")

    @shortcut_stickiness.setter
    def shortcut_stickiness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shortcut_stickiness", value)

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_compare_method")

    @sla_compare_method.setter
    def sla_compare_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_compare_method", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSlaArgs']]]]:
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter
    def src6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrc6Args']]]]:
        return pulumi.get(self, "src6s")

    @src6s.setter
    def src6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrc6Args']]]]):
        pulumi.set(self, "src6s", value)

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_negate")

    @src_negate.setter
    def src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_negate", value)

    @property
    @pulumi.getter
    def srcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrcArgs']]]]:
        return pulumi.get(self, "srcs")

    @srcs.setter
    def srcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrcArgs']]]]):
        pulumi.set(self, "srcs", value)

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "standalone_action")

    @standalone_action.setter
    def standalone_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_action", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tieBreak")
    def tie_break(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tie_break")

    @tie_break.setter
    def tie_break(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tie_break", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter(name="useShortcutSla")
    def use_shortcut_sla(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_shortcut_sla")

    @use_shortcut_sla.setter
    def use_shortcut_sla(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_shortcut_sla", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class SystemSdwanServiceDst6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceHealthCheckArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInputDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInputZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceAppCtrlArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceAppCtrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceAppCtrlGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServicePriorityMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SystemSdwanServicePriorityZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceSlaArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemSdwanServiceSrc6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceSrcArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 service_sla_tie_break: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_sla_tie_break is not None:
            pulumi.set(__self__, "service_sla_tie_break", service_sla_tie_break)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceSlaTieBreak")
    def service_sla_tie_break(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_sla_tie_break")

    @service_sla_tie_break.setter
    def service_sla_tie_break(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_sla_tie_break", value)


@pulumi.input_type
class SystemSessionTtlPortArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class SystemSettingsGuiDefaultPolicyColumnArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSnmpCommunityHostArgs:
    def __init__(__self__, *,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 host_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None):
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)


@pulumi.input_type
class SystemSnmpCommunityHosts6Args:
    def __init__(__self__, *,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 host_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None):
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if source_ipv6 is not None:
            pulumi.set(__self__, "source_ipv6", source_ipv6)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ipv6")

    @source_ipv6.setter
    def source_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ipv6", value)


@pulumi.input_type
class SystemSnmpCommunityVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSnmpUserVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSpeedTestScheduleScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSpeedTestServerHostArgs:
    def __init__(__self__, *,
                 distance: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 latitude: Optional[pulumi.Input[str]] = None,
                 longitude: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def latitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class SystemSsoAdminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSsoForticloudAdminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSsoFortigateCloudAdminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemStandaloneClusterClusterPeerArgs:
    def __init__(__self__, *,
                 down_intfs_before_sess_syncs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSyncArgs']]]] = None,
                 hb_interval: Optional[pulumi.Input[int]] = None,
                 hb_lost_threshold: Optional[pulumi.Input[int]] = None,
                 ipsec_tunnel_sync: Optional[pulumi.Input[str]] = None,
                 peerip: Optional[pulumi.Input[str]] = None,
                 peervd: Optional[pulumi.Input[str]] = None,
                 secondary_add_ipsec_routes: Optional[pulumi.Input[str]] = None,
                 session_sync_filter: Optional[pulumi.Input['SystemStandaloneClusterClusterPeerSessionSyncFilterArgs']] = None,
                 sync_id: Optional[pulumi.Input[int]] = None,
                 syncvds: Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerSyncvdArgs']]]] = None):
        if down_intfs_before_sess_syncs is not None:
            pulumi.set(__self__, "down_intfs_before_sess_syncs", down_intfs_before_sess_syncs)
        if hb_interval is not None:
            pulumi.set(__self__, "hb_interval", hb_interval)
        if hb_lost_threshold is not None:
            pulumi.set(__self__, "hb_lost_threshold", hb_lost_threshold)
        if ipsec_tunnel_sync is not None:
            pulumi.set(__self__, "ipsec_tunnel_sync", ipsec_tunnel_sync)
        if peerip is not None:
            pulumi.set(__self__, "peerip", peerip)
        if peervd is not None:
            pulumi.set(__self__, "peervd", peervd)
        if secondary_add_ipsec_routes is not None:
            pulumi.set(__self__, "secondary_add_ipsec_routes", secondary_add_ipsec_routes)
        if session_sync_filter is not None:
            pulumi.set(__self__, "session_sync_filter", session_sync_filter)
        if sync_id is not None:
            pulumi.set(__self__, "sync_id", sync_id)
        if syncvds is not None:
            pulumi.set(__self__, "syncvds", syncvds)

    @property
    @pulumi.getter(name="downIntfsBeforeSessSyncs")
    def down_intfs_before_sess_syncs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSyncArgs']]]]:
        return pulumi.get(self, "down_intfs_before_sess_syncs")

    @down_intfs_before_sess_syncs.setter
    def down_intfs_before_sess_syncs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSyncArgs']]]]):
        pulumi.set(self, "down_intfs_before_sess_syncs", value)

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hb_interval")

    @hb_interval.setter
    def hb_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_interval", value)

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hb_lost_threshold")

    @hb_lost_threshold.setter
    def hb_lost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_lost_threshold", value)

    @property
    @pulumi.getter(name="ipsecTunnelSync")
    def ipsec_tunnel_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipsec_tunnel_sync")

    @ipsec_tunnel_sync.setter
    def ipsec_tunnel_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_tunnel_sync", value)

    @property
    @pulumi.getter
    def peerip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peerip")

    @peerip.setter
    def peerip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peerip", value)

    @property
    @pulumi.getter
    def peervd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peervd")

    @peervd.setter
    def peervd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peervd", value)

    @property
    @pulumi.getter(name="secondaryAddIpsecRoutes")
    def secondary_add_ipsec_routes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_add_ipsec_routes")

    @secondary_add_ipsec_routes.setter
    def secondary_add_ipsec_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_add_ipsec_routes", value)

    @property
    @pulumi.getter(name="sessionSyncFilter")
    def session_sync_filter(self) -> Optional[pulumi.Input['SystemStandaloneClusterClusterPeerSessionSyncFilterArgs']]:
        return pulumi.get(self, "session_sync_filter")

    @session_sync_filter.setter
    def session_sync_filter(self, value: Optional[pulumi.Input['SystemStandaloneClusterClusterPeerSessionSyncFilterArgs']]):
        pulumi.set(self, "session_sync_filter", value)

    @property
    @pulumi.getter(name="syncId")
    def sync_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sync_id")

    @sync_id.setter
    def sync_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_id", value)

    @property
    @pulumi.getter
    def syncvds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerSyncvdArgs']]]]:
        return pulumi.get(self, "syncvds")

    @syncvds.setter
    def syncvds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerSyncvdArgs']]]]):
        pulumi.set(self, "syncvds", value)


@pulumi.input_type
class SystemStandaloneClusterClusterPeerDownIntfsBeforeSessSyncArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemStandaloneClusterClusterPeerSessionSyncFilterArgs:
    def __init__(__self__, *,
                 custom_services: Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerSessionSyncFilterCustomServiceArgs']]]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstaddr6: Optional[pulumi.Input[str]] = None,
                 dstintf: Optional[pulumi.Input[str]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcaddr6: Optional[pulumi.Input[str]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None):
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstaddr6 is not None:
            pulumi.set(__self__, "dstaddr6", dstaddr6)
        if dstintf is not None:
            pulumi.set(__self__, "dstintf", dstintf)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcaddr6 is not None:
            pulumi.set(__self__, "srcaddr6", srcaddr6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerSessionSyncFilterCustomServiceArgs']]]]:
        return pulumi.get(self, "custom_services")

    @custom_services.setter
    def custom_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemStandaloneClusterClusterPeerSessionSyncFilterCustomServiceArgs']]]]):
        pulumi.set(self, "custom_services", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstaddr6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstaddr6")

    @dstaddr6.setter
    def dstaddr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr6", value)

    @property
    @pulumi.getter
    def dstintf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstintf")

    @dstintf.setter
    def dstintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstintf", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcaddr6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr6")

    @srcaddr6.setter
    def srcaddr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr6", value)

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcintf")

    @srcintf.setter
    def srcintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcintf", value)


@pulumi.input_type
class SystemStandaloneClusterClusterPeerSessionSyncFilterCustomServiceArgs:
    def __init__(__self__, *,
                 dst_port_range: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_port_range: Optional[pulumi.Input[str]] = None):
        if dst_port_range is not None:
            pulumi.set(__self__, "dst_port_range", dst_port_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_port_range is not None:
            pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_port_range")

    @dst_port_range.setter
    def dst_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port_range", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_port_range")

    @src_port_range.setter
    def src_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port_range", value)


@pulumi.input_type
class SystemStandaloneClusterClusterPeerSyncvdArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSwitchInterfaceMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemSwitchInterfaceSpanSourcePortArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemVdomDnsServerHostnameArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class SystemVdomExceptionVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualSwitchPortArgs:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkFailAlertInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkHealthCheckArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dns_request_domain: Optional[pulumi.Input[str]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 http_agent: Optional[pulumi.Input[str]] = None,
                 http_get: Optional[pulumi.Input[str]] = None,
                 http_match: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 probe_count: Optional[pulumi.Input[int]] = None,
                 probe_packets: Optional[pulumi.Input[str]] = None,
                 probe_timeout: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 recoverytime: Optional[pulumi.Input[int]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 sla_fail_log_period: Optional[pulumi.Input[int]] = None,
                 sla_pass_log_period: Optional[pulumi.Input[int]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckSlaArgs']]]] = None,
                 system_dns: Optional[pulumi.Input[str]] = None,
                 threshold_alert_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_alert_latency: Optional[pulumi.Input[int]] = None,
                 threshold_alert_packetloss: Optional[pulumi.Input[int]] = None,
                 threshold_warning_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_warning_latency: Optional[pulumi.Input[int]] = None,
                 threshold_warning_packetloss: Optional[pulumi.Input[int]] = None,
                 update_cascade_interface: Optional[pulumi.Input[str]] = None,
                 update_static_route: Optional[pulumi.Input[str]] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dns_request_domain is not None:
            pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_packets is not None:
            pulumi.set(__self__, "probe_packets", probe_packets)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if sla_fail_log_period is not None:
            pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        if sla_pass_log_period is not None:
            pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if system_dns is not None:
            pulumi.set(__self__, "system_dns", system_dns)
        if threshold_alert_jitter is not None:
            pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        if threshold_alert_latency is not None:
            pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        if threshold_alert_packetloss is not None:
            pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        if threshold_warning_jitter is not None:
            pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        if threshold_warning_latency is not None:
            pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        if threshold_warning_packetloss is not None:
            pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_request_domain")

    @dns_request_domain.setter
    def dns_request_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_request_domain", value)

    @property
    @pulumi.getter
    def failtime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failtime")

    @failtime.setter
    def failtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failtime", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_agent")

    @http_agent.setter
    def http_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_agent", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_match")

    @http_match.setter
    def http_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_match", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckMemberArgs']]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "probe_count")

    @probe_count.setter
    def probe_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_count", value)

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "probe_packets")

    @probe_packets.setter
    def probe_packets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_packets", value)

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "probe_timeout")

    @probe_timeout.setter
    def probe_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_timeout", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "recoverytime")

    @recoverytime.setter
    def recoverytime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recoverytime", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sla_fail_log_period")

    @sla_fail_log_period.setter
    def sla_fail_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_fail_log_period", value)

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sla_pass_log_period")

    @sla_pass_log_period.setter
    def sla_pass_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_pass_log_period", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckSlaArgs']]]]:
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_dns")

    @system_dns.setter
    def system_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_dns", value)

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_alert_jitter")

    @threshold_alert_jitter.setter
    def threshold_alert_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_jitter", value)

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_alert_latency")

    @threshold_alert_latency.setter
    def threshold_alert_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_latency", value)

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_alert_packetloss")

    @threshold_alert_packetloss.setter
    def threshold_alert_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_packetloss", value)

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_warning_jitter")

    @threshold_warning_jitter.setter
    def threshold_warning_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_jitter", value)

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_warning_latency")

    @threshold_warning_latency.setter
    def threshold_warning_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_latency", value)

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold_warning_packetloss")

    @threshold_warning_packetloss.setter
    def threshold_warning_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_packetloss", value)

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_cascade_interface")

    @update_cascade_interface.setter
    def update_cascade_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_cascade_interface", value)

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_static_route")

    @update_static_route.setter
    def update_static_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_static_route", value)


@pulumi.input_type
class SystemVirtualWanLinkHealthCheckMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SystemVirtualWanLinkHealthCheckSlaArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 jitter_threshold: Optional[pulumi.Input[int]] = None,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 packetloss_threshold: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if packetloss_threshold is not None:
            pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "jitter_threshold")

    @jitter_threshold.setter
    def jitter_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_threshold", value)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "packetloss_threshold")

    @packetloss_threshold.setter
    def packetloss_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packetloss_threshold", value)


@pulumi.input_type
class SystemVirtualWanLinkMemberArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source6: Optional[pulumi.Input[str]] = None,
                 spillover_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 volume_ratio: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if volume_ratio is not None:
            pulumi.set(__self__, "volume_ratio", volume_ratio)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ingress_spillover_threshold")

    @ingress_spillover_threshold.setter
    def ingress_spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ingress_spillover_threshold", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def source6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source6")

    @source6.setter
    def source6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source6", value)

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spillover_threshold")

    @spillover_threshold.setter
    def spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spillover_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_ratio")

    @volume_ratio.setter
    def volume_ratio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_ratio", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class SystemVirtualWanLinkNeighborArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 member: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[int]] = None):
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def member(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "member")

    @member.setter
    def member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_id", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth_weight: Optional[pulumi.Input[int]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 dscp_forward: Optional[pulumi.Input[str]] = None,
                 dscp_forward_tag: Optional[pulumi.Input[str]] = None,
                 dscp_reverse: Optional[pulumi.Input[str]] = None,
                 dscp_reverse_tag: Optional[pulumi.Input[str]] = None,
                 dst6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDst6Args']]]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDstArgs']]]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceGroupArgs']]]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 hold_down_time: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 input_devices: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInputDeviceArgs']]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_app_ctrl_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs']]]] = None,
                 internet_service_app_ctrls: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs']]]] = None,
                 internet_service_ctrl_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs']]]] = None,
                 internet_service_ctrls: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlArgs']]]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceNameArgs']]]] = None,
                 jitter_weight: Optional[pulumi.Input[int]] = None,
                 latency_weight: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 link_cost_threshold: Optional[pulumi.Input[int]] = None,
                 member: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_loss_weight: Optional[pulumi.Input[int]] = None,
                 priority_members: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServicePriorityMemberArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 quality_link: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 route_tag: Optional[pulumi.Input[int]] = None,
                 sla_compare_method: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSlaArgs']]]] = None,
                 src6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrc6Args']]]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrcArgs']]]] = None,
                 standalone_action: Optional[pulumi.Input[str]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceUserArgs']]]] = None):
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if bandwidth_weight is not None:
            pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dscp_forward is not None:
            pulumi.set(__self__, "dscp_forward", dscp_forward)
        if dscp_forward_tag is not None:
            pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        if dscp_reverse is not None:
            pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        if dscp_reverse_tag is not None:
            pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_app_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        if internet_service_app_ctrls is not None:
            pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        if internet_service_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_ctrl_groups", internet_service_ctrl_groups)
        if internet_service_ctrls is not None:
            pulumi.set(__self__, "internet_service_ctrls", internet_service_ctrls)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if jitter_weight is not None:
            pulumi.set(__self__, "jitter_weight", jitter_weight)
        if latency_weight is not None:
            pulumi.set(__self__, "latency_weight", latency_weight)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if link_cost_threshold is not None:
            pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_loss_weight is not None:
            pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        if priority_members is not None:
            pulumi.set(__self__, "priority_members", priority_members)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_link is not None:
            pulumi.set(__self__, "quality_link", quality_link)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if sla_compare_method is not None:
            pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if src6s is not None:
            pulumi.set(__self__, "src6s", src6s)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if standalone_action is not None:
            pulumi.set(__self__, "standalone_action", standalone_action)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_weight")

    @bandwidth_weight.setter
    def bandwidth_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_weight", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_forward")

    @dscp_forward.setter
    def dscp_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward", value)

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_forward_tag")

    @dscp_forward_tag.setter
    def dscp_forward_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward_tag", value)

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_reverse")

    @dscp_reverse.setter
    def dscp_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse", value)

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_reverse_tag")

    @dscp_reverse_tag.setter
    def dscp_reverse_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse_tag", value)

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDst6Args']]]]:
        return pulumi.get(self, "dst6s")

    @dst6s.setter
    def dst6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDst6Args']]]]):
        pulumi.set(self, "dst6s", value)

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_negate")

    @dst_negate.setter
    def dst_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_negate", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDstArgs']]]]:
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceGroupArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hold_down_time")

    @hold_down_time.setter
    def hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_down_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_device_negate")

    @input_device_negate.setter
    def input_device_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device_negate", value)

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInputDeviceArgs']]]]:
        return pulumi.get(self, "input_devices")

    @input_devices.setter
    def input_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInputDeviceArgs']]]]):
        pulumi.set(self, "input_devices", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs']]]]:
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @internet_service_app_ctrl_groups.setter
    def internet_service_app_ctrl_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrl_groups", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs']]]]:
        return pulumi.get(self, "internet_service_app_ctrls")

    @internet_service_app_ctrls.setter
    def internet_service_app_ctrls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrls", value)

    @property
    @pulumi.getter(name="internetServiceCtrlGroups")
    def internet_service_ctrl_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs']]]]:
        return pulumi.get(self, "internet_service_ctrl_groups")

    @internet_service_ctrl_groups.setter
    def internet_service_ctrl_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs']]]]):
        pulumi.set(self, "internet_service_ctrl_groups", value)

    @property
    @pulumi.getter(name="internetServiceCtrls")
    def internet_service_ctrls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlArgs']]]]:
        return pulumi.get(self, "internet_service_ctrls")

    @internet_service_ctrls.setter
    def internet_service_ctrls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlArgs']]]]):
        pulumi.set(self, "internet_service_ctrls", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs']]]]:
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomArgs']]]]:
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceGroupArgs']]]]:
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceIdArgs']]]]:
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceNameArgs']]]]:
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "jitter_weight")

    @jitter_weight.setter
    def jitter_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_weight", value)

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency_weight")

    @latency_weight.setter
    def latency_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_weight", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "link_cost_threshold")

    @link_cost_threshold.setter
    def link_cost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_cost_threshold", value)

    @property
    @pulumi.getter
    def member(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "member")

    @member.setter
    def member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "packet_loss_weight")

    @packet_loss_weight.setter
    def packet_loss_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_loss_weight", value)

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServicePriorityMemberArgs']]]]:
        return pulumi.get(self, "priority_members")

    @priority_members.setter
    def priority_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServicePriorityMemberArgs']]]]):
        pulumi.set(self, "priority_members", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quality_link")

    @quality_link.setter
    def quality_link(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_link", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "route_tag")

    @route_tag.setter
    def route_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_tag", value)

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sla_compare_method")

    @sla_compare_method.setter
    def sla_compare_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_compare_method", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSlaArgs']]]]:
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter
    def src6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrc6Args']]]]:
        return pulumi.get(self, "src6s")

    @src6s.setter
    def src6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrc6Args']]]]):
        pulumi.set(self, "src6s", value)

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_negate")

    @src_negate.setter
    def src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_negate", value)

    @property
    @pulumi.getter
    def srcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrcArgs']]]]:
        return pulumi.get(self, "srcs")

    @srcs.setter
    def srcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrcArgs']]]]):
        pulumi.set(self, "srcs", value)

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "standalone_action")

    @standalone_action.setter
    def standalone_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_action", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceDst6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInputDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceCtrlArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServicePriorityMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceSlaArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceSrc6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceSrcArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWirePairMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemVxlanRemoteIp6Args:
    def __init__(__self__, *,
                 ip6: Optional[pulumi.Input[str]] = None):
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)


@pulumi.input_type
class SystemVxlanRemoteIpArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SystemZoneInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemZoneTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SystemZoneTaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemZoneTaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemZoneTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SystemZoneTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserDeviceAccessListDeviceListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class UserDeviceGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserDeviceGroupTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceGroupTaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceGroupTaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceGroupTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class UserDeviceGroupTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserDeviceTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceTaggingTagArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceTaggingTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class UserDeviceTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserDomainControllerExtraServerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 source_ip_address: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if source_ip_address is not None:
            pulumi.set(__self__, "source_ip_address", source_ip_address)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip_address")

    @source_ip_address.setter
    def source_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip_address", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_port", value)


@pulumi.input_type
class UserExchangeKdcIpArgs:
    def __init__(__self__, *,
                 ipv4: Optional[pulumi.Input[str]] = None):
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4")

    @ipv4.setter
    def ipv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4", value)


@pulumi.input_type
class UserFssoPollingAdgrpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserGroupGuestArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 company: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 expiration: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mobile_phone: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 sponsor: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mobile_phone is not None:
            pulumi.set(__self__, "mobile_phone", mobile_phone)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if sponsor is not None:
            pulumi.set(__self__, "sponsor", sponsor)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def company(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "company")

    @company.setter
    def company(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="mobilePhone")
    def mobile_phone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mobile_phone")

    @mobile_phone.setter
    def mobile_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile_phone", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def sponsor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor")

    @sponsor.setter
    def sponsor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class UserGroupMatchArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server_name: Optional[pulumi.Input[str]] = None):
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)


@pulumi.input_type
class UserGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserNacPolicySeverityArgs:
    def __init__(__self__, *,
                 severity_num: Optional[pulumi.Input[int]] = None):
        if severity_num is not None:
            pulumi.set(__self__, "severity_num", severity_num)

    @property
    @pulumi.getter(name="severityNum")
    def severity_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "severity_num")

    @severity_num.setter
    def severity_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "severity_num", value)


@pulumi.input_type
class UserNacPolicySwitchGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserNacPolicySwitchScopeArgs:
    def __init__(__self__, *,
                 switch_id: Optional[pulumi.Input[str]] = None):
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)


@pulumi.input_type
class UserPeergrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserQuarantineTargetArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 entry: Optional[pulumi.Input[str]] = None,
                 macs: Optional[pulumi.Input[Sequence[pulumi.Input['UserQuarantineTargetMacArgs']]]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entry is not None:
            pulumi.set(__self__, "entry", entry)
        if macs is not None:
            pulumi.set(__self__, "macs", macs)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def entry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entry")

    @entry.setter
    def entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entry", value)

    @property
    @pulumi.getter
    def macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserQuarantineTargetMacArgs']]]]:
        return pulumi.get(self, "macs")

    @macs.setter
    def macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserQuarantineTargetMacArgs']]]]):
        pulumi.set(self, "macs", value)


@pulumi.input_type
class UserQuarantineTargetMacArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 drop: Optional[pulumi.Input[str]] = None,
                 entry_id: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if entry_id is not None:
            pulumi.set(__self__, "entry_id", entry_id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop", value)

    @property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "entry_id")

    @entry_id.setter
    def entry_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "entry_id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)


@pulumi.input_type
class UserRadiusAccountingServerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class UserRadiusClassArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSecurityExemptListRuleArgs:
    def __init__(__self__, *,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDeviceArgs']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDstaddrArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleServiceArgs']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleSrcaddrArgs']]]] = None):
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDeviceArgs']]]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDstaddrArgs']]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleServiceArgs']]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleSrcaddrArgs']]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleSrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)


@pulumi.input_type
class UserSecurityExemptListRuleDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSecurityExemptListRuleDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSecurityExemptListRuleServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSecurityExemptListRuleSrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSettingAuthPortArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VideofilterProfileFortiguardCategoryArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['VideofilterProfileFortiguardCategoryFilterArgs']]]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VideofilterProfileFortiguardCategoryFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VideofilterProfileFortiguardCategoryFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class VideofilterProfileFortiguardCategoryFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 category_id: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "category_id")

    @category_id.setter
    def category_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class VideofilterYoutubeChannelFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class VoipProfileMsrpArgs:
    def __init__(__self__, *,
                 log_violations: Optional[pulumi.Input[str]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 max_msg_size_action: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if max_msg_size is not None:
            pulumi.set(__self__, "max_msg_size", max_msg_size)
        if max_msg_size_action is not None:
            pulumi.set(__self__, "max_msg_size_action", max_msg_size_action)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_violations")

    @log_violations.setter
    def log_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_violations", value)

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_msg_size")

    @max_msg_size.setter
    def max_msg_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_msg_size", value)

    @property
    @pulumi.getter(name="maxMsgSizeAction")
    def max_msg_size_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_msg_size_action")

    @max_msg_size_action.setter
    def max_msg_size_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_msg_size_action", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class VoipProfileSccpArgs:
    def __init__(__self__, *,
                 block_mcast: Optional[pulumi.Input[str]] = None,
                 log_call_summary: Optional[pulumi.Input[str]] = None,
                 log_violations: Optional[pulumi.Input[str]] = None,
                 max_calls: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 verify_header: Optional[pulumi.Input[str]] = None):
        if block_mcast is not None:
            pulumi.set(__self__, "block_mcast", block_mcast)
        if log_call_summary is not None:
            pulumi.set(__self__, "log_call_summary", log_call_summary)
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if max_calls is not None:
            pulumi.set(__self__, "max_calls", max_calls)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if verify_header is not None:
            pulumi.set(__self__, "verify_header", verify_header)

    @property
    @pulumi.getter(name="blockMcast")
    def block_mcast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_mcast")

    @block_mcast.setter
    def block_mcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_mcast", value)

    @property
    @pulumi.getter(name="logCallSummary")
    def log_call_summary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_call_summary")

    @log_call_summary.setter
    def log_call_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_call_summary", value)

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_violations")

    @log_violations.setter
    def log_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_violations", value)

    @property
    @pulumi.getter(name="maxCalls")
    def max_calls(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_calls")

    @max_calls.setter
    def max_calls(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_calls", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="verifyHeader")
    def verify_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verify_header")

    @verify_header.setter
    def verify_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_header", value)


@pulumi.input_type
class VoipProfileSipArgs:
    def __init__(__self__, *,
                 ack_rate: Optional[pulumi.Input[int]] = None,
                 ack_rate_track: Optional[pulumi.Input[str]] = None,
                 block_ack: Optional[pulumi.Input[str]] = None,
                 block_bye: Optional[pulumi.Input[str]] = None,
                 block_cancel: Optional[pulumi.Input[str]] = None,
                 block_geo_red_options: Optional[pulumi.Input[str]] = None,
                 block_info: Optional[pulumi.Input[str]] = None,
                 block_invite: Optional[pulumi.Input[str]] = None,
                 block_long_lines: Optional[pulumi.Input[str]] = None,
                 block_message: Optional[pulumi.Input[str]] = None,
                 block_notify: Optional[pulumi.Input[str]] = None,
                 block_options: Optional[pulumi.Input[str]] = None,
                 block_prack: Optional[pulumi.Input[str]] = None,
                 block_publish: Optional[pulumi.Input[str]] = None,
                 block_refer: Optional[pulumi.Input[str]] = None,
                 block_register: Optional[pulumi.Input[str]] = None,
                 block_subscribe: Optional[pulumi.Input[str]] = None,
                 block_unknown: Optional[pulumi.Input[str]] = None,
                 block_update: Optional[pulumi.Input[str]] = None,
                 bye_rate: Optional[pulumi.Input[int]] = None,
                 bye_rate_track: Optional[pulumi.Input[str]] = None,
                 call_id_regex: Optional[pulumi.Input[str]] = None,
                 call_keepalive: Optional[pulumi.Input[int]] = None,
                 cancel_rate: Optional[pulumi.Input[int]] = None,
                 cancel_rate_track: Optional[pulumi.Input[str]] = None,
                 contact_fixup: Optional[pulumi.Input[str]] = None,
                 content_type_regex: Optional[pulumi.Input[str]] = None,
                 hnt_restrict_source_ip: Optional[pulumi.Input[str]] = None,
                 hosted_nat_traversal: Optional[pulumi.Input[str]] = None,
                 info_rate: Optional[pulumi.Input[int]] = None,
                 info_rate_track: Optional[pulumi.Input[str]] = None,
                 invite_rate: Optional[pulumi.Input[int]] = None,
                 invite_rate_track: Optional[pulumi.Input[str]] = None,
                 ips_rtp: Optional[pulumi.Input[str]] = None,
                 log_call_summary: Optional[pulumi.Input[str]] = None,
                 log_violations: Optional[pulumi.Input[str]] = None,
                 malformed_header_allow: Optional[pulumi.Input[str]] = None,
                 malformed_header_call_id: Optional[pulumi.Input[str]] = None,
                 malformed_header_contact: Optional[pulumi.Input[str]] = None,
                 malformed_header_content_length: Optional[pulumi.Input[str]] = None,
                 malformed_header_content_type: Optional[pulumi.Input[str]] = None,
                 malformed_header_cseq: Optional[pulumi.Input[str]] = None,
                 malformed_header_expires: Optional[pulumi.Input[str]] = None,
                 malformed_header_from: Optional[pulumi.Input[str]] = None,
                 malformed_header_max_forwards: Optional[pulumi.Input[str]] = None,
                 malformed_header_no_proxy_require: Optional[pulumi.Input[str]] = None,
                 malformed_header_no_require: Optional[pulumi.Input[str]] = None,
                 malformed_header_passerted_identity: Optional[pulumi.Input[str]] = None,
                 malformed_header_rack: Optional[pulumi.Input[str]] = None,
                 malformed_header_record_route: Optional[pulumi.Input[str]] = None,
                 malformed_header_route: Optional[pulumi.Input[str]] = None,
                 malformed_header_rseq: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_a: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_b: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_c: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_i: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_k: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_m: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_o: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_r: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_s: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_t: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_v: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_z: Optional[pulumi.Input[str]] = None,
                 malformed_header_to: Optional[pulumi.Input[str]] = None,
                 malformed_header_via: Optional[pulumi.Input[str]] = None,
                 malformed_request_line: Optional[pulumi.Input[str]] = None,
                 max_body_length: Optional[pulumi.Input[int]] = None,
                 max_dialogs: Optional[pulumi.Input[int]] = None,
                 max_idle_dialogs: Optional[pulumi.Input[int]] = None,
                 max_line_length: Optional[pulumi.Input[int]] = None,
                 message_rate: Optional[pulumi.Input[int]] = None,
                 message_rate_track: Optional[pulumi.Input[str]] = None,
                 nat_port_range: Optional[pulumi.Input[str]] = None,
                 nat_trace: Optional[pulumi.Input[str]] = None,
                 no_sdp_fixup: Optional[pulumi.Input[str]] = None,
                 notify_rate: Optional[pulumi.Input[int]] = None,
                 notify_rate_track: Optional[pulumi.Input[str]] = None,
                 open_contact_pinhole: Optional[pulumi.Input[str]] = None,
                 open_record_route_pinhole: Optional[pulumi.Input[str]] = None,
                 open_register_pinhole: Optional[pulumi.Input[str]] = None,
                 open_via_pinhole: Optional[pulumi.Input[str]] = None,
                 options_rate: Optional[pulumi.Input[int]] = None,
                 options_rate_track: Optional[pulumi.Input[str]] = None,
                 prack_rate: Optional[pulumi.Input[int]] = None,
                 prack_rate_track: Optional[pulumi.Input[str]] = None,
                 preserve_override: Optional[pulumi.Input[str]] = None,
                 provisional_invite_expiry_time: Optional[pulumi.Input[int]] = None,
                 publish_rate: Optional[pulumi.Input[int]] = None,
                 publish_rate_track: Optional[pulumi.Input[str]] = None,
                 refer_rate: Optional[pulumi.Input[int]] = None,
                 refer_rate_track: Optional[pulumi.Input[str]] = None,
                 register_contact_trace: Optional[pulumi.Input[str]] = None,
                 register_rate: Optional[pulumi.Input[int]] = None,
                 register_rate_track: Optional[pulumi.Input[str]] = None,
                 rfc2543_branch: Optional[pulumi.Input[str]] = None,
                 rtp: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_auth_client: Optional[pulumi.Input[str]] = None,
                 ssl_auth_server: Optional[pulumi.Input[str]] = None,
                 ssl_client_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_certificate: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_register: Optional[pulumi.Input[str]] = None,
                 subscribe_rate: Optional[pulumi.Input[int]] = None,
                 subscribe_rate_track: Optional[pulumi.Input[str]] = None,
                 unknown_header: Optional[pulumi.Input[str]] = None,
                 update_rate: Optional[pulumi.Input[int]] = None,
                 update_rate_track: Optional[pulumi.Input[str]] = None):
        if ack_rate is not None:
            pulumi.set(__self__, "ack_rate", ack_rate)
        if ack_rate_track is not None:
            pulumi.set(__self__, "ack_rate_track", ack_rate_track)
        if block_ack is not None:
            pulumi.set(__self__, "block_ack", block_ack)
        if block_bye is not None:
            pulumi.set(__self__, "block_bye", block_bye)
        if block_cancel is not None:
            pulumi.set(__self__, "block_cancel", block_cancel)
        if block_geo_red_options is not None:
            pulumi.set(__self__, "block_geo_red_options", block_geo_red_options)
        if block_info is not None:
            pulumi.set(__self__, "block_info", block_info)
        if block_invite is not None:
            pulumi.set(__self__, "block_invite", block_invite)
        if block_long_lines is not None:
            pulumi.set(__self__, "block_long_lines", block_long_lines)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if block_notify is not None:
            pulumi.set(__self__, "block_notify", block_notify)
        if block_options is not None:
            pulumi.set(__self__, "block_options", block_options)
        if block_prack is not None:
            pulumi.set(__self__, "block_prack", block_prack)
        if block_publish is not None:
            pulumi.set(__self__, "block_publish", block_publish)
        if block_refer is not None:
            pulumi.set(__self__, "block_refer", block_refer)
        if block_register is not None:
            pulumi.set(__self__, "block_register", block_register)
        if block_subscribe is not None:
            pulumi.set(__self__, "block_subscribe", block_subscribe)
        if block_unknown is not None:
            pulumi.set(__self__, "block_unknown", block_unknown)
        if block_update is not None:
            pulumi.set(__self__, "block_update", block_update)
        if bye_rate is not None:
            pulumi.set(__self__, "bye_rate", bye_rate)
        if bye_rate_track is not None:
            pulumi.set(__self__, "bye_rate_track", bye_rate_track)
        if call_id_regex is not None:
            pulumi.set(__self__, "call_id_regex", call_id_regex)
        if call_keepalive is not None:
            pulumi.set(__self__, "call_keepalive", call_keepalive)
        if cancel_rate is not None:
            pulumi.set(__self__, "cancel_rate", cancel_rate)
        if cancel_rate_track is not None:
            pulumi.set(__self__, "cancel_rate_track", cancel_rate_track)
        if contact_fixup is not None:
            pulumi.set(__self__, "contact_fixup", contact_fixup)
        if content_type_regex is not None:
            pulumi.set(__self__, "content_type_regex", content_type_regex)
        if hnt_restrict_source_ip is not None:
            pulumi.set(__self__, "hnt_restrict_source_ip", hnt_restrict_source_ip)
        if hosted_nat_traversal is not None:
            pulumi.set(__self__, "hosted_nat_traversal", hosted_nat_traversal)
        if info_rate is not None:
            pulumi.set(__self__, "info_rate", info_rate)
        if info_rate_track is not None:
            pulumi.set(__self__, "info_rate_track", info_rate_track)
        if invite_rate is not None:
            pulumi.set(__self__, "invite_rate", invite_rate)
        if invite_rate_track is not None:
            pulumi.set(__self__, "invite_rate_track", invite_rate_track)
        if ips_rtp is not None:
            pulumi.set(__self__, "ips_rtp", ips_rtp)
        if log_call_summary is not None:
            pulumi.set(__self__, "log_call_summary", log_call_summary)
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if malformed_header_allow is not None:
            pulumi.set(__self__, "malformed_header_allow", malformed_header_allow)
        if malformed_header_call_id is not None:
            pulumi.set(__self__, "malformed_header_call_id", malformed_header_call_id)
        if malformed_header_contact is not None:
            pulumi.set(__self__, "malformed_header_contact", malformed_header_contact)
        if malformed_header_content_length is not None:
            pulumi.set(__self__, "malformed_header_content_length", malformed_header_content_length)
        if malformed_header_content_type is not None:
            pulumi.set(__self__, "malformed_header_content_type", malformed_header_content_type)
        if malformed_header_cseq is not None:
            pulumi.set(__self__, "malformed_header_cseq", malformed_header_cseq)
        if malformed_header_expires is not None:
            pulumi.set(__self__, "malformed_header_expires", malformed_header_expires)
        if malformed_header_from is not None:
            pulumi.set(__self__, "malformed_header_from", malformed_header_from)
        if malformed_header_max_forwards is not None:
            pulumi.set(__self__, "malformed_header_max_forwards", malformed_header_max_forwards)
        if malformed_header_no_proxy_require is not None:
            pulumi.set(__self__, "malformed_header_no_proxy_require", malformed_header_no_proxy_require)
        if malformed_header_no_require is not None:
            pulumi.set(__self__, "malformed_header_no_require", malformed_header_no_require)
        if malformed_header_passerted_identity is not None:
            pulumi.set(__self__, "malformed_header_passerted_identity", malformed_header_passerted_identity)
        if malformed_header_rack is not None:
            pulumi.set(__self__, "malformed_header_rack", malformed_header_rack)
        if malformed_header_record_route is not None:
            pulumi.set(__self__, "malformed_header_record_route", malformed_header_record_route)
        if malformed_header_route is not None:
            pulumi.set(__self__, "malformed_header_route", malformed_header_route)
        if malformed_header_rseq is not None:
            pulumi.set(__self__, "malformed_header_rseq", malformed_header_rseq)
        if malformed_header_sdp_a is not None:
            pulumi.set(__self__, "malformed_header_sdp_a", malformed_header_sdp_a)
        if malformed_header_sdp_b is not None:
            pulumi.set(__self__, "malformed_header_sdp_b", malformed_header_sdp_b)
        if malformed_header_sdp_c is not None:
            pulumi.set(__self__, "malformed_header_sdp_c", malformed_header_sdp_c)
        if malformed_header_sdp_i is not None:
            pulumi.set(__self__, "malformed_header_sdp_i", malformed_header_sdp_i)
        if malformed_header_sdp_k is not None:
            pulumi.set(__self__, "malformed_header_sdp_k", malformed_header_sdp_k)
        if malformed_header_sdp_m is not None:
            pulumi.set(__self__, "malformed_header_sdp_m", malformed_header_sdp_m)
        if malformed_header_sdp_o is not None:
            pulumi.set(__self__, "malformed_header_sdp_o", malformed_header_sdp_o)
        if malformed_header_sdp_r is not None:
            pulumi.set(__self__, "malformed_header_sdp_r", malformed_header_sdp_r)
        if malformed_header_sdp_s is not None:
            pulumi.set(__self__, "malformed_header_sdp_s", malformed_header_sdp_s)
        if malformed_header_sdp_t is not None:
            pulumi.set(__self__, "malformed_header_sdp_t", malformed_header_sdp_t)
        if malformed_header_sdp_v is not None:
            pulumi.set(__self__, "malformed_header_sdp_v", malformed_header_sdp_v)
        if malformed_header_sdp_z is not None:
            pulumi.set(__self__, "malformed_header_sdp_z", malformed_header_sdp_z)
        if malformed_header_to is not None:
            pulumi.set(__self__, "malformed_header_to", malformed_header_to)
        if malformed_header_via is not None:
            pulumi.set(__self__, "malformed_header_via", malformed_header_via)
        if malformed_request_line is not None:
            pulumi.set(__self__, "malformed_request_line", malformed_request_line)
        if max_body_length is not None:
            pulumi.set(__self__, "max_body_length", max_body_length)
        if max_dialogs is not None:
            pulumi.set(__self__, "max_dialogs", max_dialogs)
        if max_idle_dialogs is not None:
            pulumi.set(__self__, "max_idle_dialogs", max_idle_dialogs)
        if max_line_length is not None:
            pulumi.set(__self__, "max_line_length", max_line_length)
        if message_rate is not None:
            pulumi.set(__self__, "message_rate", message_rate)
        if message_rate_track is not None:
            pulumi.set(__self__, "message_rate_track", message_rate_track)
        if nat_port_range is not None:
            pulumi.set(__self__, "nat_port_range", nat_port_range)
        if nat_trace is not None:
            pulumi.set(__self__, "nat_trace", nat_trace)
        if no_sdp_fixup is not None:
            pulumi.set(__self__, "no_sdp_fixup", no_sdp_fixup)
        if notify_rate is not None:
            pulumi.set(__self__, "notify_rate", notify_rate)
        if notify_rate_track is not None:
            pulumi.set(__self__, "notify_rate_track", notify_rate_track)
        if open_contact_pinhole is not None:
            pulumi.set(__self__, "open_contact_pinhole", open_contact_pinhole)
        if open_record_route_pinhole is not None:
            pulumi.set(__self__, "open_record_route_pinhole", open_record_route_pinhole)
        if open_register_pinhole is not None:
            pulumi.set(__self__, "open_register_pinhole", open_register_pinhole)
        if open_via_pinhole is not None:
            pulumi.set(__self__, "open_via_pinhole", open_via_pinhole)
        if options_rate is not None:
            pulumi.set(__self__, "options_rate", options_rate)
        if options_rate_track is not None:
            pulumi.set(__self__, "options_rate_track", options_rate_track)
        if prack_rate is not None:
            pulumi.set(__self__, "prack_rate", prack_rate)
        if prack_rate_track is not None:
            pulumi.set(__self__, "prack_rate_track", prack_rate_track)
        if preserve_override is not None:
            pulumi.set(__self__, "preserve_override", preserve_override)
        if provisional_invite_expiry_time is not None:
            pulumi.set(__self__, "provisional_invite_expiry_time", provisional_invite_expiry_time)
        if publish_rate is not None:
            pulumi.set(__self__, "publish_rate", publish_rate)
        if publish_rate_track is not None:
            pulumi.set(__self__, "publish_rate_track", publish_rate_track)
        if refer_rate is not None:
            pulumi.set(__self__, "refer_rate", refer_rate)
        if refer_rate_track is not None:
            pulumi.set(__self__, "refer_rate_track", refer_rate_track)
        if register_contact_trace is not None:
            pulumi.set(__self__, "register_contact_trace", register_contact_trace)
        if register_rate is not None:
            pulumi.set(__self__, "register_rate", register_rate)
        if register_rate_track is not None:
            pulumi.set(__self__, "register_rate_track", register_rate_track)
        if rfc2543_branch is not None:
            pulumi.set(__self__, "rfc2543_branch", rfc2543_branch)
        if rtp is not None:
            pulumi.set(__self__, "rtp", rtp)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_auth_client is not None:
            pulumi.set(__self__, "ssl_auth_client", ssl_auth_client)
        if ssl_auth_server is not None:
            pulumi.set(__self__, "ssl_auth_server", ssl_auth_server)
        if ssl_client_certificate is not None:
            pulumi.set(__self__, "ssl_client_certificate", ssl_client_certificate)
        if ssl_client_renegotiation is not None:
            pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if ssl_pfs is not None:
            pulumi.set(__self__, "ssl_pfs", ssl_pfs)
        if ssl_send_empty_frags is not None:
            pulumi.set(__self__, "ssl_send_empty_frags", ssl_send_empty_frags)
        if ssl_server_certificate is not None:
            pulumi.set(__self__, "ssl_server_certificate", ssl_server_certificate)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strict_register is not None:
            pulumi.set(__self__, "strict_register", strict_register)
        if subscribe_rate is not None:
            pulumi.set(__self__, "subscribe_rate", subscribe_rate)
        if subscribe_rate_track is not None:
            pulumi.set(__self__, "subscribe_rate_track", subscribe_rate_track)
        if unknown_header is not None:
            pulumi.set(__self__, "unknown_header", unknown_header)
        if update_rate is not None:
            pulumi.set(__self__, "update_rate", update_rate)
        if update_rate_track is not None:
            pulumi.set(__self__, "update_rate_track", update_rate_track)

    @property
    @pulumi.getter(name="ackRate")
    def ack_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ack_rate")

    @ack_rate.setter
    def ack_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_rate", value)

    @property
    @pulumi.getter(name="ackRateTrack")
    def ack_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_rate_track")

    @ack_rate_track.setter
    def ack_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_rate_track", value)

    @property
    @pulumi.getter(name="blockAck")
    def block_ack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_ack")

    @block_ack.setter
    def block_ack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_ack", value)

    @property
    @pulumi.getter(name="blockBye")
    def block_bye(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_bye")

    @block_bye.setter
    def block_bye(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_bye", value)

    @property
    @pulumi.getter(name="blockCancel")
    def block_cancel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_cancel")

    @block_cancel.setter
    def block_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_cancel", value)

    @property
    @pulumi.getter(name="blockGeoRedOptions")
    def block_geo_red_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_geo_red_options")

    @block_geo_red_options.setter
    def block_geo_red_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_geo_red_options", value)

    @property
    @pulumi.getter(name="blockInfo")
    def block_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_info")

    @block_info.setter
    def block_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_info", value)

    @property
    @pulumi.getter(name="blockInvite")
    def block_invite(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_invite")

    @block_invite.setter
    def block_invite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_invite", value)

    @property
    @pulumi.getter(name="blockLongLines")
    def block_long_lines(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_long_lines")

    @block_long_lines.setter
    def block_long_lines(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_long_lines", value)

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_message")

    @block_message.setter
    def block_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_message", value)

    @property
    @pulumi.getter(name="blockNotify")
    def block_notify(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_notify")

    @block_notify.setter
    def block_notify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_notify", value)

    @property
    @pulumi.getter(name="blockOptions")
    def block_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_options")

    @block_options.setter
    def block_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_options", value)

    @property
    @pulumi.getter(name="blockPrack")
    def block_prack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_prack")

    @block_prack.setter
    def block_prack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_prack", value)

    @property
    @pulumi.getter(name="blockPublish")
    def block_publish(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_publish")

    @block_publish.setter
    def block_publish(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_publish", value)

    @property
    @pulumi.getter(name="blockRefer")
    def block_refer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_refer")

    @block_refer.setter
    def block_refer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_refer", value)

    @property
    @pulumi.getter(name="blockRegister")
    def block_register(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_register")

    @block_register.setter
    def block_register(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_register", value)

    @property
    @pulumi.getter(name="blockSubscribe")
    def block_subscribe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_subscribe")

    @block_subscribe.setter
    def block_subscribe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_subscribe", value)

    @property
    @pulumi.getter(name="blockUnknown")
    def block_unknown(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_unknown")

    @block_unknown.setter
    def block_unknown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_unknown", value)

    @property
    @pulumi.getter(name="blockUpdate")
    def block_update(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_update")

    @block_update.setter
    def block_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_update", value)

    @property
    @pulumi.getter(name="byeRate")
    def bye_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bye_rate")

    @bye_rate.setter
    def bye_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bye_rate", value)

    @property
    @pulumi.getter(name="byeRateTrack")
    def bye_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bye_rate_track")

    @bye_rate_track.setter
    def bye_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bye_rate_track", value)

    @property
    @pulumi.getter(name="callIdRegex")
    def call_id_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "call_id_regex")

    @call_id_regex.setter
    def call_id_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_id_regex", value)

    @property
    @pulumi.getter(name="callKeepalive")
    def call_keepalive(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "call_keepalive")

    @call_keepalive.setter
    def call_keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_keepalive", value)

    @property
    @pulumi.getter(name="cancelRate")
    def cancel_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cancel_rate")

    @cancel_rate.setter
    def cancel_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cancel_rate", value)

    @property
    @pulumi.getter(name="cancelRateTrack")
    def cancel_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cancel_rate_track")

    @cancel_rate_track.setter
    def cancel_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cancel_rate_track", value)

    @property
    @pulumi.getter(name="contactFixup")
    def contact_fixup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "contact_fixup")

    @contact_fixup.setter
    def contact_fixup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_fixup", value)

    @property
    @pulumi.getter(name="contentTypeRegex")
    def content_type_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type_regex")

    @content_type_regex.setter
    def content_type_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type_regex", value)

    @property
    @pulumi.getter(name="hntRestrictSourceIp")
    def hnt_restrict_source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hnt_restrict_source_ip")

    @hnt_restrict_source_ip.setter
    def hnt_restrict_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hnt_restrict_source_ip", value)

    @property
    @pulumi.getter(name="hostedNatTraversal")
    def hosted_nat_traversal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hosted_nat_traversal")

    @hosted_nat_traversal.setter
    def hosted_nat_traversal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_nat_traversal", value)

    @property
    @pulumi.getter(name="infoRate")
    def info_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "info_rate")

    @info_rate.setter
    def info_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "info_rate", value)

    @property
    @pulumi.getter(name="infoRateTrack")
    def info_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "info_rate_track")

    @info_rate_track.setter
    def info_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "info_rate_track", value)

    @property
    @pulumi.getter(name="inviteRate")
    def invite_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "invite_rate")

    @invite_rate.setter
    def invite_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "invite_rate", value)

    @property
    @pulumi.getter(name="inviteRateTrack")
    def invite_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invite_rate_track")

    @invite_rate_track.setter
    def invite_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invite_rate_track", value)

    @property
    @pulumi.getter(name="ipsRtp")
    def ips_rtp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_rtp")

    @ips_rtp.setter
    def ips_rtp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_rtp", value)

    @property
    @pulumi.getter(name="logCallSummary")
    def log_call_summary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_call_summary")

    @log_call_summary.setter
    def log_call_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_call_summary", value)

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_violations")

    @log_violations.setter
    def log_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_violations", value)

    @property
    @pulumi.getter(name="malformedHeaderAllow")
    def malformed_header_allow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_allow")

    @malformed_header_allow.setter
    def malformed_header_allow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_allow", value)

    @property
    @pulumi.getter(name="malformedHeaderCallId")
    def malformed_header_call_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_call_id")

    @malformed_header_call_id.setter
    def malformed_header_call_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_call_id", value)

    @property
    @pulumi.getter(name="malformedHeaderContact")
    def malformed_header_contact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_contact")

    @malformed_header_contact.setter
    def malformed_header_contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_contact", value)

    @property
    @pulumi.getter(name="malformedHeaderContentLength")
    def malformed_header_content_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_content_length")

    @malformed_header_content_length.setter
    def malformed_header_content_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_content_length", value)

    @property
    @pulumi.getter(name="malformedHeaderContentType")
    def malformed_header_content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_content_type")

    @malformed_header_content_type.setter
    def malformed_header_content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_content_type", value)

    @property
    @pulumi.getter(name="malformedHeaderCseq")
    def malformed_header_cseq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_cseq")

    @malformed_header_cseq.setter
    def malformed_header_cseq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_cseq", value)

    @property
    @pulumi.getter(name="malformedHeaderExpires")
    def malformed_header_expires(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_expires")

    @malformed_header_expires.setter
    def malformed_header_expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_expires", value)

    @property
    @pulumi.getter(name="malformedHeaderFrom")
    def malformed_header_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_from")

    @malformed_header_from.setter
    def malformed_header_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_from", value)

    @property
    @pulumi.getter(name="malformedHeaderMaxForwards")
    def malformed_header_max_forwards(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_max_forwards")

    @malformed_header_max_forwards.setter
    def malformed_header_max_forwards(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_max_forwards", value)

    @property
    @pulumi.getter(name="malformedHeaderNoProxyRequire")
    def malformed_header_no_proxy_require(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_no_proxy_require")

    @malformed_header_no_proxy_require.setter
    def malformed_header_no_proxy_require(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_no_proxy_require", value)

    @property
    @pulumi.getter(name="malformedHeaderNoRequire")
    def malformed_header_no_require(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_no_require")

    @malformed_header_no_require.setter
    def malformed_header_no_require(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_no_require", value)

    @property
    @pulumi.getter(name="malformedHeaderPAssertedIdentity")
    def malformed_header_passerted_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_passerted_identity")

    @malformed_header_passerted_identity.setter
    def malformed_header_passerted_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_passerted_identity", value)

    @property
    @pulumi.getter(name="malformedHeaderRack")
    def malformed_header_rack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_rack")

    @malformed_header_rack.setter
    def malformed_header_rack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_rack", value)

    @property
    @pulumi.getter(name="malformedHeaderRecordRoute")
    def malformed_header_record_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_record_route")

    @malformed_header_record_route.setter
    def malformed_header_record_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_record_route", value)

    @property
    @pulumi.getter(name="malformedHeaderRoute")
    def malformed_header_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_route")

    @malformed_header_route.setter
    def malformed_header_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_route", value)

    @property
    @pulumi.getter(name="malformedHeaderRseq")
    def malformed_header_rseq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_rseq")

    @malformed_header_rseq.setter
    def malformed_header_rseq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_rseq", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpA")
    def malformed_header_sdp_a(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_a")

    @malformed_header_sdp_a.setter
    def malformed_header_sdp_a(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_a", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpB")
    def malformed_header_sdp_b(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_b")

    @malformed_header_sdp_b.setter
    def malformed_header_sdp_b(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_b", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpC")
    def malformed_header_sdp_c(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_c")

    @malformed_header_sdp_c.setter
    def malformed_header_sdp_c(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_c", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpI")
    def malformed_header_sdp_i(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_i")

    @malformed_header_sdp_i.setter
    def malformed_header_sdp_i(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_i", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpK")
    def malformed_header_sdp_k(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_k")

    @malformed_header_sdp_k.setter
    def malformed_header_sdp_k(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_k", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpM")
    def malformed_header_sdp_m(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_m")

    @malformed_header_sdp_m.setter
    def malformed_header_sdp_m(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_m", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpO")
    def malformed_header_sdp_o(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_o")

    @malformed_header_sdp_o.setter
    def malformed_header_sdp_o(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_o", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpR")
    def malformed_header_sdp_r(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_r")

    @malformed_header_sdp_r.setter
    def malformed_header_sdp_r(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_r", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpS")
    def malformed_header_sdp_s(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_s")

    @malformed_header_sdp_s.setter
    def malformed_header_sdp_s(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_s", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpT")
    def malformed_header_sdp_t(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_t")

    @malformed_header_sdp_t.setter
    def malformed_header_sdp_t(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_t", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpV")
    def malformed_header_sdp_v(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_v")

    @malformed_header_sdp_v.setter
    def malformed_header_sdp_v(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_v", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpZ")
    def malformed_header_sdp_z(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_sdp_z")

    @malformed_header_sdp_z.setter
    def malformed_header_sdp_z(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_z", value)

    @property
    @pulumi.getter(name="malformedHeaderTo")
    def malformed_header_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_to")

    @malformed_header_to.setter
    def malformed_header_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_to", value)

    @property
    @pulumi.getter(name="malformedHeaderVia")
    def malformed_header_via(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_header_via")

    @malformed_header_via.setter
    def malformed_header_via(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_via", value)

    @property
    @pulumi.getter(name="malformedRequestLine")
    def malformed_request_line(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed_request_line")

    @malformed_request_line.setter
    def malformed_request_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_request_line", value)

    @property
    @pulumi.getter(name="maxBodyLength")
    def max_body_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_body_length")

    @max_body_length.setter
    def max_body_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_body_length", value)

    @property
    @pulumi.getter(name="maxDialogs")
    def max_dialogs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_dialogs")

    @max_dialogs.setter
    def max_dialogs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_dialogs", value)

    @property
    @pulumi.getter(name="maxIdleDialogs")
    def max_idle_dialogs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_idle_dialogs")

    @max_idle_dialogs.setter
    def max_idle_dialogs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_dialogs", value)

    @property
    @pulumi.getter(name="maxLineLength")
    def max_line_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_line_length")

    @max_line_length.setter
    def max_line_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_line_length", value)

    @property
    @pulumi.getter(name="messageRate")
    def message_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "message_rate")

    @message_rate.setter
    def message_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_rate", value)

    @property
    @pulumi.getter(name="messageRateTrack")
    def message_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_rate_track")

    @message_rate_track.setter
    def message_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_rate_track", value)

    @property
    @pulumi.getter(name="natPortRange")
    def nat_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat_port_range")

    @nat_port_range.setter
    def nat_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_port_range", value)

    @property
    @pulumi.getter(name="natTrace")
    def nat_trace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat_trace")

    @nat_trace.setter
    def nat_trace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_trace", value)

    @property
    @pulumi.getter(name="noSdpFixup")
    def no_sdp_fixup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "no_sdp_fixup")

    @no_sdp_fixup.setter
    def no_sdp_fixup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_sdp_fixup", value)

    @property
    @pulumi.getter(name="notifyRate")
    def notify_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "notify_rate")

    @notify_rate.setter
    def notify_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notify_rate", value)

    @property
    @pulumi.getter(name="notifyRateTrack")
    def notify_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_rate_track")

    @notify_rate_track.setter
    def notify_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_rate_track", value)

    @property
    @pulumi.getter(name="openContactPinhole")
    def open_contact_pinhole(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "open_contact_pinhole")

    @open_contact_pinhole.setter
    def open_contact_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_contact_pinhole", value)

    @property
    @pulumi.getter(name="openRecordRoutePinhole")
    def open_record_route_pinhole(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "open_record_route_pinhole")

    @open_record_route_pinhole.setter
    def open_record_route_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_record_route_pinhole", value)

    @property
    @pulumi.getter(name="openRegisterPinhole")
    def open_register_pinhole(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "open_register_pinhole")

    @open_register_pinhole.setter
    def open_register_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_register_pinhole", value)

    @property
    @pulumi.getter(name="openViaPinhole")
    def open_via_pinhole(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "open_via_pinhole")

    @open_via_pinhole.setter
    def open_via_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_via_pinhole", value)

    @property
    @pulumi.getter(name="optionsRate")
    def options_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "options_rate")

    @options_rate.setter
    def options_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "options_rate", value)

    @property
    @pulumi.getter(name="optionsRateTrack")
    def options_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options_rate_track")

    @options_rate_track.setter
    def options_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options_rate_track", value)

    @property
    @pulumi.getter(name="prackRate")
    def prack_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prack_rate")

    @prack_rate.setter
    def prack_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prack_rate", value)

    @property
    @pulumi.getter(name="prackRateTrack")
    def prack_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prack_rate_track")

    @prack_rate_track.setter
    def prack_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prack_rate_track", value)

    @property
    @pulumi.getter(name="preserveOverride")
    def preserve_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preserve_override")

    @preserve_override.setter
    def preserve_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preserve_override", value)

    @property
    @pulumi.getter(name="provisionalInviteExpiryTime")
    def provisional_invite_expiry_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "provisional_invite_expiry_time")

    @provisional_invite_expiry_time.setter
    def provisional_invite_expiry_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "provisional_invite_expiry_time", value)

    @property
    @pulumi.getter(name="publishRate")
    def publish_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "publish_rate")

    @publish_rate.setter
    def publish_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "publish_rate", value)

    @property
    @pulumi.getter(name="publishRateTrack")
    def publish_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "publish_rate_track")

    @publish_rate_track.setter
    def publish_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_rate_track", value)

    @property
    @pulumi.getter(name="referRate")
    def refer_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refer_rate")

    @refer_rate.setter
    def refer_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refer_rate", value)

    @property
    @pulumi.getter(name="referRateTrack")
    def refer_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refer_rate_track")

    @refer_rate_track.setter
    def refer_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refer_rate_track", value)

    @property
    @pulumi.getter(name="registerContactTrace")
    def register_contact_trace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "register_contact_trace")

    @register_contact_trace.setter
    def register_contact_trace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_contact_trace", value)

    @property
    @pulumi.getter(name="registerRate")
    def register_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "register_rate")

    @register_rate.setter
    def register_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "register_rate", value)

    @property
    @pulumi.getter(name="registerRateTrack")
    def register_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "register_rate_track")

    @register_rate_track.setter
    def register_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_rate_track", value)

    @property
    @pulumi.getter(name="rfc2543Branch")
    def rfc2543_branch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rfc2543_branch")

    @rfc2543_branch.setter
    def rfc2543_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rfc2543_branch", value)

    @property
    @pulumi.getter
    def rtp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rtp")

    @rtp.setter
    def rtp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rtp", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslAuthClient")
    def ssl_auth_client(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_auth_client")

    @ssl_auth_client.setter
    def ssl_auth_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_auth_client", value)

    @property
    @pulumi.getter(name="sslAuthServer")
    def ssl_auth_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_auth_server")

    @ssl_auth_server.setter
    def ssl_auth_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_auth_server", value)

    @property
    @pulumi.getter(name="sslClientCertificate")
    def ssl_client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_certificate")

    @ssl_client_certificate.setter
    def ssl_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_certificate", value)

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_client_renegotiation")

    @ssl_client_renegotiation.setter
    def ssl_client_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_renegotiation", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="sslPfs")
    def ssl_pfs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_pfs")

    @ssl_pfs.setter
    def ssl_pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_pfs", value)

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_send_empty_frags")

    @ssl_send_empty_frags.setter
    def ssl_send_empty_frags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_send_empty_frags", value)

    @property
    @pulumi.getter(name="sslServerCertificate")
    def ssl_server_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_certificate")

    @ssl_server_certificate.setter
    def ssl_server_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_certificate", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="strictRegister")
    def strict_register(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strict_register")

    @strict_register.setter
    def strict_register(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_register", value)

    @property
    @pulumi.getter(name="subscribeRate")
    def subscribe_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "subscribe_rate")

    @subscribe_rate.setter
    def subscribe_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subscribe_rate", value)

    @property
    @pulumi.getter(name="subscribeRateTrack")
    def subscribe_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subscribe_rate_track")

    @subscribe_rate_track.setter
    def subscribe_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscribe_rate_track", value)

    @property
    @pulumi.getter(name="unknownHeader")
    def unknown_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_header")

    @unknown_header.setter
    def unknown_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_header", value)

    @property
    @pulumi.getter(name="updateRate")
    def update_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_rate")

    @update_rate.setter
    def update_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_rate", value)

    @property
    @pulumi.getter(name="updateRateTrack")
    def update_rate_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_rate_track")

    @update_rate_track.setter
    def update_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_rate_track", value)


@pulumi.input_type
class VpnCertificateSettingCrlVerificationArgs:
    def __init__(__self__, *,
                 chain_crl_absence: Optional[pulumi.Input[str]] = None,
                 expiry: Optional[pulumi.Input[str]] = None,
                 leaf_crl_absence: Optional[pulumi.Input[str]] = None):
        if chain_crl_absence is not None:
            pulumi.set(__self__, "chain_crl_absence", chain_crl_absence)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if leaf_crl_absence is not None:
            pulumi.set(__self__, "leaf_crl_absence", leaf_crl_absence)

    @property
    @pulumi.getter(name="chainCrlAbsence")
    def chain_crl_absence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chain_crl_absence")

    @chain_crl_absence.setter
    def chain_crl_absence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chain_crl_absence", value)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter(name="leafCrlAbsence")
    def leaf_crl_absence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "leaf_crl_absence")

    @leaf_crl_absence.setter
    def leaf_crl_absence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leaf_crl_absence", value)


@pulumi.input_type
class VpnIpsecConcentratorMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnIpsecFecMappingArgs:
    def __init__(__self__, *,
                 bandwidth_bi_threshold: Optional[pulumi.Input[int]] = None,
                 bandwidth_down_threshold: Optional[pulumi.Input[int]] = None,
                 bandwidth_up_threshold: Optional[pulumi.Input[int]] = None,
                 base: Optional[pulumi.Input[int]] = None,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 packet_loss_threshold: Optional[pulumi.Input[int]] = None,
                 redundant: Optional[pulumi.Input[int]] = None,
                 seqno: Optional[pulumi.Input[int]] = None):
        if bandwidth_bi_threshold is not None:
            pulumi.set(__self__, "bandwidth_bi_threshold", bandwidth_bi_threshold)
        if bandwidth_down_threshold is not None:
            pulumi.set(__self__, "bandwidth_down_threshold", bandwidth_down_threshold)
        if bandwidth_up_threshold is not None:
            pulumi.set(__self__, "bandwidth_up_threshold", bandwidth_up_threshold)
        if base is not None:
            pulumi.set(__self__, "base", base)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if packet_loss_threshold is not None:
            pulumi.set(__self__, "packet_loss_threshold", packet_loss_threshold)
        if redundant is not None:
            pulumi.set(__self__, "redundant", redundant)
        if seqno is not None:
            pulumi.set(__self__, "seqno", seqno)

    @property
    @pulumi.getter(name="bandwidthBiThreshold")
    def bandwidth_bi_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_bi_threshold")

    @bandwidth_bi_threshold.setter
    def bandwidth_bi_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_bi_threshold", value)

    @property
    @pulumi.getter(name="bandwidthDownThreshold")
    def bandwidth_down_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_down_threshold")

    @bandwidth_down_threshold.setter
    def bandwidth_down_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_down_threshold", value)

    @property
    @pulumi.getter(name="bandwidthUpThreshold")
    def bandwidth_up_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_up_threshold")

    @bandwidth_up_threshold.setter
    def bandwidth_up_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_up_threshold", value)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="packetLossThreshold")
    def packet_loss_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "packet_loss_threshold")

    @packet_loss_threshold.setter
    def packet_loss_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_loss_threshold", value)

    @property
    @pulumi.getter
    def redundant(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "redundant")

    @redundant.setter
    def redundant(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redundant", value)

    @property
    @pulumi.getter
    def seqno(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seqno")

    @seqno.setter
    def seqno(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seqno", value)


@pulumi.input_type
class VpnIpsecPhase1BackupGatewayArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class VpnIpsecPhase1CertificateArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnIpsecPhase1InterfaceBackupGatewayArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class VpnIpsecPhase1InterfaceCertificateArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnIpsecPhase1InterfaceIpv4ExcludeRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VpnIpsecPhase1InterfaceIpv6ExcludeRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VpnIpsecPhase1Ipv4ExcludeRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VpnIpsecPhase1Ipv6ExcludeRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VpnKmipServerServerListArgs:
    def __init__(__self__, *,
                 cert: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class VpnOcvpnForticlientAccessArgs:
    def __init__(__self__, *,
                 auth_groups: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupArgs']]]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if auth_groups is not None:
            pulumi.set(__self__, "auth_groups", auth_groups)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authGroups")
    def auth_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupArgs']]]]:
        return pulumi.get(self, "auth_groups")

    @auth_groups.setter
    def auth_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupArgs']]]]):
        pulumi.set(self, "auth_groups", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class VpnOcvpnForticlientAccessAuthGroupArgs:
    def __init__(__self__, *,
                 auth_group: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupOverlayArgs']]]] = None):
        if auth_group is not None:
            pulumi.set(__self__, "auth_group", auth_group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)

    @property
    @pulumi.getter(name="authGroup")
    def auth_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_group")

    @auth_group.setter
    def auth_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_group", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def overlays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupOverlayArgs']]]]:
        return pulumi.get(self, "overlays")

    @overlays.setter
    def overlays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupOverlayArgs']]]]):
        pulumi.set(self, "overlays", value)


@pulumi.input_type
class VpnOcvpnForticlientAccessAuthGroupOverlayArgs:
    def __init__(__self__, *,
                 overlay_name: Optional[pulumi.Input[str]] = None):
        if overlay_name is not None:
            pulumi.set(__self__, "overlay_name", overlay_name)

    @property
    @pulumi.getter(name="overlayName")
    def overlay_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overlay_name")

    @overlay_name.setter
    def overlay_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay_name", value)


@pulumi.input_type
class VpnOcvpnOverlayArgs:
    def __init__(__self__, *,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 inter_overlay: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overlay_name: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnOverlaySubnetArgs']]]] = None):
        if assign_ip is not None:
            pulumi.set(__self__, "assign_ip", assign_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inter_overlay is not None:
            pulumi.set(__self__, "inter_overlay", inter_overlay)
        if ipv4_end_ip is not None:
            pulumi.set(__self__, "ipv4_end_ip", ipv4_end_ip)
        if ipv4_start_ip is not None:
            pulumi.set(__self__, "ipv4_start_ip", ipv4_start_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlay_name is not None:
            pulumi.set(__self__, "overlay_name", overlay_name)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="assignIp")
    def assign_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assign_ip")

    @assign_ip.setter
    def assign_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="interOverlay")
    def inter_overlay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inter_overlay")

    @inter_overlay.setter
    def inter_overlay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_overlay", value)

    @property
    @pulumi.getter(name="ipv4EndIp")
    def ipv4_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_end_ip")

    @ipv4_end_ip.setter
    def ipv4_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_end_ip", value)

    @property
    @pulumi.getter(name="ipv4StartIp")
    def ipv4_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_start_ip")

    @ipv4_start_ip.setter
    def ipv4_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_start_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overlayName")
    def overlay_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overlay_name")

    @overlay_name.setter
    def overlay_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay_name", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnOverlaySubnetArgs']]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnOverlaySubnetArgs']]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class VpnOcvpnOverlaySubnetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VpnOcvpnWanInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleArgs:
    def __init__(__self__, *,
                 auth: Optional[pulumi.Input[str]] = None,
                 cipher: Optional[pulumi.Input[str]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleGroupArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 portal: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 source_address6_negate: Optional[pulumi.Input[str]] = None,
                 source_address6s: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddress6Args']]]] = None,
                 source_address_negate: Optional[pulumi.Input[str]] = None,
                 source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddressArgs']]]] = None,
                 source_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceInterfaceArgs']]]] = None,
                 user_peer: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleUserArgs']]]] = None):
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if portal is not None:
            pulumi.set(__self__, "portal", portal)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if source_address6_negate is not None:
            pulumi.set(__self__, "source_address6_negate", source_address6_negate)
        if source_address6s is not None:
            pulumi.set(__self__, "source_address6s", source_address6s)
        if source_address_negate is not None:
            pulumi.set(__self__, "source_address_negate", source_address_negate)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if source_interfaces is not None:
            pulumi.set(__self__, "source_interfaces", source_interfaces)
        if user_peer is not None:
            pulumi.set(__self__, "user_peer", user_peer)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleGroupArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal")

    @portal.setter
    def portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="sourceAddress6Negate")
    def source_address6_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_address6_negate")

    @source_address6_negate.setter
    def source_address6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address6_negate", value)

    @property
    @pulumi.getter(name="sourceAddress6s")
    def source_address6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddress6Args']]]]:
        return pulumi.get(self, "source_address6s")

    @source_address6s.setter
    def source_address6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddress6Args']]]]):
        pulumi.set(self, "source_address6s", value)

    @property
    @pulumi.getter(name="sourceAddressNegate")
    def source_address_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_address_negate")

    @source_address_negate.setter
    def source_address_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address_negate", value)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddressArgs']]]]:
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddressArgs']]]]):
        pulumi.set(self, "source_addresses", value)

    @property
    @pulumi.getter(name="sourceInterfaces")
    def source_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceInterfaceArgs']]]]:
        return pulumi.get(self, "source_interfaces")

    @source_interfaces.setter
    def source_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceInterfaceArgs']]]]):
        pulumi.set(self, "source_interfaces", value)

    @property
    @pulumi.getter(name="userPeer")
    def user_peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_peer")

    @user_peer.setter
    def user_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_peer", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleSourceAddress6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleSourceAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleSourceInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsSourceAddress6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsSourceAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsSourceInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsTunnelIpPoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsTunnelIpv6PoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebHostCheckSoftwareCheckItemListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 md5s: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebHostCheckSoftwareCheckItemListMd5Args']]]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5s is not None:
            pulumi.set(__self__, "md5s", md5s)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def md5s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebHostCheckSoftwareCheckItemListMd5Args']]]]:
        return pulumi.get(self, "md5s")

    @md5s.setter
    def md5s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebHostCheckSoftwareCheckItemListMd5Args']]]]):
        pulumi.set(self, "md5s", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class VpnSslWebHostCheckSoftwareCheckItemListMd5Args:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class VpnSslWebPortalBookmarkGroupArgs:
    def __init__(__self__, *,
                 bookmarks: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if bookmarks is not None:
            pulumi.set(__self__, "bookmarks", bookmarks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bookmarks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkArgs']]]]:
        return pulumi.get(self, "bookmarks")

    @bookmarks.setter
    def bookmarks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkArgs']]]]):
        pulumi.set(self, "bookmarks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalBookmarkGroupBookmarkArgs:
    def __init__(__self__, *,
                 additional_params: Optional[pulumi.Input[str]] = None,
                 apptype: Optional[pulumi.Input[str]] = None,
                 color_depth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 keyboard_layout: Optional[pulumi.Input[str]] = None,
                 listening_port: Optional[pulumi.Input[int]] = None,
                 load_balancing_info: Optional[pulumi.Input[str]] = None,
                 logon_password: Optional[pulumi.Input[str]] = None,
                 logon_user: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 preconnection_blob: Optional[pulumi.Input[str]] = None,
                 preconnection_id: Optional[pulumi.Input[int]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 restricted_admin: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 send_preconnection_id: Optional[pulumi.Input[str]] = None,
                 server_layout: Optional[pulumi.Input[str]] = None,
                 show_status_window: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_credential_sent_once: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vnc_keyboard_layout: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_params")

    @additional_params.setter
    def additional_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_params", value)

    @property
    @pulumi.getter
    def apptype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apptype")

    @apptype.setter
    def apptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apptype", value)

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_depth")

    @color_depth.setter
    def color_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_depth", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs']]]]:
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keyboard_layout")

    @keyboard_layout.setter
    def keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard_layout", value)

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "listening_port")

    @listening_port.setter
    def listening_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listening_port", value)

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancing_info")

    @load_balancing_info.setter
    def load_balancing_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_info", value)

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logon_password")

    @logon_password.setter
    def logon_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_password", value)

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logon_user")

    @logon_user.setter
    def logon_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preconnection_blob")

    @preconnection_blob.setter
    def preconnection_blob(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preconnection_blob", value)

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preconnection_id")

    @preconnection_id.setter
    def preconnection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preconnection_id", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restricted_admin")

    @restricted_admin.setter
    def restricted_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restricted_admin", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_preconnection_id")

    @send_preconnection_id.setter
    def send_preconnection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_preconnection_id", value)

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_layout")

    @server_layout.setter
    def server_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_layout", value)

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "show_status_window")

    @show_status_window.setter
    def show_status_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "show_status_window", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_credential_sent_once")

    @sso_credential_sent_once.setter
    def sso_credential_sent_once(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential_sent_once", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vnc_keyboard_layout")

    @vnc_keyboard_layout.setter
    def vnc_keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnc_keyboard_layout", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VpnSslWebPortalHostCheckPolicyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalIpPoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalIpv6PoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalLandingPageArgs:
    def __init__(__self__, *,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalLandingPageFormDataArgs']]]] = None,
                 logout_url: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if logout_url is not None:
            pulumi.set(__self__, "logout_url", logout_url)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalLandingPageFormDataArgs']]]]:
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalLandingPageFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter(name="logoutUrl")
    def logout_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logout_url")

    @logout_url.setter
    def logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_url", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VpnSslWebPortalLandingPageFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VpnSslWebPortalMacAddrCheckRuleArgs:
    def __init__(__self__, *,
                 mac_addr_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs']]]] = None,
                 mac_addr_mask: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if mac_addr_lists is not None:
            pulumi.set(__self__, "mac_addr_lists", mac_addr_lists)
        if mac_addr_mask is not None:
            pulumi.set(__self__, "mac_addr_mask", mac_addr_mask)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="macAddrLists")
    def mac_addr_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs']]]]:
        return pulumi.get(self, "mac_addr_lists")

    @mac_addr_lists.setter
    def mac_addr_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs']]]]):
        pulumi.set(self, "mac_addr_lists", value)

    @property
    @pulumi.getter(name="macAddrMask")
    def mac_addr_mask(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mac_addr_mask")

    @mac_addr_mask.setter
    def mac_addr_mask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_addr_mask", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs:
    def __init__(__self__, *,
                 addr: Optional[pulumi.Input[str]] = None):
        if addr is not None:
            pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr", value)


@pulumi.input_type
class VpnSslWebPortalOsCheckListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 latest_patch_level: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if latest_patch_level is not None:
            pulumi.set(__self__, "latest_patch_level", latest_patch_level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="latestPatchLevel")
    def latest_patch_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latest_patch_level")

    @latest_patch_level.setter
    def latest_patch_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_patch_level", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerance", value)


@pulumi.input_type
class VpnSslWebPortalSplitDnArgs:
    def __init__(__self__, *,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None):
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)


@pulumi.input_type
class VpnSslWebPortalSplitTunnelingRoutingAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebUserBookmarkBookmarkArgs:
    def __init__(__self__, *,
                 additional_params: Optional[pulumi.Input[str]] = None,
                 apptype: Optional[pulumi.Input[str]] = None,
                 color_depth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserBookmarkBookmarkFormDataArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 keyboard_layout: Optional[pulumi.Input[str]] = None,
                 listening_port: Optional[pulumi.Input[int]] = None,
                 load_balancing_info: Optional[pulumi.Input[str]] = None,
                 logon_password: Optional[pulumi.Input[str]] = None,
                 logon_user: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 preconnection_blob: Optional[pulumi.Input[str]] = None,
                 preconnection_id: Optional[pulumi.Input[int]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 restricted_admin: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 send_preconnection_id: Optional[pulumi.Input[str]] = None,
                 server_layout: Optional[pulumi.Input[str]] = None,
                 show_status_window: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_credential_sent_once: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vnc_keyboard_layout: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_params")

    @additional_params.setter
    def additional_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_params", value)

    @property
    @pulumi.getter
    def apptype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apptype")

    @apptype.setter
    def apptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apptype", value)

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_depth")

    @color_depth.setter
    def color_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_depth", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserBookmarkBookmarkFormDataArgs']]]]:
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserBookmarkBookmarkFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keyboard_layout")

    @keyboard_layout.setter
    def keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard_layout", value)

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "listening_port")

    @listening_port.setter
    def listening_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listening_port", value)

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancing_info")

    @load_balancing_info.setter
    def load_balancing_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_info", value)

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logon_password")

    @logon_password.setter
    def logon_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_password", value)

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logon_user")

    @logon_user.setter
    def logon_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preconnection_blob")

    @preconnection_blob.setter
    def preconnection_blob(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preconnection_blob", value)

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preconnection_id")

    @preconnection_id.setter
    def preconnection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preconnection_id", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restricted_admin")

    @restricted_admin.setter
    def restricted_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restricted_admin", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_preconnection_id")

    @send_preconnection_id.setter
    def send_preconnection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_preconnection_id", value)

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_layout")

    @server_layout.setter
    def server_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_layout", value)

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "show_status_window")

    @show_status_window.setter
    def show_status_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "show_status_window", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_credential_sent_once")

    @sso_credential_sent_once.setter
    def sso_credential_sent_once(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential_sent_once", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vnc_keyboard_layout")

    @vnc_keyboard_layout.setter
    def vnc_keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnc_keyboard_layout", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class VpnSslWebUserBookmarkBookmarkFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VpnSslWebUserGroupBookmarkBookmarkArgs:
    def __init__(__self__, *,
                 additional_params: Optional[pulumi.Input[str]] = None,
                 apptype: Optional[pulumi.Input[str]] = None,
                 color_depth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserGroupBookmarkBookmarkFormDataArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 keyboard_layout: Optional[pulumi.Input[str]] = None,
                 listening_port: Optional[pulumi.Input[int]] = None,
                 load_balancing_info: Optional[pulumi.Input[str]] = None,
                 logon_password: Optional[pulumi.Input[str]] = None,
                 logon_user: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 preconnection_blob: Optional[pulumi.Input[str]] = None,
                 preconnection_id: Optional[pulumi.Input[int]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 restricted_admin: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 send_preconnection_id: Optional[pulumi.Input[str]] = None,
                 server_layout: Optional[pulumi.Input[str]] = None,
                 show_status_window: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_credential_sent_once: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vnc_keyboard_layout: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_params")

    @additional_params.setter
    def additional_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_params", value)

    @property
    @pulumi.getter
    def apptype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apptype")

    @apptype.setter
    def apptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apptype", value)

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_depth")

    @color_depth.setter
    def color_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_depth", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserGroupBookmarkBookmarkFormDataArgs']]]]:
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserGroupBookmarkBookmarkFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keyboard_layout")

    @keyboard_layout.setter
    def keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard_layout", value)

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "listening_port")

    @listening_port.setter
    def listening_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listening_port", value)

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancing_info")

    @load_balancing_info.setter
    def load_balancing_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_info", value)

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logon_password")

    @logon_password.setter
    def logon_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_password", value)

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logon_user")

    @logon_user.setter
    def logon_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preconnection_blob")

    @preconnection_blob.setter
    def preconnection_blob(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preconnection_blob", value)

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preconnection_id")

    @preconnection_id.setter
    def preconnection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preconnection_id", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restricted_admin")

    @restricted_admin.setter
    def restricted_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restricted_admin", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_preconnection_id")

    @send_preconnection_id.setter
    def send_preconnection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_preconnection_id", value)

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_layout")

    @server_layout.setter
    def server_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_layout", value)

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "show_status_window")

    @show_status_window.setter
    def show_status_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "show_status_window", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_credential_sent_once")

    @sso_credential_sent_once.setter
    def sso_credential_sent_once(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential_sent_once", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vnc_keyboard_layout")

    @vnc_keyboard_layout.setter
    def vnc_keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnc_keyboard_layout", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class VpnSslWebUserGroupBookmarkBookmarkFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WafProfileAddressListArgs:
    def __init__(__self__, *,
                 blocked_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListBlockedAddressArgs']]]] = None,
                 blocked_log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trusted_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListTrustedAddressArgs']]]] = None):
        if blocked_addresses is not None:
            pulumi.set(__self__, "blocked_addresses", blocked_addresses)
        if blocked_log is not None:
            pulumi.set(__self__, "blocked_log", blocked_log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trusted_addresses is not None:
            pulumi.set(__self__, "trusted_addresses", trusted_addresses)

    @property
    @pulumi.getter(name="blockedAddresses")
    def blocked_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListBlockedAddressArgs']]]]:
        return pulumi.get(self, "blocked_addresses")

    @blocked_addresses.setter
    def blocked_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListBlockedAddressArgs']]]]):
        pulumi.set(self, "blocked_addresses", value)

    @property
    @pulumi.getter(name="blockedLog")
    def blocked_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blocked_log")

    @blocked_log.setter
    def blocked_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocked_log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trustedAddresses")
    def trusted_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListTrustedAddressArgs']]]]:
        return pulumi.get(self, "trusted_addresses")

    @trusted_addresses.setter
    def trusted_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListTrustedAddressArgs']]]]):
        pulumi.set(self, "trusted_addresses", value)


@pulumi.input_type
class WafProfileAddressListBlockedAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WafProfileAddressListTrustedAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WafProfileConstraintArgs:
    def __init__(__self__, *,
                 content_length: Optional[pulumi.Input['WafProfileConstraintContentLengthArgs']] = None,
                 exceptions: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileConstraintExceptionArgs']]]] = None,
                 header_length: Optional[pulumi.Input['WafProfileConstraintHeaderLengthArgs']] = None,
                 hostname: Optional[pulumi.Input['WafProfileConstraintHostnameArgs']] = None,
                 line_length: Optional[pulumi.Input['WafProfileConstraintLineLengthArgs']] = None,
                 malformed: Optional[pulumi.Input['WafProfileConstraintMalformedArgs']] = None,
                 max_cookie: Optional[pulumi.Input['WafProfileConstraintMaxCookieArgs']] = None,
                 max_header_line: Optional[pulumi.Input['WafProfileConstraintMaxHeaderLineArgs']] = None,
                 max_range_segment: Optional[pulumi.Input['WafProfileConstraintMaxRangeSegmentArgs']] = None,
                 max_url_param: Optional[pulumi.Input['WafProfileConstraintMaxUrlParamArgs']] = None,
                 method: Optional[pulumi.Input['WafProfileConstraintMethodArgs']] = None,
                 param_length: Optional[pulumi.Input['WafProfileConstraintParamLengthArgs']] = None,
                 url_param_length: Optional[pulumi.Input['WafProfileConstraintUrlParamLengthArgs']] = None,
                 version: Optional[pulumi.Input['WafProfileConstraintVersionArgs']] = None):
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if exceptions is not None:
            pulumi.set(__self__, "exceptions", exceptions)
        if header_length is not None:
            pulumi.set(__self__, "header_length", header_length)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if malformed is not None:
            pulumi.set(__self__, "malformed", malformed)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if param_length is not None:
            pulumi.set(__self__, "param_length", param_length)
        if url_param_length is not None:
            pulumi.set(__self__, "url_param_length", url_param_length)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[pulumi.Input['WafProfileConstraintContentLengthArgs']]:
        return pulumi.get(self, "content_length")

    @content_length.setter
    def content_length(self, value: Optional[pulumi.Input['WafProfileConstraintContentLengthArgs']]):
        pulumi.set(self, "content_length", value)

    @property
    @pulumi.getter
    def exceptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileConstraintExceptionArgs']]]]:
        return pulumi.get(self, "exceptions")

    @exceptions.setter
    def exceptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileConstraintExceptionArgs']]]]):
        pulumi.set(self, "exceptions", value)

    @property
    @pulumi.getter(name="headerLength")
    def header_length(self) -> Optional[pulumi.Input['WafProfileConstraintHeaderLengthArgs']]:
        return pulumi.get(self, "header_length")

    @header_length.setter
    def header_length(self, value: Optional[pulumi.Input['WafProfileConstraintHeaderLengthArgs']]):
        pulumi.set(self, "header_length", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input['WafProfileConstraintHostnameArgs']]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input['WafProfileConstraintHostnameArgs']]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional[pulumi.Input['WafProfileConstraintLineLengthArgs']]:
        return pulumi.get(self, "line_length")

    @line_length.setter
    def line_length(self, value: Optional[pulumi.Input['WafProfileConstraintLineLengthArgs']]):
        pulumi.set(self, "line_length", value)

    @property
    @pulumi.getter
    def malformed(self) -> Optional[pulumi.Input['WafProfileConstraintMalformedArgs']]:
        return pulumi.get(self, "malformed")

    @malformed.setter
    def malformed(self, value: Optional[pulumi.Input['WafProfileConstraintMalformedArgs']]):
        pulumi.set(self, "malformed", value)

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[pulumi.Input['WafProfileConstraintMaxCookieArgs']]:
        return pulumi.get(self, "max_cookie")

    @max_cookie.setter
    def max_cookie(self, value: Optional[pulumi.Input['WafProfileConstraintMaxCookieArgs']]):
        pulumi.set(self, "max_cookie", value)

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[pulumi.Input['WafProfileConstraintMaxHeaderLineArgs']]:
        return pulumi.get(self, "max_header_line")

    @max_header_line.setter
    def max_header_line(self, value: Optional[pulumi.Input['WafProfileConstraintMaxHeaderLineArgs']]):
        pulumi.set(self, "max_header_line", value)

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[pulumi.Input['WafProfileConstraintMaxRangeSegmentArgs']]:
        return pulumi.get(self, "max_range_segment")

    @max_range_segment.setter
    def max_range_segment(self, value: Optional[pulumi.Input['WafProfileConstraintMaxRangeSegmentArgs']]):
        pulumi.set(self, "max_range_segment", value)

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[pulumi.Input['WafProfileConstraintMaxUrlParamArgs']]:
        return pulumi.get(self, "max_url_param")

    @max_url_param.setter
    def max_url_param(self, value: Optional[pulumi.Input['WafProfileConstraintMaxUrlParamArgs']]):
        pulumi.set(self, "max_url_param", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['WafProfileConstraintMethodArgs']]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['WafProfileConstraintMethodArgs']]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="paramLength")
    def param_length(self) -> Optional[pulumi.Input['WafProfileConstraintParamLengthArgs']]:
        return pulumi.get(self, "param_length")

    @param_length.setter
    def param_length(self, value: Optional[pulumi.Input['WafProfileConstraintParamLengthArgs']]):
        pulumi.set(self, "param_length", value)

    @property
    @pulumi.getter(name="urlParamLength")
    def url_param_length(self) -> Optional[pulumi.Input['WafProfileConstraintUrlParamLengthArgs']]:
        return pulumi.get(self, "url_param_length")

    @url_param_length.setter
    def url_param_length(self, value: Optional[pulumi.Input['WafProfileConstraintUrlParamLengthArgs']]):
        pulumi.set(self, "url_param_length", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input['WafProfileConstraintVersionArgs']]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input['WafProfileConstraintVersionArgs']]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class WafProfileConstraintContentLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintExceptionArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 content_length: Optional[pulumi.Input[str]] = None,
                 header_length: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 line_length: Optional[pulumi.Input[str]] = None,
                 malformed: Optional[pulumi.Input[str]] = None,
                 max_cookie: Optional[pulumi.Input[str]] = None,
                 max_header_line: Optional[pulumi.Input[str]] = None,
                 max_range_segment: Optional[pulumi.Input[str]] = None,
                 max_url_param: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 param_length: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 url_param_length: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if header_length is not None:
            pulumi.set(__self__, "header_length", header_length)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if malformed is not None:
            pulumi.set(__self__, "malformed", malformed)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if param_length is not None:
            pulumi.set(__self__, "param_length", param_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if url_param_length is not None:
            pulumi.set(__self__, "url_param_length", url_param_length)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_length")

    @content_length.setter
    def content_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_length", value)

    @property
    @pulumi.getter(name="headerLength")
    def header_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header_length")

    @header_length.setter
    def header_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_length", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_length")

    @line_length.setter
    def line_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_length", value)

    @property
    @pulumi.getter
    def malformed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malformed")

    @malformed.setter
    def malformed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed", value)

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_cookie")

    @max_cookie.setter
    def max_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_cookie", value)

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_header_line")

    @max_header_line.setter
    def max_header_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_header_line", value)

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_range_segment")

    @max_range_segment.setter
    def max_range_segment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_range_segment", value)

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_url_param")

    @max_url_param.setter
    def max_url_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_url_param", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="paramLength")
    def param_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "param_length")

    @param_length.setter
    def param_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_length", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="urlParamLength")
    def url_param_length(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_param_length")

    @url_param_length.setter
    def url_param_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_param_length", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class WafProfileConstraintHeaderLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintHostnameArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintLineLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMalformedArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMaxCookieArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_cookie: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_cookie")

    @max_cookie.setter
    def max_cookie(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cookie", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMaxHeaderLineArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_header_line: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_header_line")

    @max_header_line.setter
    def max_header_line(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_header_line", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMaxRangeSegmentArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_range_segment: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_range_segment")

    @max_range_segment.setter
    def max_range_segment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_range_segment", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMaxUrlParamArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_url_param: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_url_param")

    @max_url_param.setter
    def max_url_param(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_url_param", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMethodArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintParamLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintUrlParamLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintVersionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileMethodArgs:
    def __init__(__self__, *,
                 default_allowed_methods: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 method_policies: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileMethodMethodPolicyArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if default_allowed_methods is not None:
            pulumi.set(__self__, "default_allowed_methods", default_allowed_methods)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if method_policies is not None:
            pulumi.set(__self__, "method_policies", method_policies)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="defaultAllowedMethods")
    def default_allowed_methods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_allowed_methods")

    @default_allowed_methods.setter
    def default_allowed_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_allowed_methods", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="methodPolicies")
    def method_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileMethodMethodPolicyArgs']]]]:
        return pulumi.get(self, "method_policies")

    @method_policies.setter
    def method_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileMethodMethodPolicyArgs']]]]):
        pulumi.set(self, "method_policies", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileMethodMethodPolicyArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 allowed_methods: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class WafProfileSignatureArgs:
    def __init__(__self__, *,
                 credit_card_detection_threshold: Optional[pulumi.Input[int]] = None,
                 custom_signatures: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureCustomSignatureArgs']]]] = None,
                 disabled_signatures: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSignatureArgs']]]] = None,
                 disabled_sub_classes: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSubClassArgs']]]] = None,
                 main_classes: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureMainClassArgs']]]] = None):
        if credit_card_detection_threshold is not None:
            pulumi.set(__self__, "credit_card_detection_threshold", credit_card_detection_threshold)
        if custom_signatures is not None:
            pulumi.set(__self__, "custom_signatures", custom_signatures)
        if disabled_signatures is not None:
            pulumi.set(__self__, "disabled_signatures", disabled_signatures)
        if disabled_sub_classes is not None:
            pulumi.set(__self__, "disabled_sub_classes", disabled_sub_classes)
        if main_classes is not None:
            pulumi.set(__self__, "main_classes", main_classes)

    @property
    @pulumi.getter(name="creditCardDetectionThreshold")
    def credit_card_detection_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "credit_card_detection_threshold")

    @credit_card_detection_threshold.setter
    def credit_card_detection_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "credit_card_detection_threshold", value)

    @property
    @pulumi.getter(name="customSignatures")
    def custom_signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureCustomSignatureArgs']]]]:
        return pulumi.get(self, "custom_signatures")

    @custom_signatures.setter
    def custom_signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureCustomSignatureArgs']]]]):
        pulumi.set(self, "custom_signatures", value)

    @property
    @pulumi.getter(name="disabledSignatures")
    def disabled_signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSignatureArgs']]]]:
        return pulumi.get(self, "disabled_signatures")

    @disabled_signatures.setter
    def disabled_signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSignatureArgs']]]]):
        pulumi.set(self, "disabled_signatures", value)

    @property
    @pulumi.getter(name="disabledSubClasses")
    def disabled_sub_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSubClassArgs']]]]:
        return pulumi.get(self, "disabled_sub_classes")

    @disabled_sub_classes.setter
    def disabled_sub_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSubClassArgs']]]]):
        pulumi.set(self, "disabled_sub_classes", value)

    @property
    @pulumi.getter(name="mainClasses")
    def main_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureMainClassArgs']]]]:
        return pulumi.get(self, "main_classes")

    @main_classes.setter
    def main_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureMainClassArgs']]]]):
        pulumi.set(self, "main_classes", value)


@pulumi.input_type
class WafProfileSignatureCustomSignatureArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WafProfileSignatureDisabledSignatureArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WafProfileSignatureDisabledSubClassArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WafProfileSignatureMainClassArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileUrlAccessArgs:
    def __init__(__self__, *,
                 access_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessAccessPatternArgs']]]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        if access_patterns is not None:
            pulumi.set(__self__, "access_patterns", access_patterns)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="accessPatterns")
    def access_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessAccessPatternArgs']]]]:
        return pulumi.get(self, "access_patterns")

    @access_patterns.setter
    def access_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessAccessPatternArgs']]]]):
        pulumi.set(self, "access_patterns", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class WafProfileUrlAccessAccessPatternArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 negate: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)


@pulumi.input_type
class WanoptCacheServiceDstPeerArgs:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[int]] = None,
                 device_id: Optional[pulumi.Input[str]] = None,
                 encode_type: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if encode_type is not None:
            pulumi.set(__self__, "encode_type", encode_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="encodeType")
    def encode_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "encode_type")

    @encode_type.setter
    def encode_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encode_type", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class WanoptCacheServiceSrcPeerArgs:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[int]] = None,
                 device_id: Optional[pulumi.Input[str]] = None,
                 encode_type: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if encode_type is not None:
            pulumi.set(__self__, "encode_type", encode_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="encodeType")
    def encode_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "encode_type")

    @encode_type.setter
    def encode_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encode_type", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleHostDomainNameSuffixArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleArgs:
    def __init__(__self__, *,
                 content_id: Optional[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleContentIdArgs']] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs']]]] = None,
                 match_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 skip_entries: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs']]]] = None,
                 skip_rule_mode: Optional[pulumi.Input[str]] = None):
        if content_id is not None:
            pulumi.set(__self__, "content_id", content_id)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if match_mode is not None:
            pulumi.set(__self__, "match_mode", match_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if skip_entries is not None:
            pulumi.set(__self__, "skip_entries", skip_entries)
        if skip_rule_mode is not None:
            pulumi.set(__self__, "skip_rule_mode", skip_rule_mode)

    @property
    @pulumi.getter(name="contentId")
    def content_id(self) -> Optional[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleContentIdArgs']]:
        return pulumi.get(self, "content_id")

    @content_id.setter
    def content_id(self, value: Optional[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleContentIdArgs']]):
        pulumi.set(self, "content_id", value)

    @property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs']]]]:
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)

    @property
    @pulumi.getter(name="matchMode")
    def match_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_mode")

    @match_mode.setter
    def match_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="skipEntries")
    def skip_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs']]]]:
        return pulumi.get(self, "skip_entries")

    @skip_entries.setter
    def skip_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs']]]]):
        pulumi.set(self, "skip_entries", value)

    @property
    @pulumi.getter(name="skipRuleMode")
    def skip_rule_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_rule_mode")

    @skip_rule_mode.setter
    def skip_rule_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_rule_mode", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleContentIdArgs:
    def __init__(__self__, *,
                 end_direction: Optional[pulumi.Input[str]] = None,
                 end_skip: Optional[pulumi.Input[int]] = None,
                 end_str: Optional[pulumi.Input[str]] = None,
                 range_str: Optional[pulumi.Input[str]] = None,
                 start_direction: Optional[pulumi.Input[str]] = None,
                 start_skip: Optional[pulumi.Input[int]] = None,
                 start_str: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if end_direction is not None:
            pulumi.set(__self__, "end_direction", end_direction)
        if end_skip is not None:
            pulumi.set(__self__, "end_skip", end_skip)
        if end_str is not None:
            pulumi.set(__self__, "end_str", end_str)
        if range_str is not None:
            pulumi.set(__self__, "range_str", range_str)
        if start_direction is not None:
            pulumi.set(__self__, "start_direction", start_direction)
        if start_skip is not None:
            pulumi.set(__self__, "start_skip", start_skip)
        if start_str is not None:
            pulumi.set(__self__, "start_str", start_str)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="endDirection")
    def end_direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_direction")

    @end_direction.setter
    def end_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_direction", value)

    @property
    @pulumi.getter(name="endSkip")
    def end_skip(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_skip")

    @end_skip.setter
    def end_skip(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_skip", value)

    @property
    @pulumi.getter(name="endStr")
    def end_str(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_str")

    @end_str.setter
    def end_str(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_str", value)

    @property
    @pulumi.getter(name="rangeStr")
    def range_str(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "range_str")

    @range_str.setter
    def range_str(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range_str", value)

    @property
    @pulumi.getter(name="startDirection")
    def start_direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_direction")

    @start_direction.setter
    def start_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_direction", value)

    @property
    @pulumi.getter(name="startSkip")
    def start_skip(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_skip")

    @start_skip.setter
    def start_skip(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_skip", value)

    @property
    @pulumi.getter(name="startStr")
    def start_str(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_str")

    @start_str.setter
    def start_str(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_str", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 patterns: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs']]]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs']]]]:
        return pulumi.get(self, "patterns")

    @patterns.setter
    def patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs']]]]):
        pulumi.set(self, "patterns", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs:
    def __init__(__self__, *,
                 string: Optional[pulumi.Input[str]] = None):
        if string is not None:
            pulumi.set(__self__, "string", string)

    @property
    @pulumi.getter
    def string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "string")

    @string.setter
    def string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 patterns: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs']]]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs']]]]:
        return pulumi.get(self, "patterns")

    @patterns.setter
    def patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs']]]]):
        pulumi.set(self, "patterns", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs:
    def __init__(__self__, *,
                 string: Optional[pulumi.Input[str]] = None):
        if string is not None:
            pulumi.set(__self__, "string", string)

    @property
    @pulumi.getter
    def string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "string")

    @string.setter
    def string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string", value)


@pulumi.input_type
class WanoptProfileCifsArgs:
    def __init__(__self__, *,
                 byte_caching: Optional[pulumi.Input[str]] = None,
                 log_traffic: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prefer_chunking: Optional[pulumi.Input[str]] = None,
                 protocol_opt: Optional[pulumi.Input[str]] = None,
                 secure_tunnel: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_sharing: Optional[pulumi.Input[str]] = None):
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prefer_chunking is not None:
            pulumi.set(__self__, "prefer_chunking", prefer_chunking)
        if protocol_opt is not None:
            pulumi.set(__self__, "protocol_opt", protocol_opt)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "byte_caching")

    @byte_caching.setter
    def byte_caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching", value)

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_traffic")

    @log_traffic.setter
    def log_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_traffic", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preferChunking")
    def prefer_chunking(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefer_chunking")

    @prefer_chunking.setter
    def prefer_chunking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefer_chunking", value)

    @property
    @pulumi.getter(name="protocolOpt")
    def protocol_opt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol_opt")

    @protocol_opt.setter
    def protocol_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_opt", value)

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secure_tunnel")

    @secure_tunnel.setter
    def secure_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_tunnel", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_sharing")

    @tunnel_sharing.setter
    def tunnel_sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_sharing", value)


@pulumi.input_type
class WanoptProfileFtpArgs:
    def __init__(__self__, *,
                 byte_caching: Optional[pulumi.Input[str]] = None,
                 log_traffic: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prefer_chunking: Optional[pulumi.Input[str]] = None,
                 protocol_opt: Optional[pulumi.Input[str]] = None,
                 secure_tunnel: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_sharing: Optional[pulumi.Input[str]] = None):
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prefer_chunking is not None:
            pulumi.set(__self__, "prefer_chunking", prefer_chunking)
        if protocol_opt is not None:
            pulumi.set(__self__, "protocol_opt", protocol_opt)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "byte_caching")

    @byte_caching.setter
    def byte_caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching", value)

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_traffic")

    @log_traffic.setter
    def log_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_traffic", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preferChunking")
    def prefer_chunking(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefer_chunking")

    @prefer_chunking.setter
    def prefer_chunking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefer_chunking", value)

    @property
    @pulumi.getter(name="protocolOpt")
    def protocol_opt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol_opt")

    @protocol_opt.setter
    def protocol_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_opt", value)

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secure_tunnel")

    @secure_tunnel.setter
    def secure_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_tunnel", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_sharing")

    @tunnel_sharing.setter
    def tunnel_sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_sharing", value)


@pulumi.input_type
class WanoptProfileHttpArgs:
    def __init__(__self__, *,
                 byte_caching: Optional[pulumi.Input[str]] = None,
                 log_traffic: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prefer_chunking: Optional[pulumi.Input[str]] = None,
                 protocol_opt: Optional[pulumi.Input[str]] = None,
                 secure_tunnel: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_non_http: Optional[pulumi.Input[str]] = None,
                 tunnel_sharing: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None):
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prefer_chunking is not None:
            pulumi.set(__self__, "prefer_chunking", prefer_chunking)
        if protocol_opt is not None:
            pulumi.set(__self__, "protocol_opt", protocol_opt)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_port is not None:
            pulumi.set(__self__, "ssl_port", ssl_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_non_http is not None:
            pulumi.set(__self__, "tunnel_non_http", tunnel_non_http)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "byte_caching")

    @byte_caching.setter
    def byte_caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching", value)

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_traffic")

    @log_traffic.setter
    def log_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_traffic", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preferChunking")
    def prefer_chunking(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefer_chunking")

    @prefer_chunking.setter
    def prefer_chunking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefer_chunking", value)

    @property
    @pulumi.getter(name="protocolOpt")
    def protocol_opt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol_opt")

    @protocol_opt.setter
    def protocol_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_opt", value)

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secure_tunnel")

    @secure_tunnel.setter
    def secure_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_tunnel", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslPort")
    def ssl_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_port")

    @ssl_port.setter
    def ssl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_non_http")

    @tunnel_non_http.setter
    def tunnel_non_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_non_http", value)

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_sharing")

    @tunnel_sharing.setter
    def tunnel_sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_sharing", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)


@pulumi.input_type
class WanoptProfileMapiArgs:
    def __init__(__self__, *,
                 byte_caching: Optional[pulumi.Input[str]] = None,
                 log_traffic: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 secure_tunnel: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_sharing: Optional[pulumi.Input[str]] = None):
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "byte_caching")

    @byte_caching.setter
    def byte_caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching", value)

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_traffic")

    @log_traffic.setter
    def log_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_traffic", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secure_tunnel")

    @secure_tunnel.setter
    def secure_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_tunnel", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_sharing")

    @tunnel_sharing.setter
    def tunnel_sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_sharing", value)


@pulumi.input_type
class WanoptProfileTcpArgs:
    def __init__(__self__, *,
                 byte_caching: Optional[pulumi.Input[str]] = None,
                 byte_caching_opt: Optional[pulumi.Input[str]] = None,
                 log_traffic: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 secure_tunnel: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_sharing: Optional[pulumi.Input[str]] = None):
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if byte_caching_opt is not None:
            pulumi.set(__self__, "byte_caching_opt", byte_caching_opt)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_port is not None:
            pulumi.set(__self__, "ssl_port", ssl_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "byte_caching")

    @byte_caching.setter
    def byte_caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching", value)

    @property
    @pulumi.getter(name="byteCachingOpt")
    def byte_caching_opt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "byte_caching_opt")

    @byte_caching_opt.setter
    def byte_caching_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching_opt", value)

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_traffic")

    @log_traffic.setter
    def log_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_traffic", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secure_tunnel")

    @secure_tunnel.setter
    def secure_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_tunnel", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslPort")
    def ssl_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssl_port")

    @ssl_port.setter
    def ssl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_sharing")

    @tunnel_sharing.setter
    def tunnel_sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_sharing", value)


@pulumi.input_type
class WebProxyExplicitPacPolicyArgs:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyDstaddrArgs']]]] = None,
                 pac_file_data: Optional[pulumi.Input[str]] = None,
                 pac_file_name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddr6Args']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddrArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if pac_file_data is not None:
            pulumi.set(__self__, "pac_file_data", pac_file_data)
        if pac_file_name is not None:
            pulumi.set(__self__, "pac_file_name", pac_file_name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyDstaddrArgs']]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="pacFileData")
    def pac_file_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_data")

    @pac_file_data.setter
    def pac_file_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_data", value)

    @property
    @pulumi.getter(name="pacFileName")
    def pac_file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_name")

    @pac_file_name.setter
    def pac_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddr6Args']]]]:
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddrArgs']]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WebProxyExplicitPacPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyExplicitPacPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyExplicitPacPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyExplicitSecureWebProxyCertArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyForwardServerGroupServerListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class WebProxyGlobalLearnClientIpSrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyGlobalLearnClientIpSrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyProfileHeaderArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 add_option: Optional[pulumi.Input[str]] = None,
                 base64_encoding: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddr6Args']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddrArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if add_option is not None:
            pulumi.set(__self__, "add_option", add_option)
        if base64_encoding is not None:
            pulumi.set(__self__, "base64_encoding", base64_encoding)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addOption")
    def add_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "add_option")

    @add_option.setter
    def add_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_option", value)

    @property
    @pulumi.getter(name="base64Encoding")
    def base64_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base64_encoding")

    @base64_encoding.setter
    def base64_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base64_encoding", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddr6Args']]]]:
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddrArgs']]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WebProxyProfileHeaderDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyProfileHeaderDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterContentEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WebfilterContentHeaderEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class WebfilterProfileAntiphishArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 check_basic_auth: Optional[pulumi.Input[str]] = None,
                 check_uri: Optional[pulumi.Input[str]] = None,
                 check_username_only: Optional[pulumi.Input[str]] = None,
                 custom_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishCustomPatternArgs']]]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 domain_controller: Optional[pulumi.Input[str]] = None,
                 inspection_entries: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishInspectionEntryArgs']]]] = None,
                 ldap: Optional[pulumi.Input[str]] = None,
                 max_body_len: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if check_basic_auth is not None:
            pulumi.set(__self__, "check_basic_auth", check_basic_auth)
        if check_uri is not None:
            pulumi.set(__self__, "check_uri", check_uri)
        if check_username_only is not None:
            pulumi.set(__self__, "check_username_only", check_username_only)
        if custom_patterns is not None:
            pulumi.set(__self__, "custom_patterns", custom_patterns)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if inspection_entries is not None:
            pulumi.set(__self__, "inspection_entries", inspection_entries)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if max_body_len is not None:
            pulumi.set(__self__, "max_body_len", max_body_len)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="checkBasicAuth")
    def check_basic_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_basic_auth")

    @check_basic_auth.setter
    def check_basic_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_basic_auth", value)

    @property
    @pulumi.getter(name="checkUri")
    def check_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_uri")

    @check_uri.setter
    def check_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_uri", value)

    @property
    @pulumi.getter(name="checkUsernameOnly")
    def check_username_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_username_only")

    @check_username_only.setter
    def check_username_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_username_only", value)

    @property
    @pulumi.getter(name="customPatterns")
    def custom_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishCustomPatternArgs']]]]:
        return pulumi.get(self, "custom_patterns")

    @custom_patterns.setter
    def custom_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishCustomPatternArgs']]]]):
        pulumi.set(self, "custom_patterns", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_controller")

    @domain_controller.setter
    def domain_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_controller", value)

    @property
    @pulumi.getter(name="inspectionEntries")
    def inspection_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishInspectionEntryArgs']]]]:
        return pulumi.get(self, "inspection_entries")

    @inspection_entries.setter
    def inspection_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishInspectionEntryArgs']]]]):
        pulumi.set(self, "inspection_entries", value)

    @property
    @pulumi.getter
    def ldap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap")

    @ldap.setter
    def ldap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap", value)

    @property
    @pulumi.getter(name="maxBodyLen")
    def max_body_len(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_body_len")

    @max_body_len.setter
    def max_body_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_body_len", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WebfilterProfileAntiphishCustomPatternArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WebfilterProfileAntiphishInspectionEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 fortiguard_category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fortiguard_category is not None:
            pulumi.set(__self__, "fortiguard_category", fortiguard_category)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiguard_category")

    @fortiguard_category.setter
    def fortiguard_category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 scan_archive_contents: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryArgs']]]]:
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_archive_contents")

    @scan_archive_contents.setter
    def scan_archive_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_archive_contents", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WebfilterProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 password_protected: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryFileTypeArgs']]]]:
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_protected")

    @password_protected.setter
    def password_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_protected", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WebfilterProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileFtgdWfArgs:
    def __init__(__self__, *,
                 exempt_quota: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterArgs']]]] = None,
                 max_quota_timeout: Optional[pulumi.Input[int]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 ovrd: Optional[pulumi.Input[str]] = None,
                 quotas: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfQuotaArgs']]]] = None,
                 rate_crl_urls: Optional[pulumi.Input[str]] = None,
                 rate_css_urls: Optional[pulumi.Input[str]] = None,
                 rate_image_urls: Optional[pulumi.Input[str]] = None,
                 rate_javascript_urls: Optional[pulumi.Input[str]] = None):
        if exempt_quota is not None:
            pulumi.set(__self__, "exempt_quota", exempt_quota)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if max_quota_timeout is not None:
            pulumi.set(__self__, "max_quota_timeout", max_quota_timeout)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if ovrd is not None:
            pulumi.set(__self__, "ovrd", ovrd)
        if quotas is not None:
            pulumi.set(__self__, "quotas", quotas)
        if rate_crl_urls is not None:
            pulumi.set(__self__, "rate_crl_urls", rate_crl_urls)
        if rate_css_urls is not None:
            pulumi.set(__self__, "rate_css_urls", rate_css_urls)
        if rate_image_urls is not None:
            pulumi.set(__self__, "rate_image_urls", rate_image_urls)
        if rate_javascript_urls is not None:
            pulumi.set(__self__, "rate_javascript_urls", rate_javascript_urls)

    @property
    @pulumi.getter(name="exemptQuota")
    def exempt_quota(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exempt_quota")

    @exempt_quota.setter
    def exempt_quota(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exempt_quota", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="maxQuotaTimeout")
    def max_quota_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_quota_timeout")

    @max_quota_timeout.setter
    def max_quota_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_quota_timeout", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def ovrd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ovrd")

    @ovrd.setter
    def ovrd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd", value)

    @property
    @pulumi.getter
    def quotas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfQuotaArgs']]]]:
        return pulumi.get(self, "quotas")

    @quotas.setter
    def quotas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfQuotaArgs']]]]):
        pulumi.set(self, "quotas", value)

    @property
    @pulumi.getter(name="rateCrlUrls")
    def rate_crl_urls(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rate_crl_urls")

    @rate_crl_urls.setter
    def rate_crl_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_crl_urls", value)

    @property
    @pulumi.getter(name="rateCssUrls")
    def rate_css_urls(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rate_css_urls")

    @rate_css_urls.setter
    def rate_css_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_css_urls", value)

    @property
    @pulumi.getter(name="rateImageUrls")
    def rate_image_urls(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rate_image_urls")

    @rate_image_urls.setter
    def rate_image_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_image_urls", value)

    @property
    @pulumi.getter(name="rateJavascriptUrls")
    def rate_javascript_urls(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rate_javascript_urls")

    @rate_javascript_urls.setter
    def rate_javascript_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_javascript_urls", value)


@pulumi.input_type
class WebfilterProfileFtgdWfFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 auth_usr_grps: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterAuthUsrGrpArgs']]]] = None,
                 category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 override_replacemsg: Optional[pulumi.Input[str]] = None,
                 warn_duration: Optional[pulumi.Input[str]] = None,
                 warning_duration_type: Optional[pulumi.Input[str]] = None,
                 warning_prompt: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auth_usr_grps is not None:
            pulumi.set(__self__, "auth_usr_grps", auth_usr_grps)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if override_replacemsg is not None:
            pulumi.set(__self__, "override_replacemsg", override_replacemsg)
        if warn_duration is not None:
            pulumi.set(__self__, "warn_duration", warn_duration)
        if warning_duration_type is not None:
            pulumi.set(__self__, "warning_duration_type", warning_duration_type)
        if warning_prompt is not None:
            pulumi.set(__self__, "warning_prompt", warning_prompt)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="authUsrGrps")
    def auth_usr_grps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterAuthUsrGrpArgs']]]]:
        return pulumi.get(self, "auth_usr_grps")

    @auth_usr_grps.setter
    def auth_usr_grps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterAuthUsrGrpArgs']]]]):
        pulumi.set(self, "auth_usr_grps", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="overrideReplacemsg")
    def override_replacemsg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_replacemsg")

    @override_replacemsg.setter
    def override_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_replacemsg", value)

    @property
    @pulumi.getter(name="warnDuration")
    def warn_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warn_duration")

    @warn_duration.setter
    def warn_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warn_duration", value)

    @property
    @pulumi.getter(name="warningDurationType")
    def warning_duration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning_duration_type")

    @warning_duration_type.setter
    def warning_duration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_duration_type", value)

    @property
    @pulumi.getter(name="warningPrompt")
    def warning_prompt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning_prompt")

    @warning_prompt.setter
    def warning_prompt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_prompt", value)


@pulumi.input_type
class WebfilterProfileFtgdWfFilterAuthUsrGrpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileFtgdWfQuotaArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 override_replacemsg: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if override_replacemsg is not None:
            pulumi.set(__self__, "override_replacemsg", override_replacemsg)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="overrideReplacemsg")
    def override_replacemsg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_replacemsg")

    @override_replacemsg.setter
    def override_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_replacemsg", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WebfilterProfileOverrideArgs:
    def __init__(__self__, *,
                 ovrd_cookie: Optional[pulumi.Input[str]] = None,
                 ovrd_dur: Optional[pulumi.Input[str]] = None,
                 ovrd_dur_mode: Optional[pulumi.Input[str]] = None,
                 ovrd_scope: Optional[pulumi.Input[str]] = None,
                 ovrd_user_groups: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideOvrdUserGroupArgs']]]] = None,
                 profile_attribute: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideProfileArgs']]]] = None):
        if ovrd_cookie is not None:
            pulumi.set(__self__, "ovrd_cookie", ovrd_cookie)
        if ovrd_dur is not None:
            pulumi.set(__self__, "ovrd_dur", ovrd_dur)
        if ovrd_dur_mode is not None:
            pulumi.set(__self__, "ovrd_dur_mode", ovrd_dur_mode)
        if ovrd_scope is not None:
            pulumi.set(__self__, "ovrd_scope", ovrd_scope)
        if ovrd_user_groups is not None:
            pulumi.set(__self__, "ovrd_user_groups", ovrd_user_groups)
        if profile_attribute is not None:
            pulumi.set(__self__, "profile_attribute", profile_attribute)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="ovrdCookie")
    def ovrd_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ovrd_cookie")

    @ovrd_cookie.setter
    def ovrd_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_cookie", value)

    @property
    @pulumi.getter(name="ovrdDur")
    def ovrd_dur(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ovrd_dur")

    @ovrd_dur.setter
    def ovrd_dur(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_dur", value)

    @property
    @pulumi.getter(name="ovrdDurMode")
    def ovrd_dur_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ovrd_dur_mode")

    @ovrd_dur_mode.setter
    def ovrd_dur_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_dur_mode", value)

    @property
    @pulumi.getter(name="ovrdScope")
    def ovrd_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ovrd_scope")

    @ovrd_scope.setter
    def ovrd_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_scope", value)

    @property
    @pulumi.getter(name="ovrdUserGroups")
    def ovrd_user_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideOvrdUserGroupArgs']]]]:
        return pulumi.get(self, "ovrd_user_groups")

    @ovrd_user_groups.setter
    def ovrd_user_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideOvrdUserGroupArgs']]]]):
        pulumi.set(self, "ovrd_user_groups", value)

    @property
    @pulumi.getter(name="profileAttribute")
    def profile_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_attribute")

    @profile_attribute.setter
    def profile_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_attribute", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideProfileArgs']]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideProfileArgs']]]]):
        pulumi.set(self, "profiles", value)


@pulumi.input_type
class WebfilterProfileOverrideOvrdUserGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileOverrideProfileArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileWebArgs:
    def __init__(__self__, *,
                 allowlist: Optional[pulumi.Input[str]] = None,
                 blacklist: Optional[pulumi.Input[str]] = None,
                 blocklist: Optional[pulumi.Input[str]] = None,
                 bword_table: Optional[pulumi.Input[int]] = None,
                 bword_threshold: Optional[pulumi.Input[int]] = None,
                 content_header_list: Optional[pulumi.Input[int]] = None,
                 keyword_matches: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWebKeywordMatchArgs']]]] = None,
                 log_search: Optional[pulumi.Input[str]] = None,
                 safe_search: Optional[pulumi.Input[str]] = None,
                 urlfilter_table: Optional[pulumi.Input[int]] = None,
                 vimeo_restrict: Optional[pulumi.Input[str]] = None,
                 whitelist: Optional[pulumi.Input[str]] = None,
                 youtube_restrict: Optional[pulumi.Input[str]] = None):
        if allowlist is not None:
            pulumi.set(__self__, "allowlist", allowlist)
        if blacklist is not None:
            pulumi.set(__self__, "blacklist", blacklist)
        if blocklist is not None:
            pulumi.set(__self__, "blocklist", blocklist)
        if bword_table is not None:
            pulumi.set(__self__, "bword_table", bword_table)
        if bword_threshold is not None:
            pulumi.set(__self__, "bword_threshold", bword_threshold)
        if content_header_list is not None:
            pulumi.set(__self__, "content_header_list", content_header_list)
        if keyword_matches is not None:
            pulumi.set(__self__, "keyword_matches", keyword_matches)
        if log_search is not None:
            pulumi.set(__self__, "log_search", log_search)
        if safe_search is not None:
            pulumi.set(__self__, "safe_search", safe_search)
        if urlfilter_table is not None:
            pulumi.set(__self__, "urlfilter_table", urlfilter_table)
        if vimeo_restrict is not None:
            pulumi.set(__self__, "vimeo_restrict", vimeo_restrict)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)
        if youtube_restrict is not None:
            pulumi.set(__self__, "youtube_restrict", youtube_restrict)

    @property
    @pulumi.getter
    def allowlist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowlist")

    @allowlist.setter
    def allowlist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowlist", value)

    @property
    @pulumi.getter
    def blacklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blacklist")

    @blacklist.setter
    def blacklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blacklist", value)

    @property
    @pulumi.getter
    def blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blocklist")

    @blocklist.setter
    def blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocklist", value)

    @property
    @pulumi.getter(name="bwordTable")
    def bword_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bword_table")

    @bword_table.setter
    def bword_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bword_table", value)

    @property
    @pulumi.getter(name="bwordThreshold")
    def bword_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bword_threshold")

    @bword_threshold.setter
    def bword_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bword_threshold", value)

    @property
    @pulumi.getter(name="contentHeaderList")
    def content_header_list(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "content_header_list")

    @content_header_list.setter
    def content_header_list(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_header_list", value)

    @property
    @pulumi.getter(name="keywordMatches")
    def keyword_matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWebKeywordMatchArgs']]]]:
        return pulumi.get(self, "keyword_matches")

    @keyword_matches.setter
    def keyword_matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWebKeywordMatchArgs']]]]):
        pulumi.set(self, "keyword_matches", value)

    @property
    @pulumi.getter(name="logSearch")
    def log_search(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_search")

    @log_search.setter
    def log_search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_search", value)

    @property
    @pulumi.getter(name="safeSearch")
    def safe_search(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "safe_search")

    @safe_search.setter
    def safe_search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "safe_search", value)

    @property
    @pulumi.getter(name="urlfilterTable")
    def urlfilter_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "urlfilter_table")

    @urlfilter_table.setter
    def urlfilter_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "urlfilter_table", value)

    @property
    @pulumi.getter(name="vimeoRestrict")
    def vimeo_restrict(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vimeo_restrict")

    @vimeo_restrict.setter
    def vimeo_restrict(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vimeo_restrict", value)

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "whitelist", value)

    @property
    @pulumi.getter(name="youtubeRestrict")
    def youtube_restrict(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "youtube_restrict")

    @youtube_restrict.setter
    def youtube_restrict(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "youtube_restrict", value)


@pulumi.input_type
class WebfilterProfileWebKeywordMatchArgs:
    def __init__(__self__, *,
                 pattern: Optional[pulumi.Input[str]] = None):
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class WebfilterProfileWispServerArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileYoutubeChannelFilterArgs:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WebfilterUrlfilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 antiphish_action: Optional[pulumi.Input[str]] = None,
                 dns_address_family: Optional[pulumi.Input[str]] = None,
                 exempt: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 referrer_host: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 web_proxy_profile: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if antiphish_action is not None:
            pulumi.set(__self__, "antiphish_action", antiphish_action)
        if dns_address_family is not None:
            pulumi.set(__self__, "dns_address_family", dns_address_family)
        if exempt is not None:
            pulumi.set(__self__, "exempt", exempt)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if referrer_host is not None:
            pulumi.set(__self__, "referrer_host", referrer_host)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if web_proxy_profile is not None:
            pulumi.set(__self__, "web_proxy_profile", web_proxy_profile)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="antiphishAction")
    def antiphish_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "antiphish_action")

    @antiphish_action.setter
    def antiphish_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antiphish_action", value)

    @property
    @pulumi.getter(name="dnsAddressFamily")
    def dns_address_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_address_family")

    @dns_address_family.setter
    def dns_address_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_address_family", value)

    @property
    @pulumi.getter
    def exempt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exempt")

    @exempt.setter
    def exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exempt", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="referrerHost")
    def referrer_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "referrer_host")

    @referrer_host.setter
    def referrer_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "referrer_host", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="webProxyProfile")
    def web_proxy_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_proxy_profile")

    @web_proxy_profile.setter
    def web_proxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_proxy_profile", value)


@pulumi.input_type
class WirelessControllerAccessControlListLayer3Ipv4RuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstport: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcport: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstport is not None:
            pulumi.set(__self__, "dstport", dstport)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcport is not None:
            pulumi.set(__self__, "srcport", srcport)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dstport")

    @dstport.setter
    def dstport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dstport", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "srcport")

    @srcport.setter
    def srcport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "srcport", value)


@pulumi.input_type
class WirelessControllerAccessControlListLayer3Ipv6RuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstport: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcport: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstport is not None:
            pulumi.set(__self__, "dstport", dstport)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcport is not None:
            pulumi.set(__self__, "srcport", srcport)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dstport")

    @dstport.setter
    def dstport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dstport", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "srcport")

    @srcport.setter
    def srcport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "srcport", value)


@pulumi.input_type
class WirelessControllerAddrgrpAddressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerApcfgProfileCommandListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passwd_value is not None:
            pulumi.set(__self__, "passwd_value", passwd_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwdValue")
    def passwd_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passwd_value")

    @passwd_value.setter
    def passwd_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WirelessControllerArrpProfileDarrpOptimizeScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerBonjourProfilePolicyListArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 from_vlan: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 services: Optional[pulumi.Input[str]] = None,
                 to_vlan: Optional[pulumi.Input[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_vlan is not None:
            pulumi.set(__self__, "from_vlan", from_vlan)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if to_vlan is not None:
            pulumi.set(__self__, "to_vlan", to_vlan)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fromVlan")
    def from_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_vlan")

    @from_vlan.setter
    def from_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_vlan", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="toVlan")
    def to_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "to_vlan")

    @to_vlan.setter
    def to_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to_vlan", value)


@pulumi.input_type
class WirelessControllerHotspot20Anqp3GppCellularMccMncListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 mcc: Optional[pulumi.Input[str]] = None,
                 mnc: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mcc is not None:
            pulumi.set(__self__, "mcc", mcc)
        if mnc is not None:
            pulumi.set(__self__, "mnc", mnc)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mcc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mcc")

    @mcc.setter
    def mcc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mcc", value)

    @property
    @pulumi.getter
    def mnc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mnc")

    @mnc.setter
    def mnc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mnc", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpNaiRealmNaiListArgs:
    def __init__(__self__, *,
                 eap_methods: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs']]]] = None,
                 encoding: Optional[pulumi.Input[str]] = None,
                 nai_realm: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if eap_methods is not None:
            pulumi.set(__self__, "eap_methods", eap_methods)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if nai_realm is not None:
            pulumi.set(__self__, "nai_realm", nai_realm)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="eapMethods")
    def eap_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs']]]]:
        return pulumi.get(self, "eap_methods")

    @eap_methods.setter
    def eap_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs']]]]):
        pulumi.set(self, "eap_methods", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nai_realm")

    @nai_realm.setter
    def nai_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nai_realm", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs:
    def __init__(__self__, *,
                 auth_params: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs']]]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 method: Optional[pulumi.Input[str]] = None):
        if auth_params is not None:
            pulumi.set(__self__, "auth_params", auth_params)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if method is not None:
            pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="authParams")
    def auth_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs']]]]:
        return pulumi.get(self, "auth_params")

    @auth_params.setter
    def auth_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs']]]]):
        pulumi.set(self, "auth_params", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 val: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if val is not None:
            pulumi.set(__self__, "val", val)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def val(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "val")

    @val.setter
    def val(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "val", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpRoamingConsortiumOiListArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 oi: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if oi is not None:
            pulumi.set(__self__, "oi", oi)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def oi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oi")

    @oi.setter
    def oi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oi", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpVenueNameValueListArgs:
    def __init__(__self__, *,
                 index: Optional[pulumi.Input[int]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpVenueUrlValueListArgs:
    def __init__(__self__, *,
                 index: Optional[pulumi.Input[int]] = None,
                 number: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if index is not None:
            pulumi.set(__self__, "index", index)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpAdviceOfChargeAocListArgs:
    def __init__(__self__, *,
                 nai_realm: Optional[pulumi.Input[str]] = None,
                 nai_realm_encoding: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plan_infos: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if nai_realm is not None:
            pulumi.set(__self__, "nai_realm", nai_realm)
        if nai_realm_encoding is not None:
            pulumi.set(__self__, "nai_realm_encoding", nai_realm_encoding)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plan_infos is not None:
            pulumi.set(__self__, "plan_infos", plan_infos)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nai_realm")

    @nai_realm.setter
    def nai_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nai_realm", value)

    @property
    @pulumi.getter(name="naiRealmEncoding")
    def nai_realm_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nai_realm_encoding")

    @nai_realm_encoding.setter
    def nai_realm_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nai_realm_encoding", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="planInfos")
    def plan_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs']]]]:
        return pulumi.get(self, "plan_infos")

    @plan_infos.setter
    def plan_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs']]]]):
        pulumi.set(self, "plan_infos", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs:
    def __init__(__self__, *,
                 currency: Optional[pulumi.Input[str]] = None,
                 info_file: Optional[pulumi.Input[str]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if info_file is not None:
            pulumi.set(__self__, "info_file", info_file)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def currency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "currency")

    @currency.setter
    def currency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "currency", value)

    @property
    @pulumi.getter(name="infoFile")
    def info_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "info_file")

    @info_file.setter
    def info_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "info_file", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpOperatorNameValueListArgs:
    def __init__(__self__, *,
                 index: Optional[pulumi.Input[int]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpOsuProviderFriendlyNameArgs:
    def __init__(__self__, *,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 lang: Optional[pulumi.Input[str]] = None):
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpOsuProviderNaiNaiListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 osu_nai: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if osu_nai is not None:
            pulumi.set(__self__, "osu_nai", osu_nai)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osuNai")
    def osu_nai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osu_nai")

    @osu_nai.setter
    def osu_nai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_nai", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpOsuProviderServiceDescriptionArgs:
    def __init__(__self__, *,
                 lang: Optional[pulumi.Input[str]] = None,
                 service_description: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[int]] = None):
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if service_description is not None:
            pulumi.set(__self__, "service_description", service_description)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter(name="serviceDescription")
    def service_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_description")

    @service_description.setter
    def service_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_description", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class WirelessControllerHotspot20HsProfileOsuProviderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerHotspot20IconIconListArgs:
    def __init__(__self__, *,
                 file: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        if file is not None:
            pulumi.set(__self__, "file", file)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WirelessControllerHotspot20QosMapDscpExceptArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 up: Optional[pulumi.Input[int]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if up is not None:
            pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def up(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "up")

    @up.setter
    def up(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "up", value)


@pulumi.input_type
class WirelessControllerHotspot20QosMapDscpRangeArgs:
    def __init__(__self__, *,
                 high: Optional[pulumi.Input[int]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 low: Optional[pulumi.Input[int]] = None,
                 up: Optional[pulumi.Input[int]] = None):
        if high is not None:
            pulumi.set(__self__, "high", high)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if up is not None:
            pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def high(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "high")

    @high.setter
    def high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "high", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def low(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "low")

    @low.setter
    def low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "low", value)

    @property
    @pulumi.getter
    def up(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "up")

    @up.setter
    def up(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "up", value)


@pulumi.input_type
class WirelessControllerInterControllerInterControllerPeerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 peer_ip: Optional[pulumi.Input[str]] = None,
                 peer_port: Optional[pulumi.Input[int]] = None,
                 peer_priority: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)
        if peer_port is not None:
            pulumi.set(__self__, "peer_port", peer_port)
        if peer_priority is not None:
            pulumi.set(__self__, "peer_priority", peer_priority)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_ip")

    @peer_ip.setter
    def peer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_ip", value)

    @property
    @pulumi.getter(name="peerPort")
    def peer_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "peer_port")

    @peer_port.setter
    def peer_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_port", value)

    @property
    @pulumi.getter(name="peerPriority")
    def peer_priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_priority")

    @peer_priority.setter
    def peer_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_priority", value)


@pulumi.input_type
class WirelessControllerMpskProfileMpskGroupArgs:
    def __init__(__self__, *,
                 mpsk_keys: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vlan_type: Optional[pulumi.Input[str]] = None):
        if mpsk_keys is not None:
            pulumi.set(__self__, "mpsk_keys", mpsk_keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_type is not None:
            pulumi.set(__self__, "vlan_type", vlan_type)

    @property
    @pulumi.getter(name="mpskKeys")
    def mpsk_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyArgs']]]]:
        return pulumi.get(self, "mpsk_keys")

    @mpsk_keys.setter
    def mpsk_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyArgs']]]]):
        pulumi.set(self, "mpsk_keys", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vlanType")
    def vlan_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_type")

    @vlan_type.setter
    def vlan_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_type", value)


@pulumi.input_type
class WirelessControllerMpskProfileMpskGroupMpskKeyArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 concurrent_client_limit_type: Optional[pulumi.Input[str]] = None,
                 concurrent_clients: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mpsk_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if concurrent_client_limit_type is not None:
            pulumi.set(__self__, "concurrent_client_limit_type", concurrent_client_limit_type)
        if concurrent_clients is not None:
            pulumi.set(__self__, "concurrent_clients", concurrent_clients)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mpsk_schedules is not None:
            pulumi.set(__self__, "mpsk_schedules", mpsk_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="concurrentClientLimitType")
    def concurrent_client_limit_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "concurrent_client_limit_type")

    @concurrent_client_limit_type.setter
    def concurrent_client_limit_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "concurrent_client_limit_type", value)

    @property
    @pulumi.getter(name="concurrentClients")
    def concurrent_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrent_clients")

    @concurrent_clients.setter
    def concurrent_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_clients", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="mpskSchedules")
    def mpsk_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs']]]]:
        return pulumi.get(self, "mpsk_schedules")

    @mpsk_schedules.setter
    def mpsk_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs']]]]):
        pulumi.set(self, "mpsk_schedules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)


@pulumi.input_type
class WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerQosProfileDscpWmmBeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerQosProfileDscpWmmBkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerQosProfileDscpWmmViArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerQosProfileDscpWmmVoArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerSettingDarrpOptimizeScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerSettingOffendingSsidArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ssid_pattern: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ssid_pattern is not None:
            pulumi.set(__self__, "ssid_pattern", ssid_pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ssidPattern")
    def ssid_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssid_pattern")

    @ssid_pattern.setter
    def ssid_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid_pattern", value)


@pulumi.input_type
class WirelessControllerSnmpCommunityArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerSnmpCommunityHostArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None):
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerSnmpCommunityHostArgs']]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerSnmpCommunityHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_v1_status")

    @query_v1_status.setter
    def query_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v1_status", value)

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_v2c_status")

    @query_v2c_status.setter
    def query_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v2c_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_v1_status")

    @trap_v1_status.setter
    def trap_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v1_status", value)

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_v2c_status")

    @trap_v2c_status.setter
    def trap_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v2c_status", value)


@pulumi.input_type
class WirelessControllerSnmpCommunityHostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class WirelessControllerSnmpUserArgs:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None):
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_hosts is not None:
            pulumi.set(__self__, "notify_hosts", notify_hosts)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_status is not None:
            pulumi.set(__self__, "trap_status", trap_status)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyHosts")
    def notify_hosts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_hosts")

    @notify_hosts.setter
    def notify_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapStatus")
    def trap_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_status")

    @trap_status.setter
    def trap_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_status", value)


@pulumi.input_type
class WirelessControllerTimersDarrpTimeArgs:
    def __init__(__self__, *,
                 time: Optional[pulumi.Input[str]] = None):
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class WirelessControllerVapGroupVapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerVapMacFilterListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mac_filter_policy: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mac_filter_policy is not None:
            pulumi.set(__self__, "mac_filter_policy", mac_filter_policy)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="macFilterPolicy")
    def mac_filter_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_filter_policy")

    @mac_filter_policy.setter
    def mac_filter_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_filter_policy", value)


@pulumi.input_type
class WirelessControllerVapMpskKeyArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 concurrent_clients: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 mpsk_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyMpskScheduleArgs']]]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if concurrent_clients is not None:
            pulumi.set(__self__, "concurrent_clients", concurrent_clients)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if mpsk_schedules is not None:
            pulumi.set(__self__, "mpsk_schedules", mpsk_schedules)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="concurrentClients")
    def concurrent_clients(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "concurrent_clients")

    @concurrent_clients.setter
    def concurrent_clients(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "concurrent_clients", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="mpskSchedules")
    def mpsk_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyMpskScheduleArgs']]]]:
        return pulumi.get(self, "mpsk_schedules")

    @mpsk_schedules.setter
    def mpsk_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyMpskScheduleArgs']]]]):
        pulumi.set(self, "mpsk_schedules", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)


@pulumi.input_type
class WirelessControllerVapMpskKeyMpskScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerVapPortalMessageOverridesArgs:
    def __init__(__self__, *,
                 auth_disclaimer_page: Optional[pulumi.Input[str]] = None,
                 auth_login_failed_page: Optional[pulumi.Input[str]] = None,
                 auth_login_page: Optional[pulumi.Input[str]] = None,
                 auth_reject_page: Optional[pulumi.Input[str]] = None):
        if auth_disclaimer_page is not None:
            pulumi.set(__self__, "auth_disclaimer_page", auth_disclaimer_page)
        if auth_login_failed_page is not None:
            pulumi.set(__self__, "auth_login_failed_page", auth_login_failed_page)
        if auth_login_page is not None:
            pulumi.set(__self__, "auth_login_page", auth_login_page)
        if auth_reject_page is not None:
            pulumi.set(__self__, "auth_reject_page", auth_reject_page)

    @property
    @pulumi.getter(name="authDisclaimerPage")
    def auth_disclaimer_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_disclaimer_page")

    @auth_disclaimer_page.setter
    def auth_disclaimer_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_disclaimer_page", value)

    @property
    @pulumi.getter(name="authLoginFailedPage")
    def auth_login_failed_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_login_failed_page")

    @auth_login_failed_page.setter
    def auth_login_failed_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_login_failed_page", value)

    @property
    @pulumi.getter(name="authLoginPage")
    def auth_login_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_login_page")

    @auth_login_page.setter
    def auth_login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_login_page", value)

    @property
    @pulumi.getter(name="authRejectPage")
    def auth_reject_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_reject_page")

    @auth_reject_page.setter
    def auth_reject_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_reject_page", value)


@pulumi.input_type
class WirelessControllerVapRadiusMacAuthUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerVapSelectedUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerVapUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerVapVlanNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class WirelessControllerVapVlanPoolArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 wtp_group: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if wtp_group is not None:
            pulumi.set(__self__, "wtp_group", wtp_group)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="wtpGroup")
    def wtp_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wtp_group")

    @wtp_group.setter
    def wtp_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_group", value)


@pulumi.input_type
class WirelessControllerWidsProfileApBgscanDisableScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpGroupWtpArgs:
    def __init__(__self__, *,
                 wtp_id: Optional[pulumi.Input[str]] = None):
        if wtp_id is not None:
            pulumi.set(__self__, "wtp_id", wtp_id)

    @property
    @pulumi.getter(name="wtpId")
    def wtp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wtp_id")

    @wtp_id.setter
    def wtp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_id", value)


@pulumi.input_type
class WirelessControllerWtpLanArgs:
    def __init__(__self__, *,
                 port1_mode: Optional[pulumi.Input[str]] = None,
                 port1_ssid: Optional[pulumi.Input[str]] = None,
                 port2_mode: Optional[pulumi.Input[str]] = None,
                 port2_ssid: Optional[pulumi.Input[str]] = None,
                 port3_mode: Optional[pulumi.Input[str]] = None,
                 port3_ssid: Optional[pulumi.Input[str]] = None,
                 port4_mode: Optional[pulumi.Input[str]] = None,
                 port4_ssid: Optional[pulumi.Input[str]] = None,
                 port5_mode: Optional[pulumi.Input[str]] = None,
                 port5_ssid: Optional[pulumi.Input[str]] = None,
                 port6_mode: Optional[pulumi.Input[str]] = None,
                 port6_ssid: Optional[pulumi.Input[str]] = None,
                 port7_mode: Optional[pulumi.Input[str]] = None,
                 port7_ssid: Optional[pulumi.Input[str]] = None,
                 port8_mode: Optional[pulumi.Input[str]] = None,
                 port8_ssid: Optional[pulumi.Input[str]] = None,
                 port_esl_mode: Optional[pulumi.Input[str]] = None,
                 port_esl_ssid: Optional[pulumi.Input[str]] = None,
                 port_mode: Optional[pulumi.Input[str]] = None,
                 port_ssid: Optional[pulumi.Input[str]] = None):
        if port1_mode is not None:
            pulumi.set(__self__, "port1_mode", port1_mode)
        if port1_ssid is not None:
            pulumi.set(__self__, "port1_ssid", port1_ssid)
        if port2_mode is not None:
            pulumi.set(__self__, "port2_mode", port2_mode)
        if port2_ssid is not None:
            pulumi.set(__self__, "port2_ssid", port2_ssid)
        if port3_mode is not None:
            pulumi.set(__self__, "port3_mode", port3_mode)
        if port3_ssid is not None:
            pulumi.set(__self__, "port3_ssid", port3_ssid)
        if port4_mode is not None:
            pulumi.set(__self__, "port4_mode", port4_mode)
        if port4_ssid is not None:
            pulumi.set(__self__, "port4_ssid", port4_ssid)
        if port5_mode is not None:
            pulumi.set(__self__, "port5_mode", port5_mode)
        if port5_ssid is not None:
            pulumi.set(__self__, "port5_ssid", port5_ssid)
        if port6_mode is not None:
            pulumi.set(__self__, "port6_mode", port6_mode)
        if port6_ssid is not None:
            pulumi.set(__self__, "port6_ssid", port6_ssid)
        if port7_mode is not None:
            pulumi.set(__self__, "port7_mode", port7_mode)
        if port7_ssid is not None:
            pulumi.set(__self__, "port7_ssid", port7_ssid)
        if port8_mode is not None:
            pulumi.set(__self__, "port8_mode", port8_mode)
        if port8_ssid is not None:
            pulumi.set(__self__, "port8_ssid", port8_ssid)
        if port_esl_mode is not None:
            pulumi.set(__self__, "port_esl_mode", port_esl_mode)
        if port_esl_ssid is not None:
            pulumi.set(__self__, "port_esl_ssid", port_esl_ssid)
        if port_mode is not None:
            pulumi.set(__self__, "port_mode", port_mode)
        if port_ssid is not None:
            pulumi.set(__self__, "port_ssid", port_ssid)

    @property
    @pulumi.getter(name="port1Mode")
    def port1_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port1_mode")

    @port1_mode.setter
    def port1_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_mode", value)

    @property
    @pulumi.getter(name="port1Ssid")
    def port1_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port1_ssid")

    @port1_ssid.setter
    def port1_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_ssid", value)

    @property
    @pulumi.getter(name="port2Mode")
    def port2_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port2_mode")

    @port2_mode.setter
    def port2_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_mode", value)

    @property
    @pulumi.getter(name="port2Ssid")
    def port2_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port2_ssid")

    @port2_ssid.setter
    def port2_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_ssid", value)

    @property
    @pulumi.getter(name="port3Mode")
    def port3_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port3_mode")

    @port3_mode.setter
    def port3_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_mode", value)

    @property
    @pulumi.getter(name="port3Ssid")
    def port3_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port3_ssid")

    @port3_ssid.setter
    def port3_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_ssid", value)

    @property
    @pulumi.getter(name="port4Mode")
    def port4_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port4_mode")

    @port4_mode.setter
    def port4_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_mode", value)

    @property
    @pulumi.getter(name="port4Ssid")
    def port4_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port4_ssid")

    @port4_ssid.setter
    def port4_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_ssid", value)

    @property
    @pulumi.getter(name="port5Mode")
    def port5_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port5_mode")

    @port5_mode.setter
    def port5_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_mode", value)

    @property
    @pulumi.getter(name="port5Ssid")
    def port5_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port5_ssid")

    @port5_ssid.setter
    def port5_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_ssid", value)

    @property
    @pulumi.getter(name="port6Mode")
    def port6_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port6_mode")

    @port6_mode.setter
    def port6_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_mode", value)

    @property
    @pulumi.getter(name="port6Ssid")
    def port6_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port6_ssid")

    @port6_ssid.setter
    def port6_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_ssid", value)

    @property
    @pulumi.getter(name="port7Mode")
    def port7_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port7_mode")

    @port7_mode.setter
    def port7_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_mode", value)

    @property
    @pulumi.getter(name="port7Ssid")
    def port7_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port7_ssid")

    @port7_ssid.setter
    def port7_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_ssid", value)

    @property
    @pulumi.getter(name="port8Mode")
    def port8_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port8_mode")

    @port8_mode.setter
    def port8_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_mode", value)

    @property
    @pulumi.getter(name="port8Ssid")
    def port8_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port8_ssid")

    @port8_ssid.setter
    def port8_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_ssid", value)

    @property
    @pulumi.getter(name="portEslMode")
    def port_esl_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_esl_mode")

    @port_esl_mode.setter
    def port_esl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_mode", value)

    @property
    @pulumi.getter(name="portEslSsid")
    def port_esl_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_esl_ssid")

    @port_esl_ssid.setter
    def port_esl_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_ssid", value)

    @property
    @pulumi.getter(name="portMode")
    def port_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_mode")

    @port_mode.setter
    def port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_mode", value)

    @property
    @pulumi.getter(name="portSsid")
    def port_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_ssid")

    @port_ssid.setter
    def port_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_ssid", value)


@pulumi.input_type
class WirelessControllerWtpProfileDenyMacListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)


@pulumi.input_type
class WirelessControllerWtpProfileEslSesDongleArgs:
    def __init__(__self__, *,
                 apc_addr_type: Optional[pulumi.Input[str]] = None,
                 apc_fqdn: Optional[pulumi.Input[str]] = None,
                 apc_ip: Optional[pulumi.Input[str]] = None,
                 apc_port: Optional[pulumi.Input[int]] = None,
                 coex_level: Optional[pulumi.Input[str]] = None,
                 compliance_level: Optional[pulumi.Input[str]] = None,
                 esl_channel: Optional[pulumi.Input[str]] = None,
                 output_power: Optional[pulumi.Input[str]] = None,
                 scd_enable: Optional[pulumi.Input[str]] = None,
                 tls_cert_verification: Optional[pulumi.Input[str]] = None,
                 tls_fqdn_verification: Optional[pulumi.Input[str]] = None):
        if apc_addr_type is not None:
            pulumi.set(__self__, "apc_addr_type", apc_addr_type)
        if apc_fqdn is not None:
            pulumi.set(__self__, "apc_fqdn", apc_fqdn)
        if apc_ip is not None:
            pulumi.set(__self__, "apc_ip", apc_ip)
        if apc_port is not None:
            pulumi.set(__self__, "apc_port", apc_port)
        if coex_level is not None:
            pulumi.set(__self__, "coex_level", coex_level)
        if compliance_level is not None:
            pulumi.set(__self__, "compliance_level", compliance_level)
        if esl_channel is not None:
            pulumi.set(__self__, "esl_channel", esl_channel)
        if output_power is not None:
            pulumi.set(__self__, "output_power", output_power)
        if scd_enable is not None:
            pulumi.set(__self__, "scd_enable", scd_enable)
        if tls_cert_verification is not None:
            pulumi.set(__self__, "tls_cert_verification", tls_cert_verification)
        if tls_fqdn_verification is not None:
            pulumi.set(__self__, "tls_fqdn_verification", tls_fqdn_verification)

    @property
    @pulumi.getter(name="apcAddrType")
    def apc_addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apc_addr_type")

    @apc_addr_type.setter
    def apc_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apc_addr_type", value)

    @property
    @pulumi.getter(name="apcFqdn")
    def apc_fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apc_fqdn")

    @apc_fqdn.setter
    def apc_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apc_fqdn", value)

    @property
    @pulumi.getter(name="apcIp")
    def apc_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apc_ip")

    @apc_ip.setter
    def apc_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apc_ip", value)

    @property
    @pulumi.getter(name="apcPort")
    def apc_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "apc_port")

    @apc_port.setter
    def apc_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "apc_port", value)

    @property
    @pulumi.getter(name="coexLevel")
    def coex_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coex_level")

    @coex_level.setter
    def coex_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coex_level", value)

    @property
    @pulumi.getter(name="complianceLevel")
    def compliance_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compliance_level")

    @compliance_level.setter
    def compliance_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_level", value)

    @property
    @pulumi.getter(name="eslChannel")
    def esl_channel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "esl_channel")

    @esl_channel.setter
    def esl_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "esl_channel", value)

    @property
    @pulumi.getter(name="outputPower")
    def output_power(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_power")

    @output_power.setter
    def output_power(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_power", value)

    @property
    @pulumi.getter(name="scdEnable")
    def scd_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scd_enable")

    @scd_enable.setter
    def scd_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scd_enable", value)

    @property
    @pulumi.getter(name="tlsCertVerification")
    def tls_cert_verification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_cert_verification")

    @tls_cert_verification.setter
    def tls_cert_verification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_cert_verification", value)

    @property
    @pulumi.getter(name="tlsFqdnVerification")
    def tls_fqdn_verification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_fqdn_verification")

    @tls_fqdn_verification.setter
    def tls_fqdn_verification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_fqdn_verification", value)


@pulumi.input_type
class WirelessControllerWtpProfileLanArgs:
    def __init__(__self__, *,
                 port1_mode: Optional[pulumi.Input[str]] = None,
                 port1_ssid: Optional[pulumi.Input[str]] = None,
                 port2_mode: Optional[pulumi.Input[str]] = None,
                 port2_ssid: Optional[pulumi.Input[str]] = None,
                 port3_mode: Optional[pulumi.Input[str]] = None,
                 port3_ssid: Optional[pulumi.Input[str]] = None,
                 port4_mode: Optional[pulumi.Input[str]] = None,
                 port4_ssid: Optional[pulumi.Input[str]] = None,
                 port5_mode: Optional[pulumi.Input[str]] = None,
                 port5_ssid: Optional[pulumi.Input[str]] = None,
                 port6_mode: Optional[pulumi.Input[str]] = None,
                 port6_ssid: Optional[pulumi.Input[str]] = None,
                 port7_mode: Optional[pulumi.Input[str]] = None,
                 port7_ssid: Optional[pulumi.Input[str]] = None,
                 port8_mode: Optional[pulumi.Input[str]] = None,
                 port8_ssid: Optional[pulumi.Input[str]] = None,
                 port_esl_mode: Optional[pulumi.Input[str]] = None,
                 port_esl_ssid: Optional[pulumi.Input[str]] = None,
                 port_mode: Optional[pulumi.Input[str]] = None,
                 port_ssid: Optional[pulumi.Input[str]] = None):
        if port1_mode is not None:
            pulumi.set(__self__, "port1_mode", port1_mode)
        if port1_ssid is not None:
            pulumi.set(__self__, "port1_ssid", port1_ssid)
        if port2_mode is not None:
            pulumi.set(__self__, "port2_mode", port2_mode)
        if port2_ssid is not None:
            pulumi.set(__self__, "port2_ssid", port2_ssid)
        if port3_mode is not None:
            pulumi.set(__self__, "port3_mode", port3_mode)
        if port3_ssid is not None:
            pulumi.set(__self__, "port3_ssid", port3_ssid)
        if port4_mode is not None:
            pulumi.set(__self__, "port4_mode", port4_mode)
        if port4_ssid is not None:
            pulumi.set(__self__, "port4_ssid", port4_ssid)
        if port5_mode is not None:
            pulumi.set(__self__, "port5_mode", port5_mode)
        if port5_ssid is not None:
            pulumi.set(__self__, "port5_ssid", port5_ssid)
        if port6_mode is not None:
            pulumi.set(__self__, "port6_mode", port6_mode)
        if port6_ssid is not None:
            pulumi.set(__self__, "port6_ssid", port6_ssid)
        if port7_mode is not None:
            pulumi.set(__self__, "port7_mode", port7_mode)
        if port7_ssid is not None:
            pulumi.set(__self__, "port7_ssid", port7_ssid)
        if port8_mode is not None:
            pulumi.set(__self__, "port8_mode", port8_mode)
        if port8_ssid is not None:
            pulumi.set(__self__, "port8_ssid", port8_ssid)
        if port_esl_mode is not None:
            pulumi.set(__self__, "port_esl_mode", port_esl_mode)
        if port_esl_ssid is not None:
            pulumi.set(__self__, "port_esl_ssid", port_esl_ssid)
        if port_mode is not None:
            pulumi.set(__self__, "port_mode", port_mode)
        if port_ssid is not None:
            pulumi.set(__self__, "port_ssid", port_ssid)

    @property
    @pulumi.getter(name="port1Mode")
    def port1_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port1_mode")

    @port1_mode.setter
    def port1_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_mode", value)

    @property
    @pulumi.getter(name="port1Ssid")
    def port1_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port1_ssid")

    @port1_ssid.setter
    def port1_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_ssid", value)

    @property
    @pulumi.getter(name="port2Mode")
    def port2_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port2_mode")

    @port2_mode.setter
    def port2_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_mode", value)

    @property
    @pulumi.getter(name="port2Ssid")
    def port2_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port2_ssid")

    @port2_ssid.setter
    def port2_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_ssid", value)

    @property
    @pulumi.getter(name="port3Mode")
    def port3_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port3_mode")

    @port3_mode.setter
    def port3_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_mode", value)

    @property
    @pulumi.getter(name="port3Ssid")
    def port3_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port3_ssid")

    @port3_ssid.setter
    def port3_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_ssid", value)

    @property
    @pulumi.getter(name="port4Mode")
    def port4_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port4_mode")

    @port4_mode.setter
    def port4_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_mode", value)

    @property
    @pulumi.getter(name="port4Ssid")
    def port4_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port4_ssid")

    @port4_ssid.setter
    def port4_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_ssid", value)

    @property
    @pulumi.getter(name="port5Mode")
    def port5_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port5_mode")

    @port5_mode.setter
    def port5_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_mode", value)

    @property
    @pulumi.getter(name="port5Ssid")
    def port5_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port5_ssid")

    @port5_ssid.setter
    def port5_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_ssid", value)

    @property
    @pulumi.getter(name="port6Mode")
    def port6_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port6_mode")

    @port6_mode.setter
    def port6_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_mode", value)

    @property
    @pulumi.getter(name="port6Ssid")
    def port6_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port6_ssid")

    @port6_ssid.setter
    def port6_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_ssid", value)

    @property
    @pulumi.getter(name="port7Mode")
    def port7_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port7_mode")

    @port7_mode.setter
    def port7_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_mode", value)

    @property
    @pulumi.getter(name="port7Ssid")
    def port7_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port7_ssid")

    @port7_ssid.setter
    def port7_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_ssid", value)

    @property
    @pulumi.getter(name="port8Mode")
    def port8_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port8_mode")

    @port8_mode.setter
    def port8_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_mode", value)

    @property
    @pulumi.getter(name="port8Ssid")
    def port8_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port8_ssid")

    @port8_ssid.setter
    def port8_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_ssid", value)

    @property
    @pulumi.getter(name="portEslMode")
    def port_esl_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_esl_mode")

    @port_esl_mode.setter
    def port_esl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_mode", value)

    @property
    @pulumi.getter(name="portEslSsid")
    def port_esl_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_esl_ssid")

    @port_esl_ssid.setter
    def port_esl_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_ssid", value)

    @property
    @pulumi.getter(name="portMode")
    def port_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_mode")

    @port_mode.setter
    def port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_mode", value)

    @property
    @pulumi.getter(name="portSsid")
    def port_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_ssid")

    @port_ssid.setter
    def port_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_ssid", value)


@pulumi.input_type
class WirelessControllerWtpProfileLbsArgs:
    def __init__(__self__, *,
                 aeroscout: Optional[pulumi.Input[str]] = None,
                 aeroscout_ap_mac: Optional[pulumi.Input[str]] = None,
                 aeroscout_mmu_report: Optional[pulumi.Input[str]] = None,
                 aeroscout_mu: Optional[pulumi.Input[str]] = None,
                 aeroscout_mu_factor: Optional[pulumi.Input[int]] = None,
                 aeroscout_mu_timeout: Optional[pulumi.Input[int]] = None,
                 aeroscout_server_ip: Optional[pulumi.Input[str]] = None,
                 aeroscout_server_port: Optional[pulumi.Input[int]] = None,
                 ekahau_blink_mode: Optional[pulumi.Input[str]] = None,
                 ekahau_tag: Optional[pulumi.Input[str]] = None,
                 erc_server_ip: Optional[pulumi.Input[str]] = None,
                 erc_server_port: Optional[pulumi.Input[int]] = None,
                 fortipresence: Optional[pulumi.Input[str]] = None,
                 fortipresence_ble: Optional[pulumi.Input[str]] = None,
                 fortipresence_frequency: Optional[pulumi.Input[int]] = None,
                 fortipresence_port: Optional[pulumi.Input[int]] = None,
                 fortipresence_project: Optional[pulumi.Input[str]] = None,
                 fortipresence_rogue: Optional[pulumi.Input[str]] = None,
                 fortipresence_secret: Optional[pulumi.Input[str]] = None,
                 fortipresence_server: Optional[pulumi.Input[str]] = None,
                 fortipresence_server_addr_type: Optional[pulumi.Input[str]] = None,
                 fortipresence_server_fqdn: Optional[pulumi.Input[str]] = None,
                 fortipresence_unassoc: Optional[pulumi.Input[str]] = None,
                 station_locate: Optional[pulumi.Input[str]] = None):
        if aeroscout is not None:
            pulumi.set(__self__, "aeroscout", aeroscout)
        if aeroscout_ap_mac is not None:
            pulumi.set(__self__, "aeroscout_ap_mac", aeroscout_ap_mac)
        if aeroscout_mmu_report is not None:
            pulumi.set(__self__, "aeroscout_mmu_report", aeroscout_mmu_report)
        if aeroscout_mu is not None:
            pulumi.set(__self__, "aeroscout_mu", aeroscout_mu)
        if aeroscout_mu_factor is not None:
            pulumi.set(__self__, "aeroscout_mu_factor", aeroscout_mu_factor)
        if aeroscout_mu_timeout is not None:
            pulumi.set(__self__, "aeroscout_mu_timeout", aeroscout_mu_timeout)
        if aeroscout_server_ip is not None:
            pulumi.set(__self__, "aeroscout_server_ip", aeroscout_server_ip)
        if aeroscout_server_port is not None:
            pulumi.set(__self__, "aeroscout_server_port", aeroscout_server_port)
        if ekahau_blink_mode is not None:
            pulumi.set(__self__, "ekahau_blink_mode", ekahau_blink_mode)
        if ekahau_tag is not None:
            pulumi.set(__self__, "ekahau_tag", ekahau_tag)
        if erc_server_ip is not None:
            pulumi.set(__self__, "erc_server_ip", erc_server_ip)
        if erc_server_port is not None:
            pulumi.set(__self__, "erc_server_port", erc_server_port)
        if fortipresence is not None:
            pulumi.set(__self__, "fortipresence", fortipresence)
        if fortipresence_ble is not None:
            pulumi.set(__self__, "fortipresence_ble", fortipresence_ble)
        if fortipresence_frequency is not None:
            pulumi.set(__self__, "fortipresence_frequency", fortipresence_frequency)
        if fortipresence_port is not None:
            pulumi.set(__self__, "fortipresence_port", fortipresence_port)
        if fortipresence_project is not None:
            pulumi.set(__self__, "fortipresence_project", fortipresence_project)
        if fortipresence_rogue is not None:
            pulumi.set(__self__, "fortipresence_rogue", fortipresence_rogue)
        if fortipresence_secret is not None:
            pulumi.set(__self__, "fortipresence_secret", fortipresence_secret)
        if fortipresence_server is not None:
            pulumi.set(__self__, "fortipresence_server", fortipresence_server)
        if fortipresence_server_addr_type is not None:
            pulumi.set(__self__, "fortipresence_server_addr_type", fortipresence_server_addr_type)
        if fortipresence_server_fqdn is not None:
            pulumi.set(__self__, "fortipresence_server_fqdn", fortipresence_server_fqdn)
        if fortipresence_unassoc is not None:
            pulumi.set(__self__, "fortipresence_unassoc", fortipresence_unassoc)
        if station_locate is not None:
            pulumi.set(__self__, "station_locate", station_locate)

    @property
    @pulumi.getter
    def aeroscout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aeroscout")

    @aeroscout.setter
    def aeroscout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout", value)

    @property
    @pulumi.getter(name="aeroscoutApMac")
    def aeroscout_ap_mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aeroscout_ap_mac")

    @aeroscout_ap_mac.setter
    def aeroscout_ap_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_ap_mac", value)

    @property
    @pulumi.getter(name="aeroscoutMmuReport")
    def aeroscout_mmu_report(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aeroscout_mmu_report")

    @aeroscout_mmu_report.setter
    def aeroscout_mmu_report(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_mmu_report", value)

    @property
    @pulumi.getter(name="aeroscoutMu")
    def aeroscout_mu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aeroscout_mu")

    @aeroscout_mu.setter
    def aeroscout_mu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_mu", value)

    @property
    @pulumi.getter(name="aeroscoutMuFactor")
    def aeroscout_mu_factor(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "aeroscout_mu_factor")

    @aeroscout_mu_factor.setter
    def aeroscout_mu_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aeroscout_mu_factor", value)

    @property
    @pulumi.getter(name="aeroscoutMuTimeout")
    def aeroscout_mu_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "aeroscout_mu_timeout")

    @aeroscout_mu_timeout.setter
    def aeroscout_mu_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aeroscout_mu_timeout", value)

    @property
    @pulumi.getter(name="aeroscoutServerIp")
    def aeroscout_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aeroscout_server_ip")

    @aeroscout_server_ip.setter
    def aeroscout_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_server_ip", value)

    @property
    @pulumi.getter(name="aeroscoutServerPort")
    def aeroscout_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "aeroscout_server_port")

    @aeroscout_server_port.setter
    def aeroscout_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aeroscout_server_port", value)

    @property
    @pulumi.getter(name="ekahauBlinkMode")
    def ekahau_blink_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ekahau_blink_mode")

    @ekahau_blink_mode.setter
    def ekahau_blink_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ekahau_blink_mode", value)

    @property
    @pulumi.getter(name="ekahauTag")
    def ekahau_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ekahau_tag")

    @ekahau_tag.setter
    def ekahau_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ekahau_tag", value)

    @property
    @pulumi.getter(name="ercServerIp")
    def erc_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "erc_server_ip")

    @erc_server_ip.setter
    def erc_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "erc_server_ip", value)

    @property
    @pulumi.getter(name="ercServerPort")
    def erc_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "erc_server_port")

    @erc_server_port.setter
    def erc_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "erc_server_port", value)

    @property
    @pulumi.getter
    def fortipresence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortipresence")

    @fortipresence.setter
    def fortipresence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence", value)

    @property
    @pulumi.getter(name="fortipresenceBle")
    def fortipresence_ble(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortipresence_ble")

    @fortipresence_ble.setter
    def fortipresence_ble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_ble", value)

    @property
    @pulumi.getter(name="fortipresenceFrequency")
    def fortipresence_frequency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortipresence_frequency")

    @fortipresence_frequency.setter
    def fortipresence_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortipresence_frequency", value)

    @property
    @pulumi.getter(name="fortipresencePort")
    def fortipresence_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fortipresence_port")

    @fortipresence_port.setter
    def fortipresence_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortipresence_port", value)

    @property
    @pulumi.getter(name="fortipresenceProject")
    def fortipresence_project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortipresence_project")

    @fortipresence_project.setter
    def fortipresence_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_project", value)

    @property
    @pulumi.getter(name="fortipresenceRogue")
    def fortipresence_rogue(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortipresence_rogue")

    @fortipresence_rogue.setter
    def fortipresence_rogue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_rogue", value)

    @property
    @pulumi.getter(name="fortipresenceSecret")
    def fortipresence_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortipresence_secret")

    @fortipresence_secret.setter
    def fortipresence_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_secret", value)

    @property
    @pulumi.getter(name="fortipresenceServer")
    def fortipresence_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortipresence_server")

    @fortipresence_server.setter
    def fortipresence_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_server", value)

    @property
    @pulumi.getter(name="fortipresenceServerAddrType")
    def fortipresence_server_addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortipresence_server_addr_type")

    @fortipresence_server_addr_type.setter
    def fortipresence_server_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_server_addr_type", value)

    @property
    @pulumi.getter(name="fortipresenceServerFqdn")
    def fortipresence_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortipresence_server_fqdn")

    @fortipresence_server_fqdn.setter
    def fortipresence_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_server_fqdn", value)

    @property
    @pulumi.getter(name="fortipresenceUnassoc")
    def fortipresence_unassoc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortipresence_unassoc")

    @fortipresence_unassoc.setter
    def fortipresence_unassoc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_unassoc", value)

    @property
    @pulumi.getter(name="stationLocate")
    def station_locate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "station_locate")

    @station_locate.setter
    def station_locate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "station_locate", value)


@pulumi.input_type
class WirelessControllerWtpProfileLedScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpProfilePlatformArgs:
    def __init__(__self__, *,
                 ddscan: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if ddscan is not None:
            pulumi.set(__self__, "ddscan", ddscan)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ddscan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddscan")

    @ddscan.setter
    def ddscan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddscan", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio1Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 n80211d: Optional[pulumi.Input[str]] = None,
                 optional_antenna: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1ChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "n80211d")

    @n80211d.setter
    def n80211d(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n80211d", value)

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "optional_antenna")

    @optional_antenna.setter
    def optional_antenna(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1VapArgs']]]]:
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio1ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio1VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio2Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 n80211d: Optional[pulumi.Input[str]] = None,
                 optional_antenna: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2ChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "n80211d")

    @n80211d.setter
    def n80211d(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n80211d", value)

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "optional_antenna")

    @optional_antenna.setter
    def optional_antenna(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2VapArgs']]]]:
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio2ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio2VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio3Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 n80211d: Optional[pulumi.Input[str]] = None,
                 optional_antenna: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3ChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "n80211d")

    @n80211d.setter
    def n80211d(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n80211d", value)

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "optional_antenna")

    @optional_antenna.setter
    def optional_antenna(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3VapArgs']]]]:
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio3ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio3VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio4Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 n80211d: Optional[pulumi.Input[str]] = None,
                 optional_antenna: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4ChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "n80211d")

    @n80211d.setter
    def n80211d(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n80211d", value)

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "optional_antenna")

    @optional_antenna.setter
    def optional_antenna(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4VapArgs']]]]:
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio4ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio4VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpProfileSplitTunnelingAclArgs:
    def __init__(__self__, *,
                 dest_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if dest_ip is not None:
            pulumi.set(__self__, "dest_ip", dest_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dest_ip")

    @dest_ip.setter
    def dest_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerWtpRadio1Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1VapArgs']]]] = None):
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1ChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1VapArgs']]]]:
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WirelessControllerWtpRadio1ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpRadio1VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpRadio2Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2VapArgs']]]] = None):
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2ChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2VapArgs']]]]:
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WirelessControllerWtpRadio2ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpRadio2VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpRadio3Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3VapArgs']]]] = None):
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3ChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3VapArgs']]]]:
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WirelessControllerWtpRadio3ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpRadio3VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpRadio4Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4VapArgs']]]] = None):
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4ChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4VapArgs']]]]:
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WirelessControllerWtpRadio4ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpRadio4VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpSplitTunnelingAclArgs:
    def __init__(__self__, *,
                 dest_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if dest_ip is not None:
            pulumi.set(__self__, "dest_ip", dest_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dest_ip")

    @dest_ip.setter
    def dest_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


