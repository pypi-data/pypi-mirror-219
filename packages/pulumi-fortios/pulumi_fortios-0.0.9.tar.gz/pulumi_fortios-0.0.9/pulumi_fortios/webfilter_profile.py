# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WebfilterProfileArgs', 'WebfilterProfile']

@pulumi.input_type
class WebfilterProfileArgs:
    def __init__(__self__, *,
                 antiphish: Optional[pulumi.Input['WebfilterProfileAntiphishArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input['WebfilterProfileFileFilterArgs']] = None,
                 ftgd_wf: Optional[pulumi.Input['WebfilterProfileFtgdWfArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_replacemsg: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 log_all_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input['WebfilterProfileOverrideArgs']] = None,
                 ovrd_perm: Optional[pulumi.Input[str]] = None,
                 post_action: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web: Optional[pulumi.Input['WebfilterProfileWebArgs']] = None,
                 web_antiphishing_log: Optional[pulumi.Input[str]] = None,
                 web_content_log: Optional[pulumi.Input[str]] = None,
                 web_extended_all_action_log: Optional[pulumi.Input[str]] = None,
                 web_filter_activex_log: Optional[pulumi.Input[str]] = None,
                 web_filter_applet_log: Optional[pulumi.Input[str]] = None,
                 web_filter_command_block_log: Optional[pulumi.Input[str]] = None,
                 web_filter_cookie_log: Optional[pulumi.Input[str]] = None,
                 web_filter_cookie_removal_log: Optional[pulumi.Input[str]] = None,
                 web_filter_js_log: Optional[pulumi.Input[str]] = None,
                 web_filter_jscript_log: Optional[pulumi.Input[str]] = None,
                 web_filter_referer_log: Optional[pulumi.Input[str]] = None,
                 web_filter_unknown_log: Optional[pulumi.Input[str]] = None,
                 web_filter_vbs_log: Optional[pulumi.Input[str]] = None,
                 web_ftgd_err_log: Optional[pulumi.Input[str]] = None,
                 web_ftgd_quota_usage: Optional[pulumi.Input[str]] = None,
                 web_invalid_domain_log: Optional[pulumi.Input[str]] = None,
                 web_url_log: Optional[pulumi.Input[str]] = None,
                 wisp: Optional[pulumi.Input[str]] = None,
                 wisp_algorithm: Optional[pulumi.Input[str]] = None,
                 wisp_servers: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWispServerArgs']]]] = None,
                 youtube_channel_filters: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileYoutubeChannelFilterArgs']]]] = None,
                 youtube_channel_status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WebfilterProfile resource.
        """
        if antiphish is not None:
            pulumi.set(__self__, "antiphish", antiphish)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if ftgd_wf is not None:
            pulumi.set(__self__, "ftgd_wf", ftgd_wf)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if https_replacemsg is not None:
            pulumi.set(__self__, "https_replacemsg", https_replacemsg)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if log_all_url is not None:
            pulumi.set(__self__, "log_all_url", log_all_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if ovrd_perm is not None:
            pulumi.set(__self__, "ovrd_perm", ovrd_perm)
        if post_action is not None:
            pulumi.set(__self__, "post_action", post_action)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if web is not None:
            pulumi.set(__self__, "web", web)
        if web_antiphishing_log is not None:
            pulumi.set(__self__, "web_antiphishing_log", web_antiphishing_log)
        if web_content_log is not None:
            pulumi.set(__self__, "web_content_log", web_content_log)
        if web_extended_all_action_log is not None:
            pulumi.set(__self__, "web_extended_all_action_log", web_extended_all_action_log)
        if web_filter_activex_log is not None:
            pulumi.set(__self__, "web_filter_activex_log", web_filter_activex_log)
        if web_filter_applet_log is not None:
            pulumi.set(__self__, "web_filter_applet_log", web_filter_applet_log)
        if web_filter_command_block_log is not None:
            pulumi.set(__self__, "web_filter_command_block_log", web_filter_command_block_log)
        if web_filter_cookie_log is not None:
            pulumi.set(__self__, "web_filter_cookie_log", web_filter_cookie_log)
        if web_filter_cookie_removal_log is not None:
            pulumi.set(__self__, "web_filter_cookie_removal_log", web_filter_cookie_removal_log)
        if web_filter_js_log is not None:
            pulumi.set(__self__, "web_filter_js_log", web_filter_js_log)
        if web_filter_jscript_log is not None:
            pulumi.set(__self__, "web_filter_jscript_log", web_filter_jscript_log)
        if web_filter_referer_log is not None:
            pulumi.set(__self__, "web_filter_referer_log", web_filter_referer_log)
        if web_filter_unknown_log is not None:
            pulumi.set(__self__, "web_filter_unknown_log", web_filter_unknown_log)
        if web_filter_vbs_log is not None:
            pulumi.set(__self__, "web_filter_vbs_log", web_filter_vbs_log)
        if web_ftgd_err_log is not None:
            pulumi.set(__self__, "web_ftgd_err_log", web_ftgd_err_log)
        if web_ftgd_quota_usage is not None:
            pulumi.set(__self__, "web_ftgd_quota_usage", web_ftgd_quota_usage)
        if web_invalid_domain_log is not None:
            pulumi.set(__self__, "web_invalid_domain_log", web_invalid_domain_log)
        if web_url_log is not None:
            pulumi.set(__self__, "web_url_log", web_url_log)
        if wisp is not None:
            pulumi.set(__self__, "wisp", wisp)
        if wisp_algorithm is not None:
            pulumi.set(__self__, "wisp_algorithm", wisp_algorithm)
        if wisp_servers is not None:
            pulumi.set(__self__, "wisp_servers", wisp_servers)
        if youtube_channel_filters is not None:
            pulumi.set(__self__, "youtube_channel_filters", youtube_channel_filters)
        if youtube_channel_status is not None:
            pulumi.set(__self__, "youtube_channel_status", youtube_channel_status)

    @property
    @pulumi.getter
    def antiphish(self) -> Optional[pulumi.Input['WebfilterProfileAntiphishArgs']]:
        return pulumi.get(self, "antiphish")

    @antiphish.setter
    def antiphish(self, value: Optional[pulumi.Input['WebfilterProfileAntiphishArgs']]):
        pulumi.set(self, "antiphish", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input['WebfilterProfileFileFilterArgs']]:
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input['WebfilterProfileFileFilterArgs']]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter(name="ftgdWf")
    def ftgd_wf(self) -> Optional[pulumi.Input['WebfilterProfileFtgdWfArgs']]:
        return pulumi.get(self, "ftgd_wf")

    @ftgd_wf.setter
    def ftgd_wf(self, value: Optional[pulumi.Input['WebfilterProfileFtgdWfArgs']]):
        pulumi.set(self, "ftgd_wf", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpsReplacemsg")
    def https_replacemsg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_replacemsg")

    @https_replacemsg.setter
    def https_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_replacemsg", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter(name="logAllUrl")
    def log_all_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all_url")

    @log_all_url.setter
    def log_all_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input['WebfilterProfileOverrideArgs']]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input['WebfilterProfileOverrideArgs']]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="ovrdPerm")
    def ovrd_perm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ovrd_perm")

    @ovrd_perm.setter
    def ovrd_perm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_perm", value)

    @property
    @pulumi.getter(name="postAction")
    def post_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_action")

    @post_action.setter
    def post_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_action", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def web(self) -> Optional[pulumi.Input['WebfilterProfileWebArgs']]:
        return pulumi.get(self, "web")

    @web.setter
    def web(self, value: Optional[pulumi.Input['WebfilterProfileWebArgs']]):
        pulumi.set(self, "web", value)

    @property
    @pulumi.getter(name="webAntiphishingLog")
    def web_antiphishing_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_antiphishing_log")

    @web_antiphishing_log.setter
    def web_antiphishing_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_antiphishing_log", value)

    @property
    @pulumi.getter(name="webContentLog")
    def web_content_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_content_log")

    @web_content_log.setter
    def web_content_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_content_log", value)

    @property
    @pulumi.getter(name="webExtendedAllActionLog")
    def web_extended_all_action_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_extended_all_action_log")

    @web_extended_all_action_log.setter
    def web_extended_all_action_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_extended_all_action_log", value)

    @property
    @pulumi.getter(name="webFilterActivexLog")
    def web_filter_activex_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_activex_log")

    @web_filter_activex_log.setter
    def web_filter_activex_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_activex_log", value)

    @property
    @pulumi.getter(name="webFilterAppletLog")
    def web_filter_applet_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_applet_log")

    @web_filter_applet_log.setter
    def web_filter_applet_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_applet_log", value)

    @property
    @pulumi.getter(name="webFilterCommandBlockLog")
    def web_filter_command_block_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_command_block_log")

    @web_filter_command_block_log.setter
    def web_filter_command_block_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_command_block_log", value)

    @property
    @pulumi.getter(name="webFilterCookieLog")
    def web_filter_cookie_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_cookie_log")

    @web_filter_cookie_log.setter
    def web_filter_cookie_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_cookie_log", value)

    @property
    @pulumi.getter(name="webFilterCookieRemovalLog")
    def web_filter_cookie_removal_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_cookie_removal_log")

    @web_filter_cookie_removal_log.setter
    def web_filter_cookie_removal_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_cookie_removal_log", value)

    @property
    @pulumi.getter(name="webFilterJsLog")
    def web_filter_js_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_js_log")

    @web_filter_js_log.setter
    def web_filter_js_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_js_log", value)

    @property
    @pulumi.getter(name="webFilterJscriptLog")
    def web_filter_jscript_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_jscript_log")

    @web_filter_jscript_log.setter
    def web_filter_jscript_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_jscript_log", value)

    @property
    @pulumi.getter(name="webFilterRefererLog")
    def web_filter_referer_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_referer_log")

    @web_filter_referer_log.setter
    def web_filter_referer_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_referer_log", value)

    @property
    @pulumi.getter(name="webFilterUnknownLog")
    def web_filter_unknown_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_unknown_log")

    @web_filter_unknown_log.setter
    def web_filter_unknown_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_unknown_log", value)

    @property
    @pulumi.getter(name="webFilterVbsLog")
    def web_filter_vbs_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_vbs_log")

    @web_filter_vbs_log.setter
    def web_filter_vbs_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_vbs_log", value)

    @property
    @pulumi.getter(name="webFtgdErrLog")
    def web_ftgd_err_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_ftgd_err_log")

    @web_ftgd_err_log.setter
    def web_ftgd_err_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_ftgd_err_log", value)

    @property
    @pulumi.getter(name="webFtgdQuotaUsage")
    def web_ftgd_quota_usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_ftgd_quota_usage")

    @web_ftgd_quota_usage.setter
    def web_ftgd_quota_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_ftgd_quota_usage", value)

    @property
    @pulumi.getter(name="webInvalidDomainLog")
    def web_invalid_domain_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_invalid_domain_log")

    @web_invalid_domain_log.setter
    def web_invalid_domain_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_invalid_domain_log", value)

    @property
    @pulumi.getter(name="webUrlLog")
    def web_url_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_url_log")

    @web_url_log.setter
    def web_url_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_url_log", value)

    @property
    @pulumi.getter
    def wisp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wisp")

    @wisp.setter
    def wisp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wisp", value)

    @property
    @pulumi.getter(name="wispAlgorithm")
    def wisp_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wisp_algorithm")

    @wisp_algorithm.setter
    def wisp_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wisp_algorithm", value)

    @property
    @pulumi.getter(name="wispServers")
    def wisp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWispServerArgs']]]]:
        return pulumi.get(self, "wisp_servers")

    @wisp_servers.setter
    def wisp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWispServerArgs']]]]):
        pulumi.set(self, "wisp_servers", value)

    @property
    @pulumi.getter(name="youtubeChannelFilters")
    def youtube_channel_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileYoutubeChannelFilterArgs']]]]:
        return pulumi.get(self, "youtube_channel_filters")

    @youtube_channel_filters.setter
    def youtube_channel_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileYoutubeChannelFilterArgs']]]]):
        pulumi.set(self, "youtube_channel_filters", value)

    @property
    @pulumi.getter(name="youtubeChannelStatus")
    def youtube_channel_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "youtube_channel_status")

    @youtube_channel_status.setter
    def youtube_channel_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "youtube_channel_status", value)


@pulumi.input_type
class _WebfilterProfileState:
    def __init__(__self__, *,
                 antiphish: Optional[pulumi.Input['WebfilterProfileAntiphishArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input['WebfilterProfileFileFilterArgs']] = None,
                 ftgd_wf: Optional[pulumi.Input['WebfilterProfileFtgdWfArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_replacemsg: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 log_all_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input['WebfilterProfileOverrideArgs']] = None,
                 ovrd_perm: Optional[pulumi.Input[str]] = None,
                 post_action: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web: Optional[pulumi.Input['WebfilterProfileWebArgs']] = None,
                 web_antiphishing_log: Optional[pulumi.Input[str]] = None,
                 web_content_log: Optional[pulumi.Input[str]] = None,
                 web_extended_all_action_log: Optional[pulumi.Input[str]] = None,
                 web_filter_activex_log: Optional[pulumi.Input[str]] = None,
                 web_filter_applet_log: Optional[pulumi.Input[str]] = None,
                 web_filter_command_block_log: Optional[pulumi.Input[str]] = None,
                 web_filter_cookie_log: Optional[pulumi.Input[str]] = None,
                 web_filter_cookie_removal_log: Optional[pulumi.Input[str]] = None,
                 web_filter_js_log: Optional[pulumi.Input[str]] = None,
                 web_filter_jscript_log: Optional[pulumi.Input[str]] = None,
                 web_filter_referer_log: Optional[pulumi.Input[str]] = None,
                 web_filter_unknown_log: Optional[pulumi.Input[str]] = None,
                 web_filter_vbs_log: Optional[pulumi.Input[str]] = None,
                 web_ftgd_err_log: Optional[pulumi.Input[str]] = None,
                 web_ftgd_quota_usage: Optional[pulumi.Input[str]] = None,
                 web_invalid_domain_log: Optional[pulumi.Input[str]] = None,
                 web_url_log: Optional[pulumi.Input[str]] = None,
                 wisp: Optional[pulumi.Input[str]] = None,
                 wisp_algorithm: Optional[pulumi.Input[str]] = None,
                 wisp_servers: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWispServerArgs']]]] = None,
                 youtube_channel_filters: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileYoutubeChannelFilterArgs']]]] = None,
                 youtube_channel_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WebfilterProfile resources.
        """
        if antiphish is not None:
            pulumi.set(__self__, "antiphish", antiphish)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if ftgd_wf is not None:
            pulumi.set(__self__, "ftgd_wf", ftgd_wf)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if https_replacemsg is not None:
            pulumi.set(__self__, "https_replacemsg", https_replacemsg)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if log_all_url is not None:
            pulumi.set(__self__, "log_all_url", log_all_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if ovrd_perm is not None:
            pulumi.set(__self__, "ovrd_perm", ovrd_perm)
        if post_action is not None:
            pulumi.set(__self__, "post_action", post_action)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if web is not None:
            pulumi.set(__self__, "web", web)
        if web_antiphishing_log is not None:
            pulumi.set(__self__, "web_antiphishing_log", web_antiphishing_log)
        if web_content_log is not None:
            pulumi.set(__self__, "web_content_log", web_content_log)
        if web_extended_all_action_log is not None:
            pulumi.set(__self__, "web_extended_all_action_log", web_extended_all_action_log)
        if web_filter_activex_log is not None:
            pulumi.set(__self__, "web_filter_activex_log", web_filter_activex_log)
        if web_filter_applet_log is not None:
            pulumi.set(__self__, "web_filter_applet_log", web_filter_applet_log)
        if web_filter_command_block_log is not None:
            pulumi.set(__self__, "web_filter_command_block_log", web_filter_command_block_log)
        if web_filter_cookie_log is not None:
            pulumi.set(__self__, "web_filter_cookie_log", web_filter_cookie_log)
        if web_filter_cookie_removal_log is not None:
            pulumi.set(__self__, "web_filter_cookie_removal_log", web_filter_cookie_removal_log)
        if web_filter_js_log is not None:
            pulumi.set(__self__, "web_filter_js_log", web_filter_js_log)
        if web_filter_jscript_log is not None:
            pulumi.set(__self__, "web_filter_jscript_log", web_filter_jscript_log)
        if web_filter_referer_log is not None:
            pulumi.set(__self__, "web_filter_referer_log", web_filter_referer_log)
        if web_filter_unknown_log is not None:
            pulumi.set(__self__, "web_filter_unknown_log", web_filter_unknown_log)
        if web_filter_vbs_log is not None:
            pulumi.set(__self__, "web_filter_vbs_log", web_filter_vbs_log)
        if web_ftgd_err_log is not None:
            pulumi.set(__self__, "web_ftgd_err_log", web_ftgd_err_log)
        if web_ftgd_quota_usage is not None:
            pulumi.set(__self__, "web_ftgd_quota_usage", web_ftgd_quota_usage)
        if web_invalid_domain_log is not None:
            pulumi.set(__self__, "web_invalid_domain_log", web_invalid_domain_log)
        if web_url_log is not None:
            pulumi.set(__self__, "web_url_log", web_url_log)
        if wisp is not None:
            pulumi.set(__self__, "wisp", wisp)
        if wisp_algorithm is not None:
            pulumi.set(__self__, "wisp_algorithm", wisp_algorithm)
        if wisp_servers is not None:
            pulumi.set(__self__, "wisp_servers", wisp_servers)
        if youtube_channel_filters is not None:
            pulumi.set(__self__, "youtube_channel_filters", youtube_channel_filters)
        if youtube_channel_status is not None:
            pulumi.set(__self__, "youtube_channel_status", youtube_channel_status)

    @property
    @pulumi.getter
    def antiphish(self) -> Optional[pulumi.Input['WebfilterProfileAntiphishArgs']]:
        return pulumi.get(self, "antiphish")

    @antiphish.setter
    def antiphish(self, value: Optional[pulumi.Input['WebfilterProfileAntiphishArgs']]):
        pulumi.set(self, "antiphish", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input['WebfilterProfileFileFilterArgs']]:
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input['WebfilterProfileFileFilterArgs']]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter(name="ftgdWf")
    def ftgd_wf(self) -> Optional[pulumi.Input['WebfilterProfileFtgdWfArgs']]:
        return pulumi.get(self, "ftgd_wf")

    @ftgd_wf.setter
    def ftgd_wf(self, value: Optional[pulumi.Input['WebfilterProfileFtgdWfArgs']]):
        pulumi.set(self, "ftgd_wf", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpsReplacemsg")
    def https_replacemsg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_replacemsg")

    @https_replacemsg.setter
    def https_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_replacemsg", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter(name="logAllUrl")
    def log_all_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all_url")

    @log_all_url.setter
    def log_all_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input['WebfilterProfileOverrideArgs']]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input['WebfilterProfileOverrideArgs']]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="ovrdPerm")
    def ovrd_perm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ovrd_perm")

    @ovrd_perm.setter
    def ovrd_perm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_perm", value)

    @property
    @pulumi.getter(name="postAction")
    def post_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_action")

    @post_action.setter
    def post_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_action", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def web(self) -> Optional[pulumi.Input['WebfilterProfileWebArgs']]:
        return pulumi.get(self, "web")

    @web.setter
    def web(self, value: Optional[pulumi.Input['WebfilterProfileWebArgs']]):
        pulumi.set(self, "web", value)

    @property
    @pulumi.getter(name="webAntiphishingLog")
    def web_antiphishing_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_antiphishing_log")

    @web_antiphishing_log.setter
    def web_antiphishing_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_antiphishing_log", value)

    @property
    @pulumi.getter(name="webContentLog")
    def web_content_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_content_log")

    @web_content_log.setter
    def web_content_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_content_log", value)

    @property
    @pulumi.getter(name="webExtendedAllActionLog")
    def web_extended_all_action_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_extended_all_action_log")

    @web_extended_all_action_log.setter
    def web_extended_all_action_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_extended_all_action_log", value)

    @property
    @pulumi.getter(name="webFilterActivexLog")
    def web_filter_activex_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_activex_log")

    @web_filter_activex_log.setter
    def web_filter_activex_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_activex_log", value)

    @property
    @pulumi.getter(name="webFilterAppletLog")
    def web_filter_applet_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_applet_log")

    @web_filter_applet_log.setter
    def web_filter_applet_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_applet_log", value)

    @property
    @pulumi.getter(name="webFilterCommandBlockLog")
    def web_filter_command_block_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_command_block_log")

    @web_filter_command_block_log.setter
    def web_filter_command_block_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_command_block_log", value)

    @property
    @pulumi.getter(name="webFilterCookieLog")
    def web_filter_cookie_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_cookie_log")

    @web_filter_cookie_log.setter
    def web_filter_cookie_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_cookie_log", value)

    @property
    @pulumi.getter(name="webFilterCookieRemovalLog")
    def web_filter_cookie_removal_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_cookie_removal_log")

    @web_filter_cookie_removal_log.setter
    def web_filter_cookie_removal_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_cookie_removal_log", value)

    @property
    @pulumi.getter(name="webFilterJsLog")
    def web_filter_js_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_js_log")

    @web_filter_js_log.setter
    def web_filter_js_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_js_log", value)

    @property
    @pulumi.getter(name="webFilterJscriptLog")
    def web_filter_jscript_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_jscript_log")

    @web_filter_jscript_log.setter
    def web_filter_jscript_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_jscript_log", value)

    @property
    @pulumi.getter(name="webFilterRefererLog")
    def web_filter_referer_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_referer_log")

    @web_filter_referer_log.setter
    def web_filter_referer_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_referer_log", value)

    @property
    @pulumi.getter(name="webFilterUnknownLog")
    def web_filter_unknown_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_unknown_log")

    @web_filter_unknown_log.setter
    def web_filter_unknown_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_unknown_log", value)

    @property
    @pulumi.getter(name="webFilterVbsLog")
    def web_filter_vbs_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_filter_vbs_log")

    @web_filter_vbs_log.setter
    def web_filter_vbs_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_filter_vbs_log", value)

    @property
    @pulumi.getter(name="webFtgdErrLog")
    def web_ftgd_err_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_ftgd_err_log")

    @web_ftgd_err_log.setter
    def web_ftgd_err_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_ftgd_err_log", value)

    @property
    @pulumi.getter(name="webFtgdQuotaUsage")
    def web_ftgd_quota_usage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_ftgd_quota_usage")

    @web_ftgd_quota_usage.setter
    def web_ftgd_quota_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_ftgd_quota_usage", value)

    @property
    @pulumi.getter(name="webInvalidDomainLog")
    def web_invalid_domain_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_invalid_domain_log")

    @web_invalid_domain_log.setter
    def web_invalid_domain_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_invalid_domain_log", value)

    @property
    @pulumi.getter(name="webUrlLog")
    def web_url_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_url_log")

    @web_url_log.setter
    def web_url_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_url_log", value)

    @property
    @pulumi.getter
    def wisp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wisp")

    @wisp.setter
    def wisp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wisp", value)

    @property
    @pulumi.getter(name="wispAlgorithm")
    def wisp_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wisp_algorithm")

    @wisp_algorithm.setter
    def wisp_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wisp_algorithm", value)

    @property
    @pulumi.getter(name="wispServers")
    def wisp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWispServerArgs']]]]:
        return pulumi.get(self, "wisp_servers")

    @wisp_servers.setter
    def wisp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWispServerArgs']]]]):
        pulumi.set(self, "wisp_servers", value)

    @property
    @pulumi.getter(name="youtubeChannelFilters")
    def youtube_channel_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileYoutubeChannelFilterArgs']]]]:
        return pulumi.get(self, "youtube_channel_filters")

    @youtube_channel_filters.setter
    def youtube_channel_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileYoutubeChannelFilterArgs']]]]):
        pulumi.set(self, "youtube_channel_filters", value)

    @property
    @pulumi.getter(name="youtubeChannelStatus")
    def youtube_channel_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "youtube_channel_status")

    @youtube_channel_status.setter
    def youtube_channel_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "youtube_channel_status", value)


class WebfilterProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 antiphish: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileAntiphishArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileFileFilterArgs']]] = None,
                 ftgd_wf: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileFtgdWfArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_replacemsg: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 log_all_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileOverrideArgs']]] = None,
                 ovrd_perm: Optional[pulumi.Input[str]] = None,
                 post_action: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileWebArgs']]] = None,
                 web_antiphishing_log: Optional[pulumi.Input[str]] = None,
                 web_content_log: Optional[pulumi.Input[str]] = None,
                 web_extended_all_action_log: Optional[pulumi.Input[str]] = None,
                 web_filter_activex_log: Optional[pulumi.Input[str]] = None,
                 web_filter_applet_log: Optional[pulumi.Input[str]] = None,
                 web_filter_command_block_log: Optional[pulumi.Input[str]] = None,
                 web_filter_cookie_log: Optional[pulumi.Input[str]] = None,
                 web_filter_cookie_removal_log: Optional[pulumi.Input[str]] = None,
                 web_filter_js_log: Optional[pulumi.Input[str]] = None,
                 web_filter_jscript_log: Optional[pulumi.Input[str]] = None,
                 web_filter_referer_log: Optional[pulumi.Input[str]] = None,
                 web_filter_unknown_log: Optional[pulumi.Input[str]] = None,
                 web_filter_vbs_log: Optional[pulumi.Input[str]] = None,
                 web_ftgd_err_log: Optional[pulumi.Input[str]] = None,
                 web_ftgd_quota_usage: Optional[pulumi.Input[str]] = None,
                 web_invalid_domain_log: Optional[pulumi.Input[str]] = None,
                 web_url_log: Optional[pulumi.Input[str]] = None,
                 wisp: Optional[pulumi.Input[str]] = None,
                 wisp_algorithm: Optional[pulumi.Input[str]] = None,
                 wisp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebfilterProfileWispServerArgs']]]]] = None,
                 youtube_channel_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebfilterProfileYoutubeChannelFilterArgs']]]]] = None,
                 youtube_channel_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WebfilterProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WebfilterProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WebfilterProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WebfilterProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebfilterProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 antiphish: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileAntiphishArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileFileFilterArgs']]] = None,
                 ftgd_wf: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileFtgdWfArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https_replacemsg: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 log_all_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileOverrideArgs']]] = None,
                 ovrd_perm: Optional[pulumi.Input[str]] = None,
                 post_action: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileWebArgs']]] = None,
                 web_antiphishing_log: Optional[pulumi.Input[str]] = None,
                 web_content_log: Optional[pulumi.Input[str]] = None,
                 web_extended_all_action_log: Optional[pulumi.Input[str]] = None,
                 web_filter_activex_log: Optional[pulumi.Input[str]] = None,
                 web_filter_applet_log: Optional[pulumi.Input[str]] = None,
                 web_filter_command_block_log: Optional[pulumi.Input[str]] = None,
                 web_filter_cookie_log: Optional[pulumi.Input[str]] = None,
                 web_filter_cookie_removal_log: Optional[pulumi.Input[str]] = None,
                 web_filter_js_log: Optional[pulumi.Input[str]] = None,
                 web_filter_jscript_log: Optional[pulumi.Input[str]] = None,
                 web_filter_referer_log: Optional[pulumi.Input[str]] = None,
                 web_filter_unknown_log: Optional[pulumi.Input[str]] = None,
                 web_filter_vbs_log: Optional[pulumi.Input[str]] = None,
                 web_ftgd_err_log: Optional[pulumi.Input[str]] = None,
                 web_ftgd_quota_usage: Optional[pulumi.Input[str]] = None,
                 web_invalid_domain_log: Optional[pulumi.Input[str]] = None,
                 web_url_log: Optional[pulumi.Input[str]] = None,
                 wisp: Optional[pulumi.Input[str]] = None,
                 wisp_algorithm: Optional[pulumi.Input[str]] = None,
                 wisp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebfilterProfileWispServerArgs']]]]] = None,
                 youtube_channel_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebfilterProfileYoutubeChannelFilterArgs']]]]] = None,
                 youtube_channel_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebfilterProfileArgs.__new__(WebfilterProfileArgs)

            __props__.__dict__["antiphish"] = antiphish
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["extended_log"] = extended_log
            __props__.__dict__["feature_set"] = feature_set
            __props__.__dict__["file_filter"] = file_filter
            __props__.__dict__["ftgd_wf"] = ftgd_wf
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["https_replacemsg"] = https_replacemsg
            __props__.__dict__["inspection_mode"] = inspection_mode
            __props__.__dict__["log_all_url"] = log_all_url
            __props__.__dict__["name"] = name
            __props__.__dict__["options"] = options
            __props__.__dict__["override"] = override
            __props__.__dict__["ovrd_perm"] = ovrd_perm
            __props__.__dict__["post_action"] = post_action
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["web"] = web
            __props__.__dict__["web_antiphishing_log"] = web_antiphishing_log
            __props__.__dict__["web_content_log"] = web_content_log
            __props__.__dict__["web_extended_all_action_log"] = web_extended_all_action_log
            __props__.__dict__["web_filter_activex_log"] = web_filter_activex_log
            __props__.__dict__["web_filter_applet_log"] = web_filter_applet_log
            __props__.__dict__["web_filter_command_block_log"] = web_filter_command_block_log
            __props__.__dict__["web_filter_cookie_log"] = web_filter_cookie_log
            __props__.__dict__["web_filter_cookie_removal_log"] = web_filter_cookie_removal_log
            __props__.__dict__["web_filter_js_log"] = web_filter_js_log
            __props__.__dict__["web_filter_jscript_log"] = web_filter_jscript_log
            __props__.__dict__["web_filter_referer_log"] = web_filter_referer_log
            __props__.__dict__["web_filter_unknown_log"] = web_filter_unknown_log
            __props__.__dict__["web_filter_vbs_log"] = web_filter_vbs_log
            __props__.__dict__["web_ftgd_err_log"] = web_ftgd_err_log
            __props__.__dict__["web_ftgd_quota_usage"] = web_ftgd_quota_usage
            __props__.__dict__["web_invalid_domain_log"] = web_invalid_domain_log
            __props__.__dict__["web_url_log"] = web_url_log
            __props__.__dict__["wisp"] = wisp
            __props__.__dict__["wisp_algorithm"] = wisp_algorithm
            __props__.__dict__["wisp_servers"] = wisp_servers
            __props__.__dict__["youtube_channel_filters"] = youtube_channel_filters
            __props__.__dict__["youtube_channel_status"] = youtube_channel_status
        super(WebfilterProfile, __self__).__init__(
            'fortios:index/webfilterProfile:WebfilterProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            antiphish: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileAntiphishArgs']]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            extended_log: Optional[pulumi.Input[str]] = None,
            feature_set: Optional[pulumi.Input[str]] = None,
            file_filter: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileFileFilterArgs']]] = None,
            ftgd_wf: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileFtgdWfArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            https_replacemsg: Optional[pulumi.Input[str]] = None,
            inspection_mode: Optional[pulumi.Input[str]] = None,
            log_all_url: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[str]] = None,
            override: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileOverrideArgs']]] = None,
            ovrd_perm: Optional[pulumi.Input[str]] = None,
            post_action: Optional[pulumi.Input[str]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            web: Optional[pulumi.Input[pulumi.InputType['WebfilterProfileWebArgs']]] = None,
            web_antiphishing_log: Optional[pulumi.Input[str]] = None,
            web_content_log: Optional[pulumi.Input[str]] = None,
            web_extended_all_action_log: Optional[pulumi.Input[str]] = None,
            web_filter_activex_log: Optional[pulumi.Input[str]] = None,
            web_filter_applet_log: Optional[pulumi.Input[str]] = None,
            web_filter_command_block_log: Optional[pulumi.Input[str]] = None,
            web_filter_cookie_log: Optional[pulumi.Input[str]] = None,
            web_filter_cookie_removal_log: Optional[pulumi.Input[str]] = None,
            web_filter_js_log: Optional[pulumi.Input[str]] = None,
            web_filter_jscript_log: Optional[pulumi.Input[str]] = None,
            web_filter_referer_log: Optional[pulumi.Input[str]] = None,
            web_filter_unknown_log: Optional[pulumi.Input[str]] = None,
            web_filter_vbs_log: Optional[pulumi.Input[str]] = None,
            web_ftgd_err_log: Optional[pulumi.Input[str]] = None,
            web_ftgd_quota_usage: Optional[pulumi.Input[str]] = None,
            web_invalid_domain_log: Optional[pulumi.Input[str]] = None,
            web_url_log: Optional[pulumi.Input[str]] = None,
            wisp: Optional[pulumi.Input[str]] = None,
            wisp_algorithm: Optional[pulumi.Input[str]] = None,
            wisp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebfilterProfileWispServerArgs']]]]] = None,
            youtube_channel_filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebfilterProfileYoutubeChannelFilterArgs']]]]] = None,
            youtube_channel_status: Optional[pulumi.Input[str]] = None) -> 'WebfilterProfile':
        """
        Get an existing WebfilterProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebfilterProfileState.__new__(_WebfilterProfileState)

        __props__.__dict__["antiphish"] = antiphish
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["extended_log"] = extended_log
        __props__.__dict__["feature_set"] = feature_set
        __props__.__dict__["file_filter"] = file_filter
        __props__.__dict__["ftgd_wf"] = ftgd_wf
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["https_replacemsg"] = https_replacemsg
        __props__.__dict__["inspection_mode"] = inspection_mode
        __props__.__dict__["log_all_url"] = log_all_url
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["override"] = override
        __props__.__dict__["ovrd_perm"] = ovrd_perm
        __props__.__dict__["post_action"] = post_action
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["web"] = web
        __props__.__dict__["web_antiphishing_log"] = web_antiphishing_log
        __props__.__dict__["web_content_log"] = web_content_log
        __props__.__dict__["web_extended_all_action_log"] = web_extended_all_action_log
        __props__.__dict__["web_filter_activex_log"] = web_filter_activex_log
        __props__.__dict__["web_filter_applet_log"] = web_filter_applet_log
        __props__.__dict__["web_filter_command_block_log"] = web_filter_command_block_log
        __props__.__dict__["web_filter_cookie_log"] = web_filter_cookie_log
        __props__.__dict__["web_filter_cookie_removal_log"] = web_filter_cookie_removal_log
        __props__.__dict__["web_filter_js_log"] = web_filter_js_log
        __props__.__dict__["web_filter_jscript_log"] = web_filter_jscript_log
        __props__.__dict__["web_filter_referer_log"] = web_filter_referer_log
        __props__.__dict__["web_filter_unknown_log"] = web_filter_unknown_log
        __props__.__dict__["web_filter_vbs_log"] = web_filter_vbs_log
        __props__.__dict__["web_ftgd_err_log"] = web_ftgd_err_log
        __props__.__dict__["web_ftgd_quota_usage"] = web_ftgd_quota_usage
        __props__.__dict__["web_invalid_domain_log"] = web_invalid_domain_log
        __props__.__dict__["web_url_log"] = web_url_log
        __props__.__dict__["wisp"] = wisp
        __props__.__dict__["wisp_algorithm"] = wisp_algorithm
        __props__.__dict__["wisp_servers"] = wisp_servers
        __props__.__dict__["youtube_channel_filters"] = youtube_channel_filters
        __props__.__dict__["youtube_channel_status"] = youtube_channel_status
        return WebfilterProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def antiphish(self) -> pulumi.Output['outputs.WebfilterProfileAntiphish']:
        return pulumi.get(self, "antiphish")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extended_log")

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> pulumi.Output[str]:
        return pulumi.get(self, "feature_set")

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> pulumi.Output['outputs.WebfilterProfileFileFilter']:
        return pulumi.get(self, "file_filter")

    @property
    @pulumi.getter(name="ftgdWf")
    def ftgd_wf(self) -> pulumi.Output['outputs.WebfilterProfileFtgdWf']:
        return pulumi.get(self, "ftgd_wf")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="httpsReplacemsg")
    def https_replacemsg(self) -> pulumi.Output[str]:
        return pulumi.get(self, "https_replacemsg")

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "inspection_mode")

    @property
    @pulumi.getter(name="logAllUrl")
    def log_all_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_all_url")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def override(self) -> pulumi.Output['outputs.WebfilterProfileOverride']:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="ovrdPerm")
    def ovrd_perm(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ovrd_perm")

    @property
    @pulumi.getter(name="postAction")
    def post_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "post_action")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def web(self) -> pulumi.Output['outputs.WebfilterProfileWeb']:
        return pulumi.get(self, "web")

    @property
    @pulumi.getter(name="webAntiphishingLog")
    def web_antiphishing_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_antiphishing_log")

    @property
    @pulumi.getter(name="webContentLog")
    def web_content_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_content_log")

    @property
    @pulumi.getter(name="webExtendedAllActionLog")
    def web_extended_all_action_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_extended_all_action_log")

    @property
    @pulumi.getter(name="webFilterActivexLog")
    def web_filter_activex_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_filter_activex_log")

    @property
    @pulumi.getter(name="webFilterAppletLog")
    def web_filter_applet_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_filter_applet_log")

    @property
    @pulumi.getter(name="webFilterCommandBlockLog")
    def web_filter_command_block_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_filter_command_block_log")

    @property
    @pulumi.getter(name="webFilterCookieLog")
    def web_filter_cookie_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_filter_cookie_log")

    @property
    @pulumi.getter(name="webFilterCookieRemovalLog")
    def web_filter_cookie_removal_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_filter_cookie_removal_log")

    @property
    @pulumi.getter(name="webFilterJsLog")
    def web_filter_js_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_filter_js_log")

    @property
    @pulumi.getter(name="webFilterJscriptLog")
    def web_filter_jscript_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_filter_jscript_log")

    @property
    @pulumi.getter(name="webFilterRefererLog")
    def web_filter_referer_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_filter_referer_log")

    @property
    @pulumi.getter(name="webFilterUnknownLog")
    def web_filter_unknown_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_filter_unknown_log")

    @property
    @pulumi.getter(name="webFilterVbsLog")
    def web_filter_vbs_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_filter_vbs_log")

    @property
    @pulumi.getter(name="webFtgdErrLog")
    def web_ftgd_err_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_ftgd_err_log")

    @property
    @pulumi.getter(name="webFtgdQuotaUsage")
    def web_ftgd_quota_usage(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_ftgd_quota_usage")

    @property
    @pulumi.getter(name="webInvalidDomainLog")
    def web_invalid_domain_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_invalid_domain_log")

    @property
    @pulumi.getter(name="webUrlLog")
    def web_url_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_url_log")

    @property
    @pulumi.getter
    def wisp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wisp")

    @property
    @pulumi.getter(name="wispAlgorithm")
    def wisp_algorithm(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wisp_algorithm")

    @property
    @pulumi.getter(name="wispServers")
    def wisp_servers(self) -> pulumi.Output[Optional[Sequence['outputs.WebfilterProfileWispServer']]]:
        return pulumi.get(self, "wisp_servers")

    @property
    @pulumi.getter(name="youtubeChannelFilters")
    def youtube_channel_filters(self) -> pulumi.Output[Optional[Sequence['outputs.WebfilterProfileYoutubeChannelFilter']]]:
        return pulumi.get(self, "youtube_channel_filters")

    @property
    @pulumi.getter(name="youtubeChannelStatus")
    def youtube_channel_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "youtube_channel_status")

