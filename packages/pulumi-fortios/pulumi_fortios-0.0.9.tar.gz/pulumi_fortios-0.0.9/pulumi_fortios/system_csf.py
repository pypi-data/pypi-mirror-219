# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemCsfArgs', 'SystemCsf']

@pulumi.input_type
class SystemCsfArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 accept_auth_by_cert: Optional[pulumi.Input[str]] = None,
                 authorization_request_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 configuration_sync: Optional[pulumi.Input[str]] = None,
                 downstream_access: Optional[pulumi.Input[str]] = None,
                 downstream_accprofile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_connectors: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricConnectorArgs']]]] = None,
                 fabric_devices: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricDeviceArgs']]]] = None,
                 fabric_object_unification: Optional[pulumi.Input[str]] = None,
                 fabric_workers: Optional[pulumi.Input[int]] = None,
                 file_mgmt: Optional[pulumi.Input[str]] = None,
                 file_quota: Optional[pulumi.Input[int]] = None,
                 file_quota_warning: Optional[pulumi.Input[int]] = None,
                 fixed_key: Optional[pulumi.Input[str]] = None,
                 forticloud_account_enforcement: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_password: Optional[pulumi.Input[str]] = None,
                 log_unification: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 saml_configuration_sync: Optional[pulumi.Input[str]] = None,
                 trusted_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfTrustedListArgs']]]] = None,
                 upstream: Optional[pulumi.Input[str]] = None,
                 upstream_ip: Optional[pulumi.Input[str]] = None,
                 upstream_port: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemCsf resource.
        """
        pulumi.set(__self__, "status", status)
        if accept_auth_by_cert is not None:
            pulumi.set(__self__, "accept_auth_by_cert", accept_auth_by_cert)
        if authorization_request_type is not None:
            pulumi.set(__self__, "authorization_request_type", authorization_request_type)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if configuration_sync is not None:
            pulumi.set(__self__, "configuration_sync", configuration_sync)
        if downstream_access is not None:
            pulumi.set(__self__, "downstream_access", downstream_access)
        if downstream_accprofile is not None:
            pulumi.set(__self__, "downstream_accprofile", downstream_accprofile)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fabric_connectors is not None:
            pulumi.set(__self__, "fabric_connectors", fabric_connectors)
        if fabric_devices is not None:
            pulumi.set(__self__, "fabric_devices", fabric_devices)
        if fabric_object_unification is not None:
            pulumi.set(__self__, "fabric_object_unification", fabric_object_unification)
        if fabric_workers is not None:
            pulumi.set(__self__, "fabric_workers", fabric_workers)
        if file_mgmt is not None:
            pulumi.set(__self__, "file_mgmt", file_mgmt)
        if file_quota is not None:
            pulumi.set(__self__, "file_quota", file_quota)
        if file_quota_warning is not None:
            pulumi.set(__self__, "file_quota_warning", file_quota_warning)
        if fixed_key is not None:
            pulumi.set(__self__, "fixed_key", fixed_key)
        if forticloud_account_enforcement is not None:
            pulumi.set(__self__, "forticloud_account_enforcement", forticloud_account_enforcement)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if group_password is not None:
            pulumi.set(__self__, "group_password", group_password)
        if log_unification is not None:
            pulumi.set(__self__, "log_unification", log_unification)
        if management_ip is not None:
            pulumi.set(__self__, "management_ip", management_ip)
        if management_port is not None:
            pulumi.set(__self__, "management_port", management_port)
        if saml_configuration_sync is not None:
            pulumi.set(__self__, "saml_configuration_sync", saml_configuration_sync)
        if trusted_lists is not None:
            pulumi.set(__self__, "trusted_lists", trusted_lists)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)
        if upstream_ip is not None:
            pulumi.set(__self__, "upstream_ip", upstream_ip)
        if upstream_port is not None:
            pulumi.set(__self__, "upstream_port", upstream_port)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="acceptAuthByCert")
    def accept_auth_by_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accept_auth_by_cert")

    @accept_auth_by_cert.setter
    def accept_auth_by_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_auth_by_cert", value)

    @property
    @pulumi.getter(name="authorizationRequestType")
    def authorization_request_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_request_type")

    @authorization_request_type.setter
    def authorization_request_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_request_type", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="configurationSync")
    def configuration_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configuration_sync")

    @configuration_sync.setter
    def configuration_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_sync", value)

    @property
    @pulumi.getter(name="downstreamAccess")
    def downstream_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "downstream_access")

    @downstream_access.setter
    def downstream_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_access", value)

    @property
    @pulumi.getter(name="downstreamAccprofile")
    def downstream_accprofile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "downstream_accprofile")

    @downstream_accprofile.setter
    def downstream_accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_accprofile", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fabricConnectors")
    def fabric_connectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricConnectorArgs']]]]:
        return pulumi.get(self, "fabric_connectors")

    @fabric_connectors.setter
    def fabric_connectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricConnectorArgs']]]]):
        pulumi.set(self, "fabric_connectors", value)

    @property
    @pulumi.getter(name="fabricDevices")
    def fabric_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricDeviceArgs']]]]:
        return pulumi.get(self, "fabric_devices")

    @fabric_devices.setter
    def fabric_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricDeviceArgs']]]]):
        pulumi.set(self, "fabric_devices", value)

    @property
    @pulumi.getter(name="fabricObjectUnification")
    def fabric_object_unification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fabric_object_unification")

    @fabric_object_unification.setter
    def fabric_object_unification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object_unification", value)

    @property
    @pulumi.getter(name="fabricWorkers")
    def fabric_workers(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fabric_workers")

    @fabric_workers.setter
    def fabric_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fabric_workers", value)

    @property
    @pulumi.getter(name="fileMgmt")
    def file_mgmt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_mgmt")

    @file_mgmt.setter
    def file_mgmt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_mgmt", value)

    @property
    @pulumi.getter(name="fileQuota")
    def file_quota(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_quota")

    @file_quota.setter
    def file_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_quota", value)

    @property
    @pulumi.getter(name="fileQuotaWarning")
    def file_quota_warning(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_quota_warning")

    @file_quota_warning.setter
    def file_quota_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_quota_warning", value)

    @property
    @pulumi.getter(name="fixedKey")
    def fixed_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fixed_key")

    @fixed_key.setter
    def fixed_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixed_key", value)

    @property
    @pulumi.getter(name="forticloudAccountEnforcement")
    def forticloud_account_enforcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticloud_account_enforcement")

    @forticloud_account_enforcement.setter
    def forticloud_account_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticloud_account_enforcement", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupPassword")
    def group_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_password")

    @group_password.setter
    def group_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_password", value)

    @property
    @pulumi.getter(name="logUnification")
    def log_unification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_unification")

    @log_unification.setter
    def log_unification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_unification", value)

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_ip")

    @management_ip.setter
    def management_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_ip", value)

    @property
    @pulumi.getter(name="managementPort")
    def management_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "management_port")

    @management_port.setter
    def management_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "management_port", value)

    @property
    @pulumi.getter(name="samlConfigurationSync")
    def saml_configuration_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_configuration_sync")

    @saml_configuration_sync.setter
    def saml_configuration_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_configuration_sync", value)

    @property
    @pulumi.getter(name="trustedLists")
    def trusted_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfTrustedListArgs']]]]:
        return pulumi.get(self, "trusted_lists")

    @trusted_lists.setter
    def trusted_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfTrustedListArgs']]]]):
        pulumi.set(self, "trusted_lists", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)

    @property
    @pulumi.getter(name="upstreamIp")
    def upstream_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream_ip")

    @upstream_ip.setter
    def upstream_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_ip", value)

    @property
    @pulumi.getter(name="upstreamPort")
    def upstream_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "upstream_port")

    @upstream_port.setter
    def upstream_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upstream_port", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemCsfState:
    def __init__(__self__, *,
                 accept_auth_by_cert: Optional[pulumi.Input[str]] = None,
                 authorization_request_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 configuration_sync: Optional[pulumi.Input[str]] = None,
                 downstream_access: Optional[pulumi.Input[str]] = None,
                 downstream_accprofile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_connectors: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricConnectorArgs']]]] = None,
                 fabric_devices: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricDeviceArgs']]]] = None,
                 fabric_object_unification: Optional[pulumi.Input[str]] = None,
                 fabric_workers: Optional[pulumi.Input[int]] = None,
                 file_mgmt: Optional[pulumi.Input[str]] = None,
                 file_quota: Optional[pulumi.Input[int]] = None,
                 file_quota_warning: Optional[pulumi.Input[int]] = None,
                 fixed_key: Optional[pulumi.Input[str]] = None,
                 forticloud_account_enforcement: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_password: Optional[pulumi.Input[str]] = None,
                 log_unification: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 saml_configuration_sync: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trusted_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfTrustedListArgs']]]] = None,
                 upstream: Optional[pulumi.Input[str]] = None,
                 upstream_ip: Optional[pulumi.Input[str]] = None,
                 upstream_port: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemCsf resources.
        """
        if accept_auth_by_cert is not None:
            pulumi.set(__self__, "accept_auth_by_cert", accept_auth_by_cert)
        if authorization_request_type is not None:
            pulumi.set(__self__, "authorization_request_type", authorization_request_type)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if configuration_sync is not None:
            pulumi.set(__self__, "configuration_sync", configuration_sync)
        if downstream_access is not None:
            pulumi.set(__self__, "downstream_access", downstream_access)
        if downstream_accprofile is not None:
            pulumi.set(__self__, "downstream_accprofile", downstream_accprofile)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fabric_connectors is not None:
            pulumi.set(__self__, "fabric_connectors", fabric_connectors)
        if fabric_devices is not None:
            pulumi.set(__self__, "fabric_devices", fabric_devices)
        if fabric_object_unification is not None:
            pulumi.set(__self__, "fabric_object_unification", fabric_object_unification)
        if fabric_workers is not None:
            pulumi.set(__self__, "fabric_workers", fabric_workers)
        if file_mgmt is not None:
            pulumi.set(__self__, "file_mgmt", file_mgmt)
        if file_quota is not None:
            pulumi.set(__self__, "file_quota", file_quota)
        if file_quota_warning is not None:
            pulumi.set(__self__, "file_quota_warning", file_quota_warning)
        if fixed_key is not None:
            pulumi.set(__self__, "fixed_key", fixed_key)
        if forticloud_account_enforcement is not None:
            pulumi.set(__self__, "forticloud_account_enforcement", forticloud_account_enforcement)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if group_password is not None:
            pulumi.set(__self__, "group_password", group_password)
        if log_unification is not None:
            pulumi.set(__self__, "log_unification", log_unification)
        if management_ip is not None:
            pulumi.set(__self__, "management_ip", management_ip)
        if management_port is not None:
            pulumi.set(__self__, "management_port", management_port)
        if saml_configuration_sync is not None:
            pulumi.set(__self__, "saml_configuration_sync", saml_configuration_sync)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trusted_lists is not None:
            pulumi.set(__self__, "trusted_lists", trusted_lists)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)
        if upstream_ip is not None:
            pulumi.set(__self__, "upstream_ip", upstream_ip)
        if upstream_port is not None:
            pulumi.set(__self__, "upstream_port", upstream_port)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="acceptAuthByCert")
    def accept_auth_by_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accept_auth_by_cert")

    @accept_auth_by_cert.setter
    def accept_auth_by_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_auth_by_cert", value)

    @property
    @pulumi.getter(name="authorizationRequestType")
    def authorization_request_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_request_type")

    @authorization_request_type.setter
    def authorization_request_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_request_type", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="configurationSync")
    def configuration_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configuration_sync")

    @configuration_sync.setter
    def configuration_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_sync", value)

    @property
    @pulumi.getter(name="downstreamAccess")
    def downstream_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "downstream_access")

    @downstream_access.setter
    def downstream_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_access", value)

    @property
    @pulumi.getter(name="downstreamAccprofile")
    def downstream_accprofile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "downstream_accprofile")

    @downstream_accprofile.setter
    def downstream_accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_accprofile", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fabricConnectors")
    def fabric_connectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricConnectorArgs']]]]:
        return pulumi.get(self, "fabric_connectors")

    @fabric_connectors.setter
    def fabric_connectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricConnectorArgs']]]]):
        pulumi.set(self, "fabric_connectors", value)

    @property
    @pulumi.getter(name="fabricDevices")
    def fabric_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricDeviceArgs']]]]:
        return pulumi.get(self, "fabric_devices")

    @fabric_devices.setter
    def fabric_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfFabricDeviceArgs']]]]):
        pulumi.set(self, "fabric_devices", value)

    @property
    @pulumi.getter(name="fabricObjectUnification")
    def fabric_object_unification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fabric_object_unification")

    @fabric_object_unification.setter
    def fabric_object_unification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object_unification", value)

    @property
    @pulumi.getter(name="fabricWorkers")
    def fabric_workers(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fabric_workers")

    @fabric_workers.setter
    def fabric_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fabric_workers", value)

    @property
    @pulumi.getter(name="fileMgmt")
    def file_mgmt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_mgmt")

    @file_mgmt.setter
    def file_mgmt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_mgmt", value)

    @property
    @pulumi.getter(name="fileQuota")
    def file_quota(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_quota")

    @file_quota.setter
    def file_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_quota", value)

    @property
    @pulumi.getter(name="fileQuotaWarning")
    def file_quota_warning(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_quota_warning")

    @file_quota_warning.setter
    def file_quota_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_quota_warning", value)

    @property
    @pulumi.getter(name="fixedKey")
    def fixed_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fixed_key")

    @fixed_key.setter
    def fixed_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixed_key", value)

    @property
    @pulumi.getter(name="forticloudAccountEnforcement")
    def forticloud_account_enforcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticloud_account_enforcement")

    @forticloud_account_enforcement.setter
    def forticloud_account_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticloud_account_enforcement", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupPassword")
    def group_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_password")

    @group_password.setter
    def group_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_password", value)

    @property
    @pulumi.getter(name="logUnification")
    def log_unification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_unification")

    @log_unification.setter
    def log_unification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_unification", value)

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_ip")

    @management_ip.setter
    def management_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_ip", value)

    @property
    @pulumi.getter(name="managementPort")
    def management_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "management_port")

    @management_port.setter
    def management_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "management_port", value)

    @property
    @pulumi.getter(name="samlConfigurationSync")
    def saml_configuration_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_configuration_sync")

    @saml_configuration_sync.setter
    def saml_configuration_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_configuration_sync", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trustedLists")
    def trusted_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfTrustedListArgs']]]]:
        return pulumi.get(self, "trusted_lists")

    @trusted_lists.setter
    def trusted_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemCsfTrustedListArgs']]]]):
        pulumi.set(self, "trusted_lists", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)

    @property
    @pulumi.getter(name="upstreamIp")
    def upstream_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream_ip")

    @upstream_ip.setter
    def upstream_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_ip", value)

    @property
    @pulumi.getter(name="upstreamPort")
    def upstream_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "upstream_port")

    @upstream_port.setter
    def upstream_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upstream_port", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemCsf(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_auth_by_cert: Optional[pulumi.Input[str]] = None,
                 authorization_request_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 configuration_sync: Optional[pulumi.Input[str]] = None,
                 downstream_access: Optional[pulumi.Input[str]] = None,
                 downstream_accprofile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemCsfFabricConnectorArgs']]]]] = None,
                 fabric_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemCsfFabricDeviceArgs']]]]] = None,
                 fabric_object_unification: Optional[pulumi.Input[str]] = None,
                 fabric_workers: Optional[pulumi.Input[int]] = None,
                 file_mgmt: Optional[pulumi.Input[str]] = None,
                 file_quota: Optional[pulumi.Input[int]] = None,
                 file_quota_warning: Optional[pulumi.Input[int]] = None,
                 fixed_key: Optional[pulumi.Input[str]] = None,
                 forticloud_account_enforcement: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_password: Optional[pulumi.Input[str]] = None,
                 log_unification: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 saml_configuration_sync: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trusted_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemCsfTrustedListArgs']]]]] = None,
                 upstream: Optional[pulumi.Input[str]] = None,
                 upstream_ip: Optional[pulumi.Input[str]] = None,
                 upstream_port: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemCsf resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemCsfArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemCsf resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemCsfArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemCsfArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_auth_by_cert: Optional[pulumi.Input[str]] = None,
                 authorization_request_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 configuration_sync: Optional[pulumi.Input[str]] = None,
                 downstream_access: Optional[pulumi.Input[str]] = None,
                 downstream_accprofile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemCsfFabricConnectorArgs']]]]] = None,
                 fabric_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemCsfFabricDeviceArgs']]]]] = None,
                 fabric_object_unification: Optional[pulumi.Input[str]] = None,
                 fabric_workers: Optional[pulumi.Input[int]] = None,
                 file_mgmt: Optional[pulumi.Input[str]] = None,
                 file_quota: Optional[pulumi.Input[int]] = None,
                 file_quota_warning: Optional[pulumi.Input[int]] = None,
                 fixed_key: Optional[pulumi.Input[str]] = None,
                 forticloud_account_enforcement: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_password: Optional[pulumi.Input[str]] = None,
                 log_unification: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 saml_configuration_sync: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trusted_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemCsfTrustedListArgs']]]]] = None,
                 upstream: Optional[pulumi.Input[str]] = None,
                 upstream_ip: Optional[pulumi.Input[str]] = None,
                 upstream_port: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemCsfArgs.__new__(SystemCsfArgs)

            __props__.__dict__["accept_auth_by_cert"] = accept_auth_by_cert
            __props__.__dict__["authorization_request_type"] = authorization_request_type
            __props__.__dict__["certificate"] = certificate
            __props__.__dict__["configuration_sync"] = configuration_sync
            __props__.__dict__["downstream_access"] = downstream_access
            __props__.__dict__["downstream_accprofile"] = downstream_accprofile
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fabric_connectors"] = fabric_connectors
            __props__.__dict__["fabric_devices"] = fabric_devices
            __props__.__dict__["fabric_object_unification"] = fabric_object_unification
            __props__.__dict__["fabric_workers"] = fabric_workers
            __props__.__dict__["file_mgmt"] = file_mgmt
            __props__.__dict__["file_quota"] = file_quota
            __props__.__dict__["file_quota_warning"] = file_quota_warning
            __props__.__dict__["fixed_key"] = None if fixed_key is None else pulumi.Output.secret(fixed_key)
            __props__.__dict__["forticloud_account_enforcement"] = forticloud_account_enforcement
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["group_password"] = None if group_password is None else pulumi.Output.secret(group_password)
            __props__.__dict__["log_unification"] = log_unification
            __props__.__dict__["management_ip"] = management_ip
            __props__.__dict__["management_port"] = management_port
            __props__.__dict__["saml_configuration_sync"] = saml_configuration_sync
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["trusted_lists"] = trusted_lists
            __props__.__dict__["upstream"] = upstream
            __props__.__dict__["upstream_ip"] = upstream_ip
            __props__.__dict__["upstream_port"] = upstream_port
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["fixedKey", "groupPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SystemCsf, __self__).__init__(
            'fortios:index/systemCsf:SystemCsf',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_auth_by_cert: Optional[pulumi.Input[str]] = None,
            authorization_request_type: Optional[pulumi.Input[str]] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            configuration_sync: Optional[pulumi.Input[str]] = None,
            downstream_access: Optional[pulumi.Input[str]] = None,
            downstream_accprofile: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fabric_connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemCsfFabricConnectorArgs']]]]] = None,
            fabric_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemCsfFabricDeviceArgs']]]]] = None,
            fabric_object_unification: Optional[pulumi.Input[str]] = None,
            fabric_workers: Optional[pulumi.Input[int]] = None,
            file_mgmt: Optional[pulumi.Input[str]] = None,
            file_quota: Optional[pulumi.Input[int]] = None,
            file_quota_warning: Optional[pulumi.Input[int]] = None,
            fixed_key: Optional[pulumi.Input[str]] = None,
            forticloud_account_enforcement: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            group_password: Optional[pulumi.Input[str]] = None,
            log_unification: Optional[pulumi.Input[str]] = None,
            management_ip: Optional[pulumi.Input[str]] = None,
            management_port: Optional[pulumi.Input[int]] = None,
            saml_configuration_sync: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            trusted_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemCsfTrustedListArgs']]]]] = None,
            upstream: Optional[pulumi.Input[str]] = None,
            upstream_ip: Optional[pulumi.Input[str]] = None,
            upstream_port: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemCsf':
        """
        Get an existing SystemCsf resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemCsfState.__new__(_SystemCsfState)

        __props__.__dict__["accept_auth_by_cert"] = accept_auth_by_cert
        __props__.__dict__["authorization_request_type"] = authorization_request_type
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["configuration_sync"] = configuration_sync
        __props__.__dict__["downstream_access"] = downstream_access
        __props__.__dict__["downstream_accprofile"] = downstream_accprofile
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fabric_connectors"] = fabric_connectors
        __props__.__dict__["fabric_devices"] = fabric_devices
        __props__.__dict__["fabric_object_unification"] = fabric_object_unification
        __props__.__dict__["fabric_workers"] = fabric_workers
        __props__.__dict__["file_mgmt"] = file_mgmt
        __props__.__dict__["file_quota"] = file_quota
        __props__.__dict__["file_quota_warning"] = file_quota_warning
        __props__.__dict__["fixed_key"] = fixed_key
        __props__.__dict__["forticloud_account_enforcement"] = forticloud_account_enforcement
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["group_password"] = group_password
        __props__.__dict__["log_unification"] = log_unification
        __props__.__dict__["management_ip"] = management_ip
        __props__.__dict__["management_port"] = management_port
        __props__.__dict__["saml_configuration_sync"] = saml_configuration_sync
        __props__.__dict__["status"] = status
        __props__.__dict__["trusted_lists"] = trusted_lists
        __props__.__dict__["upstream"] = upstream
        __props__.__dict__["upstream_ip"] = upstream_ip
        __props__.__dict__["upstream_port"] = upstream_port
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemCsf(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptAuthByCert")
    def accept_auth_by_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "accept_auth_by_cert")

    @property
    @pulumi.getter(name="authorizationRequestType")
    def authorization_request_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authorization_request_type")

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="configurationSync")
    def configuration_sync(self) -> pulumi.Output[str]:
        return pulumi.get(self, "configuration_sync")

    @property
    @pulumi.getter(name="downstreamAccess")
    def downstream_access(self) -> pulumi.Output[str]:
        return pulumi.get(self, "downstream_access")

    @property
    @pulumi.getter(name="downstreamAccprofile")
    def downstream_accprofile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "downstream_accprofile")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fabricConnectors")
    def fabric_connectors(self) -> pulumi.Output[Optional[Sequence['outputs.SystemCsfFabricConnector']]]:
        return pulumi.get(self, "fabric_connectors")

    @property
    @pulumi.getter(name="fabricDevices")
    def fabric_devices(self) -> pulumi.Output[Optional[Sequence['outputs.SystemCsfFabricDevice']]]:
        return pulumi.get(self, "fabric_devices")

    @property
    @pulumi.getter(name="fabricObjectUnification")
    def fabric_object_unification(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fabric_object_unification")

    @property
    @pulumi.getter(name="fabricWorkers")
    def fabric_workers(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fabric_workers")

    @property
    @pulumi.getter(name="fileMgmt")
    def file_mgmt(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_mgmt")

    @property
    @pulumi.getter(name="fileQuota")
    def file_quota(self) -> pulumi.Output[int]:
        return pulumi.get(self, "file_quota")

    @property
    @pulumi.getter(name="fileQuotaWarning")
    def file_quota_warning(self) -> pulumi.Output[int]:
        return pulumi.get(self, "file_quota_warning")

    @property
    @pulumi.getter(name="fixedKey")
    def fixed_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fixed_key")

    @property
    @pulumi.getter(name="forticloudAccountEnforcement")
    def forticloud_account_enforcement(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forticloud_account_enforcement")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupPassword")
    def group_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "group_password")

    @property
    @pulumi.getter(name="logUnification")
    def log_unification(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_unification")

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "management_ip")

    @property
    @pulumi.getter(name="managementPort")
    def management_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "management_port")

    @property
    @pulumi.getter(name="samlConfigurationSync")
    def saml_configuration_sync(self) -> pulumi.Output[str]:
        return pulumi.get(self, "saml_configuration_sync")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trustedLists")
    def trusted_lists(self) -> pulumi.Output[Optional[Sequence['outputs.SystemCsfTrustedList']]]:
        return pulumi.get(self, "trusted_lists")

    @property
    @pulumi.getter
    def upstream(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upstream")

    @property
    @pulumi.getter(name="upstreamIp")
    def upstream_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upstream_ip")

    @property
    @pulumi.getter(name="upstreamPort")
    def upstream_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "upstream_port")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

