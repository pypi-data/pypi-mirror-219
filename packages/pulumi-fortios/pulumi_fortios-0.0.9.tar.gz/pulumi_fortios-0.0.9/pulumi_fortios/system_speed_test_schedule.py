# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemSpeedTestScheduleArgs', 'SystemSpeedTestSchedule']

@pulumi.input_type
class SystemSpeedTestScheduleArgs:
    def __init__(__self__, *,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 dynamic_server: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSpeedTestScheduleScheduleArgs']]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_inbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth: Optional[pulumi.Input[str]] = None,
                 update_outbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemSpeedTestSchedule resource.
        """
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if dynamic_server is not None:
            pulumi.set(__self__, "dynamic_server", dynamic_server)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_inbandwidth is not None:
            pulumi.set(__self__, "update_inbandwidth", update_inbandwidth)
        if update_inbandwidth_maximum is not None:
            pulumi.set(__self__, "update_inbandwidth_maximum", update_inbandwidth_maximum)
        if update_inbandwidth_minimum is not None:
            pulumi.set(__self__, "update_inbandwidth_minimum", update_inbandwidth_minimum)
        if update_outbandwidth is not None:
            pulumi.set(__self__, "update_outbandwidth", update_outbandwidth)
        if update_outbandwidth_maximum is not None:
            pulumi.set(__self__, "update_outbandwidth_maximum", update_outbandwidth_maximum)
        if update_outbandwidth_minimum is not None:
            pulumi.set(__self__, "update_outbandwidth_minimum", update_outbandwidth_minimum)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter(name="dynamicServer")
    def dynamic_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_server")

    @dynamic_server.setter
    def dynamic_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_server", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSpeedTestScheduleScheduleArgs']]]]:
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSpeedTestScheduleScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateInbandwidth")
    def update_inbandwidth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_inbandwidth")

    @update_inbandwidth.setter
    def update_inbandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_inbandwidth", value)

    @property
    @pulumi.getter(name="updateInbandwidthMaximum")
    def update_inbandwidth_maximum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_inbandwidth_maximum")

    @update_inbandwidth_maximum.setter
    def update_inbandwidth_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_inbandwidth_maximum", value)

    @property
    @pulumi.getter(name="updateInbandwidthMinimum")
    def update_inbandwidth_minimum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_inbandwidth_minimum")

    @update_inbandwidth_minimum.setter
    def update_inbandwidth_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_inbandwidth_minimum", value)

    @property
    @pulumi.getter(name="updateOutbandwidth")
    def update_outbandwidth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_outbandwidth")

    @update_outbandwidth.setter
    def update_outbandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_outbandwidth", value)

    @property
    @pulumi.getter(name="updateOutbandwidthMaximum")
    def update_outbandwidth_maximum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_outbandwidth_maximum")

    @update_outbandwidth_maximum.setter
    def update_outbandwidth_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_outbandwidth_maximum", value)

    @property
    @pulumi.getter(name="updateOutbandwidthMinimum")
    def update_outbandwidth_minimum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_outbandwidth_minimum")

    @update_outbandwidth_minimum.setter
    def update_outbandwidth_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_outbandwidth_minimum", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemSpeedTestScheduleState:
    def __init__(__self__, *,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 dynamic_server: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSpeedTestScheduleScheduleArgs']]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_inbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth: Optional[pulumi.Input[str]] = None,
                 update_outbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemSpeedTestSchedule resources.
        """
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if dynamic_server is not None:
            pulumi.set(__self__, "dynamic_server", dynamic_server)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_inbandwidth is not None:
            pulumi.set(__self__, "update_inbandwidth", update_inbandwidth)
        if update_inbandwidth_maximum is not None:
            pulumi.set(__self__, "update_inbandwidth_maximum", update_inbandwidth_maximum)
        if update_inbandwidth_minimum is not None:
            pulumi.set(__self__, "update_inbandwidth_minimum", update_inbandwidth_minimum)
        if update_outbandwidth is not None:
            pulumi.set(__self__, "update_outbandwidth", update_outbandwidth)
        if update_outbandwidth_maximum is not None:
            pulumi.set(__self__, "update_outbandwidth_maximum", update_outbandwidth_maximum)
        if update_outbandwidth_minimum is not None:
            pulumi.set(__self__, "update_outbandwidth_minimum", update_outbandwidth_minimum)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter(name="dynamicServer")
    def dynamic_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_server")

    @dynamic_server.setter
    def dynamic_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_server", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSpeedTestScheduleScheduleArgs']]]]:
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSpeedTestScheduleScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateInbandwidth")
    def update_inbandwidth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_inbandwidth")

    @update_inbandwidth.setter
    def update_inbandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_inbandwidth", value)

    @property
    @pulumi.getter(name="updateInbandwidthMaximum")
    def update_inbandwidth_maximum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_inbandwidth_maximum")

    @update_inbandwidth_maximum.setter
    def update_inbandwidth_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_inbandwidth_maximum", value)

    @property
    @pulumi.getter(name="updateInbandwidthMinimum")
    def update_inbandwidth_minimum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_inbandwidth_minimum")

    @update_inbandwidth_minimum.setter
    def update_inbandwidth_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_inbandwidth_minimum", value)

    @property
    @pulumi.getter(name="updateOutbandwidth")
    def update_outbandwidth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_outbandwidth")

    @update_outbandwidth.setter
    def update_outbandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_outbandwidth", value)

    @property
    @pulumi.getter(name="updateOutbandwidthMaximum")
    def update_outbandwidth_maximum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_outbandwidth_maximum")

    @update_outbandwidth_maximum.setter
    def update_outbandwidth_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_outbandwidth_maximum", value)

    @property
    @pulumi.getter(name="updateOutbandwidthMinimum")
    def update_outbandwidth_minimum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_outbandwidth_minimum")

    @update_outbandwidth_minimum.setter
    def update_outbandwidth_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_outbandwidth_minimum", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemSpeedTestSchedule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 dynamic_server: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSpeedTestScheduleScheduleArgs']]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_inbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth: Optional[pulumi.Input[str]] = None,
                 update_outbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemSpeedTestSchedule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemSpeedTestScheduleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemSpeedTestSchedule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemSpeedTestScheduleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemSpeedTestScheduleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 dynamic_server: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSpeedTestScheduleScheduleArgs']]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_inbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth: Optional[pulumi.Input[str]] = None,
                 update_outbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemSpeedTestScheduleArgs.__new__(SystemSpeedTestScheduleArgs)

            __props__.__dict__["diffserv"] = diffserv
            __props__.__dict__["dynamic_server"] = dynamic_server
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["interface"] = interface
            __props__.__dict__["schedules"] = schedules
            __props__.__dict__["server_name"] = server_name
            __props__.__dict__["status"] = status
            __props__.__dict__["update_inbandwidth"] = update_inbandwidth
            __props__.__dict__["update_inbandwidth_maximum"] = update_inbandwidth_maximum
            __props__.__dict__["update_inbandwidth_minimum"] = update_inbandwidth_minimum
            __props__.__dict__["update_outbandwidth"] = update_outbandwidth
            __props__.__dict__["update_outbandwidth_maximum"] = update_outbandwidth_maximum
            __props__.__dict__["update_outbandwidth_minimum"] = update_outbandwidth_minimum
            __props__.__dict__["vdomparam"] = vdomparam
        super(SystemSpeedTestSchedule, __self__).__init__(
            'fortios:index/systemSpeedTestSchedule:SystemSpeedTestSchedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            diffserv: Optional[pulumi.Input[str]] = None,
            dynamic_server: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSpeedTestScheduleScheduleArgs']]]]] = None,
            server_name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            update_inbandwidth: Optional[pulumi.Input[str]] = None,
            update_inbandwidth_maximum: Optional[pulumi.Input[int]] = None,
            update_inbandwidth_minimum: Optional[pulumi.Input[int]] = None,
            update_outbandwidth: Optional[pulumi.Input[str]] = None,
            update_outbandwidth_maximum: Optional[pulumi.Input[int]] = None,
            update_outbandwidth_minimum: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemSpeedTestSchedule':
        """
        Get an existing SystemSpeedTestSchedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemSpeedTestScheduleState.__new__(_SystemSpeedTestScheduleState)

        __props__.__dict__["diffserv"] = diffserv
        __props__.__dict__["dynamic_server"] = dynamic_server
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["schedules"] = schedules
        __props__.__dict__["server_name"] = server_name
        __props__.__dict__["status"] = status
        __props__.__dict__["update_inbandwidth"] = update_inbandwidth
        __props__.__dict__["update_inbandwidth_maximum"] = update_inbandwidth_maximum
        __props__.__dict__["update_inbandwidth_minimum"] = update_inbandwidth_minimum
        __props__.__dict__["update_outbandwidth"] = update_outbandwidth
        __props__.__dict__["update_outbandwidth_maximum"] = update_outbandwidth_maximum
        __props__.__dict__["update_outbandwidth_minimum"] = update_outbandwidth_minimum
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemSpeedTestSchedule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def diffserv(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffserv")

    @property
    @pulumi.getter(name="dynamicServer")
    def dynamic_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dynamic_server")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def schedules(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSpeedTestScheduleSchedule']]]:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateInbandwidth")
    def update_inbandwidth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "update_inbandwidth")

    @property
    @pulumi.getter(name="updateInbandwidthMaximum")
    def update_inbandwidth_maximum(self) -> pulumi.Output[int]:
        return pulumi.get(self, "update_inbandwidth_maximum")

    @property
    @pulumi.getter(name="updateInbandwidthMinimum")
    def update_inbandwidth_minimum(self) -> pulumi.Output[int]:
        return pulumi.get(self, "update_inbandwidth_minimum")

    @property
    @pulumi.getter(name="updateOutbandwidth")
    def update_outbandwidth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "update_outbandwidth")

    @property
    @pulumi.getter(name="updateOutbandwidthMaximum")
    def update_outbandwidth_maximum(self) -> pulumi.Output[int]:
        return pulumi.get(self, "update_outbandwidth_maximum")

    @property
    @pulumi.getter(name="updateOutbandwidthMinimum")
    def update_outbandwidth_minimum(self) -> pulumi.Output[int]:
        return pulumi.get(self, "update_outbandwidth_minimum")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

