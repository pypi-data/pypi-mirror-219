# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemAutomationActionArgs', 'SystemAutomationAction']

@pulumi.input_type
class SystemAutomationActionArgs:
    def __init__(__self__, *,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 action_type: Optional[pulumi.Input[str]] = None,
                 alicloud_access_key_id: Optional[pulumi.Input[str]] = None,
                 alicloud_access_key_secret: Optional[pulumi.Input[str]] = None,
                 alicloud_account_id: Optional[pulumi.Input[str]] = None,
                 alicloud_function: Optional[pulumi.Input[str]] = None,
                 alicloud_function_authorization: Optional[pulumi.Input[str]] = None,
                 alicloud_function_domain: Optional[pulumi.Input[str]] = None,
                 alicloud_region: Optional[pulumi.Input[str]] = None,
                 alicloud_service: Optional[pulumi.Input[str]] = None,
                 alicloud_version: Optional[pulumi.Input[str]] = None,
                 aws_api_id: Optional[pulumi.Input[str]] = None,
                 aws_api_key: Optional[pulumi.Input[str]] = None,
                 aws_api_path: Optional[pulumi.Input[str]] = None,
                 aws_api_stage: Optional[pulumi.Input[str]] = None,
                 aws_domain: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 azure_api_key: Optional[pulumi.Input[str]] = None,
                 azure_app: Optional[pulumi.Input[str]] = None,
                 azure_domain: Optional[pulumi.Input[str]] = None,
                 azure_function: Optional[pulumi.Input[str]] = None,
                 azure_function_authorization: Optional[pulumi.Input[str]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_body: Optional[pulumi.Input[str]] = None,
                 email_from: Optional[pulumi.Input[str]] = None,
                 email_subject: Optional[pulumi.Input[str]] = None,
                 email_tos: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionEmailToArgs']]]] = None,
                 execute_security_fabric: Optional[pulumi.Input[str]] = None,
                 forticare_email: Optional[pulumi.Input[str]] = None,
                 gcp_function: Optional[pulumi.Input[str]] = None,
                 gcp_function_domain: Optional[pulumi.Input[str]] = None,
                 gcp_function_region: Optional[pulumi.Input[str]] = None,
                 gcp_project: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHeaderArgs']]]] = None,
                 http_body: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHttpHeaderArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 message_type: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 minimum_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_size: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 replacement_message: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 sdn_connectors: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionSdnConnectorArgs']]]] = None,
                 security_tag: Optional[pulumi.Input[str]] = None,
                 system_action: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 tls_certificate: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 verify_host_cert: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemAutomationAction resource.
        """
        if accprofile is not None:
            pulumi.set(__self__, "accprofile", accprofile)
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if alicloud_access_key_id is not None:
            pulumi.set(__self__, "alicloud_access_key_id", alicloud_access_key_id)
        if alicloud_access_key_secret is not None:
            pulumi.set(__self__, "alicloud_access_key_secret", alicloud_access_key_secret)
        if alicloud_account_id is not None:
            pulumi.set(__self__, "alicloud_account_id", alicloud_account_id)
        if alicloud_function is not None:
            pulumi.set(__self__, "alicloud_function", alicloud_function)
        if alicloud_function_authorization is not None:
            pulumi.set(__self__, "alicloud_function_authorization", alicloud_function_authorization)
        if alicloud_function_domain is not None:
            pulumi.set(__self__, "alicloud_function_domain", alicloud_function_domain)
        if alicloud_region is not None:
            pulumi.set(__self__, "alicloud_region", alicloud_region)
        if alicloud_service is not None:
            pulumi.set(__self__, "alicloud_service", alicloud_service)
        if alicloud_version is not None:
            pulumi.set(__self__, "alicloud_version", alicloud_version)
        if aws_api_id is not None:
            pulumi.set(__self__, "aws_api_id", aws_api_id)
        if aws_api_key is not None:
            pulumi.set(__self__, "aws_api_key", aws_api_key)
        if aws_api_path is not None:
            pulumi.set(__self__, "aws_api_path", aws_api_path)
        if aws_api_stage is not None:
            pulumi.set(__self__, "aws_api_stage", aws_api_stage)
        if aws_domain is not None:
            pulumi.set(__self__, "aws_domain", aws_domain)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if azure_api_key is not None:
            pulumi.set(__self__, "azure_api_key", azure_api_key)
        if azure_app is not None:
            pulumi.set(__self__, "azure_app", azure_app)
        if azure_domain is not None:
            pulumi.set(__self__, "azure_domain", azure_domain)
        if azure_function is not None:
            pulumi.set(__self__, "azure_function", azure_function)
        if azure_function_authorization is not None:
            pulumi.set(__self__, "azure_function_authorization", azure_function_authorization)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_body is not None:
            pulumi.set(__self__, "email_body", email_body)
        if email_from is not None:
            pulumi.set(__self__, "email_from", email_from)
        if email_subject is not None:
            pulumi.set(__self__, "email_subject", email_subject)
        if email_tos is not None:
            pulumi.set(__self__, "email_tos", email_tos)
        if execute_security_fabric is not None:
            pulumi.set(__self__, "execute_security_fabric", execute_security_fabric)
        if forticare_email is not None:
            pulumi.set(__self__, "forticare_email", forticare_email)
        if gcp_function is not None:
            pulumi.set(__self__, "gcp_function", gcp_function)
        if gcp_function_domain is not None:
            pulumi.set(__self__, "gcp_function_domain", gcp_function_domain)
        if gcp_function_region is not None:
            pulumi.set(__self__, "gcp_function_region", gcp_function_region)
        if gcp_project is not None:
            pulumi.set(__self__, "gcp_project", gcp_project)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_body is not None:
            pulumi.set(__self__, "http_body", http_body)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if message_type is not None:
            pulumi.set(__self__, "message_type", message_type)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if minimum_interval is not None:
            pulumi.set(__self__, "minimum_interval", minimum_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output_size is not None:
            pulumi.set(__self__, "output_size", output_size)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if replacement_message is not None:
            pulumi.set(__self__, "replacement_message", replacement_message)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if sdn_connectors is not None:
            pulumi.set(__self__, "sdn_connectors", sdn_connectors)
        if security_tag is not None:
            pulumi.set(__self__, "security_tag", security_tag)
        if system_action is not None:
            pulumi.set(__self__, "system_action", system_action)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if tls_certificate is not None:
            pulumi.set(__self__, "tls_certificate", tls_certificate)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if verify_host_cert is not None:
            pulumi.set(__self__, "verify_host_cert", verify_host_cert)

    @property
    @pulumi.getter
    def accprofile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accprofile")

    @accprofile.setter
    def accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accprofile", value)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="alicloudAccessKeyId")
    def alicloud_access_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_access_key_id")

    @alicloud_access_key_id.setter
    def alicloud_access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_access_key_id", value)

    @property
    @pulumi.getter(name="alicloudAccessKeySecret")
    def alicloud_access_key_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_access_key_secret")

    @alicloud_access_key_secret.setter
    def alicloud_access_key_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_access_key_secret", value)

    @property
    @pulumi.getter(name="alicloudAccountId")
    def alicloud_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_account_id")

    @alicloud_account_id.setter
    def alicloud_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_account_id", value)

    @property
    @pulumi.getter(name="alicloudFunction")
    def alicloud_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_function")

    @alicloud_function.setter
    def alicloud_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_function", value)

    @property
    @pulumi.getter(name="alicloudFunctionAuthorization")
    def alicloud_function_authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_function_authorization")

    @alicloud_function_authorization.setter
    def alicloud_function_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_function_authorization", value)

    @property
    @pulumi.getter(name="alicloudFunctionDomain")
    def alicloud_function_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_function_domain")

    @alicloud_function_domain.setter
    def alicloud_function_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_function_domain", value)

    @property
    @pulumi.getter(name="alicloudRegion")
    def alicloud_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_region")

    @alicloud_region.setter
    def alicloud_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_region", value)

    @property
    @pulumi.getter(name="alicloudService")
    def alicloud_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_service")

    @alicloud_service.setter
    def alicloud_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_service", value)

    @property
    @pulumi.getter(name="alicloudVersion")
    def alicloud_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_version")

    @alicloud_version.setter
    def alicloud_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_version", value)

    @property
    @pulumi.getter(name="awsApiId")
    def aws_api_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_api_id")

    @aws_api_id.setter
    def aws_api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_api_id", value)

    @property
    @pulumi.getter(name="awsApiKey")
    def aws_api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_api_key")

    @aws_api_key.setter
    def aws_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_api_key", value)

    @property
    @pulumi.getter(name="awsApiPath")
    def aws_api_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_api_path")

    @aws_api_path.setter
    def aws_api_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_api_path", value)

    @property
    @pulumi.getter(name="awsApiStage")
    def aws_api_stage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_api_stage")

    @aws_api_stage.setter
    def aws_api_stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_api_stage", value)

    @property
    @pulumi.getter(name="awsDomain")
    def aws_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_domain")

    @aws_domain.setter
    def aws_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_domain", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="azureApiKey")
    def azure_api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_api_key")

    @azure_api_key.setter
    def azure_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_api_key", value)

    @property
    @pulumi.getter(name="azureApp")
    def azure_app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_app")

    @azure_app.setter
    def azure_app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_app", value)

    @property
    @pulumi.getter(name="azureDomain")
    def azure_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_domain")

    @azure_domain.setter
    def azure_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_domain", value)

    @property
    @pulumi.getter(name="azureFunction")
    def azure_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_function")

    @azure_function.setter
    def azure_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_function", value)

    @property
    @pulumi.getter(name="azureFunctionAuthorization")
    def azure_function_authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_function_authorization")

    @azure_function_authorization.setter
    def azure_function_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_function_authorization", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailBody")
    def email_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_body")

    @email_body.setter
    def email_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_body", value)

    @property
    @pulumi.getter(name="emailFrom")
    def email_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_from")

    @email_from.setter
    def email_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_from", value)

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_subject")

    @email_subject.setter
    def email_subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_subject", value)

    @property
    @pulumi.getter(name="emailTos")
    def email_tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionEmailToArgs']]]]:
        return pulumi.get(self, "email_tos")

    @email_tos.setter
    def email_tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionEmailToArgs']]]]):
        pulumi.set(self, "email_tos", value)

    @property
    @pulumi.getter(name="executeSecurityFabric")
    def execute_security_fabric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "execute_security_fabric")

    @execute_security_fabric.setter
    def execute_security_fabric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execute_security_fabric", value)

    @property
    @pulumi.getter(name="forticareEmail")
    def forticare_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticare_email")

    @forticare_email.setter
    def forticare_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticare_email", value)

    @property
    @pulumi.getter(name="gcpFunction")
    def gcp_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcp_function")

    @gcp_function.setter
    def gcp_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_function", value)

    @property
    @pulumi.getter(name="gcpFunctionDomain")
    def gcp_function_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcp_function_domain")

    @gcp_function_domain.setter
    def gcp_function_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_function_domain", value)

    @property
    @pulumi.getter(name="gcpFunctionRegion")
    def gcp_function_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcp_function_region")

    @gcp_function_region.setter
    def gcp_function_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_function_region", value)

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcp_project")

    @gcp_project.setter
    def gcp_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_project", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="httpBody")
    def http_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_body")

    @http_body.setter
    def http_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_body", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHttpHeaderArgs']]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_type")

    @message_type.setter
    def message_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_type", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="minimumInterval")
    def minimum_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minimum_interval")

    @minimum_interval.setter
    def minimum_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outputSize")
    def output_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "output_size")

    @output_size.setter
    def output_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "output_size", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="replacementMessage")
    def replacement_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_message")

    @replacement_message.setter
    def replacement_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_message", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter(name="sdnConnectors")
    def sdn_connectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionSdnConnectorArgs']]]]:
        return pulumi.get(self, "sdn_connectors")

    @sdn_connectors.setter
    def sdn_connectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionSdnConnectorArgs']]]]):
        pulumi.set(self, "sdn_connectors", value)

    @property
    @pulumi.getter(name="securityTag")
    def security_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_tag")

    @security_tag.setter
    def security_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_tag", value)

    @property
    @pulumi.getter(name="systemAction")
    def system_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_action")

    @system_action.setter
    def system_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_action", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_certificate")

    @tls_certificate.setter
    def tls_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_certificate", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="verifyHostCert")
    def verify_host_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verify_host_cert")

    @verify_host_cert.setter
    def verify_host_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_host_cert", value)


@pulumi.input_type
class _SystemAutomationActionState:
    def __init__(__self__, *,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 action_type: Optional[pulumi.Input[str]] = None,
                 alicloud_access_key_id: Optional[pulumi.Input[str]] = None,
                 alicloud_access_key_secret: Optional[pulumi.Input[str]] = None,
                 alicloud_account_id: Optional[pulumi.Input[str]] = None,
                 alicloud_function: Optional[pulumi.Input[str]] = None,
                 alicloud_function_authorization: Optional[pulumi.Input[str]] = None,
                 alicloud_function_domain: Optional[pulumi.Input[str]] = None,
                 alicloud_region: Optional[pulumi.Input[str]] = None,
                 alicloud_service: Optional[pulumi.Input[str]] = None,
                 alicloud_version: Optional[pulumi.Input[str]] = None,
                 aws_api_id: Optional[pulumi.Input[str]] = None,
                 aws_api_key: Optional[pulumi.Input[str]] = None,
                 aws_api_path: Optional[pulumi.Input[str]] = None,
                 aws_api_stage: Optional[pulumi.Input[str]] = None,
                 aws_domain: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 azure_api_key: Optional[pulumi.Input[str]] = None,
                 azure_app: Optional[pulumi.Input[str]] = None,
                 azure_domain: Optional[pulumi.Input[str]] = None,
                 azure_function: Optional[pulumi.Input[str]] = None,
                 azure_function_authorization: Optional[pulumi.Input[str]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_body: Optional[pulumi.Input[str]] = None,
                 email_from: Optional[pulumi.Input[str]] = None,
                 email_subject: Optional[pulumi.Input[str]] = None,
                 email_tos: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionEmailToArgs']]]] = None,
                 execute_security_fabric: Optional[pulumi.Input[str]] = None,
                 forticare_email: Optional[pulumi.Input[str]] = None,
                 gcp_function: Optional[pulumi.Input[str]] = None,
                 gcp_function_domain: Optional[pulumi.Input[str]] = None,
                 gcp_function_region: Optional[pulumi.Input[str]] = None,
                 gcp_project: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHeaderArgs']]]] = None,
                 http_body: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHttpHeaderArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 message_type: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 minimum_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_size: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 replacement_message: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 sdn_connectors: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionSdnConnectorArgs']]]] = None,
                 security_tag: Optional[pulumi.Input[str]] = None,
                 system_action: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 tls_certificate: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 verify_host_cert: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemAutomationAction resources.
        """
        if accprofile is not None:
            pulumi.set(__self__, "accprofile", accprofile)
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if alicloud_access_key_id is not None:
            pulumi.set(__self__, "alicloud_access_key_id", alicloud_access_key_id)
        if alicloud_access_key_secret is not None:
            pulumi.set(__self__, "alicloud_access_key_secret", alicloud_access_key_secret)
        if alicloud_account_id is not None:
            pulumi.set(__self__, "alicloud_account_id", alicloud_account_id)
        if alicloud_function is not None:
            pulumi.set(__self__, "alicloud_function", alicloud_function)
        if alicloud_function_authorization is not None:
            pulumi.set(__self__, "alicloud_function_authorization", alicloud_function_authorization)
        if alicloud_function_domain is not None:
            pulumi.set(__self__, "alicloud_function_domain", alicloud_function_domain)
        if alicloud_region is not None:
            pulumi.set(__self__, "alicloud_region", alicloud_region)
        if alicloud_service is not None:
            pulumi.set(__self__, "alicloud_service", alicloud_service)
        if alicloud_version is not None:
            pulumi.set(__self__, "alicloud_version", alicloud_version)
        if aws_api_id is not None:
            pulumi.set(__self__, "aws_api_id", aws_api_id)
        if aws_api_key is not None:
            pulumi.set(__self__, "aws_api_key", aws_api_key)
        if aws_api_path is not None:
            pulumi.set(__self__, "aws_api_path", aws_api_path)
        if aws_api_stage is not None:
            pulumi.set(__self__, "aws_api_stage", aws_api_stage)
        if aws_domain is not None:
            pulumi.set(__self__, "aws_domain", aws_domain)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if azure_api_key is not None:
            pulumi.set(__self__, "azure_api_key", azure_api_key)
        if azure_app is not None:
            pulumi.set(__self__, "azure_app", azure_app)
        if azure_domain is not None:
            pulumi.set(__self__, "azure_domain", azure_domain)
        if azure_function is not None:
            pulumi.set(__self__, "azure_function", azure_function)
        if azure_function_authorization is not None:
            pulumi.set(__self__, "azure_function_authorization", azure_function_authorization)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_body is not None:
            pulumi.set(__self__, "email_body", email_body)
        if email_from is not None:
            pulumi.set(__self__, "email_from", email_from)
        if email_subject is not None:
            pulumi.set(__self__, "email_subject", email_subject)
        if email_tos is not None:
            pulumi.set(__self__, "email_tos", email_tos)
        if execute_security_fabric is not None:
            pulumi.set(__self__, "execute_security_fabric", execute_security_fabric)
        if forticare_email is not None:
            pulumi.set(__self__, "forticare_email", forticare_email)
        if gcp_function is not None:
            pulumi.set(__self__, "gcp_function", gcp_function)
        if gcp_function_domain is not None:
            pulumi.set(__self__, "gcp_function_domain", gcp_function_domain)
        if gcp_function_region is not None:
            pulumi.set(__self__, "gcp_function_region", gcp_function_region)
        if gcp_project is not None:
            pulumi.set(__self__, "gcp_project", gcp_project)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_body is not None:
            pulumi.set(__self__, "http_body", http_body)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if message_type is not None:
            pulumi.set(__self__, "message_type", message_type)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if minimum_interval is not None:
            pulumi.set(__self__, "minimum_interval", minimum_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output_size is not None:
            pulumi.set(__self__, "output_size", output_size)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if replacement_message is not None:
            pulumi.set(__self__, "replacement_message", replacement_message)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if sdn_connectors is not None:
            pulumi.set(__self__, "sdn_connectors", sdn_connectors)
        if security_tag is not None:
            pulumi.set(__self__, "security_tag", security_tag)
        if system_action is not None:
            pulumi.set(__self__, "system_action", system_action)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if tls_certificate is not None:
            pulumi.set(__self__, "tls_certificate", tls_certificate)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if verify_host_cert is not None:
            pulumi.set(__self__, "verify_host_cert", verify_host_cert)

    @property
    @pulumi.getter
    def accprofile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accprofile")

    @accprofile.setter
    def accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accprofile", value)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="alicloudAccessKeyId")
    def alicloud_access_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_access_key_id")

    @alicloud_access_key_id.setter
    def alicloud_access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_access_key_id", value)

    @property
    @pulumi.getter(name="alicloudAccessKeySecret")
    def alicloud_access_key_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_access_key_secret")

    @alicloud_access_key_secret.setter
    def alicloud_access_key_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_access_key_secret", value)

    @property
    @pulumi.getter(name="alicloudAccountId")
    def alicloud_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_account_id")

    @alicloud_account_id.setter
    def alicloud_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_account_id", value)

    @property
    @pulumi.getter(name="alicloudFunction")
    def alicloud_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_function")

    @alicloud_function.setter
    def alicloud_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_function", value)

    @property
    @pulumi.getter(name="alicloudFunctionAuthorization")
    def alicloud_function_authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_function_authorization")

    @alicloud_function_authorization.setter
    def alicloud_function_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_function_authorization", value)

    @property
    @pulumi.getter(name="alicloudFunctionDomain")
    def alicloud_function_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_function_domain")

    @alicloud_function_domain.setter
    def alicloud_function_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_function_domain", value)

    @property
    @pulumi.getter(name="alicloudRegion")
    def alicloud_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_region")

    @alicloud_region.setter
    def alicloud_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_region", value)

    @property
    @pulumi.getter(name="alicloudService")
    def alicloud_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_service")

    @alicloud_service.setter
    def alicloud_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_service", value)

    @property
    @pulumi.getter(name="alicloudVersion")
    def alicloud_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alicloud_version")

    @alicloud_version.setter
    def alicloud_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alicloud_version", value)

    @property
    @pulumi.getter(name="awsApiId")
    def aws_api_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_api_id")

    @aws_api_id.setter
    def aws_api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_api_id", value)

    @property
    @pulumi.getter(name="awsApiKey")
    def aws_api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_api_key")

    @aws_api_key.setter
    def aws_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_api_key", value)

    @property
    @pulumi.getter(name="awsApiPath")
    def aws_api_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_api_path")

    @aws_api_path.setter
    def aws_api_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_api_path", value)

    @property
    @pulumi.getter(name="awsApiStage")
    def aws_api_stage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_api_stage")

    @aws_api_stage.setter
    def aws_api_stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_api_stage", value)

    @property
    @pulumi.getter(name="awsDomain")
    def aws_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_domain")

    @aws_domain.setter
    def aws_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_domain", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="azureApiKey")
    def azure_api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_api_key")

    @azure_api_key.setter
    def azure_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_api_key", value)

    @property
    @pulumi.getter(name="azureApp")
    def azure_app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_app")

    @azure_app.setter
    def azure_app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_app", value)

    @property
    @pulumi.getter(name="azureDomain")
    def azure_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_domain")

    @azure_domain.setter
    def azure_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_domain", value)

    @property
    @pulumi.getter(name="azureFunction")
    def azure_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_function")

    @azure_function.setter
    def azure_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_function", value)

    @property
    @pulumi.getter(name="azureFunctionAuthorization")
    def azure_function_authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_function_authorization")

    @azure_function_authorization.setter
    def azure_function_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_function_authorization", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailBody")
    def email_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_body")

    @email_body.setter
    def email_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_body", value)

    @property
    @pulumi.getter(name="emailFrom")
    def email_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_from")

    @email_from.setter
    def email_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_from", value)

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_subject")

    @email_subject.setter
    def email_subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_subject", value)

    @property
    @pulumi.getter(name="emailTos")
    def email_tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionEmailToArgs']]]]:
        return pulumi.get(self, "email_tos")

    @email_tos.setter
    def email_tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionEmailToArgs']]]]):
        pulumi.set(self, "email_tos", value)

    @property
    @pulumi.getter(name="executeSecurityFabric")
    def execute_security_fabric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "execute_security_fabric")

    @execute_security_fabric.setter
    def execute_security_fabric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execute_security_fabric", value)

    @property
    @pulumi.getter(name="forticareEmail")
    def forticare_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticare_email")

    @forticare_email.setter
    def forticare_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticare_email", value)

    @property
    @pulumi.getter(name="gcpFunction")
    def gcp_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcp_function")

    @gcp_function.setter
    def gcp_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_function", value)

    @property
    @pulumi.getter(name="gcpFunctionDomain")
    def gcp_function_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcp_function_domain")

    @gcp_function_domain.setter
    def gcp_function_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_function_domain", value)

    @property
    @pulumi.getter(name="gcpFunctionRegion")
    def gcp_function_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcp_function_region")

    @gcp_function_region.setter
    def gcp_function_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_function_region", value)

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcp_project")

    @gcp_project.setter
    def gcp_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_project", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="httpBody")
    def http_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_body")

    @http_body.setter
    def http_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_body", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHttpHeaderArgs']]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_type")

    @message_type.setter
    def message_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_type", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="minimumInterval")
    def minimum_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minimum_interval")

    @minimum_interval.setter
    def minimum_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outputSize")
    def output_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "output_size")

    @output_size.setter
    def output_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "output_size", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="replacementMessage")
    def replacement_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_message")

    @replacement_message.setter
    def replacement_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_message", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter(name="sdnConnectors")
    def sdn_connectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionSdnConnectorArgs']]]]:
        return pulumi.get(self, "sdn_connectors")

    @sdn_connectors.setter
    def sdn_connectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationActionSdnConnectorArgs']]]]):
        pulumi.set(self, "sdn_connectors", value)

    @property
    @pulumi.getter(name="securityTag")
    def security_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_tag")

    @security_tag.setter
    def security_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_tag", value)

    @property
    @pulumi.getter(name="systemAction")
    def system_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_action")

    @system_action.setter
    def system_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_action", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_certificate")

    @tls_certificate.setter
    def tls_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_certificate", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="verifyHostCert")
    def verify_host_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verify_host_cert")

    @verify_host_cert.setter
    def verify_host_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_host_cert", value)


class SystemAutomationAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 action_type: Optional[pulumi.Input[str]] = None,
                 alicloud_access_key_id: Optional[pulumi.Input[str]] = None,
                 alicloud_access_key_secret: Optional[pulumi.Input[str]] = None,
                 alicloud_account_id: Optional[pulumi.Input[str]] = None,
                 alicloud_function: Optional[pulumi.Input[str]] = None,
                 alicloud_function_authorization: Optional[pulumi.Input[str]] = None,
                 alicloud_function_domain: Optional[pulumi.Input[str]] = None,
                 alicloud_region: Optional[pulumi.Input[str]] = None,
                 alicloud_service: Optional[pulumi.Input[str]] = None,
                 alicloud_version: Optional[pulumi.Input[str]] = None,
                 aws_api_id: Optional[pulumi.Input[str]] = None,
                 aws_api_key: Optional[pulumi.Input[str]] = None,
                 aws_api_path: Optional[pulumi.Input[str]] = None,
                 aws_api_stage: Optional[pulumi.Input[str]] = None,
                 aws_domain: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 azure_api_key: Optional[pulumi.Input[str]] = None,
                 azure_app: Optional[pulumi.Input[str]] = None,
                 azure_domain: Optional[pulumi.Input[str]] = None,
                 azure_function: Optional[pulumi.Input[str]] = None,
                 azure_function_authorization: Optional[pulumi.Input[str]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_body: Optional[pulumi.Input[str]] = None,
                 email_from: Optional[pulumi.Input[str]] = None,
                 email_subject: Optional[pulumi.Input[str]] = None,
                 email_tos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionEmailToArgs']]]]] = None,
                 execute_security_fabric: Optional[pulumi.Input[str]] = None,
                 forticare_email: Optional[pulumi.Input[str]] = None,
                 gcp_function: Optional[pulumi.Input[str]] = None,
                 gcp_function_domain: Optional[pulumi.Input[str]] = None,
                 gcp_function_region: Optional[pulumi.Input[str]] = None,
                 gcp_project: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionHeaderArgs']]]]] = None,
                 http_body: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionHttpHeaderArgs']]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 message_type: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 minimum_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_size: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 replacement_message: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 sdn_connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionSdnConnectorArgs']]]]] = None,
                 security_tag: Optional[pulumi.Input[str]] = None,
                 system_action: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 tls_certificate: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 verify_host_cert: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemAutomationAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemAutomationActionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemAutomationAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemAutomationActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemAutomationActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 action_type: Optional[pulumi.Input[str]] = None,
                 alicloud_access_key_id: Optional[pulumi.Input[str]] = None,
                 alicloud_access_key_secret: Optional[pulumi.Input[str]] = None,
                 alicloud_account_id: Optional[pulumi.Input[str]] = None,
                 alicloud_function: Optional[pulumi.Input[str]] = None,
                 alicloud_function_authorization: Optional[pulumi.Input[str]] = None,
                 alicloud_function_domain: Optional[pulumi.Input[str]] = None,
                 alicloud_region: Optional[pulumi.Input[str]] = None,
                 alicloud_service: Optional[pulumi.Input[str]] = None,
                 alicloud_version: Optional[pulumi.Input[str]] = None,
                 aws_api_id: Optional[pulumi.Input[str]] = None,
                 aws_api_key: Optional[pulumi.Input[str]] = None,
                 aws_api_path: Optional[pulumi.Input[str]] = None,
                 aws_api_stage: Optional[pulumi.Input[str]] = None,
                 aws_domain: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 azure_api_key: Optional[pulumi.Input[str]] = None,
                 azure_app: Optional[pulumi.Input[str]] = None,
                 azure_domain: Optional[pulumi.Input[str]] = None,
                 azure_function: Optional[pulumi.Input[str]] = None,
                 azure_function_authorization: Optional[pulumi.Input[str]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_body: Optional[pulumi.Input[str]] = None,
                 email_from: Optional[pulumi.Input[str]] = None,
                 email_subject: Optional[pulumi.Input[str]] = None,
                 email_tos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionEmailToArgs']]]]] = None,
                 execute_security_fabric: Optional[pulumi.Input[str]] = None,
                 forticare_email: Optional[pulumi.Input[str]] = None,
                 gcp_function: Optional[pulumi.Input[str]] = None,
                 gcp_function_domain: Optional[pulumi.Input[str]] = None,
                 gcp_function_region: Optional[pulumi.Input[str]] = None,
                 gcp_project: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionHeaderArgs']]]]] = None,
                 http_body: Optional[pulumi.Input[str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionHttpHeaderArgs']]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 message_type: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 minimum_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output_size: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 replacement_message: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 sdn_connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionSdnConnectorArgs']]]]] = None,
                 security_tag: Optional[pulumi.Input[str]] = None,
                 system_action: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 tls_certificate: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 verify_host_cert: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemAutomationActionArgs.__new__(SystemAutomationActionArgs)

            __props__.__dict__["accprofile"] = accprofile
            __props__.__dict__["action_type"] = action_type
            __props__.__dict__["alicloud_access_key_id"] = alicloud_access_key_id
            __props__.__dict__["alicloud_access_key_secret"] = None if alicloud_access_key_secret is None else pulumi.Output.secret(alicloud_access_key_secret)
            __props__.__dict__["alicloud_account_id"] = alicloud_account_id
            __props__.__dict__["alicloud_function"] = alicloud_function
            __props__.__dict__["alicloud_function_authorization"] = alicloud_function_authorization
            __props__.__dict__["alicloud_function_domain"] = alicloud_function_domain
            __props__.__dict__["alicloud_region"] = alicloud_region
            __props__.__dict__["alicloud_service"] = alicloud_service
            __props__.__dict__["alicloud_version"] = alicloud_version
            __props__.__dict__["aws_api_id"] = aws_api_id
            __props__.__dict__["aws_api_key"] = None if aws_api_key is None else pulumi.Output.secret(aws_api_key)
            __props__.__dict__["aws_api_path"] = aws_api_path
            __props__.__dict__["aws_api_stage"] = aws_api_stage
            __props__.__dict__["aws_domain"] = aws_domain
            __props__.__dict__["aws_region"] = aws_region
            __props__.__dict__["azure_api_key"] = None if azure_api_key is None else pulumi.Output.secret(azure_api_key)
            __props__.__dict__["azure_app"] = azure_app
            __props__.__dict__["azure_domain"] = azure_domain
            __props__.__dict__["azure_function"] = azure_function
            __props__.__dict__["azure_function_authorization"] = azure_function_authorization
            __props__.__dict__["delay"] = delay
            __props__.__dict__["description"] = description
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["email_body"] = email_body
            __props__.__dict__["email_from"] = email_from
            __props__.__dict__["email_subject"] = email_subject
            __props__.__dict__["email_tos"] = email_tos
            __props__.__dict__["execute_security_fabric"] = execute_security_fabric
            __props__.__dict__["forticare_email"] = forticare_email
            __props__.__dict__["gcp_function"] = gcp_function
            __props__.__dict__["gcp_function_domain"] = gcp_function_domain
            __props__.__dict__["gcp_function_region"] = gcp_function_region
            __props__.__dict__["gcp_project"] = gcp_project
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["headers"] = headers
            __props__.__dict__["http_body"] = http_body
            __props__.__dict__["http_headers"] = http_headers
            __props__.__dict__["message"] = message
            __props__.__dict__["message_type"] = message_type
            __props__.__dict__["method"] = method
            __props__.__dict__["minimum_interval"] = minimum_interval
            __props__.__dict__["name"] = name
            __props__.__dict__["output_size"] = output_size
            __props__.__dict__["port"] = port
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["replacement_message"] = replacement_message
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["required"] = required
            __props__.__dict__["script"] = script
            __props__.__dict__["sdn_connectors"] = sdn_connectors
            __props__.__dict__["security_tag"] = security_tag
            __props__.__dict__["system_action"] = system_action
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["tls_certificate"] = tls_certificate
            __props__.__dict__["uri"] = uri
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["verify_host_cert"] = verify_host_cert
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["alicloudAccessKeySecret", "awsApiKey", "azureApiKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SystemAutomationAction, __self__).__init__(
            'fortios:index/systemAutomationAction:SystemAutomationAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accprofile: Optional[pulumi.Input[str]] = None,
            action_type: Optional[pulumi.Input[str]] = None,
            alicloud_access_key_id: Optional[pulumi.Input[str]] = None,
            alicloud_access_key_secret: Optional[pulumi.Input[str]] = None,
            alicloud_account_id: Optional[pulumi.Input[str]] = None,
            alicloud_function: Optional[pulumi.Input[str]] = None,
            alicloud_function_authorization: Optional[pulumi.Input[str]] = None,
            alicloud_function_domain: Optional[pulumi.Input[str]] = None,
            alicloud_region: Optional[pulumi.Input[str]] = None,
            alicloud_service: Optional[pulumi.Input[str]] = None,
            alicloud_version: Optional[pulumi.Input[str]] = None,
            aws_api_id: Optional[pulumi.Input[str]] = None,
            aws_api_key: Optional[pulumi.Input[str]] = None,
            aws_api_path: Optional[pulumi.Input[str]] = None,
            aws_api_stage: Optional[pulumi.Input[str]] = None,
            aws_domain: Optional[pulumi.Input[str]] = None,
            aws_region: Optional[pulumi.Input[str]] = None,
            azure_api_key: Optional[pulumi.Input[str]] = None,
            azure_app: Optional[pulumi.Input[str]] = None,
            azure_domain: Optional[pulumi.Input[str]] = None,
            azure_function: Optional[pulumi.Input[str]] = None,
            azure_function_authorization: Optional[pulumi.Input[str]] = None,
            delay: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            email_body: Optional[pulumi.Input[str]] = None,
            email_from: Optional[pulumi.Input[str]] = None,
            email_subject: Optional[pulumi.Input[str]] = None,
            email_tos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionEmailToArgs']]]]] = None,
            execute_security_fabric: Optional[pulumi.Input[str]] = None,
            forticare_email: Optional[pulumi.Input[str]] = None,
            gcp_function: Optional[pulumi.Input[str]] = None,
            gcp_function_domain: Optional[pulumi.Input[str]] = None,
            gcp_function_region: Optional[pulumi.Input[str]] = None,
            gcp_project: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionHeaderArgs']]]]] = None,
            http_body: Optional[pulumi.Input[str]] = None,
            http_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionHttpHeaderArgs']]]]] = None,
            message: Optional[pulumi.Input[str]] = None,
            message_type: Optional[pulumi.Input[str]] = None,
            method: Optional[pulumi.Input[str]] = None,
            minimum_interval: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            output_size: Optional[pulumi.Input[int]] = None,
            port: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            replacement_message: Optional[pulumi.Input[str]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            required: Optional[pulumi.Input[str]] = None,
            script: Optional[pulumi.Input[str]] = None,
            sdn_connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationActionSdnConnectorArgs']]]]] = None,
            security_tag: Optional[pulumi.Input[str]] = None,
            system_action: Optional[pulumi.Input[str]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            tls_certificate: Optional[pulumi.Input[str]] = None,
            uri: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            verify_host_cert: Optional[pulumi.Input[str]] = None) -> 'SystemAutomationAction':
        """
        Get an existing SystemAutomationAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemAutomationActionState.__new__(_SystemAutomationActionState)

        __props__.__dict__["accprofile"] = accprofile
        __props__.__dict__["action_type"] = action_type
        __props__.__dict__["alicloud_access_key_id"] = alicloud_access_key_id
        __props__.__dict__["alicloud_access_key_secret"] = alicloud_access_key_secret
        __props__.__dict__["alicloud_account_id"] = alicloud_account_id
        __props__.__dict__["alicloud_function"] = alicloud_function
        __props__.__dict__["alicloud_function_authorization"] = alicloud_function_authorization
        __props__.__dict__["alicloud_function_domain"] = alicloud_function_domain
        __props__.__dict__["alicloud_region"] = alicloud_region
        __props__.__dict__["alicloud_service"] = alicloud_service
        __props__.__dict__["alicloud_version"] = alicloud_version
        __props__.__dict__["aws_api_id"] = aws_api_id
        __props__.__dict__["aws_api_key"] = aws_api_key
        __props__.__dict__["aws_api_path"] = aws_api_path
        __props__.__dict__["aws_api_stage"] = aws_api_stage
        __props__.__dict__["aws_domain"] = aws_domain
        __props__.__dict__["aws_region"] = aws_region
        __props__.__dict__["azure_api_key"] = azure_api_key
        __props__.__dict__["azure_app"] = azure_app
        __props__.__dict__["azure_domain"] = azure_domain
        __props__.__dict__["azure_function"] = azure_function
        __props__.__dict__["azure_function_authorization"] = azure_function_authorization
        __props__.__dict__["delay"] = delay
        __props__.__dict__["description"] = description
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["email_body"] = email_body
        __props__.__dict__["email_from"] = email_from
        __props__.__dict__["email_subject"] = email_subject
        __props__.__dict__["email_tos"] = email_tos
        __props__.__dict__["execute_security_fabric"] = execute_security_fabric
        __props__.__dict__["forticare_email"] = forticare_email
        __props__.__dict__["gcp_function"] = gcp_function
        __props__.__dict__["gcp_function_domain"] = gcp_function_domain
        __props__.__dict__["gcp_function_region"] = gcp_function_region
        __props__.__dict__["gcp_project"] = gcp_project
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["headers"] = headers
        __props__.__dict__["http_body"] = http_body
        __props__.__dict__["http_headers"] = http_headers
        __props__.__dict__["message"] = message
        __props__.__dict__["message_type"] = message_type
        __props__.__dict__["method"] = method
        __props__.__dict__["minimum_interval"] = minimum_interval
        __props__.__dict__["name"] = name
        __props__.__dict__["output_size"] = output_size
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["replacement_message"] = replacement_message
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["required"] = required
        __props__.__dict__["script"] = script
        __props__.__dict__["sdn_connectors"] = sdn_connectors
        __props__.__dict__["security_tag"] = security_tag
        __props__.__dict__["system_action"] = system_action
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["tls_certificate"] = tls_certificate
        __props__.__dict__["uri"] = uri
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["verify_host_cert"] = verify_host_cert
        return SystemAutomationAction(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def accprofile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "accprofile")

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="alicloudAccessKeyId")
    def alicloud_access_key_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alicloud_access_key_id")

    @property
    @pulumi.getter(name="alicloudAccessKeySecret")
    def alicloud_access_key_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "alicloud_access_key_secret")

    @property
    @pulumi.getter(name="alicloudAccountId")
    def alicloud_account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alicloud_account_id")

    @property
    @pulumi.getter(name="alicloudFunction")
    def alicloud_function(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alicloud_function")

    @property
    @pulumi.getter(name="alicloudFunctionAuthorization")
    def alicloud_function_authorization(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alicloud_function_authorization")

    @property
    @pulumi.getter(name="alicloudFunctionDomain")
    def alicloud_function_domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alicloud_function_domain")

    @property
    @pulumi.getter(name="alicloudRegion")
    def alicloud_region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alicloud_region")

    @property
    @pulumi.getter(name="alicloudService")
    def alicloud_service(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alicloud_service")

    @property
    @pulumi.getter(name="alicloudVersion")
    def alicloud_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "alicloud_version")

    @property
    @pulumi.getter(name="awsApiId")
    def aws_api_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "aws_api_id")

    @property
    @pulumi.getter(name="awsApiKey")
    def aws_api_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "aws_api_key")

    @property
    @pulumi.getter(name="awsApiPath")
    def aws_api_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "aws_api_path")

    @property
    @pulumi.getter(name="awsApiStage")
    def aws_api_stage(self) -> pulumi.Output[str]:
        return pulumi.get(self, "aws_api_stage")

    @property
    @pulumi.getter(name="awsDomain")
    def aws_domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "aws_domain")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter(name="azureApiKey")
    def azure_api_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "azure_api_key")

    @property
    @pulumi.getter(name="azureApp")
    def azure_app(self) -> pulumi.Output[str]:
        return pulumi.get(self, "azure_app")

    @property
    @pulumi.getter(name="azureDomain")
    def azure_domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "azure_domain")

    @property
    @pulumi.getter(name="azureFunction")
    def azure_function(self) -> pulumi.Output[str]:
        return pulumi.get(self, "azure_function")

    @property
    @pulumi.getter(name="azureFunctionAuthorization")
    def azure_function_authorization(self) -> pulumi.Output[str]:
        return pulumi.get(self, "azure_function_authorization")

    @property
    @pulumi.getter
    def delay(self) -> pulumi.Output[int]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailBody")
    def email_body(self) -> pulumi.Output[str]:
        return pulumi.get(self, "email_body")

    @property
    @pulumi.getter(name="emailFrom")
    def email_from(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "email_from")

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "email_subject")

    @property
    @pulumi.getter(name="emailTos")
    def email_tos(self) -> pulumi.Output[Optional[Sequence['outputs.SystemAutomationActionEmailTo']]]:
        return pulumi.get(self, "email_tos")

    @property
    @pulumi.getter(name="executeSecurityFabric")
    def execute_security_fabric(self) -> pulumi.Output[str]:
        return pulumi.get(self, "execute_security_fabric")

    @property
    @pulumi.getter(name="forticareEmail")
    def forticare_email(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forticare_email")

    @property
    @pulumi.getter(name="gcpFunction")
    def gcp_function(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gcp_function")

    @property
    @pulumi.getter(name="gcpFunctionDomain")
    def gcp_function_domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gcp_function_domain")

    @property
    @pulumi.getter(name="gcpFunctionRegion")
    def gcp_function_region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gcp_function_region")

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gcp_project")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Output[Optional[Sequence['outputs.SystemAutomationActionHeader']]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="httpBody")
    def http_body(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "http_body")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> pulumi.Output[Optional[Sequence['outputs.SystemAutomationActionHttpHeader']]]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "message_type")

    @property
    @pulumi.getter
    def method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="minimumInterval")
    def minimum_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "minimum_interval")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputSize")
    def output_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "output_size")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="replacementMessage")
    def replacement_message(self) -> pulumi.Output[str]:
        return pulumi.get(self, "replacement_message")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter
    def required(self) -> pulumi.Output[str]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def script(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "script")

    @property
    @pulumi.getter(name="sdnConnectors")
    def sdn_connectors(self) -> pulumi.Output[Optional[Sequence['outputs.SystemAutomationActionSdnConnector']]]:
        return pulumi.get(self, "sdn_connectors")

    @property
    @pulumi.getter(name="securityTag")
    def security_tag(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_tag")

    @property
    @pulumi.getter(name="systemAction")
    def system_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "system_action")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tls_certificate")

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="verifyHostCert")
    def verify_host_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "verify_host_cert")

