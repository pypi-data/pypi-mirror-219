# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemAutomationTriggerArgs', 'SystemAutomationTrigger']

@pulumi.input_type
class SystemAutomationTriggerArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event_type: Optional[pulumi.Input[str]] = None,
                 fabric_event_name: Optional[pulumi.Input[str]] = None,
                 fabric_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_name: Optional[pulumi.Input[str]] = None,
                 faz_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_tags: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerFieldArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ioc_level: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logid: Optional[pulumi.Input[int]] = None,
                 logid_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerLogidBlockArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 report_type: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 trigger_datetime: Optional[pulumi.Input[str]] = None,
                 trigger_day: Optional[pulumi.Input[int]] = None,
                 trigger_frequency: Optional[pulumi.Input[str]] = None,
                 trigger_hour: Optional[pulumi.Input[int]] = None,
                 trigger_minute: Optional[pulumi.Input[int]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 trigger_weekday: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerVdomArgs']]]] = None):
        """
        The set of arguments for constructing a SystemAutomationTrigger resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if event_type is not None:
            pulumi.set(__self__, "event_type", event_type)
        if fabric_event_name is not None:
            pulumi.set(__self__, "fabric_event_name", fabric_event_name)
        if fabric_event_severity is not None:
            pulumi.set(__self__, "fabric_event_severity", fabric_event_severity)
        if faz_event_name is not None:
            pulumi.set(__self__, "faz_event_name", faz_event_name)
        if faz_event_severity is not None:
            pulumi.set(__self__, "faz_event_severity", faz_event_severity)
        if faz_event_tags is not None:
            pulumi.set(__self__, "faz_event_tags", faz_event_tags)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ioc_level is not None:
            pulumi.set(__self__, "ioc_level", ioc_level)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if logid is not None:
            pulumi.set(__self__, "logid", logid)
        if logid_blocks is not None:
            pulumi.set(__self__, "logid_blocks", logid_blocks)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if report_type is not None:
            pulumi.set(__self__, "report_type", report_type)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if trigger_datetime is not None:
            pulumi.set(__self__, "trigger_datetime", trigger_datetime)
        if trigger_day is not None:
            pulumi.set(__self__, "trigger_day", trigger_day)
        if trigger_frequency is not None:
            pulumi.set(__self__, "trigger_frequency", trigger_frequency)
        if trigger_hour is not None:
            pulumi.set(__self__, "trigger_hour", trigger_hour)
        if trigger_minute is not None:
            pulumi.set(__self__, "trigger_minute", trigger_minute)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if trigger_weekday is not None:
            pulumi.set(__self__, "trigger_weekday", trigger_weekday)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter(name="fabricEventName")
    def fabric_event_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fabric_event_name")

    @fabric_event_name.setter
    def fabric_event_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_event_name", value)

    @property
    @pulumi.getter(name="fabricEventSeverity")
    def fabric_event_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fabric_event_severity")

    @fabric_event_severity.setter
    def fabric_event_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_event_severity", value)

    @property
    @pulumi.getter(name="fazEventName")
    def faz_event_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "faz_event_name")

    @faz_event_name.setter
    def faz_event_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_name", value)

    @property
    @pulumi.getter(name="fazEventSeverity")
    def faz_event_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "faz_event_severity")

    @faz_event_severity.setter
    def faz_event_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_severity", value)

    @property
    @pulumi.getter(name="fazEventTags")
    def faz_event_tags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "faz_event_tags")

    @faz_event_tags.setter
    def faz_event_tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_tags", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerFieldArgs']]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="iocLevel")
    def ioc_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ioc_level")

    @ioc_level.setter
    def ioc_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ioc_level", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter
    def logid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "logid")

    @logid.setter
    def logid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logid", value)

    @property
    @pulumi.getter(name="logidBlocks")
    def logid_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerLogidBlockArgs']]]]:
        return pulumi.get(self, "logid_blocks")

    @logid_blocks.setter
    def logid_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerLogidBlockArgs']]]]):
        pulumi.set(self, "logid_blocks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reportType")
    def report_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "report_type")

    @report_type.setter
    def report_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_type", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="triggerDatetime")
    def trigger_datetime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trigger_datetime")

    @trigger_datetime.setter
    def trigger_datetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_datetime", value)

    @property
    @pulumi.getter(name="triggerDay")
    def trigger_day(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trigger_day")

    @trigger_day.setter
    def trigger_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_day", value)

    @property
    @pulumi.getter(name="triggerFrequency")
    def trigger_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trigger_frequency")

    @trigger_frequency.setter
    def trigger_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_frequency", value)

    @property
    @pulumi.getter(name="triggerHour")
    def trigger_hour(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trigger_hour")

    @trigger_hour.setter
    def trigger_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_hour", value)

    @property
    @pulumi.getter(name="triggerMinute")
    def trigger_minute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trigger_minute")

    @trigger_minute.setter
    def trigger_minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_minute", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter(name="triggerWeekday")
    def trigger_weekday(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trigger_weekday")

    @trigger_weekday.setter
    def trigger_weekday(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_weekday", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerVdomArgs']]]]:
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


@pulumi.input_type
class _SystemAutomationTriggerState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event_type: Optional[pulumi.Input[str]] = None,
                 fabric_event_name: Optional[pulumi.Input[str]] = None,
                 fabric_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_name: Optional[pulumi.Input[str]] = None,
                 faz_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_tags: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerFieldArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ioc_level: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logid: Optional[pulumi.Input[int]] = None,
                 logid_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerLogidBlockArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 report_type: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 trigger_datetime: Optional[pulumi.Input[str]] = None,
                 trigger_day: Optional[pulumi.Input[int]] = None,
                 trigger_frequency: Optional[pulumi.Input[str]] = None,
                 trigger_hour: Optional[pulumi.Input[int]] = None,
                 trigger_minute: Optional[pulumi.Input[int]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 trigger_weekday: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerVdomArgs']]]] = None):
        """
        Input properties used for looking up and filtering SystemAutomationTrigger resources.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if event_type is not None:
            pulumi.set(__self__, "event_type", event_type)
        if fabric_event_name is not None:
            pulumi.set(__self__, "fabric_event_name", fabric_event_name)
        if fabric_event_severity is not None:
            pulumi.set(__self__, "fabric_event_severity", fabric_event_severity)
        if faz_event_name is not None:
            pulumi.set(__self__, "faz_event_name", faz_event_name)
        if faz_event_severity is not None:
            pulumi.set(__self__, "faz_event_severity", faz_event_severity)
        if faz_event_tags is not None:
            pulumi.set(__self__, "faz_event_tags", faz_event_tags)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ioc_level is not None:
            pulumi.set(__self__, "ioc_level", ioc_level)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if logid is not None:
            pulumi.set(__self__, "logid", logid)
        if logid_blocks is not None:
            pulumi.set(__self__, "logid_blocks", logid_blocks)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if report_type is not None:
            pulumi.set(__self__, "report_type", report_type)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if trigger_datetime is not None:
            pulumi.set(__self__, "trigger_datetime", trigger_datetime)
        if trigger_day is not None:
            pulumi.set(__self__, "trigger_day", trigger_day)
        if trigger_frequency is not None:
            pulumi.set(__self__, "trigger_frequency", trigger_frequency)
        if trigger_hour is not None:
            pulumi.set(__self__, "trigger_hour", trigger_hour)
        if trigger_minute is not None:
            pulumi.set(__self__, "trigger_minute", trigger_minute)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if trigger_weekday is not None:
            pulumi.set(__self__, "trigger_weekday", trigger_weekday)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter(name="fabricEventName")
    def fabric_event_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fabric_event_name")

    @fabric_event_name.setter
    def fabric_event_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_event_name", value)

    @property
    @pulumi.getter(name="fabricEventSeverity")
    def fabric_event_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fabric_event_severity")

    @fabric_event_severity.setter
    def fabric_event_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_event_severity", value)

    @property
    @pulumi.getter(name="fazEventName")
    def faz_event_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "faz_event_name")

    @faz_event_name.setter
    def faz_event_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_name", value)

    @property
    @pulumi.getter(name="fazEventSeverity")
    def faz_event_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "faz_event_severity")

    @faz_event_severity.setter
    def faz_event_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_severity", value)

    @property
    @pulumi.getter(name="fazEventTags")
    def faz_event_tags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "faz_event_tags")

    @faz_event_tags.setter
    def faz_event_tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_tags", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerFieldArgs']]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="iocLevel")
    def ioc_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ioc_level")

    @ioc_level.setter
    def ioc_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ioc_level", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter
    def logid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "logid")

    @logid.setter
    def logid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logid", value)

    @property
    @pulumi.getter(name="logidBlocks")
    def logid_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerLogidBlockArgs']]]]:
        return pulumi.get(self, "logid_blocks")

    @logid_blocks.setter
    def logid_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerLogidBlockArgs']]]]):
        pulumi.set(self, "logid_blocks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reportType")
    def report_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "report_type")

    @report_type.setter
    def report_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_type", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="triggerDatetime")
    def trigger_datetime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trigger_datetime")

    @trigger_datetime.setter
    def trigger_datetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_datetime", value)

    @property
    @pulumi.getter(name="triggerDay")
    def trigger_day(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trigger_day")

    @trigger_day.setter
    def trigger_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_day", value)

    @property
    @pulumi.getter(name="triggerFrequency")
    def trigger_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trigger_frequency")

    @trigger_frequency.setter
    def trigger_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_frequency", value)

    @property
    @pulumi.getter(name="triggerHour")
    def trigger_hour(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trigger_hour")

    @trigger_hour.setter
    def trigger_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_hour", value)

    @property
    @pulumi.getter(name="triggerMinute")
    def trigger_minute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trigger_minute")

    @trigger_minute.setter
    def trigger_minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_minute", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter(name="triggerWeekday")
    def trigger_weekday(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trigger_weekday")

    @trigger_weekday.setter
    def trigger_weekday(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_weekday", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerVdomArgs']]]]:
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAutomationTriggerVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


class SystemAutomationTrigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event_type: Optional[pulumi.Input[str]] = None,
                 fabric_event_name: Optional[pulumi.Input[str]] = None,
                 fabric_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_name: Optional[pulumi.Input[str]] = None,
                 faz_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_tags: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationTriggerFieldArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ioc_level: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logid: Optional[pulumi.Input[int]] = None,
                 logid_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationTriggerLogidBlockArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 report_type: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 trigger_datetime: Optional[pulumi.Input[str]] = None,
                 trigger_day: Optional[pulumi.Input[int]] = None,
                 trigger_frequency: Optional[pulumi.Input[str]] = None,
                 trigger_hour: Optional[pulumi.Input[int]] = None,
                 trigger_minute: Optional[pulumi.Input[int]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 trigger_weekday: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationTriggerVdomArgs']]]]] = None,
                 __props__=None):
        """
        Create a SystemAutomationTrigger resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemAutomationTriggerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemAutomationTrigger resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemAutomationTriggerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemAutomationTriggerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event_type: Optional[pulumi.Input[str]] = None,
                 fabric_event_name: Optional[pulumi.Input[str]] = None,
                 fabric_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_name: Optional[pulumi.Input[str]] = None,
                 faz_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_tags: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationTriggerFieldArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ioc_level: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logid: Optional[pulumi.Input[int]] = None,
                 logid_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationTriggerLogidBlockArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 report_type: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 trigger_datetime: Optional[pulumi.Input[str]] = None,
                 trigger_day: Optional[pulumi.Input[int]] = None,
                 trigger_frequency: Optional[pulumi.Input[str]] = None,
                 trigger_hour: Optional[pulumi.Input[int]] = None,
                 trigger_minute: Optional[pulumi.Input[int]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 trigger_weekday: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationTriggerVdomArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemAutomationTriggerArgs.__new__(SystemAutomationTriggerArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["event_type"] = event_type
            __props__.__dict__["fabric_event_name"] = fabric_event_name
            __props__.__dict__["fabric_event_severity"] = fabric_event_severity
            __props__.__dict__["faz_event_name"] = faz_event_name
            __props__.__dict__["faz_event_severity"] = faz_event_severity
            __props__.__dict__["faz_event_tags"] = faz_event_tags
            __props__.__dict__["fields"] = fields
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ioc_level"] = ioc_level
            __props__.__dict__["license_type"] = license_type
            __props__.__dict__["logid"] = logid
            __props__.__dict__["logid_blocks"] = logid_blocks
            __props__.__dict__["name"] = name
            __props__.__dict__["report_type"] = report_type
            __props__.__dict__["serial"] = serial
            __props__.__dict__["trigger_datetime"] = trigger_datetime
            __props__.__dict__["trigger_day"] = trigger_day
            __props__.__dict__["trigger_frequency"] = trigger_frequency
            __props__.__dict__["trigger_hour"] = trigger_hour
            __props__.__dict__["trigger_minute"] = trigger_minute
            __props__.__dict__["trigger_type"] = trigger_type
            __props__.__dict__["trigger_weekday"] = trigger_weekday
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vdoms"] = vdoms
        super(SystemAutomationTrigger, __self__).__init__(
            'fortios:index/systemAutomationTrigger:SystemAutomationTrigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            event_type: Optional[pulumi.Input[str]] = None,
            fabric_event_name: Optional[pulumi.Input[str]] = None,
            fabric_event_severity: Optional[pulumi.Input[str]] = None,
            faz_event_name: Optional[pulumi.Input[str]] = None,
            faz_event_severity: Optional[pulumi.Input[str]] = None,
            faz_event_tags: Optional[pulumi.Input[str]] = None,
            fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationTriggerFieldArgs']]]]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ioc_level: Optional[pulumi.Input[str]] = None,
            license_type: Optional[pulumi.Input[str]] = None,
            logid: Optional[pulumi.Input[int]] = None,
            logid_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationTriggerLogidBlockArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            report_type: Optional[pulumi.Input[str]] = None,
            serial: Optional[pulumi.Input[str]] = None,
            trigger_datetime: Optional[pulumi.Input[str]] = None,
            trigger_day: Optional[pulumi.Input[int]] = None,
            trigger_frequency: Optional[pulumi.Input[str]] = None,
            trigger_hour: Optional[pulumi.Input[int]] = None,
            trigger_minute: Optional[pulumi.Input[int]] = None,
            trigger_type: Optional[pulumi.Input[str]] = None,
            trigger_weekday: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemAutomationTriggerVdomArgs']]]]] = None) -> 'SystemAutomationTrigger':
        """
        Get an existing SystemAutomationTrigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemAutomationTriggerState.__new__(_SystemAutomationTriggerState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["event_type"] = event_type
        __props__.__dict__["fabric_event_name"] = fabric_event_name
        __props__.__dict__["fabric_event_severity"] = fabric_event_severity
        __props__.__dict__["faz_event_name"] = faz_event_name
        __props__.__dict__["faz_event_severity"] = faz_event_severity
        __props__.__dict__["faz_event_tags"] = faz_event_tags
        __props__.__dict__["fields"] = fields
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ioc_level"] = ioc_level
        __props__.__dict__["license_type"] = license_type
        __props__.__dict__["logid"] = logid
        __props__.__dict__["logid_blocks"] = logid_blocks
        __props__.__dict__["name"] = name
        __props__.__dict__["report_type"] = report_type
        __props__.__dict__["serial"] = serial
        __props__.__dict__["trigger_datetime"] = trigger_datetime
        __props__.__dict__["trigger_day"] = trigger_day
        __props__.__dict__["trigger_frequency"] = trigger_frequency
        __props__.__dict__["trigger_hour"] = trigger_hour
        __props__.__dict__["trigger_minute"] = trigger_minute
        __props__.__dict__["trigger_type"] = trigger_type
        __props__.__dict__["trigger_weekday"] = trigger_weekday
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vdoms"] = vdoms
        return SystemAutomationTrigger(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter(name="fabricEventName")
    def fabric_event_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fabric_event_name")

    @property
    @pulumi.getter(name="fabricEventSeverity")
    def fabric_event_severity(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fabric_event_severity")

    @property
    @pulumi.getter(name="fazEventName")
    def faz_event_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "faz_event_name")

    @property
    @pulumi.getter(name="fazEventSeverity")
    def faz_event_severity(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "faz_event_severity")

    @property
    @pulumi.getter(name="fazEventTags")
    def faz_event_tags(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "faz_event_tags")

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Output[Optional[Sequence['outputs.SystemAutomationTriggerField']]]:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="iocLevel")
    def ioc_level(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ioc_level")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter
    def logid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "logid")

    @property
    @pulumi.getter(name="logidBlocks")
    def logid_blocks(self) -> pulumi.Output[Optional[Sequence['outputs.SystemAutomationTriggerLogidBlock']]]:
        return pulumi.get(self, "logid_blocks")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reportType")
    def report_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "report_type")

    @property
    @pulumi.getter
    def serial(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="triggerDatetime")
    def trigger_datetime(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trigger_datetime")

    @property
    @pulumi.getter(name="triggerDay")
    def trigger_day(self) -> pulumi.Output[int]:
        return pulumi.get(self, "trigger_day")

    @property
    @pulumi.getter(name="triggerFrequency")
    def trigger_frequency(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trigger_frequency")

    @property
    @pulumi.getter(name="triggerHour")
    def trigger_hour(self) -> pulumi.Output[int]:
        return pulumi.get(self, "trigger_hour")

    @property
    @pulumi.getter(name="triggerMinute")
    def trigger_minute(self) -> pulumi.Output[int]:
        return pulumi.get(self, "trigger_minute")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trigger_type")

    @property
    @pulumi.getter(name="triggerWeekday")
    def trigger_weekday(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trigger_weekday")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vdoms(self) -> pulumi.Output[Optional[Sequence['outputs.SystemAutomationTriggerVdom']]]:
        return pulumi.get(self, "vdoms")

