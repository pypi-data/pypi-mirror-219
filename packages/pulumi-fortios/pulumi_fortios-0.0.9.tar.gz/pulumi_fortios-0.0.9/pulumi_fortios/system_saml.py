# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemSamlArgs', 'SystemSaml']

@pulumi.input_type
class SystemSamlArgs:
    def __init__(__self__, *,
                 binding_protocol: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 default_login_page: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 life: Optional[pulumi.Input[int]] = None,
                 portal_url: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 service_providers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderArgs']]]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemSaml resource.
        """
        if binding_protocol is not None:
            pulumi.set(__self__, "binding_protocol", binding_protocol)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if default_login_page is not None:
            pulumi.set(__self__, "default_login_page", default_login_page)
        if default_profile is not None:
            pulumi.set(__self__, "default_profile", default_profile)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if idp_cert is not None:
            pulumi.set(__self__, "idp_cert", idp_cert)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url is not None:
            pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if life is not None:
            pulumi.set(__self__, "life", life)
        if portal_url is not None:
            pulumi.set(__self__, "portal_url", portal_url)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if server_address is not None:
            pulumi.set(__self__, "server_address", server_address)
        if service_providers is not None:
            pulumi.set(__self__, "service_providers", service_providers)
        if single_logout_url is not None:
            pulumi.set(__self__, "single_logout_url", single_logout_url)
        if single_sign_on_url is not None:
            pulumi.set(__self__, "single_sign_on_url", single_sign_on_url)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bindingProtocol")
    def binding_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "binding_protocol")

    @binding_protocol.setter
    def binding_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binding_protocol", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="defaultLoginPage")
    def default_login_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_login_page")

    @default_login_page.setter
    def default_login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_login_page", value)

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_profile")

    @default_profile.setter
    def default_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_profile", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_cert")

    @idp_cert.setter
    def idp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_cert", value)

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_entity_id")

    @idp_entity_id.setter
    def idp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_entity_id", value)

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_single_logout_url")

    @idp_single_logout_url.setter
    def idp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_logout_url", value)

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_single_sign_on_url")

    @idp_single_sign_on_url.setter
    def idp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_sign_on_url", value)

    @property
    @pulumi.getter
    def life(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "life")

    @life.setter
    def life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "life", value)

    @property
    @pulumi.getter(name="portalUrl")
    def portal_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_url")

    @portal_url.setter
    def portal_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_url", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_address")

    @server_address.setter
    def server_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_address", value)

    @property
    @pulumi.getter(name="serviceProviders")
    def service_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderArgs']]]]:
        return pulumi.get(self, "service_providers")

    @service_providers.setter
    def service_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderArgs']]]]):
        pulumi.set(self, "service_providers", value)

    @property
    @pulumi.getter(name="singleLogoutUrl")
    def single_logout_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "single_logout_url")

    @single_logout_url.setter
    def single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_logout_url", value)

    @property
    @pulumi.getter(name="singleSignOnUrl")
    def single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "single_sign_on_url")

    @single_sign_on_url.setter
    def single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_sign_on_url", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerance", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemSamlState:
    def __init__(__self__, *,
                 binding_protocol: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 default_login_page: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 life: Optional[pulumi.Input[int]] = None,
                 portal_url: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 service_providers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderArgs']]]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemSaml resources.
        """
        if binding_protocol is not None:
            pulumi.set(__self__, "binding_protocol", binding_protocol)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if default_login_page is not None:
            pulumi.set(__self__, "default_login_page", default_login_page)
        if default_profile is not None:
            pulumi.set(__self__, "default_profile", default_profile)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if idp_cert is not None:
            pulumi.set(__self__, "idp_cert", idp_cert)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url is not None:
            pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if life is not None:
            pulumi.set(__self__, "life", life)
        if portal_url is not None:
            pulumi.set(__self__, "portal_url", portal_url)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if server_address is not None:
            pulumi.set(__self__, "server_address", server_address)
        if service_providers is not None:
            pulumi.set(__self__, "service_providers", service_providers)
        if single_logout_url is not None:
            pulumi.set(__self__, "single_logout_url", single_logout_url)
        if single_sign_on_url is not None:
            pulumi.set(__self__, "single_sign_on_url", single_sign_on_url)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bindingProtocol")
    def binding_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "binding_protocol")

    @binding_protocol.setter
    def binding_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binding_protocol", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="defaultLoginPage")
    def default_login_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_login_page")

    @default_login_page.setter
    def default_login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_login_page", value)

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_profile")

    @default_profile.setter
    def default_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_profile", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_cert")

    @idp_cert.setter
    def idp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_cert", value)

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_entity_id")

    @idp_entity_id.setter
    def idp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_entity_id", value)

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_single_logout_url")

    @idp_single_logout_url.setter
    def idp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_logout_url", value)

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_single_sign_on_url")

    @idp_single_sign_on_url.setter
    def idp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_sign_on_url", value)

    @property
    @pulumi.getter
    def life(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "life")

    @life.setter
    def life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "life", value)

    @property
    @pulumi.getter(name="portalUrl")
    def portal_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_url")

    @portal_url.setter
    def portal_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_url", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_address")

    @server_address.setter
    def server_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_address", value)

    @property
    @pulumi.getter(name="serviceProviders")
    def service_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderArgs']]]]:
        return pulumi.get(self, "service_providers")

    @service_providers.setter
    def service_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderArgs']]]]):
        pulumi.set(self, "service_providers", value)

    @property
    @pulumi.getter(name="singleLogoutUrl")
    def single_logout_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "single_logout_url")

    @single_logout_url.setter
    def single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_logout_url", value)

    @property
    @pulumi.getter(name="singleSignOnUrl")
    def single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "single_sign_on_url")

    @single_sign_on_url.setter
    def single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_sign_on_url", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerance", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemSaml(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 binding_protocol: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 default_login_page: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 life: Optional[pulumi.Input[int]] = None,
                 portal_url: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 service_providers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSamlServiceProviderArgs']]]]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemSaml resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemSamlArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemSaml resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemSamlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemSamlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 binding_protocol: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 default_login_page: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 life: Optional[pulumi.Input[int]] = None,
                 portal_url: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 service_providers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSamlServiceProviderArgs']]]]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemSamlArgs.__new__(SystemSamlArgs)

            __props__.__dict__["binding_protocol"] = binding_protocol
            __props__.__dict__["cert"] = cert
            __props__.__dict__["default_login_page"] = default_login_page
            __props__.__dict__["default_profile"] = default_profile
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["entity_id"] = entity_id
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["idp_cert"] = idp_cert
            __props__.__dict__["idp_entity_id"] = idp_entity_id
            __props__.__dict__["idp_single_logout_url"] = idp_single_logout_url
            __props__.__dict__["idp_single_sign_on_url"] = idp_single_sign_on_url
            __props__.__dict__["life"] = life
            __props__.__dict__["portal_url"] = portal_url
            __props__.__dict__["role"] = role
            __props__.__dict__["server_address"] = server_address
            __props__.__dict__["service_providers"] = service_providers
            __props__.__dict__["single_logout_url"] = single_logout_url
            __props__.__dict__["single_sign_on_url"] = single_sign_on_url
            __props__.__dict__["status"] = status
            __props__.__dict__["tolerance"] = tolerance
            __props__.__dict__["vdomparam"] = vdomparam
        super(SystemSaml, __self__).__init__(
            'fortios:index/systemSaml:SystemSaml',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            binding_protocol: Optional[pulumi.Input[str]] = None,
            cert: Optional[pulumi.Input[str]] = None,
            default_login_page: Optional[pulumi.Input[str]] = None,
            default_profile: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            entity_id: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            idp_cert: Optional[pulumi.Input[str]] = None,
            idp_entity_id: Optional[pulumi.Input[str]] = None,
            idp_single_logout_url: Optional[pulumi.Input[str]] = None,
            idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
            life: Optional[pulumi.Input[int]] = None,
            portal_url: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            server_address: Optional[pulumi.Input[str]] = None,
            service_providers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSamlServiceProviderArgs']]]]] = None,
            single_logout_url: Optional[pulumi.Input[str]] = None,
            single_sign_on_url: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tolerance: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemSaml':
        """
        Get an existing SystemSaml resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemSamlState.__new__(_SystemSamlState)

        __props__.__dict__["binding_protocol"] = binding_protocol
        __props__.__dict__["cert"] = cert
        __props__.__dict__["default_login_page"] = default_login_page
        __props__.__dict__["default_profile"] = default_profile
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["entity_id"] = entity_id
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["idp_cert"] = idp_cert
        __props__.__dict__["idp_entity_id"] = idp_entity_id
        __props__.__dict__["idp_single_logout_url"] = idp_single_logout_url
        __props__.__dict__["idp_single_sign_on_url"] = idp_single_sign_on_url
        __props__.__dict__["life"] = life
        __props__.__dict__["portal_url"] = portal_url
        __props__.__dict__["role"] = role
        __props__.__dict__["server_address"] = server_address
        __props__.__dict__["service_providers"] = service_providers
        __props__.__dict__["single_logout_url"] = single_logout_url
        __props__.__dict__["single_sign_on_url"] = single_sign_on_url
        __props__.__dict__["status"] = status
        __props__.__dict__["tolerance"] = tolerance
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemSaml(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bindingProtocol")
    def binding_protocol(self) -> pulumi.Output[str]:
        return pulumi.get(self, "binding_protocol")

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="defaultLoginPage")
    def default_login_page(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_login_page")

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_profile")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "idp_cert")

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "idp_entity_id")

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "idp_single_logout_url")

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "idp_single_sign_on_url")

    @property
    @pulumi.getter
    def life(self) -> pulumi.Output[int]:
        return pulumi.get(self, "life")

    @property
    @pulumi.getter(name="portalUrl")
    def portal_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "portal_url")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="serviceProviders")
    def service_providers(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSamlServiceProvider']]]:
        return pulumi.get(self, "service_providers")

    @property
    @pulumi.getter(name="singleLogoutUrl")
    def single_logout_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "single_logout_url")

    @property
    @pulumi.getter(name="singleSignOnUrl")
    def single_sign_on_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "single_sign_on_url")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tolerance(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tolerance")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

