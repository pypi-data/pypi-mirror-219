# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSystemFortisandboxResult',
    'AwaitableGetSystemFortisandboxResult',
    'get_system_fortisandbox',
    'get_system_fortisandbox_output',
]

@pulumi.output_type
class GetSystemFortisandboxResult:
    """
    A collection of values returned by GetSystemFortisandbox.
    """
    def __init__(__self__, email=None, enc_algorithm=None, forticloud=None, id=None, inline_scan=None, interface=None, interface_select_method=None, server=None, source_ip=None, ssl_min_proto_version=None, status=None, vdomparam=None):
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if enc_algorithm and not isinstance(enc_algorithm, str):
            raise TypeError("Expected argument 'enc_algorithm' to be a str")
        pulumi.set(__self__, "enc_algorithm", enc_algorithm)
        if forticloud and not isinstance(forticloud, str):
            raise TypeError("Expected argument 'forticloud' to be a str")
        pulumi.set(__self__, "forticloud", forticloud)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inline_scan and not isinstance(inline_scan, str):
            raise TypeError("Expected argument 'inline_scan' to be a str")
        pulumi.set(__self__, "inline_scan", inline_scan)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if interface_select_method and not isinstance(interface_select_method, str):
            raise TypeError("Expected argument 'interface_select_method' to be a str")
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        if server and not isinstance(server, str):
            raise TypeError("Expected argument 'server' to be a str")
        pulumi.set(__self__, "server", server)
        if source_ip and not isinstance(source_ip, str):
            raise TypeError("Expected argument 'source_ip' to be a str")
        pulumi.set(__self__, "source_ip", source_ip)
        if ssl_min_proto_version and not isinstance(ssl_min_proto_version, str):
            raise TypeError("Expected argument 'ssl_min_proto_version' to be a str")
        pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="encAlgorithm")
    def enc_algorithm(self) -> str:
        return pulumi.get(self, "enc_algorithm")

    @property
    @pulumi.getter
    def forticloud(self) -> str:
        return pulumi.get(self, "forticloud")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inlineScan")
    def inline_scan(self) -> str:
        return pulumi.get(self, "inline_scan")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> str:
        return pulumi.get(self, "ssl_min_proto_version")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetSystemFortisandboxResult(GetSystemFortisandboxResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemFortisandboxResult(
            email=self.email,
            enc_algorithm=self.enc_algorithm,
            forticloud=self.forticloud,
            id=self.id,
            inline_scan=self.inline_scan,
            interface=self.interface,
            interface_select_method=self.interface_select_method,
            server=self.server,
            source_ip=self.source_ip,
            ssl_min_proto_version=self.ssl_min_proto_version,
            status=self.status,
            vdomparam=self.vdomparam)


def get_system_fortisandbox(vdomparam: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemFortisandboxResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemFortisandbox:GetSystemFortisandbox', __args__, opts=opts, typ=GetSystemFortisandboxResult).value

    return AwaitableGetSystemFortisandboxResult(
        email=pulumi.get(__ret__, 'email'),
        enc_algorithm=pulumi.get(__ret__, 'enc_algorithm'),
        forticloud=pulumi.get(__ret__, 'forticloud'),
        id=pulumi.get(__ret__, 'id'),
        inline_scan=pulumi.get(__ret__, 'inline_scan'),
        interface=pulumi.get(__ret__, 'interface'),
        interface_select_method=pulumi.get(__ret__, 'interface_select_method'),
        server=pulumi.get(__ret__, 'server'),
        source_ip=pulumi.get(__ret__, 'source_ip'),
        ssl_min_proto_version=pulumi.get(__ret__, 'ssl_min_proto_version'),
        status=pulumi.get(__ret__, 'status'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_system_fortisandbox)
def get_system_fortisandbox_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemFortisandboxResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
