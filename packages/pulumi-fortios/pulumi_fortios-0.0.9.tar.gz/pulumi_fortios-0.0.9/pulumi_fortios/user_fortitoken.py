# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['UserFortitokenArgs', 'UserFortitoken']

@pulumi.input_type
class UserFortitokenArgs:
    def __init__(__self__, *,
                 activation_code: Optional[pulumi.Input[str]] = None,
                 activation_expire: Optional[pulumi.Input[int]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 os_ver: Optional[pulumi.Input[str]] = None,
                 reg_id: Optional[pulumi.Input[str]] = None,
                 seed: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserFortitoken resource.
        """
        if activation_code is not None:
            pulumi.set(__self__, "activation_code", activation_code)
        if activation_expire is not None:
            pulumi.set(__self__, "activation_expire", activation_expire)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if os_ver is not None:
            pulumi.set(__self__, "os_ver", os_ver)
        if reg_id is not None:
            pulumi.set(__self__, "reg_id", reg_id)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="activationCode")
    def activation_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activation_code")

    @activation_code.setter
    def activation_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activation_code", value)

    @property
    @pulumi.getter(name="activationExpire")
    def activation_expire(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "activation_expire")

    @activation_expire.setter
    def activation_expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "activation_expire", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter(name="osVer")
    def os_ver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_ver")

    @os_ver.setter
    def os_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_ver", value)

    @property
    @pulumi.getter(name="regId")
    def reg_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reg_id")

    @reg_id.setter
    def reg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reg_id", value)

    @property
    @pulumi.getter
    def seed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "seed")

    @seed.setter
    def seed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seed", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _UserFortitokenState:
    def __init__(__self__, *,
                 activation_code: Optional[pulumi.Input[str]] = None,
                 activation_expire: Optional[pulumi.Input[int]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 os_ver: Optional[pulumi.Input[str]] = None,
                 reg_id: Optional[pulumi.Input[str]] = None,
                 seed: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserFortitoken resources.
        """
        if activation_code is not None:
            pulumi.set(__self__, "activation_code", activation_code)
        if activation_expire is not None:
            pulumi.set(__self__, "activation_expire", activation_expire)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if os_ver is not None:
            pulumi.set(__self__, "os_ver", os_ver)
        if reg_id is not None:
            pulumi.set(__self__, "reg_id", reg_id)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="activationCode")
    def activation_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activation_code")

    @activation_code.setter
    def activation_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activation_code", value)

    @property
    @pulumi.getter(name="activationExpire")
    def activation_expire(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "activation_expire")

    @activation_expire.setter
    def activation_expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "activation_expire", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter(name="osVer")
    def os_ver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_ver")

    @os_ver.setter
    def os_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_ver", value)

    @property
    @pulumi.getter(name="regId")
    def reg_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reg_id")

    @reg_id.setter
    def reg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reg_id", value)

    @property
    @pulumi.getter
    def seed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "seed")

    @seed.setter
    def seed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seed", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class UserFortitoken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activation_code: Optional[pulumi.Input[str]] = None,
                 activation_expire: Optional[pulumi.Input[int]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 os_ver: Optional[pulumi.Input[str]] = None,
                 reg_id: Optional[pulumi.Input[str]] = None,
                 seed: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a UserFortitoken resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UserFortitokenArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UserFortitoken resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserFortitokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserFortitokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activation_code: Optional[pulumi.Input[str]] = None,
                 activation_expire: Optional[pulumi.Input[int]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 os_ver: Optional[pulumi.Input[str]] = None,
                 reg_id: Optional[pulumi.Input[str]] = None,
                 seed: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserFortitokenArgs.__new__(UserFortitokenArgs)

            __props__.__dict__["activation_code"] = activation_code
            __props__.__dict__["activation_expire"] = activation_expire
            __props__.__dict__["comments"] = comments
            __props__.__dict__["license"] = license
            __props__.__dict__["os_ver"] = os_ver
            __props__.__dict__["reg_id"] = reg_id
            __props__.__dict__["seed"] = seed
            __props__.__dict__["serial_number"] = serial_number
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
        super(UserFortitoken, __self__).__init__(
            'fortios:index/userFortitoken:UserFortitoken',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activation_code: Optional[pulumi.Input[str]] = None,
            activation_expire: Optional[pulumi.Input[int]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            license: Optional[pulumi.Input[str]] = None,
            os_ver: Optional[pulumi.Input[str]] = None,
            reg_id: Optional[pulumi.Input[str]] = None,
            seed: Optional[pulumi.Input[str]] = None,
            serial_number: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'UserFortitoken':
        """
        Get an existing UserFortitoken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserFortitokenState.__new__(_UserFortitokenState)

        __props__.__dict__["activation_code"] = activation_code
        __props__.__dict__["activation_expire"] = activation_expire
        __props__.__dict__["comments"] = comments
        __props__.__dict__["license"] = license
        __props__.__dict__["os_ver"] = os_ver
        __props__.__dict__["reg_id"] = reg_id
        __props__.__dict__["seed"] = seed
        __props__.__dict__["serial_number"] = serial_number
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        return UserFortitoken(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activationCode")
    def activation_code(self) -> pulumi.Output[str]:
        return pulumi.get(self, "activation_code")

    @property
    @pulumi.getter(name="activationExpire")
    def activation_expire(self) -> pulumi.Output[int]:
        return pulumi.get(self, "activation_expire")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def license(self) -> pulumi.Output[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter(name="osVer")
    def os_ver(self) -> pulumi.Output[str]:
        return pulumi.get(self, "os_ver")

    @property
    @pulumi.getter(name="regId")
    def reg_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "reg_id")

    @property
    @pulumi.getter
    def seed(self) -> pulumi.Output[str]:
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

