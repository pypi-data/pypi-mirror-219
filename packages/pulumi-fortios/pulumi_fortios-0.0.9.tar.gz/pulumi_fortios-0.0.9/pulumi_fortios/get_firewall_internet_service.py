# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetFirewallInternetServiceResult',
    'AwaitableGetFirewallInternetServiceResult',
    'get_firewall_internet_service',
    'get_firewall_internet_service_output',
]

@pulumi.output_type
class GetFirewallInternetServiceResult:
    """
    A collection of values returned by GetFirewallInternetService.
    """
    def __init__(__self__, database=None, direction=None, extra_ip6_range_number=None, extra_ip_range_number=None, fosid=None, icon_id=None, id=None, ip6_range_number=None, ip_number=None, ip_range_number=None, name=None, obsolete=None, reputation=None, singularity=None, sld_id=None, vdomparam=None):
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if extra_ip6_range_number and not isinstance(extra_ip6_range_number, int):
            raise TypeError("Expected argument 'extra_ip6_range_number' to be a int")
        pulumi.set(__self__, "extra_ip6_range_number", extra_ip6_range_number)
        if extra_ip_range_number and not isinstance(extra_ip_range_number, int):
            raise TypeError("Expected argument 'extra_ip_range_number' to be a int")
        pulumi.set(__self__, "extra_ip_range_number", extra_ip_range_number)
        if fosid and not isinstance(fosid, int):
            raise TypeError("Expected argument 'fosid' to be a int")
        pulumi.set(__self__, "fosid", fosid)
        if icon_id and not isinstance(icon_id, int):
            raise TypeError("Expected argument 'icon_id' to be a int")
        pulumi.set(__self__, "icon_id", icon_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip6_range_number and not isinstance(ip6_range_number, int):
            raise TypeError("Expected argument 'ip6_range_number' to be a int")
        pulumi.set(__self__, "ip6_range_number", ip6_range_number)
        if ip_number and not isinstance(ip_number, int):
            raise TypeError("Expected argument 'ip_number' to be a int")
        pulumi.set(__self__, "ip_number", ip_number)
        if ip_range_number and not isinstance(ip_range_number, int):
            raise TypeError("Expected argument 'ip_range_number' to be a int")
        pulumi.set(__self__, "ip_range_number", ip_range_number)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if obsolete and not isinstance(obsolete, int):
            raise TypeError("Expected argument 'obsolete' to be a int")
        pulumi.set(__self__, "obsolete", obsolete)
        if reputation and not isinstance(reputation, int):
            raise TypeError("Expected argument 'reputation' to be a int")
        pulumi.set(__self__, "reputation", reputation)
        if singularity and not isinstance(singularity, int):
            raise TypeError("Expected argument 'singularity' to be a int")
        pulumi.set(__self__, "singularity", singularity)
        if sld_id and not isinstance(sld_id, int):
            raise TypeError("Expected argument 'sld_id' to be a int")
        pulumi.set(__self__, "sld_id", sld_id)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="extraIp6RangeNumber")
    def extra_ip6_range_number(self) -> int:
        return pulumi.get(self, "extra_ip6_range_number")

    @property
    @pulumi.getter(name="extraIpRangeNumber")
    def extra_ip_range_number(self) -> int:
        return pulumi.get(self, "extra_ip_range_number")

    @property
    @pulumi.getter
    def fosid(self) -> int:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="iconId")
    def icon_id(self) -> int:
        return pulumi.get(self, "icon_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip6RangeNumber")
    def ip6_range_number(self) -> int:
        return pulumi.get(self, "ip6_range_number")

    @property
    @pulumi.getter(name="ipNumber")
    def ip_number(self) -> int:
        return pulumi.get(self, "ip_number")

    @property
    @pulumi.getter(name="ipRangeNumber")
    def ip_range_number(self) -> int:
        return pulumi.get(self, "ip_range_number")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def obsolete(self) -> int:
        return pulumi.get(self, "obsolete")

    @property
    @pulumi.getter
    def reputation(self) -> int:
        return pulumi.get(self, "reputation")

    @property
    @pulumi.getter
    def singularity(self) -> int:
        return pulumi.get(self, "singularity")

    @property
    @pulumi.getter(name="sldId")
    def sld_id(self) -> int:
        return pulumi.get(self, "sld_id")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetFirewallInternetServiceResult(GetFirewallInternetServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallInternetServiceResult(
            database=self.database,
            direction=self.direction,
            extra_ip6_range_number=self.extra_ip6_range_number,
            extra_ip_range_number=self.extra_ip_range_number,
            fosid=self.fosid,
            icon_id=self.icon_id,
            id=self.id,
            ip6_range_number=self.ip6_range_number,
            ip_number=self.ip_number,
            ip_range_number=self.ip_range_number,
            name=self.name,
            obsolete=self.obsolete,
            reputation=self.reputation,
            singularity=self.singularity,
            sld_id=self.sld_id,
            vdomparam=self.vdomparam)


def get_firewall_internet_service(fosid: Optional[int] = None,
                                  vdomparam: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallInternetServiceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fosid'] = fosid
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getFirewallInternetService:GetFirewallInternetService', __args__, opts=opts, typ=GetFirewallInternetServiceResult).value

    return AwaitableGetFirewallInternetServiceResult(
        database=pulumi.get(__ret__, 'database'),
        direction=pulumi.get(__ret__, 'direction'),
        extra_ip6_range_number=pulumi.get(__ret__, 'extra_ip6_range_number'),
        extra_ip_range_number=pulumi.get(__ret__, 'extra_ip_range_number'),
        fosid=pulumi.get(__ret__, 'fosid'),
        icon_id=pulumi.get(__ret__, 'icon_id'),
        id=pulumi.get(__ret__, 'id'),
        ip6_range_number=pulumi.get(__ret__, 'ip6_range_number'),
        ip_number=pulumi.get(__ret__, 'ip_number'),
        ip_range_number=pulumi.get(__ret__, 'ip_range_number'),
        name=pulumi.get(__ret__, 'name'),
        obsolete=pulumi.get(__ret__, 'obsolete'),
        reputation=pulumi.get(__ret__, 'reputation'),
        singularity=pulumi.get(__ret__, 'singularity'),
        sld_id=pulumi.get(__ret__, 'sld_id'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_firewall_internet_service)
def get_firewall_internet_service_output(fosid: Optional[pulumi.Input[int]] = None,
                                         vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallInternetServiceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
