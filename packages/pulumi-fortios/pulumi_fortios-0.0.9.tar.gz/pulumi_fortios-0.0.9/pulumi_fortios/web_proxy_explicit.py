# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WebProxyExplicitArgs', 'WebProxyExplicit']

@pulumi.input_type
class WebProxyExplicitArgs:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftp_incoming_port: Optional[pulumi.Input[str]] = None,
                 ftp_over_http: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_connection_mode: Optional[pulumi.Input[str]] = None,
                 http_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_replacement_message: Optional[pulumi.Input[str]] = None,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_ip6: Optional[pulumi.Input[str]] = None,
                 ipv6_status: Optional[pulumi.Input[str]] = None,
                 message_upon_server_error: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 outgoing_ip6: Optional[pulumi.Input[str]] = None,
                 pac_file_data: Optional[pulumi.Input[str]] = None,
                 pac_file_name: Optional[pulumi.Input[str]] = None,
                 pac_file_server_port: Optional[pulumi.Input[str]] = None,
                 pac_file_server_status: Optional[pulumi.Input[str]] = None,
                 pac_file_through_https: Optional[pulumi.Input[str]] = None,
                 pac_file_url: Optional[pulumi.Input[str]] = None,
                 pac_policies: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyArgs']]]] = None,
                 pref_dns_result: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy_certs: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitSecureWebProxyCertArgs']]]] = None,
                 socks: Optional[pulumi.Input[str]] = None,
                 socks_incoming_port: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_guest: Optional[pulumi.Input[str]] = None,
                 trace_auth_no_rsp: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WebProxyExplicit resource.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ftp_incoming_port is not None:
            pulumi.set(__self__, "ftp_incoming_port", ftp_incoming_port)
        if ftp_over_http is not None:
            pulumi.set(__self__, "ftp_over_http", ftp_over_http)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http_connection_mode is not None:
            pulumi.set(__self__, "http_connection_mode", http_connection_mode)
        if http_incoming_port is not None:
            pulumi.set(__self__, "http_incoming_port", http_incoming_port)
        if https_incoming_port is not None:
            pulumi.set(__self__, "https_incoming_port", https_incoming_port)
        if https_replacement_message is not None:
            pulumi.set(__self__, "https_replacement_message", https_replacement_message)
        if incoming_ip is not None:
            pulumi.set(__self__, "incoming_ip", incoming_ip)
        if incoming_ip6 is not None:
            pulumi.set(__self__, "incoming_ip6", incoming_ip6)
        if ipv6_status is not None:
            pulumi.set(__self__, "ipv6_status", ipv6_status)
        if message_upon_server_error is not None:
            pulumi.set(__self__, "message_upon_server_error", message_upon_server_error)
        if outgoing_ip is not None:
            pulumi.set(__self__, "outgoing_ip", outgoing_ip)
        if outgoing_ip6 is not None:
            pulumi.set(__self__, "outgoing_ip6", outgoing_ip6)
        if pac_file_data is not None:
            pulumi.set(__self__, "pac_file_data", pac_file_data)
        if pac_file_name is not None:
            pulumi.set(__self__, "pac_file_name", pac_file_name)
        if pac_file_server_port is not None:
            pulumi.set(__self__, "pac_file_server_port", pac_file_server_port)
        if pac_file_server_status is not None:
            pulumi.set(__self__, "pac_file_server_status", pac_file_server_status)
        if pac_file_through_https is not None:
            pulumi.set(__self__, "pac_file_through_https", pac_file_through_https)
        if pac_file_url is not None:
            pulumi.set(__self__, "pac_file_url", pac_file_url)
        if pac_policies is not None:
            pulumi.set(__self__, "pac_policies", pac_policies)
        if pref_dns_result is not None:
            pulumi.set(__self__, "pref_dns_result", pref_dns_result)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if sec_default_action is not None:
            pulumi.set(__self__, "sec_default_action", sec_default_action)
        if secure_web_proxy is not None:
            pulumi.set(__self__, "secure_web_proxy", secure_web_proxy)
        if secure_web_proxy_certs is not None:
            pulumi.set(__self__, "secure_web_proxy_certs", secure_web_proxy_certs)
        if socks is not None:
            pulumi.set(__self__, "socks", socks)
        if socks_incoming_port is not None:
            pulumi.set(__self__, "socks_incoming_port", socks_incoming_port)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strict_guest is not None:
            pulumi.set(__self__, "strict_guest", strict_guest)
        if trace_auth_no_rsp is not None:
            pulumi.set(__self__, "trace_auth_no_rsp", trace_auth_no_rsp)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="ftpIncomingPort")
    def ftp_incoming_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftp_incoming_port")

    @ftp_incoming_port.setter
    def ftp_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_incoming_port", value)

    @property
    @pulumi.getter(name="ftpOverHttp")
    def ftp_over_http(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftp_over_http")

    @ftp_over_http.setter
    def ftp_over_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_over_http", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpConnectionMode")
    def http_connection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_connection_mode")

    @http_connection_mode.setter
    def http_connection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_connection_mode", value)

    @property
    @pulumi.getter(name="httpIncomingPort")
    def http_incoming_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_incoming_port")

    @http_incoming_port.setter
    def http_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_incoming_port", value)

    @property
    @pulumi.getter(name="httpsIncomingPort")
    def https_incoming_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_incoming_port")

    @https_incoming_port.setter
    def https_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_incoming_port", value)

    @property
    @pulumi.getter(name="httpsReplacementMessage")
    def https_replacement_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_replacement_message")

    @https_replacement_message.setter
    def https_replacement_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_replacement_message", value)

    @property
    @pulumi.getter(name="incomingIp")
    def incoming_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incoming_ip")

    @incoming_ip.setter
    def incoming_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_ip", value)

    @property
    @pulumi.getter(name="incomingIp6")
    def incoming_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incoming_ip6")

    @incoming_ip6.setter
    def incoming_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_ip6", value)

    @property
    @pulumi.getter(name="ipv6Status")
    def ipv6_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_status")

    @ipv6_status.setter
    def ipv6_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_status", value)

    @property
    @pulumi.getter(name="messageUponServerError")
    def message_upon_server_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_upon_server_error")

    @message_upon_server_error.setter
    def message_upon_server_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_upon_server_error", value)

    @property
    @pulumi.getter(name="outgoingIp")
    def outgoing_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outgoing_ip")

    @outgoing_ip.setter
    def outgoing_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outgoing_ip", value)

    @property
    @pulumi.getter(name="outgoingIp6")
    def outgoing_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outgoing_ip6")

    @outgoing_ip6.setter
    def outgoing_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outgoing_ip6", value)

    @property
    @pulumi.getter(name="pacFileData")
    def pac_file_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_data")

    @pac_file_data.setter
    def pac_file_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_data", value)

    @property
    @pulumi.getter(name="pacFileName")
    def pac_file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_name")

    @pac_file_name.setter
    def pac_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_name", value)

    @property
    @pulumi.getter(name="pacFileServerPort")
    def pac_file_server_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_server_port")

    @pac_file_server_port.setter
    def pac_file_server_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_server_port", value)

    @property
    @pulumi.getter(name="pacFileServerStatus")
    def pac_file_server_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_server_status")

    @pac_file_server_status.setter
    def pac_file_server_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_server_status", value)

    @property
    @pulumi.getter(name="pacFileThroughHttps")
    def pac_file_through_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_through_https")

    @pac_file_through_https.setter
    def pac_file_through_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_through_https", value)

    @property
    @pulumi.getter(name="pacFileUrl")
    def pac_file_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_url")

    @pac_file_url.setter
    def pac_file_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_url", value)

    @property
    @pulumi.getter(name="pacPolicies")
    def pac_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyArgs']]]]:
        return pulumi.get(self, "pac_policies")

    @pac_policies.setter
    def pac_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyArgs']]]]):
        pulumi.set(self, "pac_policies", value)

    @property
    @pulumi.getter(name="prefDnsResult")
    def pref_dns_result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pref_dns_result")

    @pref_dns_result.setter
    def pref_dns_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pref_dns_result", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="secDefaultAction")
    def sec_default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sec_default_action")

    @sec_default_action.setter
    def sec_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_default_action", value)

    @property
    @pulumi.getter(name="secureWebProxy")
    def secure_web_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secure_web_proxy")

    @secure_web_proxy.setter
    def secure_web_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_web_proxy", value)

    @property
    @pulumi.getter(name="secureWebProxyCerts")
    def secure_web_proxy_certs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitSecureWebProxyCertArgs']]]]:
        return pulumi.get(self, "secure_web_proxy_certs")

    @secure_web_proxy_certs.setter
    def secure_web_proxy_certs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitSecureWebProxyCertArgs']]]]):
        pulumi.set(self, "secure_web_proxy_certs", value)

    @property
    @pulumi.getter
    def socks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "socks")

    @socks.setter
    def socks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socks", value)

    @property
    @pulumi.getter(name="socksIncomingPort")
    def socks_incoming_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "socks_incoming_port")

    @socks_incoming_port.setter
    def socks_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socks_incoming_port", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="strictGuest")
    def strict_guest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strict_guest")

    @strict_guest.setter
    def strict_guest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_guest", value)

    @property
    @pulumi.getter(name="traceAuthNoRsp")
    def trace_auth_no_rsp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trace_auth_no_rsp")

    @trace_auth_no_rsp.setter
    def trace_auth_no_rsp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trace_auth_no_rsp", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _WebProxyExplicitState:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftp_incoming_port: Optional[pulumi.Input[str]] = None,
                 ftp_over_http: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_connection_mode: Optional[pulumi.Input[str]] = None,
                 http_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_replacement_message: Optional[pulumi.Input[str]] = None,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_ip6: Optional[pulumi.Input[str]] = None,
                 ipv6_status: Optional[pulumi.Input[str]] = None,
                 message_upon_server_error: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 outgoing_ip6: Optional[pulumi.Input[str]] = None,
                 pac_file_data: Optional[pulumi.Input[str]] = None,
                 pac_file_name: Optional[pulumi.Input[str]] = None,
                 pac_file_server_port: Optional[pulumi.Input[str]] = None,
                 pac_file_server_status: Optional[pulumi.Input[str]] = None,
                 pac_file_through_https: Optional[pulumi.Input[str]] = None,
                 pac_file_url: Optional[pulumi.Input[str]] = None,
                 pac_policies: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyArgs']]]] = None,
                 pref_dns_result: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy_certs: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitSecureWebProxyCertArgs']]]] = None,
                 socks: Optional[pulumi.Input[str]] = None,
                 socks_incoming_port: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_guest: Optional[pulumi.Input[str]] = None,
                 trace_auth_no_rsp: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WebProxyExplicit resources.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ftp_incoming_port is not None:
            pulumi.set(__self__, "ftp_incoming_port", ftp_incoming_port)
        if ftp_over_http is not None:
            pulumi.set(__self__, "ftp_over_http", ftp_over_http)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http_connection_mode is not None:
            pulumi.set(__self__, "http_connection_mode", http_connection_mode)
        if http_incoming_port is not None:
            pulumi.set(__self__, "http_incoming_port", http_incoming_port)
        if https_incoming_port is not None:
            pulumi.set(__self__, "https_incoming_port", https_incoming_port)
        if https_replacement_message is not None:
            pulumi.set(__self__, "https_replacement_message", https_replacement_message)
        if incoming_ip is not None:
            pulumi.set(__self__, "incoming_ip", incoming_ip)
        if incoming_ip6 is not None:
            pulumi.set(__self__, "incoming_ip6", incoming_ip6)
        if ipv6_status is not None:
            pulumi.set(__self__, "ipv6_status", ipv6_status)
        if message_upon_server_error is not None:
            pulumi.set(__self__, "message_upon_server_error", message_upon_server_error)
        if outgoing_ip is not None:
            pulumi.set(__self__, "outgoing_ip", outgoing_ip)
        if outgoing_ip6 is not None:
            pulumi.set(__self__, "outgoing_ip6", outgoing_ip6)
        if pac_file_data is not None:
            pulumi.set(__self__, "pac_file_data", pac_file_data)
        if pac_file_name is not None:
            pulumi.set(__self__, "pac_file_name", pac_file_name)
        if pac_file_server_port is not None:
            pulumi.set(__self__, "pac_file_server_port", pac_file_server_port)
        if pac_file_server_status is not None:
            pulumi.set(__self__, "pac_file_server_status", pac_file_server_status)
        if pac_file_through_https is not None:
            pulumi.set(__self__, "pac_file_through_https", pac_file_through_https)
        if pac_file_url is not None:
            pulumi.set(__self__, "pac_file_url", pac_file_url)
        if pac_policies is not None:
            pulumi.set(__self__, "pac_policies", pac_policies)
        if pref_dns_result is not None:
            pulumi.set(__self__, "pref_dns_result", pref_dns_result)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if sec_default_action is not None:
            pulumi.set(__self__, "sec_default_action", sec_default_action)
        if secure_web_proxy is not None:
            pulumi.set(__self__, "secure_web_proxy", secure_web_proxy)
        if secure_web_proxy_certs is not None:
            pulumi.set(__self__, "secure_web_proxy_certs", secure_web_proxy_certs)
        if socks is not None:
            pulumi.set(__self__, "socks", socks)
        if socks_incoming_port is not None:
            pulumi.set(__self__, "socks_incoming_port", socks_incoming_port)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strict_guest is not None:
            pulumi.set(__self__, "strict_guest", strict_guest)
        if trace_auth_no_rsp is not None:
            pulumi.set(__self__, "trace_auth_no_rsp", trace_auth_no_rsp)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="ftpIncomingPort")
    def ftp_incoming_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftp_incoming_port")

    @ftp_incoming_port.setter
    def ftp_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_incoming_port", value)

    @property
    @pulumi.getter(name="ftpOverHttp")
    def ftp_over_http(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftp_over_http")

    @ftp_over_http.setter
    def ftp_over_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_over_http", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpConnectionMode")
    def http_connection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_connection_mode")

    @http_connection_mode.setter
    def http_connection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_connection_mode", value)

    @property
    @pulumi.getter(name="httpIncomingPort")
    def http_incoming_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_incoming_port")

    @http_incoming_port.setter
    def http_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_incoming_port", value)

    @property
    @pulumi.getter(name="httpsIncomingPort")
    def https_incoming_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_incoming_port")

    @https_incoming_port.setter
    def https_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_incoming_port", value)

    @property
    @pulumi.getter(name="httpsReplacementMessage")
    def https_replacement_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_replacement_message")

    @https_replacement_message.setter
    def https_replacement_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_replacement_message", value)

    @property
    @pulumi.getter(name="incomingIp")
    def incoming_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incoming_ip")

    @incoming_ip.setter
    def incoming_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_ip", value)

    @property
    @pulumi.getter(name="incomingIp6")
    def incoming_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incoming_ip6")

    @incoming_ip6.setter
    def incoming_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incoming_ip6", value)

    @property
    @pulumi.getter(name="ipv6Status")
    def ipv6_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_status")

    @ipv6_status.setter
    def ipv6_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_status", value)

    @property
    @pulumi.getter(name="messageUponServerError")
    def message_upon_server_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_upon_server_error")

    @message_upon_server_error.setter
    def message_upon_server_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_upon_server_error", value)

    @property
    @pulumi.getter(name="outgoingIp")
    def outgoing_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outgoing_ip")

    @outgoing_ip.setter
    def outgoing_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outgoing_ip", value)

    @property
    @pulumi.getter(name="outgoingIp6")
    def outgoing_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outgoing_ip6")

    @outgoing_ip6.setter
    def outgoing_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outgoing_ip6", value)

    @property
    @pulumi.getter(name="pacFileData")
    def pac_file_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_data")

    @pac_file_data.setter
    def pac_file_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_data", value)

    @property
    @pulumi.getter(name="pacFileName")
    def pac_file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_name")

    @pac_file_name.setter
    def pac_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_name", value)

    @property
    @pulumi.getter(name="pacFileServerPort")
    def pac_file_server_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_server_port")

    @pac_file_server_port.setter
    def pac_file_server_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_server_port", value)

    @property
    @pulumi.getter(name="pacFileServerStatus")
    def pac_file_server_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_server_status")

    @pac_file_server_status.setter
    def pac_file_server_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_server_status", value)

    @property
    @pulumi.getter(name="pacFileThroughHttps")
    def pac_file_through_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_through_https")

    @pac_file_through_https.setter
    def pac_file_through_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_through_https", value)

    @property
    @pulumi.getter(name="pacFileUrl")
    def pac_file_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pac_file_url")

    @pac_file_url.setter
    def pac_file_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_url", value)

    @property
    @pulumi.getter(name="pacPolicies")
    def pac_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyArgs']]]]:
        return pulumi.get(self, "pac_policies")

    @pac_policies.setter
    def pac_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyArgs']]]]):
        pulumi.set(self, "pac_policies", value)

    @property
    @pulumi.getter(name="prefDnsResult")
    def pref_dns_result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pref_dns_result")

    @pref_dns_result.setter
    def pref_dns_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pref_dns_result", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="secDefaultAction")
    def sec_default_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sec_default_action")

    @sec_default_action.setter
    def sec_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_default_action", value)

    @property
    @pulumi.getter(name="secureWebProxy")
    def secure_web_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secure_web_proxy")

    @secure_web_proxy.setter
    def secure_web_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_web_proxy", value)

    @property
    @pulumi.getter(name="secureWebProxyCerts")
    def secure_web_proxy_certs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitSecureWebProxyCertArgs']]]]:
        return pulumi.get(self, "secure_web_proxy_certs")

    @secure_web_proxy_certs.setter
    def secure_web_proxy_certs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitSecureWebProxyCertArgs']]]]):
        pulumi.set(self, "secure_web_proxy_certs", value)

    @property
    @pulumi.getter
    def socks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "socks")

    @socks.setter
    def socks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socks", value)

    @property
    @pulumi.getter(name="socksIncomingPort")
    def socks_incoming_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "socks_incoming_port")

    @socks_incoming_port.setter
    def socks_incoming_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "socks_incoming_port", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="strictGuest")
    def strict_guest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strict_guest")

    @strict_guest.setter
    def strict_guest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_guest", value)

    @property
    @pulumi.getter(name="traceAuthNoRsp")
    def trace_auth_no_rsp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trace_auth_no_rsp")

    @trace_auth_no_rsp.setter
    def trace_auth_no_rsp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trace_auth_no_rsp", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class WebProxyExplicit(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftp_incoming_port: Optional[pulumi.Input[str]] = None,
                 ftp_over_http: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_connection_mode: Optional[pulumi.Input[str]] = None,
                 http_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_replacement_message: Optional[pulumi.Input[str]] = None,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_ip6: Optional[pulumi.Input[str]] = None,
                 ipv6_status: Optional[pulumi.Input[str]] = None,
                 message_upon_server_error: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 outgoing_ip6: Optional[pulumi.Input[str]] = None,
                 pac_file_data: Optional[pulumi.Input[str]] = None,
                 pac_file_name: Optional[pulumi.Input[str]] = None,
                 pac_file_server_port: Optional[pulumi.Input[str]] = None,
                 pac_file_server_status: Optional[pulumi.Input[str]] = None,
                 pac_file_through_https: Optional[pulumi.Input[str]] = None,
                 pac_file_url: Optional[pulumi.Input[str]] = None,
                 pac_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebProxyExplicitPacPolicyArgs']]]]] = None,
                 pref_dns_result: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy_certs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebProxyExplicitSecureWebProxyCertArgs']]]]] = None,
                 socks: Optional[pulumi.Input[str]] = None,
                 socks_incoming_port: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_guest: Optional[pulumi.Input[str]] = None,
                 trace_auth_no_rsp: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WebProxyExplicit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WebProxyExplicitArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WebProxyExplicit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WebProxyExplicitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebProxyExplicitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftp_incoming_port: Optional[pulumi.Input[str]] = None,
                 ftp_over_http: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_connection_mode: Optional[pulumi.Input[str]] = None,
                 http_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_incoming_port: Optional[pulumi.Input[str]] = None,
                 https_replacement_message: Optional[pulumi.Input[str]] = None,
                 incoming_ip: Optional[pulumi.Input[str]] = None,
                 incoming_ip6: Optional[pulumi.Input[str]] = None,
                 ipv6_status: Optional[pulumi.Input[str]] = None,
                 message_upon_server_error: Optional[pulumi.Input[str]] = None,
                 outgoing_ip: Optional[pulumi.Input[str]] = None,
                 outgoing_ip6: Optional[pulumi.Input[str]] = None,
                 pac_file_data: Optional[pulumi.Input[str]] = None,
                 pac_file_name: Optional[pulumi.Input[str]] = None,
                 pac_file_server_port: Optional[pulumi.Input[str]] = None,
                 pac_file_server_status: Optional[pulumi.Input[str]] = None,
                 pac_file_through_https: Optional[pulumi.Input[str]] = None,
                 pac_file_url: Optional[pulumi.Input[str]] = None,
                 pac_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebProxyExplicitPacPolicyArgs']]]]] = None,
                 pref_dns_result: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 sec_default_action: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy: Optional[pulumi.Input[str]] = None,
                 secure_web_proxy_certs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebProxyExplicitSecureWebProxyCertArgs']]]]] = None,
                 socks: Optional[pulumi.Input[str]] = None,
                 socks_incoming_port: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_guest: Optional[pulumi.Input[str]] = None,
                 trace_auth_no_rsp: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebProxyExplicitArgs.__new__(WebProxyExplicitArgs)

            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ftp_incoming_port"] = ftp_incoming_port
            __props__.__dict__["ftp_over_http"] = ftp_over_http
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["http_connection_mode"] = http_connection_mode
            __props__.__dict__["http_incoming_port"] = http_incoming_port
            __props__.__dict__["https_incoming_port"] = https_incoming_port
            __props__.__dict__["https_replacement_message"] = https_replacement_message
            __props__.__dict__["incoming_ip"] = incoming_ip
            __props__.__dict__["incoming_ip6"] = incoming_ip6
            __props__.__dict__["ipv6_status"] = ipv6_status
            __props__.__dict__["message_upon_server_error"] = message_upon_server_error
            __props__.__dict__["outgoing_ip"] = outgoing_ip
            __props__.__dict__["outgoing_ip6"] = outgoing_ip6
            __props__.__dict__["pac_file_data"] = pac_file_data
            __props__.__dict__["pac_file_name"] = pac_file_name
            __props__.__dict__["pac_file_server_port"] = pac_file_server_port
            __props__.__dict__["pac_file_server_status"] = pac_file_server_status
            __props__.__dict__["pac_file_through_https"] = pac_file_through_https
            __props__.__dict__["pac_file_url"] = pac_file_url
            __props__.__dict__["pac_policies"] = pac_policies
            __props__.__dict__["pref_dns_result"] = pref_dns_result
            __props__.__dict__["realm"] = realm
            __props__.__dict__["sec_default_action"] = sec_default_action
            __props__.__dict__["secure_web_proxy"] = secure_web_proxy
            __props__.__dict__["secure_web_proxy_certs"] = secure_web_proxy_certs
            __props__.__dict__["socks"] = socks
            __props__.__dict__["socks_incoming_port"] = socks_incoming_port
            __props__.__dict__["ssl_algorithm"] = ssl_algorithm
            __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
            __props__.__dict__["status"] = status
            __props__.__dict__["strict_guest"] = strict_guest
            __props__.__dict__["trace_auth_no_rsp"] = trace_auth_no_rsp
            __props__.__dict__["unknown_http_version"] = unknown_http_version
            __props__.__dict__["vdomparam"] = vdomparam
        super(WebProxyExplicit, __self__).__init__(
            'fortios:index/webProxyExplicit:WebProxyExplicit',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ftp_incoming_port: Optional[pulumi.Input[str]] = None,
            ftp_over_http: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            http_connection_mode: Optional[pulumi.Input[str]] = None,
            http_incoming_port: Optional[pulumi.Input[str]] = None,
            https_incoming_port: Optional[pulumi.Input[str]] = None,
            https_replacement_message: Optional[pulumi.Input[str]] = None,
            incoming_ip: Optional[pulumi.Input[str]] = None,
            incoming_ip6: Optional[pulumi.Input[str]] = None,
            ipv6_status: Optional[pulumi.Input[str]] = None,
            message_upon_server_error: Optional[pulumi.Input[str]] = None,
            outgoing_ip: Optional[pulumi.Input[str]] = None,
            outgoing_ip6: Optional[pulumi.Input[str]] = None,
            pac_file_data: Optional[pulumi.Input[str]] = None,
            pac_file_name: Optional[pulumi.Input[str]] = None,
            pac_file_server_port: Optional[pulumi.Input[str]] = None,
            pac_file_server_status: Optional[pulumi.Input[str]] = None,
            pac_file_through_https: Optional[pulumi.Input[str]] = None,
            pac_file_url: Optional[pulumi.Input[str]] = None,
            pac_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebProxyExplicitPacPolicyArgs']]]]] = None,
            pref_dns_result: Optional[pulumi.Input[str]] = None,
            realm: Optional[pulumi.Input[str]] = None,
            sec_default_action: Optional[pulumi.Input[str]] = None,
            secure_web_proxy: Optional[pulumi.Input[str]] = None,
            secure_web_proxy_certs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WebProxyExplicitSecureWebProxyCertArgs']]]]] = None,
            socks: Optional[pulumi.Input[str]] = None,
            socks_incoming_port: Optional[pulumi.Input[str]] = None,
            ssl_algorithm: Optional[pulumi.Input[str]] = None,
            ssl_dh_bits: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            strict_guest: Optional[pulumi.Input[str]] = None,
            trace_auth_no_rsp: Optional[pulumi.Input[str]] = None,
            unknown_http_version: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'WebProxyExplicit':
        """
        Get an existing WebProxyExplicit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebProxyExplicitState.__new__(_WebProxyExplicitState)

        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ftp_incoming_port"] = ftp_incoming_port
        __props__.__dict__["ftp_over_http"] = ftp_over_http
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["http_connection_mode"] = http_connection_mode
        __props__.__dict__["http_incoming_port"] = http_incoming_port
        __props__.__dict__["https_incoming_port"] = https_incoming_port
        __props__.__dict__["https_replacement_message"] = https_replacement_message
        __props__.__dict__["incoming_ip"] = incoming_ip
        __props__.__dict__["incoming_ip6"] = incoming_ip6
        __props__.__dict__["ipv6_status"] = ipv6_status
        __props__.__dict__["message_upon_server_error"] = message_upon_server_error
        __props__.__dict__["outgoing_ip"] = outgoing_ip
        __props__.__dict__["outgoing_ip6"] = outgoing_ip6
        __props__.__dict__["pac_file_data"] = pac_file_data
        __props__.__dict__["pac_file_name"] = pac_file_name
        __props__.__dict__["pac_file_server_port"] = pac_file_server_port
        __props__.__dict__["pac_file_server_status"] = pac_file_server_status
        __props__.__dict__["pac_file_through_https"] = pac_file_through_https
        __props__.__dict__["pac_file_url"] = pac_file_url
        __props__.__dict__["pac_policies"] = pac_policies
        __props__.__dict__["pref_dns_result"] = pref_dns_result
        __props__.__dict__["realm"] = realm
        __props__.__dict__["sec_default_action"] = sec_default_action
        __props__.__dict__["secure_web_proxy"] = secure_web_proxy
        __props__.__dict__["secure_web_proxy_certs"] = secure_web_proxy_certs
        __props__.__dict__["socks"] = socks
        __props__.__dict__["socks_incoming_port"] = socks_incoming_port
        __props__.__dict__["ssl_algorithm"] = ssl_algorithm
        __props__.__dict__["ssl_dh_bits"] = ssl_dh_bits
        __props__.__dict__["status"] = status
        __props__.__dict__["strict_guest"] = strict_guest
        __props__.__dict__["trace_auth_no_rsp"] = trace_auth_no_rsp
        __props__.__dict__["unknown_http_version"] = unknown_http_version
        __props__.__dict__["vdomparam"] = vdomparam
        return WebProxyExplicit(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="ftpIncomingPort")
    def ftp_incoming_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ftp_incoming_port")

    @property
    @pulumi.getter(name="ftpOverHttp")
    def ftp_over_http(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ftp_over_http")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="httpConnectionMode")
    def http_connection_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_connection_mode")

    @property
    @pulumi.getter(name="httpIncomingPort")
    def http_incoming_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_incoming_port")

    @property
    @pulumi.getter(name="httpsIncomingPort")
    def https_incoming_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "https_incoming_port")

    @property
    @pulumi.getter(name="httpsReplacementMessage")
    def https_replacement_message(self) -> pulumi.Output[str]:
        return pulumi.get(self, "https_replacement_message")

    @property
    @pulumi.getter(name="incomingIp")
    def incoming_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "incoming_ip")

    @property
    @pulumi.getter(name="incomingIp6")
    def incoming_ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "incoming_ip6")

    @property
    @pulumi.getter(name="ipv6Status")
    def ipv6_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_status")

    @property
    @pulumi.getter(name="messageUponServerError")
    def message_upon_server_error(self) -> pulumi.Output[str]:
        return pulumi.get(self, "message_upon_server_error")

    @property
    @pulumi.getter(name="outgoingIp")
    def outgoing_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "outgoing_ip")

    @property
    @pulumi.getter(name="outgoingIp6")
    def outgoing_ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "outgoing_ip6")

    @property
    @pulumi.getter(name="pacFileData")
    def pac_file_data(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pac_file_data")

    @property
    @pulumi.getter(name="pacFileName")
    def pac_file_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pac_file_name")

    @property
    @pulumi.getter(name="pacFileServerPort")
    def pac_file_server_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pac_file_server_port")

    @property
    @pulumi.getter(name="pacFileServerStatus")
    def pac_file_server_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pac_file_server_status")

    @property
    @pulumi.getter(name="pacFileThroughHttps")
    def pac_file_through_https(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pac_file_through_https")

    @property
    @pulumi.getter(name="pacFileUrl")
    def pac_file_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pac_file_url")

    @property
    @pulumi.getter(name="pacPolicies")
    def pac_policies(self) -> pulumi.Output[Optional[Sequence['outputs.WebProxyExplicitPacPolicy']]]:
        return pulumi.get(self, "pac_policies")

    @property
    @pulumi.getter(name="prefDnsResult")
    def pref_dns_result(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pref_dns_result")

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Output[str]:
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="secDefaultAction")
    def sec_default_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sec_default_action")

    @property
    @pulumi.getter(name="secureWebProxy")
    def secure_web_proxy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "secure_web_proxy")

    @property
    @pulumi.getter(name="secureWebProxyCerts")
    def secure_web_proxy_certs(self) -> pulumi.Output[Optional[Sequence['outputs.WebProxyExplicitSecureWebProxyCert']]]:
        return pulumi.get(self, "secure_web_proxy_certs")

    @property
    @pulumi.getter
    def socks(self) -> pulumi.Output[str]:
        return pulumi.get(self, "socks")

    @property
    @pulumi.getter(name="socksIncomingPort")
    def socks_incoming_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "socks_incoming_port")

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_algorithm")

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_dh_bits")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="strictGuest")
    def strict_guest(self) -> pulumi.Output[str]:
        return pulumi.get(self, "strict_guest")

    @property
    @pulumi.getter(name="traceAuthNoRsp")
    def trace_auth_no_rsp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trace_auth_no_rsp")

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "unknown_http_version")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

