# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserFssoPollingArgs', 'UserFssoPolling']

@pulumi.input_type
class UserFssoPollingArgs:
    def __init__(__self__, *,
                 ldap_server: pulumi.Input[str],
                 server: pulumi.Input[str],
                 user: pulumi.Input[str],
                 adgrps: Optional[pulumi.Input[Sequence[pulumi.Input['UserFssoPollingAdgrpArgs']]]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 logon_history: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 polling_frequency: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserFssoPolling resource.
        """
        pulumi.set(__self__, "ldap_server", ldap_server)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "user", user)
        if adgrps is not None:
            pulumi.set(__self__, "adgrps", adgrps)
        if default_domain is not None:
            pulumi.set(__self__, "default_domain", default_domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if logon_history is not None:
            pulumi.set(__self__, "logon_history", logon_history)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if polling_frequency is not None:
            pulumi.set(__self__, "polling_frequency", polling_frequency)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if smb_ntlmv1_auth is not None:
            pulumi.set(__self__, "smb_ntlmv1_auth", smb_ntlmv1_auth)
        if smbv1 is not None:
            pulumi.set(__self__, "smbv1", smbv1)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: pulumi.Input[str]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def adgrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserFssoPollingAdgrpArgs']]]]:
        return pulumi.get(self, "adgrps")

    @adgrps.setter
    def adgrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserFssoPollingAdgrpArgs']]]]):
        pulumi.set(self, "adgrps", value)

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_domain")

    @default_domain.setter
    def default_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="logonHistory")
    def logon_history(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "logon_history")

    @logon_history.setter
    def logon_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logon_history", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pollingFrequency")
    def polling_frequency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "polling_frequency")

    @polling_frequency.setter
    def polling_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_frequency", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="smbNtlmv1Auth")
    def smb_ntlmv1_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smb_ntlmv1_auth")

    @smb_ntlmv1_auth.setter
    def smb_ntlmv1_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smb_ntlmv1_auth", value)

    @property
    @pulumi.getter
    def smbv1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smbv1")

    @smbv1.setter
    def smbv1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smbv1", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _UserFssoPollingState:
    def __init__(__self__, *,
                 adgrps: Optional[pulumi.Input[Sequence[pulumi.Input['UserFssoPollingAdgrpArgs']]]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 logon_history: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 polling_frequency: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserFssoPolling resources.
        """
        if adgrps is not None:
            pulumi.set(__self__, "adgrps", adgrps)
        if default_domain is not None:
            pulumi.set(__self__, "default_domain", default_domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if logon_history is not None:
            pulumi.set(__self__, "logon_history", logon_history)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if polling_frequency is not None:
            pulumi.set(__self__, "polling_frequency", polling_frequency)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if smb_ntlmv1_auth is not None:
            pulumi.set(__self__, "smb_ntlmv1_auth", smb_ntlmv1_auth)
        if smbv1 is not None:
            pulumi.set(__self__, "smbv1", smbv1)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def adgrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserFssoPollingAdgrpArgs']]]]:
        return pulumi.get(self, "adgrps")

    @adgrps.setter
    def adgrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserFssoPollingAdgrpArgs']]]]):
        pulumi.set(self, "adgrps", value)

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_domain")

    @default_domain.setter
    def default_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter(name="logonHistory")
    def logon_history(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "logon_history")

    @logon_history.setter
    def logon_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logon_history", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pollingFrequency")
    def polling_frequency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "polling_frequency")

    @polling_frequency.setter
    def polling_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_frequency", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="smbNtlmv1Auth")
    def smb_ntlmv1_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smb_ntlmv1_auth")

    @smb_ntlmv1_auth.setter
    def smb_ntlmv1_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smb_ntlmv1_auth", value)

    @property
    @pulumi.getter
    def smbv1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smbv1")

    @smbv1.setter
    def smbv1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smbv1", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class UserFssoPolling(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adgrps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserFssoPollingAdgrpArgs']]]]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 logon_history: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 polling_frequency: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a UserFssoPolling resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserFssoPollingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UserFssoPolling resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserFssoPollingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserFssoPollingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adgrps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserFssoPollingAdgrpArgs']]]]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 logon_history: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 polling_frequency: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserFssoPollingArgs.__new__(UserFssoPollingArgs)

            __props__.__dict__["adgrps"] = adgrps
            __props__.__dict__["default_domain"] = default_domain
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            if ldap_server is None and not opts.urn:
                raise TypeError("Missing required property 'ldap_server'")
            __props__.__dict__["ldap_server"] = ldap_server
            __props__.__dict__["logon_history"] = logon_history
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["polling_frequency"] = polling_frequency
            __props__.__dict__["port"] = port
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            __props__.__dict__["smb_ntlmv1_auth"] = smb_ntlmv1_auth
            __props__.__dict__["smbv1"] = smbv1
            __props__.__dict__["status"] = status
            if user is None and not opts.urn:
                raise TypeError("Missing required property 'user'")
            __props__.__dict__["user"] = user
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(UserFssoPolling, __self__).__init__(
            'fortios:index/userFssoPolling:UserFssoPolling',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adgrps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserFssoPollingAdgrpArgs']]]]] = None,
            default_domain: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ldap_server: Optional[pulumi.Input[str]] = None,
            logon_history: Optional[pulumi.Input[int]] = None,
            password: Optional[pulumi.Input[str]] = None,
            polling_frequency: Optional[pulumi.Input[int]] = None,
            port: Optional[pulumi.Input[int]] = None,
            server: Optional[pulumi.Input[str]] = None,
            smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
            smbv1: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            user: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'UserFssoPolling':
        """
        Get an existing UserFssoPolling resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserFssoPollingState.__new__(_UserFssoPollingState)

        __props__.__dict__["adgrps"] = adgrps
        __props__.__dict__["default_domain"] = default_domain
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ldap_server"] = ldap_server
        __props__.__dict__["logon_history"] = logon_history
        __props__.__dict__["password"] = password
        __props__.__dict__["polling_frequency"] = polling_frequency
        __props__.__dict__["port"] = port
        __props__.__dict__["server"] = server
        __props__.__dict__["smb_ntlmv1_auth"] = smb_ntlmv1_auth
        __props__.__dict__["smbv1"] = smbv1
        __props__.__dict__["status"] = status
        __props__.__dict__["user"] = user
        __props__.__dict__["vdomparam"] = vdomparam
        return UserFssoPolling(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def adgrps(self) -> pulumi.Output[Optional[Sequence['outputs.UserFssoPollingAdgrp']]]:
        return pulumi.get(self, "adgrps")

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_domain")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ldap_server")

    @property
    @pulumi.getter(name="logonHistory")
    def logon_history(self) -> pulumi.Output[int]:
        return pulumi.get(self, "logon_history")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pollingFrequency")
    def polling_frequency(self) -> pulumi.Output[int]:
        return pulumi.get(self, "polling_frequency")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="smbNtlmv1Auth")
    def smb_ntlmv1_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "smb_ntlmv1_auth")

    @property
    @pulumi.getter
    def smbv1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "smbv1")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

