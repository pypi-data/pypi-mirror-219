# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSystemVdomExceptionResult',
    'AwaitableGetSystemVdomExceptionResult',
    'get_system_vdom_exception',
    'get_system_vdom_exception_output',
]

@pulumi.output_type
class GetSystemVdomExceptionResult:
    """
    A collection of values returned by GetSystemVdomException.
    """
    def __init__(__self__, fosid=None, id=None, object=None, oid=None, scope=None, vdomparam=None, vdoms=None):
        if fosid and not isinstance(fosid, int):
            raise TypeError("Expected argument 'fosid' to be a int")
        pulumi.set(__self__, "fosid", fosid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if object and not isinstance(object, str):
            raise TypeError("Expected argument 'object' to be a str")
        pulumi.set(__self__, "object", object)
        if oid and not isinstance(oid, int):
            raise TypeError("Expected argument 'oid' to be a int")
        pulumi.set(__self__, "oid", oid)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms and not isinstance(vdoms, list):
            raise TypeError("Expected argument 'vdoms' to be a list")
        pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def fosid(self) -> int:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def oid(self) -> int:
        return pulumi.get(self, "oid")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vdoms(self) -> Sequence['outputs.GetSystemVdomExceptionVdomResult']:
        return pulumi.get(self, "vdoms")


class AwaitableGetSystemVdomExceptionResult(GetSystemVdomExceptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemVdomExceptionResult(
            fosid=self.fosid,
            id=self.id,
            object=self.object,
            oid=self.oid,
            scope=self.scope,
            vdomparam=self.vdomparam,
            vdoms=self.vdoms)


def get_system_vdom_exception(fosid: Optional[int] = None,
                              vdomparam: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemVdomExceptionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fosid'] = fosid
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemVdomException:GetSystemVdomException', __args__, opts=opts, typ=GetSystemVdomExceptionResult).value

    return AwaitableGetSystemVdomExceptionResult(
        fosid=pulumi.get(__ret__, 'fosid'),
        id=pulumi.get(__ret__, 'id'),
        object=pulumi.get(__ret__, 'object'),
        oid=pulumi.get(__ret__, 'oid'),
        scope=pulumi.get(__ret__, 'scope'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        vdoms=pulumi.get(__ret__, 'vdoms'))


@_utilities.lift_output_func(get_system_vdom_exception)
def get_system_vdom_exception_output(fosid: Optional[pulumi.Input[int]] = None,
                                     vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemVdomExceptionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
