# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['LogDiskSettingArgs', 'LogDiskSetting']

@pulumi.input_type
class LogDiskSettingArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 diskfull: Optional[pulumi.Input[str]] = None,
                 dlp_archive_quota: Optional[pulumi.Input[int]] = None,
                 full_final_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_first_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_second_warning_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ips_archive: Optional[pulumi.Input[str]] = None,
                 log_quota: Optional[pulumi.Input[int]] = None,
                 max_log_file_size: Optional[pulumi.Input[int]] = None,
                 max_policy_packet_capture_size: Optional[pulumi.Input[int]] = None,
                 maximum_log_age: Optional[pulumi.Input[int]] = None,
                 report_quota: Optional[pulumi.Input[int]] = None,
                 roll_day: Optional[pulumi.Input[str]] = None,
                 roll_schedule: Optional[pulumi.Input[str]] = None,
                 roll_time: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 upload: Optional[pulumi.Input[str]] = None,
                 upload_delete_files: Optional[pulumi.Input[str]] = None,
                 upload_destination: Optional[pulumi.Input[str]] = None,
                 upload_ssl_conn: Optional[pulumi.Input[str]] = None,
                 uploaddir: Optional[pulumi.Input[str]] = None,
                 uploadip: Optional[pulumi.Input[str]] = None,
                 uploadpass: Optional[pulumi.Input[str]] = None,
                 uploadport: Optional[pulumi.Input[int]] = None,
                 uploadsched: Optional[pulumi.Input[str]] = None,
                 uploadtime: Optional[pulumi.Input[str]] = None,
                 uploadtype: Optional[pulumi.Input[str]] = None,
                 uploaduser: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LogDiskSetting resource.
        """
        pulumi.set(__self__, "status", status)
        if diskfull is not None:
            pulumi.set(__self__, "diskfull", diskfull)
        if dlp_archive_quota is not None:
            pulumi.set(__self__, "dlp_archive_quota", dlp_archive_quota)
        if full_final_warning_threshold is not None:
            pulumi.set(__self__, "full_final_warning_threshold", full_final_warning_threshold)
        if full_first_warning_threshold is not None:
            pulumi.set(__self__, "full_first_warning_threshold", full_first_warning_threshold)
        if full_second_warning_threshold is not None:
            pulumi.set(__self__, "full_second_warning_threshold", full_second_warning_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ips_archive is not None:
            pulumi.set(__self__, "ips_archive", ips_archive)
        if log_quota is not None:
            pulumi.set(__self__, "log_quota", log_quota)
        if max_log_file_size is not None:
            pulumi.set(__self__, "max_log_file_size", max_log_file_size)
        if max_policy_packet_capture_size is not None:
            pulumi.set(__self__, "max_policy_packet_capture_size", max_policy_packet_capture_size)
        if maximum_log_age is not None:
            pulumi.set(__self__, "maximum_log_age", maximum_log_age)
        if report_quota is not None:
            pulumi.set(__self__, "report_quota", report_quota)
        if roll_day is not None:
            pulumi.set(__self__, "roll_day", roll_day)
        if roll_schedule is not None:
            pulumi.set(__self__, "roll_schedule", roll_schedule)
        if roll_time is not None:
            pulumi.set(__self__, "roll_time", roll_time)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if upload is not None:
            pulumi.set(__self__, "upload", upload)
        if upload_delete_files is not None:
            pulumi.set(__self__, "upload_delete_files", upload_delete_files)
        if upload_destination is not None:
            pulumi.set(__self__, "upload_destination", upload_destination)
        if upload_ssl_conn is not None:
            pulumi.set(__self__, "upload_ssl_conn", upload_ssl_conn)
        if uploaddir is not None:
            pulumi.set(__self__, "uploaddir", uploaddir)
        if uploadip is not None:
            pulumi.set(__self__, "uploadip", uploadip)
        if uploadpass is not None:
            pulumi.set(__self__, "uploadpass", uploadpass)
        if uploadport is not None:
            pulumi.set(__self__, "uploadport", uploadport)
        if uploadsched is not None:
            pulumi.set(__self__, "uploadsched", uploadsched)
        if uploadtime is not None:
            pulumi.set(__self__, "uploadtime", uploadtime)
        if uploadtype is not None:
            pulumi.set(__self__, "uploadtype", uploadtype)
        if uploaduser is not None:
            pulumi.set(__self__, "uploaduser", uploaduser)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def diskfull(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diskfull")

    @diskfull.setter
    def diskfull(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diskfull", value)

    @property
    @pulumi.getter(name="dlpArchiveQuota")
    def dlp_archive_quota(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dlp_archive_quota")

    @dlp_archive_quota.setter
    def dlp_archive_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dlp_archive_quota", value)

    @property
    @pulumi.getter(name="fullFinalWarningThreshold")
    def full_final_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "full_final_warning_threshold")

    @full_final_warning_threshold.setter
    def full_final_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_final_warning_threshold", value)

    @property
    @pulumi.getter(name="fullFirstWarningThreshold")
    def full_first_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "full_first_warning_threshold")

    @full_first_warning_threshold.setter
    def full_first_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_first_warning_threshold", value)

    @property
    @pulumi.getter(name="fullSecondWarningThreshold")
    def full_second_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "full_second_warning_threshold")

    @full_second_warning_threshold.setter
    def full_second_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_second_warning_threshold", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ipsArchive")
    def ips_archive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_archive")

    @ips_archive.setter
    def ips_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_archive", value)

    @property
    @pulumi.getter(name="logQuota")
    def log_quota(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_quota")

    @log_quota.setter
    def log_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_quota", value)

    @property
    @pulumi.getter(name="maxLogFileSize")
    def max_log_file_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_log_file_size")

    @max_log_file_size.setter
    def max_log_file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_log_file_size", value)

    @property
    @pulumi.getter(name="maxPolicyPacketCaptureSize")
    def max_policy_packet_capture_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_policy_packet_capture_size")

    @max_policy_packet_capture_size.setter
    def max_policy_packet_capture_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_policy_packet_capture_size", value)

    @property
    @pulumi.getter(name="maximumLogAge")
    def maximum_log_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_log_age")

    @maximum_log_age.setter
    def maximum_log_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_log_age", value)

    @property
    @pulumi.getter(name="reportQuota")
    def report_quota(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "report_quota")

    @report_quota.setter
    def report_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "report_quota", value)

    @property
    @pulumi.getter(name="rollDay")
    def roll_day(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "roll_day")

    @roll_day.setter
    def roll_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roll_day", value)

    @property
    @pulumi.getter(name="rollSchedule")
    def roll_schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "roll_schedule")

    @roll_schedule.setter
    def roll_schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roll_schedule", value)

    @property
    @pulumi.getter(name="rollTime")
    def roll_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "roll_time")

    @roll_time.setter
    def roll_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roll_time", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def upload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload")

    @upload.setter
    def upload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload", value)

    @property
    @pulumi.getter(name="uploadDeleteFiles")
    def upload_delete_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_delete_files")

    @upload_delete_files.setter
    def upload_delete_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_delete_files", value)

    @property
    @pulumi.getter(name="uploadDestination")
    def upload_destination(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_destination")

    @upload_destination.setter
    def upload_destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_destination", value)

    @property
    @pulumi.getter(name="uploadSslConn")
    def upload_ssl_conn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_ssl_conn")

    @upload_ssl_conn.setter
    def upload_ssl_conn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_ssl_conn", value)

    @property
    @pulumi.getter
    def uploaddir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploaddir")

    @uploaddir.setter
    def uploaddir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploaddir", value)

    @property
    @pulumi.getter
    def uploadip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploadip")

    @uploadip.setter
    def uploadip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploadip", value)

    @property
    @pulumi.getter
    def uploadpass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploadpass")

    @uploadpass.setter
    def uploadpass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploadpass", value)

    @property
    @pulumi.getter
    def uploadport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uploadport")

    @uploadport.setter
    def uploadport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uploadport", value)

    @property
    @pulumi.getter
    def uploadsched(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploadsched")

    @uploadsched.setter
    def uploadsched(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploadsched", value)

    @property
    @pulumi.getter
    def uploadtime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploadtime")

    @uploadtime.setter
    def uploadtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploadtime", value)

    @property
    @pulumi.getter
    def uploadtype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploadtype")

    @uploadtype.setter
    def uploadtype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploadtype", value)

    @property
    @pulumi.getter
    def uploaduser(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploaduser")

    @uploaduser.setter
    def uploaduser(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploaduser", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _LogDiskSettingState:
    def __init__(__self__, *,
                 diskfull: Optional[pulumi.Input[str]] = None,
                 dlp_archive_quota: Optional[pulumi.Input[int]] = None,
                 full_final_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_first_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_second_warning_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ips_archive: Optional[pulumi.Input[str]] = None,
                 log_quota: Optional[pulumi.Input[int]] = None,
                 max_log_file_size: Optional[pulumi.Input[int]] = None,
                 max_policy_packet_capture_size: Optional[pulumi.Input[int]] = None,
                 maximum_log_age: Optional[pulumi.Input[int]] = None,
                 report_quota: Optional[pulumi.Input[int]] = None,
                 roll_day: Optional[pulumi.Input[str]] = None,
                 roll_schedule: Optional[pulumi.Input[str]] = None,
                 roll_time: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload: Optional[pulumi.Input[str]] = None,
                 upload_delete_files: Optional[pulumi.Input[str]] = None,
                 upload_destination: Optional[pulumi.Input[str]] = None,
                 upload_ssl_conn: Optional[pulumi.Input[str]] = None,
                 uploaddir: Optional[pulumi.Input[str]] = None,
                 uploadip: Optional[pulumi.Input[str]] = None,
                 uploadpass: Optional[pulumi.Input[str]] = None,
                 uploadport: Optional[pulumi.Input[int]] = None,
                 uploadsched: Optional[pulumi.Input[str]] = None,
                 uploadtime: Optional[pulumi.Input[str]] = None,
                 uploadtype: Optional[pulumi.Input[str]] = None,
                 uploaduser: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LogDiskSetting resources.
        """
        if diskfull is not None:
            pulumi.set(__self__, "diskfull", diskfull)
        if dlp_archive_quota is not None:
            pulumi.set(__self__, "dlp_archive_quota", dlp_archive_quota)
        if full_final_warning_threshold is not None:
            pulumi.set(__self__, "full_final_warning_threshold", full_final_warning_threshold)
        if full_first_warning_threshold is not None:
            pulumi.set(__self__, "full_first_warning_threshold", full_first_warning_threshold)
        if full_second_warning_threshold is not None:
            pulumi.set(__self__, "full_second_warning_threshold", full_second_warning_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ips_archive is not None:
            pulumi.set(__self__, "ips_archive", ips_archive)
        if log_quota is not None:
            pulumi.set(__self__, "log_quota", log_quota)
        if max_log_file_size is not None:
            pulumi.set(__self__, "max_log_file_size", max_log_file_size)
        if max_policy_packet_capture_size is not None:
            pulumi.set(__self__, "max_policy_packet_capture_size", max_policy_packet_capture_size)
        if maximum_log_age is not None:
            pulumi.set(__self__, "maximum_log_age", maximum_log_age)
        if report_quota is not None:
            pulumi.set(__self__, "report_quota", report_quota)
        if roll_day is not None:
            pulumi.set(__self__, "roll_day", roll_day)
        if roll_schedule is not None:
            pulumi.set(__self__, "roll_schedule", roll_schedule)
        if roll_time is not None:
            pulumi.set(__self__, "roll_time", roll_time)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if upload is not None:
            pulumi.set(__self__, "upload", upload)
        if upload_delete_files is not None:
            pulumi.set(__self__, "upload_delete_files", upload_delete_files)
        if upload_destination is not None:
            pulumi.set(__self__, "upload_destination", upload_destination)
        if upload_ssl_conn is not None:
            pulumi.set(__self__, "upload_ssl_conn", upload_ssl_conn)
        if uploaddir is not None:
            pulumi.set(__self__, "uploaddir", uploaddir)
        if uploadip is not None:
            pulumi.set(__self__, "uploadip", uploadip)
        if uploadpass is not None:
            pulumi.set(__self__, "uploadpass", uploadpass)
        if uploadport is not None:
            pulumi.set(__self__, "uploadport", uploadport)
        if uploadsched is not None:
            pulumi.set(__self__, "uploadsched", uploadsched)
        if uploadtime is not None:
            pulumi.set(__self__, "uploadtime", uploadtime)
        if uploadtype is not None:
            pulumi.set(__self__, "uploadtype", uploadtype)
        if uploaduser is not None:
            pulumi.set(__self__, "uploaduser", uploaduser)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def diskfull(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diskfull")

    @diskfull.setter
    def diskfull(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diskfull", value)

    @property
    @pulumi.getter(name="dlpArchiveQuota")
    def dlp_archive_quota(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dlp_archive_quota")

    @dlp_archive_quota.setter
    def dlp_archive_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dlp_archive_quota", value)

    @property
    @pulumi.getter(name="fullFinalWarningThreshold")
    def full_final_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "full_final_warning_threshold")

    @full_final_warning_threshold.setter
    def full_final_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_final_warning_threshold", value)

    @property
    @pulumi.getter(name="fullFirstWarningThreshold")
    def full_first_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "full_first_warning_threshold")

    @full_first_warning_threshold.setter
    def full_first_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_first_warning_threshold", value)

    @property
    @pulumi.getter(name="fullSecondWarningThreshold")
    def full_second_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "full_second_warning_threshold")

    @full_second_warning_threshold.setter
    def full_second_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_second_warning_threshold", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ipsArchive")
    def ips_archive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_archive")

    @ips_archive.setter
    def ips_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_archive", value)

    @property
    @pulumi.getter(name="logQuota")
    def log_quota(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_quota")

    @log_quota.setter
    def log_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_quota", value)

    @property
    @pulumi.getter(name="maxLogFileSize")
    def max_log_file_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_log_file_size")

    @max_log_file_size.setter
    def max_log_file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_log_file_size", value)

    @property
    @pulumi.getter(name="maxPolicyPacketCaptureSize")
    def max_policy_packet_capture_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_policy_packet_capture_size")

    @max_policy_packet_capture_size.setter
    def max_policy_packet_capture_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_policy_packet_capture_size", value)

    @property
    @pulumi.getter(name="maximumLogAge")
    def maximum_log_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_log_age")

    @maximum_log_age.setter
    def maximum_log_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_log_age", value)

    @property
    @pulumi.getter(name="reportQuota")
    def report_quota(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "report_quota")

    @report_quota.setter
    def report_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "report_quota", value)

    @property
    @pulumi.getter(name="rollDay")
    def roll_day(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "roll_day")

    @roll_day.setter
    def roll_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roll_day", value)

    @property
    @pulumi.getter(name="rollSchedule")
    def roll_schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "roll_schedule")

    @roll_schedule.setter
    def roll_schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roll_schedule", value)

    @property
    @pulumi.getter(name="rollTime")
    def roll_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "roll_time")

    @roll_time.setter
    def roll_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roll_time", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def upload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload")

    @upload.setter
    def upload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload", value)

    @property
    @pulumi.getter(name="uploadDeleteFiles")
    def upload_delete_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_delete_files")

    @upload_delete_files.setter
    def upload_delete_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_delete_files", value)

    @property
    @pulumi.getter(name="uploadDestination")
    def upload_destination(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_destination")

    @upload_destination.setter
    def upload_destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_destination", value)

    @property
    @pulumi.getter(name="uploadSslConn")
    def upload_ssl_conn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_ssl_conn")

    @upload_ssl_conn.setter
    def upload_ssl_conn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_ssl_conn", value)

    @property
    @pulumi.getter
    def uploaddir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploaddir")

    @uploaddir.setter
    def uploaddir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploaddir", value)

    @property
    @pulumi.getter
    def uploadip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploadip")

    @uploadip.setter
    def uploadip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploadip", value)

    @property
    @pulumi.getter
    def uploadpass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploadpass")

    @uploadpass.setter
    def uploadpass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploadpass", value)

    @property
    @pulumi.getter
    def uploadport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uploadport")

    @uploadport.setter
    def uploadport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uploadport", value)

    @property
    @pulumi.getter
    def uploadsched(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploadsched")

    @uploadsched.setter
    def uploadsched(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploadsched", value)

    @property
    @pulumi.getter
    def uploadtime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploadtime")

    @uploadtime.setter
    def uploadtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploadtime", value)

    @property
    @pulumi.getter
    def uploadtype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploadtype")

    @uploadtype.setter
    def uploadtype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploadtype", value)

    @property
    @pulumi.getter
    def uploaduser(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uploaduser")

    @uploaduser.setter
    def uploaduser(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uploaduser", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class LogDiskSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 diskfull: Optional[pulumi.Input[str]] = None,
                 dlp_archive_quota: Optional[pulumi.Input[int]] = None,
                 full_final_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_first_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_second_warning_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ips_archive: Optional[pulumi.Input[str]] = None,
                 log_quota: Optional[pulumi.Input[int]] = None,
                 max_log_file_size: Optional[pulumi.Input[int]] = None,
                 max_policy_packet_capture_size: Optional[pulumi.Input[int]] = None,
                 maximum_log_age: Optional[pulumi.Input[int]] = None,
                 report_quota: Optional[pulumi.Input[int]] = None,
                 roll_day: Optional[pulumi.Input[str]] = None,
                 roll_schedule: Optional[pulumi.Input[str]] = None,
                 roll_time: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload: Optional[pulumi.Input[str]] = None,
                 upload_delete_files: Optional[pulumi.Input[str]] = None,
                 upload_destination: Optional[pulumi.Input[str]] = None,
                 upload_ssl_conn: Optional[pulumi.Input[str]] = None,
                 uploaddir: Optional[pulumi.Input[str]] = None,
                 uploadip: Optional[pulumi.Input[str]] = None,
                 uploadpass: Optional[pulumi.Input[str]] = None,
                 uploadport: Optional[pulumi.Input[int]] = None,
                 uploadsched: Optional[pulumi.Input[str]] = None,
                 uploadtime: Optional[pulumi.Input[str]] = None,
                 uploadtype: Optional[pulumi.Input[str]] = None,
                 uploaduser: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LogDiskSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogDiskSettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogDiskSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogDiskSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogDiskSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 diskfull: Optional[pulumi.Input[str]] = None,
                 dlp_archive_quota: Optional[pulumi.Input[int]] = None,
                 full_final_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_first_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_second_warning_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ips_archive: Optional[pulumi.Input[str]] = None,
                 log_quota: Optional[pulumi.Input[int]] = None,
                 max_log_file_size: Optional[pulumi.Input[int]] = None,
                 max_policy_packet_capture_size: Optional[pulumi.Input[int]] = None,
                 maximum_log_age: Optional[pulumi.Input[int]] = None,
                 report_quota: Optional[pulumi.Input[int]] = None,
                 roll_day: Optional[pulumi.Input[str]] = None,
                 roll_schedule: Optional[pulumi.Input[str]] = None,
                 roll_time: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload: Optional[pulumi.Input[str]] = None,
                 upload_delete_files: Optional[pulumi.Input[str]] = None,
                 upload_destination: Optional[pulumi.Input[str]] = None,
                 upload_ssl_conn: Optional[pulumi.Input[str]] = None,
                 uploaddir: Optional[pulumi.Input[str]] = None,
                 uploadip: Optional[pulumi.Input[str]] = None,
                 uploadpass: Optional[pulumi.Input[str]] = None,
                 uploadport: Optional[pulumi.Input[int]] = None,
                 uploadsched: Optional[pulumi.Input[str]] = None,
                 uploadtime: Optional[pulumi.Input[str]] = None,
                 uploadtype: Optional[pulumi.Input[str]] = None,
                 uploaduser: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogDiskSettingArgs.__new__(LogDiskSettingArgs)

            __props__.__dict__["diskfull"] = diskfull
            __props__.__dict__["dlp_archive_quota"] = dlp_archive_quota
            __props__.__dict__["full_final_warning_threshold"] = full_final_warning_threshold
            __props__.__dict__["full_first_warning_threshold"] = full_first_warning_threshold
            __props__.__dict__["full_second_warning_threshold"] = full_second_warning_threshold
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["ips_archive"] = ips_archive
            __props__.__dict__["log_quota"] = log_quota
            __props__.__dict__["max_log_file_size"] = max_log_file_size
            __props__.__dict__["max_policy_packet_capture_size"] = max_policy_packet_capture_size
            __props__.__dict__["maximum_log_age"] = maximum_log_age
            __props__.__dict__["report_quota"] = report_quota
            __props__.__dict__["roll_day"] = roll_day
            __props__.__dict__["roll_schedule"] = roll_schedule
            __props__.__dict__["roll_time"] = roll_time
            __props__.__dict__["source_ip"] = source_ip
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["upload"] = upload
            __props__.__dict__["upload_delete_files"] = upload_delete_files
            __props__.__dict__["upload_destination"] = upload_destination
            __props__.__dict__["upload_ssl_conn"] = upload_ssl_conn
            __props__.__dict__["uploaddir"] = uploaddir
            __props__.__dict__["uploadip"] = uploadip
            __props__.__dict__["uploadpass"] = None if uploadpass is None else pulumi.Output.secret(uploadpass)
            __props__.__dict__["uploadport"] = uploadport
            __props__.__dict__["uploadsched"] = uploadsched
            __props__.__dict__["uploadtime"] = uploadtime
            __props__.__dict__["uploadtype"] = uploadtype
            __props__.__dict__["uploaduser"] = uploaduser
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["uploadpass"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(LogDiskSetting, __self__).__init__(
            'fortios:index/logDiskSetting:LogDiskSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            diskfull: Optional[pulumi.Input[str]] = None,
            dlp_archive_quota: Optional[pulumi.Input[int]] = None,
            full_final_warning_threshold: Optional[pulumi.Input[int]] = None,
            full_first_warning_threshold: Optional[pulumi.Input[int]] = None,
            full_second_warning_threshold: Optional[pulumi.Input[int]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            ips_archive: Optional[pulumi.Input[str]] = None,
            log_quota: Optional[pulumi.Input[int]] = None,
            max_log_file_size: Optional[pulumi.Input[int]] = None,
            max_policy_packet_capture_size: Optional[pulumi.Input[int]] = None,
            maximum_log_age: Optional[pulumi.Input[int]] = None,
            report_quota: Optional[pulumi.Input[int]] = None,
            roll_day: Optional[pulumi.Input[str]] = None,
            roll_schedule: Optional[pulumi.Input[str]] = None,
            roll_time: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            upload: Optional[pulumi.Input[str]] = None,
            upload_delete_files: Optional[pulumi.Input[str]] = None,
            upload_destination: Optional[pulumi.Input[str]] = None,
            upload_ssl_conn: Optional[pulumi.Input[str]] = None,
            uploaddir: Optional[pulumi.Input[str]] = None,
            uploadip: Optional[pulumi.Input[str]] = None,
            uploadpass: Optional[pulumi.Input[str]] = None,
            uploadport: Optional[pulumi.Input[int]] = None,
            uploadsched: Optional[pulumi.Input[str]] = None,
            uploadtime: Optional[pulumi.Input[str]] = None,
            uploadtype: Optional[pulumi.Input[str]] = None,
            uploaduser: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'LogDiskSetting':
        """
        Get an existing LogDiskSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogDiskSettingState.__new__(_LogDiskSettingState)

        __props__.__dict__["diskfull"] = diskfull
        __props__.__dict__["dlp_archive_quota"] = dlp_archive_quota
        __props__.__dict__["full_final_warning_threshold"] = full_final_warning_threshold
        __props__.__dict__["full_first_warning_threshold"] = full_first_warning_threshold
        __props__.__dict__["full_second_warning_threshold"] = full_second_warning_threshold
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["ips_archive"] = ips_archive
        __props__.__dict__["log_quota"] = log_quota
        __props__.__dict__["max_log_file_size"] = max_log_file_size
        __props__.__dict__["max_policy_packet_capture_size"] = max_policy_packet_capture_size
        __props__.__dict__["maximum_log_age"] = maximum_log_age
        __props__.__dict__["report_quota"] = report_quota
        __props__.__dict__["roll_day"] = roll_day
        __props__.__dict__["roll_schedule"] = roll_schedule
        __props__.__dict__["roll_time"] = roll_time
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["status"] = status
        __props__.__dict__["upload"] = upload
        __props__.__dict__["upload_delete_files"] = upload_delete_files
        __props__.__dict__["upload_destination"] = upload_destination
        __props__.__dict__["upload_ssl_conn"] = upload_ssl_conn
        __props__.__dict__["uploaddir"] = uploaddir
        __props__.__dict__["uploadip"] = uploadip
        __props__.__dict__["uploadpass"] = uploadpass
        __props__.__dict__["uploadport"] = uploadport
        __props__.__dict__["uploadsched"] = uploadsched
        __props__.__dict__["uploadtime"] = uploadtime
        __props__.__dict__["uploadtype"] = uploadtype
        __props__.__dict__["uploaduser"] = uploaduser
        __props__.__dict__["vdomparam"] = vdomparam
        return LogDiskSetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def diskfull(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diskfull")

    @property
    @pulumi.getter(name="dlpArchiveQuota")
    def dlp_archive_quota(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dlp_archive_quota")

    @property
    @pulumi.getter(name="fullFinalWarningThreshold")
    def full_final_warning_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "full_final_warning_threshold")

    @property
    @pulumi.getter(name="fullFirstWarningThreshold")
    def full_first_warning_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "full_first_warning_threshold")

    @property
    @pulumi.getter(name="fullSecondWarningThreshold")
    def full_second_warning_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "full_second_warning_threshold")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="ipsArchive")
    def ips_archive(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ips_archive")

    @property
    @pulumi.getter(name="logQuota")
    def log_quota(self) -> pulumi.Output[int]:
        return pulumi.get(self, "log_quota")

    @property
    @pulumi.getter(name="maxLogFileSize")
    def max_log_file_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_log_file_size")

    @property
    @pulumi.getter(name="maxPolicyPacketCaptureSize")
    def max_policy_packet_capture_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_policy_packet_capture_size")

    @property
    @pulumi.getter(name="maximumLogAge")
    def maximum_log_age(self) -> pulumi.Output[int]:
        return pulumi.get(self, "maximum_log_age")

    @property
    @pulumi.getter(name="reportQuota")
    def report_quota(self) -> pulumi.Output[int]:
        return pulumi.get(self, "report_quota")

    @property
    @pulumi.getter(name="rollDay")
    def roll_day(self) -> pulumi.Output[str]:
        return pulumi.get(self, "roll_day")

    @property
    @pulumi.getter(name="rollSchedule")
    def roll_schedule(self) -> pulumi.Output[str]:
        return pulumi.get(self, "roll_schedule")

    @property
    @pulumi.getter(name="rollTime")
    def roll_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "roll_time")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def upload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upload")

    @property
    @pulumi.getter(name="uploadDeleteFiles")
    def upload_delete_files(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upload_delete_files")

    @property
    @pulumi.getter(name="uploadDestination")
    def upload_destination(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upload_destination")

    @property
    @pulumi.getter(name="uploadSslConn")
    def upload_ssl_conn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upload_ssl_conn")

    @property
    @pulumi.getter
    def uploaddir(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uploaddir")

    @property
    @pulumi.getter
    def uploadip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uploadip")

    @property
    @pulumi.getter
    def uploadpass(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "uploadpass")

    @property
    @pulumi.getter
    def uploadport(self) -> pulumi.Output[int]:
        return pulumi.get(self, "uploadport")

    @property
    @pulumi.getter
    def uploadsched(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uploadsched")

    @property
    @pulumi.getter
    def uploadtime(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uploadtime")

    @property
    @pulumi.getter
    def uploadtype(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uploadtype")

    @property
    @pulumi.getter
    def uploaduser(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uploaduser")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

