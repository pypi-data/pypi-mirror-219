# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpnIpsecManualkeyArgs', 'VpnIpsecManualkey']

@pulumi.input_type
class VpnIpsecManualkeyArgs:
    def __init__(__self__, *,
                 authentication: pulumi.Input[str],
                 encryption: pulumi.Input[str],
                 interface: pulumi.Input[str],
                 remote_gw: pulumi.Input[str],
                 authkey: Optional[pulumi.Input[str]] = None,
                 enckey: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 localspi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remotespi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpnIpsecManualkey resource.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "remote_gw", remote_gw)
        if authkey is not None:
            pulumi.set(__self__, "authkey", authkey)
        if enckey is not None:
            pulumi.set(__self__, "enckey", enckey)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if localspi is not None:
            pulumi.set(__self__, "localspi", localspi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if npu_offload is not None:
            pulumi.set(__self__, "npu_offload", npu_offload)
        if remotespi is not None:
            pulumi.set(__self__, "remotespi", remotespi)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: pulumi.Input[str]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def encryption(self) -> pulumi.Input[str]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Input[str]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter
    def authkey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authkey")

    @authkey.setter
    def authkey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authkey", value)

    @property
    @pulumi.getter
    def enckey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enckey")

    @enckey.setter
    def enckey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enckey", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter
    def localspi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "localspi")

    @localspi.setter
    def localspi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localspi", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npu_offload")

    @npu_offload.setter
    def npu_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npu_offload", value)

    @property
    @pulumi.getter
    def remotespi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remotespi")

    @remotespi.setter
    def remotespi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remotespi", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _VpnIpsecManualkeyState:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authkey: Optional[pulumi.Input[str]] = None,
                 enckey: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 localspi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remotespi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpnIpsecManualkey resources.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authkey is not None:
            pulumi.set(__self__, "authkey", authkey)
        if enckey is not None:
            pulumi.set(__self__, "enckey", enckey)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if localspi is not None:
            pulumi.set(__self__, "localspi", localspi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if npu_offload is not None:
            pulumi.set(__self__, "npu_offload", npu_offload)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if remotespi is not None:
            pulumi.set(__self__, "remotespi", remotespi)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def authkey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authkey")

    @authkey.setter
    def authkey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authkey", value)

    @property
    @pulumi.getter
    def enckey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enckey")

    @enckey.setter
    def enckey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enckey", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter
    def localspi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "localspi")

    @localspi.setter
    def localspi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localspi", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npu_offload")

    @npu_offload.setter
    def npu_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npu_offload", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter
    def remotespi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remotespi")

    @remotespi.setter
    def remotespi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remotespi", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class VpnIpsecManualkey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authkey: Optional[pulumi.Input[str]] = None,
                 enckey: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 localspi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remotespi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VpnIpsecManualkey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpnIpsecManualkeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpnIpsecManualkey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpnIpsecManualkeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnIpsecManualkeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authkey: Optional[pulumi.Input[str]] = None,
                 enckey: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 localspi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remotespi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnIpsecManualkeyArgs.__new__(VpnIpsecManualkeyArgs)

            if authentication is None and not opts.urn:
                raise TypeError("Missing required property 'authentication'")
            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["authkey"] = None if authkey is None else pulumi.Output.secret(authkey)
            __props__.__dict__["enckey"] = None if enckey is None else pulumi.Output.secret(enckey)
            if encryption is None and not opts.urn:
                raise TypeError("Missing required property 'encryption'")
            __props__.__dict__["encryption"] = encryption
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["local_gw"] = local_gw
            __props__.__dict__["localspi"] = localspi
            __props__.__dict__["name"] = name
            __props__.__dict__["npu_offload"] = npu_offload
            if remote_gw is None and not opts.urn:
                raise TypeError("Missing required property 'remote_gw'")
            __props__.__dict__["remote_gw"] = remote_gw
            __props__.__dict__["remotespi"] = remotespi
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authkey", "enckey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(VpnIpsecManualkey, __self__).__init__(
            'fortios:index/vpnIpsecManualkey:VpnIpsecManualkey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            authkey: Optional[pulumi.Input[str]] = None,
            enckey: Optional[pulumi.Input[str]] = None,
            encryption: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            local_gw: Optional[pulumi.Input[str]] = None,
            localspi: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            npu_offload: Optional[pulumi.Input[str]] = None,
            remote_gw: Optional[pulumi.Input[str]] = None,
            remotespi: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'VpnIpsecManualkey':
        """
        Get an existing VpnIpsecManualkey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnIpsecManualkeyState.__new__(_VpnIpsecManualkeyState)

        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["authkey"] = authkey
        __props__.__dict__["enckey"] = enckey
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["interface"] = interface
        __props__.__dict__["local_gw"] = local_gw
        __props__.__dict__["localspi"] = localspi
        __props__.__dict__["name"] = name
        __props__.__dict__["npu_offload"] = npu_offload
        __props__.__dict__["remote_gw"] = remote_gw
        __props__.__dict__["remotespi"] = remotespi
        __props__.__dict__["vdomparam"] = vdomparam
        return VpnIpsecManualkey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def authkey(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authkey")

    @property
    @pulumi.getter
    def enckey(self) -> pulumi.Output[str]:
        return pulumi.get(self, "enckey")

    @property
    @pulumi.getter
    def encryption(self) -> pulumi.Output[str]:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_gw")

    @property
    @pulumi.getter
    def localspi(self) -> pulumi.Output[str]:
        return pulumi.get(self, "localspi")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "npu_offload")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter
    def remotespi(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remotespi")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

