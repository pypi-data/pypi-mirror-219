# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetFirewallScheduleRecurringResult',
    'AwaitableGetFirewallScheduleRecurringResult',
    'get_firewall_schedule_recurring',
    'get_firewall_schedule_recurring_output',
]

@pulumi.output_type
class GetFirewallScheduleRecurringResult:
    """
    A collection of values returned by GetFirewallScheduleRecurring.
    """
    def __init__(__self__, color=None, day=None, end=None, fabric_object=None, id=None, name=None, start=None, vdomparam=None):
        if color and not isinstance(color, int):
            raise TypeError("Expected argument 'color' to be a int")
        pulumi.set(__self__, "color", color)
        if day and not isinstance(day, str):
            raise TypeError("Expected argument 'day' to be a str")
        pulumi.set(__self__, "day", day)
        if end and not isinstance(end, str):
            raise TypeError("Expected argument 'end' to be a str")
        pulumi.set(__self__, "end", end)
        if fabric_object and not isinstance(fabric_object, str):
            raise TypeError("Expected argument 'fabric_object' to be a str")
        pulumi.set(__self__, "fabric_object", fabric_object)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if start and not isinstance(start, str):
            raise TypeError("Expected argument 'start' to be a str")
        pulumi.set(__self__, "start", start)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def color(self) -> int:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def end(self) -> str:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> str:
        return pulumi.get(self, "fabric_object")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> str:
        return pulumi.get(self, "start")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetFirewallScheduleRecurringResult(GetFirewallScheduleRecurringResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallScheduleRecurringResult(
            color=self.color,
            day=self.day,
            end=self.end,
            fabric_object=self.fabric_object,
            id=self.id,
            name=self.name,
            start=self.start,
            vdomparam=self.vdomparam)


def get_firewall_schedule_recurring(name: Optional[str] = None,
                                    vdomparam: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallScheduleRecurringResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getFirewallScheduleRecurring:GetFirewallScheduleRecurring', __args__, opts=opts, typ=GetFirewallScheduleRecurringResult).value

    return AwaitableGetFirewallScheduleRecurringResult(
        color=pulumi.get(__ret__, 'color'),
        day=pulumi.get(__ret__, 'day'),
        end=pulumi.get(__ret__, 'end'),
        fabric_object=pulumi.get(__ret__, 'fabric_object'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        start=pulumi.get(__ret__, 'start'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_firewall_schedule_recurring)
def get_firewall_schedule_recurring_output(name: Optional[pulumi.Input[str]] = None,
                                           vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallScheduleRecurringResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
