# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['UserLocalArgs', 'UserLocal']

@pulumi.input_type
class UserLocalArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 passwd_policy: Optional[pulumi.Input[str]] = None,
                 passwd_time: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 tacacs_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 username_case_insensitivity: Optional[pulumi.Input[str]] = None,
                 username_case_sensitivity: Optional[pulumi.Input[str]] = None,
                 username_sensitivity: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 workstation: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserLocal resource.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if auth_concurrent_override is not None:
            pulumi.set(__self__, "auth_concurrent_override", auth_concurrent_override)
        if auth_concurrent_value is not None:
            pulumi.set(__self__, "auth_concurrent_value", auth_concurrent_value)
        if authtimeout is not None:
            pulumi.set(__self__, "authtimeout", authtimeout)
        if email_to is not None:
            pulumi.set(__self__, "email_to", email_to)
        if fortitoken is not None:
            pulumi.set(__self__, "fortitoken", fortitoken)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passwd is not None:
            pulumi.set(__self__, "passwd", passwd)
        if passwd_policy is not None:
            pulumi.set(__self__, "passwd_policy", passwd_policy)
        if passwd_time is not None:
            pulumi.set(__self__, "passwd_time", passwd_time)
        if ppk_identity is not None:
            pulumi.set(__self__, "ppk_identity", ppk_identity)
        if ppk_secret is not None:
            pulumi.set(__self__, "ppk_secret", ppk_secret)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if sms_custom_server is not None:
            pulumi.set(__self__, "sms_custom_server", sms_custom_server)
        if sms_phone is not None:
            pulumi.set(__self__, "sms_phone", sms_phone)
        if sms_server is not None:
            pulumi.set(__self__, "sms_server", sms_server)
        if tacacs_server is not None:
            pulumi.set(__self__, "tacacs_server", tacacs_server)
        if two_factor is not None:
            pulumi.set(__self__, "two_factor", two_factor)
        if two_factor_authentication is not None:
            pulumi.set(__self__, "two_factor_authentication", two_factor_authentication)
        if two_factor_notification is not None:
            pulumi.set(__self__, "two_factor_notification", two_factor_notification)
        if username_case_insensitivity is not None:
            pulumi.set(__self__, "username_case_insensitivity", username_case_insensitivity)
        if username_case_sensitivity is not None:
            pulumi.set(__self__, "username_case_sensitivity", username_case_sensitivity)
        if username_sensitivity is not None:
            pulumi.set(__self__, "username_sensitivity", username_sensitivity)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if workstation is not None:
            pulumi.set(__self__, "workstation", workstation)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="authConcurrentOverride")
    def auth_concurrent_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_concurrent_override")

    @auth_concurrent_override.setter
    def auth_concurrent_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_concurrent_override", value)

    @property
    @pulumi.getter(name="authConcurrentValue")
    def auth_concurrent_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_concurrent_value")

    @auth_concurrent_value.setter
    def auth_concurrent_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_concurrent_value", value)

    @property
    @pulumi.getter
    def authtimeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "authtimeout")

    @authtimeout.setter
    def authtimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authtimeout", value)

    @property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_to")

    @email_to.setter
    def email_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_to", value)

    @property
    @pulumi.getter
    def fortitoken(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortitoken")

    @fortitoken.setter
    def fortitoken(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortitoken", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passwd")

    @passwd.setter
    def passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd", value)

    @property
    @pulumi.getter(name="passwdPolicy")
    def passwd_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passwd_policy")

    @passwd_policy.setter
    def passwd_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_policy", value)

    @property
    @pulumi.getter(name="passwdTime")
    def passwd_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passwd_time")

    @passwd_time.setter
    def passwd_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_time", value)

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppk_identity")

    @ppk_identity.setter
    def ppk_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_identity", value)

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppk_secret")

    @ppk_secret.setter
    def ppk_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_secret", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_custom_server")

    @sms_custom_server.setter
    def sms_custom_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_custom_server", value)

    @property
    @pulumi.getter(name="smsPhone")
    def sms_phone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_phone")

    @sms_phone.setter
    def sms_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_phone", value)

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_server")

    @sms_server.setter
    def sms_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_server", value)

    @property
    @pulumi.getter(name="tacacsServer")
    def tacacs_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tacacs_server")

    @tacacs_server.setter
    def tacacs_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tacacs_server", value)

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor")

    @two_factor.setter
    def two_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor", value)

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor_authentication")

    @two_factor_authentication.setter
    def two_factor_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_authentication", value)

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor_notification")

    @two_factor_notification.setter
    def two_factor_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_notification", value)

    @property
    @pulumi.getter(name="usernameCaseInsensitivity")
    def username_case_insensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_case_insensitivity")

    @username_case_insensitivity.setter
    def username_case_insensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_case_insensitivity", value)

    @property
    @pulumi.getter(name="usernameCaseSensitivity")
    def username_case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_case_sensitivity")

    @username_case_sensitivity.setter
    def username_case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_case_sensitivity", value)

    @property
    @pulumi.getter(name="usernameSensitivity")
    def username_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_sensitivity")

    @username_sensitivity.setter
    def username_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_sensitivity", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def workstation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workstation")

    @workstation.setter
    def workstation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workstation", value)


@pulumi.input_type
class _UserLocalState:
    def __init__(__self__, *,
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 passwd_policy: Optional[pulumi.Input[str]] = None,
                 passwd_time: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tacacs_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username_case_insensitivity: Optional[pulumi.Input[str]] = None,
                 username_case_sensitivity: Optional[pulumi.Input[str]] = None,
                 username_sensitivity: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 workstation: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserLocal resources.
        """
        if auth_concurrent_override is not None:
            pulumi.set(__self__, "auth_concurrent_override", auth_concurrent_override)
        if auth_concurrent_value is not None:
            pulumi.set(__self__, "auth_concurrent_value", auth_concurrent_value)
        if authtimeout is not None:
            pulumi.set(__self__, "authtimeout", authtimeout)
        if email_to is not None:
            pulumi.set(__self__, "email_to", email_to)
        if fortitoken is not None:
            pulumi.set(__self__, "fortitoken", fortitoken)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passwd is not None:
            pulumi.set(__self__, "passwd", passwd)
        if passwd_policy is not None:
            pulumi.set(__self__, "passwd_policy", passwd_policy)
        if passwd_time is not None:
            pulumi.set(__self__, "passwd_time", passwd_time)
        if ppk_identity is not None:
            pulumi.set(__self__, "ppk_identity", ppk_identity)
        if ppk_secret is not None:
            pulumi.set(__self__, "ppk_secret", ppk_secret)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if sms_custom_server is not None:
            pulumi.set(__self__, "sms_custom_server", sms_custom_server)
        if sms_phone is not None:
            pulumi.set(__self__, "sms_phone", sms_phone)
        if sms_server is not None:
            pulumi.set(__self__, "sms_server", sms_server)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tacacs_server is not None:
            pulumi.set(__self__, "tacacs_server", tacacs_server)
        if two_factor is not None:
            pulumi.set(__self__, "two_factor", two_factor)
        if two_factor_authentication is not None:
            pulumi.set(__self__, "two_factor_authentication", two_factor_authentication)
        if two_factor_notification is not None:
            pulumi.set(__self__, "two_factor_notification", two_factor_notification)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username_case_insensitivity is not None:
            pulumi.set(__self__, "username_case_insensitivity", username_case_insensitivity)
        if username_case_sensitivity is not None:
            pulumi.set(__self__, "username_case_sensitivity", username_case_sensitivity)
        if username_sensitivity is not None:
            pulumi.set(__self__, "username_sensitivity", username_sensitivity)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if workstation is not None:
            pulumi.set(__self__, "workstation", workstation)

    @property
    @pulumi.getter(name="authConcurrentOverride")
    def auth_concurrent_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_concurrent_override")

    @auth_concurrent_override.setter
    def auth_concurrent_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_concurrent_override", value)

    @property
    @pulumi.getter(name="authConcurrentValue")
    def auth_concurrent_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_concurrent_value")

    @auth_concurrent_value.setter
    def auth_concurrent_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_concurrent_value", value)

    @property
    @pulumi.getter
    def authtimeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "authtimeout")

    @authtimeout.setter
    def authtimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authtimeout", value)

    @property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_to")

    @email_to.setter
    def email_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_to", value)

    @property
    @pulumi.getter
    def fortitoken(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortitoken")

    @fortitoken.setter
    def fortitoken(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortitoken", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passwd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passwd")

    @passwd.setter
    def passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd", value)

    @property
    @pulumi.getter(name="passwdPolicy")
    def passwd_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passwd_policy")

    @passwd_policy.setter
    def passwd_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_policy", value)

    @property
    @pulumi.getter(name="passwdTime")
    def passwd_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passwd_time")

    @passwd_time.setter
    def passwd_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_time", value)

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppk_identity")

    @ppk_identity.setter
    def ppk_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_identity", value)

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppk_secret")

    @ppk_secret.setter
    def ppk_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_secret", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_custom_server")

    @sms_custom_server.setter
    def sms_custom_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_custom_server", value)

    @property
    @pulumi.getter(name="smsPhone")
    def sms_phone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_phone")

    @sms_phone.setter
    def sms_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_phone", value)

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_server")

    @sms_server.setter
    def sms_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tacacsServer")
    def tacacs_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tacacs_server")

    @tacacs_server.setter
    def tacacs_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tacacs_server", value)

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor")

    @two_factor.setter
    def two_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor", value)

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor_authentication")

    @two_factor_authentication.setter
    def two_factor_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_authentication", value)

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "two_factor_notification")

    @two_factor_notification.setter
    def two_factor_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_notification", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="usernameCaseInsensitivity")
    def username_case_insensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_case_insensitivity")

    @username_case_insensitivity.setter
    def username_case_insensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_case_insensitivity", value)

    @property
    @pulumi.getter(name="usernameCaseSensitivity")
    def username_case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_case_sensitivity")

    @username_case_sensitivity.setter
    def username_case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_case_sensitivity", value)

    @property
    @pulumi.getter(name="usernameSensitivity")
    def username_sensitivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username_sensitivity")

    @username_sensitivity.setter
    def username_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_sensitivity", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def workstation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workstation")

    @workstation.setter
    def workstation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workstation", value)


class UserLocal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 passwd_policy: Optional[pulumi.Input[str]] = None,
                 passwd_time: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tacacs_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username_case_insensitivity: Optional[pulumi.Input[str]] = None,
                 username_case_sensitivity: Optional[pulumi.Input[str]] = None,
                 username_sensitivity: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 workstation: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a UserLocal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserLocalArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UserLocal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserLocalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserLocalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 passwd_policy: Optional[pulumi.Input[str]] = None,
                 passwd_time: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tacacs_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username_case_insensitivity: Optional[pulumi.Input[str]] = None,
                 username_case_sensitivity: Optional[pulumi.Input[str]] = None,
                 username_sensitivity: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 workstation: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserLocalArgs.__new__(UserLocalArgs)

            __props__.__dict__["auth_concurrent_override"] = auth_concurrent_override
            __props__.__dict__["auth_concurrent_value"] = auth_concurrent_value
            __props__.__dict__["authtimeout"] = authtimeout
            __props__.__dict__["email_to"] = email_to
            __props__.__dict__["fortitoken"] = fortitoken
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["ldap_server"] = ldap_server
            __props__.__dict__["name"] = name
            __props__.__dict__["passwd"] = None if passwd is None else pulumi.Output.secret(passwd)
            __props__.__dict__["passwd_policy"] = passwd_policy
            __props__.__dict__["passwd_time"] = passwd_time
            __props__.__dict__["ppk_identity"] = ppk_identity
            __props__.__dict__["ppk_secret"] = None if ppk_secret is None else pulumi.Output.secret(ppk_secret)
            __props__.__dict__["radius_server"] = radius_server
            __props__.__dict__["sms_custom_server"] = sms_custom_server
            __props__.__dict__["sms_phone"] = sms_phone
            __props__.__dict__["sms_server"] = sms_server
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["tacacs_server"] = tacacs_server
            __props__.__dict__["two_factor"] = two_factor
            __props__.__dict__["two_factor_authentication"] = two_factor_authentication
            __props__.__dict__["two_factor_notification"] = two_factor_notification
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["username_case_insensitivity"] = username_case_insensitivity
            __props__.__dict__["username_case_sensitivity"] = username_case_sensitivity
            __props__.__dict__["username_sensitivity"] = username_sensitivity
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["workstation"] = workstation
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["passwd", "ppkSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(UserLocal, __self__).__init__(
            'fortios:index/userLocal:UserLocal',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_concurrent_override: Optional[pulumi.Input[str]] = None,
            auth_concurrent_value: Optional[pulumi.Input[int]] = None,
            authtimeout: Optional[pulumi.Input[int]] = None,
            email_to: Optional[pulumi.Input[str]] = None,
            fortitoken: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            ldap_server: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            passwd: Optional[pulumi.Input[str]] = None,
            passwd_policy: Optional[pulumi.Input[str]] = None,
            passwd_time: Optional[pulumi.Input[str]] = None,
            ppk_identity: Optional[pulumi.Input[str]] = None,
            ppk_secret: Optional[pulumi.Input[str]] = None,
            radius_server: Optional[pulumi.Input[str]] = None,
            sms_custom_server: Optional[pulumi.Input[str]] = None,
            sms_phone: Optional[pulumi.Input[str]] = None,
            sms_server: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tacacs_server: Optional[pulumi.Input[str]] = None,
            two_factor: Optional[pulumi.Input[str]] = None,
            two_factor_authentication: Optional[pulumi.Input[str]] = None,
            two_factor_notification: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            username_case_insensitivity: Optional[pulumi.Input[str]] = None,
            username_case_sensitivity: Optional[pulumi.Input[str]] = None,
            username_sensitivity: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            workstation: Optional[pulumi.Input[str]] = None) -> 'UserLocal':
        """
        Get an existing UserLocal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserLocalState.__new__(_UserLocalState)

        __props__.__dict__["auth_concurrent_override"] = auth_concurrent_override
        __props__.__dict__["auth_concurrent_value"] = auth_concurrent_value
        __props__.__dict__["authtimeout"] = authtimeout
        __props__.__dict__["email_to"] = email_to
        __props__.__dict__["fortitoken"] = fortitoken
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["ldap_server"] = ldap_server
        __props__.__dict__["name"] = name
        __props__.__dict__["passwd"] = passwd
        __props__.__dict__["passwd_policy"] = passwd_policy
        __props__.__dict__["passwd_time"] = passwd_time
        __props__.__dict__["ppk_identity"] = ppk_identity
        __props__.__dict__["ppk_secret"] = ppk_secret
        __props__.__dict__["radius_server"] = radius_server
        __props__.__dict__["sms_custom_server"] = sms_custom_server
        __props__.__dict__["sms_phone"] = sms_phone
        __props__.__dict__["sms_server"] = sms_server
        __props__.__dict__["status"] = status
        __props__.__dict__["tacacs_server"] = tacacs_server
        __props__.__dict__["two_factor"] = two_factor
        __props__.__dict__["two_factor_authentication"] = two_factor_authentication
        __props__.__dict__["two_factor_notification"] = two_factor_notification
        __props__.__dict__["type"] = type
        __props__.__dict__["username_case_insensitivity"] = username_case_insensitivity
        __props__.__dict__["username_case_sensitivity"] = username_case_sensitivity
        __props__.__dict__["username_sensitivity"] = username_sensitivity
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["workstation"] = workstation
        return UserLocal(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authConcurrentOverride")
    def auth_concurrent_override(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_concurrent_override")

    @property
    @pulumi.getter(name="authConcurrentValue")
    def auth_concurrent_value(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auth_concurrent_value")

    @property
    @pulumi.getter
    def authtimeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "authtimeout")

    @property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> pulumi.Output[str]:
        return pulumi.get(self, "email_to")

    @property
    @pulumi.getter
    def fortitoken(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortitoken")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ldap_server")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def passwd(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "passwd")

    @property
    @pulumi.getter(name="passwdPolicy")
    def passwd_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "passwd_policy")

    @property
    @pulumi.getter(name="passwdTime")
    def passwd_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "passwd_time")

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ppk_identity")

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ppk_secret")

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radius_server")

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sms_custom_server")

    @property
    @pulumi.getter(name="smsPhone")
    def sms_phone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sms_phone")

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sms_server")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tacacsServer")
    def tacacs_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tacacs_server")

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "two_factor")

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> pulumi.Output[str]:
        return pulumi.get(self, "two_factor_authentication")

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> pulumi.Output[str]:
        return pulumi.get(self, "two_factor_notification")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usernameCaseInsensitivity")
    def username_case_insensitivity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "username_case_insensitivity")

    @property
    @pulumi.getter(name="usernameCaseSensitivity")
    def username_case_sensitivity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "username_case_sensitivity")

    @property
    @pulumi.getter(name="usernameSensitivity")
    def username_sensitivity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "username_sensitivity")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def workstation(self) -> pulumi.Output[str]:
        return pulumi.get(self, "workstation")

