# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AuthenticationRuleArgs', 'AuthenticationRule']

@pulumi.input_type
class AuthenticationRuleArgs:
    def __init__(__self__, *,
                 active_auth_method: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddr6Args']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddrArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_based: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddr6Args']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddrArgs']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcintfArgs']]]] = None,
                 sso_auth_method: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transaction_based: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_auth_cookie: Optional[pulumi.Input[str]] = None,
                 web_portal: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AuthenticationRule resource.
        """
        if active_auth_method is not None:
            pulumi.set(__self__, "active_auth_method", active_auth_method)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_based is not None:
            pulumi.set(__self__, "ip_based", ip_based)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if sso_auth_method is not None:
            pulumi.set(__self__, "sso_auth_method", sso_auth_method)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transaction_based is not None:
            pulumi.set(__self__, "transaction_based", transaction_based)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if web_auth_cookie is not None:
            pulumi.set(__self__, "web_auth_cookie", web_auth_cookie)
        if web_portal is not None:
            pulumi.set(__self__, "web_portal", web_portal)

    @property
    @pulumi.getter(name="activeAuthMethod")
    def active_auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "active_auth_method")

    @active_auth_method.setter
    def active_auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_auth_method", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddr6Args']]]]:
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddrArgs']]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipBased")
    def ip_based(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_based")

    @ip_based.setter
    def ip_based(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_based", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddr6Args']]]]:
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddrArgs']]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcintfArgs']]]]:
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="ssoAuthMethod")
    def sso_auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_auth_method")

    @sso_auth_method.setter
    def sso_auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_auth_method", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transactionBased")
    def transaction_based(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transaction_based")

    @transaction_based.setter
    def transaction_based(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transaction_based", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webAuthCookie")
    def web_auth_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_auth_cookie")

    @web_auth_cookie.setter
    def web_auth_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_auth_cookie", value)

    @property
    @pulumi.getter(name="webPortal")
    def web_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_portal")

    @web_portal.setter
    def web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_portal", value)


@pulumi.input_type
class _AuthenticationRuleState:
    def __init__(__self__, *,
                 active_auth_method: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddr6Args']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddrArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_based: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddr6Args']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddrArgs']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcintfArgs']]]] = None,
                 sso_auth_method: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transaction_based: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_auth_cookie: Optional[pulumi.Input[str]] = None,
                 web_portal: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AuthenticationRule resources.
        """
        if active_auth_method is not None:
            pulumi.set(__self__, "active_auth_method", active_auth_method)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_based is not None:
            pulumi.set(__self__, "ip_based", ip_based)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if sso_auth_method is not None:
            pulumi.set(__self__, "sso_auth_method", sso_auth_method)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transaction_based is not None:
            pulumi.set(__self__, "transaction_based", transaction_based)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if web_auth_cookie is not None:
            pulumi.set(__self__, "web_auth_cookie", web_auth_cookie)
        if web_portal is not None:
            pulumi.set(__self__, "web_portal", web_portal)

    @property
    @pulumi.getter(name="activeAuthMethod")
    def active_auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "active_auth_method")

    @active_auth_method.setter
    def active_auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_auth_method", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddr6Args']]]]:
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddrArgs']]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipBased")
    def ip_based(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_based")

    @ip_based.setter
    def ip_based(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_based", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddr6Args']]]]:
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddrArgs']]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcintfArgs']]]]:
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthenticationRuleSrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="ssoAuthMethod")
    def sso_auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_auth_method")

    @sso_auth_method.setter
    def sso_auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_auth_method", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transactionBased")
    def transaction_based(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transaction_based")

    @transaction_based.setter
    def transaction_based(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transaction_based", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webAuthCookie")
    def web_auth_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_auth_cookie")

    @web_auth_cookie.setter
    def web_auth_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_auth_cookie", value)

    @property
    @pulumi.getter(name="webPortal")
    def web_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_portal")

    @web_portal.setter
    def web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_portal", value)


class AuthenticationRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_auth_method: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleDstaddr6Args']]]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleDstaddrArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_based: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleSrcaddr6Args']]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleSrcaddrArgs']]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleSrcintfArgs']]]]] = None,
                 sso_auth_method: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transaction_based: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_auth_cookie: Optional[pulumi.Input[str]] = None,
                 web_portal: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AuthenticationRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AuthenticationRuleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AuthenticationRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AuthenticationRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthenticationRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_auth_method: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleDstaddr6Args']]]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleDstaddrArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_based: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleSrcaddr6Args']]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleSrcaddrArgs']]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleSrcintfArgs']]]]] = None,
                 sso_auth_method: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transaction_based: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_auth_cookie: Optional[pulumi.Input[str]] = None,
                 web_portal: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthenticationRuleArgs.__new__(AuthenticationRuleArgs)

            __props__.__dict__["active_auth_method"] = active_auth_method
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dstaddr6s"] = dstaddr6s
            __props__.__dict__["dstaddrs"] = dstaddrs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ip_based"] = ip_based
            __props__.__dict__["name"] = name
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["srcaddr6s"] = srcaddr6s
            __props__.__dict__["srcaddrs"] = srcaddrs
            __props__.__dict__["srcintfs"] = srcintfs
            __props__.__dict__["sso_auth_method"] = sso_auth_method
            __props__.__dict__["status"] = status
            __props__.__dict__["transaction_based"] = transaction_based
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["web_auth_cookie"] = web_auth_cookie
            __props__.__dict__["web_portal"] = web_portal
        super(AuthenticationRule, __self__).__init__(
            'fortios:index/authenticationRule:AuthenticationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_auth_method: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleDstaddr6Args']]]]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleDstaddrArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ip_based: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleSrcaddr6Args']]]]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleSrcaddrArgs']]]]] = None,
            srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AuthenticationRuleSrcintfArgs']]]]] = None,
            sso_auth_method: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            transaction_based: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            web_auth_cookie: Optional[pulumi.Input[str]] = None,
            web_portal: Optional[pulumi.Input[str]] = None) -> 'AuthenticationRule':
        """
        Get an existing AuthenticationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthenticationRuleState.__new__(_AuthenticationRuleState)

        __props__.__dict__["active_auth_method"] = active_auth_method
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dstaddr6s"] = dstaddr6s
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ip_based"] = ip_based
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["srcaddr6s"] = srcaddr6s
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["srcintfs"] = srcintfs
        __props__.__dict__["sso_auth_method"] = sso_auth_method
        __props__.__dict__["status"] = status
        __props__.__dict__["transaction_based"] = transaction_based
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["web_auth_cookie"] = web_auth_cookie
        __props__.__dict__["web_portal"] = web_portal
        return AuthenticationRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeAuthMethod")
    def active_auth_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "active_auth_method")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.AuthenticationRuleDstaddr6']]]:
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.AuthenticationRuleDstaddr']]]:
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ipBased")
    def ip_based(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_based")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.AuthenticationRuleSrcaddr6']]]:
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.AuthenticationRuleSrcaddr']]]:
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Output[Optional[Sequence['outputs.AuthenticationRuleSrcintf']]]:
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="ssoAuthMethod")
    def sso_auth_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sso_auth_method")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transactionBased")
    def transaction_based(self) -> pulumi.Output[str]:
        return pulumi.get(self, "transaction_based")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="webAuthCookie")
    def web_auth_cookie(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_auth_cookie")

    @property
    @pulumi.getter(name="webPortal")
    def web_portal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "web_portal")

