# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallPolicyArgs', 'FirewallPolicy']

@pulumi.input_type
class FirewallPolicyArgs:
    def __init__(__self__, *,
                 dstintfs: pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstintfArgs']]],
                 srcintfs: pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcintfArgs']]],
                 action: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppCategoryArgs']]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppGroupArgs']]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyApplicationArgs']]]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_path: Optional[pulumi.Input[str]] = None,
                 auth_redirect_addr: Optional[pulumi.Input[str]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyCustomLogFieldArgs']]]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 delay_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDeviceArgs']]]] = None,
                 diffserv_copy: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6_negate: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddr6Args']]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddrArgs']]]] = None,
                 dynamic_shaping: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_collect: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fec: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 fsso_agent_for_ntlm: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyFssoGroupArgs']]]] = None,
                 geoip_anycast: Optional[pulumi.Input[str]] = None,
                 geoip_match: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyGroupArgs']]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 identity_based_route: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomGroupArgs']]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomArgs']]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6GroupArgs']]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6NameArgs']]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service6_src: Optional[pulumi.Input[str]] = None,
                 internet_service6_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomGroupArgs']]]] = None,
                 internet_service6_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomArgs']]]] = None,
                 internet_service6_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcGroupArgs']]]] = None,
                 internet_service6_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcNameArgs']]]] = None,
                 internet_service6_src_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceNameArgs']]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomGroupArgs']]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomArgs']]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcGroupArgs']]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcIdArgs']]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcNameArgs']]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 learning_mode: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 match_vip: Optional[pulumi.Input[str]] = None,
                 match_vip_only: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 natinbound: Optional[pulumi.Input[str]] = None,
                 natip: Optional[pulumi.Input[str]] = None,
                 natoutbound: Optional[pulumi.Input[str]] = None,
                 network_service_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceDynamicArgs']]]] = None,
                 network_service_src_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceSrcDynamicArgs']]]] = None,
                 np_acceleration: Optional[pulumi.Input[str]] = None,
                 ntlm: Optional[pulumi.Input[str]] = None,
                 ntlm_enabled_browsers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNtlmEnabledBrowserArgs']]]] = None,
                 ntlm_guest: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 passive_wan_health_measurement: Optional[pulumi.Input[str]] = None,
                 pcp_inbound: Optional[pulumi.Input[str]] = None,
                 pcp_outbound: Optional[pulumi.Input[str]] = None,
                 pcp_poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPcpPoolnameArgs']]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 permit_stun_host: Optional[pulumi.Input[str]] = None,
                 policy_expiry: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date_utc: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolname6Args']]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolnameArgs']]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 reputation_direction: Optional[pulumi.Input[str]] = None,
                 reputation_direction6: Optional[pulumi.Input[str]] = None,
                 reputation_minimum: Optional[pulumi.Input[int]] = None,
                 reputation_minimum6: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rtp_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyRtpAddrArgs']]]] = None,
                 rtp_nat: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 schedule_timeout: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 send_deny_packet: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyServiceArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 sgt_check: Optional[pulumi.Input[str]] = None,
                 sgts: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySgtArgs']]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 src_vendor_macs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcVendorMacArgs']]]] = None,
                 srcaddr6_negate: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddr6Args']]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddrArgs']]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_mirror: Optional[pulumi.Input[str]] = None,
                 ssl_mirror_intfs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySslMirrorIntfArgs']]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 timeout_send_rst: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUrlCategoryArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUserArgs']]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 vlan_cos_fwd: Optional[pulumi.Input[int]] = None,
                 vlan_cos_rev: Optional[pulumi.Input[int]] = None,
                 vlan_filter: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 wsso: Optional[pulumi.Input[str]] = None,
                 ztna_device_ownership: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tag_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagSecondaryArgs']]]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagArgs']]]] = None,
                 ztna_geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaGeoTagArgs']]]] = None,
                 ztna_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ztna_status: Optional[pulumi.Input[str]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallPolicy resource.
        """
        pulumi.set(__self__, "dstintfs", dstintfs)
        pulumi.set(__self__, "srcintfs", srcintfs)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if anti_replay is not None:
            pulumi.set(__self__, "anti_replay", anti_replay)
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_groups is not None:
            pulumi.set(__self__, "app_groups", app_groups)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_path is not None:
            pulumi.set(__self__, "auth_path", auth_path)
        if auth_redirect_addr is not None:
            pulumi.set(__self__, "auth_redirect_addr", auth_redirect_addr)
        if auto_asic_offload is not None:
            pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if block_notification is not None:
            pulumi.set(__self__, "block_notification", block_notification)
        if captive_portal_exempt is not None:
            pulumi.set(__self__, "captive_portal_exempt", captive_portal_exempt)
        if capture_packet is not None:
            pulumi.set(__self__, "capture_packet", capture_packet)
        if cifs_profile is not None:
            pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_log_fields is not None:
            pulumi.set(__self__, "custom_log_fields", custom_log_fields)
        if decrypted_traffic_mirror is not None:
            pulumi.set(__self__, "decrypted_traffic_mirror", decrypted_traffic_mirror)
        if delay_tcp_npu_session is not None:
            pulumi.set(__self__, "delay_tcp_npu_session", delay_tcp_npu_session)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if diffserv_copy is not None:
            pulumi.set(__self__, "diffserv_copy", diffserv_copy)
        if diffserv_forward is not None:
            pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse is not None:
            pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward is not None:
            pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev is not None:
            pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if disclaimer is not None:
            pulumi.set(__self__, "disclaimer", disclaimer)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile is not None:
            pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if dsri is not None:
            pulumi.set(__self__, "dsri", dsri)
        if dstaddr6_negate is not None:
            pulumi.set(__self__, "dstaddr6_negate", dstaddr6_negate)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate is not None:
            pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dynamic_shaping is not None:
            pulumi.set(__self__, "dynamic_shaping", dynamic_shaping)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_collect is not None:
            pulumi.set(__self__, "email_collect", email_collect)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if fec is not None:
            pulumi.set(__self__, "fec", fec)
        if file_filter_profile is not None:
            pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if firewall_session_dirty is not None:
            pulumi.set(__self__, "firewall_session_dirty", firewall_session_dirty)
        if fixedport is not None:
            pulumi.set(__self__, "fixedport", fixedport)
        if fsso is not None:
            pulumi.set(__self__, "fsso", fsso)
        if fsso_agent_for_ntlm is not None:
            pulumi.set(__self__, "fsso_agent_for_ntlm", fsso_agent_for_ntlm)
        if fsso_groups is not None:
            pulumi.set(__self__, "fsso_groups", fsso_groups)
        if geoip_anycast is not None:
            pulumi.set(__self__, "geoip_anycast", geoip_anycast)
        if geoip_match is not None:
            pulumi.set(__self__, "geoip_match", geoip_match)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if global_label is not None:
            pulumi.set(__self__, "global_label", global_label)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if http_policy_redirect is not None:
            pulumi.set(__self__, "http_policy_redirect", http_policy_redirect)
        if icap_profile is not None:
            pulumi.set(__self__, "icap_profile", icap_profile)
        if identity_based_route is not None:
            pulumi.set(__self__, "identity_based_route", identity_based_route)
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service6 is not None:
            pulumi.set(__self__, "internet_service6", internet_service6)
        if internet_service6_custom_groups is not None:
            pulumi.set(__self__, "internet_service6_custom_groups", internet_service6_custom_groups)
        if internet_service6_customs is not None:
            pulumi.set(__self__, "internet_service6_customs", internet_service6_customs)
        if internet_service6_groups is not None:
            pulumi.set(__self__, "internet_service6_groups", internet_service6_groups)
        if internet_service6_names is not None:
            pulumi.set(__self__, "internet_service6_names", internet_service6_names)
        if internet_service6_negate is not None:
            pulumi.set(__self__, "internet_service6_negate", internet_service6_negate)
        if internet_service6_src is not None:
            pulumi.set(__self__, "internet_service6_src", internet_service6_src)
        if internet_service6_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service6_src_custom_groups", internet_service6_src_custom_groups)
        if internet_service6_src_customs is not None:
            pulumi.set(__self__, "internet_service6_src_customs", internet_service6_src_customs)
        if internet_service6_src_groups is not None:
            pulumi.set(__self__, "internet_service6_src_groups", internet_service6_src_groups)
        if internet_service6_src_names is not None:
            pulumi.set(__self__, "internet_service6_src_names", internet_service6_src_names)
        if internet_service6_src_negate is not None:
            pulumi.set(__self__, "internet_service6_src_negate", internet_service6_src_negate)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate is not None:
            pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service_src_custom_groups", internet_service_src_custom_groups)
        if internet_service_src_customs is not None:
            pulumi.set(__self__, "internet_service_src_customs", internet_service_src_customs)
        if internet_service_src_groups is not None:
            pulumi.set(__self__, "internet_service_src_groups", internet_service_src_groups)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names is not None:
            pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if internet_service_src_negate is not None:
            pulumi.set(__self__, "internet_service_src_negate", internet_service_src_negate)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_voip_filter is not None:
            pulumi.set(__self__, "ips_voip_filter", ips_voip_filter)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if learning_mode is not None:
            pulumi.set(__self__, "learning_mode", learning_mode)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if match_vip is not None:
            pulumi.set(__self__, "match_vip", match_vip)
        if match_vip_only is not None:
            pulumi.set(__self__, "match_vip_only", match_vip_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat46 is not None:
            pulumi.set(__self__, "nat46", nat46)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if natinbound is not None:
            pulumi.set(__self__, "natinbound", natinbound)
        if natip is not None:
            pulumi.set(__self__, "natip", natip)
        if natoutbound is not None:
            pulumi.set(__self__, "natoutbound", natoutbound)
        if network_service_dynamics is not None:
            pulumi.set(__self__, "network_service_dynamics", network_service_dynamics)
        if network_service_src_dynamics is not None:
            pulumi.set(__self__, "network_service_src_dynamics", network_service_src_dynamics)
        if np_acceleration is not None:
            pulumi.set(__self__, "np_acceleration", np_acceleration)
        if ntlm is not None:
            pulumi.set(__self__, "ntlm", ntlm)
        if ntlm_enabled_browsers is not None:
            pulumi.set(__self__, "ntlm_enabled_browsers", ntlm_enabled_browsers)
        if ntlm_guest is not None:
            pulumi.set(__self__, "ntlm_guest", ntlm_guest)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)
        if passive_wan_health_measurement is not None:
            pulumi.set(__self__, "passive_wan_health_measurement", passive_wan_health_measurement)
        if pcp_inbound is not None:
            pulumi.set(__self__, "pcp_inbound", pcp_inbound)
        if pcp_outbound is not None:
            pulumi.set(__self__, "pcp_outbound", pcp_outbound)
        if pcp_poolnames is not None:
            pulumi.set(__self__, "pcp_poolnames", pcp_poolnames)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if permit_any_host is not None:
            pulumi.set(__self__, "permit_any_host", permit_any_host)
        if permit_stun_host is not None:
            pulumi.set(__self__, "permit_stun_host", permit_stun_host)
        if policy_expiry is not None:
            pulumi.set(__self__, "policy_expiry", policy_expiry)
        if policy_expiry_date is not None:
            pulumi.set(__self__, "policy_expiry_date", policy_expiry_date)
        if policy_expiry_date_utc is not None:
            pulumi.set(__self__, "policy_expiry_date_utc", policy_expiry_date_utc)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if poolname6s is not None:
            pulumi.set(__self__, "poolname6s", poolname6s)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if profile_group is not None:
            pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if radius_mac_auth_bypass is not None:
            pulumi.set(__self__, "radius_mac_auth_bypass", radius_mac_auth_bypass)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if replacemsg_override_group is not None:
            pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if reputation_direction is not None:
            pulumi.set(__self__, "reputation_direction", reputation_direction)
        if reputation_direction6 is not None:
            pulumi.set(__self__, "reputation_direction6", reputation_direction6)
        if reputation_minimum is not None:
            pulumi.set(__self__, "reputation_minimum", reputation_minimum)
        if reputation_minimum6 is not None:
            pulumi.set(__self__, "reputation_minimum6", reputation_minimum6)
        if rsso is not None:
            pulumi.set(__self__, "rsso", rsso)
        if rtp_addrs is not None:
            pulumi.set(__self__, "rtp_addrs", rtp_addrs)
        if rtp_nat is not None:
            pulumi.set(__self__, "rtp_nat", rtp_nat)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if schedule_timeout is not None:
            pulumi.set(__self__, "schedule_timeout", schedule_timeout)
        if sctp_filter_profile is not None:
            pulumi.set(__self__, "sctp_filter_profile", sctp_filter_profile)
        if send_deny_packet is not None:
            pulumi.set(__self__, "send_deny_packet", send_deny_packet)
        if service_negate is not None:
            pulumi.set(__self__, "service_negate", service_negate)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if sgt_check is not None:
            pulumi.set(__self__, "sgt_check", sgt_check)
        if sgts is not None:
            pulumi.set(__self__, "sgts", sgts)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if src_vendor_macs is not None:
            pulumi.set(__self__, "src_vendor_macs", src_vendor_macs)
        if srcaddr6_negate is not None:
            pulumi.set(__self__, "srcaddr6_negate", srcaddr6_negate)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate is not None:
            pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if ssh_filter_profile is not None:
            pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect is not None:
            pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_mirror is not None:
            pulumi.set(__self__, "ssl_mirror", ssl_mirror)
        if ssl_mirror_intfs is not None:
            pulumi.set(__self__, "ssl_mirror_intfs", ssl_mirror_intfs)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_mss_receiver is not None:
            pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender is not None:
            pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if tcp_session_without_syn is not None:
            pulumi.set(__self__, "tcp_session_without_syn", tcp_session_without_syn)
        if timeout_send_rst is not None:
            pulumi.set(__self__, "timeout_send_rst", timeout_send_rst)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if tos_negate is not None:
            pulumi.set(__self__, "tos_negate", tos_negate)
        if traffic_shaper is not None:
            pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse is not None:
            pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_profile is not None:
            pulumi.set(__self__, "videofilter_profile", videofilter_profile)
        if vlan_cos_fwd is not None:
            pulumi.set(__self__, "vlan_cos_fwd", vlan_cos_fwd)
        if vlan_cos_rev is not None:
            pulumi.set(__self__, "vlan_cos_rev", vlan_cos_rev)
        if vlan_filter is not None:
            pulumi.set(__self__, "vlan_filter", vlan_filter)
        if voip_profile is not None:
            pulumi.set(__self__, "voip_profile", voip_profile)
        if vpntunnel is not None:
            pulumi.set(__self__, "vpntunnel", vpntunnel)
        if waf_profile is not None:
            pulumi.set(__self__, "waf_profile", waf_profile)
        if wanopt is not None:
            pulumi.set(__self__, "wanopt", wanopt)
        if wanopt_detection is not None:
            pulumi.set(__self__, "wanopt_detection", wanopt_detection)
        if wanopt_passive_opt is not None:
            pulumi.set(__self__, "wanopt_passive_opt", wanopt_passive_opt)
        if wanopt_peer is not None:
            pulumi.set(__self__, "wanopt_peer", wanopt_peer)
        if wanopt_profile is not None:
            pulumi.set(__self__, "wanopt_profile", wanopt_profile)
        if wccp is not None:
            pulumi.set(__self__, "wccp", wccp)
        if webcache is not None:
            pulumi.set(__self__, "webcache", webcache)
        if webcache_https is not None:
            pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server is not None:
            pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile is not None:
            pulumi.set(__self__, "webproxy_profile", webproxy_profile)
        if wsso is not None:
            pulumi.set(__self__, "wsso", wsso)
        if ztna_device_ownership is not None:
            pulumi.set(__self__, "ztna_device_ownership", ztna_device_ownership)
        if ztna_ems_tag_secondaries is not None:
            pulumi.set(__self__, "ztna_ems_tag_secondaries", ztna_ems_tag_secondaries)
        if ztna_ems_tags is not None:
            pulumi.set(__self__, "ztna_ems_tags", ztna_ems_tags)
        if ztna_geo_tags is not None:
            pulumi.set(__self__, "ztna_geo_tags", ztna_geo_tags)
        if ztna_policy_redirect is not None:
            pulumi.set(__self__, "ztna_policy_redirect", ztna_policy_redirect)
        if ztna_status is not None:
            pulumi.set(__self__, "ztna_status", ztna_status)
        if ztna_tags_match_logic is not None:
            pulumi.set(__self__, "ztna_tags_match_logic", ztna_tags_match_logic)

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstintfArgs']]]:
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstintfArgs']]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcintfArgs']]]:
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcintfArgs']]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anti_replay")

    @anti_replay.setter
    def anti_replay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anti_replay", value)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppCategoryArgs']]]]:
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppGroupArgs']]]]:
        return pulumi.get(self, "app_groups")

    @app_groups.setter
    def app_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppGroupArgs']]]]):
        pulumi.set(self, "app_groups", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authPath")
    def auth_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_path")

    @auth_path.setter
    def auth_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_path", value)

    @property
    @pulumi.getter(name="authRedirectAddr")
    def auth_redirect_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_redirect_addr")

    @auth_redirect_addr.setter
    def auth_redirect_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_redirect_addr", value)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_asic_offload")

    @auto_asic_offload.setter
    def auto_asic_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_asic_offload", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_notification")

    @block_notification.setter
    def block_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_notification", value)

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_exempt")

    @captive_portal_exempt.setter
    def captive_portal_exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_exempt", value)

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capture_packet")

    @capture_packet.setter
    def capture_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capture_packet", value)

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cifs_profile")

    @cifs_profile.setter
    def cifs_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cifs_profile", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyCustomLogFieldArgs']]]]:
        return pulumi.get(self, "custom_log_fields")

    @custom_log_fields.setter
    def custom_log_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyCustomLogFieldArgs']]]]):
        pulumi.set(self, "custom_log_fields", value)

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "decrypted_traffic_mirror")

    @decrypted_traffic_mirror.setter
    def decrypted_traffic_mirror(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decrypted_traffic_mirror", value)

    @property
    @pulumi.getter(name="delayTcpNpuSession")
    def delay_tcp_npu_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delay_tcp_npu_session")

    @delay_tcp_npu_session.setter
    def delay_tcp_npu_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delay_tcp_npu_session", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDeviceArgs']]]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="diffservCopy")
    def diffserv_copy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv_copy")

    @diffserv_copy.setter
    def diffserv_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_copy", value)

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv_forward")

    @diffserv_forward.setter
    def diffserv_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_forward", value)

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv_reverse")

    @diffserv_reverse.setter
    def diffserv_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_reverse", value)

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode_forward")

    @diffservcode_forward.setter
    def diffservcode_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_forward", value)

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode_rev")

    @diffservcode_rev.setter
    def diffservcode_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_rev", value)

    @property
    @pulumi.getter
    def disclaimer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disclaimer")

    @disclaimer.setter
    def disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disclaimer", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnsfilter_profile")

    @dnsfilter_profile.setter
    def dnsfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter_profile", value)

    @property
    @pulumi.getter
    def dsri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dsri")

    @dsri.setter
    def dsri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsri", value)

    @property
    @pulumi.getter(name="dstaddr6Negate")
    def dstaddr6_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstaddr6_negate")

    @dstaddr6_negate.setter
    def dstaddr6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr6_negate", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddr6Args']]]]:
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstaddr_negate")

    @dstaddr_negate.setter
    def dstaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddrArgs']]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="dynamicShaping")
    def dynamic_shaping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_shaping")

    @dynamic_shaping.setter
    def dynamic_shaping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_shaping", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailCollect")
    def email_collect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_collect")

    @email_collect.setter
    def email_collect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_collect", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter
    def fec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec")

    @fec.setter
    def fec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec", value)

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_filter_profile")

    @file_filter_profile.setter
    def file_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile", value)

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_session_dirty")

    @firewall_session_dirty.setter
    def firewall_session_dirty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_session_dirty", value)

    @property
    @pulumi.getter
    def fixedport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fixedport")

    @fixedport.setter
    def fixedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixedport", value)

    @property
    @pulumi.getter
    def fsso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsso")

    @fsso.setter
    def fsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso", value)

    @property
    @pulumi.getter(name="fssoAgentForNtlm")
    def fsso_agent_for_ntlm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsso_agent_for_ntlm")

    @fsso_agent_for_ntlm.setter
    def fsso_agent_for_ntlm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso_agent_for_ntlm", value)

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyFssoGroupArgs']]]]:
        return pulumi.get(self, "fsso_groups")

    @fsso_groups.setter
    def fsso_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyFssoGroupArgs']]]]):
        pulumi.set(self, "fsso_groups", value)

    @property
    @pulumi.getter(name="geoipAnycast")
    def geoip_anycast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "geoip_anycast")

    @geoip_anycast.setter
    def geoip_anycast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geoip_anycast", value)

    @property
    @pulumi.getter(name="geoipMatch")
    def geoip_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "geoip_match")

    @geoip_match.setter
    def geoip_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geoip_match", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_label")

    @global_label.setter
    def global_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_label", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyGroupArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_policy_redirect")

    @http_policy_redirect.setter
    def http_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_policy_redirect", value)

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icap_profile")

    @icap_profile.setter
    def icap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_profile", value)

    @property
    @pulumi.getter(name="identityBasedRoute")
    def identity_based_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_based_route")

    @identity_based_route.setter
    def identity_based_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_based_route", value)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service6")

    @internet_service6.setter
    def internet_service6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6", value)

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomGroupArgs']]]]:
        return pulumi.get(self, "internet_service6_custom_groups")

    @internet_service6_custom_groups.setter
    def internet_service6_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomGroupArgs']]]]):
        pulumi.set(self, "internet_service6_custom_groups", value)

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomArgs']]]]:
        return pulumi.get(self, "internet_service6_customs")

    @internet_service6_customs.setter
    def internet_service6_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomArgs']]]]):
        pulumi.set(self, "internet_service6_customs", value)

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6GroupArgs']]]]:
        return pulumi.get(self, "internet_service6_groups")

    @internet_service6_groups.setter
    def internet_service6_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6GroupArgs']]]]):
        pulumi.set(self, "internet_service6_groups", value)

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6NameArgs']]]]:
        return pulumi.get(self, "internet_service6_names")

    @internet_service6_names.setter
    def internet_service6_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6NameArgs']]]]):
        pulumi.set(self, "internet_service6_names", value)

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service6_negate")

    @internet_service6_negate.setter
    def internet_service6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_negate", value)

    @property
    @pulumi.getter(name="internetService6Src")
    def internet_service6_src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service6_src")

    @internet_service6_src.setter
    def internet_service6_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_src", value)

    @property
    @pulumi.getter(name="internetService6SrcCustomGroups")
    def internet_service6_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomGroupArgs']]]]:
        return pulumi.get(self, "internet_service6_src_custom_groups")

    @internet_service6_src_custom_groups.setter
    def internet_service6_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service6_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetService6SrcCustoms")
    def internet_service6_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomArgs']]]]:
        return pulumi.get(self, "internet_service6_src_customs")

    @internet_service6_src_customs.setter
    def internet_service6_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomArgs']]]]):
        pulumi.set(self, "internet_service6_src_customs", value)

    @property
    @pulumi.getter(name="internetService6SrcGroups")
    def internet_service6_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcGroupArgs']]]]:
        return pulumi.get(self, "internet_service6_src_groups")

    @internet_service6_src_groups.setter
    def internet_service6_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcGroupArgs']]]]):
        pulumi.set(self, "internet_service6_src_groups", value)

    @property
    @pulumi.getter(name="internetService6SrcNames")
    def internet_service6_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcNameArgs']]]]:
        return pulumi.get(self, "internet_service6_src_names")

    @internet_service6_src_names.setter
    def internet_service6_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcNameArgs']]]]):
        pulumi.set(self, "internet_service6_src_names", value)

    @property
    @pulumi.getter(name="internetService6SrcNegate")
    def internet_service6_src_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service6_src_negate")

    @internet_service6_src_negate.setter
    def internet_service6_src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_src_negate", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomGroupArgs']]]]:
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomArgs']]]]:
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceGroupArgs']]]]:
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceIdArgs']]]]:
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceNameArgs']]]]:
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_negate")

    @internet_service_negate.setter
    def internet_service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_negate", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomGroupArgs']]]]:
        return pulumi.get(self, "internet_service_src_custom_groups")

    @internet_service_src_custom_groups.setter
    def internet_service_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomArgs']]]]:
        return pulumi.get(self, "internet_service_src_customs")

    @internet_service_src_customs.setter
    def internet_service_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomArgs']]]]):
        pulumi.set(self, "internet_service_src_customs", value)

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcGroupArgs']]]]:
        return pulumi.get(self, "internet_service_src_groups")

    @internet_service_src_groups.setter
    def internet_service_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcIdArgs']]]]:
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcIdArgs']]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcNameArgs']]]]:
        return pulumi.get(self, "internet_service_src_names")

    @internet_service_src_names.setter
    def internet_service_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcNameArgs']]]]):
        pulumi.set(self, "internet_service_src_names", value)

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_src_negate")

    @internet_service_src_negate.setter
    def internet_service_src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src_negate", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_voip_filter")

    @ips_voip_filter.setter
    def ips_voip_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_voip_filter", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="learningMode")
    def learning_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "learning_mode")

    @learning_mode.setter
    def learning_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learning_mode", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter(name="matchVip")
    def match_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_vip")

    @match_vip.setter
    def match_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_vip", value)

    @property
    @pulumi.getter(name="matchVipOnly")
    def match_vip_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_vip_only")

    @match_vip_only.setter
    def match_vip_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_vip_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter
    def nat46(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat46")

    @nat46.setter
    def nat46(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46", value)

    @property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64", value)

    @property
    @pulumi.getter
    def natinbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "natinbound")

    @natinbound.setter
    def natinbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natinbound", value)

    @property
    @pulumi.getter
    def natip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "natip")

    @natip.setter
    def natip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natip", value)

    @property
    @pulumi.getter
    def natoutbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "natoutbound")

    @natoutbound.setter
    def natoutbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natoutbound", value)

    @property
    @pulumi.getter(name="networkServiceDynamics")
    def network_service_dynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceDynamicArgs']]]]:
        return pulumi.get(self, "network_service_dynamics")

    @network_service_dynamics.setter
    def network_service_dynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceDynamicArgs']]]]):
        pulumi.set(self, "network_service_dynamics", value)

    @property
    @pulumi.getter(name="networkServiceSrcDynamics")
    def network_service_src_dynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceSrcDynamicArgs']]]]:
        return pulumi.get(self, "network_service_src_dynamics")

    @network_service_src_dynamics.setter
    def network_service_src_dynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceSrcDynamicArgs']]]]):
        pulumi.set(self, "network_service_src_dynamics", value)

    @property
    @pulumi.getter(name="npAcceleration")
    def np_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "np_acceleration")

    @np_acceleration.setter
    def np_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "np_acceleration", value)

    @property
    @pulumi.getter
    def ntlm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm")

    @ntlm.setter
    def ntlm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm", value)

    @property
    @pulumi.getter(name="ntlmEnabledBrowsers")
    def ntlm_enabled_browsers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNtlmEnabledBrowserArgs']]]]:
        return pulumi.get(self, "ntlm_enabled_browsers")

    @ntlm_enabled_browsers.setter
    def ntlm_enabled_browsers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNtlmEnabledBrowserArgs']]]]):
        pulumi.set(self, "ntlm_enabled_browsers", value)

    @property
    @pulumi.getter(name="ntlmGuest")
    def ntlm_guest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm_guest")

    @ntlm_guest.setter
    def ntlm_guest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_guest", value)

    @property
    @pulumi.getter
    def outbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbound")

    @outbound.setter
    def outbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound", value)

    @property
    @pulumi.getter(name="passiveWanHealthMeasurement")
    def passive_wan_health_measurement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passive_wan_health_measurement")

    @passive_wan_health_measurement.setter
    def passive_wan_health_measurement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_wan_health_measurement", value)

    @property
    @pulumi.getter(name="pcpInbound")
    def pcp_inbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pcp_inbound")

    @pcp_inbound.setter
    def pcp_inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pcp_inbound", value)

    @property
    @pulumi.getter(name="pcpOutbound")
    def pcp_outbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pcp_outbound")

    @pcp_outbound.setter
    def pcp_outbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pcp_outbound", value)

    @property
    @pulumi.getter(name="pcpPoolnames")
    def pcp_poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPcpPoolnameArgs']]]]:
        return pulumi.get(self, "pcp_poolnames")

    @pcp_poolnames.setter
    def pcp_poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPcpPoolnameArgs']]]]):
        pulumi.set(self, "pcp_poolnames", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter(name="permitAnyHost")
    def permit_any_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permit_any_host")

    @permit_any_host.setter
    def permit_any_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_any_host", value)

    @property
    @pulumi.getter(name="permitStunHost")
    def permit_stun_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permit_stun_host")

    @permit_stun_host.setter
    def permit_stun_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_stun_host", value)

    @property
    @pulumi.getter(name="policyExpiry")
    def policy_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_expiry")

    @policy_expiry.setter
    def policy_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry", value)

    @property
    @pulumi.getter(name="policyExpiryDate")
    def policy_expiry_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_expiry_date")

    @policy_expiry_date.setter
    def policy_expiry_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry_date", value)

    @property
    @pulumi.getter(name="policyExpiryDateUtc")
    def policy_expiry_date_utc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_expiry_date_utc")

    @policy_expiry_date_utc.setter
    def policy_expiry_date_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry_date_utc", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def poolname6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolname6Args']]]]:
        return pulumi.get(self, "poolname6s")

    @poolname6s.setter
    def poolname6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolname6Args']]]]):
        pulumi.set(self, "poolname6s", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolnameArgs']]]]:
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolnameArgs']]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_group")

    @profile_group.setter
    def profile_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_group", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter(name="radiusMacAuthBypass")
    def radius_mac_auth_bypass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_mac_auth_bypass")

    @radius_mac_auth_bypass.setter
    def radius_mac_auth_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_mac_auth_bypass", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_override_group")

    @replacemsg_override_group.setter
    def replacemsg_override_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_override_group", value)

    @property
    @pulumi.getter(name="reputationDirection")
    def reputation_direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reputation_direction")

    @reputation_direction.setter
    def reputation_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reputation_direction", value)

    @property
    @pulumi.getter(name="reputationDirection6")
    def reputation_direction6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reputation_direction6")

    @reputation_direction6.setter
    def reputation_direction6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reputation_direction6", value)

    @property
    @pulumi.getter(name="reputationMinimum")
    def reputation_minimum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reputation_minimum")

    @reputation_minimum.setter
    def reputation_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reputation_minimum", value)

    @property
    @pulumi.getter(name="reputationMinimum6")
    def reputation_minimum6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reputation_minimum6")

    @reputation_minimum6.setter
    def reputation_minimum6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reputation_minimum6", value)

    @property
    @pulumi.getter
    def rsso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso")

    @rsso.setter
    def rsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso", value)

    @property
    @pulumi.getter(name="rtpAddrs")
    def rtp_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyRtpAddrArgs']]]]:
        return pulumi.get(self, "rtp_addrs")

    @rtp_addrs.setter
    def rtp_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyRtpAddrArgs']]]]):
        pulumi.set(self, "rtp_addrs", value)

    @property
    @pulumi.getter(name="rtpNat")
    def rtp_nat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rtp_nat")

    @rtp_nat.setter
    def rtp_nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rtp_nat", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="scheduleTimeout")
    def schedule_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_timeout")

    @schedule_timeout.setter
    def schedule_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_timeout", value)

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sctp_filter_profile")

    @sctp_filter_profile.setter
    def sctp_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_filter_profile", value)

    @property
    @pulumi.getter(name="sendDenyPacket")
    def send_deny_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_deny_packet")

    @send_deny_packet.setter
    def send_deny_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_deny_packet", value)

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_negate")

    @service_negate.setter
    def service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_negate", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyServiceArgs']]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="sgtCheck")
    def sgt_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sgt_check")

    @sgt_check.setter
    def sgt_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sgt_check", value)

    @property
    @pulumi.getter
    def sgts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySgtArgs']]]]:
        return pulumi.get(self, "sgts")

    @sgts.setter
    def sgts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySgtArgs']]]]):
        pulumi.set(self, "sgts", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="srcVendorMacs")
    def src_vendor_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcVendorMacArgs']]]]:
        return pulumi.get(self, "src_vendor_macs")

    @src_vendor_macs.setter
    def src_vendor_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcVendorMacArgs']]]]):
        pulumi.set(self, "src_vendor_macs", value)

    @property
    @pulumi.getter(name="srcaddr6Negate")
    def srcaddr6_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr6_negate")

    @srcaddr6_negate.setter
    def srcaddr6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr6_negate", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddr6Args']]]]:
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr_negate")

    @srcaddr_negate.setter
    def srcaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddrArgs']]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_filter_profile")

    @ssh_filter_profile.setter
    def ssh_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_filter_profile", value)

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_policy_redirect")

    @ssh_policy_redirect.setter
    def ssh_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_redirect", value)

    @property
    @pulumi.getter(name="sslMirror")
    def ssl_mirror(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_mirror")

    @ssl_mirror.setter
    def ssl_mirror(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mirror", value)

    @property
    @pulumi.getter(name="sslMirrorIntfs")
    def ssl_mirror_intfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySslMirrorIntfArgs']]]]:
        return pulumi.get(self, "ssl_mirror_intfs")

    @ssl_mirror_intfs.setter
    def ssl_mirror_intfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySslMirrorIntfArgs']]]]):
        pulumi.set(self, "ssl_mirror_intfs", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_mss_receiver")

    @tcp_mss_receiver.setter
    def tcp_mss_receiver(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_receiver", value)

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_mss_sender")

    @tcp_mss_sender.setter
    def tcp_mss_sender(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_sender", value)

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_session_without_syn")

    @tcp_session_without_syn.setter
    def tcp_session_without_syn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_session_without_syn", value)

    @property
    @pulumi.getter(name="timeoutSendRst")
    def timeout_send_rst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout_send_rst")

    @timeout_send_rst.setter
    def timeout_send_rst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout_send_rst", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos_negate")

    @tos_negate.setter
    def tos_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_negate", value)

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_shaper")

    @traffic_shaper.setter
    def traffic_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper", value)

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_shaper_reverse")

    @traffic_shaper_reverse.setter
    def traffic_shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper_reverse", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUrlCategoryArgs']]]]:
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUrlCategoryArgs']]]]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "videofilter_profile")

    @videofilter_profile.setter
    def videofilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "videofilter_profile", value)

    @property
    @pulumi.getter(name="vlanCosFwd")
    def vlan_cos_fwd(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_cos_fwd")

    @vlan_cos_fwd.setter
    def vlan_cos_fwd(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_cos_fwd", value)

    @property
    @pulumi.getter(name="vlanCosRev")
    def vlan_cos_rev(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_cos_rev")

    @vlan_cos_rev.setter
    def vlan_cos_rev(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_cos_rev", value)

    @property
    @pulumi.getter(name="vlanFilter")
    def vlan_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_filter")

    @vlan_filter.setter
    def vlan_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_filter", value)

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voip_profile")

    @voip_profile.setter
    def voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_profile", value)

    @property
    @pulumi.getter
    def vpntunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpntunnel")

    @vpntunnel.setter
    def vpntunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpntunnel", value)

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "waf_profile")

    @waf_profile.setter
    def waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_profile", value)

    @property
    @pulumi.getter
    def wanopt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wanopt")

    @wanopt.setter
    def wanopt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt", value)

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wanopt_detection")

    @wanopt_detection.setter
    def wanopt_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_detection", value)

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wanopt_passive_opt")

    @wanopt_passive_opt.setter
    def wanopt_passive_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_passive_opt", value)

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wanopt_peer")

    @wanopt_peer.setter
    def wanopt_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_peer", value)

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wanopt_profile")

    @wanopt_profile.setter
    def wanopt_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_profile", value)

    @property
    @pulumi.getter
    def wccp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wccp")

    @wccp.setter
    def wccp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wccp", value)

    @property
    @pulumi.getter
    def webcache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webcache")

    @webcache.setter
    def webcache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache", value)

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webcache_https")

    @webcache_https.setter
    def webcache_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache_https", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webproxy_forward_server")

    @webproxy_forward_server.setter
    def webproxy_forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_forward_server", value)

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webproxy_profile")

    @webproxy_profile.setter
    def webproxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_profile", value)

    @property
    @pulumi.getter
    def wsso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wsso")

    @wsso.setter
    def wsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wsso", value)

    @property
    @pulumi.getter(name="ztnaDeviceOwnership")
    def ztna_device_ownership(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ztna_device_ownership")

    @ztna_device_ownership.setter
    def ztna_device_ownership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_device_ownership", value)

    @property
    @pulumi.getter(name="ztnaEmsTagSecondaries")
    def ztna_ems_tag_secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagSecondaryArgs']]]]:
        return pulumi.get(self, "ztna_ems_tag_secondaries")

    @ztna_ems_tag_secondaries.setter
    def ztna_ems_tag_secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagSecondaryArgs']]]]):
        pulumi.set(self, "ztna_ems_tag_secondaries", value)

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagArgs']]]]:
        return pulumi.get(self, "ztna_ems_tags")

    @ztna_ems_tags.setter
    def ztna_ems_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagArgs']]]]):
        pulumi.set(self, "ztna_ems_tags", value)

    @property
    @pulumi.getter(name="ztnaGeoTags")
    def ztna_geo_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaGeoTagArgs']]]]:
        return pulumi.get(self, "ztna_geo_tags")

    @ztna_geo_tags.setter
    def ztna_geo_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaGeoTagArgs']]]]):
        pulumi.set(self, "ztna_geo_tags", value)

    @property
    @pulumi.getter(name="ztnaPolicyRedirect")
    def ztna_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ztna_policy_redirect")

    @ztna_policy_redirect.setter
    def ztna_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_policy_redirect", value)

    @property
    @pulumi.getter(name="ztnaStatus")
    def ztna_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ztna_status")

    @ztna_status.setter
    def ztna_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_status", value)

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ztna_tags_match_logic")

    @ztna_tags_match_logic.setter
    def ztna_tags_match_logic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_tags_match_logic", value)


@pulumi.input_type
class _FirewallPolicyState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppCategoryArgs']]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppGroupArgs']]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyApplicationArgs']]]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_path: Optional[pulumi.Input[str]] = None,
                 auth_redirect_addr: Optional[pulumi.Input[str]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyCustomLogFieldArgs']]]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 delay_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDeviceArgs']]]] = None,
                 diffserv_copy: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6_negate: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddr6Args']]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddrArgs']]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstintfArgs']]]] = None,
                 dynamic_shaping: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_collect: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fec: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 fsso_agent_for_ntlm: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyFssoGroupArgs']]]] = None,
                 geoip_anycast: Optional[pulumi.Input[str]] = None,
                 geoip_match: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyGroupArgs']]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 identity_based_route: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomGroupArgs']]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomArgs']]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6GroupArgs']]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6NameArgs']]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service6_src: Optional[pulumi.Input[str]] = None,
                 internet_service6_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomGroupArgs']]]] = None,
                 internet_service6_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomArgs']]]] = None,
                 internet_service6_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcGroupArgs']]]] = None,
                 internet_service6_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcNameArgs']]]] = None,
                 internet_service6_src_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceNameArgs']]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomGroupArgs']]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomArgs']]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcGroupArgs']]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcIdArgs']]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcNameArgs']]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 learning_mode: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 match_vip: Optional[pulumi.Input[str]] = None,
                 match_vip_only: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 natinbound: Optional[pulumi.Input[str]] = None,
                 natip: Optional[pulumi.Input[str]] = None,
                 natoutbound: Optional[pulumi.Input[str]] = None,
                 network_service_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceDynamicArgs']]]] = None,
                 network_service_src_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceSrcDynamicArgs']]]] = None,
                 np_acceleration: Optional[pulumi.Input[str]] = None,
                 ntlm: Optional[pulumi.Input[str]] = None,
                 ntlm_enabled_browsers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNtlmEnabledBrowserArgs']]]] = None,
                 ntlm_guest: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 passive_wan_health_measurement: Optional[pulumi.Input[str]] = None,
                 pcp_inbound: Optional[pulumi.Input[str]] = None,
                 pcp_outbound: Optional[pulumi.Input[str]] = None,
                 pcp_poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPcpPoolnameArgs']]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 permit_stun_host: Optional[pulumi.Input[str]] = None,
                 policy_expiry: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date_utc: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolname6Args']]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolnameArgs']]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 reputation_direction: Optional[pulumi.Input[str]] = None,
                 reputation_direction6: Optional[pulumi.Input[str]] = None,
                 reputation_minimum: Optional[pulumi.Input[int]] = None,
                 reputation_minimum6: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rtp_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyRtpAddrArgs']]]] = None,
                 rtp_nat: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 schedule_timeout: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 send_deny_packet: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyServiceArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 sgt_check: Optional[pulumi.Input[str]] = None,
                 sgts: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySgtArgs']]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 src_vendor_macs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcVendorMacArgs']]]] = None,
                 srcaddr6_negate: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddr6Args']]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddrArgs']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcintfArgs']]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_mirror: Optional[pulumi.Input[str]] = None,
                 ssl_mirror_intfs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySslMirrorIntfArgs']]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 timeout_send_rst: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUrlCategoryArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUserArgs']]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 vlan_cos_fwd: Optional[pulumi.Input[int]] = None,
                 vlan_cos_rev: Optional[pulumi.Input[int]] = None,
                 vlan_filter: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 wsso: Optional[pulumi.Input[str]] = None,
                 ztna_device_ownership: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tag_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagSecondaryArgs']]]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagArgs']]]] = None,
                 ztna_geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaGeoTagArgs']]]] = None,
                 ztna_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ztna_status: Optional[pulumi.Input[str]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallPolicy resources.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if anti_replay is not None:
            pulumi.set(__self__, "anti_replay", anti_replay)
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_groups is not None:
            pulumi.set(__self__, "app_groups", app_groups)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_path is not None:
            pulumi.set(__self__, "auth_path", auth_path)
        if auth_redirect_addr is not None:
            pulumi.set(__self__, "auth_redirect_addr", auth_redirect_addr)
        if auto_asic_offload is not None:
            pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if block_notification is not None:
            pulumi.set(__self__, "block_notification", block_notification)
        if captive_portal_exempt is not None:
            pulumi.set(__self__, "captive_portal_exempt", captive_portal_exempt)
        if capture_packet is not None:
            pulumi.set(__self__, "capture_packet", capture_packet)
        if cifs_profile is not None:
            pulumi.set(__self__, "cifs_profile", cifs_profile)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_log_fields is not None:
            pulumi.set(__self__, "custom_log_fields", custom_log_fields)
        if decrypted_traffic_mirror is not None:
            pulumi.set(__self__, "decrypted_traffic_mirror", decrypted_traffic_mirror)
        if delay_tcp_npu_session is not None:
            pulumi.set(__self__, "delay_tcp_npu_session", delay_tcp_npu_session)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if diffserv_copy is not None:
            pulumi.set(__self__, "diffserv_copy", diffserv_copy)
        if diffserv_forward is not None:
            pulumi.set(__self__, "diffserv_forward", diffserv_forward)
        if diffserv_reverse is not None:
            pulumi.set(__self__, "diffserv_reverse", diffserv_reverse)
        if diffservcode_forward is not None:
            pulumi.set(__self__, "diffservcode_forward", diffservcode_forward)
        if diffservcode_rev is not None:
            pulumi.set(__self__, "diffservcode_rev", diffservcode_rev)
        if disclaimer is not None:
            pulumi.set(__self__, "disclaimer", disclaimer)
        if dlp_profile is not None:
            pulumi.set(__self__, "dlp_profile", dlp_profile)
        if dlp_sensor is not None:
            pulumi.set(__self__, "dlp_sensor", dlp_sensor)
        if dnsfilter_profile is not None:
            pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if dsri is not None:
            pulumi.set(__self__, "dsri", dsri)
        if dstaddr6_negate is not None:
            pulumi.set(__self__, "dstaddr6_negate", dstaddr6_negate)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddr_negate is not None:
            pulumi.set(__self__, "dstaddr_negate", dstaddr_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if dynamic_shaping is not None:
            pulumi.set(__self__, "dynamic_shaping", dynamic_shaping)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_collect is not None:
            pulumi.set(__self__, "email_collect", email_collect)
        if emailfilter_profile is not None:
            pulumi.set(__self__, "emailfilter_profile", emailfilter_profile)
        if fec is not None:
            pulumi.set(__self__, "fec", fec)
        if file_filter_profile is not None:
            pulumi.set(__self__, "file_filter_profile", file_filter_profile)
        if firewall_session_dirty is not None:
            pulumi.set(__self__, "firewall_session_dirty", firewall_session_dirty)
        if fixedport is not None:
            pulumi.set(__self__, "fixedport", fixedport)
        if fsso is not None:
            pulumi.set(__self__, "fsso", fsso)
        if fsso_agent_for_ntlm is not None:
            pulumi.set(__self__, "fsso_agent_for_ntlm", fsso_agent_for_ntlm)
        if fsso_groups is not None:
            pulumi.set(__self__, "fsso_groups", fsso_groups)
        if geoip_anycast is not None:
            pulumi.set(__self__, "geoip_anycast", geoip_anycast)
        if geoip_match is not None:
            pulumi.set(__self__, "geoip_match", geoip_match)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if global_label is not None:
            pulumi.set(__self__, "global_label", global_label)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if http_policy_redirect is not None:
            pulumi.set(__self__, "http_policy_redirect", http_policy_redirect)
        if icap_profile is not None:
            pulumi.set(__self__, "icap_profile", icap_profile)
        if identity_based_route is not None:
            pulumi.set(__self__, "identity_based_route", identity_based_route)
        if inbound is not None:
            pulumi.set(__self__, "inbound", inbound)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service6 is not None:
            pulumi.set(__self__, "internet_service6", internet_service6)
        if internet_service6_custom_groups is not None:
            pulumi.set(__self__, "internet_service6_custom_groups", internet_service6_custom_groups)
        if internet_service6_customs is not None:
            pulumi.set(__self__, "internet_service6_customs", internet_service6_customs)
        if internet_service6_groups is not None:
            pulumi.set(__self__, "internet_service6_groups", internet_service6_groups)
        if internet_service6_names is not None:
            pulumi.set(__self__, "internet_service6_names", internet_service6_names)
        if internet_service6_negate is not None:
            pulumi.set(__self__, "internet_service6_negate", internet_service6_negate)
        if internet_service6_src is not None:
            pulumi.set(__self__, "internet_service6_src", internet_service6_src)
        if internet_service6_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service6_src_custom_groups", internet_service6_src_custom_groups)
        if internet_service6_src_customs is not None:
            pulumi.set(__self__, "internet_service6_src_customs", internet_service6_src_customs)
        if internet_service6_src_groups is not None:
            pulumi.set(__self__, "internet_service6_src_groups", internet_service6_src_groups)
        if internet_service6_src_names is not None:
            pulumi.set(__self__, "internet_service6_src_names", internet_service6_src_names)
        if internet_service6_src_negate is not None:
            pulumi.set(__self__, "internet_service6_src_negate", internet_service6_src_negate)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if internet_service_negate is not None:
            pulumi.set(__self__, "internet_service_negate", internet_service_negate)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_custom_groups is not None:
            pulumi.set(__self__, "internet_service_src_custom_groups", internet_service_src_custom_groups)
        if internet_service_src_customs is not None:
            pulumi.set(__self__, "internet_service_src_customs", internet_service_src_customs)
        if internet_service_src_groups is not None:
            pulumi.set(__self__, "internet_service_src_groups", internet_service_src_groups)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if internet_service_src_names is not None:
            pulumi.set(__self__, "internet_service_src_names", internet_service_src_names)
        if internet_service_src_negate is not None:
            pulumi.set(__self__, "internet_service_src_negate", internet_service_src_negate)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if ips_voip_filter is not None:
            pulumi.set(__self__, "ips_voip_filter", ips_voip_filter)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if learning_mode is not None:
            pulumi.set(__self__, "learning_mode", learning_mode)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if match_vip is not None:
            pulumi.set(__self__, "match_vip", match_vip)
        if match_vip_only is not None:
            pulumi.set(__self__, "match_vip_only", match_vip_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat46 is not None:
            pulumi.set(__self__, "nat46", nat46)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if natinbound is not None:
            pulumi.set(__self__, "natinbound", natinbound)
        if natip is not None:
            pulumi.set(__self__, "natip", natip)
        if natoutbound is not None:
            pulumi.set(__self__, "natoutbound", natoutbound)
        if network_service_dynamics is not None:
            pulumi.set(__self__, "network_service_dynamics", network_service_dynamics)
        if network_service_src_dynamics is not None:
            pulumi.set(__self__, "network_service_src_dynamics", network_service_src_dynamics)
        if np_acceleration is not None:
            pulumi.set(__self__, "np_acceleration", np_acceleration)
        if ntlm is not None:
            pulumi.set(__self__, "ntlm", ntlm)
        if ntlm_enabled_browsers is not None:
            pulumi.set(__self__, "ntlm_enabled_browsers", ntlm_enabled_browsers)
        if ntlm_guest is not None:
            pulumi.set(__self__, "ntlm_guest", ntlm_guest)
        if outbound is not None:
            pulumi.set(__self__, "outbound", outbound)
        if passive_wan_health_measurement is not None:
            pulumi.set(__self__, "passive_wan_health_measurement", passive_wan_health_measurement)
        if pcp_inbound is not None:
            pulumi.set(__self__, "pcp_inbound", pcp_inbound)
        if pcp_outbound is not None:
            pulumi.set(__self__, "pcp_outbound", pcp_outbound)
        if pcp_poolnames is not None:
            pulumi.set(__self__, "pcp_poolnames", pcp_poolnames)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if permit_any_host is not None:
            pulumi.set(__self__, "permit_any_host", permit_any_host)
        if permit_stun_host is not None:
            pulumi.set(__self__, "permit_stun_host", permit_stun_host)
        if policy_expiry is not None:
            pulumi.set(__self__, "policy_expiry", policy_expiry)
        if policy_expiry_date is not None:
            pulumi.set(__self__, "policy_expiry_date", policy_expiry_date)
        if policy_expiry_date_utc is not None:
            pulumi.set(__self__, "policy_expiry_date_utc", policy_expiry_date_utc)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if poolname6s is not None:
            pulumi.set(__self__, "poolname6s", poolname6s)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if profile_group is not None:
            pulumi.set(__self__, "profile_group", profile_group)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if radius_mac_auth_bypass is not None:
            pulumi.set(__self__, "radius_mac_auth_bypass", radius_mac_auth_bypass)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if replacemsg_override_group is not None:
            pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if reputation_direction is not None:
            pulumi.set(__self__, "reputation_direction", reputation_direction)
        if reputation_direction6 is not None:
            pulumi.set(__self__, "reputation_direction6", reputation_direction6)
        if reputation_minimum is not None:
            pulumi.set(__self__, "reputation_minimum", reputation_minimum)
        if reputation_minimum6 is not None:
            pulumi.set(__self__, "reputation_minimum6", reputation_minimum6)
        if rsso is not None:
            pulumi.set(__self__, "rsso", rsso)
        if rtp_addrs is not None:
            pulumi.set(__self__, "rtp_addrs", rtp_addrs)
        if rtp_nat is not None:
            pulumi.set(__self__, "rtp_nat", rtp_nat)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if schedule_timeout is not None:
            pulumi.set(__self__, "schedule_timeout", schedule_timeout)
        if sctp_filter_profile is not None:
            pulumi.set(__self__, "sctp_filter_profile", sctp_filter_profile)
        if send_deny_packet is not None:
            pulumi.set(__self__, "send_deny_packet", send_deny_packet)
        if service_negate is not None:
            pulumi.set(__self__, "service_negate", service_negate)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if sgt_check is not None:
            pulumi.set(__self__, "sgt_check", sgt_check)
        if sgts is not None:
            pulumi.set(__self__, "sgts", sgts)
        if spamfilter_profile is not None:
            pulumi.set(__self__, "spamfilter_profile", spamfilter_profile)
        if src_vendor_macs is not None:
            pulumi.set(__self__, "src_vendor_macs", src_vendor_macs)
        if srcaddr6_negate is not None:
            pulumi.set(__self__, "srcaddr6_negate", srcaddr6_negate)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddr_negate is not None:
            pulumi.set(__self__, "srcaddr_negate", srcaddr_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if ssh_filter_profile is not None:
            pulumi.set(__self__, "ssh_filter_profile", ssh_filter_profile)
        if ssh_policy_redirect is not None:
            pulumi.set(__self__, "ssh_policy_redirect", ssh_policy_redirect)
        if ssl_mirror is not None:
            pulumi.set(__self__, "ssl_mirror", ssl_mirror)
        if ssl_mirror_intfs is not None:
            pulumi.set(__self__, "ssl_mirror_intfs", ssl_mirror_intfs)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_mss_receiver is not None:
            pulumi.set(__self__, "tcp_mss_receiver", tcp_mss_receiver)
        if tcp_mss_sender is not None:
            pulumi.set(__self__, "tcp_mss_sender", tcp_mss_sender)
        if tcp_session_without_syn is not None:
            pulumi.set(__self__, "tcp_session_without_syn", tcp_session_without_syn)
        if timeout_send_rst is not None:
            pulumi.set(__self__, "timeout_send_rst", timeout_send_rst)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if tos_negate is not None:
            pulumi.set(__self__, "tos_negate", tos_negate)
        if traffic_shaper is not None:
            pulumi.set(__self__, "traffic_shaper", traffic_shaper)
        if traffic_shaper_reverse is not None:
            pulumi.set(__self__, "traffic_shaper_reverse", traffic_shaper_reverse)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_profile is not None:
            pulumi.set(__self__, "videofilter_profile", videofilter_profile)
        if vlan_cos_fwd is not None:
            pulumi.set(__self__, "vlan_cos_fwd", vlan_cos_fwd)
        if vlan_cos_rev is not None:
            pulumi.set(__self__, "vlan_cos_rev", vlan_cos_rev)
        if vlan_filter is not None:
            pulumi.set(__self__, "vlan_filter", vlan_filter)
        if voip_profile is not None:
            pulumi.set(__self__, "voip_profile", voip_profile)
        if vpntunnel is not None:
            pulumi.set(__self__, "vpntunnel", vpntunnel)
        if waf_profile is not None:
            pulumi.set(__self__, "waf_profile", waf_profile)
        if wanopt is not None:
            pulumi.set(__self__, "wanopt", wanopt)
        if wanopt_detection is not None:
            pulumi.set(__self__, "wanopt_detection", wanopt_detection)
        if wanopt_passive_opt is not None:
            pulumi.set(__self__, "wanopt_passive_opt", wanopt_passive_opt)
        if wanopt_peer is not None:
            pulumi.set(__self__, "wanopt_peer", wanopt_peer)
        if wanopt_profile is not None:
            pulumi.set(__self__, "wanopt_profile", wanopt_profile)
        if wccp is not None:
            pulumi.set(__self__, "wccp", wccp)
        if webcache is not None:
            pulumi.set(__self__, "webcache", webcache)
        if webcache_https is not None:
            pulumi.set(__self__, "webcache_https", webcache_https)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)
        if webproxy_forward_server is not None:
            pulumi.set(__self__, "webproxy_forward_server", webproxy_forward_server)
        if webproxy_profile is not None:
            pulumi.set(__self__, "webproxy_profile", webproxy_profile)
        if wsso is not None:
            pulumi.set(__self__, "wsso", wsso)
        if ztna_device_ownership is not None:
            pulumi.set(__self__, "ztna_device_ownership", ztna_device_ownership)
        if ztna_ems_tag_secondaries is not None:
            pulumi.set(__self__, "ztna_ems_tag_secondaries", ztna_ems_tag_secondaries)
        if ztna_ems_tags is not None:
            pulumi.set(__self__, "ztna_ems_tags", ztna_ems_tags)
        if ztna_geo_tags is not None:
            pulumi.set(__self__, "ztna_geo_tags", ztna_geo_tags)
        if ztna_policy_redirect is not None:
            pulumi.set(__self__, "ztna_policy_redirect", ztna_policy_redirect)
        if ztna_status is not None:
            pulumi.set(__self__, "ztna_status", ztna_status)
        if ztna_tags_match_logic is not None:
            pulumi.set(__self__, "ztna_tags_match_logic", ztna_tags_match_logic)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anti_replay")

    @anti_replay.setter
    def anti_replay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anti_replay", value)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppCategoryArgs']]]]:
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppGroupArgs']]]]:
        return pulumi.get(self, "app_groups")

    @app_groups.setter
    def app_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyAppGroupArgs']]]]):
        pulumi.set(self, "app_groups", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authPath")
    def auth_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_path")

    @auth_path.setter
    def auth_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_path", value)

    @property
    @pulumi.getter(name="authRedirectAddr")
    def auth_redirect_addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_redirect_addr")

    @auth_redirect_addr.setter
    def auth_redirect_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_redirect_addr", value)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_asic_offload")

    @auto_asic_offload.setter
    def auto_asic_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_asic_offload", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_notification")

    @block_notification.setter
    def block_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_notification", value)

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captive_portal_exempt")

    @captive_portal_exempt.setter
    def captive_portal_exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captive_portal_exempt", value)

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capture_packet")

    @capture_packet.setter
    def capture_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capture_packet", value)

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cifs_profile")

    @cifs_profile.setter
    def cifs_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cifs_profile", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyCustomLogFieldArgs']]]]:
        return pulumi.get(self, "custom_log_fields")

    @custom_log_fields.setter
    def custom_log_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyCustomLogFieldArgs']]]]):
        pulumi.set(self, "custom_log_fields", value)

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "decrypted_traffic_mirror")

    @decrypted_traffic_mirror.setter
    def decrypted_traffic_mirror(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decrypted_traffic_mirror", value)

    @property
    @pulumi.getter(name="delayTcpNpuSession")
    def delay_tcp_npu_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delay_tcp_npu_session")

    @delay_tcp_npu_session.setter
    def delay_tcp_npu_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delay_tcp_npu_session", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDeviceArgs']]]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="diffservCopy")
    def diffserv_copy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv_copy")

    @diffserv_copy.setter
    def diffserv_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_copy", value)

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv_forward")

    @diffserv_forward.setter
    def diffserv_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_forward", value)

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffserv_reverse")

    @diffserv_reverse.setter
    def diffserv_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv_reverse", value)

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode_forward")

    @diffservcode_forward.setter
    def diffservcode_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_forward", value)

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "diffservcode_rev")

    @diffservcode_rev.setter
    def diffservcode_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode_rev", value)

    @property
    @pulumi.getter
    def disclaimer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disclaimer")

    @disclaimer.setter
    def disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disclaimer", value)

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_profile")

    @dlp_profile.setter
    def dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_profile", value)

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlp_sensor")

    @dlp_sensor.setter
    def dlp_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlp_sensor", value)

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnsfilter_profile")

    @dnsfilter_profile.setter
    def dnsfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter_profile", value)

    @property
    @pulumi.getter
    def dsri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dsri")

    @dsri.setter
    def dsri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsri", value)

    @property
    @pulumi.getter(name="dstaddr6Negate")
    def dstaddr6_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstaddr6_negate")

    @dstaddr6_negate.setter
    def dstaddr6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr6_negate", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddr6Args']]]]:
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dstaddr_negate")

    @dstaddr_negate.setter
    def dstaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddrArgs']]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstintfArgs']]]]:
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter(name="dynamicShaping")
    def dynamic_shaping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_shaping")

    @dynamic_shaping.setter
    def dynamic_shaping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_shaping", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailCollect")
    def email_collect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_collect")

    @email_collect.setter
    def email_collect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_collect", value)

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emailfilter_profile")

    @emailfilter_profile.setter
    def emailfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter_profile", value)

    @property
    @pulumi.getter
    def fec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec")

    @fec.setter
    def fec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec", value)

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_filter_profile")

    @file_filter_profile.setter
    def file_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter_profile", value)

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_session_dirty")

    @firewall_session_dirty.setter
    def firewall_session_dirty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_session_dirty", value)

    @property
    @pulumi.getter
    def fixedport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fixedport")

    @fixedport.setter
    def fixedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixedport", value)

    @property
    @pulumi.getter
    def fsso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsso")

    @fsso.setter
    def fsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso", value)

    @property
    @pulumi.getter(name="fssoAgentForNtlm")
    def fsso_agent_for_ntlm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsso_agent_for_ntlm")

    @fsso_agent_for_ntlm.setter
    def fsso_agent_for_ntlm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsso_agent_for_ntlm", value)

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyFssoGroupArgs']]]]:
        return pulumi.get(self, "fsso_groups")

    @fsso_groups.setter
    def fsso_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyFssoGroupArgs']]]]):
        pulumi.set(self, "fsso_groups", value)

    @property
    @pulumi.getter(name="geoipAnycast")
    def geoip_anycast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "geoip_anycast")

    @geoip_anycast.setter
    def geoip_anycast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geoip_anycast", value)

    @property
    @pulumi.getter(name="geoipMatch")
    def geoip_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "geoip_match")

    @geoip_match.setter
    def geoip_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geoip_match", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_label")

    @global_label.setter
    def global_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_label", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyGroupArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_policy_redirect")

    @http_policy_redirect.setter
    def http_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_policy_redirect", value)

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icap_profile")

    @icap_profile.setter
    def icap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_profile", value)

    @property
    @pulumi.getter(name="identityBasedRoute")
    def identity_based_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_based_route")

    @identity_based_route.setter
    def identity_based_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_based_route", value)

    @property
    @pulumi.getter
    def inbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inbound")

    @inbound.setter
    def inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service6")

    @internet_service6.setter
    def internet_service6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6", value)

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomGroupArgs']]]]:
        return pulumi.get(self, "internet_service6_custom_groups")

    @internet_service6_custom_groups.setter
    def internet_service6_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomGroupArgs']]]]):
        pulumi.set(self, "internet_service6_custom_groups", value)

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomArgs']]]]:
        return pulumi.get(self, "internet_service6_customs")

    @internet_service6_customs.setter
    def internet_service6_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6CustomArgs']]]]):
        pulumi.set(self, "internet_service6_customs", value)

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6GroupArgs']]]]:
        return pulumi.get(self, "internet_service6_groups")

    @internet_service6_groups.setter
    def internet_service6_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6GroupArgs']]]]):
        pulumi.set(self, "internet_service6_groups", value)

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6NameArgs']]]]:
        return pulumi.get(self, "internet_service6_names")

    @internet_service6_names.setter
    def internet_service6_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6NameArgs']]]]):
        pulumi.set(self, "internet_service6_names", value)

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service6_negate")

    @internet_service6_negate.setter
    def internet_service6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_negate", value)

    @property
    @pulumi.getter(name="internetService6Src")
    def internet_service6_src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service6_src")

    @internet_service6_src.setter
    def internet_service6_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_src", value)

    @property
    @pulumi.getter(name="internetService6SrcCustomGroups")
    def internet_service6_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomGroupArgs']]]]:
        return pulumi.get(self, "internet_service6_src_custom_groups")

    @internet_service6_src_custom_groups.setter
    def internet_service6_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service6_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetService6SrcCustoms")
    def internet_service6_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomArgs']]]]:
        return pulumi.get(self, "internet_service6_src_customs")

    @internet_service6_src_customs.setter
    def internet_service6_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcCustomArgs']]]]):
        pulumi.set(self, "internet_service6_src_customs", value)

    @property
    @pulumi.getter(name="internetService6SrcGroups")
    def internet_service6_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcGroupArgs']]]]:
        return pulumi.get(self, "internet_service6_src_groups")

    @internet_service6_src_groups.setter
    def internet_service6_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcGroupArgs']]]]):
        pulumi.set(self, "internet_service6_src_groups", value)

    @property
    @pulumi.getter(name="internetService6SrcNames")
    def internet_service6_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcNameArgs']]]]:
        return pulumi.get(self, "internet_service6_src_names")

    @internet_service6_src_names.setter
    def internet_service6_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetService6SrcNameArgs']]]]):
        pulumi.set(self, "internet_service6_src_names", value)

    @property
    @pulumi.getter(name="internetService6SrcNegate")
    def internet_service6_src_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service6_src_negate")

    @internet_service6_src_negate.setter
    def internet_service6_src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service6_src_negate", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomGroupArgs']]]]:
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomArgs']]]]:
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceGroupArgs']]]]:
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceIdArgs']]]]:
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceNameArgs']]]]:
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_negate")

    @internet_service_negate.setter
    def internet_service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_negate", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomGroupArgs']]]]:
        return pulumi.get(self, "internet_service_src_custom_groups")

    @internet_service_src_custom_groups.setter
    def internet_service_src_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomArgs']]]]:
        return pulumi.get(self, "internet_service_src_customs")

    @internet_service_src_customs.setter
    def internet_service_src_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcCustomArgs']]]]):
        pulumi.set(self, "internet_service_src_customs", value)

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcGroupArgs']]]]:
        return pulumi.get(self, "internet_service_src_groups")

    @internet_service_src_groups.setter
    def internet_service_src_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcGroupArgs']]]]):
        pulumi.set(self, "internet_service_src_groups", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcIdArgs']]]]:
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcIdArgs']]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcNameArgs']]]]:
        return pulumi.get(self, "internet_service_src_names")

    @internet_service_src_names.setter
    def internet_service_src_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyInternetServiceSrcNameArgs']]]]):
        pulumi.set(self, "internet_service_src_names", value)

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_src_negate")

    @internet_service_src_negate.setter
    def internet_service_src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src_negate", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_voip_filter")

    @ips_voip_filter.setter
    def ips_voip_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_voip_filter", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="learningMode")
    def learning_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "learning_mode")

    @learning_mode.setter
    def learning_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learning_mode", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter(name="matchVip")
    def match_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_vip")

    @match_vip.setter
    def match_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_vip", value)

    @property
    @pulumi.getter(name="matchVipOnly")
    def match_vip_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_vip_only")

    @match_vip_only.setter
    def match_vip_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_vip_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter
    def nat46(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat46")

    @nat46.setter
    def nat46(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46", value)

    @property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64", value)

    @property
    @pulumi.getter
    def natinbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "natinbound")

    @natinbound.setter
    def natinbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natinbound", value)

    @property
    @pulumi.getter
    def natip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "natip")

    @natip.setter
    def natip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natip", value)

    @property
    @pulumi.getter
    def natoutbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "natoutbound")

    @natoutbound.setter
    def natoutbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "natoutbound", value)

    @property
    @pulumi.getter(name="networkServiceDynamics")
    def network_service_dynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceDynamicArgs']]]]:
        return pulumi.get(self, "network_service_dynamics")

    @network_service_dynamics.setter
    def network_service_dynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceDynamicArgs']]]]):
        pulumi.set(self, "network_service_dynamics", value)

    @property
    @pulumi.getter(name="networkServiceSrcDynamics")
    def network_service_src_dynamics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceSrcDynamicArgs']]]]:
        return pulumi.get(self, "network_service_src_dynamics")

    @network_service_src_dynamics.setter
    def network_service_src_dynamics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNetworkServiceSrcDynamicArgs']]]]):
        pulumi.set(self, "network_service_src_dynamics", value)

    @property
    @pulumi.getter(name="npAcceleration")
    def np_acceleration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "np_acceleration")

    @np_acceleration.setter
    def np_acceleration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "np_acceleration", value)

    @property
    @pulumi.getter
    def ntlm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm")

    @ntlm.setter
    def ntlm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm", value)

    @property
    @pulumi.getter(name="ntlmEnabledBrowsers")
    def ntlm_enabled_browsers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNtlmEnabledBrowserArgs']]]]:
        return pulumi.get(self, "ntlm_enabled_browsers")

    @ntlm_enabled_browsers.setter
    def ntlm_enabled_browsers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyNtlmEnabledBrowserArgs']]]]):
        pulumi.set(self, "ntlm_enabled_browsers", value)

    @property
    @pulumi.getter(name="ntlmGuest")
    def ntlm_guest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm_guest")

    @ntlm_guest.setter
    def ntlm_guest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_guest", value)

    @property
    @pulumi.getter
    def outbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbound")

    @outbound.setter
    def outbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound", value)

    @property
    @pulumi.getter(name="passiveWanHealthMeasurement")
    def passive_wan_health_measurement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passive_wan_health_measurement")

    @passive_wan_health_measurement.setter
    def passive_wan_health_measurement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_wan_health_measurement", value)

    @property
    @pulumi.getter(name="pcpInbound")
    def pcp_inbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pcp_inbound")

    @pcp_inbound.setter
    def pcp_inbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pcp_inbound", value)

    @property
    @pulumi.getter(name="pcpOutbound")
    def pcp_outbound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pcp_outbound")

    @pcp_outbound.setter
    def pcp_outbound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pcp_outbound", value)

    @property
    @pulumi.getter(name="pcpPoolnames")
    def pcp_poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPcpPoolnameArgs']]]]:
        return pulumi.get(self, "pcp_poolnames")

    @pcp_poolnames.setter
    def pcp_poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPcpPoolnameArgs']]]]):
        pulumi.set(self, "pcp_poolnames", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter(name="permitAnyHost")
    def permit_any_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permit_any_host")

    @permit_any_host.setter
    def permit_any_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_any_host", value)

    @property
    @pulumi.getter(name="permitStunHost")
    def permit_stun_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permit_stun_host")

    @permit_stun_host.setter
    def permit_stun_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_stun_host", value)

    @property
    @pulumi.getter(name="policyExpiry")
    def policy_expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_expiry")

    @policy_expiry.setter
    def policy_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry", value)

    @property
    @pulumi.getter(name="policyExpiryDate")
    def policy_expiry_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_expiry_date")

    @policy_expiry_date.setter
    def policy_expiry_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry_date", value)

    @property
    @pulumi.getter(name="policyExpiryDateUtc")
    def policy_expiry_date_utc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_expiry_date_utc")

    @policy_expiry_date_utc.setter
    def policy_expiry_date_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_expiry_date_utc", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def poolname6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolname6Args']]]]:
        return pulumi.get(self, "poolname6s")

    @poolname6s.setter
    def poolname6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolname6Args']]]]):
        pulumi.set(self, "poolname6s", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolnameArgs']]]]:
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyPoolnameArgs']]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_group")

    @profile_group.setter
    def profile_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_group", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter(name="radiusMacAuthBypass")
    def radius_mac_auth_bypass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_mac_auth_bypass")

    @radius_mac_auth_bypass.setter
    def radius_mac_auth_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_mac_auth_bypass", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_override_group")

    @replacemsg_override_group.setter
    def replacemsg_override_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_override_group", value)

    @property
    @pulumi.getter(name="reputationDirection")
    def reputation_direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reputation_direction")

    @reputation_direction.setter
    def reputation_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reputation_direction", value)

    @property
    @pulumi.getter(name="reputationDirection6")
    def reputation_direction6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reputation_direction6")

    @reputation_direction6.setter
    def reputation_direction6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reputation_direction6", value)

    @property
    @pulumi.getter(name="reputationMinimum")
    def reputation_minimum(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reputation_minimum")

    @reputation_minimum.setter
    def reputation_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reputation_minimum", value)

    @property
    @pulumi.getter(name="reputationMinimum6")
    def reputation_minimum6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reputation_minimum6")

    @reputation_minimum6.setter
    def reputation_minimum6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reputation_minimum6", value)

    @property
    @pulumi.getter
    def rsso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsso")

    @rsso.setter
    def rsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsso", value)

    @property
    @pulumi.getter(name="rtpAddrs")
    def rtp_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyRtpAddrArgs']]]]:
        return pulumi.get(self, "rtp_addrs")

    @rtp_addrs.setter
    def rtp_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyRtpAddrArgs']]]]):
        pulumi.set(self, "rtp_addrs", value)

    @property
    @pulumi.getter(name="rtpNat")
    def rtp_nat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rtp_nat")

    @rtp_nat.setter
    def rtp_nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rtp_nat", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="scheduleTimeout")
    def schedule_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_timeout")

    @schedule_timeout.setter
    def schedule_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_timeout", value)

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sctp_filter_profile")

    @sctp_filter_profile.setter
    def sctp_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_filter_profile", value)

    @property
    @pulumi.getter(name="sendDenyPacket")
    def send_deny_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_deny_packet")

    @send_deny_packet.setter
    def send_deny_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_deny_packet", value)

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_negate")

    @service_negate.setter
    def service_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_negate", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyServiceArgs']]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="sgtCheck")
    def sgt_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sgt_check")

    @sgt_check.setter
    def sgt_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sgt_check", value)

    @property
    @pulumi.getter
    def sgts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySgtArgs']]]]:
        return pulumi.get(self, "sgts")

    @sgts.setter
    def sgts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySgtArgs']]]]):
        pulumi.set(self, "sgts", value)

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spamfilter_profile")

    @spamfilter_profile.setter
    def spamfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter_profile", value)

    @property
    @pulumi.getter(name="srcVendorMacs")
    def src_vendor_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcVendorMacArgs']]]]:
        return pulumi.get(self, "src_vendor_macs")

    @src_vendor_macs.setter
    def src_vendor_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcVendorMacArgs']]]]):
        pulumi.set(self, "src_vendor_macs", value)

    @property
    @pulumi.getter(name="srcaddr6Negate")
    def srcaddr6_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr6_negate")

    @srcaddr6_negate.setter
    def srcaddr6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr6_negate", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddr6Args']]]]:
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "srcaddr_negate")

    @srcaddr_negate.setter
    def srcaddr_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddrArgs']]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcintfArgs']]]]:
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_filter_profile")

    @ssh_filter_profile.setter
    def ssh_filter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_filter_profile", value)

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_policy_redirect")

    @ssh_policy_redirect.setter
    def ssh_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_redirect", value)

    @property
    @pulumi.getter(name="sslMirror")
    def ssl_mirror(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_mirror")

    @ssl_mirror.setter
    def ssl_mirror(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mirror", value)

    @property
    @pulumi.getter(name="sslMirrorIntfs")
    def ssl_mirror_intfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySslMirrorIntfArgs']]]]:
        return pulumi.get(self, "ssl_mirror_intfs")

    @ssl_mirror_intfs.setter
    def ssl_mirror_intfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicySslMirrorIntfArgs']]]]):
        pulumi.set(self, "ssl_mirror_intfs", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_mss_receiver")

    @tcp_mss_receiver.setter
    def tcp_mss_receiver(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_receiver", value)

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_mss_sender")

    @tcp_mss_sender.setter
    def tcp_mss_sender(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_mss_sender", value)

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_session_without_syn")

    @tcp_session_without_syn.setter
    def tcp_session_without_syn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_session_without_syn", value)

    @property
    @pulumi.getter(name="timeoutSendRst")
    def timeout_send_rst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout_send_rst")

    @timeout_send_rst.setter
    def timeout_send_rst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout_send_rst", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos_negate")

    @tos_negate.setter
    def tos_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_negate", value)

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_shaper")

    @traffic_shaper.setter
    def traffic_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper", value)

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_shaper_reverse")

    @traffic_shaper_reverse.setter
    def traffic_shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_shaper_reverse", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUrlCategoryArgs']]]]:
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUrlCategoryArgs']]]]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "videofilter_profile")

    @videofilter_profile.setter
    def videofilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "videofilter_profile", value)

    @property
    @pulumi.getter(name="vlanCosFwd")
    def vlan_cos_fwd(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_cos_fwd")

    @vlan_cos_fwd.setter
    def vlan_cos_fwd(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_cos_fwd", value)

    @property
    @pulumi.getter(name="vlanCosRev")
    def vlan_cos_rev(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_cos_rev")

    @vlan_cos_rev.setter
    def vlan_cos_rev(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_cos_rev", value)

    @property
    @pulumi.getter(name="vlanFilter")
    def vlan_filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_filter")

    @vlan_filter.setter
    def vlan_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_filter", value)

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voip_profile")

    @voip_profile.setter
    def voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_profile", value)

    @property
    @pulumi.getter
    def vpntunnel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpntunnel")

    @vpntunnel.setter
    def vpntunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpntunnel", value)

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "waf_profile")

    @waf_profile.setter
    def waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf_profile", value)

    @property
    @pulumi.getter
    def wanopt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wanopt")

    @wanopt.setter
    def wanopt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt", value)

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wanopt_detection")

    @wanopt_detection.setter
    def wanopt_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_detection", value)

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wanopt_passive_opt")

    @wanopt_passive_opt.setter
    def wanopt_passive_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_passive_opt", value)

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wanopt_peer")

    @wanopt_peer.setter
    def wanopt_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_peer", value)

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wanopt_profile")

    @wanopt_profile.setter
    def wanopt_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanopt_profile", value)

    @property
    @pulumi.getter
    def wccp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wccp")

    @wccp.setter
    def wccp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wccp", value)

    @property
    @pulumi.getter
    def webcache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webcache")

    @webcache.setter
    def webcache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache", value)

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webcache_https")

    @webcache_https.setter
    def webcache_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webcache_https", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webproxy_forward_server")

    @webproxy_forward_server.setter
    def webproxy_forward_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_forward_server", value)

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webproxy_profile")

    @webproxy_profile.setter
    def webproxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webproxy_profile", value)

    @property
    @pulumi.getter
    def wsso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wsso")

    @wsso.setter
    def wsso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wsso", value)

    @property
    @pulumi.getter(name="ztnaDeviceOwnership")
    def ztna_device_ownership(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ztna_device_ownership")

    @ztna_device_ownership.setter
    def ztna_device_ownership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_device_ownership", value)

    @property
    @pulumi.getter(name="ztnaEmsTagSecondaries")
    def ztna_ems_tag_secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagSecondaryArgs']]]]:
        return pulumi.get(self, "ztna_ems_tag_secondaries")

    @ztna_ems_tag_secondaries.setter
    def ztna_ems_tag_secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagSecondaryArgs']]]]):
        pulumi.set(self, "ztna_ems_tag_secondaries", value)

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagArgs']]]]:
        return pulumi.get(self, "ztna_ems_tags")

    @ztna_ems_tags.setter
    def ztna_ems_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaEmsTagArgs']]]]):
        pulumi.set(self, "ztna_ems_tags", value)

    @property
    @pulumi.getter(name="ztnaGeoTags")
    def ztna_geo_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaGeoTagArgs']]]]:
        return pulumi.get(self, "ztna_geo_tags")

    @ztna_geo_tags.setter
    def ztna_geo_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyZtnaGeoTagArgs']]]]):
        pulumi.set(self, "ztna_geo_tags", value)

    @property
    @pulumi.getter(name="ztnaPolicyRedirect")
    def ztna_policy_redirect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ztna_policy_redirect")

    @ztna_policy_redirect.setter
    def ztna_policy_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_policy_redirect", value)

    @property
    @pulumi.getter(name="ztnaStatus")
    def ztna_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ztna_status")

    @ztna_status.setter
    def ztna_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_status", value)

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ztna_tags_match_logic")

    @ztna_tags_match_logic.setter
    def ztna_tags_match_logic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_tags_match_logic", value)


class FirewallPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyAppCategoryArgs']]]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyAppGroupArgs']]]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyApplicationArgs']]]]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_path: Optional[pulumi.Input[str]] = None,
                 auth_redirect_addr: Optional[pulumi.Input[str]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyCustomLogFieldArgs']]]]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 delay_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDeviceArgs']]]]] = None,
                 diffserv_copy: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6_negate: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDstaddr6Args']]]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDstaddrArgs']]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDstintfArgs']]]]] = None,
                 dynamic_shaping: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_collect: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fec: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 fsso_agent_for_ntlm: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyFssoGroupArgs']]]]] = None,
                 geoip_anycast: Optional[pulumi.Input[str]] = None,
                 geoip_match: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyGroupArgs']]]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 identity_based_route: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6CustomGroupArgs']]]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6CustomArgs']]]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6GroupArgs']]]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6NameArgs']]]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service6_src: Optional[pulumi.Input[str]] = None,
                 internet_service6_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcCustomGroupArgs']]]]] = None,
                 internet_service6_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcCustomArgs']]]]] = None,
                 internet_service6_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcGroupArgs']]]]] = None,
                 internet_service6_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcNameArgs']]]]] = None,
                 internet_service6_src_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceCustomGroupArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceGroupArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceIdArgs']]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceNameArgs']]]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcCustomArgs']]]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcGroupArgs']]]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcIdArgs']]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcNameArgs']]]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 learning_mode: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 match_vip: Optional[pulumi.Input[str]] = None,
                 match_vip_only: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 natinbound: Optional[pulumi.Input[str]] = None,
                 natip: Optional[pulumi.Input[str]] = None,
                 natoutbound: Optional[pulumi.Input[str]] = None,
                 network_service_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyNetworkServiceDynamicArgs']]]]] = None,
                 network_service_src_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyNetworkServiceSrcDynamicArgs']]]]] = None,
                 np_acceleration: Optional[pulumi.Input[str]] = None,
                 ntlm: Optional[pulumi.Input[str]] = None,
                 ntlm_enabled_browsers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyNtlmEnabledBrowserArgs']]]]] = None,
                 ntlm_guest: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 passive_wan_health_measurement: Optional[pulumi.Input[str]] = None,
                 pcp_inbound: Optional[pulumi.Input[str]] = None,
                 pcp_outbound: Optional[pulumi.Input[str]] = None,
                 pcp_poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyPcpPoolnameArgs']]]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 permit_stun_host: Optional[pulumi.Input[str]] = None,
                 policy_expiry: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date_utc: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyPoolname6Args']]]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyPoolnameArgs']]]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 reputation_direction: Optional[pulumi.Input[str]] = None,
                 reputation_direction6: Optional[pulumi.Input[str]] = None,
                 reputation_minimum: Optional[pulumi.Input[int]] = None,
                 reputation_minimum6: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rtp_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyRtpAddrArgs']]]]] = None,
                 rtp_nat: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 schedule_timeout: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 send_deny_packet: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyServiceArgs']]]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 sgt_check: Optional[pulumi.Input[str]] = None,
                 sgts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySgtArgs']]]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 src_vendor_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcVendorMacArgs']]]]] = None,
                 srcaddr6_negate: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcaddr6Args']]]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcaddrArgs']]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcintfArgs']]]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_mirror: Optional[pulumi.Input[str]] = None,
                 ssl_mirror_intfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySslMirrorIntfArgs']]]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 timeout_send_rst: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyUrlCategoryArgs']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyUserArgs']]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 vlan_cos_fwd: Optional[pulumi.Input[int]] = None,
                 vlan_cos_rev: Optional[pulumi.Input[int]] = None,
                 vlan_filter: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 wsso: Optional[pulumi.Input[str]] = None,
                 ztna_device_ownership: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tag_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyZtnaEmsTagSecondaryArgs']]]]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyZtnaEmsTagArgs']]]]] = None,
                 ztna_geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyZtnaGeoTagArgs']]]]] = None,
                 ztna_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ztna_status: Optional[pulumi.Input[str]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 anti_replay: Optional[pulumi.Input[str]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyAppCategoryArgs']]]]] = None,
                 app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyAppGroupArgs']]]]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyApplicationArgs']]]]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_path: Optional[pulumi.Input[str]] = None,
                 auth_redirect_addr: Optional[pulumi.Input[str]] = None,
                 auto_asic_offload: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 block_notification: Optional[pulumi.Input[str]] = None,
                 captive_portal_exempt: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 cifs_profile: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyCustomLogFieldArgs']]]]] = None,
                 decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
                 delay_tcp_npu_session: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDeviceArgs']]]]] = None,
                 diffserv_copy: Optional[pulumi.Input[str]] = None,
                 diffserv_forward: Optional[pulumi.Input[str]] = None,
                 diffserv_reverse: Optional[pulumi.Input[str]] = None,
                 diffservcode_forward: Optional[pulumi.Input[str]] = None,
                 diffservcode_rev: Optional[pulumi.Input[str]] = None,
                 disclaimer: Optional[pulumi.Input[str]] = None,
                 dlp_profile: Optional[pulumi.Input[str]] = None,
                 dlp_sensor: Optional[pulumi.Input[str]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dsri: Optional[pulumi.Input[str]] = None,
                 dstaddr6_negate: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDstaddr6Args']]]]] = None,
                 dstaddr_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDstaddrArgs']]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDstintfArgs']]]]] = None,
                 dynamic_shaping: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_collect: Optional[pulumi.Input[str]] = None,
                 emailfilter_profile: Optional[pulumi.Input[str]] = None,
                 fec: Optional[pulumi.Input[str]] = None,
                 file_filter_profile: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fixedport: Optional[pulumi.Input[str]] = None,
                 fsso: Optional[pulumi.Input[str]] = None,
                 fsso_agent_for_ntlm: Optional[pulumi.Input[str]] = None,
                 fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyFssoGroupArgs']]]]] = None,
                 geoip_anycast: Optional[pulumi.Input[str]] = None,
                 geoip_match: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 global_label: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyGroupArgs']]]]] = None,
                 http_policy_redirect: Optional[pulumi.Input[str]] = None,
                 icap_profile: Optional[pulumi.Input[str]] = None,
                 identity_based_route: Optional[pulumi.Input[str]] = None,
                 inbound: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service6: Optional[pulumi.Input[str]] = None,
                 internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6CustomGroupArgs']]]]] = None,
                 internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6CustomArgs']]]]] = None,
                 internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6GroupArgs']]]]] = None,
                 internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6NameArgs']]]]] = None,
                 internet_service6_negate: Optional[pulumi.Input[str]] = None,
                 internet_service6_src: Optional[pulumi.Input[str]] = None,
                 internet_service6_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcCustomGroupArgs']]]]] = None,
                 internet_service6_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcCustomArgs']]]]] = None,
                 internet_service6_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcGroupArgs']]]]] = None,
                 internet_service6_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcNameArgs']]]]] = None,
                 internet_service6_src_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceCustomGroupArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceGroupArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceIdArgs']]]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceNameArgs']]]]] = None,
                 internet_service_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
                 internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcCustomArgs']]]]] = None,
                 internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcGroupArgs']]]]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcIdArgs']]]]] = None,
                 internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcNameArgs']]]]] = None,
                 internet_service_src_negate: Optional[pulumi.Input[str]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 ips_voip_filter: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 learning_mode: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 match_vip: Optional[pulumi.Input[str]] = None,
                 match_vip_only: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 nat46: Optional[pulumi.Input[str]] = None,
                 nat64: Optional[pulumi.Input[str]] = None,
                 natinbound: Optional[pulumi.Input[str]] = None,
                 natip: Optional[pulumi.Input[str]] = None,
                 natoutbound: Optional[pulumi.Input[str]] = None,
                 network_service_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyNetworkServiceDynamicArgs']]]]] = None,
                 network_service_src_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyNetworkServiceSrcDynamicArgs']]]]] = None,
                 np_acceleration: Optional[pulumi.Input[str]] = None,
                 ntlm: Optional[pulumi.Input[str]] = None,
                 ntlm_enabled_browsers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyNtlmEnabledBrowserArgs']]]]] = None,
                 ntlm_guest: Optional[pulumi.Input[str]] = None,
                 outbound: Optional[pulumi.Input[str]] = None,
                 passive_wan_health_measurement: Optional[pulumi.Input[str]] = None,
                 pcp_inbound: Optional[pulumi.Input[str]] = None,
                 pcp_outbound: Optional[pulumi.Input[str]] = None,
                 pcp_poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyPcpPoolnameArgs']]]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 permit_any_host: Optional[pulumi.Input[str]] = None,
                 permit_stun_host: Optional[pulumi.Input[str]] = None,
                 policy_expiry: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date: Optional[pulumi.Input[str]] = None,
                 policy_expiry_date_utc: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyPoolname6Args']]]]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyPoolnameArgs']]]]] = None,
                 profile_group: Optional[pulumi.Input[str]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 radius_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 replacemsg_override_group: Optional[pulumi.Input[str]] = None,
                 reputation_direction: Optional[pulumi.Input[str]] = None,
                 reputation_direction6: Optional[pulumi.Input[str]] = None,
                 reputation_minimum: Optional[pulumi.Input[int]] = None,
                 reputation_minimum6: Optional[pulumi.Input[int]] = None,
                 rsso: Optional[pulumi.Input[str]] = None,
                 rtp_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyRtpAddrArgs']]]]] = None,
                 rtp_nat: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 schedule_timeout: Optional[pulumi.Input[str]] = None,
                 sctp_filter_profile: Optional[pulumi.Input[str]] = None,
                 send_deny_packet: Optional[pulumi.Input[str]] = None,
                 service_negate: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyServiceArgs']]]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 sgt_check: Optional[pulumi.Input[str]] = None,
                 sgts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySgtArgs']]]]] = None,
                 spamfilter_profile: Optional[pulumi.Input[str]] = None,
                 src_vendor_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcVendorMacArgs']]]]] = None,
                 srcaddr6_negate: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcaddr6Args']]]]] = None,
                 srcaddr_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcaddrArgs']]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcintfArgs']]]]] = None,
                 ssh_filter_profile: Optional[pulumi.Input[str]] = None,
                 ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ssl_mirror: Optional[pulumi.Input[str]] = None,
                 ssl_mirror_intfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySslMirrorIntfArgs']]]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
                 tcp_mss_sender: Optional[pulumi.Input[int]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 timeout_send_rst: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 tos_negate: Optional[pulumi.Input[str]] = None,
                 traffic_shaper: Optional[pulumi.Input[str]] = None,
                 traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
                 url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyUrlCategoryArgs']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyUserArgs']]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_profile: Optional[pulumi.Input[str]] = None,
                 vlan_cos_fwd: Optional[pulumi.Input[int]] = None,
                 vlan_cos_rev: Optional[pulumi.Input[int]] = None,
                 vlan_filter: Optional[pulumi.Input[str]] = None,
                 voip_profile: Optional[pulumi.Input[str]] = None,
                 vpntunnel: Optional[pulumi.Input[str]] = None,
                 waf_profile: Optional[pulumi.Input[str]] = None,
                 wanopt: Optional[pulumi.Input[str]] = None,
                 wanopt_detection: Optional[pulumi.Input[str]] = None,
                 wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
                 wanopt_peer: Optional[pulumi.Input[str]] = None,
                 wanopt_profile: Optional[pulumi.Input[str]] = None,
                 wccp: Optional[pulumi.Input[str]] = None,
                 webcache: Optional[pulumi.Input[str]] = None,
                 webcache_https: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 webproxy_forward_server: Optional[pulumi.Input[str]] = None,
                 webproxy_profile: Optional[pulumi.Input[str]] = None,
                 wsso: Optional[pulumi.Input[str]] = None,
                 ztna_device_ownership: Optional[pulumi.Input[str]] = None,
                 ztna_ems_tag_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyZtnaEmsTagSecondaryArgs']]]]] = None,
                 ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyZtnaEmsTagArgs']]]]] = None,
                 ztna_geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyZtnaGeoTagArgs']]]]] = None,
                 ztna_policy_redirect: Optional[pulumi.Input[str]] = None,
                 ztna_status: Optional[pulumi.Input[str]] = None,
                 ztna_tags_match_logic: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallPolicyArgs.__new__(FirewallPolicyArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["anti_replay"] = anti_replay
            __props__.__dict__["app_categories"] = app_categories
            __props__.__dict__["app_groups"] = app_groups
            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["applications"] = applications
            __props__.__dict__["auth_cert"] = auth_cert
            __props__.__dict__["auth_path"] = auth_path
            __props__.__dict__["auth_redirect_addr"] = auth_redirect_addr
            __props__.__dict__["auto_asic_offload"] = auto_asic_offload
            __props__.__dict__["av_profile"] = av_profile
            __props__.__dict__["block_notification"] = block_notification
            __props__.__dict__["captive_portal_exempt"] = captive_portal_exempt
            __props__.__dict__["capture_packet"] = capture_packet
            __props__.__dict__["cifs_profile"] = cifs_profile
            __props__.__dict__["comments"] = comments
            __props__.__dict__["custom_log_fields"] = custom_log_fields
            __props__.__dict__["decrypted_traffic_mirror"] = decrypted_traffic_mirror
            __props__.__dict__["delay_tcp_npu_session"] = delay_tcp_npu_session
            __props__.__dict__["devices"] = devices
            __props__.__dict__["diffserv_copy"] = diffserv_copy
            __props__.__dict__["diffserv_forward"] = diffserv_forward
            __props__.__dict__["diffserv_reverse"] = diffserv_reverse
            __props__.__dict__["diffservcode_forward"] = diffservcode_forward
            __props__.__dict__["diffservcode_rev"] = diffservcode_rev
            __props__.__dict__["disclaimer"] = disclaimer
            __props__.__dict__["dlp_profile"] = dlp_profile
            __props__.__dict__["dlp_sensor"] = dlp_sensor
            __props__.__dict__["dnsfilter_profile"] = dnsfilter_profile
            __props__.__dict__["dsri"] = dsri
            __props__.__dict__["dstaddr6_negate"] = dstaddr6_negate
            __props__.__dict__["dstaddr6s"] = dstaddr6s
            __props__.__dict__["dstaddr_negate"] = dstaddr_negate
            __props__.__dict__["dstaddrs"] = dstaddrs
            if dstintfs is None and not opts.urn:
                raise TypeError("Missing required property 'dstintfs'")
            __props__.__dict__["dstintfs"] = dstintfs
            __props__.__dict__["dynamic_shaping"] = dynamic_shaping
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["email_collect"] = email_collect
            __props__.__dict__["emailfilter_profile"] = emailfilter_profile
            __props__.__dict__["fec"] = fec
            __props__.__dict__["file_filter_profile"] = file_filter_profile
            __props__.__dict__["firewall_session_dirty"] = firewall_session_dirty
            __props__.__dict__["fixedport"] = fixedport
            __props__.__dict__["fsso"] = fsso
            __props__.__dict__["fsso_agent_for_ntlm"] = fsso_agent_for_ntlm
            __props__.__dict__["fsso_groups"] = fsso_groups
            __props__.__dict__["geoip_anycast"] = geoip_anycast
            __props__.__dict__["geoip_match"] = geoip_match
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["global_label"] = global_label
            __props__.__dict__["groups"] = groups
            __props__.__dict__["http_policy_redirect"] = http_policy_redirect
            __props__.__dict__["icap_profile"] = icap_profile
            __props__.__dict__["identity_based_route"] = identity_based_route
            __props__.__dict__["inbound"] = inbound
            __props__.__dict__["inspection_mode"] = inspection_mode
            __props__.__dict__["internet_service"] = internet_service
            __props__.__dict__["internet_service6"] = internet_service6
            __props__.__dict__["internet_service6_custom_groups"] = internet_service6_custom_groups
            __props__.__dict__["internet_service6_customs"] = internet_service6_customs
            __props__.__dict__["internet_service6_groups"] = internet_service6_groups
            __props__.__dict__["internet_service6_names"] = internet_service6_names
            __props__.__dict__["internet_service6_negate"] = internet_service6_negate
            __props__.__dict__["internet_service6_src"] = internet_service6_src
            __props__.__dict__["internet_service6_src_custom_groups"] = internet_service6_src_custom_groups
            __props__.__dict__["internet_service6_src_customs"] = internet_service6_src_customs
            __props__.__dict__["internet_service6_src_groups"] = internet_service6_src_groups
            __props__.__dict__["internet_service6_src_names"] = internet_service6_src_names
            __props__.__dict__["internet_service6_src_negate"] = internet_service6_src_negate
            __props__.__dict__["internet_service_custom_groups"] = internet_service_custom_groups
            __props__.__dict__["internet_service_customs"] = internet_service_customs
            __props__.__dict__["internet_service_groups"] = internet_service_groups
            __props__.__dict__["internet_service_ids"] = internet_service_ids
            __props__.__dict__["internet_service_names"] = internet_service_names
            __props__.__dict__["internet_service_negate"] = internet_service_negate
            __props__.__dict__["internet_service_src"] = internet_service_src
            __props__.__dict__["internet_service_src_custom_groups"] = internet_service_src_custom_groups
            __props__.__dict__["internet_service_src_customs"] = internet_service_src_customs
            __props__.__dict__["internet_service_src_groups"] = internet_service_src_groups
            __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
            __props__.__dict__["internet_service_src_names"] = internet_service_src_names
            __props__.__dict__["internet_service_src_negate"] = internet_service_src_negate
            __props__.__dict__["ippool"] = ippool
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["ips_voip_filter"] = ips_voip_filter
            __props__.__dict__["label"] = label
            __props__.__dict__["learning_mode"] = learning_mode
            __props__.__dict__["logtraffic"] = logtraffic
            __props__.__dict__["logtraffic_start"] = logtraffic_start
            __props__.__dict__["match_vip"] = match_vip
            __props__.__dict__["match_vip_only"] = match_vip_only
            __props__.__dict__["name"] = name
            __props__.__dict__["nat"] = nat
            __props__.__dict__["nat46"] = nat46
            __props__.__dict__["nat64"] = nat64
            __props__.__dict__["natinbound"] = natinbound
            __props__.__dict__["natip"] = natip
            __props__.__dict__["natoutbound"] = natoutbound
            __props__.__dict__["network_service_dynamics"] = network_service_dynamics
            __props__.__dict__["network_service_src_dynamics"] = network_service_src_dynamics
            __props__.__dict__["np_acceleration"] = np_acceleration
            __props__.__dict__["ntlm"] = ntlm
            __props__.__dict__["ntlm_enabled_browsers"] = ntlm_enabled_browsers
            __props__.__dict__["ntlm_guest"] = ntlm_guest
            __props__.__dict__["outbound"] = outbound
            __props__.__dict__["passive_wan_health_measurement"] = passive_wan_health_measurement
            __props__.__dict__["pcp_inbound"] = pcp_inbound
            __props__.__dict__["pcp_outbound"] = pcp_outbound
            __props__.__dict__["pcp_poolnames"] = pcp_poolnames
            __props__.__dict__["per_ip_shaper"] = per_ip_shaper
            __props__.__dict__["permit_any_host"] = permit_any_host
            __props__.__dict__["permit_stun_host"] = permit_stun_host
            __props__.__dict__["policy_expiry"] = policy_expiry
            __props__.__dict__["policy_expiry_date"] = policy_expiry_date
            __props__.__dict__["policy_expiry_date_utc"] = policy_expiry_date_utc
            __props__.__dict__["policyid"] = policyid
            __props__.__dict__["poolname6s"] = poolname6s
            __props__.__dict__["poolnames"] = poolnames
            __props__.__dict__["profile_group"] = profile_group
            __props__.__dict__["profile_protocol_options"] = profile_protocol_options
            __props__.__dict__["profile_type"] = profile_type
            __props__.__dict__["radius_mac_auth_bypass"] = radius_mac_auth_bypass
            __props__.__dict__["redirect_url"] = redirect_url
            __props__.__dict__["replacemsg_override_group"] = replacemsg_override_group
            __props__.__dict__["reputation_direction"] = reputation_direction
            __props__.__dict__["reputation_direction6"] = reputation_direction6
            __props__.__dict__["reputation_minimum"] = reputation_minimum
            __props__.__dict__["reputation_minimum6"] = reputation_minimum6
            __props__.__dict__["rsso"] = rsso
            __props__.__dict__["rtp_addrs"] = rtp_addrs
            __props__.__dict__["rtp_nat"] = rtp_nat
            __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["schedule_timeout"] = schedule_timeout
            __props__.__dict__["sctp_filter_profile"] = sctp_filter_profile
            __props__.__dict__["send_deny_packet"] = send_deny_packet
            __props__.__dict__["service_negate"] = service_negate
            __props__.__dict__["services"] = services
            __props__.__dict__["session_ttl"] = session_ttl
            __props__.__dict__["sgt_check"] = sgt_check
            __props__.__dict__["sgts"] = sgts
            __props__.__dict__["spamfilter_profile"] = spamfilter_profile
            __props__.__dict__["src_vendor_macs"] = src_vendor_macs
            __props__.__dict__["srcaddr6_negate"] = srcaddr6_negate
            __props__.__dict__["srcaddr6s"] = srcaddr6s
            __props__.__dict__["srcaddr_negate"] = srcaddr_negate
            __props__.__dict__["srcaddrs"] = srcaddrs
            if srcintfs is None and not opts.urn:
                raise TypeError("Missing required property 'srcintfs'")
            __props__.__dict__["srcintfs"] = srcintfs
            __props__.__dict__["ssh_filter_profile"] = ssh_filter_profile
            __props__.__dict__["ssh_policy_redirect"] = ssh_policy_redirect
            __props__.__dict__["ssl_mirror"] = ssl_mirror
            __props__.__dict__["ssl_mirror_intfs"] = ssl_mirror_intfs
            __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
            __props__.__dict__["status"] = status
            __props__.__dict__["tcp_mss_receiver"] = tcp_mss_receiver
            __props__.__dict__["tcp_mss_sender"] = tcp_mss_sender
            __props__.__dict__["tcp_session_without_syn"] = tcp_session_without_syn
            __props__.__dict__["timeout_send_rst"] = timeout_send_rst
            __props__.__dict__["tos"] = tos
            __props__.__dict__["tos_mask"] = tos_mask
            __props__.__dict__["tos_negate"] = tos_negate
            __props__.__dict__["traffic_shaper"] = traffic_shaper
            __props__.__dict__["traffic_shaper_reverse"] = traffic_shaper_reverse
            __props__.__dict__["url_categories"] = url_categories
            __props__.__dict__["users"] = users
            __props__.__dict__["utm_status"] = utm_status
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["videofilter_profile"] = videofilter_profile
            __props__.__dict__["vlan_cos_fwd"] = vlan_cos_fwd
            __props__.__dict__["vlan_cos_rev"] = vlan_cos_rev
            __props__.__dict__["vlan_filter"] = vlan_filter
            __props__.__dict__["voip_profile"] = voip_profile
            __props__.__dict__["vpntunnel"] = vpntunnel
            __props__.__dict__["waf_profile"] = waf_profile
            __props__.__dict__["wanopt"] = wanopt
            __props__.__dict__["wanopt_detection"] = wanopt_detection
            __props__.__dict__["wanopt_passive_opt"] = wanopt_passive_opt
            __props__.__dict__["wanopt_peer"] = wanopt_peer
            __props__.__dict__["wanopt_profile"] = wanopt_profile
            __props__.__dict__["wccp"] = wccp
            __props__.__dict__["webcache"] = webcache
            __props__.__dict__["webcache_https"] = webcache_https
            __props__.__dict__["webfilter_profile"] = webfilter_profile
            __props__.__dict__["webproxy_forward_server"] = webproxy_forward_server
            __props__.__dict__["webproxy_profile"] = webproxy_profile
            __props__.__dict__["wsso"] = wsso
            __props__.__dict__["ztna_device_ownership"] = ztna_device_ownership
            __props__.__dict__["ztna_ems_tag_secondaries"] = ztna_ems_tag_secondaries
            __props__.__dict__["ztna_ems_tags"] = ztna_ems_tags
            __props__.__dict__["ztna_geo_tags"] = ztna_geo_tags
            __props__.__dict__["ztna_policy_redirect"] = ztna_policy_redirect
            __props__.__dict__["ztna_status"] = ztna_status
            __props__.__dict__["ztna_tags_match_logic"] = ztna_tags_match_logic
        super(FirewallPolicy, __self__).__init__(
            'fortios:index/firewallPolicy:FirewallPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            anti_replay: Optional[pulumi.Input[str]] = None,
            app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyAppCategoryArgs']]]]] = None,
            app_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyAppGroupArgs']]]]] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyApplicationArgs']]]]] = None,
            auth_cert: Optional[pulumi.Input[str]] = None,
            auth_path: Optional[pulumi.Input[str]] = None,
            auth_redirect_addr: Optional[pulumi.Input[str]] = None,
            auto_asic_offload: Optional[pulumi.Input[str]] = None,
            av_profile: Optional[pulumi.Input[str]] = None,
            block_notification: Optional[pulumi.Input[str]] = None,
            captive_portal_exempt: Optional[pulumi.Input[str]] = None,
            capture_packet: Optional[pulumi.Input[str]] = None,
            cifs_profile: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyCustomLogFieldArgs']]]]] = None,
            decrypted_traffic_mirror: Optional[pulumi.Input[str]] = None,
            delay_tcp_npu_session: Optional[pulumi.Input[str]] = None,
            devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDeviceArgs']]]]] = None,
            diffserv_copy: Optional[pulumi.Input[str]] = None,
            diffserv_forward: Optional[pulumi.Input[str]] = None,
            diffserv_reverse: Optional[pulumi.Input[str]] = None,
            diffservcode_forward: Optional[pulumi.Input[str]] = None,
            diffservcode_rev: Optional[pulumi.Input[str]] = None,
            disclaimer: Optional[pulumi.Input[str]] = None,
            dlp_profile: Optional[pulumi.Input[str]] = None,
            dlp_sensor: Optional[pulumi.Input[str]] = None,
            dnsfilter_profile: Optional[pulumi.Input[str]] = None,
            dsri: Optional[pulumi.Input[str]] = None,
            dstaddr6_negate: Optional[pulumi.Input[str]] = None,
            dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDstaddr6Args']]]]] = None,
            dstaddr_negate: Optional[pulumi.Input[str]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDstaddrArgs']]]]] = None,
            dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyDstintfArgs']]]]] = None,
            dynamic_shaping: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            email_collect: Optional[pulumi.Input[str]] = None,
            emailfilter_profile: Optional[pulumi.Input[str]] = None,
            fec: Optional[pulumi.Input[str]] = None,
            file_filter_profile: Optional[pulumi.Input[str]] = None,
            firewall_session_dirty: Optional[pulumi.Input[str]] = None,
            fixedport: Optional[pulumi.Input[str]] = None,
            fsso: Optional[pulumi.Input[str]] = None,
            fsso_agent_for_ntlm: Optional[pulumi.Input[str]] = None,
            fsso_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyFssoGroupArgs']]]]] = None,
            geoip_anycast: Optional[pulumi.Input[str]] = None,
            geoip_match: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            global_label: Optional[pulumi.Input[str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyGroupArgs']]]]] = None,
            http_policy_redirect: Optional[pulumi.Input[str]] = None,
            icap_profile: Optional[pulumi.Input[str]] = None,
            identity_based_route: Optional[pulumi.Input[str]] = None,
            inbound: Optional[pulumi.Input[str]] = None,
            inspection_mode: Optional[pulumi.Input[str]] = None,
            internet_service: Optional[pulumi.Input[str]] = None,
            internet_service6: Optional[pulumi.Input[str]] = None,
            internet_service6_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6CustomGroupArgs']]]]] = None,
            internet_service6_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6CustomArgs']]]]] = None,
            internet_service6_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6GroupArgs']]]]] = None,
            internet_service6_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6NameArgs']]]]] = None,
            internet_service6_negate: Optional[pulumi.Input[str]] = None,
            internet_service6_src: Optional[pulumi.Input[str]] = None,
            internet_service6_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcCustomGroupArgs']]]]] = None,
            internet_service6_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcCustomArgs']]]]] = None,
            internet_service6_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcGroupArgs']]]]] = None,
            internet_service6_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetService6SrcNameArgs']]]]] = None,
            internet_service6_src_negate: Optional[pulumi.Input[str]] = None,
            internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceCustomGroupArgs']]]]] = None,
            internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceCustomArgs']]]]] = None,
            internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceGroupArgs']]]]] = None,
            internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceIdArgs']]]]] = None,
            internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceNameArgs']]]]] = None,
            internet_service_negate: Optional[pulumi.Input[str]] = None,
            internet_service_src: Optional[pulumi.Input[str]] = None,
            internet_service_src_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcCustomGroupArgs']]]]] = None,
            internet_service_src_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcCustomArgs']]]]] = None,
            internet_service_src_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcGroupArgs']]]]] = None,
            internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcIdArgs']]]]] = None,
            internet_service_src_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyInternetServiceSrcNameArgs']]]]] = None,
            internet_service_src_negate: Optional[pulumi.Input[str]] = None,
            ippool: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            ips_voip_filter: Optional[pulumi.Input[str]] = None,
            label: Optional[pulumi.Input[str]] = None,
            learning_mode: Optional[pulumi.Input[str]] = None,
            logtraffic: Optional[pulumi.Input[str]] = None,
            logtraffic_start: Optional[pulumi.Input[str]] = None,
            match_vip: Optional[pulumi.Input[str]] = None,
            match_vip_only: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat: Optional[pulumi.Input[str]] = None,
            nat46: Optional[pulumi.Input[str]] = None,
            nat64: Optional[pulumi.Input[str]] = None,
            natinbound: Optional[pulumi.Input[str]] = None,
            natip: Optional[pulumi.Input[str]] = None,
            natoutbound: Optional[pulumi.Input[str]] = None,
            network_service_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyNetworkServiceDynamicArgs']]]]] = None,
            network_service_src_dynamics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyNetworkServiceSrcDynamicArgs']]]]] = None,
            np_acceleration: Optional[pulumi.Input[str]] = None,
            ntlm: Optional[pulumi.Input[str]] = None,
            ntlm_enabled_browsers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyNtlmEnabledBrowserArgs']]]]] = None,
            ntlm_guest: Optional[pulumi.Input[str]] = None,
            outbound: Optional[pulumi.Input[str]] = None,
            passive_wan_health_measurement: Optional[pulumi.Input[str]] = None,
            pcp_inbound: Optional[pulumi.Input[str]] = None,
            pcp_outbound: Optional[pulumi.Input[str]] = None,
            pcp_poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyPcpPoolnameArgs']]]]] = None,
            per_ip_shaper: Optional[pulumi.Input[str]] = None,
            permit_any_host: Optional[pulumi.Input[str]] = None,
            permit_stun_host: Optional[pulumi.Input[str]] = None,
            policy_expiry: Optional[pulumi.Input[str]] = None,
            policy_expiry_date: Optional[pulumi.Input[str]] = None,
            policy_expiry_date_utc: Optional[pulumi.Input[str]] = None,
            policyid: Optional[pulumi.Input[int]] = None,
            poolname6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyPoolname6Args']]]]] = None,
            poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyPoolnameArgs']]]]] = None,
            profile_group: Optional[pulumi.Input[str]] = None,
            profile_protocol_options: Optional[pulumi.Input[str]] = None,
            profile_type: Optional[pulumi.Input[str]] = None,
            radius_mac_auth_bypass: Optional[pulumi.Input[str]] = None,
            redirect_url: Optional[pulumi.Input[str]] = None,
            replacemsg_override_group: Optional[pulumi.Input[str]] = None,
            reputation_direction: Optional[pulumi.Input[str]] = None,
            reputation_direction6: Optional[pulumi.Input[str]] = None,
            reputation_minimum: Optional[pulumi.Input[int]] = None,
            reputation_minimum6: Optional[pulumi.Input[int]] = None,
            rsso: Optional[pulumi.Input[str]] = None,
            rtp_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyRtpAddrArgs']]]]] = None,
            rtp_nat: Optional[pulumi.Input[str]] = None,
            scan_botnet_connections: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            schedule_timeout: Optional[pulumi.Input[str]] = None,
            sctp_filter_profile: Optional[pulumi.Input[str]] = None,
            send_deny_packet: Optional[pulumi.Input[str]] = None,
            service_negate: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyServiceArgs']]]]] = None,
            session_ttl: Optional[pulumi.Input[int]] = None,
            sgt_check: Optional[pulumi.Input[str]] = None,
            sgts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySgtArgs']]]]] = None,
            spamfilter_profile: Optional[pulumi.Input[str]] = None,
            src_vendor_macs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcVendorMacArgs']]]]] = None,
            srcaddr6_negate: Optional[pulumi.Input[str]] = None,
            srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcaddr6Args']]]]] = None,
            srcaddr_negate: Optional[pulumi.Input[str]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcaddrArgs']]]]] = None,
            srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySrcintfArgs']]]]] = None,
            ssh_filter_profile: Optional[pulumi.Input[str]] = None,
            ssh_policy_redirect: Optional[pulumi.Input[str]] = None,
            ssl_mirror: Optional[pulumi.Input[str]] = None,
            ssl_mirror_intfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicySslMirrorIntfArgs']]]]] = None,
            ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tcp_mss_receiver: Optional[pulumi.Input[int]] = None,
            tcp_mss_sender: Optional[pulumi.Input[int]] = None,
            tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
            timeout_send_rst: Optional[pulumi.Input[str]] = None,
            tos: Optional[pulumi.Input[str]] = None,
            tos_mask: Optional[pulumi.Input[str]] = None,
            tos_negate: Optional[pulumi.Input[str]] = None,
            traffic_shaper: Optional[pulumi.Input[str]] = None,
            traffic_shaper_reverse: Optional[pulumi.Input[str]] = None,
            url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyUrlCategoryArgs']]]]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyUserArgs']]]]] = None,
            utm_status: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            videofilter_profile: Optional[pulumi.Input[str]] = None,
            vlan_cos_fwd: Optional[pulumi.Input[int]] = None,
            vlan_cos_rev: Optional[pulumi.Input[int]] = None,
            vlan_filter: Optional[pulumi.Input[str]] = None,
            voip_profile: Optional[pulumi.Input[str]] = None,
            vpntunnel: Optional[pulumi.Input[str]] = None,
            waf_profile: Optional[pulumi.Input[str]] = None,
            wanopt: Optional[pulumi.Input[str]] = None,
            wanopt_detection: Optional[pulumi.Input[str]] = None,
            wanopt_passive_opt: Optional[pulumi.Input[str]] = None,
            wanopt_peer: Optional[pulumi.Input[str]] = None,
            wanopt_profile: Optional[pulumi.Input[str]] = None,
            wccp: Optional[pulumi.Input[str]] = None,
            webcache: Optional[pulumi.Input[str]] = None,
            webcache_https: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None,
            webproxy_forward_server: Optional[pulumi.Input[str]] = None,
            webproxy_profile: Optional[pulumi.Input[str]] = None,
            wsso: Optional[pulumi.Input[str]] = None,
            ztna_device_ownership: Optional[pulumi.Input[str]] = None,
            ztna_ems_tag_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyZtnaEmsTagSecondaryArgs']]]]] = None,
            ztna_ems_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyZtnaEmsTagArgs']]]]] = None,
            ztna_geo_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallPolicyZtnaGeoTagArgs']]]]] = None,
            ztna_policy_redirect: Optional[pulumi.Input[str]] = None,
            ztna_status: Optional[pulumi.Input[str]] = None,
            ztna_tags_match_logic: Optional[pulumi.Input[str]] = None) -> 'FirewallPolicy':
        """
        Get an existing FirewallPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallPolicyState.__new__(_FirewallPolicyState)

        __props__.__dict__["action"] = action
        __props__.__dict__["anti_replay"] = anti_replay
        __props__.__dict__["app_categories"] = app_categories
        __props__.__dict__["app_groups"] = app_groups
        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["applications"] = applications
        __props__.__dict__["auth_cert"] = auth_cert
        __props__.__dict__["auth_path"] = auth_path
        __props__.__dict__["auth_redirect_addr"] = auth_redirect_addr
        __props__.__dict__["auto_asic_offload"] = auto_asic_offload
        __props__.__dict__["av_profile"] = av_profile
        __props__.__dict__["block_notification"] = block_notification
        __props__.__dict__["captive_portal_exempt"] = captive_portal_exempt
        __props__.__dict__["capture_packet"] = capture_packet
        __props__.__dict__["cifs_profile"] = cifs_profile
        __props__.__dict__["comments"] = comments
        __props__.__dict__["custom_log_fields"] = custom_log_fields
        __props__.__dict__["decrypted_traffic_mirror"] = decrypted_traffic_mirror
        __props__.__dict__["delay_tcp_npu_session"] = delay_tcp_npu_session
        __props__.__dict__["devices"] = devices
        __props__.__dict__["diffserv_copy"] = diffserv_copy
        __props__.__dict__["diffserv_forward"] = diffserv_forward
        __props__.__dict__["diffserv_reverse"] = diffserv_reverse
        __props__.__dict__["diffservcode_forward"] = diffservcode_forward
        __props__.__dict__["diffservcode_rev"] = diffservcode_rev
        __props__.__dict__["disclaimer"] = disclaimer
        __props__.__dict__["dlp_profile"] = dlp_profile
        __props__.__dict__["dlp_sensor"] = dlp_sensor
        __props__.__dict__["dnsfilter_profile"] = dnsfilter_profile
        __props__.__dict__["dsri"] = dsri
        __props__.__dict__["dstaddr6_negate"] = dstaddr6_negate
        __props__.__dict__["dstaddr6s"] = dstaddr6s
        __props__.__dict__["dstaddr_negate"] = dstaddr_negate
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dstintfs"] = dstintfs
        __props__.__dict__["dynamic_shaping"] = dynamic_shaping
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["email_collect"] = email_collect
        __props__.__dict__["emailfilter_profile"] = emailfilter_profile
        __props__.__dict__["fec"] = fec
        __props__.__dict__["file_filter_profile"] = file_filter_profile
        __props__.__dict__["firewall_session_dirty"] = firewall_session_dirty
        __props__.__dict__["fixedport"] = fixedport
        __props__.__dict__["fsso"] = fsso
        __props__.__dict__["fsso_agent_for_ntlm"] = fsso_agent_for_ntlm
        __props__.__dict__["fsso_groups"] = fsso_groups
        __props__.__dict__["geoip_anycast"] = geoip_anycast
        __props__.__dict__["geoip_match"] = geoip_match
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["global_label"] = global_label
        __props__.__dict__["groups"] = groups
        __props__.__dict__["http_policy_redirect"] = http_policy_redirect
        __props__.__dict__["icap_profile"] = icap_profile
        __props__.__dict__["identity_based_route"] = identity_based_route
        __props__.__dict__["inbound"] = inbound
        __props__.__dict__["inspection_mode"] = inspection_mode
        __props__.__dict__["internet_service"] = internet_service
        __props__.__dict__["internet_service6"] = internet_service6
        __props__.__dict__["internet_service6_custom_groups"] = internet_service6_custom_groups
        __props__.__dict__["internet_service6_customs"] = internet_service6_customs
        __props__.__dict__["internet_service6_groups"] = internet_service6_groups
        __props__.__dict__["internet_service6_names"] = internet_service6_names
        __props__.__dict__["internet_service6_negate"] = internet_service6_negate
        __props__.__dict__["internet_service6_src"] = internet_service6_src
        __props__.__dict__["internet_service6_src_custom_groups"] = internet_service6_src_custom_groups
        __props__.__dict__["internet_service6_src_customs"] = internet_service6_src_customs
        __props__.__dict__["internet_service6_src_groups"] = internet_service6_src_groups
        __props__.__dict__["internet_service6_src_names"] = internet_service6_src_names
        __props__.__dict__["internet_service6_src_negate"] = internet_service6_src_negate
        __props__.__dict__["internet_service_custom_groups"] = internet_service_custom_groups
        __props__.__dict__["internet_service_customs"] = internet_service_customs
        __props__.__dict__["internet_service_groups"] = internet_service_groups
        __props__.__dict__["internet_service_ids"] = internet_service_ids
        __props__.__dict__["internet_service_names"] = internet_service_names
        __props__.__dict__["internet_service_negate"] = internet_service_negate
        __props__.__dict__["internet_service_src"] = internet_service_src
        __props__.__dict__["internet_service_src_custom_groups"] = internet_service_src_custom_groups
        __props__.__dict__["internet_service_src_customs"] = internet_service_src_customs
        __props__.__dict__["internet_service_src_groups"] = internet_service_src_groups
        __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
        __props__.__dict__["internet_service_src_names"] = internet_service_src_names
        __props__.__dict__["internet_service_src_negate"] = internet_service_src_negate
        __props__.__dict__["ippool"] = ippool
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["ips_voip_filter"] = ips_voip_filter
        __props__.__dict__["label"] = label
        __props__.__dict__["learning_mode"] = learning_mode
        __props__.__dict__["logtraffic"] = logtraffic
        __props__.__dict__["logtraffic_start"] = logtraffic_start
        __props__.__dict__["match_vip"] = match_vip
        __props__.__dict__["match_vip_only"] = match_vip_only
        __props__.__dict__["name"] = name
        __props__.__dict__["nat"] = nat
        __props__.__dict__["nat46"] = nat46
        __props__.__dict__["nat64"] = nat64
        __props__.__dict__["natinbound"] = natinbound
        __props__.__dict__["natip"] = natip
        __props__.__dict__["natoutbound"] = natoutbound
        __props__.__dict__["network_service_dynamics"] = network_service_dynamics
        __props__.__dict__["network_service_src_dynamics"] = network_service_src_dynamics
        __props__.__dict__["np_acceleration"] = np_acceleration
        __props__.__dict__["ntlm"] = ntlm
        __props__.__dict__["ntlm_enabled_browsers"] = ntlm_enabled_browsers
        __props__.__dict__["ntlm_guest"] = ntlm_guest
        __props__.__dict__["outbound"] = outbound
        __props__.__dict__["passive_wan_health_measurement"] = passive_wan_health_measurement
        __props__.__dict__["pcp_inbound"] = pcp_inbound
        __props__.__dict__["pcp_outbound"] = pcp_outbound
        __props__.__dict__["pcp_poolnames"] = pcp_poolnames
        __props__.__dict__["per_ip_shaper"] = per_ip_shaper
        __props__.__dict__["permit_any_host"] = permit_any_host
        __props__.__dict__["permit_stun_host"] = permit_stun_host
        __props__.__dict__["policy_expiry"] = policy_expiry
        __props__.__dict__["policy_expiry_date"] = policy_expiry_date
        __props__.__dict__["policy_expiry_date_utc"] = policy_expiry_date_utc
        __props__.__dict__["policyid"] = policyid
        __props__.__dict__["poolname6s"] = poolname6s
        __props__.__dict__["poolnames"] = poolnames
        __props__.__dict__["profile_group"] = profile_group
        __props__.__dict__["profile_protocol_options"] = profile_protocol_options
        __props__.__dict__["profile_type"] = profile_type
        __props__.__dict__["radius_mac_auth_bypass"] = radius_mac_auth_bypass
        __props__.__dict__["redirect_url"] = redirect_url
        __props__.__dict__["replacemsg_override_group"] = replacemsg_override_group
        __props__.__dict__["reputation_direction"] = reputation_direction
        __props__.__dict__["reputation_direction6"] = reputation_direction6
        __props__.__dict__["reputation_minimum"] = reputation_minimum
        __props__.__dict__["reputation_minimum6"] = reputation_minimum6
        __props__.__dict__["rsso"] = rsso
        __props__.__dict__["rtp_addrs"] = rtp_addrs
        __props__.__dict__["rtp_nat"] = rtp_nat
        __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["schedule_timeout"] = schedule_timeout
        __props__.__dict__["sctp_filter_profile"] = sctp_filter_profile
        __props__.__dict__["send_deny_packet"] = send_deny_packet
        __props__.__dict__["service_negate"] = service_negate
        __props__.__dict__["services"] = services
        __props__.__dict__["session_ttl"] = session_ttl
        __props__.__dict__["sgt_check"] = sgt_check
        __props__.__dict__["sgts"] = sgts
        __props__.__dict__["spamfilter_profile"] = spamfilter_profile
        __props__.__dict__["src_vendor_macs"] = src_vendor_macs
        __props__.__dict__["srcaddr6_negate"] = srcaddr6_negate
        __props__.__dict__["srcaddr6s"] = srcaddr6s
        __props__.__dict__["srcaddr_negate"] = srcaddr_negate
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["srcintfs"] = srcintfs
        __props__.__dict__["ssh_filter_profile"] = ssh_filter_profile
        __props__.__dict__["ssh_policy_redirect"] = ssh_policy_redirect
        __props__.__dict__["ssl_mirror"] = ssl_mirror
        __props__.__dict__["ssl_mirror_intfs"] = ssl_mirror_intfs
        __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
        __props__.__dict__["status"] = status
        __props__.__dict__["tcp_mss_receiver"] = tcp_mss_receiver
        __props__.__dict__["tcp_mss_sender"] = tcp_mss_sender
        __props__.__dict__["tcp_session_without_syn"] = tcp_session_without_syn
        __props__.__dict__["timeout_send_rst"] = timeout_send_rst
        __props__.__dict__["tos"] = tos
        __props__.__dict__["tos_mask"] = tos_mask
        __props__.__dict__["tos_negate"] = tos_negate
        __props__.__dict__["traffic_shaper"] = traffic_shaper
        __props__.__dict__["traffic_shaper_reverse"] = traffic_shaper_reverse
        __props__.__dict__["url_categories"] = url_categories
        __props__.__dict__["users"] = users
        __props__.__dict__["utm_status"] = utm_status
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["videofilter_profile"] = videofilter_profile
        __props__.__dict__["vlan_cos_fwd"] = vlan_cos_fwd
        __props__.__dict__["vlan_cos_rev"] = vlan_cos_rev
        __props__.__dict__["vlan_filter"] = vlan_filter
        __props__.__dict__["voip_profile"] = voip_profile
        __props__.__dict__["vpntunnel"] = vpntunnel
        __props__.__dict__["waf_profile"] = waf_profile
        __props__.__dict__["wanopt"] = wanopt
        __props__.__dict__["wanopt_detection"] = wanopt_detection
        __props__.__dict__["wanopt_passive_opt"] = wanopt_passive_opt
        __props__.__dict__["wanopt_peer"] = wanopt_peer
        __props__.__dict__["wanopt_profile"] = wanopt_profile
        __props__.__dict__["wccp"] = wccp
        __props__.__dict__["webcache"] = webcache
        __props__.__dict__["webcache_https"] = webcache_https
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        __props__.__dict__["webproxy_forward_server"] = webproxy_forward_server
        __props__.__dict__["webproxy_profile"] = webproxy_profile
        __props__.__dict__["wsso"] = wsso
        __props__.__dict__["ztna_device_ownership"] = ztna_device_ownership
        __props__.__dict__["ztna_ems_tag_secondaries"] = ztna_ems_tag_secondaries
        __props__.__dict__["ztna_ems_tags"] = ztna_ems_tags
        __props__.__dict__["ztna_geo_tags"] = ztna_geo_tags
        __props__.__dict__["ztna_policy_redirect"] = ztna_policy_redirect
        __props__.__dict__["ztna_status"] = ztna_status
        __props__.__dict__["ztna_tags_match_logic"] = ztna_tags_match_logic
        return FirewallPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> pulumi.Output[str]:
        return pulumi.get(self, "anti_replay")

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyAppCategory']]]:
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appGroups")
    def app_groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyAppGroup']]]:
        return pulumi.get(self, "app_groups")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyApplication']]]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "auth_cert")

    @property
    @pulumi.getter(name="authPath")
    def auth_path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_path")

    @property
    @pulumi.getter(name="authRedirectAddr")
    def auth_redirect_addr(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "auth_redirect_addr")

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_asic_offload")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="blockNotification")
    def block_notification(self) -> pulumi.Output[str]:
        return pulumi.get(self, "block_notification")

    @property
    @pulumi.getter(name="captivePortalExempt")
    def captive_portal_exempt(self) -> pulumi.Output[str]:
        return pulumi.get(self, "captive_portal_exempt")

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "capture_packet")

    @property
    @pulumi.getter(name="cifsProfile")
    def cifs_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cifs_profile")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyCustomLogField']]]:
        return pulumi.get(self, "custom_log_fields")

    @property
    @pulumi.getter(name="decryptedTrafficMirror")
    def decrypted_traffic_mirror(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "decrypted_traffic_mirror")

    @property
    @pulumi.getter(name="delayTcpNpuSession")
    def delay_tcp_npu_session(self) -> pulumi.Output[str]:
        return pulumi.get(self, "delay_tcp_npu_session")

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyDevice']]]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="diffservCopy")
    def diffserv_copy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffserv_copy")

    @property
    @pulumi.getter(name="diffservForward")
    def diffserv_forward(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffserv_forward")

    @property
    @pulumi.getter(name="diffservReverse")
    def diffserv_reverse(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffserv_reverse")

    @property
    @pulumi.getter(name="diffservcodeForward")
    def diffservcode_forward(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffservcode_forward")

    @property
    @pulumi.getter(name="diffservcodeRev")
    def diffservcode_rev(self) -> pulumi.Output[str]:
        return pulumi.get(self, "diffservcode_rev")

    @property
    @pulumi.getter
    def disclaimer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "disclaimer")

    @property
    @pulumi.getter(name="dlpProfile")
    def dlp_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dlp_profile")

    @property
    @pulumi.getter(name="dlpSensor")
    def dlp_sensor(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dlp_sensor")

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dnsfilter_profile")

    @property
    @pulumi.getter
    def dsri(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dsri")

    @property
    @pulumi.getter(name="dstaddr6Negate")
    def dstaddr6_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dstaddr6_negate")

    @property
    @pulumi.getter
    def dstaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyDstaddr6']]]:
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter(name="dstaddrNegate")
    def dstaddr_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dstaddr_negate")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyDstaddr']]]:
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Output[Sequence['outputs.FirewallPolicyDstintf']]:
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter(name="dynamicShaping")
    def dynamic_shaping(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dynamic_shaping")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailCollect")
    def email_collect(self) -> pulumi.Output[str]:
        return pulumi.get(self, "email_collect")

    @property
    @pulumi.getter(name="emailfilterProfile")
    def emailfilter_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "emailfilter_profile")

    @property
    @pulumi.getter
    def fec(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fec")

    @property
    @pulumi.getter(name="fileFilterProfile")
    def file_filter_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "file_filter_profile")

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firewall_session_dirty")

    @property
    @pulumi.getter
    def fixedport(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fixedport")

    @property
    @pulumi.getter
    def fsso(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fsso")

    @property
    @pulumi.getter(name="fssoAgentForNtlm")
    def fsso_agent_for_ntlm(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fsso_agent_for_ntlm")

    @property
    @pulumi.getter(name="fssoGroups")
    def fsso_groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyFssoGroup']]]:
        return pulumi.get(self, "fsso_groups")

    @property
    @pulumi.getter(name="geoipAnycast")
    def geoip_anycast(self) -> pulumi.Output[str]:
        return pulumi.get(self, "geoip_anycast")

    @property
    @pulumi.getter(name="geoipMatch")
    def geoip_match(self) -> pulumi.Output[str]:
        return pulumi.get(self, "geoip_match")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="globalLabel")
    def global_label(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "global_label")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyGroup']]]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="httpPolicyRedirect")
    def http_policy_redirect(self) -> pulumi.Output[str]:
        return pulumi.get(self, "http_policy_redirect")

    @property
    @pulumi.getter(name="icapProfile")
    def icap_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "icap_profile")

    @property
    @pulumi.getter(name="identityBasedRoute")
    def identity_based_route(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "identity_based_route")

    @property
    @pulumi.getter
    def inbound(self) -> pulumi.Output[str]:
        return pulumi.get(self, "inbound")

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "inspection_mode")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetService6")
    def internet_service6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service6")

    @property
    @pulumi.getter(name="internetService6CustomGroups")
    def internet_service6_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetService6CustomGroup']]]:
        return pulumi.get(self, "internet_service6_custom_groups")

    @property
    @pulumi.getter(name="internetService6Customs")
    def internet_service6_customs(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetService6Custom']]]:
        return pulumi.get(self, "internet_service6_customs")

    @property
    @pulumi.getter(name="internetService6Groups")
    def internet_service6_groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetService6Group']]]:
        return pulumi.get(self, "internet_service6_groups")

    @property
    @pulumi.getter(name="internetService6Names")
    def internet_service6_names(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetService6Name']]]:
        return pulumi.get(self, "internet_service6_names")

    @property
    @pulumi.getter(name="internetService6Negate")
    def internet_service6_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service6_negate")

    @property
    @pulumi.getter(name="internetService6Src")
    def internet_service6_src(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service6_src")

    @property
    @pulumi.getter(name="internetService6SrcCustomGroups")
    def internet_service6_src_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetService6SrcCustomGroup']]]:
        return pulumi.get(self, "internet_service6_src_custom_groups")

    @property
    @pulumi.getter(name="internetService6SrcCustoms")
    def internet_service6_src_customs(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetService6SrcCustom']]]:
        return pulumi.get(self, "internet_service6_src_customs")

    @property
    @pulumi.getter(name="internetService6SrcGroups")
    def internet_service6_src_groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetService6SrcGroup']]]:
        return pulumi.get(self, "internet_service6_src_groups")

    @property
    @pulumi.getter(name="internetService6SrcNames")
    def internet_service6_src_names(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetService6SrcName']]]:
        return pulumi.get(self, "internet_service6_src_names")

    @property
    @pulumi.getter(name="internetService6SrcNegate")
    def internet_service6_src_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service6_src_negate")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetServiceCustomGroup']]]:
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetServiceCustom']]]:
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetServiceGroup']]]:
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetServiceId']]]:
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetServiceName']]]:
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="internetServiceNegate")
    def internet_service_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service_negate")

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service_src")

    @property
    @pulumi.getter(name="internetServiceSrcCustomGroups")
    def internet_service_src_custom_groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetServiceSrcCustomGroup']]]:
        return pulumi.get(self, "internet_service_src_custom_groups")

    @property
    @pulumi.getter(name="internetServiceSrcCustoms")
    def internet_service_src_customs(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetServiceSrcCustom']]]:
        return pulumi.get(self, "internet_service_src_customs")

    @property
    @pulumi.getter(name="internetServiceSrcGroups")
    def internet_service_src_groups(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetServiceSrcGroup']]]:
        return pulumi.get(self, "internet_service_src_groups")

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetServiceSrcId']]]:
        return pulumi.get(self, "internet_service_src_ids")

    @property
    @pulumi.getter(name="internetServiceSrcNames")
    def internet_service_src_names(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyInternetServiceSrcName']]]:
        return pulumi.get(self, "internet_service_src_names")

    @property
    @pulumi.getter(name="internetServiceSrcNegate")
    def internet_service_src_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service_src_negate")

    @property
    @pulumi.getter
    def ippool(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ippool")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter(name="ipsVoipFilter")
    def ips_voip_filter(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ips_voip_filter")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="learningMode")
    def learning_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "learning_mode")

    @property
    @pulumi.getter
    def logtraffic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> pulumi.Output[str]:
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter(name="matchVip")
    def match_vip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "match_vip")

    @property
    @pulumi.getter(name="matchVipOnly")
    def match_vip_only(self) -> pulumi.Output[str]:
        return pulumi.get(self, "match_vip_only")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def nat46(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat46")

    @property
    @pulumi.getter
    def nat64(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat64")

    @property
    @pulumi.getter
    def natinbound(self) -> pulumi.Output[str]:
        return pulumi.get(self, "natinbound")

    @property
    @pulumi.getter
    def natip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "natip")

    @property
    @pulumi.getter
    def natoutbound(self) -> pulumi.Output[str]:
        return pulumi.get(self, "natoutbound")

    @property
    @pulumi.getter(name="networkServiceDynamics")
    def network_service_dynamics(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyNetworkServiceDynamic']]]:
        return pulumi.get(self, "network_service_dynamics")

    @property
    @pulumi.getter(name="networkServiceSrcDynamics")
    def network_service_src_dynamics(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyNetworkServiceSrcDynamic']]]:
        return pulumi.get(self, "network_service_src_dynamics")

    @property
    @pulumi.getter(name="npAcceleration")
    def np_acceleration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "np_acceleration")

    @property
    @pulumi.getter
    def ntlm(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ntlm")

    @property
    @pulumi.getter(name="ntlmEnabledBrowsers")
    def ntlm_enabled_browsers(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyNtlmEnabledBrowser']]]:
        return pulumi.get(self, "ntlm_enabled_browsers")

    @property
    @pulumi.getter(name="ntlmGuest")
    def ntlm_guest(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ntlm_guest")

    @property
    @pulumi.getter
    def outbound(self) -> pulumi.Output[str]:
        return pulumi.get(self, "outbound")

    @property
    @pulumi.getter(name="passiveWanHealthMeasurement")
    def passive_wan_health_measurement(self) -> pulumi.Output[str]:
        return pulumi.get(self, "passive_wan_health_measurement")

    @property
    @pulumi.getter(name="pcpInbound")
    def pcp_inbound(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pcp_inbound")

    @property
    @pulumi.getter(name="pcpOutbound")
    def pcp_outbound(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pcp_outbound")

    @property
    @pulumi.getter(name="pcpPoolnames")
    def pcp_poolnames(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyPcpPoolname']]]:
        return pulumi.get(self, "pcp_poolnames")

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "per_ip_shaper")

    @property
    @pulumi.getter(name="permitAnyHost")
    def permit_any_host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "permit_any_host")

    @property
    @pulumi.getter(name="permitStunHost")
    def permit_stun_host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "permit_stun_host")

    @property
    @pulumi.getter(name="policyExpiry")
    def policy_expiry(self) -> pulumi.Output[str]:
        return pulumi.get(self, "policy_expiry")

    @property
    @pulumi.getter(name="policyExpiryDate")
    def policy_expiry_date(self) -> pulumi.Output[str]:
        return pulumi.get(self, "policy_expiry_date")

    @property
    @pulumi.getter(name="policyExpiryDateUtc")
    def policy_expiry_date_utc(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "policy_expiry_date_utc")

    @property
    @pulumi.getter
    def policyid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "policyid")

    @property
    @pulumi.getter
    def poolname6s(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyPoolname6']]]:
        return pulumi.get(self, "poolname6s")

    @property
    @pulumi.getter
    def poolnames(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyPoolname']]]:
        return pulumi.get(self, "poolnames")

    @property
    @pulumi.getter(name="profileGroup")
    def profile_group(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "profile_group")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> pulumi.Output[str]:
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter(name="radiusMacAuthBypass")
    def radius_mac_auth_bypass(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radius_mac_auth_bypass")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "replacemsg_override_group")

    @property
    @pulumi.getter(name="reputationDirection")
    def reputation_direction(self) -> pulumi.Output[str]:
        return pulumi.get(self, "reputation_direction")

    @property
    @pulumi.getter(name="reputationDirection6")
    def reputation_direction6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "reputation_direction6")

    @property
    @pulumi.getter(name="reputationMinimum")
    def reputation_minimum(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "reputation_minimum")

    @property
    @pulumi.getter(name="reputationMinimum6")
    def reputation_minimum6(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "reputation_minimum6")

    @property
    @pulumi.getter
    def rsso(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "rsso")

    @property
    @pulumi.getter(name="rtpAddrs")
    def rtp_addrs(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyRtpAddr']]]:
        return pulumi.get(self, "rtp_addrs")

    @property
    @pulumi.getter(name="rtpNat")
    def rtp_nat(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rtp_nat")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="scheduleTimeout")
    def schedule_timeout(self) -> pulumi.Output[str]:
        return pulumi.get(self, "schedule_timeout")

    @property
    @pulumi.getter(name="sctpFilterProfile")
    def sctp_filter_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "sctp_filter_profile")

    @property
    @pulumi.getter(name="sendDenyPacket")
    def send_deny_packet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "send_deny_packet")

    @property
    @pulumi.getter(name="serviceNegate")
    def service_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_negate")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyService']]]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="sgtCheck")
    def sgt_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sgt_check")

    @property
    @pulumi.getter
    def sgts(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicySgt']]]:
        return pulumi.get(self, "sgts")

    @property
    @pulumi.getter(name="spamfilterProfile")
    def spamfilter_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "spamfilter_profile")

    @property
    @pulumi.getter(name="srcVendorMacs")
    def src_vendor_macs(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicySrcVendorMac']]]:
        return pulumi.get(self, "src_vendor_macs")

    @property
    @pulumi.getter(name="srcaddr6Negate")
    def srcaddr6_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "srcaddr6_negate")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicySrcaddr6']]]:
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter(name="srcaddrNegate")
    def srcaddr_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "srcaddr_negate")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicySrcaddr']]]:
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Output[Sequence['outputs.FirewallPolicySrcintf']]:
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="sshFilterProfile")
    def ssh_filter_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ssh_filter_profile")

    @property
    @pulumi.getter(name="sshPolicyRedirect")
    def ssh_policy_redirect(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_policy_redirect")

    @property
    @pulumi.getter(name="sslMirror")
    def ssl_mirror(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ssl_mirror")

    @property
    @pulumi.getter(name="sslMirrorIntfs")
    def ssl_mirror_intfs(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicySslMirrorIntf']]]:
        return pulumi.get(self, "ssl_mirror_intfs")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tcpMssReceiver")
    def tcp_mss_receiver(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tcp_mss_receiver")

    @property
    @pulumi.getter(name="tcpMssSender")
    def tcp_mss_sender(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tcp_mss_sender")

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tcp_session_without_syn")

    @property
    @pulumi.getter(name="timeoutSendRst")
    def timeout_send_rst(self) -> pulumi.Output[str]:
        return pulumi.get(self, "timeout_send_rst")

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter(name="tosNegate")
    def tos_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tos_negate")

    @property
    @pulumi.getter(name="trafficShaper")
    def traffic_shaper(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "traffic_shaper")

    @property
    @pulumi.getter(name="trafficShaperReverse")
    def traffic_shaper_reverse(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "traffic_shaper_reverse")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyUrlCategory']]]:
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyUser']]]:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="videofilterProfile")
    def videofilter_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "videofilter_profile")

    @property
    @pulumi.getter(name="vlanCosFwd")
    def vlan_cos_fwd(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vlan_cos_fwd")

    @property
    @pulumi.getter(name="vlanCosRev")
    def vlan_cos_rev(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vlan_cos_rev")

    @property
    @pulumi.getter(name="vlanFilter")
    def vlan_filter(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vlan_filter")

    @property
    @pulumi.getter(name="voipProfile")
    def voip_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "voip_profile")

    @property
    @pulumi.getter
    def vpntunnel(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vpntunnel")

    @property
    @pulumi.getter(name="wafProfile")
    def waf_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "waf_profile")

    @property
    @pulumi.getter
    def wanopt(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wanopt")

    @property
    @pulumi.getter(name="wanoptDetection")
    def wanopt_detection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wanopt_detection")

    @property
    @pulumi.getter(name="wanoptPassiveOpt")
    def wanopt_passive_opt(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wanopt_passive_opt")

    @property
    @pulumi.getter(name="wanoptPeer")
    def wanopt_peer(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "wanopt_peer")

    @property
    @pulumi.getter(name="wanoptProfile")
    def wanopt_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "wanopt_profile")

    @property
    @pulumi.getter
    def wccp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wccp")

    @property
    @pulumi.getter
    def webcache(self) -> pulumi.Output[str]:
        return pulumi.get(self, "webcache")

    @property
    @pulumi.getter(name="webcacheHttps")
    def webcache_https(self) -> pulumi.Output[str]:
        return pulumi.get(self, "webcache_https")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "webfilter_profile")

    @property
    @pulumi.getter(name="webproxyForwardServer")
    def webproxy_forward_server(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "webproxy_forward_server")

    @property
    @pulumi.getter(name="webproxyProfile")
    def webproxy_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "webproxy_profile")

    @property
    @pulumi.getter
    def wsso(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "wsso")

    @property
    @pulumi.getter(name="ztnaDeviceOwnership")
    def ztna_device_ownership(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ztna_device_ownership")

    @property
    @pulumi.getter(name="ztnaEmsTagSecondaries")
    def ztna_ems_tag_secondaries(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyZtnaEmsTagSecondary']]]:
        return pulumi.get(self, "ztna_ems_tag_secondaries")

    @property
    @pulumi.getter(name="ztnaEmsTags")
    def ztna_ems_tags(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyZtnaEmsTag']]]:
        return pulumi.get(self, "ztna_ems_tags")

    @property
    @pulumi.getter(name="ztnaGeoTags")
    def ztna_geo_tags(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallPolicyZtnaGeoTag']]]:
        return pulumi.get(self, "ztna_geo_tags")

    @property
    @pulumi.getter(name="ztnaPolicyRedirect")
    def ztna_policy_redirect(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ztna_policy_redirect")

    @property
    @pulumi.getter(name="ztnaStatus")
    def ztna_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ztna_status")

    @property
    @pulumi.getter(name="ztnaTagsMatchLogic")
    def ztna_tags_match_logic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ztna_tags_match_logic")

