# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemFabricVpnArgs', 'SystemFabricVpn']

@pulumi.input_type
class SystemFabricVpnArgs:
    def __init__(__self__, *,
                 advertised_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnAdvertisedSubnetArgs']]]] = None,
                 bgp_as: Optional[pulumi.Input[int]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[str]] = None,
                 loopback_address_block: Optional[pulumi.Input[str]] = None,
                 loopback_advertised_subnet: Optional[pulumi.Input[int]] = None,
                 loopback_interface: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnOverlayArgs']]]] = None,
                 policy_rule: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 sdwan_zone: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_role: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemFabricVpn resource.
        """
        if advertised_subnets is not None:
            pulumi.set(__self__, "advertised_subnets", advertised_subnets)
        if bgp_as is not None:
            pulumi.set(__self__, "bgp_as", bgp_as)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if loopback_address_block is not None:
            pulumi.set(__self__, "loopback_address_block", loopback_address_block)
        if loopback_advertised_subnet is not None:
            pulumi.set(__self__, "loopback_advertised_subnet", loopback_advertised_subnet)
        if loopback_interface is not None:
            pulumi.set(__self__, "loopback_interface", loopback_interface)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)
        if policy_rule is not None:
            pulumi.set(__self__, "policy_rule", policy_rule)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if sdwan_zone is not None:
            pulumi.set(__self__, "sdwan_zone", sdwan_zone)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vpn_role is not None:
            pulumi.set(__self__, "vpn_role", vpn_role)

    @property
    @pulumi.getter(name="advertisedSubnets")
    def advertised_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnAdvertisedSubnetArgs']]]]:
        return pulumi.get(self, "advertised_subnets")

    @advertised_subnets.setter
    def advertised_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnAdvertisedSubnetArgs']]]]):
        pulumi.set(self, "advertised_subnets", value)

    @property
    @pulumi.getter(name="bgpAs")
    def bgp_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bgp_as")

    @bgp_as.setter
    def bgp_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_as", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="loopbackAddressBlock")
    def loopback_address_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loopback_address_block")

    @loopback_address_block.setter
    def loopback_address_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_address_block", value)

    @property
    @pulumi.getter(name="loopbackAdvertisedSubnet")
    def loopback_advertised_subnet(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "loopback_advertised_subnet")

    @loopback_advertised_subnet.setter
    def loopback_advertised_subnet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "loopback_advertised_subnet", value)

    @property
    @pulumi.getter(name="loopbackInterface")
    def loopback_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loopback_interface")

    @loopback_interface.setter
    def loopback_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_interface", value)

    @property
    @pulumi.getter
    def overlays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnOverlayArgs']]]]:
        return pulumi.get(self, "overlays")

    @overlays.setter
    def overlays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnOverlayArgs']]]]):
        pulumi.set(self, "overlays", value)

    @property
    @pulumi.getter(name="policyRule")
    def policy_rule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_rule")

    @policy_rule.setter
    def policy_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_rule", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="sdwanZone")
    def sdwan_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sdwan_zone")

    @sdwan_zone.setter
    def sdwan_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdwan_zone", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_mode")

    @sync_mode.setter
    def sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vpnRole")
    def vpn_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_role")

    @vpn_role.setter
    def vpn_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_role", value)


@pulumi.input_type
class _SystemFabricVpnState:
    def __init__(__self__, *,
                 advertised_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnAdvertisedSubnetArgs']]]] = None,
                 bgp_as: Optional[pulumi.Input[int]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[str]] = None,
                 loopback_address_block: Optional[pulumi.Input[str]] = None,
                 loopback_advertised_subnet: Optional[pulumi.Input[int]] = None,
                 loopback_interface: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnOverlayArgs']]]] = None,
                 policy_rule: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 sdwan_zone: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_role: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemFabricVpn resources.
        """
        if advertised_subnets is not None:
            pulumi.set(__self__, "advertised_subnets", advertised_subnets)
        if bgp_as is not None:
            pulumi.set(__self__, "bgp_as", bgp_as)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if loopback_address_block is not None:
            pulumi.set(__self__, "loopback_address_block", loopback_address_block)
        if loopback_advertised_subnet is not None:
            pulumi.set(__self__, "loopback_advertised_subnet", loopback_advertised_subnet)
        if loopback_interface is not None:
            pulumi.set(__self__, "loopback_interface", loopback_interface)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)
        if policy_rule is not None:
            pulumi.set(__self__, "policy_rule", policy_rule)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if sdwan_zone is not None:
            pulumi.set(__self__, "sdwan_zone", sdwan_zone)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vpn_role is not None:
            pulumi.set(__self__, "vpn_role", vpn_role)

    @property
    @pulumi.getter(name="advertisedSubnets")
    def advertised_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnAdvertisedSubnetArgs']]]]:
        return pulumi.get(self, "advertised_subnets")

    @advertised_subnets.setter
    def advertised_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnAdvertisedSubnetArgs']]]]):
        pulumi.set(self, "advertised_subnets", value)

    @property
    @pulumi.getter(name="bgpAs")
    def bgp_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bgp_as")

    @bgp_as.setter
    def bgp_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_as", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="loopbackAddressBlock")
    def loopback_address_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loopback_address_block")

    @loopback_address_block.setter
    def loopback_address_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_address_block", value)

    @property
    @pulumi.getter(name="loopbackAdvertisedSubnet")
    def loopback_advertised_subnet(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "loopback_advertised_subnet")

    @loopback_advertised_subnet.setter
    def loopback_advertised_subnet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "loopback_advertised_subnet", value)

    @property
    @pulumi.getter(name="loopbackInterface")
    def loopback_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loopback_interface")

    @loopback_interface.setter
    def loopback_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_interface", value)

    @property
    @pulumi.getter
    def overlays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnOverlayArgs']]]]:
        return pulumi.get(self, "overlays")

    @overlays.setter
    def overlays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemFabricVpnOverlayArgs']]]]):
        pulumi.set(self, "overlays", value)

    @property
    @pulumi.getter(name="policyRule")
    def policy_rule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_rule")

    @policy_rule.setter
    def policy_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_rule", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="sdwanZone")
    def sdwan_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sdwan_zone")

    @sdwan_zone.setter
    def sdwan_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdwan_zone", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_mode")

    @sync_mode.setter
    def sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vpnRole")
    def vpn_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_role")

    @vpn_role.setter
    def vpn_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_role", value)


class SystemFabricVpn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advertised_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemFabricVpnAdvertisedSubnetArgs']]]]] = None,
                 bgp_as: Optional[pulumi.Input[int]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[str]] = None,
                 loopback_address_block: Optional[pulumi.Input[str]] = None,
                 loopback_advertised_subnet: Optional[pulumi.Input[int]] = None,
                 loopback_interface: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemFabricVpnOverlayArgs']]]]] = None,
                 policy_rule: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 sdwan_zone: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemFabricVpn resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemFabricVpnArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemFabricVpn resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemFabricVpnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemFabricVpnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advertised_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemFabricVpnAdvertisedSubnetArgs']]]]] = None,
                 bgp_as: Optional[pulumi.Input[int]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[str]] = None,
                 loopback_address_block: Optional[pulumi.Input[str]] = None,
                 loopback_advertised_subnet: Optional[pulumi.Input[int]] = None,
                 loopback_interface: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemFabricVpnOverlayArgs']]]]] = None,
                 policy_rule: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 sdwan_zone: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemFabricVpnArgs.__new__(SystemFabricVpnArgs)

            __props__.__dict__["advertised_subnets"] = advertised_subnets
            __props__.__dict__["bgp_as"] = bgp_as
            __props__.__dict__["branch_name"] = branch_name
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["health_checks"] = health_checks
            __props__.__dict__["loopback_address_block"] = loopback_address_block
            __props__.__dict__["loopback_advertised_subnet"] = loopback_advertised_subnet
            __props__.__dict__["loopback_interface"] = loopback_interface
            __props__.__dict__["overlays"] = overlays
            __props__.__dict__["policy_rule"] = policy_rule
            __props__.__dict__["psksecret"] = psksecret
            __props__.__dict__["sdwan_zone"] = sdwan_zone
            __props__.__dict__["status"] = status
            __props__.__dict__["sync_mode"] = sync_mode
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vpn_role"] = vpn_role
        super(SystemFabricVpn, __self__).__init__(
            'fortios:index/systemFabricVpn:SystemFabricVpn',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            advertised_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemFabricVpnAdvertisedSubnetArgs']]]]] = None,
            bgp_as: Optional[pulumi.Input[int]] = None,
            branch_name: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            health_checks: Optional[pulumi.Input[str]] = None,
            loopback_address_block: Optional[pulumi.Input[str]] = None,
            loopback_advertised_subnet: Optional[pulumi.Input[int]] = None,
            loopback_interface: Optional[pulumi.Input[str]] = None,
            overlays: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemFabricVpnOverlayArgs']]]]] = None,
            policy_rule: Optional[pulumi.Input[str]] = None,
            psksecret: Optional[pulumi.Input[str]] = None,
            sdwan_zone: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            sync_mode: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vpn_role: Optional[pulumi.Input[str]] = None) -> 'SystemFabricVpn':
        """
        Get an existing SystemFabricVpn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemFabricVpnState.__new__(_SystemFabricVpnState)

        __props__.__dict__["advertised_subnets"] = advertised_subnets
        __props__.__dict__["bgp_as"] = bgp_as
        __props__.__dict__["branch_name"] = branch_name
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["health_checks"] = health_checks
        __props__.__dict__["loopback_address_block"] = loopback_address_block
        __props__.__dict__["loopback_advertised_subnet"] = loopback_advertised_subnet
        __props__.__dict__["loopback_interface"] = loopback_interface
        __props__.__dict__["overlays"] = overlays
        __props__.__dict__["policy_rule"] = policy_rule
        __props__.__dict__["psksecret"] = psksecret
        __props__.__dict__["sdwan_zone"] = sdwan_zone
        __props__.__dict__["status"] = status
        __props__.__dict__["sync_mode"] = sync_mode
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vpn_role"] = vpn_role
        return SystemFabricVpn(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="advertisedSubnets")
    def advertised_subnets(self) -> pulumi.Output[Optional[Sequence['outputs.SystemFabricVpnAdvertisedSubnet']]]:
        return pulumi.get(self, "advertised_subnets")

    @property
    @pulumi.getter(name="bgpAs")
    def bgp_as(self) -> pulumi.Output[int]:
        return pulumi.get(self, "bgp_as")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> pulumi.Output[str]:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="loopbackAddressBlock")
    def loopback_address_block(self) -> pulumi.Output[str]:
        return pulumi.get(self, "loopback_address_block")

    @property
    @pulumi.getter(name="loopbackAdvertisedSubnet")
    def loopback_advertised_subnet(self) -> pulumi.Output[int]:
        return pulumi.get(self, "loopback_advertised_subnet")

    @property
    @pulumi.getter(name="loopbackInterface")
    def loopback_interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "loopback_interface")

    @property
    @pulumi.getter
    def overlays(self) -> pulumi.Output[Optional[Sequence['outputs.SystemFabricVpnOverlay']]]:
        return pulumi.get(self, "overlays")

    @property
    @pulumi.getter(name="policyRule")
    def policy_rule(self) -> pulumi.Output[str]:
        return pulumi.get(self, "policy_rule")

    @property
    @pulumi.getter
    def psksecret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "psksecret")

    @property
    @pulumi.getter(name="sdwanZone")
    def sdwan_zone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sdwan_zone")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sync_mode")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vpnRole")
    def vpn_role(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vpn_role")

